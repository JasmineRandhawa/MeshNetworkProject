
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	40 b3 00 20 f5 66 00 00 dd 67 02 00 25 67 00 00     @.. .f...g..%g..
  10:	25 67 00 00 25 67 00 00 25 67 00 00 00 00 00 00     %g..%g..%g......
	...
  2c:	f5 64 00 00 25 67 00 00 00 00 00 00 ad 64 00 00     .d..%g.......d..
  3c:	37 56 02 00                                         7V..

00000040 <_irq_vector_table>:
  40:	b5 66 00 00 f9 c7 01 00 b5 66 00 00 b5 66 00 00     .f.......f...f..
  50:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  60:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  70:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  80:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  90:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  a0:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  b0:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  c0:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  d0:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  e0:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..
  f0:	b5 66 00 00 b5 66 00 00 b5 66 00 00 b5 66 00 00     .f...f...f...f..

Disassembly of section text:

00000100 <__aeabi_ldivmod>:
     100:	b97b      	cbnz	r3, 122 <__aeabi_ldivmod+0x22>
     102:	b972      	cbnz	r2, 122 <__aeabi_ldivmod+0x22>
     104:	2900      	cmp	r1, #0
     106:	bfbe      	ittt	lt
     108:	2000      	movlt	r0, #0
     10a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     10e:	e006      	blt.n	11e <__aeabi_ldivmod+0x1e>
     110:	bf08      	it	eq
     112:	2800      	cmpeq	r0, #0
     114:	bf1c      	itt	ne
     116:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     11a:	f04f 30ff 	movne.w	r0, #4294967295
     11e:	f000 b9cb 	b.w	4b8 <__aeabi_idiv0>
     122:	f1ad 0c08 	sub.w	ip, sp, #8
     126:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     12a:	2900      	cmp	r1, #0
     12c:	db09      	blt.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	2b00      	cmp	r3, #0
     130:	db1a      	blt.n	168 <CONFIG_IDLE_STACK_SIZE+0x28>
     132:	f000 f861 	bl	1f8 <__udivmoddi4>
     136:	f8dd e004 	ldr.w	lr, [sp, #4]
     13a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     13e:	b004      	add	sp, #16
     140:	4770      	bx	lr
     142:	4240      	negs	r0, r0
     144:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     148:	2b00      	cmp	r3, #0
     14a:	db1b      	blt.n	184 <CONFIG_IDLE_STACK_SIZE+0x44>
     14c:	f000 f854 	bl	1f8 <__udivmoddi4>
     150:	f8dd e004 	ldr.w	lr, [sp, #4]
     154:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     158:	b004      	add	sp, #16
     15a:	4240      	negs	r0, r0
     15c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     160:	4252      	negs	r2, r2
     162:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     166:	4770      	bx	lr
     168:	4252      	negs	r2, r2
     16a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     16e:	f000 f843 	bl	1f8 <__udivmoddi4>
     172:	f8dd e004 	ldr.w	lr, [sp, #4]
     176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     17a:	b004      	add	sp, #16
     17c:	4240      	negs	r0, r0
     17e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     182:	4770      	bx	lr
     184:	4252      	negs	r2, r2
     186:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     18a:	f000 f835 	bl	1f8 <__udivmoddi4>
     18e:	f8dd e004 	ldr.w	lr, [sp, #4]
     192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     196:	b004      	add	sp, #16
     198:	4252      	negs	r2, r2
     19a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     19e:	4770      	bx	lr

000001a0 <__aeabi_uldivmod>:
     1a0:	b953      	cbnz	r3, 1b8 <__aeabi_uldivmod+0x18>
     1a2:	b94a      	cbnz	r2, 1b8 <__aeabi_uldivmod+0x18>
     1a4:	2900      	cmp	r1, #0
     1a6:	bf08      	it	eq
     1a8:	2800      	cmpeq	r0, #0
     1aa:	bf1c      	itt	ne
     1ac:	f04f 31ff 	movne.w	r1, #4294967295
     1b0:	f04f 30ff 	movne.w	r0, #4294967295
     1b4:	f000 b980 	b.w	4b8 <__aeabi_idiv0>
     1b8:	f1ad 0c08 	sub.w	ip, sp, #8
     1bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1c0:	f000 f81a 	bl	1f8 <__udivmoddi4>
     1c4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1cc:	b004      	add	sp, #16
     1ce:	4770      	bx	lr

000001d0 <__popcountsi2>:
     1d0:	0843      	lsrs	r3, r0, #1
     1d2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     1d6:	1ac0      	subs	r0, r0, r3
     1d8:	0883      	lsrs	r3, r0, #2
     1da:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     1de:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     1e2:	4418      	add	r0, r3
     1e4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     1e8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     1ec:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     1f0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     1f4:	0e00      	lsrs	r0, r0, #24
     1f6:	4770      	bx	lr

000001f8 <__udivmoddi4>:
     1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1fc:	9e08      	ldr	r6, [sp, #32]
     1fe:	460d      	mov	r5, r1
     200:	4604      	mov	r4, r0
     202:	468e      	mov	lr, r1
     204:	2b00      	cmp	r3, #0
     206:	f040 8082 	bne.w	30e <CONFIG_BT_MESH_ADV_STACK_SIZE+0xe>
     20a:	428a      	cmp	r2, r1
     20c:	4617      	mov	r7, r2
     20e:	d946      	bls.n	29e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     210:	fab2 f282 	clz	r2, r2
     214:	b14a      	cbz	r2, 22a <CONFIG_UART_MUX_RX_STACK_SIZE+0x2a>
     216:	f1c2 0120 	rsb	r1, r2, #32
     21a:	fa05 f302 	lsl.w	r3, r5, r2
     21e:	fa20 f101 	lsr.w	r1, r0, r1
     222:	4097      	lsls	r7, r2
     224:	ea41 0e03 	orr.w	lr, r1, r3
     228:	4094      	lsls	r4, r2
     22a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     22e:	0c23      	lsrs	r3, r4, #16
     230:	fbbe fcf8 	udiv	ip, lr, r8
     234:	b2b9      	uxth	r1, r7
     236:	fb08 ee1c 	mls	lr, r8, ip, lr
     23a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     23e:	fb0c f001 	mul.w	r0, ip, r1
     242:	4298      	cmp	r0, r3
     244:	d90a      	bls.n	25c <CONFIG_UART_MUX_RX_STACK_SIZE+0x5c>
     246:	18fb      	adds	r3, r7, r3
     248:	f10c 35ff 	add.w	r5, ip, #4294967295
     24c:	f080 8116 	bcs.w	47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     250:	4298      	cmp	r0, r3
     252:	f240 8113 	bls.w	47c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x30>
     256:	f1ac 0c02 	sub.w	ip, ip, #2
     25a:	443b      	add	r3, r7
     25c:	1a1b      	subs	r3, r3, r0
     25e:	b2a4      	uxth	r4, r4
     260:	fbb3 f0f8 	udiv	r0, r3, r8
     264:	fb08 3310 	mls	r3, r8, r0, r3
     268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     26c:	fb00 f101 	mul.w	r1, r0, r1
     270:	42a1      	cmp	r1, r4
     272:	d909      	bls.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     274:	193c      	adds	r4, r7, r4
     276:	f100 33ff 	add.w	r3, r0, #4294967295
     27a:	f080 8101 	bcs.w	480 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     27e:	42a1      	cmp	r1, r4
     280:	f240 80fe 	bls.w	480 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     284:	3802      	subs	r0, #2
     286:	443c      	add	r4, r7
     288:	1a64      	subs	r4, r4, r1
     28a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     28e:	2100      	movs	r1, #0
     290:	b11e      	cbz	r6, 29a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     292:	40d4      	lsrs	r4, r2
     294:	2300      	movs	r3, #0
     296:	e9c6 4300 	strd	r4, r3, [r6]
     29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29e:	b902      	cbnz	r2, 2a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x22>
     2a0:	deff      	udf	#255	; 0xff
     2a2:	fab2 f282 	clz	r2, r2
     2a6:	2a00      	cmp	r2, #0
     2a8:	d14f      	bne.n	34a <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4a>
     2aa:	1bcb      	subs	r3, r1, r7
     2ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2b0:	fa1f f887 	uxth.w	r8, r7
     2b4:	2101      	movs	r1, #1
     2b6:	fbb3 fcfe 	udiv	ip, r3, lr
     2ba:	0c25      	lsrs	r5, r4, #16
     2bc:	fb0e 331c 	mls	r3, lr, ip, r3
     2c0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2c4:	fb08 f30c 	mul.w	r3, r8, ip
     2c8:	42ab      	cmp	r3, r5
     2ca:	d907      	bls.n	2dc <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>
     2cc:	197d      	adds	r5, r7, r5
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295
     2d2:	d202      	bcs.n	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     2d4:	42ab      	cmp	r3, r5
     2d6:	f200 80e7 	bhi.w	4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x5c>
     2da:	4684      	mov	ip, r0
     2dc:	1aed      	subs	r5, r5, r3
     2de:	b2a3      	uxth	r3, r4
     2e0:	fbb5 f0fe 	udiv	r0, r5, lr
     2e4:	fb0e 5510 	mls	r5, lr, r0, r5
     2e8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     2ec:	fb08 f800 	mul.w	r8, r8, r0
     2f0:	45a0      	cmp	r8, r4
     2f2:	d907      	bls.n	304 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4>
     2f4:	193c      	adds	r4, r7, r4
     2f6:	f100 33ff 	add.w	r3, r0, #4294967295
     2fa:	d202      	bcs.n	302 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x2>
     2fc:	45a0      	cmp	r8, r4
     2fe:	f200 80d7 	bhi.w	4b0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x64>
     302:	4618      	mov	r0, r3
     304:	eba4 0408 	sub.w	r4, r4, r8
     308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     30c:	e7c0      	b.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     30e:	428b      	cmp	r3, r1
     310:	d908      	bls.n	324 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x24>
     312:	2e00      	cmp	r6, #0
     314:	f000 80af 	beq.w	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2a>
     318:	2100      	movs	r1, #0
     31a:	e9c6 0500 	strd	r0, r5, [r6]
     31e:	4608      	mov	r0, r1
     320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     324:	fab3 f183 	clz	r1, r3
     328:	2900      	cmp	r1, #0
     32a:	d14b      	bne.n	3c4 <CONFIG_BT_RPA_TIMEOUT+0x40>
     32c:	42ab      	cmp	r3, r5
     32e:	d302      	bcc.n	336 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x36>
     330:	4282      	cmp	r2, r0
     332:	f200 80b7 	bhi.w	4a4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x58>
     336:	1a84      	subs	r4, r0, r2
     338:	eb65 0303 	sbc.w	r3, r5, r3
     33c:	2001      	movs	r0, #1
     33e:	469e      	mov	lr, r3
     340:	2e00      	cmp	r6, #0
     342:	d0aa      	beq.n	29a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     344:	e9c6 4e00 	strd	r4, lr, [r6]
     348:	e7a7      	b.n	29a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     34a:	f1c2 0c20 	rsb	ip, r2, #32
     34e:	fa01 f302 	lsl.w	r3, r1, r2
     352:	4097      	lsls	r7, r2
     354:	fa20 f00c 	lsr.w	r0, r0, ip
     358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     35c:	fa21 fc0c 	lsr.w	ip, r1, ip
     360:	4318      	orrs	r0, r3
     362:	fbbc f1fe 	udiv	r1, ip, lr
     366:	0c05      	lsrs	r5, r0, #16
     368:	fb0e cc11 	mls	ip, lr, r1, ip
     36c:	fa1f f887 	uxth.w	r8, r7
     370:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     374:	fb01 f308 	mul.w	r3, r1, r8
     378:	42ab      	cmp	r3, r5
     37a:	fa04 f402 	lsl.w	r4, r4, r2
     37e:	d909      	bls.n	394 <CONFIG_BT_RPA_TIMEOUT+0x10>
     380:	197d      	adds	r5, r7, r5
     382:	f101 3cff 	add.w	ip, r1, #4294967295
     386:	f080 808b 	bcs.w	4a0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
     38a:	42ab      	cmp	r3, r5
     38c:	f240 8088 	bls.w	4a0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
     390:	3902      	subs	r1, #2
     392:	443d      	add	r5, r7
     394:	1aeb      	subs	r3, r5, r3
     396:	b285      	uxth	r5, r0
     398:	fbb3 f0fe 	udiv	r0, r3, lr
     39c:	fb0e 3310 	mls	r3, lr, r0, r3
     3a0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3a4:	fb00 f308 	mul.w	r3, r0, r8
     3a8:	42ab      	cmp	r3, r5
     3aa:	d907      	bls.n	3bc <CONFIG_BT_RPA_TIMEOUT+0x38>
     3ac:	197d      	adds	r5, r7, r5
     3ae:	f100 3cff 	add.w	ip, r0, #4294967295
     3b2:	d271      	bcs.n	498 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>
     3b4:	42ab      	cmp	r3, r5
     3b6:	d96f      	bls.n	498 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>
     3b8:	3802      	subs	r0, #2
     3ba:	443d      	add	r5, r7
     3bc:	1aeb      	subs	r3, r5, r3
     3be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3c2:	e778      	b.n	2b6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     3c4:	f1c1 0c20 	rsb	ip, r1, #32
     3c8:	408b      	lsls	r3, r1
     3ca:	fa22 f70c 	lsr.w	r7, r2, ip
     3ce:	431f      	orrs	r7, r3
     3d0:	fa20 f40c 	lsr.w	r4, r0, ip
     3d4:	fa05 f301 	lsl.w	r3, r5, r1
     3d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3dc:	fa25 f50c 	lsr.w	r5, r5, ip
     3e0:	431c      	orrs	r4, r3
     3e2:	0c23      	lsrs	r3, r4, #16
     3e4:	fbb5 f9fe 	udiv	r9, r5, lr
     3e8:	fa1f f887 	uxth.w	r8, r7
     3ec:	fb0e 5519 	mls	r5, lr, r9, r5
     3f0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     3f4:	fb09 fa08 	mul.w	sl, r9, r8
     3f8:	45aa      	cmp	sl, r5
     3fa:	fa02 f201 	lsl.w	r2, r2, r1
     3fe:	fa00 f301 	lsl.w	r3, r0, r1
     402:	d908      	bls.n	416 <CONFIG_FLASH_SIZE+0x16>
     404:	197d      	adds	r5, r7, r5
     406:	f109 30ff 	add.w	r0, r9, #4294967295
     40a:	d247      	bcs.n	49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>
     40c:	45aa      	cmp	sl, r5
     40e:	d945      	bls.n	49c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>
     410:	f1a9 0902 	sub.w	r9, r9, #2
     414:	443d      	add	r5, r7
     416:	eba5 050a 	sub.w	r5, r5, sl
     41a:	b2a4      	uxth	r4, r4
     41c:	fbb5 f0fe 	udiv	r0, r5, lr
     420:	fb0e 5510 	mls	r5, lr, r0, r5
     424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     428:	fb00 f808 	mul.w	r8, r0, r8
     42c:	45a0      	cmp	r8, r4
     42e:	d907      	bls.n	440 <CONFIG_FLASH_SIZE+0x40>
     430:	193c      	adds	r4, r7, r4
     432:	f100 35ff 	add.w	r5, r0, #4294967295
     436:	d22d      	bcs.n	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x48>
     438:	45a0      	cmp	r8, r4
     43a:	d92b      	bls.n	494 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x48>
     43c:	3802      	subs	r0, #2
     43e:	443c      	add	r4, r7
     440:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     444:	eba4 0408 	sub.w	r4, r4, r8
     448:	fba0 8902 	umull	r8, r9, r0, r2
     44c:	454c      	cmp	r4, r9
     44e:	46c6      	mov	lr, r8
     450:	464d      	mov	r5, r9
     452:	d319      	bcc.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3c>
     454:	d016      	beq.n	484 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x38>
     456:	b15e      	cbz	r6, 470 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x24>
     458:	ebb3 020e 	subs.w	r2, r3, lr
     45c:	eb64 0405 	sbc.w	r4, r4, r5
     460:	fa04 fc0c 	lsl.w	ip, r4, ip
     464:	40ca      	lsrs	r2, r1
     466:	ea4c 0202 	orr.w	r2, ip, r2
     46a:	40cc      	lsrs	r4, r1
     46c:	e9c6 2400 	strd	r2, r4, [r6]
     470:	2100      	movs	r1, #0
     472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     476:	4631      	mov	r1, r6
     478:	4630      	mov	r0, r6
     47a:	e70e      	b.n	29a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     47c:	46ac      	mov	ip, r5
     47e:	e6ed      	b.n	25c <CONFIG_UART_MUX_RX_STACK_SIZE+0x5c>
     480:	4618      	mov	r0, r3
     482:	e701      	b.n	288 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
     484:	4543      	cmp	r3, r8
     486:	d2e6      	bcs.n	456 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
     488:	ebb8 0e02 	subs.w	lr, r8, r2
     48c:	eb69 0507 	sbc.w	r5, r9, r7
     490:	3801      	subs	r0, #1
     492:	e7e0      	b.n	456 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
     494:	4628      	mov	r0, r5
     496:	e7d3      	b.n	440 <CONFIG_FLASH_SIZE+0x40>
     498:	4660      	mov	r0, ip
     49a:	e78f      	b.n	3bc <CONFIG_BT_RPA_TIMEOUT+0x38>
     49c:	4681      	mov	r9, r0
     49e:	e7ba      	b.n	416 <CONFIG_FLASH_SIZE+0x16>
     4a0:	4661      	mov	r1, ip
     4a2:	e777      	b.n	394 <CONFIG_BT_RPA_TIMEOUT+0x10>
     4a4:	4608      	mov	r0, r1
     4a6:	e74b      	b.n	340 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x40>
     4a8:	f1ac 0c02 	sub.w	ip, ip, #2
     4ac:	443d      	add	r5, r7
     4ae:	e715      	b.n	2dc <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>
     4b0:	3802      	subs	r0, #2
     4b2:	443c      	add	r4, r7
     4b4:	e726      	b.n	304 <CONFIG_BT_MESH_ADV_STACK_SIZE+0x4>
     4b6:	bf00      	nop

000004b8 <__aeabi_idiv0>:
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	0000      	movs	r0, r0
	...

000004c0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     4c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     4c2:	4d3f      	ldr	r5, [pc, #252]	; (5c0 <bt_init+0x100>)
     4c4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     4c8:	6899      	ldr	r1, [r3, #8]
     4ca:	f011 0101 	ands.w	r1, r1, #1
     4ce:	d121      	bne.n	514 <bt_init+0x54>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     4d0:	aa01      	add	r2, sp, #4
     4d2:	f640 4003 	movw	r0, #3075	; 0xc03
     4d6:	f007 f92f 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
     4da:	4604      	mov	r4, r0
     4dc:	2800      	cmp	r0, #0
     4de:	d16c      	bne.n	5ba <bt_init+0xfa>
		hci_reset_complete(rsp);
     4e0:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
     4e2:	689b      	ldr	r3, [r3, #8]
	if (status) {
     4e4:	781b      	ldrb	r3, [r3, #0]
     4e6:	b993      	cbnz	r3, 50e <bt_init+0x4e>
	scan_dev_found_cb = NULL;
     4e8:	4a36      	ldr	r2, [pc, #216]	; (5c4 <bt_init+0x104>)
     4ea:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     4ec:	f105 0398 	add.w	r3, r5, #152	; 0x98
     4f0:	4618      	mov	r0, r3
     4f2:	f026 fd9c 	bl	2702e <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     4f6:	f3bf 8f5b 	dmb	ish
     4fa:	f000 0005 	and.w	r0, r0, #5
     4fe:	e853 2f00 	ldrex	r2, [r3]
     502:	e843 0100 	strex	r1, r0, [r3]
     506:	2900      	cmp	r1, #0
     508:	d1f9      	bne.n	4fe <bt_init+0x3e>
     50a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     50e:	9801      	ldr	r0, [sp, #4]
     510:	f01f fc3c 	bl	1fd8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     514:	aa01      	add	r2, sp, #4
     516:	2100      	movs	r1, #0
     518:	f241 0003 	movw	r0, #4099	; 0x1003
     51c:	f007 f90c 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     520:	4604      	mov	r4, r0
     522:	2800      	cmp	r0, #0
     524:	d149      	bne.n	5ba <bt_init+0xfa>
	read_local_features_complete(rsp);
     526:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     528:	4827      	ldr	r0, [pc, #156]	; (5c8 <bt_init+0x108>)
     52a:	6899      	ldr	r1, [r3, #8]
     52c:	2208      	movs	r2, #8
     52e:	3101      	adds	r1, #1
     530:	f026 fa37 	bl	269a2 <memcpy>
	net_buf_unref(rsp);
     534:	9801      	ldr	r0, [sp, #4]
     536:	f01f fc29 	bl	1fd8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     53a:	4621      	mov	r1, r4
     53c:	aa01      	add	r2, sp, #4
     53e:	f241 0001 	movw	r0, #4097	; 0x1001
     542:	f007 f8f9 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     546:	4604      	mov	r4, r0
     548:	2800      	cmp	r0, #0
     54a:	d136      	bne.n	5ba <bt_init+0xfa>
	read_local_ver_complete(rsp);
     54c:	9801      	ldr	r0, [sp, #4]
     54e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     550:	785a      	ldrb	r2, [r3, #1]
     552:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     556:	78d9      	ldrb	r1, [r3, #3]
     558:	789a      	ldrb	r2, [r3, #2]
     55a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     55e:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     560:	791a      	ldrb	r2, [r3, #4]
     562:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     566:	7a19      	ldrb	r1, [r3, #8]
     568:	79da      	ldrb	r2, [r3, #7]
     56a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     56e:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     570:	795a      	ldrb	r2, [r3, #5]
     572:	799b      	ldrb	r3, [r3, #6]
     574:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     578:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     57a:	f01f fc07 	bl	1fd8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     57e:	4621      	mov	r1, r4
     580:	aa01      	add	r2, sp, #4
     582:	f241 0002 	movw	r0, #4098	; 0x1002
     586:	f007 f8d7 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     58a:	4604      	mov	r4, r0
     58c:	b9a8      	cbnz	r0, 5ba <bt_init+0xfa>
	read_supported_commands_complete(rsp);
     58e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     590:	480e      	ldr	r0, [pc, #56]	; (5cc <bt_init+0x10c>)
     592:	6899      	ldr	r1, [r3, #8]
     594:	2240      	movs	r2, #64	; 0x40
     596:	3101      	adds	r1, #1
     598:	f026 fa03 	bl	269a2 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     59c:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     5a0:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
     5a2:	f043 0306 	orr.w	r3, r3, #6
     5a6:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     5aa:	f01f fbef 	bl	1fd8c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     5ae:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     5b2:	065a      	lsls	r2, r3, #25
     5b4:	d40c      	bmi.n	5d0 <bt_init+0x110>
		return -ENODEV;
     5b6:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     5ba:	4620      	mov	r0, r4
     5bc:	b002      	add	sp, #8
     5be:	bd70      	pop	{r4, r5, r6, pc}
     5c0:	20000068 	.word	0x20000068
     5c4:	200021f0 	.word	0x200021f0
     5c8:	200000a8 	.word	0x200000a8
     5cc:	200000b0 	.word	0x200000b0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     5d0:	4621      	mov	r1, r4
     5d2:	aa01      	add	r2, sp, #4
     5d4:	f242 0003 	movw	r0, #8195	; 0x2003
     5d8:	f007 f8ae 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     5dc:	4604      	mov	r4, r0
     5de:	2800      	cmp	r0, #0
     5e0:	d1eb      	bne.n	5ba <bt_init+0xfa>
	read_le_features_complete(rsp);
     5e2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     5e4:	48c2      	ldr	r0, [pc, #776]	; (8f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf0>)
     5e6:	6899      	ldr	r1, [r3, #8]
     5e8:	2208      	movs	r2, #8
     5ea:	3101      	adds	r1, #1
     5ec:	f026 f9d9 	bl	269a2 <memcpy>
	net_buf_unref(rsp);
     5f0:	9801      	ldr	r0, [sp, #4]
     5f2:	f01f fbcb 	bl	1fd8c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     5f6:	4621      	mov	r1, r4
     5f8:	aa01      	add	r2, sp, #4
     5fa:	f242 0002 	movw	r0, #8194	; 0x2002
     5fe:	f007 f89b 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
     602:	4604      	mov	r4, r0
     604:	2800      	cmp	r0, #0
     606:	d1d8      	bne.n	5ba <bt_init+0xfa>
		le_read_buffer_size_complete(rsp);
     608:	9b01      	ldr	r3, [sp, #4]
     60a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     60c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     610:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
     614:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     616:	b121      	cbz	r1, 622 <CONFIG_BT_COMPANY_ID+0x31>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     618:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     61a:	48b6      	ldr	r0, [pc, #728]	; (8f4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf4>)
     61c:	4611      	mov	r1, r2
     61e:	f02c ff41 	bl	2d4a4 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     622:	9801      	ldr	r0, [sp, #4]
     624:	f01f fbb2 	bl	1fd8c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     628:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     62c:	f016 0620 	ands.w	r6, r6, #32
     630:	f000 8139 	beq.w	8a6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xa6>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     634:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     638:	071b      	lsls	r3, r3, #28
     63a:	d511      	bpl.n	660 <CONFIG_BT_COMPANY_ID+0x6f>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     63c:	aa01      	add	r2, sp, #4
     63e:	2100      	movs	r1, #0
     640:	f242 001c 	movw	r0, #8220	; 0x201c
     644:	f007 f878 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
     648:	4604      	mov	r4, r0
     64a:	2800      	cmp	r0, #0
     64c:	d1b5      	bne.n	5ba <bt_init+0xfa>
		le_read_supp_states_complete(rsp);
     64e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     650:	6883      	ldr	r3, [r0, #8]
     652:	f853 2f01 	ldr.w	r2, [r3, #1]!
     656:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     658:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     65c:	f01f fb96 	bl	1fd8c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     660:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     664:	069e      	lsls	r6, r3, #26
     666:	d523      	bpl.n	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     668:	f10d 0102 	add.w	r1, sp, #2
     66c:	4668      	mov	r0, sp
     66e:	f026 fed7 	bl	27420 <hci_le_read_max_data_len>
		if (err) {
     672:	4604      	mov	r4, r0
     674:	2800      	cmp	r0, #0
     676:	d1a0      	bne.n	5ba <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     678:	2104      	movs	r1, #4
     67a:	f242 0024 	movw	r0, #8228	; 0x2024
     67e:	f007 f801 	bl	7684 <bt_hci_cmd_create>
		if (!buf) {
     682:	4606      	mov	r6, r0
     684:	2800      	cmp	r0, #0
     686:	f000 8115 	beq.w	8b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb4>
		cp = net_buf_add(buf, sizeof(*cp));
     68a:	2104      	movs	r1, #4
     68c:	3008      	adds	r0, #8
     68e:	f02b fd04 	bl	2c09a <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     692:	f8bd 3000 	ldrh.w	r3, [sp]
     696:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     698:	f8bd 3002 	ldrh.w	r3, [sp, #2]
     69c:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     69e:	4622      	mov	r2, r4
     6a0:	4631      	mov	r1, r6
     6a2:	f242 0024 	movw	r0, #8228	; 0x2024
     6a6:	f007 f847 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
     6aa:	4604      	mov	r4, r0
     6ac:	2800      	cmp	r0, #0
     6ae:	d184      	bne.n	5ba <bt_init+0xfa>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     6b0:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     6b4:	065c      	lsls	r4, r3, #25
     6b6:	d52c      	bpl.n	712 <CONFIG_BT_COMPANY_ID+0x121>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
     6b8:	2102      	movs	r1, #2
     6ba:	f242 002e 	movw	r0, #8238	; 0x202e
     6be:	f006 ffe1 	bl	7684 <bt_hci_cmd_create>
		if (!buf) {
     6c2:	4604      	mov	r4, r0
     6c4:	2800      	cmp	r0, #0
     6c6:	f000 80f5 	beq.w	8b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb4>
		cp = net_buf_add(buf, sizeof(*cp));
     6ca:	2102      	movs	r1, #2
     6cc:	3008      	adds	r0, #8
     6ce:	f02b fce4 	bl	2c09a <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
     6d2:	f06f 037b 	mvn.w	r3, #123	; 0x7b
     6d6:	7003      	strb	r3, [r0, #0]
     6d8:	2303      	movs	r3, #3
     6da:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
     6dc:	4621      	mov	r1, r4
     6de:	2200      	movs	r2, #0
     6e0:	f242 002e 	movw	r0, #8238	; 0x202e
     6e4:	f007 f828 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
     6e8:	4604      	mov	r4, r0
     6ea:	2800      	cmp	r0, #0
     6ec:	f47f af65 	bne.w	5ba <bt_init+0xfa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     6f0:	4601      	mov	r1, r0
     6f2:	aa01      	add	r2, sp, #4
     6f4:	f242 002a 	movw	r0, #8234	; 0x202a
     6f8:	f007 f81e 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
     6fc:	4604      	mov	r4, r0
     6fe:	2800      	cmp	r0, #0
     700:	f47f af5b 	bne.w	5ba <bt_init+0xfa>
		le_read_resolving_list_size_complete(rsp);
     704:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     706:	6883      	ldr	r3, [r0, #8]
     708:	785b      	ldrb	r3, [r3, #1]
     70a:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
     70e:	f01f fb3d 	bl	1fd8c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     712:	2108      	movs	r1, #8
     714:	f242 0001 	movw	r0, #8193	; 0x2001
     718:	f006 ffb4 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
     71c:	4604      	mov	r4, r0
     71e:	2800      	cmp	r0, #0
     720:	f000 80c8 	beq.w	8b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb4>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     724:	2108      	movs	r1, #8
     726:	4408      	add	r0, r1
     728:	f02b fcb7 	bl	2c09a <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     72c:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     730:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     734:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     736:	f240 2302 	movw	r3, #514	; 0x202
     73a:	bf08      	it	eq
     73c:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     73e:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     740:	bf4c      	ite	mi
     742:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     746:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     74a:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     74c:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     750:	bf48      	it	mi
     752:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     756:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     75a:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     75e:	bf18      	it	ne
     760:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     764:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     768:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     76a:	bf48      	it	mi
     76c:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     770:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     772:	bf08      	it	eq
     774:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     778:	2100      	movs	r1, #0
     77a:	f026 fd6d 	bl	27258 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     77e:	4621      	mov	r1, r4
     780:	2200      	movs	r2, #0
     782:	f242 0001 	movw	r0, #8193	; 0x2001
     786:	f006 ffd7 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     78a:	4604      	mov	r4, r0
     78c:	2800      	cmp	r0, #0
     78e:	f47f af14 	bne.w	5ba <bt_init+0xfa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     792:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     796:	0698      	lsls	r0, r3, #26
     798:	d41e      	bmi.n	7d8 <CONFIG_BT_COMPANY_ID+0x1e7>
	if (bt_dev.le.acl_mtu) {
     79a:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
     79e:	b9d9      	cbnz	r1, 7d8 <CONFIG_BT_COMPANY_ID+0x1e7>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     7a0:	aa01      	add	r2, sp, #4
     7a2:	f241 0005 	movw	r0, #4101	; 0x1005
     7a6:	f006 ffc7 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     7aa:	4604      	mov	r4, r0
     7ac:	2800      	cmp	r0, #0
     7ae:	f47f af04 	bne.w	5ba <bt_init+0xfa>
	if (bt_dev.le.acl_mtu) {
     7b2:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
     7b6:	b963      	cbnz	r3, 7d2 <CONFIG_BT_COMPANY_ID+0x1e1>
	read_buffer_size_complete(rsp);
     7b8:	9b01      	ldr	r3, [sp, #4]
     7ba:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     7bc:	785a      	ldrb	r2, [r3, #1]
     7be:	7899      	ldrb	r1, [r3, #2]
     7c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     7c4:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     7c8:	889a      	ldrh	r2, [r3, #4]
     7ca:	484a      	ldr	r0, [pc, #296]	; (8f4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf4>)
     7cc:	4611      	mov	r1, r2
     7ce:	f02c fe69 	bl	2d4a4 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     7d2:	9801      	ldr	r0, [sp, #4]
     7d4:	f01f fada 	bl	1fd8c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     7d8:	2108      	movs	r1, #8
     7da:	f640 4001 	movw	r0, #3073	; 0xc01
     7de:	f006 ff51 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
     7e2:	4604      	mov	r4, r0
     7e4:	2800      	cmp	r0, #0
     7e6:	d065      	beq.n	8b4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb4>
	ev = net_buf_add(buf, sizeof(*ev));
     7e8:	2108      	movs	r1, #8
     7ea:	4408      	add	r0, r1
     7ec:	f02b fc55 	bl	2c09a <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     7f0:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     7f4:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     7f6:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     7f8:	d571      	bpl.n	8de <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xde>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     7fa:	a13b      	add	r1, pc, #236	; (adr r1, 8e8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe8>)
     7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     800:	f026 fd2a 	bl	27258 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     804:	4621      	mov	r1, r4
     806:	2200      	movs	r2, #0
     808:	f640 4001 	movw	r0, #3073	; 0xc01
     80c:	f006 ff94 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     810:	4604      	mov	r4, r0
     812:	2800      	cmp	r0, #0
     814:	f47f aed1 	bne.w	5ba <bt_init+0xfa>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     818:	4601      	mov	r1, r0
     81a:	aa01      	add	r2, sp, #4
     81c:	f64f 4001 	movw	r0, #64513	; 0xfc01
     820:	f006 ff8a 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     824:	4604      	mov	r4, r0
     826:	bb48      	cbnz	r0, 87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
	net_buf_unref(rsp);
     828:	9801      	ldr	r0, [sp, #4]
     82a:	f01f faaf 	bl	1fd8c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     82e:	4621      	mov	r1, r4
     830:	aa01      	add	r2, sp, #4
     832:	f64f 4002 	movw	r0, #64514	; 0xfc02
     836:	f006 ff7f 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
     83a:	4604      	mov	r4, r0
     83c:	b9f0      	cbnz	r0, 87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
	rp.cmds = (void *)rsp->data;
     83e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     840:	482d      	ldr	r0, [pc, #180]	; (8f8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf8>)
     842:	6899      	ldr	r1, [r3, #8]
     844:	2202      	movs	r2, #2
     846:	3101      	adds	r1, #1
     848:	f026 f8ab 	bl	269a2 <memcpy>
	net_buf_unref(rsp);
     84c:	9801      	ldr	r0, [sp, #4]
     84e:	f01f fa9d 	bl	1fd8c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     852:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
     856:	075b      	lsls	r3, r3, #29
     858:	d510      	bpl.n	87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     85a:	aa01      	add	r2, sp, #4
     85c:	4621      	mov	r1, r4
     85e:	f64f 4003 	movw	r0, #64515	; 0xfc03
     862:	f006 ff69 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
     866:	b948      	cbnz	r0, 87c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7c>
		rp.feat = (void *)rsp->data;
     868:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
     86a:	4824      	ldr	r0, [pc, #144]	; (8fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xfc>)
     86c:	6899      	ldr	r1, [r3, #8]
     86e:	2201      	movs	r2, #1
     870:	4411      	add	r1, r2
     872:	f026 f896 	bl	269a2 <memcpy>
		net_buf_unref(rsp);
     876:	9801      	ldr	r0, [sp, #4]
     878:	f01f fa88 	bl	1fd8c <net_buf_unref>
		err = bt_conn_init();
     87c:	f008 ffee 	bl	985c <bt_conn_init>
		if (err) {
     880:	4604      	mov	r4, r0
     882:	2800      	cmp	r0, #0
     884:	f47f ae99 	bne.w	5ba <bt_init+0xfa>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
     888:	491d      	ldr	r1, [pc, #116]	; (900 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x100>)
     88a:	481e      	ldr	r0, [pc, #120]	; (904 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x104>)
     88c:	f02c fe8a 	bl	2d5a4 <k_delayed_work_init>
		if (!bt_dev.id_count) {
     890:	79eb      	ldrb	r3, [r5, #7]
     892:	2b00      	cmp	r3, #0
     894:	f43f ae91 	beq.w	5ba <bt_init+0xfa>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     898:	2104      	movs	r1, #4
     89a:	481b      	ldr	r0, [pc, #108]	; (908 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x108>)
     89c:	f026 fc21 	bl	270e2 <atomic_or>
	bt_finalize_init();
     8a0:	f007 fd74 	bl	838c <bt_finalize_init>
	return 0;
     8a4:	e689      	b.n	5ba <bt_init+0xfa>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     8a6:	2102      	movs	r1, #2
     8a8:	f640 406d 	movw	r0, #3181	; 0xc6d
     8ac:	f006 feea 	bl	7684 <bt_hci_cmd_create>
		if (!buf) {
     8b0:	4604      	mov	r4, r0
     8b2:	b910      	cbnz	r0, 8ba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xba>
		return -ENOBUFS;
     8b4:	f06f 0436 	mvn.w	r4, #54	; 0x36
     8b8:	e67f      	b.n	5ba <bt_init+0xfa>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     8ba:	2102      	movs	r1, #2
     8bc:	3008      	adds	r0, #8
     8be:	f02b fbec 	bl	2c09a <net_buf_simple_add>
		cp_le->le = 0x01;
     8c2:	2301      	movs	r3, #1
     8c4:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     8c6:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     8c8:	4621      	mov	r1, r4
     8ca:	4632      	mov	r2, r6
     8cc:	f640 406d 	movw	r0, #3181	; 0xc6d
     8d0:	f006 ff32 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
     8d4:	4604      	mov	r4, r0
     8d6:	2800      	cmp	r0, #0
     8d8:	f43f aeac 	beq.w	634 <CONFIG_BT_COMPANY_ID+0x43>
     8dc:	e66d      	b.n	5ba <bt_init+0xfa>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     8de:	480b      	ldr	r0, [pc, #44]	; (90c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10c>)
     8e0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     8e4:	e78c      	b.n	800 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL>
     8e6:	bf00      	nop
     8e8:	02008890 	.word	0x02008890
     8ec:	20008000 	.word	0x20008000
     8f0:	20000108 	.word	0x20000108
     8f4:	20000138 	.word	0x20000138
     8f8:	200000f1 	.word	0x200000f1
     8fc:	200000f0 	.word	0x200000f0
     900:	00007aa1 	.word	0x00007aa1
     904:	200001a0 	.word	0x200001a0
     908:	20000100 	.word	0x20000100
     90c:	02008810 	.word	0x02008810

00000910 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     914:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     918:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     91c:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
     920:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     922:	45a0      	cmp	r8, r4
{
     924:	460e      	mov	r6, r1
     926:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     928:	d818      	bhi.n	95c <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     92a:	4f1b      	ldr	r7, [pc, #108]	; (998 <ull_drift_ticks_get+0x88>)
     92c:	a318      	add	r3, pc, #96	; (adr r3, 990 <ull_drift_ticks_get+0x80>)
     92e:	e9d3 2300 	ldrd	r2, r3, [r3]
     932:	fbac 0107 	umull	r0, r1, ip, r7
     936:	f7ff fc33 	bl	1a0 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     93a:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     93e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     942:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     944:	a312      	add	r3, pc, #72	; (adr r3, 990 <ull_drift_ticks_get+0x80>)
     946:	e9d3 2300 	ldrd	r2, r3, [r3]
     94a:	fba4 0107 	umull	r0, r1, r4, r7
     94e:	f7ff fc27 	bl	1a0 <__aeabi_uldivmod>
     952:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     956:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     95c:	4c0e      	ldr	r4, [pc, #56]	; (998 <ull_drift_ticks_get+0x88>)
     95e:	a30c      	add	r3, pc, #48	; (adr r3, 990 <ull_drift_ticks_get+0x80>)
     960:	e9d3 2300 	ldrd	r2, r3, [r3]
     964:	fba8 0104 	umull	r0, r1, r8, r4
     968:	f7ff fc1a 	bl	1a0 <__aeabi_uldivmod>
     96c:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     970:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
     974:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     976:	fba0 0104 	umull	r0, r1, r0, r4
     97a:	a305      	add	r3, pc, #20	; (adr r3, 990 <ull_drift_ticks_get+0x80>)
     97c:	e9d3 2300 	ldrd	r2, r3, [r3]
     980:	f7ff fc0e 	bl	1a0 <__aeabi_uldivmod>
     984:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     988:	6028      	str	r0, [r5, #0]
}
     98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     98e:	bf00      	nop
     990:	1afd498d 	.word	0x1afd498d
     994:	00000007 	.word	0x00000007
     998:	3b9aca00 	.word	0x3b9aca00
     99c:	00000000 	.word	0x00000000

000009a0 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
     9a4:	4cb1      	ldr	r4, [pc, #708]	; (c6c <ll_adv_enable+0x2cc>)
{
     9a6:	b08f      	sub	sp, #60	; 0x3c
	if (!enable) {
     9a8:	2800      	cmp	r0, #0
     9aa:	f000 81c7 	beq.w	d3c <ll_adv_enable+0x39c>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     9ae:	f894 60d6 	ldrb.w	r6, [r4, #214]	; 0xd6
     9b2:	f016 0601 	ands.w	r6, r6, #1
     9b6:	d137      	bne.n	a28 <ll_adv_enable+0x88>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9b8:	f894 807c 	ldrb.w	r8, [r4, #124]	; 0x7c
		ull_filter_adv_update(lll->filter_policy);
     9bc:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9c0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
     9c4:	2727      	movs	r7, #39	; 0x27
     9c6:	232d      	movs	r3, #45	; 0x2d
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9c8:	fb07 4808 	mla	r8, r7, r8, r4
     9cc:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9d0:	fb17 3702 	smlabb	r7, r7, r2, r3
		lll->rl_idx = FILTER_IDX_NONE;
     9d4:	23ff      	movs	r3, #255	; 0xff
     9d6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		ull_filter_adv_update(lll->filter_policy);
     9da:	f01b f84f 	bl	1ba7c <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     9de:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
     9e2:	0741      	lsls	r1, r0, #29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     9e4:	f108 087d 	add.w	r8, r8, #125	; 0x7d
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     9e8:	eb04 0907 	add.w	r9, r4, r7
     9ec:	f100 8127 	bmi.w	c3e <ll_adv_enable+0x29e>
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     9f0:	5de0      	ldrb	r0, [r4, r7]
     9f2:	4631      	mov	r1, r6
     9f4:	f3c0 1080 	ubfx	r0, r0, #6, #1
     9f8:	f013 feb6 	bl	14768 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     9fc:	2206      	movs	r2, #6
     9fe:	4601      	mov	r1, r0
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     a00:	4605      	mov	r5, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     a02:	f109 0002 	add.w	r0, r9, #2
     a06:	f025 ffcc 	bl	269a2 <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     a0a:	4629      	mov	r1, r5
     a0c:	2206      	movs	r2, #6
     a0e:	f108 0002 	add.w	r0, r8, #2
     a12:	f025 ffc6 	bl	269a2 <memcpy>
		if (pdu_adv->tx_addr &&
     a16:	5de3      	ldrb	r3, [r4, r7]
     a18:	065a      	lsls	r2, r3, #25
     a1a:	d40a      	bmi.n	a32 <ll_adv_enable+0x92>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     a1c:	f013 0f0e 	tst.w	r3, #14
     a20:	f040 80e4 	bne.w	bec <ll_adv_enable+0x24c>
		if (lll->conn) {
     a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
     a26:	b18b      	cbz	r3, a4c <ll_adv_enable+0xac>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     a28:	260c      	movs	r6, #12
}
     a2a:	4630      	mov	r0, r6
     a2c:	b00f      	add	sp, #60	; 0x3c
     a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     a32:	2106      	movs	r1, #6
     a34:	f109 0002 	add.w	r0, r9, #2
     a38:	f012 fadc 	bl	12ff4 <mem_nz>
		if (pdu_adv->tx_addr &&
     a3c:	2800      	cmp	r0, #0
     a3e:	f000 8235 	beq.w	eac <ll_adv_enable+0x50c>
     a42:	5de3      	ldrb	r3, [r4, r7]
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     a44:	f013 0f0e 	tst.w	r3, #14
     a48:	d0ec      	beq.n	a24 <ll_adv_enable+0x84>
     a4a:	e0cf      	b.n	bec <ll_adv_enable+0x24c>
		link = ll_rx_link_alloc();
     a4c:	f016 fab6 	bl	16fbc <ll_rx_link_alloc>
		if (!link) {
     a50:	4682      	mov	sl, r0
     a52:	2800      	cmp	r0, #0
     a54:	f000 824f 	beq.w	ef6 <ll_adv_enable+0x556>
		node_rx = ll_rx_alloc();
     a58:	f016 fabc 	bl	16fd4 <ll_rx_alloc>
		if (!node_rx) {
     a5c:	4683      	mov	fp, r0
     a5e:	2800      	cmp	r0, #0
     a60:	f000 8262 	beq.w	f28 <ll_adv_enable+0x588>
		conn = ll_conn_acquire();
     a64:	f017 fe44 	bl	186f0 <ll_conn_acquire>
		if (!conn) {
     a68:	4605      	mov	r5, r0
     a6a:	2800      	cmp	r0, #0
     a6c:	f000 8259 	beq.w	f22 <ll_adv_enable+0x582>
		conn_lll->handle = 0xFFFF;
     a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     a74:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     a76:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     a78:	f105 031c 	add.w	r3, r5, #28
     a7c:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     a7e:	2800      	cmp	r0, #0
     a80:	f000 8235 	beq.w	eee <ll_adv_enable+0x54e>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     a84:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     a88:	f105 0168 	add.w	r1, r5, #104	; 0x68
     a8c:	f012 fabe 	bl	1300c <memq_init>
		conn_lll->phy_tx = BIT(0);
     a90:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
     a94:	f895 e03d 	ldrb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     a98:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     a9c:	f895 1126 	ldrb.w	r1, [r5, #294]	; 0x126
		conn_lll->slave.latency_enabled = 0;
     aa0:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
     aa4:	f8c5 a130 	str.w	sl, [r5, #304]	; 0x130
		conn_lll->phy_tx = BIT(0);
     aa8:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     aac:	f022 0207 	bic.w	r2, r2, #7
     ab0:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     ab4:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
     ab8:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
     abc:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
		conn->common.fex_valid = 0;
     ac0:	f020 0003 	bic.w	r0, r0, #3
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     ac4:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->phy_tx = BIT(0);
     ac8:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_use = 0;
     acc:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
     ace:	f362 0c00 	bfi	ip, r2, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     ad2:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
		conn_lll->data_chan_sel = 0;
     ad6:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     ada:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     ade:	f885 1126 	strb.w	r1, [r5, #294]	; 0x126
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     ae2:	4863      	ldr	r0, [pc, #396]	; (c70 <ll_adv_enable+0x2d0>)
		conn->llcp_feature.features_conn = LL_FEAT;
     ae4:	4963      	ldr	r1, [pc, #396]	; (c74 <ll_adv_enable+0x2d4>)
		conn_lll->data_chan_use = 0;
     ae6:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
		conn->connect_expire = 6;
     aea:	f04f 0e06 	mov.w	lr, #6
		conn_lll->slave.window_widening_event_us = 0;
     aee:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
		conn_lll->latency_prepare = 0;
     af2:	866a      	strh	r2, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     af4:	636a      	str	r2, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     af6:	656a      	str	r2, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     af8:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     afc:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     b00:	f8a5 20e8 	strh.w	r2, [r5, #232]	; 0xe8
     b04:	f885 20ea 	strb.w	r2, [r5, #234]	; 0xea
		conn->llcp_rx = NULL;
     b08:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     b0c:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     b10:	f8a5 2118 	strh.w	r2, [r5, #280]	; 0x118
		conn->llcp_feature.features_peer = 0;
     b14:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     b18:	f8a5 2124 	strh.w	r2, [r5, #292]	; 0x124
		conn->llcp_terminate.reason_peer = 0;
     b1c:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
		conn_lll->link_tx_free = NULL;
     b20:	67aa      	str	r2, [r5, #120]	; 0x78
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     b22:	65eb      	str	r3, [r5, #92]	; 0x5c
		conn_lll->slave.latency_enabled = 0;
     b24:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     b28:	6628      	str	r0, [r5, #96]	; 0x60
		conn->connect_expire = 6;
     b2a:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
		conn->llcp_feature.features_conn = LL_FEAT;
     b2e:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
		conn_lll->packet_tx_head_len = 0;
     b32:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		conn->llcp_conn_param.disabled = 0;
     b36:	f895 e172 	ldrb.w	lr, [r5, #370]	; 0x172
		conn->llcp_length.disabled = 0U;
     b3a:	f895 c19a 	ldrb.w	ip, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
     b3e:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b42:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     b46:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
		conn->llcp_length.disabled = 0U;
     b4a:	f362 0cc3 	bfi	ip, r2, #3, #1
		conn->llcp_conn_param.disabled = 0;
     b4e:	f362 1e04 	bfi	lr, r2, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b52:	f021 0107 	bic.w	r1, r1, #7
		conn_lll->sn = 0;
     b56:	f020 001f 	bic.w	r0, r0, #31
		conn->llcp_conn_param.req = 0;
     b5a:	f8a5 2170 	strh.w	r2, [r5, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     b5e:	f8a5 2198 	strh.w	r2, [r5, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
     b62:	f8a5 21a4 	strh.w	r2, [r5, #420]	; 0x1a4
		conn->llcp_length.disabled = 0U;
     b66:	f885 c19a 	strb.w	ip, [r5, #410]	; 0x19a
		conn->llcp_conn_param.disabled = 0;
     b6a:	f885 e172 	strb.w	lr, [r5, #370]	; 0x172
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     b6e:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
		conn_lll->sn = 0;
     b72:	f885 007e 	strb.w	r0, [r5, #126]	; 0x7e
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     b76:	f018 f907 	bl	18d88 <ull_conn_default_tx_octets_get>
     b7a:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b7e:	f018 f909 	bl	18d94 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b82:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
     b86:	493c      	ldr	r1, [pc, #240]	; (c78 <ll_adv_enable+0x2d8>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b88:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b8c:	4019      	ands	r1, r3
     b8e:	f8c5 11a8 	str.w	r1, [r5, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     b92:	f018 f905 	bl	18da0 <ull_conn_default_phy_tx_get>
     b96:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
     b9a:	f360 0102 	bfi	r1, r0, #0, #3
     b9e:	f885 11ac 	strb.w	r1, [r5, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     ba2:	f018 f903 	bl	18dac <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     ba6:	e9c4 ab33 	strd	sl, fp, [r4, #204]	; 0xcc
		lll->conn = conn_lll;
     baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     bac:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_flags = 0;
     bae:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     bb2:	f895 c020 	ldrb.w	ip, [r5, #32]
	hdr->parent = parent;
     bb6:	61ed      	str	r5, [r5, #28]
     bb8:	0103      	lsls	r3, r0, #4
		conn->tx_data = conn->tx_data_last = 0;
     bba:	2200      	movs	r2, #0
		conn->phy_pref_flags = 0;
     bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
     bc0:	f021 0178 	bic.w	r1, r1, #120	; 0x78
     bc4:	430b      	orrs	r3, r1
	hdr->is_stop = 0U;
     bc6:	f362 0c00 	bfi	ip, r2, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     bca:	e9c5 226e 	strd	r2, r2, [r5, #440]	; 0x1b8
     bce:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     bd2:	e9c5 2205 	strd	r2, r2, [r5, #20]
		conn->tx_data = conn->tx_data_last = 0;
     bd6:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_flags = 0;
     bda:	f885 31ac 	strb.w	r3, [r5, #428]	; 0x1ac
     bde:	f885 c020 	strb.w	ip, [r5, #32]
		err = lll_clock_wait();
     be2:	f01c fa27 	bl	1d034 <lll_clock_wait>
		if (err) {
     be6:	2800      	cmp	r0, #0
     be8:	f040 816a 	bne.w	ec0 <ll_adv_enable+0x520>
	uint8_t ch_map = lll->chan_map;
     bec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bf0:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     bf2:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bf6:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
     bf8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     bfc:	f012 fb7a 	bl	132f4 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     c00:	2800      	cmp	r0, #0
     c02:	f000 8094 	beq.w	d2e <ll_adv_enable+0x38e>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     c06:	5de3      	ldrb	r3, [r4, r7]
     c08:	f003 030f 	and.w	r3, r3, #15
     c0c:	2b02      	cmp	r3, #2
     c0e:	d035      	beq.n	c7c <ll_adv_enable+0x2dc>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     c10:	2b01      	cmp	r3, #1
     c12:	f000 8159 	beq.w	ec8 <ll_adv_enable+0x528>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     c16:	f898 2001 	ldrb.w	r2, [r8, #1]
     c1a:	3210      	adds	r2, #16
		const uint16_t scan_rsp_us =
     c1c:	00d2      	lsls	r2, r2, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     c1e:	2b00      	cmp	r3, #0
     c20:	f040 8146 	bne.w	eb0 <ll_adv_enable+0x510>
				adv_size += pdu_adv->len;
     c24:	f899 3001 	ldrb.w	r3, [r9, #1]
     c28:	3310      	adds	r3, #16
     c2a:	00db      	lsls	r3, r3, #3
     c2c:	f503 714d 	add.w	r1, r3, #820	; 0x334
     c30:	440a      	add	r2, r1
     c32:	f503 739a 	add.w	r3, r3, #308	; 0x134
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
     c36:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     c38:	fb03 2000 	mla	r0, r3, r0, r2
     c3c:	e02a      	b.n	c94 <ll_adv_enable+0x2f4>
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     c3e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     c42:	4632      	mov	r2, r6
     c44:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
     c48:	f01b f928 	bl	1be9c <ull_filter_rl_find>
			if (lll->rl_idx != FILTER_IDX_NONE) {
     c4c:	28ff      	cmp	r0, #255	; 0xff
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     c4e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
			if (lll->rl_idx != FILTER_IDX_NONE) {
     c52:	d002      	beq.n	c5a <ll_adv_enable+0x2ba>
				ull_filter_rpa_update(false);
     c54:	4630      	mov	r0, r6
     c56:	f01a ffdf 	bl	1bc18 <ull_filter_rpa_update>
			ull_filter_adv_pdu_update(adv, pdu_adv);
     c5a:	4649      	mov	r1, r9
     c5c:	4803      	ldr	r0, [pc, #12]	; (c6c <ll_adv_enable+0x2cc>)
     c5e:	f01a ff53 	bl	1bb08 <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, pdu_scan);
     c62:	4802      	ldr	r0, [pc, #8]	; (c6c <ll_adv_enable+0x2cc>)
     c64:	4641      	mov	r1, r8
     c66:	f01a ff4f 	bl	1bb08 <ull_filter_adv_pdu_update>
		if (!priv) {
     c6a:	e6d4      	b.n	a16 <ll_adv_enable+0x76>
     c6c:	20003520 	.word	0x20003520
     c70:	01480148 	.word	0x01480148
     c74:	000149ff 	.word	0x000149ff
     c78:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
     c7c:	f899 3001 	ldrb.w	r3, [r9, #1]
     c80:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     c82:	00db      	lsls	r3, r3, #3
     c84:	fb00 f303 	mul.w	r3, r0, r3
     c88:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     c8c:	3801      	subs	r0, #1
     c8e:	2264      	movs	r2, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     c90:	fb02 3000 	mla	r0, r2, r0, r3
     c94:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     c98:	49ad      	ldr	r1, [pc, #692]	; (f50 <ll_adv_enable+0x5b0>)
	hdr->parent = parent;
     c9a:	61e4      	str	r4, [r4, #28]
     c9c:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
     c9e:	f365 0300 	bfi	r3, r5, #0, #1
	adv->evt.ticks_xtal_to_start =
     ca2:	2231      	movs	r2, #49	; 0x31
     ca4:	f884 3020 	strb.w	r3, [r4, #32]
     ca8:	6022      	str	r2, [r4, #0]
     caa:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     cae:	a3a6      	add	r3, pc, #664	; (adr r3, f48 <ll_adv_enable+0x5a8>)
     cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_preempt_to_start =
     cb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     cb8:	fba0 0101 	umull	r0, r1, r0, r1
     cbc:	f7ff fa70 	bl	1a0 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     cc0:	f8b4 90d4 	ldrh.w	r9, [r4, #212]	; 0xd4
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     cc4:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     cc6:	f013 fd49 	bl	1475c <ticker_ticks_now_get>
     cca:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     ccc:	f1b9 0f00 	cmp.w	r9, #0
     cd0:	d107      	bne.n	ce2 <ll_adv_enable+0x342>
     cd2:	5de5      	ldrb	r5, [r4, r7]
     cd4:	f005 050f 	and.w	r5, r5, #15
     cd8:	f1a5 0501 	sub.w	r5, r5, #1
     cdc:	fab5 f585 	clz	r5, r5
     ce0:	096d      	lsrs	r5, r5, #5
     ce2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
     ce6:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     cea:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     cee:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     cf2:	f000 8089 	beq.w	e08 <ll_adv_enable+0x468>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     cf6:	f8df 926c 	ldr.w	r9, [pc, #620]	; f64 <ll_adv_enable+0x5c4>
				   (adv->evt.ticks_slot + ticks_slot_overhead),
     cfa:	68e3      	ldr	r3, [r4, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     cfc:	4995      	ldr	r1, [pc, #596]	; (f54 <ll_adv_enable+0x5b4>)
     cfe:	9304      	str	r3, [sp, #16]
     d00:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     d02:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     d04:	af0c      	add	r7, sp, #48	; 0x30
     d06:	9301      	str	r3, [sp, #4]
     d08:	9105      	str	r1, [sp, #20]
     d0a:	e9cd 9707 	strd	r9, r7, [sp, #28]
     d0e:	2103      	movs	r1, #3
     d10:	e9cd 0002 	strd	r0, r0, [sp, #8]
     d14:	9406      	str	r4, [sp, #24]
     d16:	462a      	mov	r2, r5
     d18:	9000      	str	r0, [sp, #0]
     d1a:	4643      	mov	r3, r8
		ret_cb = TICKER_STATUS_BUSY;
     d1c:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     d1e:	f013 fc6b 	bl	145f8 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     d22:	4639      	mov	r1, r7
     d24:	f016 fa04 	bl	17130 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     d28:	2800      	cmp	r0, #0
     d2a:	f000 80ac 	beq.w	e86 <ll_adv_enable+0x4e6>
	if (adv->lll.conn) {
     d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d30:	2b00      	cmp	r3, #0
     d32:	f43f ae79 	beq.w	a28 <ll_adv_enable+0x88>
		conn_release(adv);
     d36:	f016 fd29 	bl	1778c <conn_release.constprop.0>
     d3a:	e675      	b.n	a28 <ll_adv_enable+0x88>
	if (!adv || !adv->is_enabled) {
     d3c:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
     d40:	07dd      	lsls	r5, r3, #31
     d42:	f57f ae71 	bpl.w	a28 <ll_adv_enable+0x88>
	mark = ull_disable_mark(adv);
     d46:	4620      	mov	r0, r4
     d48:	f016 fa1a 	bl	17180 <ull_disable_mark>
	LL_ASSERT(mark == adv);
     d4c:	4284      	cmp	r4, r0
     d4e:	d00c      	beq.n	d6a <ll_adv_enable+0x3ca>
     d50:	4a81      	ldr	r2, [pc, #516]	; (f58 <ll_adv_enable+0x5b8>)
     d52:	4982      	ldr	r1, [pc, #520]	; (f5c <ll_adv_enable+0x5bc>)
     d54:	4882      	ldr	r0, [pc, #520]	; (f60 <ll_adv_enable+0x5c0>)
     d56:	f240 7333 	movw	r3, #1843	; 0x733
     d5a:	f023 fbab 	bl	244b4 <printk>
     d5e:	4040      	eors	r0, r0
     d60:	f380 8811 	msr	BASEPRI, r0
     d64:	f04f 0003 	mov.w	r0, #3
     d68:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     d6a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     d6e:	07d8      	lsls	r0, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     d70:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     d72:	d50e      	bpl.n	d92 <ll_adv_enable+0x3f2>
		ret_cb = TICKER_STATUS_BUSY;
     d74:	2202      	movs	r2, #2
     d76:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     d78:	2103      	movs	r1, #3
     d7a:	4b7a      	ldr	r3, [pc, #488]	; (f64 <ll_adv_enable+0x5c4>)
     d7c:	9500      	str	r5, [sp, #0]
     d7e:	2201      	movs	r2, #1
     d80:	2000      	movs	r0, #0
     d82:	f013 fca5 	bl	146d0 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     d86:	4629      	mov	r1, r5
     d88:	f016 f9d2 	bl	17130 <ull_ticker_status_take>
		if (ret) {
     d8c:	2800      	cmp	r0, #0
     d8e:	f040 80d0 	bne.w	f32 <ll_adv_enable+0x592>
	ret_cb = TICKER_STATUS_BUSY;
     d92:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     d94:	2103      	movs	r1, #3
     d96:	4b73      	ldr	r3, [pc, #460]	; (f64 <ll_adv_enable+0x5c4>)
     d98:	9500      	str	r5, [sp, #0]
     d9a:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
     d9c:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     d9e:	f013 fc97 	bl	146d0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     da2:	4629      	mov	r1, r5
     da4:	f016 f9c4 	bl	17130 <ull_ticker_status_take>
	if (ret) {
     da8:	2800      	cmp	r0, #0
     daa:	f040 80a6 	bne.w	efa <ll_adv_enable+0x55a>
	}

	ret = ull_disable(&adv->lll);
     dae:	486e      	ldr	r0, [pc, #440]	; (f68 <ll_adv_enable+0x5c8>)
     db0:	f016 fa22 	bl	171f8 <ull_disable>
	LL_ASSERT(!ret);
     db4:	2800      	cmp	r0, #0
     db6:	f040 808c 	bne.w	ed2 <ll_adv_enable+0x532>

	mark = ull_disable_unmark(adv);
     dba:	486c      	ldr	r0, [pc, #432]	; (f6c <ll_adv_enable+0x5cc>)
     dbc:	f016 f9ec 	bl	17198 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     dc0:	4284      	cmp	r4, r0
     dc2:	d00c      	beq.n	dde <ll_adv_enable+0x43e>
     dc4:	4a64      	ldr	r2, [pc, #400]	; (f58 <ll_adv_enable+0x5b8>)
     dc6:	4965      	ldr	r1, [pc, #404]	; (f5c <ll_adv_enable+0x5bc>)
     dc8:	4865      	ldr	r0, [pc, #404]	; (f60 <ll_adv_enable+0x5c0>)
     dca:	f240 7355 	movw	r3, #1877	; 0x755
     dce:	f023 fb71 	bl	244b4 <printk>
     dd2:	4040      	eors	r0, r0
     dd4:	f380 8811 	msr	BASEPRI, r0
     dd8:	f04f 0003 	mov.w	r0, #3
     ddc:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
     de0:	b10b      	cbz	r3, de6 <ll_adv_enable+0x446>
		conn_release(adv);
     de2:	f016 fcd3 	bl	1778c <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
     de6:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6

#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     dea:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
     dec:	f36f 0300 	bfc	r3, #0, #1
     df0:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     df4:	f017 f888 	bl	17f08 <ull_scan_is_enabled_get>
     df8:	4606      	mov	r6, r0
     dfa:	2800      	cmp	r0, #0
     dfc:	d040      	beq.n	e80 <ll_adv_enable+0x4e0>
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     dfe:	2600      	movs	r6, #0
}
     e00:	4630      	mov	r0, r6
     e02:	b00f      	add	sp, #60	; 0x3c
     e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e08:	4859      	ldr	r0, [pc, #356]	; (f70 <ll_adv_enable+0x5d0>)
		const uint32_t ticks_slot = adv->evt.ticks_slot +
     e0a:	68e2      	ldr	r2, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
     e0c:	4b59      	ldr	r3, [pc, #356]	; (f74 <ll_adv_enable+0x5d4>)
		ret = ticker_start_ext(
     e0e:	f8df e154 	ldr.w	lr, [pc, #340]	; f64 <ll_adv_enable+0x5c4>
     e12:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e14:	fba9 0100 	umull	r0, r1, r9, r0
     e18:	2791      	movs	r7, #145	; 0x91
     e1a:	fb07 1109 	mla	r1, r7, r9, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     e1e:	f202 1747 	addw	r7, r2, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     e22:	601f      	str	r7, [r3, #0]
		ret = ticker_start_ext(
     e24:	9204      	str	r2, [sp, #16]
     e26:	4a4b      	ldr	r2, [pc, #300]	; (f54 <ll_adv_enable+0x5b4>)
     e28:	9309      	str	r3, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
     e2a:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     e2e:	f64f 7cff 	movw	ip, #65535	; 0xffff
     e32:	9205      	str	r2, [sp, #20]
     e34:	af0c      	add	r7, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e36:	a344      	add	r3, pc, #272	; (adr r3, f48 <ll_adv_enable+0x5a8>)
     e38:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     e3c:	e9cd e707 	strd	lr, r7, [sp, #28]
     e40:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
     e42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
     e46:	f8cd c00c 	str.w	ip, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     e4a:	f7ff f9a9 	bl	1a0 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     e4e:	464a      	mov	r2, r9
     e50:	e9cd 5000 	strd	r5, r0, [sp]
     e54:	4643      	mov	r3, r8
     e56:	4628      	mov	r0, r5
     e58:	2103      	movs	r1, #3
     e5a:	f013 fb77 	bl	1454c <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     e5e:	4639      	mov	r1, r7
     e60:	f016 f966 	bl	17130 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     e64:	2800      	cmp	r0, #0
     e66:	f47f af62 	bne.w	d2e <ll_adv_enable+0x38e>
	adv->is_enabled = 1;
     e6a:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
     e6e:	f043 0301 	orr.w	r3, r3, #1
     e72:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
     e76:	f017 f847 	bl	17f08 <ull_scan_is_enabled_get>
     e7a:	2800      	cmp	r0, #0
     e7c:	d1bf      	bne.n	dfe <ll_adv_enable+0x45e>
		ull_filter_adv_scan_state_cb(BIT(0));
     e7e:	2001      	movs	r0, #1
     e80:	f01a fdda 	bl	1ba38 <ull_filter_adv_scan_state_cb>
     e84:	e5d1      	b.n	a2a <ll_adv_enable+0x8a>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e86:	493c      	ldr	r1, [pc, #240]	; (f78 <ll_adv_enable+0x5d8>)
     e88:	9105      	str	r1, [sp, #20]
     e8a:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     e8e:	9200      	str	r2, [sp, #0]
     e90:	e9cd 9707 	strd	r9, r7, [sp, #28]
     e94:	e9cd 0003 	strd	r0, r0, [sp, #12]
     e98:	e9cd 0001 	strd	r0, r0, [sp, #4]
     e9c:	9406      	str	r4, [sp, #24]
     e9e:	4643      	mov	r3, r8
     ea0:	2201      	movs	r2, #1
     ea2:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     ea4:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ea6:	f013 fba7 	bl	145f8 <ticker_start>
     eaa:	e7d8      	b.n	e5e <ll_adv_enable+0x4be>
			return BT_HCI_ERR_INVALID_PARAM;
     eac:	2612      	movs	r6, #18
     eae:	e5bc      	b.n	a2a <ll_adv_enable+0x8a>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     eb0:	2b06      	cmp	r3, #6
     eb2:	f43f aeb7 	beq.w	c24 <ll_adv_enable+0x284>
     eb6:	f44f 73da 	mov.w	r3, #436	; 0x1b4
     eba:	f44f 721b 	mov.w	r2, #620	; 0x26c
     ebe:	e6ba      	b.n	c36 <ll_adv_enable+0x296>
			conn_release(adv);
     ec0:	f016 fc64 	bl	1778c <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     ec4:	2603      	movs	r6, #3
     ec6:	e5b0      	b.n	a2a <ll_adv_enable+0x8a>
     ec8:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
     ecc:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
     ed0:	e6b1      	b.n	c36 <ll_adv_enable+0x296>
	LL_ASSERT(!ret);
     ed2:	4a21      	ldr	r2, [pc, #132]	; (f58 <ll_adv_enable+0x5b8>)
     ed4:	4929      	ldr	r1, [pc, #164]	; (f7c <ll_adv_enable+0x5dc>)
     ed6:	4822      	ldr	r0, [pc, #136]	; (f60 <ll_adv_enable+0x5c0>)
     ed8:	f240 7352 	movw	r3, #1874	; 0x752
     edc:	f023 faea 	bl	244b4 <printk>
     ee0:	4040      	eors	r0, r0
     ee2:	f380 8811 	msr	BASEPRI, r0
     ee6:	f04f 0003 	mov.w	r0, #3
     eea:	df02      	svc	2
     eec:	e765      	b.n	dba <ll_adv_enable+0x41a>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     eee:	f105 0070 	add.w	r0, r5, #112	; 0x70
     ef2:	67a8      	str	r0, [r5, #120]	; 0x78
     ef4:	e5c6      	b.n	a84 <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     ef6:	2607      	movs	r6, #7
     ef8:	e597      	b.n	a2a <ll_adv_enable+0x8a>
		mark = ull_disable_unmark(adv);
     efa:	481c      	ldr	r0, [pc, #112]	; (f6c <ll_adv_enable+0x5cc>)
     efc:	f016 f94c 	bl	17198 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
     f00:	4284      	cmp	r4, r0
     f02:	f43f ad91 	beq.w	a28 <ll_adv_enable+0x88>
     f06:	f240 734c 	movw	r3, #1868	; 0x74c
     f0a:	4a13      	ldr	r2, [pc, #76]	; (f58 <ll_adv_enable+0x5b8>)
     f0c:	4913      	ldr	r1, [pc, #76]	; (f5c <ll_adv_enable+0x5bc>)
     f0e:	4814      	ldr	r0, [pc, #80]	; (f60 <ll_adv_enable+0x5c0>)
     f10:	f023 fad0 	bl	244b4 <printk>
     f14:	4040      	eors	r0, r0
     f16:	f380 8811 	msr	BASEPRI, r0
     f1a:	f04f 0003 	mov.w	r0, #3
     f1e:	df02      	svc	2
     f20:	e582      	b.n	a28 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
     f22:	4658      	mov	r0, fp
     f24:	f016 f85c 	bl	16fe0 <ll_rx_release>
			ll_rx_link_release(link);
     f28:	4650      	mov	r0, sl
     f2a:	f016 f84d 	bl	16fc8 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     f2e:	2607      	movs	r6, #7
     f30:	e57b      	b.n	a2a <ll_adv_enable+0x8a>
			mark = ull_disable_unmark(adv);
     f32:	480e      	ldr	r0, [pc, #56]	; (f6c <ll_adv_enable+0x5cc>)
     f34:	f016 f930 	bl	17198 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
     f38:	4284      	cmp	r4, r0
     f3a:	f43f ad75 	beq.w	a28 <ll_adv_enable+0x88>
     f3e:	f240 733e 	movw	r3, #1854	; 0x73e
     f42:	e7e2      	b.n	f0a <ll_adv_enable+0x56a>
     f44:	f3af 8000 	nop.w
     f48:	1afd498d 	.word	0x1afd498d
     f4c:	00000007 	.word	0x00000007
     f50:	3b9aca00 	.word	0x3b9aca00
     f54:	000174fd 	.word	0x000174fd
     f58:	0002ea8c 	.word	0x0002ea8c
     f5c:	0002eb7c 	.word	0x0002eb7c
     f60:	0002e80c 	.word	0x0002e80c
     f64:	00017125 	.word	0x00017125
     f68:	2000353c 	.word	0x2000353c
     f6c:	20003520 	.word	0x20003520
     f70:	84e72a00 	.word	0x84e72a00
     f74:	20003600 	.word	0x20003600
     f78:	00017709 	.word	0x00017709
     f7c:	0002e974 	.word	0x0002e974

00000f80 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
     f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
     f82:	4e19      	ldr	r6, [pc, #100]	; (fe8 <ll_scan_params_set+0x68>)
{
     f84:	f89d 4018 	ldrb.w	r4, [sp, #24]
	if (!scan || scan->is_enabled) {
     f88:	f896 503c 	ldrb.w	r5, [r6, #60]	; 0x3c
     f8c:	f015 0701 	ands.w	r7, r5, #1
     f90:	d120      	bne.n	fd4 <ll_scan_params_set+0x54>
	lll->filter_policy = filter_policy;
     f92:	f896 c024 	ldrb.w	ip, [r6, #36]	; 0x24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     f96:	f8df e054 	ldr.w	lr, [pc, #84]	; fec <ll_scan_params_set+0x6c>
	lll->interval = interval;
     f9a:	86b1      	strh	r1, [r6, #52]	; 0x34
	lll->filter_policy = filter_policy;
     f9c:	00e4      	lsls	r4, r4, #3
     f9e:	f004 0418 	and.w	r4, r4, #24
     fa2:	f00c 0c67 	and.w	ip, ip, #103	; 0x67
     fa6:	ea44 14c0 	orr.w	r4, r4, r0, lsl #7
	scan->own_addr_type = own_addr_type;
     faa:	f363 0542 	bfi	r5, r3, #1, #2
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     fae:	fba2 010e 	umull	r0, r1, r2, lr
	lll->filter_policy = filter_policy;
     fb2:	ea44 040c 	orr.w	r4, r4, ip
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     fb6:	2391      	movs	r3, #145	; 0x91
     fb8:	fb03 1102 	mla	r1, r3, r2, r1
	scan->own_addr_type = own_addr_type;
     fbc:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     fc0:	a307      	add	r3, pc, #28	; (adr r3, fe0 <ll_scan_params_set+0x60>)
     fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
	lll->filter_policy = filter_policy;
     fc6:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
     fca:	f7ff f8e9 	bl	1a0 <__aeabi_uldivmod>
     fce:	63b0      	str	r0, [r6, #56]	; 0x38
}
     fd0:	4638      	mov	r0, r7
     fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     fd4:	270c      	movs	r7, #12
}
     fd6:	4638      	mov	r0, r7
     fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fda:	bf00      	nop
     fdc:	f3af 8000 	nop.w
     fe0:	1afd498d 	.word	0x1afd498d
     fe4:	00000007 	.word	0x00000007
     fe8:	20003624 	.word	0x20003624
     fec:	84e72a00 	.word	0x84e72a00

00000ff0 <ull_scan_enable>:
{
     ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	lll->chan = 0;
     ff4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
     ff8:	4604      	mov	r4, r0
	ll_addr_get(lll->init_addr_type, lll->init_addr);
     ffa:	f100 0127 	add.w	r1, r0, #39	; 0x27
	lll->init_addr_type = scan->own_addr_type;
     ffe:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    1002:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    1006:	f3c0 0040 	ubfx	r0, r0, #1, #1
    100a:	f360 1386 	bfi	r3, r0, #6, #1
{
    100e:	b08d      	sub	sp, #52	; 0x34
	lll->init_addr_type = scan->own_addr_type;
    1010:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	ll_addr_get(lll->init_addr_type, lll->init_addr);
    1014:	f013 fba8 	bl	14768 <ll_addr_get>
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1018:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    101a:	f894 3020 	ldrb.w	r3, [r4, #32]
    101e:	483c      	ldr	r0, [pc, #240]	; (1110 <CONFIG_BT_RX_STACK_SIZE+0x110>)
	hdr->parent = parent;
    1020:	61e4      	str	r4, [r4, #28]
    1022:	2500      	movs	r5, #0
    1024:	fba6 0100 	umull	r0, r1, r6, r0
	hdr->is_stop = 0U;
    1028:	f365 0300 	bfi	r3, r5, #0, #1
    102c:	2291      	movs	r2, #145	; 0x91
    102e:	fb02 1106 	mla	r1, r2, r6, r1
    1032:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1036:	f884 3020 	strb.w	r3, [r4, #32]
    103a:	a333      	add	r3, pc, #204	; (adr r3, 1108 <CONFIG_BT_RX_STACK_SIZE+0x108>)
    103c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1040:	f7ff f8ae 	bl	1a0 <__aeabi_uldivmod>
	if ((lll->ticks_window +
    1044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
	scan->evt.ticks_active_to_start = 0U;
    1046:	6065      	str	r5, [r4, #4]
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1048:	4606      	mov	r6, r0
	if ((lll->ticks_window +
    104a:	3309      	adds	r3, #9
	    (ticks_interval -
    104c:	f1a6 0231 	sub.w	r2, r6, #49	; 0x31
	if ((lll->ticks_window +
    1050:	4293      	cmp	r3, r2
	scan->evt.ticks_xtal_to_start =
    1052:	f04f 0131 	mov.w	r1, #49	; 0x31
		scan->evt.ticks_slot =
    1056:	bf32      	itee	cc
    1058:	60e3      	strcc	r3, [r4, #12]
			scan->evt.ticks_slot = 0U;
    105a:	60e5      	strcs	r5, [r4, #12]
		lll->ticks_window = 0U;
    105c:	63a5      	strcs	r5, [r4, #56]	; 0x38
	scan->evt.ticks_preempt_to_start =
    105e:	60a5      	str	r5, [r4, #8]
	scan->evt.ticks_xtal_to_start =
    1060:	6021      	str	r1, [r4, #0]
	ticks_anchor = ticker_ticks_now_get();
    1062:	f013 fb7b 	bl	1475c <ticker_ticks_now_get>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1066:	9406      	str	r4, [sp, #24]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1068:	f8b4 a034 	ldrh.w	sl, [r4, #52]	; 0x34
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    106c:	4a29      	ldr	r2, [pc, #164]	; (1114 <CONFIG_BT_RX_STACK_SIZE+0x114>)
    106e:	4b2a      	ldr	r3, [pc, #168]	; (1118 <CONFIG_BT_RX_STACK_SIZE+0x118>)
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1070:	4d2a      	ldr	r5, [pc, #168]	; (111c <CONFIG_BT_RX_STACK_SIZE+0x11c>)
	ticks_anchor = ticker_ticks_now_get();
    1072:	4680      	mov	r8, r0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1074:	4826      	ldr	r0, [pc, #152]	; (1110 <CONFIG_BT_RX_STACK_SIZE+0x110>)
    1076:	2791      	movs	r7, #145	; 0x91
    1078:	fbaa 0100 	umull	r0, r1, sl, r0
    107c:	fb07 110a 	mla	r1, r7, sl, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1080:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
    1084:	68e7      	ldr	r7, [r4, #12]
    1086:	9704      	str	r7, [sp, #16]
    1088:	e9cd 2907 	strd	r2, r9, [sp, #28]
    108c:	2700      	movs	r7, #0
    108e:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    1090:	f04f 0a02 	mov.w	sl, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1094:	a31c      	add	r3, pc, #112	; (adr r3, 1108 <CONFIG_BT_RX_STACK_SIZE+0x108>)
    1096:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    109a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    109e:	9703      	str	r7, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    10a0:	f7ff f87e 	bl	1a0 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    10a4:	1b65      	subs	r5, r4, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    10a6:	4610      	mov	r0, r2
    10a8:	4619      	mov	r1, r3
    10aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    10ae:	2300      	movs	r3, #0
    10b0:	f7ff f876 	bl	1a0 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    10b4:	09ad      	lsrs	r5, r5, #6
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
    10b6:	3504      	adds	r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    10b8:	b2ed      	uxtb	r5, r5
    10ba:	462a      	mov	r2, r5
    10bc:	4643      	mov	r3, r8
    10be:	9002      	str	r0, [sp, #8]
    10c0:	2103      	movs	r1, #3
    10c2:	9700      	str	r7, [sp, #0]
    10c4:	4638      	mov	r0, r7
    10c6:	9601      	str	r6, [sp, #4]
    10c8:	f013 fa96 	bl	145f8 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    10cc:	4649      	mov	r1, r9
    10ce:	f016 f82f 	bl	17130 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    10d2:	4605      	mov	r5, r0
    10d4:	b968      	cbnz	r0, 10f2 <CONFIG_BT_RX_STACK_SIZE+0xf2>
	scan->is_enabled = 1U;
    10d6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    10da:	f043 0301 	orr.w	r3, r3, #1
    10de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	if (!ull_adv_is_enabled_get(0))
    10e2:	f016 fd01 	bl	17ae8 <ull_adv_is_enabled_get>
    10e6:	4604      	mov	r4, r0
    10e8:	b138      	cbz	r0, 10fa <CONFIG_BT_RX_STACK_SIZE+0xfa>
	return 0;
    10ea:	4628      	mov	r0, r5
}
    10ec:	b00d      	add	sp, #52	; 0x34
    10ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    10f2:	200c      	movs	r0, #12
}
    10f4:	b00d      	add	sp, #52	; 0x34
    10f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_adv_scan_state_cb(BIT(1));
    10fa:	4650      	mov	r0, sl
    10fc:	f01a fc9c 	bl	1ba38 <ull_filter_adv_scan_state_cb>
	return 0;
    1100:	4620      	mov	r0, r4
}
    1102:	b00d      	add	sp, #52	; 0x34
    1104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1108:	1afd498d 	.word	0x1afd498d
    110c:	00000007 	.word	0x00000007
    1110:	84e72a00 	.word	0x84e72a00
    1114:	00017125 	.word	0x00017125
    1118:	00017cb1 	.word	0x00017cb1
    111c:	20003624 	.word	0x20003624

00001120 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    1120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1124:	4604      	mov	r4, r0
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    1126:	f890 70e9 	ldrb.w	r7, [r0, #233]	; 0xe9
    112a:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
    112e:	4287      	cmp	r7, r0
{
    1130:	b08d      	sub	sp, #52	; 0x34
    1132:	460d      	mov	r5, r1
    1134:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    1136:	d00e      	beq.n	1156 <ull_conn_llcp+0x36>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    1138:	1bc0      	subs	r0, r0, r7
    113a:	f000 0003 	and.w	r0, r0, #3
    113e:	2802      	cmp	r0, #2
    1140:	d01b      	beq.n	117a <ull_conn_llcp+0x5a>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    1142:	f894 212d 	ldrb.w	r2, [r4, #301]	; 0x12d
    1146:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    114a:	429a      	cmp	r2, r3
    114c:	d130      	bne.n	11b0 <ull_conn_llcp+0x90>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    114e:	2000      	movs	r0, #0
}
    1150:	b00d      	add	sp, #52	; 0x34
    1152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
    1156:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
    115a:	f013 0801 	ands.w	r8, r3, #1
    115e:	d1f0      	bne.n	1142 <ull_conn_llcp+0x22>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1160:	f894 1105 	ldrb.w	r1, [r4, #261]	; 0x105
    1164:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    1168:	428a      	cmp	r2, r1
    116a:	f000 8394 	beq.w	1896 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50e>
			conn->llcp_ack -= 2U;
    116e:	1eb8      	subs	r0, r7, #2
			conn->llcp_type = LLCP_CONN_UPD;
    1170:	2301      	movs	r3, #1
			conn->llcp_ack -= 2U;
    1172:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
    1176:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    117a:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    117e:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    1182:	429a      	cmp	r2, r3
    1184:	d006      	beq.n	1194 <ull_conn_llcp+0x74>
			if ((conn->llcp_length.state ==
    1186:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
    118a:	f002 0106 	and.w	r1, r2, #6
    118e:	2904      	cmp	r1, #4
    1190:	f000 83c5 	beq.w	191e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x596>
		switch (conn->llcp_type) {
    1194:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
    1198:	1e7b      	subs	r3, r7, #1
    119a:	2b05      	cmp	r3, #5
    119c:	f200 836d 	bhi.w	187a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4f2>
    11a0:	e8df f013 	tbh	[pc, r3, lsl #1]
    11a4:	0304005c 	.word	0x0304005c
    11a8:	036b0280 	.word	0x036b0280
    11ac:	01a9032e 	.word	0x01a9032e
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    11b0:	4829      	ldr	r0, [pc, #164]	; (1258 <ull_conn_llcp+0x138>)
    11b2:	f011 fed5 	bl	12f60 <mem_acquire>
		if (tx) {
    11b6:	b358      	cbz	r0, 1210 <ull_conn_llcp+0xf0>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    11b8:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    11bc:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    11c0:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    11c2:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    11c4:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    11c8:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    11ca:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    11cc:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
    11ce:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
    11d2:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    11d6:	7202      	strb	r2, [r0, #8]
	if (
    11d8:	b32b      	cbz	r3, 1226 <ull_conn_llcp+0x106>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
    11da:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    11de:	0791      	lsls	r1, r2, #30
    11e0:	d421      	bmi.n	1226 <ull_conn_llcp+0x106>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
    11e2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    11e6:	07d2      	lsls	r2, r2, #31
    11e8:	d41d      	bmi.n	1226 <ull_conn_llcp+0x106>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    11ea:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    11ee:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    11f0:	bf04      	itt	eq
    11f2:	681a      	ldreq	r2, [r3, #0]
    11f4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    11f8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    11fc:	b9b2      	cbnz	r2, 122c <ull_conn_llcp+0x10c>
			tx->next = conn->tx_head->next;
    11fe:	681a      	ldr	r2, [r3, #0]
    1200:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1202:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    1204:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    1206:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    120a:	b90b      	cbnz	r3, 1210 <ull_conn_llcp+0xf0>
		conn->tx_data_last = tx;
    120c:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
    1210:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    1214:	2800      	cmp	r0, #0
    1216:	d19a      	bne.n	114e <ull_conn_llcp+0x2e>
			conn->procedure_expire = conn->supervision_reload;
    1218:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    121c:	2b01      	cmp	r3, #1
    121e:	d90e      	bls.n	123e <ull_conn_llcp+0x11e>
			conn->procedure_expire = conn->supervision_reload;
    1220:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1224:	e793      	b.n	114e <ull_conn_llcp+0x2e>
		if (!conn->tx_ctrl) {
    1226:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    122a:	b172      	cbz	r2, 124a <ull_conn_llcp+0x12a>
	tx->next = conn->tx_ctrl_last->next;
    122c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1230:	681a      	ldr	r2, [r3, #0]
    1232:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1234:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1236:	6803      	ldr	r3, [r0, #0]
    1238:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
    123c:	e7e5      	b.n	120a <ull_conn_llcp+0xea>
				conn->procedure_expire++;
    123e:	3301      	adds	r3, #1
    1240:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
    1244:	b00d      	add	sp, #52	; 0x34
    1246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    124a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    124c:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1250:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1254:	e7d9      	b.n	120a <ull_conn_llcp+0xea>
    1256:	bf00      	nop
    1258:	200038c4 	.word	0x200038c4
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    125c:	f8df a440 	ldr.w	sl, [pc, #1088]	; 16a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x318>

	/* set mutex */
	if (!conn_upd) {
    1260:	f8da 3000 	ldr.w	r3, [sl]
    1264:	2b00      	cmp	r3, #0
    1266:	f000 8502 	beq.w	1c6e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e6>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    126a:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
    126e:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1270:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1274:	4490      	add	r8, r2
    1276:	44b0      	add	r8, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1278:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    127c:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1280:	f040 83ec 	bne.w	1a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6d4>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1284:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    1288:	eba8 0209 	sub.w	r2, r8, r9
    128c:	fa1f fb82 	uxth.w	fp, r2
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
    1290:	0412      	lsls	r2, r2, #16
    1292:	f53f af56 	bmi.w	1142 <ull_conn_llcp+0x22>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1296:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    129a:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
    129e:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
    12a2:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    12a6:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    12a8:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    12ac:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    12b0:	d009      	beq.n	12c6 <ull_conn_llcp+0x1a6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    12b2:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    12b6:	f002 0207 	and.w	r2, r2, #7
    12ba:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    12bc:	bf04      	itt	eq
    12be:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    12c2:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    12c6:	f8da 3000 	ldr.w	r3, [sl]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    12ca:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		if (conn_upd_curr == conn) {
    12ce:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    12d0:	bf04      	itt	eq
    12d2:	2300      	moveq	r3, #0
    12d4:	f8ca 3000 	streq.w	r3, [sl]
		LL_ASSERT(rx && rx->hdr.link);
    12d8:	2f00      	cmp	r7, #0
    12da:	f000 8599 	beq.w	1e10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa88>
    12de:	6838      	ldr	r0, [r7, #0]
    12e0:	2800      	cmp	r0, #0
    12e2:	f000 8595 	beq.w	1e10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa88>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    12e6:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    12ea:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    12ec:	6841      	ldr	r1, [r0, #4]
    12ee:	f8b4 c10a 	ldrh.w	ip, [r4, #266]	; 0x10a
    12f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    12f6:	4293      	cmp	r3, r2
    12f8:	f000 86db 	beq.w	20b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd2a>
    12fc:	f8b4 e10c 	ldrh.w	lr, [r4, #268]	; 0x10c
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1300:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1302:	80fa      	strh	r2, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1304:	210f      	movs	r1, #15

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    1306:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    1308:	83fb      	strh	r3, [r7, #30]
			cu->latency = conn->llcp_cu.latency;
    130a:	f8a7 c020 	strh.w	ip, [r7, #32]
			cu->timeout = conn->llcp_cu.timeout;
    130e:	f8a7 e022 	strh.w	lr, [r7, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1312:	7139      	strb	r1, [r7, #4]
			cu->status = 0x00;
    1314:	773a      	strb	r2, [r7, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1316:	4639      	mov	r1, r7
    1318:	f015 fe68 	bl	16fec <ll_rx_put>
		ll_rx_sched();
    131c:	f015 fe70 	bl	17000 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1320:	6823      	ldr	r3, [r4, #0]
    1322:	2b00      	cmp	r3, #0
    1324:	da09      	bge.n	133a <ull_conn_llcp+0x21a>
			uint32_t ticks_prepare_to_start =
    1326:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    132a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    132e:	428a      	cmp	r2, r1
    1330:	bf2c      	ite	cs
    1332:	18a9      	addcs	r1, r5, r2
    1334:	1869      	addcc	r1, r5, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1336:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1338:	1acd      	subs	r5, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    133a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    133c:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
    1340:	fb13 f30b 	smulbb	r3, r3, fp
    1344:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1346:	fbb3 f1f7 	udiv	r1, r3, r7
		conn_interval_new = latency * conn->llcp_cu.interval;
    134a:	fb17 f201 	smulbb	r2, r7, r1
    134e:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1350:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1352:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    1356:	f080 8549 	bcs.w	1dec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa64>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    135a:	1ad3      	subs	r3, r2, r3
    135c:	48c4      	ldr	r0, [pc, #784]	; (1670 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e8>)
    135e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1362:	fb02 f303 	mul.w	r3, r2, r3
    1366:	fba3 0100 	umull	r0, r1, r3, r0
    136a:	a3bf      	add	r3, pc, #764	; (adr r3, 1668 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e0>)
    136c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1370:	f7fe ff16 	bl	1a0 <__aeabi_uldivmod>
    1374:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1378:	4405      	add	r5, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
    137a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    137c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    1380:	eba9 0808 	sub.w	r8, r9, r8
    1384:	44d0      	add	r8, sl
		lll->latency_prepare += lazy;
    1386:	4432      	add	r2, r6
		lll->latency_prepare -= (instant_latency - latency);
    1388:	4490      	add	r8, r2
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    138a:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
    138e:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1390:	f8a4 8032 	strh.w	r8, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1394:	fb09 f707 	mul.w	r7, r9, r7
		} else if (lll->role) {
    1398:	f2c0 854a 	blt.w	1e30 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaa8>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    139c:	4ab5      	ldr	r2, [pc, #724]	; (1674 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ec>)
    139e:	49b6      	ldr	r1, [pc, #728]	; (1678 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f0>)
    13a0:	48b6      	ldr	r0, [pc, #728]	; (167c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f4>)
    13a2:	f640 1363 	movw	r3, #2403	; 0x963
    13a6:	f023 f885 	bl	244b4 <printk>
    13aa:	4040      	eors	r0, r0
    13ac:	f380 8811 	msr	BASEPRI, r0
    13b0:	f04f 0003 	mov.w	r0, #3
    13b4:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    13b6:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
    13ba:	463e      	mov	r6, r7

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    13bc:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
    13c0:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    13c4:	4bae      	ldr	r3, [pc, #696]	; (1680 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f8>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    13c6:	48af      	ldr	r0, [pc, #700]	; (1684 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2fc>)
		lll->latency = conn->llcp_cu.latency;
    13c8:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    13ca:	f242 7c10 	movw	ip, #10000	; 0x2710
    13ce:	fb0c 7202 	mla	r2, ip, r2, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    13d2:	443b      	add	r3, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    13d4:	4438      	add	r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    13d6:	fbb3 f3f7 	udiv	r3, r3, r7
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    13da:	f101 0c06 	add.w	ip, r1, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    13de:	3a01      	subs	r2, #1
    13e0:	fbb2 f2f7 	udiv	r2, r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    13e4:	fbb0 f7f7 	udiv	r7, r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    13e8:	b298      	uxth	r0, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    13ea:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    13ee:	4560      	cmp	r0, ip
		lll->interval = conn->llcp_cu.interval;
    13f0:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    13f4:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    13f8:	f8a4 70ca 	strh.w	r7, [r4, #202]	; 0xca
		lll->interval = conn->llcp_cu.interval;
    13fc:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    13fe:	dd02      	ble.n	1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
				     (conn->apto_reload - (lll->latency + 6)) :
    1400:	1a40      	subs	r0, r0, r1
    1402:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1404:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1406:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    140a:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    140e:	075b      	lsls	r3, r3, #29
			conn->supervision_expire = 0U;
    1410:	bf44      	itt	mi
    1412:	2300      	movmi	r3, #0
    1414:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1418:	2102      	movs	r1, #2
    141a:	2001      	movs	r0, #1
    141c:	f01e fa34 	bl	1f888 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1420:	2200      	movs	r2, #0
    1422:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1424:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1426:	2001      	movs	r0, #1
    1428:	f011 fe3e 	bl	130a8 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    142c:	4996      	ldr	r1, [pc, #600]	; (1688 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x300>)
    142e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    1432:	4620      	mov	r0, r4
    1434:	f011 fdca 	bl	12fcc <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1438:	1d42      	adds	r2, r0, #5
    143a:	fa5f fa82 	uxtb.w	sl, r2
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    143e:	4b93      	ldr	r3, [pc, #588]	; (168c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x304>)
    1440:	9400      	str	r4, [sp, #0]
    1442:	4652      	mov	r2, sl
    1444:	2101      	movs	r1, #1
    1446:	2000      	movs	r0, #0
    1448:	f013 f942 	bl	146d0 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    144c:	f030 0302 	bics.w	r3, r0, #2
    1450:	d00c      	beq.n	146c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe4>
    1452:	4a88      	ldr	r2, [pc, #544]	; (1674 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ec>)
    1454:	498e      	ldr	r1, [pc, #568]	; (1690 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x308>)
    1456:	4889      	ldr	r0, [pc, #548]	; (167c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f4>)
    1458:	f640 1392 	movw	r3, #2450	; 0x992
    145c:	f023 f82a 	bl	244b4 <printk>
    1460:	4040      	eors	r0, r0
    1462:	f380 8811 	msr	BASEPRI, r0
    1466:	f04f 0003 	mov.w	r0, #3
    146a:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    146c:	4b80      	ldr	r3, [pc, #512]	; (1670 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e8>)
    146e:	fba6 6703 	umull	r6, r7, r6, r3
    1472:	4630      	mov	r0, r6
    1474:	a37c      	add	r3, pc, #496	; (adr r3, 1668 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e0>)
    1476:	e9d3 2300 	ldrd	r2, r3, [r3]
    147a:	4639      	mov	r1, r7
    147c:	f7fe fe90 	bl	1a0 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    1480:	4a84      	ldr	r2, [pc, #528]	; (1694 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30c>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1482:	68e3      	ldr	r3, [r4, #12]
    1484:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1486:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
    148a:	fbab 2302 	umull	r2, r3, fp, r2
    148e:	2007      	movs	r0, #7
    1490:	fb00 330b 	mla	r3, r0, fp, r3
    1494:	1ab0      	subs	r0, r6, r2
    1496:	eb67 0103 	sbc.w	r1, r7, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    149a:	9408      	str	r4, [sp, #32]
    149c:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    149e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    14a2:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(periodic_us),
    14a4:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    14a6:	4f7c      	ldr	r7, [pc, #496]	; (1698 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x310>)
    14a8:	4e7c      	ldr	r6, [pc, #496]	; (169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>)
    14aa:	9707      	str	r7, [sp, #28]
    14ac:	9605      	str	r6, [sp, #20]
    14ae:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    14b0:	f7fe fe76 	bl	1a0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    14b4:	462b      	mov	r3, r5
    14b6:	e9cd b001 	strd	fp, r0, [sp, #4]
    14ba:	f8cd 8000 	str.w	r8, [sp]
    14be:	4620      	mov	r0, r4
    14c0:	4652      	mov	r2, sl
    14c2:	2101      	movs	r1, #1
    14c4:	f013 f898 	bl	145f8 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    14c8:	f030 0302 	bics.w	r3, r0, #2
    14cc:	d00c      	beq.n	14e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x160>
    14ce:	4a69      	ldr	r2, [pc, #420]	; (1674 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ec>)
    14d0:	496f      	ldr	r1, [pc, #444]	; (1690 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x308>)
    14d2:	486a      	ldr	r0, [pc, #424]	; (167c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f4>)
    14d4:	f640 13ac 	movw	r3, #2476	; 0x9ac
    14d8:	f022 ffec 	bl	244b4 <printk>
    14dc:	4040      	eors	r0, r0
    14de:	f380 8811 	msr	BASEPRI, r0
    14e2:	f04f 0003 	mov.w	r0, #3
    14e6:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    14e8:	f1b9 0f00 	cmp.w	r9, #0
    14ec:	f040 85fc 	bne.w	20e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd60>
				return -ECANCELED;
    14f0:	f06f 0047 	mvn.w	r0, #71	; 0x47
    14f4:	e62c      	b.n	1150 <ull_conn_llcp+0x30>
			event_counter = lll->event_counter +
    14f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    14f8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    14fa:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    14fe:	441a      	add	r2, r3
					lll->latency_prepare + lazy;
    1500:	4432      	add	r2, r6
	if (conn->llcp.phy_upd_ind.initiate) {
    1502:	07ef      	lsls	r7, r5, #31
			event_counter = lll->event_counter +
    1504:	b296      	uxth	r6, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    1506:	46ab      	mov	fp, r5
    1508:	f100 8313 	bmi.w	1b32 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7aa>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    150c:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    1510:	1ab6      	subs	r6, r6, r2
    1512:	0437      	lsls	r7, r6, #16
    1514:	f53f ae15 	bmi.w	1142 <ull_conn_llcp+0x22>
	if (!conn->common.fex_valid ||
    1518:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
    151c:	f894 8064 	ldrb.w	r8, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    1520:	f894 a065 	ldrb.w	sl, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    1524:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    1528:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		conn->llcp_ack = conn->llcp_req;
    152c:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
	if (!conn->common.fex_valid ||
    1530:	07d6      	lsls	r6, r2, #31
		old_tx = lll->phy_tx;
    1532:	f008 0807 	and.w	r8, r8, #7
		old_rx = lll->phy_rx;
    1536:	f00a 0a07 	and.w	sl, sl, #7
	if (!conn->common.fex_valid ||
    153a:	f140 85de 	bpl.w	20fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd72>
	feature_coded_phy = (conn->llcp_feature.features_conn &
    153e:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
    1542:	0510      	lsls	r0, r2, #20
    1544:	f140 85d9 	bpl.w	20fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd72>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    1548:	f8b4 90d8 	ldrh.w	r9, [r4, #216]	; 0xd8
    154c:	f5b9 6f29 	cmp.w	r9, #2704	; 0xa90
    1550:	bf28      	it	cs
    1552:	f44f 6929 	movcs.w	r9, #2704	; 0xa90
    1556:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
    155a:	f44f 6329 	mov.w	r3, #2704	; 0xa90
    155e:	bf38      	it	cc
    1560:	f44f 79a4 	movcc.w	r9, #328	; 0x148
    1564:	930b      	str	r3, [sp, #44]	; 0x2c
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    1566:	f015 0f1c 	tst.w	r5, #28
    156a:	f040 8639 	bne.w	21e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe58>
		uint16_t eff_tx_time = lll->max_tx_time;
    156e:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    1572:	f015 0fe0 	tst.w	r5, #224	; 0xe0
    1576:	d00c      	beq.n	1592 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20a>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1578:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    157c:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1580:	0969      	lsrs	r1, r5, #5
    1582:	f361 0202 	bfi	r2, r1, #0, #3
    1586:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    158a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    158c:	f016 fd36 	bl	17ffc <calc_eff_time>
    1590:	4607      	mov	r7, r0
					      max_rx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		lll->phy_flags = conn->phy_pref_flags;
    1592:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    1596:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    159a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
    159e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    15a2:	f362 01c3 	bfi	r1, r2, #3, #1
    15a6:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
    15aa:	2d00      	cmp	r5, #0
    15ac:	f000 86fe 	beq.w	23ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1024>
    15b0:	6828      	ldr	r0, [r5, #0]
    15b2:	2800      	cmp	r0, #0
    15b4:	f000 86fa 	beq.w	23ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1024>
		conn->llcp_rx = rx->hdr.link->mem;
    15b8:	6842      	ldr	r2, [r0, #4]

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    15ba:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_rx = rx->hdr.link->mem;
    15be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    15c2:	f01b 0f02 	tst.w	fp, #2
    15c6:	f040 879d 	bne.w	2504 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x117c>
		    (lll->phy_rx == old_rx)) {
    15ca:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    15ce:	f003 0307 	and.w	r3, r3, #7
    15d2:	4598      	cmp	r8, r3
		    (lll->phy_rx == old_rx)) {
    15d4:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    15d8:	f001 8065 	beq.w	26a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x131e>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    15dc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    15de:	80e9      	strh	r1, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    15e0:	f04f 0c13 	mov.w	ip, #19

		upd = (void *)rx->pdu;
		upd->status = 0U;
    15e4:	2100      	movs	r1, #0
    15e6:	7729      	strb	r1, [r5, #28]
		upd->tx = lll->phy_tx;
    15e8:	776b      	strb	r3, [r5, #29]
		upd->rx = lll->phy_rx;
    15ea:	77aa      	strb	r2, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    15ec:	f885 c004 	strb.w	ip, [r5, #4]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    15f0:	4629      	mov	r1, r5
    15f2:	f015 fcfb 	bl	16fec <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    15f6:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    15fa:	2d00      	cmp	r5, #0
    15fc:	f000 86e8 	beq.w	23d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1048>
    1600:	6828      	ldr	r0, [r5, #0]
    1602:	2800      	cmp	r0, #0
    1604:	f000 86e4 	beq.w	23d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1048>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    1608:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
    160c:	6842      	ldr	r2, [r0, #4]
    160e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    1612:	42b3      	cmp	r3, r6
    1614:	d309      	bcc.n	162a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a2>
    1616:	454b      	cmp	r3, r9
    1618:	d807      	bhi.n	162a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a2>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    161a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    161e:	42bb      	cmp	r3, r7
    1620:	d303      	bcc.n	162a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a2>
		    (eff_rx_time <= lll->max_rx_time) &&
    1622:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1624:	4293      	cmp	r3, r2
    1626:	f241 8052 	bls.w	26ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1346>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    162a:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    162e:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1632:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    1634:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1636:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1638:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    163c:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    163e:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1640:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1642:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1644:	776a      	strb	r2, [r5, #29]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1646:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    164a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    164e:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1650:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1652:	84aa      	strh	r2, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1654:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1656:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1658:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    165a:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    165c:	f015 fcc6 	bl	16fec <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    1660:	f015 fcce 	bl	17000 <ll_rx_sched>
    1664:	e56d      	b.n	1142 <ull_conn_llcp+0x22>
    1666:	bf00      	nop
    1668:	1afd498d 	.word	0x1afd498d
    166c:	00000007 	.word	0x00000007
    1670:	3b9aca00 	.word	0x3b9aca00
    1674:	0002ebd8 	.word	0x0002ebd8
    1678:	0002e86c 	.word	0x0002e86c
    167c:	0002e80c 	.word	0x0002e80c
    1680:	01c9c37f 	.word	0x01c9c37f
    1684:	026259ff 	.word	0x026259ff
    1688:	20003678 	.word	0x20003678
    168c:	0001832d 	.word	0x0001832d
    1690:	0002ed10 	.word	0x0002ed10
    1694:	1afd498d 	.word	0x1afd498d
    1698:	000182d5 	.word	0x000182d5
    169c:	0001b361 	.word	0x0001b361
    16a0:	20003840 	.word	0x20003840
	if (conn->llcp.encryption.state) {
    16a4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    16a8:	f013 0503 	ands.w	r5, r3, #3
    16ac:	f000 8284 	beq.w	1bb8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x830>
		if (lll->role &&
    16b0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    16b4:	2b00      	cmp	r3, #0
    16b6:	f6bf ad44 	bge.w	1142 <ull_conn_llcp+0x22>
    16ba:	2d01      	cmp	r5, #1
    16bc:	f47f ad41 	bne.w	1142 <ull_conn_llcp+0x22>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    16c0:	48bb      	ldr	r0, [pc, #748]	; (19b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x628>)
    16c2:	f011 fc4d 	bl	12f60 <mem_acquire>
	if (!tx) {
    16c6:	4605      	mov	r5, r0
    16c8:	2800      	cmp	r0, #0
    16ca:	f43f ad3a 	beq.w	1142 <ull_conn_llcp+0x22>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16ce:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    16d0:	220d      	movs	r2, #13
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16d2:	f043 0303 	orr.w	r3, r3, #3
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    16d6:	2704      	movs	r7, #4
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    16d8:	f100 0608 	add.w	r6, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    16dc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    16de:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    16e0:	71c7      	strb	r7, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    16e2:	210c      	movs	r1, #12
    16e4:	4630      	mov	r0, r6
    16e6:	f01b faa3 	bl	1cc30 <lll_csrand_isr_get>
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    16ea:	4631      	mov	r1, r6
    16ec:	2208      	movs	r2, #8
    16ee:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    16f2:	f025 f956 	bl	269a2 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    16f6:	463a      	mov	r2, r7
    16f8:	f105 0110 	add.w	r1, r5, #16
    16fc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    1700:	f025 f94f 	bl	269a2 <memcpy>
	    conn->tx_head &&
    1704:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1708:	2b00      	cmp	r3, #0
    170a:	f000 86e3 	beq.w	24d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114c>
	    !conn->llcp_enc.pause_tx &&
    170e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1712:	0790      	lsls	r0, r2, #30
    1714:	f100 86de 	bmi.w	24d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114c>
	    !conn->llcp_phy.pause_tx &&
    1718:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    171c:	07d1      	lsls	r1, r2, #31
    171e:	f100 86d9 	bmi.w	24d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x114c>
		if (conn->tx_head == conn->tx_data) {
    1722:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1726:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1728:	bf04      	itt	eq
    172a:	681a      	ldreq	r2, [r3, #0]
    172c:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1730:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1734:	2a00      	cmp	r2, #0
    1736:	f001 8125 	beq.w	2984 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15fc>
	tx->next = conn->tx_ctrl_last->next;
    173a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    173e:	681a      	ldr	r2, [r3, #0]
    1740:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1742:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1744:	682b      	ldr	r3, [r5, #0]
    1746:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    174a:	2b00      	cmp	r3, #0
    174c:	f001 80ce 	beq.w	28ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1564>
			rx = ll_pdu_rx_alloc();
    1750:	f015 fc7a 	bl	17048 <ll_pdu_rx_alloc>
			if (!rx) {
    1754:	4605      	mov	r5, r0
    1756:	2800      	cmp	r0, #0
    1758:	f43f acf3 	beq.w	1142 <ull_conn_llcp+0x22>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    175c:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = conn->lll.handle;
    175e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1760:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1762:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1766:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1768:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    176a:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    176c:	772b      	strb	r3, [r5, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    176e:	7769      	strb	r1, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1770:	77ea      	strb	r2, [r5, #31]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1772:	f204 1155 	addw	r1, r4, #341	; 0x155
    1776:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1778:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    177a:	f105 0020 	add.w	r0, r5, #32
    177e:	f025 f910 	bl	269a2 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    1782:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    1786:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    178a:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    178e:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    1792:	6828      	ldr	r0, [r5, #0]
    1794:	4629      	mov	r1, r5
    1796:	f015 fc29 	bl	16fec <ll_rx_put>
			ll_rx_sched();
    179a:	f015 fc31 	bl	17000 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    179e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    17a2:	f366 0301 	bfi	r3, r6, #0, #2
    17a6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    17aa:	e4ca      	b.n	1142 <ull_conn_llcp+0x22>
			event_counter = lll->event_counter +
    17ac:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    17ae:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    17b0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    17b4:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    17b6:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
    17b8:	07df      	lsls	r7, r3, #31
			event_counter = lll->event_counter +
    17ba:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
    17bc:	f100 8100 	bmi.w	19c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x638>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    17c0:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    17c4:	1ab6      	subs	r6, r6, r2
    17c6:	0435      	lsls	r5, r6, #16
    17c8:	f53f acbb 	bmi.w	1142 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    17cc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    17d0:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    17d4:	f104 0538 	add.w	r5, r4, #56	; 0x38
    17d8:	2205      	movs	r2, #5
    17da:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    17de:	4628      	mov	r0, r5
    17e0:	f025 f8df 	bl	269a2 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    17e4:	4628      	mov	r0, r5
    17e6:	2105      	movs	r1, #5
    17e8:	f011 fd84 	bl	132f4 <util_ones_count_get>
		lll->data_chan_count =
    17ec:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    17f0:	2201      	movs	r2, #1
		lll->data_chan_count =
    17f2:	f360 0305 	bfi	r3, r0, #0, #6
    17f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    17fa:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    17fe:	e4a0      	b.n	1142 <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1800:	486b      	ldr	r0, [pc, #428]	; (19b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x628>)
    1802:	f011 fbad 	bl	12f60 <mem_acquire>
	if (tx) {
    1806:	2800      	cmp	r0, #0
    1808:	f43f ac9b 	beq.w	1142 <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    180c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1810:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1814:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1816:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1818:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    181a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    181e:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1822:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1824:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1826:	71c1      	strb	r1, [r0, #7]
	if (
    1828:	2b00      	cmp	r3, #0
    182a:	f000 82d4 	beq.w	1dd6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4e>
	    !conn->llcp_enc.pause_tx &&
    182e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1832:	0791      	lsls	r1, r2, #30
    1834:	f100 82cf 	bmi.w	1dd6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4e>
	    !conn->llcp_phy.pause_tx &&
    1838:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    183c:	07d2      	lsls	r2, r2, #31
    183e:	f100 82ca 	bmi.w	1dd6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4e>
		if (conn->tx_head == conn->tx_data) {
    1842:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1846:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1848:	bf04      	itt	eq
    184a:	681a      	ldreq	r2, [r3, #0]
    184c:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1850:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1854:	2a00      	cmp	r2, #0
    1856:	f001 8061 	beq.w	291c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1594>
	tx->next = conn->tx_ctrl_last->next;
    185a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    185e:	681a      	ldr	r2, [r3, #0]
    1860:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1862:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1864:	6803      	ldr	r3, [r0, #0]
    1866:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    186a:	2b00      	cmp	r3, #0
    186c:	f000 84b4 	beq.w	21d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe50>
		conn->procedure_expire = conn->procedure_reload;
    1870:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1874:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1878:	e463      	b.n	1142 <ull_conn_llcp+0x22>
			LL_ASSERT(0);
    187a:	4a4e      	ldr	r2, [pc, #312]	; (19b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62c>)
    187c:	494e      	ldr	r1, [pc, #312]	; (19b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x630>)
    187e:	484f      	ldr	r0, [pc, #316]	; (19bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x634>)
    1880:	f240 33bf 	movw	r3, #959	; 0x3bf
    1884:	f022 fe16 	bl	244b4 <printk>
    1888:	4040      	eors	r0, r0
    188a:	f380 8811 	msr	BASEPRI, r0
    188e:	f04f 0003 	mov.w	r0, #3
    1892:	df02      	svc	2
			break;
    1894:	e455      	b.n	1142 <ull_conn_llcp+0x22>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1896:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    189a:	f894 c118 	ldrb.w	ip, [r4, #280]	; 0x118
    189e:	4562      	cmp	r2, ip
    18a0:	d154      	bne.n	194c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c4>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    18a2:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
    18a6:	f894 c124 	ldrb.w	ip, [r4, #292]	; 0x124
    18aa:	4562      	cmp	r2, ip
    18ac:	f000 8312 	beq.w	1ed4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4c>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    18b0:	eba2 020c 	sub.w	r2, r2, ip
    18b4:	07d1      	lsls	r1, r2, #31
    18b6:	f57f ac44 	bpl.w	1142 <ull_conn_llcp+0x22>
	if (conn->llcp_version.tx == 0U) {
    18ba:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    18be:	07da      	lsls	r2, r3, #31
    18c0:	f140 8748 	bpl.w	2754 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13cc>
	} else if (conn->llcp_version.rx) {
    18c4:	079a      	lsls	r2, r3, #30
    18c6:	f140 8732 	bpl.w	272e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13a6>
		rx = ll_pdu_rx_alloc();
    18ca:	f015 fbbd 	bl	17048 <ll_pdu_rx_alloc>
		if (!rx) {
    18ce:	4601      	mov	r1, r0
    18d0:	b300      	cbz	r0, 1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
		conn->llcp_version.ack = conn->llcp_version.req;
    18d2:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    18d6:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    18da:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    18dc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    18de:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    18e0:	f043 0303 	orr.w	r3, r3, #3
    18e4:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    18e6:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    18e8:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    18ea:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    18ec:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    18ee:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    18f0:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
    18f2:	f894 0127 	ldrb.w	r0, [r4, #295]	; 0x127
		pdu->llctrl.version_ind.company_id =
    18f6:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
		pdu->llctrl.version_ind.sub_version_number =
    18fa:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
    18fe:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    1902:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
    1906:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
    190a:	6808      	ldr	r0, [r1, #0]
    190c:	f015 fb6e 	bl	16fec <ll_rx_put>
		ll_rx_sched();
    1910:	f015 fb76 	bl	17000 <ll_rx_sched>
	break;
    1914:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1918:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    191c:	e40c      	b.n	1138 <ull_conn_llcp+0x18>
	switch (conn->llcp_length.state) {
    191e:	f002 0107 	and.w	r1, r2, #7
    1922:	2906      	cmp	r1, #6
    1924:	f201 81ae 	bhi.w	2c84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18fc>
    1928:	a001      	add	r0, pc, #4	; (adr r0, 1930 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a8>)
    192a:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    192e:	bf00      	nop
    1930:	00001d05 	.word	0x00001d05
    1934:	00001195 	.word	0x00001195
    1938:	00001195 	.word	0x00001195
    193c:	00001195 	.word	0x00001195
    1940:	00001c77 	.word	0x00001c77
    1944:	00001c77 	.word	0x00001c77
    1948:	00001195 	.word	0x00001195
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    194c:	eba2 020c 	sub.w	r2, r2, ip
    1950:	07d3      	lsls	r3, r2, #31
    1952:	f57f abf6 	bpl.w	1142 <ull_conn_llcp+0x22>
	if (conn->common.fex_valid) {
    1956:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    195a:	f011 0701 	ands.w	r7, r1, #1
    195e:	f000 83e0 	beq.w	2122 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd9a>
		rx = ll_pdu_rx_alloc();
    1962:	f015 fb71 	bl	17048 <ll_pdu_rx_alloc>
		if (!rx) {
    1966:	4607      	mov	r7, r0
    1968:	2800      	cmp	r0, #0
    196a:	d0d3      	beq.n	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    196c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1970:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1974:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1976:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1978:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    197a:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    197e:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1980:	2002      	movs	r0, #2
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1982:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1984:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1986:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1988:	777a      	strb	r2, [r7, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    198a:	77fa      	strb	r2, [r7, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    198c:	f107 0020 	add.w	r0, r7, #32
    1990:	2208      	movs	r2, #8
    1992:	f025 f831 	bl	269f8 <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
    1996:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	dst[0] = val;
    199a:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
    199e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    19a2:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    19a4:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
    19a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    19ac:	4639      	mov	r1, r7
    19ae:	e7ac      	b.n	190a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x582>
    19b0:	200038c4 	.word	0x200038c4
    19b4:	0002ebd8 	.word	0x0002ebd8
    19b8:	0002e86c 	.word	0x0002e86c
    19bc:	0002e80c 	.word	0x0002e80c
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    19c0:	48ce      	ldr	r0, [pc, #824]	; (1cfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x974>)
    19c2:	f011 facd 	bl	12f60 <mem_acquire>
		if (tx) {
    19c6:	4605      	mov	r5, r0
    19c8:	2800      	cmp	r0, #0
    19ca:	f43f abba 	beq.w	1142 <ull_conn_llcp+0x22>
			conn->llcp.chan_map.instant = event_counter +
    19ce:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19d0:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    19d2:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    19d6:	4433      	add	r3, r6
						      conn->lll.latency + 6;
    19d8:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
    19da:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
    19de:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    19e2:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19e4:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    19e8:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    19ea:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    19ee:	712a      	strb	r2, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    19f0:	7168      	strb	r0, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    19f2:	71eb      	strb	r3, [r5, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    19f4:	2205      	movs	r2, #5
    19f6:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    19fa:	1828      	adds	r0, r5, r0
    19fc:	f024 ffd1 	bl	269a2 <memcpy>
	    conn->tx_head &&
    1a00:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1a04:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1a08:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    1a0c:	2b00      	cmp	r3, #0
    1a0e:	f000 80c8 	beq.w	1ba2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81a>
	    !conn->llcp_enc.pause_tx &&
    1a12:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1a16:	0791      	lsls	r1, r2, #30
    1a18:	f100 80c3 	bmi.w	1ba2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81a>
	    !conn->llcp_phy.pause_tx &&
    1a1c:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1a20:	07d2      	lsls	r2, r2, #31
    1a22:	f100 80be 	bmi.w	1ba2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81a>
		if (conn->tx_head == conn->tx_data) {
    1a26:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1a2a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1a2c:	bf04      	itt	eq
    1a2e:	681a      	ldreq	r2, [r3, #0]
    1a30:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1a34:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1a38:	2a00      	cmp	r2, #0
    1a3a:	f000 8782 	beq.w	2942 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15ba>
	tx->next = conn->tx_ctrl_last->next;
    1a3e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1a42:	681a      	ldr	r2, [r3, #0]
    1a44:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1a46:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1a48:	682b      	ldr	r3, [r5, #0]
    1a4a:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1a4e:	2b00      	cmp	r3, #0
    1a50:	f47f ab77 	bne.w	1142 <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    1a54:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    1a58:	f7ff bb73 	b.w	1142 <ull_conn_llcp+0x22>
		rx = ll_pdu_rx_alloc_peek(1);
    1a5c:	2001      	movs	r0, #1
    1a5e:	f015 fad5 	bl	1700c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1a62:	4606      	mov	r6, r0
    1a64:	2800      	cmp	r0, #0
    1a66:	f43f ab6c 	beq.w	1142 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1a6a:	48a4      	ldr	r0, [pc, #656]	; (1cfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x974>)
    1a6c:	f011 fa78 	bl	12f60 <mem_acquire>
		if (!tx) {
    1a70:	4605      	mov	r5, r0
    1a72:	2800      	cmp	r0, #0
    1a74:	f43f ab65 	beq.w	1142 <ull_conn_llcp+0x22>
		(void)ll_pdu_rx_alloc();
    1a78:	f015 fae6 	bl	17048 <ll_pdu_rx_alloc>
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1a7c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		rx->hdr.link->mem = conn->llcp_rx;
    1a7e:	6832      	ldr	r2, [r6, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1a80:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1a84:	4443      	add	r3, r8
    1a86:	3306      	adds	r3, #6
    1a88:	b299      	uxth	r1, r3
		rx->hdr.link->mem = conn->llcp_rx;
    1a8a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    1a8e:	6053      	str	r3, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1a90:	792a      	ldrb	r2, [r5, #4]
		conn->llcp_rx = rx;
    1a92:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1a96:	f36f 0001 	bfc	r0, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1a9a:	230c      	movs	r3, #12
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1a9c:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1aa0:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1aa4:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1aa8:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1aaa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	    conn->tx_head &&
    1aae:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1ab2:	4e93      	ldr	r6, [pc, #588]	; (1d00 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x978>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ab4:	712a      	strb	r2, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1ab6:	2200      	movs	r2, #0
    1ab8:	71ea      	strb	r2, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1aba:	fba6 2303 	umull	r2, r3, r6, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1abe:	f894 6114 	ldrb.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1ac2:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1ac6:	722e      	strb	r6, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1ac8:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1acc:	f8b4 610a 	ldrh.w	r6, [r4, #266]	; 0x10a
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1ad0:	f8a5 200b 	strh.w	r2, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1ad4:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    1ad8:	f8a5 200f 	strh.w	r2, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1adc:	f8a5 600d 	strh.w	r6, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1ae0:	f8a5 1011 	strh.w	r1, [r5, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1ae4:	f8a5 3009 	strh.w	r3, [r5, #9]
	if (
    1ae8:	2800      	cmp	r0, #0
    1aea:	f000 830c 	beq.w	2106 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd7e>
	    !conn->llcp_enc.pause_tx &&
    1aee:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    1af2:	079e      	lsls	r6, r3, #30
    1af4:	f100 8307 	bmi.w	2106 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd7e>
	    !conn->llcp_phy.pause_tx &&
    1af8:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    1afc:	07d9      	lsls	r1, r3, #31
    1afe:	f100 8302 	bmi.w	2106 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xd7e>
		if (conn->tx_head == conn->tx_data) {
    1b02:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1b06:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    1b08:	bf04      	itt	eq
    1b0a:	6803      	ldreq	r3, [r0, #0]
    1b0c:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1b10:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1b14:	2b00      	cmp	r3, #0
    1b16:	f000 871f 	beq.w	2958 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15d0>
	tx->next = conn->tx_ctrl_last->next;
    1b1a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1b1e:	681a      	ldr	r2, [r3, #0]
    1b20:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1b22:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    1b24:	6828      	ldr	r0, [r5, #0]
	conn->tx_ctrl_last = tx;
    1b26:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1b2a:	2800      	cmp	r0, #0
    1b2c:	f47f ab09 	bne.w	1142 <ull_conn_llcp+0x22>
    1b30:	e790      	b.n	1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>
		rx = ll_pdu_rx_alloc_peek(2);
    1b32:	2002      	movs	r0, #2
    1b34:	f015 fa6a 	bl	1700c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1b38:	4680      	mov	r8, r0
    1b3a:	2800      	cmp	r0, #0
    1b3c:	f43f ab01 	beq.w	1142 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b40:	486e      	ldr	r0, [pc, #440]	; (1cfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x974>)
    1b42:	f011 fa0d 	bl	12f60 <mem_acquire>
		if (!tx) {
    1b46:	4605      	mov	r5, r0
    1b48:	2800      	cmp	r0, #0
    1b4a:	f43f aafa 	beq.w	1142 <ull_conn_llcp+0x22>
		conn->llcp.phy_upd_ind.initiate = 0U;
    1b4e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1b52:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    1b56:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    1b5a:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
    1b5e:	f012 0707 	ands.w	r7, r2, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    1b62:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    1b66:	b2db      	uxtb	r3, r3
    1b68:	f040 85c2 	bne.w	26f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1368>
			conn->llcp_ack = conn->llcp_req;
    1b6c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    1b70:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    1b74:	0798      	lsls	r0, r3, #30
			conn->llcp_ack = conn->llcp_req;
    1b76:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    1b7a:	f100 867a 	bmi.w	2872 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ea>
    1b7e:	463b      	mov	r3, r7
    1b80:	4639      	mov	r1, r7
		pdu_ctrl_tx->len =
    1b82:	2205      	movs	r2, #5
    1b84:	716a      	strb	r2, [r5, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    1b86:	722f      	strb	r7, [r5, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b88:	792a      	ldrb	r2, [r5, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    1b8a:	726b      	strb	r3, [r5, #9]
	    conn->tx_head &&
    1b8c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    1b90:	8169      	strh	r1, [r5, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b92:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    1b96:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b98:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_tx->llctrl.opcode =
    1b9a:	71e9      	strb	r1, [r5, #7]
	if (
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	f47f af38 	bne.w	1a12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68a>
		if (!conn->tx_ctrl) {
    1ba2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1ba6:	2a00      	cmp	r2, #0
    1ba8:	f47f af49 	bne.w	1a3e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6b6>
			tx->next = conn->tx_head;
    1bac:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1bae:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1bb2:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1bb6:	e74a      	b.n	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1bb8:	4850      	ldr	r0, [pc, #320]	; (1cfc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x974>)
    1bba:	f011 f9d1 	bl	12f60 <mem_acquire>
	if (!tx) {
    1bbe:	4606      	mov	r6, r0
    1bc0:	2800      	cmp	r0, #0
    1bc2:	f43f aabe 	beq.w	1142 <ull_conn_llcp+0x22>
	if (!lll->role) {
    1bc6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1bca:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    1bcc:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    1bd0:	f280 8419 	bge.w	2406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x107e>
	else if (!lll->enc_rx) {
    1bd4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    1bd8:	071d      	lsls	r5, r3, #28
    1bda:	f100 8608 	bmi.w	27ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1466>
		if (conn->llcp.encryption.error_code) {
    1bde:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    1be2:	2d00      	cmp	r5, #0
    1be4:	f000 84a1 	beq.w	252a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11a2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1be8:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1bea:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1bee:	f043 0303 	orr.w	r3, r3, #3
    1bf2:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1bf4:	07d0      	lsls	r0, r2, #31
    1bf6:	f140 8628 	bpl.w	284a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c2>
	    (conn->llcp_feature.features_conn &
    1bfa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    1bfe:	0759      	lsls	r1, r3, #29
    1c00:	f140 8623 	bpl.w	284a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14c2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1c04:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1c06:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    1c08:	7275      	strb	r5, [r6, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1c0a:	71f2      	strb	r2, [r6, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1c0c:	7233      	strb	r3, [r6, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1c0e:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    1c10:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    1c14:	2200      	movs	r2, #0
    1c16:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	f000 84cf 	beq.w	25be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1236>
	    !conn->llcp_enc.pause_tx &&
    1c20:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1c24:	0792      	lsls	r2, r2, #30
    1c26:	f100 84ca 	bmi.w	25be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1236>
	    !conn->llcp_phy.pause_tx &&
    1c2a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1c2e:	07d7      	lsls	r7, r2, #31
    1c30:	f100 84c5 	bmi.w	25be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1236>
		if (conn->tx_head == conn->tx_data) {
    1c34:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1c38:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1c3a:	bf04      	itt	eq
    1c3c:	681a      	ldreq	r2, [r3, #0]
    1c3e:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1c42:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1c46:	2a00      	cmp	r2, #0
    1c48:	f000 86fd 	beq.w	2a46 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16be>
	tx->next = conn->tx_ctrl_last->next;
    1c4c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1c50:	681a      	ldr	r2, [r3, #0]
    1c52:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1c54:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1c56:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1c5a:	6833      	ldr	r3, [r6, #0]
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	f000 851e 	beq.w	269e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1316>
	conn->llcp_ack = conn->llcp_req;
    1c62:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1c66:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1c6a:	f7ff ba6a 	b.w	1142 <ull_conn_llcp+0x22>
		conn_upd_curr = conn;
    1c6e:	f8ca 4000 	str.w	r4, [sl]
    1c72:	f7ff bafa 	b.w	126a <ull_conn_llcp+0x14a>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1c76:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1c7a:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    1c7e:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1c82:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    1c86:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1c8a:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1c8e:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    1c90:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1c94:	f000 84b3 	beq.w	25fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1276>
			conn->llcp_length.state =
    1c98:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    1c9c:	2206      	movs	r2, #6
    1c9e:	f362 0302 	bfi	r3, r2, #0, #3
    1ca2:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    1ca6:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1caa:	2f00      	cmp	r7, #0
    1cac:	f000 8493 	beq.w	25d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124e>
    1cb0:	6838      	ldr	r0, [r7, #0]
    1cb2:	2800      	cmp	r0, #0
    1cb4:	f000 848f 	beq.w	25d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x124e>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1cb8:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    1cba:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1cbc:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    1cc0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1cc4:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1cc8:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1cca:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
    1ccc:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1cd0:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    1cd2:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1cd6:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1cda:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1cdc:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1cde:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    1ce0:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1ce2:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1ce6:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
    1cea:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
    1cee:	f015 f97d 	bl	16fec <ll_rx_put>
		ll_rx_sched();
    1cf2:	f015 f985 	bl	17000 <ll_rx_sched>
	break;
    1cf6:	f7ff ba4d 	b.w	1194 <ull_conn_llcp+0x74>
    1cfa:	bf00      	nop
    1cfc:	200038c4 	.word	0x200038c4
    1d00:	d1b71759 	.word	0xd1b71759
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1d04:	48be      	ldr	r0, [pc, #760]	; (2000 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc78>)
    1d06:	f011 f92b 	bl	12f60 <mem_acquire>
		if (!tx) {
    1d0a:	2800      	cmp	r0, #0
    1d0c:	f43f aa42 	beq.w	1194 <ull_conn_llcp+0x74>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1d10:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1d14:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    1d18:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1d1c:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1d20:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1d22:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1d26:	f367 0202 	bfi	r2, r7, #0, #3
    1d2a:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    1d2e:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d30:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len =
    1d32:	7147      	strb	r7, [r0, #5]
	if (!conn->common.fex_valid ||
    1d34:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
	feature_coded_phy = (conn->llcp_feature.features_conn &
    1d38:	f8d4 e11c 	ldr.w	lr, [r4, #284]	; 0x11c
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1d3c:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1d3e:	f042 0203 	orr.w	r2, r2, #3
    1d42:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1d44:	221b      	movs	r2, #27
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1d46:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1d4a:	2100      	movs	r1, #0
    1d4c:	7202      	strb	r2, [r0, #8]
	if (!conn->common.fex_valid ||
    1d4e:	07fa      	lsls	r2, r7, #31
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1d50:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1d54:	7241      	strb	r1, [r0, #9]
	if (!conn->common.fex_valid ||
    1d56:	f140 83b9 	bpl.w	24cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1144>
    1d5a:	f41e 6f00 	tst.w	lr, #2048	; 0x800
    1d5e:	f000 83b5 	beq.w	24cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1144>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    1d62:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    1d66:	bf28      	it	cs
    1d68:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
    1d6c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1d70:	bf38      	it	cc
    1d72:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    1d76:	f44f 6129 	mov.w	r1, #2704	; 0xa90
	    conn->tx_head &&
    1d7a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1d7e:	8141      	strh	r1, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1d80:	81c3      	strh	r3, [r0, #14]
	if (
    1d82:	2a00      	cmp	r2, #0
    1d84:	f000 8334 	beq.w	23f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1068>
	    !conn->llcp_enc.pause_tx &&
    1d88:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    1d8c:	079b      	lsls	r3, r3, #30
    1d8e:	f100 832f 	bmi.w	23f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1068>
	    !conn->llcp_phy.pause_tx &&
    1d92:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    1d96:	07df      	lsls	r7, r3, #31
    1d98:	f100 832a 	bmi.w	23f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1068>
		if (conn->tx_head == conn->tx_data) {
    1d9c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1da0:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
    1da2:	bf04      	itt	eq
    1da4:	6813      	ldreq	r3, [r2, #0]
    1da6:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1daa:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1dae:	2b00      	cmp	r3, #0
    1db0:	f000 85ff 	beq.w	29b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x162a>
	tx->next = conn->tx_ctrl_last->next;
    1db4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1db8:	681a      	ldr	r2, [r3, #0]
    1dba:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1dbc:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1dbe:	6802      	ldr	r2, [r0, #0]
    1dc0:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1dc4:	2a00      	cmp	r2, #0
    1dc6:	f000 8546 	beq.w	2856 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14ce>
		conn->procedure_expire = conn->procedure_reload;
    1dca:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1dce:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1dd2:	f7ff b9df 	b.w	1194 <ull_conn_llcp+0x74>
		if (!conn->tx_ctrl) {
    1dd6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1dda:	2a00      	cmp	r2, #0
    1ddc:	f47f ad3d 	bne.w	185a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4d2>
			tx->next = conn->tx_head;
    1de0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1de2:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1de6:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1dea:	e53e      	b.n	186a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e2>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1dec:	fb07 3311 	mls	r3, r7, r1, r3
    1df0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1df4:	4883      	ldr	r0, [pc, #524]	; (2004 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc7c>)
    1df6:	b29b      	uxth	r3, r3
    1df8:	fb02 f303 	mul.w	r3, r2, r3
    1dfc:	fba3 0100 	umull	r0, r1, r3, r0
    1e00:	a37d      	add	r3, pc, #500	; (adr r3, 1ff8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc70>)
    1e02:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e06:	f7fe f9cb 	bl	1a0 <__aeabi_uldivmod>
    1e0a:	1a2d      	subs	r5, r5, r0
    1e0c:	f7ff bab5 	b.w	137a <ull_conn_llcp+0x25a>
		LL_ASSERT(rx && rx->hdr.link);
    1e10:	4a7d      	ldr	r2, [pc, #500]	; (2008 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc80>)
    1e12:	497e      	ldr	r1, [pc, #504]	; (200c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc84>)
    1e14:	487e      	ldr	r0, [pc, #504]	; (2010 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc88>)
    1e16:	f640 03ee 	movw	r3, #2286	; 0x8ee
    1e1a:	f022 fb4b 	bl	244b4 <printk>
    1e1e:	4040      	eors	r0, r0
    1e20:	f380 8811 	msr	BASEPRI, r0
    1e24:	f04f 0003 	mov.w	r0, #3
    1e28:	df02      	svc	2
    1e2a:	6838      	ldr	r0, [r7, #0]
    1e2c:	f7ff ba5b 	b.w	12e6 <ull_conn_llcp+0x1c6>
			lll->slave.window_widening_prepare_us -=
    1e30:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    1e32:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1e34:	4e73      	ldr	r6, [pc, #460]	; (2004 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc7c>)
			lll->slave.window_widening_prepare_us -=
    1e36:	fb03 231b 	mls	r3, r3, fp, r2
    1e3a:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    1e3c:	f01b f93a 	bl	1d0b4 <lll_clock_ppm_local_get>
    1e40:	4680      	mov	r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1e42:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1e46:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1e4a:	f01b f935 	bl	1d0b8 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    1e4e:	eb08 0300 	add.w	r3, r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    1e52:	fb07 f303 	mul.w	r3, r7, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1e56:	486f      	ldr	r0, [pc, #444]	; (2014 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8c>)
			lll->slave.window_widening_prepare_us +=
    1e58:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * 1250U;
    1e5a:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1e5e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1e62:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1e66:	fba0 0303 	umull	r0, r3, r0, r3
    1e6a:	ea4f 4b93 	mov.w	fp, r3, lsr #18
				lll->slave.window_widening_periodic_us *
    1e6e:	fb0b f00a 	mul.w	r0, fp, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1e72:	087b      	lsrs	r3, r7, #1
			lll->slave.window_widening_prepare_us +=
    1e74:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1e76:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1e78:	429a      	cmp	r2, r3
    1e7a:	bf28      	it	cs
    1e7c:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * 1250U;
    1e7e:	fb09 fc01 	mul.w	ip, r9, r1
			conn->slave.ticks_to_offset = 0U;
    1e82:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    1e86:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1e8a:	fba0 0106 	umull	r0, r1, r0, r6
    1e8e:	a35a      	add	r3, pc, #360	; (adr r3, 1ff8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc70>)
    1e90:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
    1e94:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			conn->slave.ticks_to_offset = 0U;
    1e98:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			lll->slave.window_widening_periodic_us =
    1e9c:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ea0:	f7fe f97e 	bl	1a0 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1ea4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ea8:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1eaa:	485b      	ldr	r0, [pc, #364]	; (2018 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc90>)
    1eac:	fba0 3003 	umull	r3, r0, r0, r3
    1eb0:	0a80      	lsrs	r0, r0, #10
    1eb2:	fb09 f000 	mul.w	r0, r9, r0
    1eb6:	fba0 0106 	umull	r0, r1, r0, r6
    1eba:	a34f      	add	r3, pc, #316	; (adr r3, 1ff8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc70>)
    1ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ec0:	eba5 050c 	sub.w	r5, r5, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1ec4:	f7fe f96c 	bl	1a0 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1ec8:	eba7 060b 	sub.w	r6, r7, fp
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1ecc:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1ed0:	f7ff ba74 	b.w	13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>
		} else if (conn->llcp_conn_param.ack !=
    1ed4:	f894 c171 	ldrb.w	ip, [r4, #369]	; 0x171
    1ed8:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    1edc:	4594      	cmp	ip, r2
    1ede:	f000 818f 	beq.w	2200 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe78>
	conn_upd = conn_upd_curr;
    1ee2:	f8df a138 	ldr.w	sl, [pc, #312]	; 201c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc94>
    1ee6:	f8da 2000 	ldr.w	r2, [sl]
	if (conn_upd && (conn_upd != conn)) {
    1eea:	2a00      	cmp	r2, #0
    1eec:	f000 84e7 	beq.w	28be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1536>
    1ef0:	4294      	cmp	r4, r2
    1ef2:	f47f a926 	bne.w	1142 <ull_conn_llcp+0x22>
	switch (conn->llcp_conn_param.state) {
    1ef6:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1efa:	f002 0207 	and.w	r2, r2, #7
    1efe:	2a05      	cmp	r2, #5
    1f00:	f200 86bd 	bhi.w	2c7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f6>
    1f04:	f20f 0c04 	addw	ip, pc, #4
    1f08:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    1f0c:	00002021 	.word	0x00002021
    1f10:	00001f75 	.word	0x00001f75
    1f14:	00001f25 	.word	0x00001f25
    1f18:	00001139 	.word	0x00001139
    1f1c:	00001139 	.word	0x00001139
    1f20:	00001139 	.word	0x00001139
	if (conn->llcp_enc.pause_tx) {
    1f24:	079b      	lsls	r3, r3, #30
    1f26:	f53f a90c 	bmi.w	1142 <ull_conn_llcp+0x22>
	rx = ll_pdu_rx_alloc();
    1f2a:	f015 f88d 	bl	17048 <ll_pdu_rx_alloc>
	if (!rx) {
    1f2e:	4601      	mov	r1, r0
    1f30:	2800      	cmp	r0, #0
    1f32:	f43f acef 	beq.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f36:	7f03      	ldrb	r3, [r0, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1f38:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1f3c:	2003      	movs	r0, #3
    1f3e:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f42:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1f44:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    1f48:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f4a:	770b      	strb	r3, [r1, #28]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f4c:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1f4e:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f50:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1f52:	774b      	strb	r3, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1f54:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1f58:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    1f5c:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1f5e:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1f62:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1f64:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1f68:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1f6a:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1f6c:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1f6e:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1f70:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
    1f72:	e4ca      	b.n	190a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x582>
	if (conn->llcp_conn_param.status) {
    1f74:	f894 7173 	ldrb.w	r7, [r4, #371]	; 0x173
    1f78:	2f00      	cmp	r7, #0
    1f7a:	f040 8535 	bne.w	29e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1660>
	if (!conn->lll.role) {
    1f7e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1f82:	2b00      	cmp	r3, #0
    1f84:	f2c0 8574 	blt.w	2a70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e8>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1f88:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    1f8c:	f894 017c 	ldrb.w	r0, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    1f90:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1f94:	2205      	movs	r2, #5
    1f96:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    1f9a:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1f9c:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    1fa0:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    1fa4:	2800      	cmp	r0, #0
    1fa6:	f000 8632 	beq.w	2c0e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1886>
				((conn->llcp_conn_param.interval_min /
    1faa:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1fae:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    1fb2:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    1fb4:	fb13 f300 	smulbb	r3, r3, r0
    1fb8:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1fba:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1fbe:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
    1fc2:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1fc6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1fca:	009b      	lsls	r3, r3, #2
    1fcc:	f020 0207 	bic.w	r2, r0, #7
    1fd0:	f043 0302 	orr.w	r3, r3, #2
    1fd4:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1fd6:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1fda:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1fde:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    1fe2:	3901      	subs	r1, #1
    1fe4:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1fe8:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1fec:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    1ff0:	f7ff b8a7 	b.w	1142 <ull_conn_llcp+0x22>
    1ff4:	f3af 8000 	nop.w
    1ff8:	1afd498d 	.word	0x1afd498d
    1ffc:	00000007 	.word	0x00000007
    2000:	200038c4 	.word	0x200038c4
    2004:	3b9aca00 	.word	0x3b9aca00
    2008:	0002ebd8 	.word	0x0002ebd8
    200c:	0002ecfc 	.word	0x0002ecfc
    2010:	0002e80c 	.word	0x0002e80c
    2014:	431bde83 	.word	0x431bde83
    2018:	d1b71759 	.word	0xd1b71759
    201c:	20003840 	.word	0x20003840
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2020:	48e0      	ldr	r0, [pc, #896]	; (23a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x101c>)
			event_counter = lll->event_counter +
    2022:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    2024:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2028:	f010 ff9a 	bl	12f60 <mem_acquire>
	if (!tx) {
    202c:	4601      	mov	r1, r0
    202e:	2800      	cmp	r0, #0
    2030:	f43f ac70 	beq.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    2034:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2038:	790a      	ldrb	r2, [r1, #4]
			event_counter = lll->event_counter +
    203a:	eb07 0308 	add.w	r3, r7, r8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    203e:	2704      	movs	r7, #4
    2040:	f367 0002 	bfi	r0, r7, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2044:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2048:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    204a:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    204e:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2050:	714f      	strb	r7, [r1, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2052:	f8b4 7174 	ldrh.w	r7, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2056:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    205a:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    205e:	810f      	strh	r7, [r1, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2060:	4433      	add	r3, r6
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2062:	f8b4 717a 	ldrh.w	r7, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2066:	8148      	strh	r0, [r1, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2068:	818a      	strh	r2, [r1, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    206a:	200f      	movs	r0, #15
	p->preferred_periodicity = 0U;
    206c:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    206e:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2072:	f04f 33ff 	mov.w	r3, #4294967295
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2076:	81cf      	strh	r7, [r1, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2078:	71c8      	strb	r0, [r1, #7]
	p->offset1 = sys_cpu_to_le16(0xffff);
    207a:	754b      	strb	r3, [r1, #21]
    207c:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    207e:	75cb      	strb	r3, [r1, #23]
    2080:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    2082:	764b      	strb	r3, [r1, #25]
    2084:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    2086:	76cb      	strb	r3, [r1, #27]
    2088:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    208a:	774b      	strb	r3, [r1, #29]
    208c:	778b      	strb	r3, [r1, #30]
	ctrl_tx_pause_enqueue(conn, tx, false);
    208e:	4620      	mov	r0, r4
	p->preferred_periodicity = 0U;
    2090:	740a      	strb	r2, [r1, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    2092:	74ca      	strb	r2, [r1, #19]
    2094:	750a      	strb	r2, [r1, #20]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2096:	f016 f819 	bl	180cc <ctrl_tx_pause_enqueue>
	conn->procedure_expire = conn->procedure_reload;
    209a:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    209e:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    20a2:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
	conn_upd_curr = conn;
    20a6:	f8ca 4000 	str.w	r4, [sl]
	conn->procedure_expire = conn->procedure_reload;
    20aa:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    20ae:	f7ff b843 	b.w	1138 <ull_conn_llcp+0x18>
		if ((conn->llcp_cu.interval != lll->interval) ||
    20b2:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    20b4:	4562      	cmp	r2, ip
    20b6:	f47f a921 	bne.w	12fc <ull_conn_llcp+0x1dc>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    20ba:	f240 42e2 	movw	r2, #1250	; 0x4e2
    20be:	f8b4 e10c 	ldrh.w	lr, [r4, #268]	; 0x10c
		    (conn->llcp_cu.latency != lll->latency) ||
    20c2:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    20c6:	fb02 fa03 	mul.w	sl, r2, r3
    20ca:	f242 7210 	movw	r2, #10000	; 0x2710
    20ce:	fb02 a20e 	mla	r2, r2, lr, sl
    20d2:	3a01      	subs	r2, #1
    20d4:	fbb2 f2fa 	udiv	r2, r2, sl
		    (conn->llcp_cu.latency != lll->latency) ||
    20d8:	b292      	uxth	r2, r2
    20da:	4291      	cmp	r1, r2
    20dc:	f47f a910 	bne.w	1300 <ull_conn_llcp+0x1e0>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    20e0:	2303      	movs	r3, #3
    20e2:	713b      	strb	r3, [r7, #4]
    20e4:	f7ff b917 	b.w	1316 <ull_conn_llcp+0x1f6>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    20e8:	2201      	movs	r2, #1
    20ea:	4610      	mov	r0, r2
    20ec:	2102      	movs	r1, #2
    20ee:	f010 ffdb 	bl	130a8 <mayfly_enable>
				return -ECANCELED;
    20f2:	f06f 0047 	mvn.w	r0, #71	; 0x47
    20f6:	f7ff b82b 	b.w	1150 <ull_conn_llcp+0x30>
    20fa:	f44f 79a4 	mov.w	r9, #328	; 0x148
    20fe:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    2102:	f7ff ba30 	b.w	1566 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1de>
		if (!conn->tx_ctrl) {
    2106:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    210a:	2b00      	cmp	r3, #0
    210c:	f47f ad05 	bne.w	1b1a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x792>
			tx->next = conn->tx_head;
    2110:	6028      	str	r0, [r5, #0]
				conn->tx_ctrl = tx;
    2112:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2116:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    211a:	2800      	cmp	r0, #0
    211c:	f47f a811 	bne.w	1142 <ull_conn_llcp+0x22>
    2120:	e498      	b.n	1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2122:	48a0      	ldr	r0, [pc, #640]	; (23a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x101c>)
    2124:	f010 ff1c 	bl	12f60 <mem_acquire>
	if (tx) {
    2128:	4680      	mov	r8, r0
    212a:	2800      	cmp	r0, #0
    212c:	f43f abf2 	beq.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
		conn->llcp_feature.ack--;
    2130:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features_conn = LL_FEAT;
    2134:	4a9c      	ldr	r2, [pc, #624]	; (23a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1020>)
    2136:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    213a:	3b01      	subs	r3, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    213c:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
    213e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    2142:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    2144:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2148:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    214a:	2a00      	cmp	r2, #0
    214c:	bfac      	ite	ge
    214e:	2208      	movge	r2, #8
    2150:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2152:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    2156:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2158:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    215a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    215c:	4639      	mov	r1, r7
    215e:	4410      	add	r0, r2
    2160:	f024 fc4a 	bl	269f8 <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
    2164:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    2168:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
    216c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    2170:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    2172:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
    2176:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
    217a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    217e:	2b00      	cmp	r3, #0
    2180:	f000 81b4 	beq.w	24ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1164>
	    !conn->llcp_enc.pause_tx &&
    2184:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2188:	0797      	lsls	r7, r2, #30
    218a:	f100 81af 	bmi.w	24ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1164>
	    !conn->llcp_phy.pause_tx &&
    218e:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2192:	07d0      	lsls	r0, r2, #31
    2194:	f100 81aa 	bmi.w	24ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1164>
		if (conn->tx_head == conn->tx_data) {
    2198:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    219c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    219e:	bf04      	itt	eq
    21a0:	681a      	ldreq	r2, [r3, #0]
    21a2:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    21a6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    21aa:	2a00      	cmp	r2, #0
    21ac:	f000 8409 	beq.w	29c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x163a>
	tx->next = conn->tx_ctrl_last->next;
    21b0:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    21b4:	681a      	ldr	r2, [r3, #0]
    21b6:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    21ba:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    21be:	f8d8 3000 	ldr.w	r3, [r8]
    21c2:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
	if (!tx->next) {
    21c6:	2b00      	cmp	r3, #0
    21c8:	f000 8394 	beq.w	28f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156c>
		conn->procedure_expire = conn->procedure_reload;
    21cc:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    21d0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    21d4:	f7ff bb9e 	b.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
		conn->tx_data_last = tx;
    21d8:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    21dc:	f7ff bb48 	b.w	1870 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e8>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    21e0:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    21e4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    21e8:	f3c5 0182 	ubfx	r1, r5, #2, #3
    21ec:	f361 0202 	bfi	r2, r1, #0, #3
    21f0:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    21f4:	464a      	mov	r2, r9
    21f6:	f015 ff01 	bl	17ffc <calc_eff_time>
    21fa:	4606      	mov	r6, r0
    21fc:	f7ff b9b9 	b.w	1572 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ea>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2200:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
    2204:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    2208:	428b      	cmp	r3, r1
    220a:	f000 8203 	beq.w	2614 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128c>
	switch (conn->llcp_length.state) {
    220e:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    2212:	f003 0207 	and.w	r2, r3, #7
    2216:	2a06      	cmp	r2, #6
    2218:	f200 8522 	bhi.w	2c60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18d8>
    221c:	f20f 0c04 	addw	ip, pc, #4
    2220:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    2224:	000022cb 	.word	0x000022cb
    2228:	00001139 	.word	0x00001139
    222c:	00001139 	.word	0x00001139
    2230:	00001139 	.word	0x00001139
    2234:	00002241 	.word	0x00002241
    2238:	00002241 	.word	0x00002241
    223c:	00001139 	.word	0x00001139
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    2240:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    2244:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2248:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    224c:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    2250:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    2254:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    2258:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    225c:	2a04      	cmp	r2, #4
    225e:	f000 83e8 	beq.w	2a32 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16aa>
			conn->llcp_length.state =
    2262:	2206      	movs	r2, #6
    2264:	f362 0302 	bfi	r3, r2, #0, #3
    2268:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    226c:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    2270:	2f00      	cmp	r7, #0
    2272:	f000 838f 	beq.w	2994 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x160c>
    2276:	6838      	ldr	r0, [r7, #0]
    2278:	2800      	cmp	r0, #0
    227a:	f000 838b 	beq.w	2994 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x160c>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    227e:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    2280:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    2282:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    2286:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    228a:	f043 0303 	orr.w	r3, r3, #3
    228e:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2290:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    2292:	2309      	movs	r3, #9
    2294:	777b      	strb	r3, [r7, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2296:	713a      	strb	r2, [r7, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2298:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    229c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    22a0:	847a      	strh	r2, [r7, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    22a2:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    22a4:	f8a7 c006 	strh.w	ip, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    22a8:	8439      	strh	r1, [r7, #32]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    22aa:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    22ac:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    22ae:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    22b2:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    22b6:	f014 fe99 	bl	16fec <ll_rx_put>
		ll_rx_sched();
    22ba:	f014 fea1 	bl	17000 <ll_rx_sched>
	break;
    22be:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    22c2:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    22c6:	f7fe bf37 	b.w	1138 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    22ca:	4836      	ldr	r0, [pc, #216]	; (23a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x101c>)
    22cc:	f010 fe48 	bl	12f60 <mem_acquire>
		if (!tx) {
    22d0:	4601      	mov	r1, r0
    22d2:	2800      	cmp	r0, #0
    22d4:	f43f ab1e 	beq.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    22d8:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    22dc:	f8b4 019e 	ldrh.w	r0, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    22e0:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    22e4:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    22e8:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    22ea:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    22ee:	f367 0202 	bfi	r2, r7, #0, #3
		pdu_ctrl_tx->len =
    22f2:	2709      	movs	r7, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    22f4:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22f8:	790a      	ldrb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    22fa:	714f      	strb	r7, [r1, #5]
	if (!conn->common.fex_valid ||
    22fc:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2300:	8188      	strh	r0, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2302:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2306:	2014      	movs	r0, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2308:	f04f 0c00 	mov.w	ip, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    230c:	710a      	strb	r2, [r1, #4]
	if (!conn->common.fex_valid ||
    230e:	07ff      	lsls	r7, r7, #31
	feature_coded_phy = (conn->llcp_feature.features_conn &
    2310:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2314:	71c8      	strb	r0, [r1, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2316:	f04f 001b 	mov.w	r0, #27
    231a:	f881 c009 	strb.w	ip, [r1, #9]
    231e:	7208      	strb	r0, [r1, #8]
	if (!conn->common.fex_valid ||
    2320:	f140 8398 	bpl.w	2a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16cc>
    2324:	0510      	lsls	r0, r2, #20
    2326:	f140 83ed 	bpl.w	2b04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x177c>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    232a:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    232e:	bf28      	it	cs
    2330:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    2334:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2338:	bf38      	it	cc
    233a:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    233e:	f44f 6229 	mov.w	r2, #2704	; 0xa90
	    conn->tx_head &&
    2342:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2346:	81cb      	strh	r3, [r1, #14]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    2348:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
    234c:	bf38      	it	cc
    234e:	f44f 72a4 	movcc.w	r2, #328	; 0x148
    2352:	814a      	strh	r2, [r1, #10]
	if (
    2354:	2800      	cmp	r0, #0
    2356:	f000 830a 	beq.w	296e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15e6>
	    !conn->llcp_enc.pause_tx &&
    235a:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    235e:	079b      	lsls	r3, r3, #30
    2360:	f100 8305 	bmi.w	296e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15e6>
	    !conn->llcp_phy.pause_tx &&
    2364:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    2368:	07df      	lsls	r7, r3, #31
    236a:	f100 8300 	bmi.w	296e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15e6>
		if (conn->tx_head == conn->tx_data) {
    236e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2372:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    2374:	bf04      	itt	eq
    2376:	6803      	ldreq	r3, [r0, #0]
    2378:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    237c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2380:	2b00      	cmp	r3, #0
    2382:	f000 845f 	beq.w	2c44 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18bc>
	tx->next = conn->tx_ctrl_last->next;
    2386:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    238a:	681a      	ldr	r2, [r3, #0]
    238c:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
    238e:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
    2390:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2394:	680b      	ldr	r3, [r1, #0]
    2396:	2b00      	cmp	r3, #0
    2398:	f47f af18 	bne.w	21cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe44>
		conn->tx_data_last = tx;
    239c:	f8c4 11c0 	str.w	r1, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    23a0:	e714      	b.n	21cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe44>
    23a2:	bf00      	nop
    23a4:	200038c4 	.word	0x200038c4
    23a8:	000149ff 	.word	0x000149ff
		LL_ASSERT(rx && rx->hdr.link);
    23ac:	4acc      	ldr	r2, [pc, #816]	; (26e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1358>)
    23ae:	49cd      	ldr	r1, [pc, #820]	; (26e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x135c>)
    23b0:	48cd      	ldr	r0, [pc, #820]	; (26e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1360>)
    23b2:	f640 6367 	movw	r3, #3687	; 0xe67
    23b6:	f022 f87d 	bl	244b4 <printk>
    23ba:	4040      	eors	r0, r0
    23bc:	f380 8811 	msr	BASEPRI, r0
    23c0:	f04f 0003 	mov.w	r0, #3
    23c4:	df02      	svc	2
    23c6:	6828      	ldr	r0, [r5, #0]
    23c8:	f894 b0ec 	ldrb.w	fp, [r4, #236]	; 0xec
    23cc:	f7ff b8f4 	b.w	15b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x230>
		LL_ASSERT(rx && rx->hdr.link);
    23d0:	4ac3      	ldr	r2, [pc, #780]	; (26e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1358>)
    23d2:	49c4      	ldr	r1, [pc, #784]	; (26e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x135c>)
    23d4:	48c4      	ldr	r0, [pc, #784]	; (26e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1360>)
    23d6:	f640 6393 	movw	r3, #3731	; 0xe93
    23da:	f022 f86b 	bl	244b4 <printk>
    23de:	4040      	eors	r0, r0
    23e0:	f380 8811 	msr	BASEPRI, r0
    23e4:	f04f 0003 	mov.w	r0, #3
    23e8:	df02      	svc	2
    23ea:	6828      	ldr	r0, [r5, #0]
    23ec:	f7ff b90c 	b.w	1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>
		if (!conn->tx_ctrl) {
    23f0:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    23f4:	2b00      	cmp	r3, #0
    23f6:	f47f acdd 	bne.w	1db4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa2c>
			tx->next = conn->tx_head;
    23fa:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    23fc:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2400:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2404:	e4de      	b.n	1dc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa3c>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    2406:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    240a:	463b      	mov	r3, r7
    240c:	462a      	mov	r2, r5
    240e:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    2412:	f204 105d 	addw	r0, r4, #349	; 0x15d
    2416:	f01c fc7f 	bl	1ed18 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    241a:	4639      	mov	r1, r7
    241c:	2210      	movs	r2, #16
    241e:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    2422:	f024 fabe 	bl	269a2 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2426:	2208      	movs	r2, #8
    2428:	f104 0198 	add.w	r1, r4, #152	; 0x98
    242c:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    2430:	f024 fab7 	bl	269a2 <memcpy>
		lll->ccm_rx.direction = 0;
    2434:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    2438:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    243c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    2440:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		lll->enc_rx = 1;
    2444:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    2448:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    244c:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    2450:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    2454:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    2458:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    245c:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2460:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2464:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    2468:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    246c:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2470:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    2474:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2478:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    247a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    247e:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2482:	4620      	mov	r0, r4
    2484:	f015 fff0 	bl	18468 <start_enc_rsp_send>
	    conn->tx_head &&
    2488:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    248c:	2b00      	cmp	r3, #0
    248e:	d041      	beq.n	2514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118c>
	    !conn->llcp_enc.pause_tx &&
    2490:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2494:	0792      	lsls	r2, r2, #30
    2496:	d43d      	bmi.n	2514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118c>
	    !conn->llcp_phy.pause_tx &&
    2498:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    249c:	07d7      	lsls	r7, r2, #31
    249e:	d439      	bmi.n	2514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118c>
		if (conn->tx_head == conn->tx_data) {
    24a0:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    24a4:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    24a6:	bf04      	itt	eq
    24a8:	681a      	ldreq	r2, [r3, #0]
    24aa:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    24ae:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    24b2:	2a00      	cmp	r2, #0
    24b4:	f000 8290 	beq.w	29d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1650>
	tx->next = conn->tx_ctrl_last->next;
    24b8:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    24bc:	681a      	ldr	r2, [r3, #0]
    24be:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    24c0:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    24c2:	6833      	ldr	r3, [r6, #0]
    24c4:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
}
    24c8:	f7ff bbc8 	b.w	1c5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d4>
    24cc:	f44f 73a4 	mov.w	r3, #328	; 0x148
    24d0:	4619      	mov	r1, r3
    24d2:	e452      	b.n	1d7a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9f2>
		if (!conn->tx_ctrl) {
    24d4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    24d8:	2a00      	cmp	r2, #0
    24da:	f47f a92e 	bne.w	173a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b2>
			tx->next = conn->tx_head;
    24de:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    24e0:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    24e4:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    24e8:	f7ff b92f 	b.w	174a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c2>
		if (!conn->tx_ctrl) {
    24ec:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    24f0:	2a00      	cmp	r2, #0
    24f2:	f47f ae5d 	bne.w	21b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe28>
			tx->next = conn->tx_head;
    24f6:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    24fa:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    24fe:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2502:	e660      	b.n	21c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe3e>
    2504:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    2508:	f003 0307 	and.w	r3, r3, #7
    250c:	f002 0207 	and.w	r2, r2, #7
    2510:	f7ff b864 	b.w	15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>
		if (!conn->tx_ctrl) {
    2514:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2518:	2a00      	cmp	r2, #0
    251a:	d1cd      	bne.n	24b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1130>
			tx->next = conn->tx_head;
    251c:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    251e:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2522:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2526:	f7ff bb99 	b.w	1c5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d4>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    252a:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    252e:	463b      	mov	r3, r7
    2530:	462a      	mov	r2, r5
    2532:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    2536:	f204 105d 	addw	r0, r4, #349	; 0x15d
    253a:	f01c fbed 	bl	1ed18 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    253e:	4639      	mov	r1, r7
    2540:	2210      	movs	r2, #16
    2542:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    2546:	f024 fa2c 	bl	269a2 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    254a:	2208      	movs	r2, #8
    254c:	f104 0198 	add.w	r1, r4, #152	; 0x98
    2550:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    2554:	f024 fa25 	bl	269a2 <memcpy>
			lll->ccm_rx.direction = 1U;
    2558:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    255c:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    2560:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2564:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    2568:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    256c:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    2570:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2574:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    2576:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    257a:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    257e:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2582:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    2586:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    258a:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    258e:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    2592:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    2596:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    259a:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    259e:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    25a2:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25a6:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    25a8:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    25aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25ae:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    25b2:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25b4:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    25b6:	71f1      	strb	r1, [r6, #7]
	if (
    25b8:	2b00      	cmp	r3, #0
    25ba:	f47f ab31 	bne.w	1c20 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x898>
		if (!conn->tx_ctrl) {
    25be:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    25c2:	2a00      	cmp	r2, #0
    25c4:	f47f ab42 	bne.w	1c4c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c4>
			tx->next = conn->tx_head;
    25c8:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    25ca:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    25ce:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    25d2:	f7ff bb42 	b.w	1c5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d2>
		LL_ASSERT(rx && rx->hdr.link);
    25d6:	4a42      	ldr	r2, [pc, #264]	; (26e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1358>)
    25d8:	4942      	ldr	r1, [pc, #264]	; (26e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x135c>)
    25da:	4843      	ldr	r0, [pc, #268]	; (26e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1360>)
    25dc:	f640 5337 	movw	r3, #3383	; 0xd37
    25e0:	f021 ff68 	bl	244b4 <printk>
    25e4:	4040      	eors	r0, r0
    25e6:	f380 8811 	msr	BASEPRI, r0
    25ea:	f04f 0003 	mov.w	r0, #3
    25ee:	df02      	svc	2
    25f0:	6838      	ldr	r0, [r7, #0]
    25f2:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    25f6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    25fa:	f7ff bb5d 	b.w	1cb8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x930>
			if (!conn->llcp_length.cache.tx_octets) {
    25fe:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2602:	2a00      	cmp	r2, #0
    2604:	f040 8179 	bne.w	28fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1572>
				conn->llcp_length.ack = conn->llcp_length.req;
    2608:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    260c:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2610:	f7ff bb49 	b.w	1ca6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x91e>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2614:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    2618:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    261c:	429a      	cmp	r2, r3
    261e:	f43e ad90 	beq.w	1142 <ull_conn_llcp+0x22>
	switch (conn->llcp_phy.state) {
    2622:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2626:	f002 0103 	and.w	r1, r2, #3
    262a:	2903      	cmp	r1, #3
    262c:	f000 8277 	beq.w	2b1e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1796>
    2630:	2900      	cmp	r1, #0
    2632:	f47e ad86 	bne.w	1142 <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2636:	482d      	ldr	r0, [pc, #180]	; (26ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1364>)
    2638:	f010 fc92 	bl	12f60 <mem_acquire>
		if (!tx) {
    263c:	4601      	mov	r1, r0
    263e:	2800      	cmp	r0, #0
    2640:	f43f a968 	beq.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2644:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2648:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
    264c:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2650:	2001      	movs	r0, #1
    2652:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2656:	f3c3 0082 	ubfx	r0, r3, #2, #3
    265a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    265e:	f3c3 1042 	ubfx	r0, r3, #5, #3
    2662:	f360 1206 	bfi	r2, r0, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2666:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    266a:	7908      	ldrb	r0, [r1, #4]
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    266c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2670:	f367 02c3 	bfi	r2, r7, #3, #1
    2674:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2678:	f3c3 0c82 	ubfx	ip, r3, #2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    267c:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2680:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
    2684:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2686:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2688:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    268a:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
    268c:	f881 c008 	strb.w	ip, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2690:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
    2692:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2694:	2200      	movs	r2, #0
    2696:	4620      	mov	r0, r4
    2698:	f015 fd18 	bl	180cc <ctrl_tx_pause_enqueue>
    269c:	e596      	b.n	21cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe44>
		conn->tx_data_last = tx;
    269e:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    26a2:	f7ff bade 	b.w	1c62 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8da>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    26a6:	4592      	cmp	sl, r2
    26a8:	f47e af98 	bne.w	15dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x254>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    26ac:	2303      	movs	r3, #3
    26ae:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    26b0:	4629      	mov	r1, r5
    26b2:	f014 fc9b 	bl	16fec <ll_rx_put>
				rx = conn->llcp_rx;
    26b6:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    26ba:	2d00      	cmp	r5, #0
    26bc:	f000 8271 	beq.w	2ba2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x181a>
    26c0:	6828      	ldr	r0, [r5, #0]
    26c2:	2800      	cmp	r0, #0
    26c4:	f000 826d 	beq.w	2ba2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x181a>
				conn->llcp_rx = rx->hdr.link->mem;
    26c8:	6843      	ldr	r3, [r0, #4]
    26ca:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    26ce:	2303      	movs	r3, #3
    26d0:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    26d2:	4629      	mov	r1, r5
    26d4:	f014 fc8a 	bl	16fec <ll_rx_put>
			ll_rx_sched();
    26d8:	f014 fc92 	bl	17000 <ll_rx_sched>
			return;
    26dc:	f7fe bd31 	b.w	1142 <ull_conn_llcp+0x22>
    26e0:	0002ebd8 	.word	0x0002ebd8
    26e4:	0002ecfc 	.word	0x0002ecfc
    26e8:	0002e80c 	.word	0x0002e80c
    26ec:	200038c4 	.word	0x200038c4
			conn->llcp.phy_upd_ind.instant = event_counter +
    26f0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26f2:	4433      	add	r3, r6
							 lll->latency +
    26f4:	3306      	adds	r3, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    26f6:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    26fa:	f014 fca5 	bl	17048 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    26fe:	f8d8 3000 	ldr.w	r3, [r8]
    2702:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2706:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2708:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    270c:	f014 fc9c 	bl	17048 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2710:	6803      	ldr	r3, [r0, #0]
    2712:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2716:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2718:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    271c:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    2720:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    2724:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2728:	095b      	lsrs	r3, r3, #5
    272a:	f7ff ba2a 	b.w	1b82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7fa>
		LL_ASSERT(0);
    272e:	f640 3356 	movw	r3, #2902	; 0xb56
		LL_ASSERT(0);
    2732:	4aca      	ldr	r2, [pc, #808]	; (2a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16d4>)
    2734:	49ca      	ldr	r1, [pc, #808]	; (2a60 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16d8>)
    2736:	48cb      	ldr	r0, [pc, #812]	; (2a64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16dc>)
    2738:	f021 febc 	bl	244b4 <printk>
    273c:	4040      	eors	r0, r0
    273e:	f380 8811 	msr	BASEPRI, r0
    2742:	f04f 0003 	mov.w	r0, #3
    2746:	df02      	svc	2
		break;
    2748:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    274c:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    2750:	f7fe bcf2 	b.w	1138 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2754:	48c4      	ldr	r0, [pc, #784]	; (2a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e0>)
    2756:	f010 fc03 	bl	12f60 <mem_acquire>
		if (tx) {
    275a:	2800      	cmp	r0, #0
    275c:	f43f a8da 	beq.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
			conn->llcp_version.ack--;
    2760:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
			conn->llcp_version.tx = 1U;
    2764:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
			conn->llcp_version.ack--;
    2768:	3a01      	subs	r2, #1
    276a:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    276e:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    2770:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    2774:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    2776:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    277a:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    277e:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    2780:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2784:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    2786:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    2788:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    278c:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    278e:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2790:	7242      	strb	r2, [r0, #9]
    2792:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    2794:	f04f 32ff 	mov.w	r2, #4294967295
			pdu->llctrl.opcode =
    2798:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    279a:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    279c:	72c2      	strb	r2, [r0, #11]
    279e:	7302      	strb	r2, [r0, #12]
	if (
    27a0:	2b00      	cmp	r3, #0
    27a2:	f000 80c3 	beq.w	292c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a4>
	    !conn->llcp_enc.pause_tx &&
    27a6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    27aa:	0797      	lsls	r7, r2, #30
    27ac:	f100 80be 	bmi.w	292c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a4>
	    !conn->llcp_phy.pause_tx &&
    27b0:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    27b4:	07d1      	lsls	r1, r2, #31
    27b6:	f100 80b9 	bmi.w	292c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15a4>
		if (conn->tx_head == conn->tx_data) {
    27ba:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    27be:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    27c0:	bf04      	itt	eq
    27c2:	681a      	ldreq	r2, [r3, #0]
    27c4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    27c8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    27cc:	2a00      	cmp	r2, #0
    27ce:	f000 8218 	beq.w	2c02 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x187a>
	tx->next = conn->tx_ctrl_last->next;
    27d2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    27d6:	681a      	ldr	r2, [r3, #0]
    27d8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    27da:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    27dc:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    27e0:	6803      	ldr	r3, [r0, #0]
    27e2:	2b00      	cmp	r3, #0
    27e4:	f47f acf2 	bne.w	21cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe44>
		conn->tx_data_last = tx;
    27e8:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
			conn->procedure_expire = conn->procedure_reload;
    27ec:	e4ee      	b.n	21cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe44>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    27ee:	4641      	mov	r1, r8
    27f0:	4620      	mov	r0, r4
    27f2:	f015 fe39 	bl	18468 <start_enc_rsp_send>
	    conn->tx_head &&
    27f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    27fa:	b383      	cbz	r3, 285e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14d6>
	    !conn->llcp_enc.pause_tx &&
    27fc:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2800:	0795      	lsls	r5, r2, #30
    2802:	d42c      	bmi.n	285e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14d6>
	    !conn->llcp_phy.pause_tx &&
    2804:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2808:	07d0      	lsls	r0, r2, #31
    280a:	d428      	bmi.n	285e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14d6>
		if (conn->tx_head == conn->tx_data) {
    280c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2810:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2812:	bf04      	itt	eq
    2814:	681a      	ldreq	r2, [r3, #0]
    2816:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    281a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    281e:	2a00      	cmp	r2, #0
    2820:	f000 8177 	beq.w	2b12 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178a>
	tx->next = conn->tx_ctrl_last->next;
    2824:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2828:	681a      	ldr	r2, [r3, #0]
    282a:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    282c:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    282e:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2832:	6833      	ldr	r3, [r6, #0]
    2834:	2b00      	cmp	r3, #0
    2836:	f000 808c 	beq.w	2952 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15ca>
		conn->llcp_enc.pause_rx = 0U;
    283a:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    283e:	f023 0303 	bic.w	r3, r3, #3
    2842:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    2846:	f7ff ba0c 	b.w	1c62 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8da>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    284a:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    284c:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    284e:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2850:	2702      	movs	r7, #2
    2852:	f7ff b9dc 	b.w	1c0e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x886>
		conn->tx_data_last = tx;
    2856:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    285a:	f7ff bab6 	b.w	1dca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa42>
		if (!conn->tx_ctrl) {
    285e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2862:	2a00      	cmp	r2, #0
    2864:	d1de      	bne.n	2824 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x149c>
			tx->next = conn->tx_head;
    2866:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2868:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    286c:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2870:	e7df      	b.n	2832 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14aa>
				(void)ll_pdu_rx_alloc();
    2872:	f014 fbe9 	bl	17048 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2876:	2313      	movs	r3, #19
				rx->hdr.handle = lll->handle;
    2878:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    287a:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    287e:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    2882:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    2886:	f8d8 0000 	ldr.w	r0, [r8]
				rx->hdr.handle = lll->handle;
    288a:	f8a8 2006 	strh.w	r2, [r8, #6]
				upd->tx = lll->phy_tx;
    288e:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2892:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    2896:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    289a:	f3c3 0302 	ubfx	r3, r3, #0, #3
    289e:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    28a2:	4641      	mov	r1, r8
    28a4:	f014 fba2 	bl	16fec <ll_rx_put>
				ll_rx_sched();
    28a8:	f014 fbaa 	bl	17000 <ll_rx_sched>
    28ac:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    28b0:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    28b4:	f3c3 0782 	ubfx	r7, r3, #2, #3
    28b8:	095b      	lsrs	r3, r3, #5
    28ba:	f7ff b962 	b.w	1b82 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7fa>
	switch (conn->llcp_conn_param.state) {
    28be:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    28c2:	f002 0207 	and.w	r2, r2, #7
    28c6:	2a05      	cmp	r2, #5
    28c8:	f200 81d9 	bhi.w	2c7e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18f6>
    28cc:	a001      	add	r0, pc, #4	; (adr r0, 28d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x154c>)
    28ce:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    28d2:	bf00      	nop
    28d4:	00002021 	.word	0x00002021
    28d8:	00001f75 	.word	0x00001f75
    28dc:	00001f25 	.word	0x00001f25
    28e0:	00001143 	.word	0x00001143
    28e4:	00001143 	.word	0x00001143
    28e8:	00001143 	.word	0x00001143
		conn->tx_data_last = tx;
    28ec:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    28f0:	f7fe bf2e 	b.w	1750 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c8>
    28f4:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    28f8:	e468      	b.n	21cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe44>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    28fa:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    28fe:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    2902:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    2906:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2908:	f363 0002 	bfi	r0, r3, #0, #3
    290c:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2910:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    2914:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2918:	f7ff b9c5 	b.w	1ca6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x91e>
			tx->next = conn->tx_head->next;
    291c:	681a      	ldr	r2, [r3, #0]
    291e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2920:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2922:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2924:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2928:	f7fe bf9f 	b.w	186a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4e2>
		if (!conn->tx_ctrl) {
    292c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2930:	2a00      	cmp	r2, #0
    2932:	f47f af4e 	bne.w	27d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x144a>
			tx->next = conn->tx_head;
    2936:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2938:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    293c:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2940:	e74e      	b.n	27e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1458>
			tx->next = conn->tx_head->next;
    2942:	681a      	ldr	r2, [r3, #0]
    2944:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2946:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2948:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    294a:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    294e:	f7ff b87e 	b.w	1a4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c6>
		conn->tx_data_last = tx;
    2952:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2956:	e770      	b.n	283a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14b2>
			tx->next = conn->tx_head->next;
    2958:	6803      	ldr	r3, [r0, #0]
    295a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
    295c:	6005      	str	r5, [r0, #0]
				conn->tx_ctrl = tx;
    295e:	6828      	ldr	r0, [r5, #0]
				conn->tx_ctrl_last = tx;
    2960:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
    2964:	2800      	cmp	r0, #0
    2966:	f47e abec 	bne.w	1142 <ull_conn_llcp+0x22>
    296a:	f7ff b873 	b.w	1a54 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6cc>
		if (!conn->tx_ctrl) {
    296e:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2972:	2b00      	cmp	r3, #0
    2974:	f47f ad07 	bne.w	2386 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xffe>
			tx->next = conn->tx_head;
    2978:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    297a:	e9c4 116c 	strd	r1, r1, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    297e:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
    2982:	e507      	b.n	2394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100c>
			tx->next = conn->tx_head->next;
    2984:	681a      	ldr	r2, [r3, #0]
    2986:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2988:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    298a:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    298c:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2990:	f7fe bedb 	b.w	174a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c2>
		LL_ASSERT(rx && rx->hdr.link);
    2994:	4a31      	ldr	r2, [pc, #196]	; (2a5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16d4>)
    2996:	4935      	ldr	r1, [pc, #212]	; (2a6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e4>)
    2998:	4832      	ldr	r0, [pc, #200]	; (2a64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16dc>)
    299a:	f640 5337 	movw	r3, #3383	; 0xd37
    299e:	f021 fd89 	bl	244b4 <printk>
    29a2:	4040      	eors	r0, r0
    29a4:	f380 8811 	msr	BASEPRI, r0
    29a8:	f04f 0003 	mov.w	r0, #3
    29ac:	df02      	svc	2
    29ae:	6838      	ldr	r0, [r7, #0]
    29b0:	e465      	b.n	227e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xef6>
			tx->next = conn->tx_head->next;
    29b2:	6813      	ldr	r3, [r2, #0]
    29b4:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    29b6:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    29b8:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    29ba:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    29be:	f7ff ba01 	b.w	1dc4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa3c>
			tx->next = conn->tx_head->next;
    29c2:	681a      	ldr	r2, [r3, #0]
    29c4:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    29c8:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    29cc:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    29d0:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    29d4:	f7ff bbf7 	b.w	21c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe3e>
			tx->next = conn->tx_head->next;
    29d8:	681a      	ldr	r2, [r3, #0]
    29da:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    29dc:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    29de:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    29e0:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    29e4:	f7ff b93a 	b.w	1c5c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    29e8:	481f      	ldr	r0, [pc, #124]	; (2a68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16e0>)
    29ea:	f010 fab9 	bl	12f60 <mem_acquire>
		if (!tx) {
    29ee:	4601      	mov	r1, r0
    29f0:	2800      	cmp	r0, #0
    29f2:	f43e af8f 	beq.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    29f6:	7903      	ldrb	r3, [r0, #4]
    29f8:	f043 0303 	orr.w	r3, r3, #3
    29fc:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    29fe:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2a00:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a02:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2a04:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2a06:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2a08:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    2a0a:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    2a0e:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2a10:	4620      	mov	r0, r4
    2a12:	2200      	movs	r2, #0
    2a14:	f015 fb5a 	bl	180cc <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2a18:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2a1c:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    2a20:	2300      	movs	r3, #0
    2a22:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2a26:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    2a2a:	f8ca 3000 	str.w	r3, [sl]
		return;
    2a2e:	f7fe bb83 	b.w	1138 <ull_conn_llcp+0x18>
			if (!conn->llcp_length.cache.tx_octets) {
    2a32:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2a36:	2a00      	cmp	r2, #0
    2a38:	f040 80c2 	bne.w	2bc0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1838>
				conn->llcp_length.ack = conn->llcp_length.req;
    2a3c:	f884 1199 	strb.w	r1, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2a40:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2a44:	e412      	b.n	226c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee4>
			tx->next = conn->tx_head->next;
    2a46:	681a      	ldr	r2, [r3, #0]
    2a48:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2a4a:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    2a4c:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2a50:	f7ff b903 	b.w	1c5a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8d2>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2a54:	f44f 73a4 	mov.w	r3, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
    2a58:	461a      	mov	r2, r3
    2a5a:	e472      	b.n	2342 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfba>
    2a5c:	0002ebd8 	.word	0x0002ebd8
    2a60:	0002e86c 	.word	0x0002e86c
    2a64:	0002e80c 	.word	0x0002e80c
    2a68:	200038c4 	.word	0x200038c4
    2a6c:	0002ecfc 	.word	0x0002ecfc
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2a70:	488c      	ldr	r0, [pc, #560]	; (2ca4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x191c>)
    2a72:	f010 fa75 	bl	12f60 <mem_acquire>
	if (!tx) {
    2a76:	4601      	mov	r1, r0
    2a78:	2800      	cmp	r0, #0
    2a7a:	f43e af4b 	beq.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a7e:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2a80:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2a82:	f043 0303 	orr.w	r3, r3, #3
    2a86:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2a88:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    2a8a:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    2a8e:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    2a92:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    2a96:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    2a98:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    2a9c:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2a9e:	2310      	movs	r3, #16
	rsp->latency =
    2aa0:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    2aa2:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2aa4:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    2aa6:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    2aaa:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    2aac:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2ab0:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2ab4:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    2ab8:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2abc:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    2ac0:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2ac4:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    2ac8:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2acc:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    2ad0:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    2ad4:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    2ad8:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    2adc:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    2ae0:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2ae4:	4620      	mov	r0, r4
    2ae6:	463a      	mov	r2, r7
    2ae8:	f015 faf0 	bl	180cc <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2aec:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
	conn_upd_curr = NULL;
    2af0:	f8ca 7000 	str.w	r7, [sl]
    2af4:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2af8:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2afc:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
}
    2b00:	f7fe bb1a 	b.w	1138 <ull_conn_llcp+0x18>
	    (!feature_coded_phy && !feature_phy_2m)) {
    2b04:	05d2      	lsls	r2, r2, #23
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    2b06:	f44f 73a4 	mov.w	r3, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
    2b0a:	f140 808d 	bpl.w	2c28 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18a0>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
    2b0e:	22a8      	movs	r2, #168	; 0xa8
    2b10:	e417      	b.n	2342 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfba>
			tx->next = conn->tx_head->next;
    2b12:	681a      	ldr	r2, [r3, #0]
    2b14:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2b16:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    2b18:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2b1c:	e689      	b.n	2832 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14aa>
		if (conn->llcp_phy.tx & BIT(1)) {
    2b1e:	0711      	lsls	r1, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    2b20:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    2b24:	f3c2 0382 	ubfx	r3, r2, #2, #3
    2b28:	d561      	bpl.n	2bee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1866>
			conn->llcp_phy.tx = BIT(1);
    2b2a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2b2e:	2202      	movs	r2, #2
    2b30:	f362 0384 	bfi	r3, r2, #2, #3
    2b34:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    2b38:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2b3c:	0658      	lsls	r0, r3, #25
    2b3e:	ea4f 1253 	mov.w	r2, r3, lsr #5
    2b42:	d54c      	bpl.n	2bde <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1856>
			conn->llcp_phy.rx = BIT(1);
    2b44:	2202      	movs	r2, #2
    2b46:	f362 1347 	bfi	r3, r2, #5, #3
    2b4a:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2b4e:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2b52:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2b56:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2b5a:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2b5e:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2b62:	f3c2 0182 	ubfx	r1, r2, #2, #3
    2b66:	f00c 0c07 	and.w	ip, ip, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    2b6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    2b6e:	458c      	cmp	ip, r1
    2b70:	bf08      	it	eq
    2b72:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b74:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    2b76:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b7a:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2b7e:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    2b82:	bf08      	it	eq
    2b84:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b86:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    2b8a:	1eb8      	subs	r0, r7, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b8c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    2b90:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    2b92:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    2b96:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    2b9a:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2b9e:	f7fe baf9 	b.w	1194 <ull_conn_llcp+0x74>
				LL_ASSERT(rx && rx->hdr.link);
    2ba2:	4a41      	ldr	r2, [pc, #260]	; (2ca8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1920>)
    2ba4:	4941      	ldr	r1, [pc, #260]	; (2cac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1924>)
    2ba6:	4842      	ldr	r0, [pc, #264]	; (2cb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1928>)
    2ba8:	f640 6376 	movw	r3, #3702	; 0xe76
    2bac:	f021 fc82 	bl	244b4 <printk>
    2bb0:	4040      	eors	r0, r0
    2bb2:	f380 8811 	msr	BASEPRI, r0
    2bb6:	f04f 0003 	mov.w	r0, #3
    2bba:	df02      	svc	2
    2bbc:	6828      	ldr	r0, [r5, #0]
    2bbe:	e583      	b.n	26c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1340>
				conn->llcp_length.cache.tx_octets = 0;
    2bc0:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2bc2:	f361 0302 	bfi	r3, r1, #0, #3
				conn->llcp_length.tx_octets =
    2bc6:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    2bca:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2bce:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2bd2:	f8a4 11a4 	strh.w	r1, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    2bd6:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2bda:	f7ff bb47 	b.w	226c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xee4>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    2bde:	07d1      	lsls	r1, r2, #31
    2be0:	d519      	bpl.n	2c16 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188e>
			conn->llcp_phy.rx = BIT(0);
    2be2:	2201      	movs	r2, #1
    2be4:	f362 1347 	bfi	r3, r2, #5, #3
    2be8:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2bec:	e7af      	b.n	2b4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17c6>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    2bee:	07da      	lsls	r2, r3, #31
    2bf0:	d51d      	bpl.n	2c2e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18a6>
			conn->llcp_phy.tx = BIT(0);
    2bf2:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2bf6:	2201      	movs	r2, #1
    2bf8:	f362 0384 	bfi	r3, r2, #2, #3
    2bfc:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2c00:	e79a      	b.n	2b38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17b0>
			tx->next = conn->tx_head->next;
    2c02:	681a      	ldr	r2, [r3, #0]
    2c04:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2c06:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2c08:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2c0c:	e5e8      	b.n	27e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1458>
				conn->llcp_conn_param.interval_max;
    2c0e:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    2c12:	f7ff b9d2 	b.w	1fba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc32>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    2c16:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    2c1a:	bf18      	it	ne
    2c1c:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    2c1e:	f362 1347 	bfi	r3, r2, #5, #3
    2c22:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2c26:	e792      	b.n	2b4e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17c6>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
    2c28:	461a      	mov	r2, r3
    2c2a:	f7ff bb8a 	b.w	2342 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfba>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    2c2e:	f013 0304 	ands.w	r3, r3, #4
    2c32:	d00e      	beq.n	2c52 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18ca>
			conn->llcp_phy.tx = BIT(2);
    2c34:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2c38:	2204      	movs	r2, #4
    2c3a:	f362 0384 	bfi	r3, r2, #2, #3
    2c3e:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2c42:	e779      	b.n	2b38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17b0>
			tx->next = conn->tx_head->next;
    2c44:	6803      	ldr	r3, [r0, #0]
    2c46:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
    2c48:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    2c4a:	e9c4 116d 	strd	r1, r1, [r4, #436]	; 0x1b4
    2c4e:	f7ff bba1 	b.w	2394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100c>
			conn->llcp_phy.tx = 0U;
    2c52:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2c56:	f363 0284 	bfi	r2, r3, #2, #3
    2c5a:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    2c5e:	e76b      	b.n	2b38 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17b0>
		LL_ASSERT(0);
    2c60:	4a11      	ldr	r2, [pc, #68]	; (2ca8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1920>)
    2c62:	4914      	ldr	r1, [pc, #80]	; (2cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x192c>)
    2c64:	4812      	ldr	r0, [pc, #72]	; (2cb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1928>)
    2c66:	f640 535f 	movw	r3, #3423	; 0xd5f
    2c6a:	f021 fc23 	bl	244b4 <printk>
    2c6e:	4040      	eors	r0, r0
    2c70:	f380 8811 	msr	BASEPRI, r0
    2c74:	f04f 0003 	mov.w	r0, #3
    2c78:	df02      	svc	2
		break;
    2c7a:	f7fe be4b 	b.w	1914 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58c>
		LL_ASSERT(0);
    2c7e:	f640 4363 	movw	r3, #3171	; 0xc63
    2c82:	e556      	b.n	2732 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13aa>
		LL_ASSERT(0);
    2c84:	4a08      	ldr	r2, [pc, #32]	; (2ca8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1920>)
    2c86:	490b      	ldr	r1, [pc, #44]	; (2cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x192c>)
    2c88:	4809      	ldr	r0, [pc, #36]	; (2cb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1928>)
    2c8a:	f640 535f 	movw	r3, #3423	; 0xd5f
    2c8e:	f021 fc11 	bl	244b4 <printk>
    2c92:	4040      	eors	r0, r0
    2c94:	f380 8811 	msr	BASEPRI, r0
    2c98:	f04f 0003 	mov.w	r0, #3
    2c9c:	df02      	svc	2
		break;
    2c9e:	f7fe ba79 	b.w	1194 <ull_conn_llcp+0x74>
    2ca2:	bf00      	nop
    2ca4:	200038c4 	.word	0x200038c4
    2ca8:	0002ebd8 	.word	0x0002ebd8
    2cac:	0002ecfc 	.word	0x0002ecfc
    2cb0:	0002e80c 	.word	0x0002e80c
    2cb4:	0002e86c 	.word	0x0002e86c

00002cb8 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    2cbc:	469c      	mov	ip, r3
{
    2cbe:	b093      	sub	sp, #76	; 0x4c
	conn = lll->hdr.parent;
    2cc0:	f85c 6b0c 	ldr.w	r6, [ip], #12
{
    2cc4:	461d      	mov	r5, r3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2cc6:	6813      	ldr	r3, [r2, #0]
{
    2cc8:	4686      	mov	lr, r0
    2cca:	460c      	mov	r4, r1

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2ccc:	4660      	mov	r0, ip
    2cce:	312e      	adds	r1, #46	; 0x2e
{
    2cd0:	4617      	mov	r7, r2
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2cd2:	f105 0a08 	add.w	sl, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2cd6:	2203      	movs	r2, #3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2cd8:	f8d3 9000 	ldr.w	r9, [r3]
{
    2cdc:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2ce0:	f105 081c 	add.w	r8, r5, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2ce4:	f023 fe5d 	bl	269a2 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2ce8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    2cec:	2204      	movs	r2, #4
    2cee:	4650      	mov	r0, sl
    2cf0:	f023 fe57 	bl	269a2 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2cf4:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    2cf8:	2205      	movs	r2, #5
    2cfa:	4640      	mov	r0, r8
    2cfc:	f023 fe51 	bl	269a2 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2d00:	4640      	mov	r0, r8
    2d02:	2105      	movs	r1, #5
    2d04:	f010 faf6 	bl	132f4 <util_ones_count_get>
    2d08:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    2d0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2d10:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    2d14:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2d16:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    2d1a:	d90a      	bls.n	2d32 <ull_slave_setup+0x7a>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2d1c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2d20:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2d24:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2d26:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2d2a:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2d2c:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2d30:	d902      	bls.n	2d38 <ull_slave_setup+0x80>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    2d32:	b013      	add	sp, #76	; 0x4c
    2d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    2d38:	683a      	ldr	r2, [r7, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2d3a:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	((struct lll_adv *)ftr->param)->conn = NULL;
    2d3e:	2000      	movs	r0, #0
    2d40:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2d42:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
	lll->interval = interval;
    2d46:	f8a5 8012 	strh.w	r8, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2d4a:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    2d4e:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2d52:	095b      	lsrs	r3, r3, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2d54:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2d58:	f363 0184 	bfi	r1, r3, #2, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2d5c:	82aa      	strh	r2, [r5, #20]
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2d5e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2d60:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2d64:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		(((lll_clock_ppm_local_get() +
    2d68:	f01a f9a4 	bl	1d0b4 <lll_clock_ppm_local_get>
    2d6c:	4603      	mov	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    2d6e:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
		(((lll_clock_ppm_local_get() +
    2d72:	930b      	str	r3, [sp, #44]	; 0x2c
		   lll_clock_ppm_get(conn->slave.sca)) *
    2d74:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2d78:	f01a f99e 	bl	1d0b8 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2d7e:	f8df c338 	ldr.w	ip, [pc, #824]	; 30b8 <ull_slave_setup+0x400>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2d82:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2d86:	8aaa      	ldrh	r2, [r5, #20]
	conn_interval_us = interval * 1250U;
    2d88:	f240 4be2 	movw	fp, #1250	; 0x4e2
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2d8c:	fa1f f888 	uxth.w	r8, r8
	conn_interval_us = interval * 1250U;
    2d90:	fb0b f808 	mul.w	r8, fp, r8
		(((lll_clock_ppm_local_get() +
    2d94:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    2d96:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2d9a:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2d9e:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2da2:	fbac c000 	umull	ip, r0, ip, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2da6:	ea4f 0c58 	mov.w	ip, r8, lsr #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2daa:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2dac:	fb0b f101 	mul.w	r1, fp, r1
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2db0:	f1ac 0c96 	sub.w	ip, ip, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    2db4:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2db6:	f8c5 c02c 	str.w	ip, [r5, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2dba:	63e9      	str	r1, [r5, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2dbc:	8f21      	ldrh	r1, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2dbe:	4bb4      	ldr	r3, [pc, #720]	; (3090 <ull_slave_setup+0x3d8>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2dc0:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2dc4:	f242 7c10 	movw	ip, #10000	; 0x2710
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2dc8:	b289      	uxth	r1, r1
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2dca:	fb0c 8101 	mla	r1, ip, r1, r8
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2dce:	48b1      	ldr	r0, [pc, #708]	; (3094 <ull_slave_setup+0x3dc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2dd0:	4443      	add	r3, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2dd2:	f102 0c06 	add.w	ip, r2, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2dd6:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2dd8:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2ddc:	fbb1 f1f8 	udiv	r1, r1, r8
    2de0:	f8a6 10c6 	strh.w	r1, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2de4:	b299      	uxth	r1, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2de6:	4561      	cmp	r1, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2de8:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2dea:	f8a6 10d2 	strh.w	r1, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2dee:	fbb0 f0f8 	udiv	r0, r0, r8
    2df2:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2df6:	dd02      	ble.n	2dfe <ull_slave_setup+0x146>
			     (conn->apto_reload - (lll->latency + 6)) :
    2df8:	1a89      	subs	r1, r1, r2
    2dfa:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2dfc:	b289      	uxth	r1, r1
    2dfe:	f8a6 10ce 	strh.w	r1, [r6, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    2e02:	2204      	movs	r2, #4
    2e04:	4651      	mov	r1, sl
    2e06:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    2e0a:	f023 fdca 	bl	269a2 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    2e0e:	7f23      	ldrb	r3, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2e10:	f104 0b1e 	add.w	fp, r4, #30
    2e14:	4659      	mov	r1, fp
	peer_addr_type = pdu_adv->tx_addr;
    2e16:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2e1a:	2206      	movs	r2, #6
    2e1c:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    2e1e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2e22:	f023 fdbe 	bl	269a2 <memcpy>
	chan_sel = pdu_adv->chan_sel;
    2e26:	7f23      	ldrb	r3, [r4, #28]
	cc->status = 0U;
    2e28:	f44f 7280 	mov.w	r2, #256	; 0x100
    2e2c:	83a2      	strh	r2, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2e2e:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    2e32:	f897 a012 	ldrb.w	sl, [r7, #18]
	chan_sel = pdu_adv->chan_sel;
    2e36:	f3c3 1240 	ubfx	r2, r3, #5, #1
    2e3a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    2e3e:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2e40:	f019 fb1a 	bl	1c478 <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2e44:	2206      	movs	r2, #6
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2e46:	4601      	mov	r1, r0
    2e48:	2800      	cmp	r0, #0
    2e4a:	f040 80ed 	bne.w	3028 <ull_slave_setup+0x370>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    2e4e:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    2e52:	f023 fdd1 	bl	269f8 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    2e56:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    2e5a:	f000 80ef 	beq.w	303c <ull_slave_setup+0x384>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2e5e:	4659      	mov	r1, fp
    2e60:	4650      	mov	r0, sl
    2e62:	f104 021f 	add.w	r2, r4, #31
    2e66:	f018 fd35 	bl	1b8d4 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    2e6a:	7fa3      	ldrb	r3, [r4, #30]
    2e6c:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2e6e:	a910      	add	r1, sp, #64	; 0x40
		cc->peer_addr_type += 2;
    2e70:	77a3      	strb	r3, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2e72:	2206      	movs	r2, #6
    2e74:	f104 0025 	add.w	r0, r4, #37	; 0x25
    2e78:	f023 fd93 	bl	269a2 <memcpy>
	cc->sca = conn->slave.sca;
    2e7c:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    2e80:	8a69      	ldrh	r1, [r5, #18]
	cc->latency = lll->latency;
    2e82:	8aaa      	ldrh	r2, [r5, #20]
    2e84:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->slave.sca;
    2e86:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2e8a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
    2e8e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    2e92:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->interval = lll->interval;
    2e94:	8661      	strh	r1, [r4, #50]	; 0x32
	lll->handle = ll_conn_handle_get(conn);
    2e96:	4630      	mov	r0, r6
    2e98:	f015 fc36 	bl	18708 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    2e9c:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    2e9e:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    2ea0:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    2ea2:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    2ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ea6:	f014 f8a1 	bl	16fec <ll_rx_put>
		rx->handle = lll->handle;
    2eaa:	8a2b      	ldrh	r3, [r5, #16]
    2eac:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2eae:	2312      	movs	r3, #18
    2eb0:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    2eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    2eb4:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    2eb6:	2b00      	cmp	r3, #0
    2eb8:	f000 80d0 	beq.w	305c <ull_slave_setup+0x3a4>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    2ebc:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    2ec0:	7a2b      	ldrb	r3, [r5, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    2ec2:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    2ec6:	7aa9      	ldrb	r1, [r5, #10]
			lll->data_chan_sel = 1;
    2ec8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    2ecc:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    2ed0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    2ed4:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    2ed6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    2eda:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    2edc:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    2ede:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    2ee2:	7721      	strb	r1, [r4, #28]
	ll_rx_put(link, rx);
    2ee4:	4621      	mov	r1, r4
    2ee6:	f014 f881 	bl	16fec <ll_rx_put>
	ll_rx_sched();
    2eea:	f014 f889 	bl	17000 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2eee:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    2ef2:	2101      	movs	r1, #1
    2ef4:	f000 0007 	and.w	r0, r0, #7
    2ef8:	f019 fffc 	bl	1cef4 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2efc:	4a66      	ldr	r2, [pc, #408]	; (3098 <ull_slave_setup+0x3e0>)
	conn->evt.ticks_active_to_start = 0U;
    2efe:	f04f 0a00 	mov.w	sl, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2f02:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    2f04:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2f06:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2f0a:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    2f0e:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    2f10:	e9c6 aa01 	strd	sl, sl, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2f14:	a35c      	add	r3, pc, #368	; (adr r3, 3088 <ull_slave_setup+0x3d0>)
    2f16:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f1a:	f7fd f941 	bl	1a0 <__aeabi_uldivmod>
    2f1e:	68fa      	ldr	r2, [r7, #12]
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    2f20:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2f24:	6aab      	ldr	r3, [r5, #40]	; 0x28
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    2f26:	f240 41e2 	movw	r1, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2f2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    2f32:	fb01 1404 	mla	r4, r1, r4, r1
	conn->evt.ticks_slot =
    2f36:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2f38:	2102      	movs	r1, #2
	conn_offset_us -= EVENT_JITTER_US;
    2f3a:	4414      	add	r4, r2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2f3c:	2001      	movs	r0, #1
    2f3e:	4652      	mov	r2, sl
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2f40:	eba8 0803 	sub.w	r8, r8, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2f44:	f010 f8b0 	bl	130a8 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2f48:	4648      	mov	r0, r9
    2f4a:	f014 fdb3 	bl	17ab4 <ull_adv_handle_get>
    2f4e:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2f50:	4b52      	ldr	r3, [pc, #328]	; (309c <ull_slave_setup+0x3e4>)
    2f52:	f8cd 9000 	str.w	r9, [sp]
    2f56:	b2d2      	uxtb	r2, r2
    2f58:	4650      	mov	r0, sl
    2f5a:	2101      	movs	r1, #1
    2f5c:	f011 fbb8 	bl	146d0 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2f60:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    2f62:	eba4 040b 	sub.w	r4, r4, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2f66:	f000 8085 	beq.w	3074 <ull_slave_setup+0x3bc>
	if (adv->lll.is_hdcd) {
    2f6a:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    2f6e:	07db      	lsls	r3, r3, #31
    2f70:	d478      	bmi.n	3064 <ull_slave_setup+0x3ac>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2f72:	4630      	mov	r0, r6
    2f74:	f015 fbc8 	bl	18708 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2f78:	f8df b11c 	ldr.w	fp, [pc, #284]	; 3098 <ull_slave_setup+0x3e0>
    2f7c:	fba8 890b 	umull	r8, r9, r8, fp
    2f80:	a341      	add	r3, pc, #260	; (adr r3, 3088 <ull_slave_setup+0x3d0>)
    2f82:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2f86:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2f88:	4649      	mov	r1, r9
    2f8a:	4640      	mov	r0, r8
    2f8c:	f7fd f908 	bl	1a0 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f90:	4a43      	ldr	r2, [pc, #268]	; (30a0 <ull_slave_setup+0x3e8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2f92:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2f94:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    2f98:	fbaa 2302 	umull	r2, r3, sl, r2
    2f9c:	2107      	movs	r1, #7
    2f9e:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2fa2:	f240 1145 	movw	r1, #325	; 0x145
    2fa6:	68bf      	ldr	r7, [r7, #8]
    2fa8:	9108      	str	r1, [sp, #32]
    2faa:	493e      	ldr	r1, [pc, #248]	; (30a4 <ull_slave_setup+0x3ec>)
    2fac:	9107      	str	r1, [sp, #28]
    2fae:	493e      	ldr	r1, [pc, #248]	; (30a8 <ull_slave_setup+0x3f0>)
    2fb0:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2fb2:	ebb8 0002 	subs.w	r0, r8, r2
    2fb6:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2fba:	68f3      	ldr	r3, [r6, #12]
    2fbc:	9304      	str	r3, [sp, #16]
    2fbe:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2fc4:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2fc6:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2fc8:	f7fd f8ea 	bl	1a0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2fcc:	a32e      	add	r3, pc, #184	; (adr r3, 3088 <ull_slave_setup+0x3d0>)
    2fce:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2fd2:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2fd4:	fba4 010b 	umull	r0, r1, r4, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2fd8:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2fdc:	f7fd f8e0 	bl	1a0 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2fe0:	3505      	adds	r5, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2fe2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2fe6:	b2ed      	uxtb	r5, r5
    2fe8:	3f31      	subs	r7, #49	; 0x31
    2fea:	463b      	mov	r3, r7
    2fec:	9000      	str	r0, [sp, #0]
    2fee:	462a      	mov	r2, r5
    2ff0:	4630      	mov	r0, r6
    2ff2:	2101      	movs	r1, #1
    2ff4:	f011 fb00 	bl	145f8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2ff8:	f030 0302 	bics.w	r3, r0, #2
    2ffc:	d00c      	beq.n	3018 <ull_slave_setup+0x360>
    2ffe:	4a2b      	ldr	r2, [pc, #172]	; (30ac <ull_slave_setup+0x3f4>)
    3000:	492b      	ldr	r1, [pc, #172]	; (30b0 <ull_slave_setup+0x3f8>)
    3002:	482c      	ldr	r0, [pc, #176]	; (30b4 <ull_slave_setup+0x3fc>)
    3004:	f44f 73a3 	mov.w	r3, #326	; 0x146
    3008:	f021 fa54 	bl	244b4 <printk>
    300c:	4040      	eors	r0, r0
    300e:	f380 8811 	msr	BASEPRI, r0
    3012:	f04f 0003 	mov.w	r0, #3
    3016:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3018:	2201      	movs	r2, #1
    301a:	4610      	mov	r0, r2
    301c:	2102      	movs	r1, #2
    301e:	f010 f843 	bl	130a8 <mayfly_enable>
}
    3022:	b013      	add	sp, #76	; 0x4c
    3024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    3028:	f104 0124 	add.w	r1, r4, #36	; 0x24
    302c:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    3030:	f023 fcb7 	bl	269a2 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    3034:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3038:	f47f af11 	bne.w	2e5e <ull_slave_setup+0x1a6>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    303c:	2206      	movs	r2, #6
    303e:	2100      	movs	r1, #0
    3040:	f104 0025 	add.w	r0, r4, #37	; 0x25
    3044:	f023 fcd8 	bl	269f8 <memset>
		cc->peer_addr_type = peer_addr_type;
    3048:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    304c:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    304e:	a910      	add	r1, sp, #64	; 0x40
    3050:	2206      	movs	r2, #6
    3052:	f104 001f 	add.w	r0, r4, #31
    3056:	f023 fca4 	bl	269a2 <memcpy>
    305a:	e70f      	b.n	2e7c <ull_slave_setup+0x1c4>
			cs->csa = 0x00;
    305c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    3060:	7723      	strb	r3, [r4, #28]
    3062:	e73f      	b.n	2ee4 <ull_slave_setup+0x22c>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3064:	2300      	movs	r3, #0
    3066:	2201      	movs	r2, #1
    3068:	9300      	str	r3, [sp, #0]
    306a:	4618      	mov	r0, r3
    306c:	4611      	mov	r1, r2
    306e:	f011 fb2f 	bl	146d0 <ticker_stop>
    3072:	e77e      	b.n	2f72 <ull_slave_setup+0x2ba>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    3074:	f014 f89c 	bl	171b0 <ull_disable_mark_get>
    3078:	4581      	cmp	r9, r0
    307a:	f43f af76 	beq.w	2f6a <ull_slave_setup+0x2b2>
    307e:	f018 f94b 	bl	1b318 <ticker_op_stop_adv_cb.part.0>
    3082:	e772      	b.n	2f6a <ull_slave_setup+0x2b2>
    3084:	f3af 8000 	nop.w
    3088:	1afd498d 	.word	0x1afd498d
    308c:	00000007 	.word	0x00000007
    3090:	01c9c37f 	.word	0x01c9c37f
    3094:	026259ff 	.word	0x026259ff
    3098:	3b9aca00 	.word	0x3b9aca00
    309c:	0001b345 	.word	0x0001b345
    30a0:	1afd498d 	.word	0x1afd498d
    30a4:	0001b2e9 	.word	0x0001b2e9
    30a8:	0001b361 	.word	0x0001b361
    30ac:	0002edcc 	.word	0x0002edcc
    30b0:	0002ed10 	.word	0x0002ed10
    30b4:	0002e80c 	.word	0x0002e80c
    30b8:	431bde83 	.word	0x431bde83
    30bc:	00000000 	.word	0x00000000

000030c0 <fxos8700_attr_set>:
static int fxos8700_attr_set(const struct device *dev,
			     enum sensor_channel chan,
			     enum sensor_attribute attr,
			     const struct sensor_value *val)
{
	if (chan != SENSOR_CHAN_ALL) {
    30c0:	2938      	cmp	r1, #56	; 0x38
{
    30c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (chan != SENSOR_CHAN_ALL) {
    30c4:	d133      	bne.n	312e <fxos8700_attr_set+0x6e>
		return -ENOTSUP;
	}

	if (attr == SENSOR_ATTR_SAMPLING_FREQUENCY) {
    30c6:	b92a      	cbnz	r2, 30d4 <fxos8700_attr_set+0x14>
		return fxos8700_set_odr(dev, val);
    30c8:	4619      	mov	r1, r3
	} else {
		return -ENOTSUP;
	}

	return 0;
}
    30ca:	b003      	add	sp, #12
    30cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return fxos8700_set_odr(dev, val);
    30d0:	f01d bb8c 	b.w	207ec <fxos8700_set_odr>
	} else if (attr == SENSOR_ATTR_SLOPE_TH) {
    30d4:	2a03      	cmp	r2, #3
    30d6:	d12a      	bne.n	312e <fxos8700_attr_set+0x6e>
	const struct fxos8700_config *config = dev->config;
    30d8:	6847      	ldr	r7, [r0, #4]
	struct fxos8700_data *data = dev->data;
    30da:	68c6      	ldr	r6, [r0, #12]
	uint64_t micro_ms2 = abs(val->val1 * 1000000LL + val->val2);
    30dc:	491a      	ldr	r1, [pc, #104]	; (3148 <fxos8700_attr_set+0x88>)
    30de:	e9d3 0200 	ldrd	r0, r2, [r3]
    30e2:	17d3      	asrs	r3, r2, #31
    30e4:	4614      	mov	r4, r2
    30e6:	461d      	mov	r5, r3
    30e8:	fbc1 4500 	smlal	r4, r5, r1, r0
    30ec:	2c00      	cmp	r4, #0
    30ee:	f175 0100 	sbcs.w	r1, r5, #0
    30f2:	da05      	bge.n	3100 <fxos8700_attr_set+0x40>
    30f4:	4915      	ldr	r1, [pc, #84]	; (314c <fxos8700_attr_set+0x8c>)
    30f6:	fb80 0101 	smull	r0, r1, r0, r1
    30fa:	1a84      	subs	r4, r0, r2
    30fc:	eb61 0503 	sbc.w	r5, r1, r3
	uint64_t ths = micro_ms2 / FXOS8700_FF_MT_THS_SCALE;
    3100:	4a13      	ldr	r2, [pc, #76]	; (3150 <fxos8700_attr_set+0x90>)
    3102:	2300      	movs	r3, #0
    3104:	4620      	mov	r0, r4
    3106:	4629      	mov	r1, r5
    3108:	f7fd f84a 	bl	1a0 <__aeabi_uldivmod>
	if (ths > FXOS8700_FF_MT_THS_MASK) {
    310c:	a30c      	add	r3, pc, #48	; (adr r3, 3140 <fxos8700_attr_set+0x80>)
    310e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3112:	42ab      	cmp	r3, r5
    3114:	bf08      	it	eq
    3116:	42a2      	cmpeq	r2, r4
    3118:	d30c      	bcc.n	3134 <fxos8700_attr_set+0x74>
	return i2c_reg_update_byte(data->i2c, config->i2c_address,
    311a:	b2c0      	uxtb	r0, r0
    311c:	7ab9      	ldrb	r1, [r7, #10]
    311e:	9000      	str	r0, [sp, #0]
    3120:	6830      	ldr	r0, [r6, #0]
    3122:	237f      	movs	r3, #127	; 0x7f
    3124:	2217      	movs	r2, #23
    3126:	f029 fa81 	bl	2c62c <i2c_reg_update_byte>
}
    312a:	b003      	add	sp, #12
    312c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    312e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3132:	e7fa      	b.n	312a <fxos8700_attr_set+0x6a>
		return -EINVAL;
    3134:	f06f 0015 	mvn.w	r0, #21
    3138:	e7f7      	b.n	312a <fxos8700_attr_set+0x6a>
    313a:	bf00      	nop
    313c:	f3af 8000 	nop.w
    3140:	04b6acff 	.word	0x04b6acff
    3144:	00000000 	.word	0x00000000
    3148:	000f4240 	.word	0x000f4240
    314c:	fff0bdc0 	.word	0xfff0bdc0
    3150:	00096d5a 	.word	0x00096d5a
    3154:	00000000 	.word	0x00000000

00003158 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    3158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    315c:	b08f      	sub	sp, #60	; 0x3c
	uint8_t instance_index;
	uint8_t ticker_id;
	int result;
	uint32_t err;

	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    315e:	f10d 0137 	add.w	r1, sp, #55	; 0x37
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    3162:	4f35      	ldr	r7, [pc, #212]	; (3238 <nrf_flash_sync_exe+0xe0>)
{
    3164:	900b      	str	r0, [sp, #44]	; 0x2c
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    3166:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    316a:	f013 ffb5 	bl	170d8 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    316e:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
			   HAL_TICKER_US_TO_TICKS(
    3172:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 324c <nrf_flash_sync_exe+0xf4>
	err = ticker_start(instance_index,
    3176:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    317a:	930a      	str	r3, [sp, #40]	; 0x28
    317c:	f011 faee 	bl	1475c <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    3180:	683c      	ldr	r4, [r7, #0]
    3182:	fba4 4509 	umull	r4, r5, r4, r9
    3186:	a32a      	add	r3, pc, #168	; (adr r3, 3230 <nrf_flash_sync_exe+0xd8>)
    3188:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    318c:	4680      	mov	r8, r0
			   HAL_TICKER_US_TO_TICKS(
    318e:	4629      	mov	r1, r5
    3190:	4620      	mov	r0, r4
    3192:	f7fd f805 	bl	1a0 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    3196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3198:	9306      	str	r3, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(
    319a:	4683      	mov	fp, r0
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    319c:	6878      	ldr	r0, [r7, #4]
	err = ticker_start(instance_index,
    319e:	4b27      	ldr	r3, [pc, #156]	; (323c <nrf_flash_sync_exe+0xe4>)
    31a0:	9305      	str	r3, [sp, #20]
    31a2:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    31a4:	a322      	add	r3, pc, #136	; (adr r3, 3230 <nrf_flash_sync_exe+0xd8>)
    31a6:	e9d3 2300 	ldrd	r2, r3, [r3]
    31aa:	fba0 0109 	umull	r0, r1, r0, r9
	err = ticker_start(instance_index,
    31ae:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    31b2:	f7fc fff5 	bl	1a0 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    31b6:	4b22      	ldr	r3, [pc, #136]	; (3240 <nrf_flash_sync_exe+0xe8>)
    31b8:	f02b 497f 	bic.w	r9, fp, #4278190080	; 0xff000000
    31bc:	fba9 bc03 	umull	fp, ip, r9, r3
	err = ticker_start(instance_index,
    31c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    31c4:	2307      	movs	r3, #7
    31c6:	fb03 cc09 	mla	ip, r3, r9, ip
	err = ticker_start(instance_index,
    31ca:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    31ce:	ebb4 000b 	subs.w	r0, r4, fp
    31d2:	eb65 010c 	sbc.w	r1, r5, ip
    31d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    31da:	2300      	movs	r3, #0
    31dc:	f7fc ffe0 	bl	1a0 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    31e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    31e2:	9600      	str	r6, [sp, #0]
    31e4:	e9cd 9001 	strd	r9, r0, [sp, #4]
    31e8:	4643      	mov	r3, r8
    31ea:	2103      	movs	r1, #3
    31ec:	4650      	mov	r0, sl
    31ee:	f011 fa03 	bl	145f8 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    31f2:	f030 0402 	bics.w	r4, r0, #2
    31f6:	d115      	bne.n	3224 <nrf_flash_sync_exe+0xcc>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    31f8:	4a12      	ldr	r2, [pc, #72]	; (3244 <nrf_flash_sync_exe+0xec>)
    31fa:	4813      	ldr	r0, [pc, #76]	; (3248 <nrf_flash_sync_exe+0xf0>)
    31fc:	2300      	movs	r3, #0
    31fe:	f020 fc7f 	bl	23b00 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    3202:	b168      	cbz	r0, 3220 <nrf_flash_sync_exe+0xc8>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    3204:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    3208:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    320c:	9400      	str	r4, [sp, #0]
    320e:	4623      	mov	r3, r4
    3210:	2103      	movs	r1, #3
    3212:	f011 fa5d 	bl	146d0 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    3216:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    321a:	b00f      	add	sp, #60	; 0x3c
    321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    3220:	68f8      	ldr	r0, [r7, #12]
    3222:	e7fa      	b.n	321a <nrf_flash_sync_exe+0xc2>
		result = -ECANCELED;
    3224:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    3228:	e7f7      	b.n	321a <nrf_flash_sync_exe+0xc2>
    322a:	bf00      	nop
    322c:	f3af 8000 	nop.w
    3230:	1afd498d 	.word	0x1afd498d
    3234:	00000007 	.word	0x00000007
    3238:	20003f94 	.word	0x20003f94
    323c:	00021595 	.word	0x00021595
    3240:	1afd498d 	.word	0x1afd498d
    3244:	000b7b44 	.word	0x000b7b44
    3248:	20003fa4 	.word	0x20003fa4
    324c:	3b9aca00 	.word	0x3b9aca00

00003250 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    3250:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    3252:	4d0f      	ldr	r5, [pc, #60]	; (3290 <nrf_flash_sync_check_time_limit+0x40>)
{
    3254:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    3256:	f011 fa81 	bl	1475c <ticker_ticks_now_get>
    325a:	68a9      	ldr	r1, [r5, #8]
    325c:	f011 fa80 	bl	14760 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    3260:	490c      	ldr	r1, [pc, #48]	; (3294 <nrf_flash_sync_check_time_limit+0x44>)
	if (ticks_diff + ticks_diff/iteration >
    3262:	fbb0 f4f4 	udiv	r4, r0, r4
    3266:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    3268:	6868      	ldr	r0, [r5, #4]
    326a:	a307      	add	r3, pc, #28	; (adr r3, 3288 <nrf_flash_sync_check_time_limit+0x38>)
    326c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3270:	fba0 0101 	umull	r0, r1, r0, r1
    3274:	f7fc ff94 	bl	1a0 <__aeabi_uldivmod>
    3278:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    327c:	4284      	cmp	r4, r0
    327e:	bf94      	ite	ls
    3280:	2000      	movls	r0, #0
    3282:	2001      	movhi	r0, #1
    3284:	bd38      	pop	{r3, r4, r5, pc}
    3286:	bf00      	nop
    3288:	1afd498d 	.word	0x1afd498d
    328c:	00000007 	.word	0x00000007
    3290:	20003f94 	.word	0x20003f94
    3294:	3b9aca00 	.word	0x3b9aca00

00003298 <unprovisioned_beacon>:

//call back function for Provisioner after detecting the beacon node and reads its UUID
static void unprovisioned_beacon(uint8_t uuid[16],
				 bt_mesh_prov_oob_info_t oob_info,
				 uint32_t *uri_hash)
{
    3298:	b508      	push	{r3, lr}
    329a:	4601      	mov	r1, r0
	memcpy(node_uuid, uuid, 16);
    329c:	2210      	movs	r2, #16
    329e:	4804      	ldr	r0, [pc, #16]	; (32b0 <unprovisioned_beacon+0x18>)
    32a0:	f023 fb7f 	bl	269a2 <memcpy>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    32a4:	4803      	ldr	r0, [pc, #12]	; (32b4 <unprovisioned_beacon+0x1c>)
	k_sem_give(&sem_unprov_beacon);
}
    32a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    32aa:	f020 bc03 	b.w	23ab4 <z_impl_k_sem_give>
    32ae:	bf00      	nop
    32b0:	20009078 	.word	0x20009078
    32b4:	20000dfc 	.word	0x20000dfc

000032b8 <vnd_hello>:
{
    32b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32bc:	4604      	mov	r4, r0
    32be:	b090      	sub	sp, #64	; 0x40
	printk("Hello message from 0x%04x\n\n", ctx->addr);
    32c0:	481b      	ldr	r0, [pc, #108]	; (3330 <vnd_hello+0x78>)
{
    32c2:	460d      	mov	r5, r1
	printk("Hello message from 0x%04x\n\n", ctx->addr);
    32c4:	8889      	ldrh	r1, [r1, #4]
{
    32c6:	461f      	mov	r7, r3
    32c8:	4616      	mov	r6, r2
	printk("Hello message from 0x%04x\n\n", ctx->addr);
    32ca:	f021 f8f3 	bl	244b4 <printk>
	if (ctx->addr == bt_mesh_model_elem(model)->addr) {
    32ce:	4620      	mov	r0, r4
    32d0:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    32d4:	f00b ff7c 	bl	f1d0 <bt_mesh_model_elem>
    32d8:	8803      	ldrh	r3, [r0, #0]
    32da:	4543      	cmp	r3, r8
    32dc:	d025      	beq.n	332a <vnd_hello+0x72>
	len = MIN(buf->len, HELLO_MAX);
    32de:	88b4      	ldrh	r4, [r6, #4]
	memcpy(str, buf->data, len);
    32e0:	6831      	ldr	r1, [r6, #0]
	len = MIN(buf->len, HELLO_MAX);
    32e2:	2c08      	cmp	r4, #8
    32e4:	bf28      	it	cs
    32e6:	2408      	movcs	r4, #8
	memcpy(str, buf->data, len);
    32e8:	4622      	mov	r2, r4
    32ea:	4668      	mov	r0, sp
    32ec:	f023 fb59 	bl	269a2 <memcpy>
	str[len] = '\0';
    32f0:	ab10      	add	r3, sp, #64	; 0x40
    32f2:	441c      	add	r4, r3
	board_add_hello(ctx->addr, str);
    32f4:	88a8      	ldrh	r0, [r5, #4]
	str[len] = '\0';
    32f6:	2600      	movs	r6, #0
	board_add_hello(ctx->addr, str);
    32f8:	4669      	mov	r1, sp
	str[len] = '\0';
    32fa:	f804 6c40 	strb.w	r6, [r4, #-64]
	board_add_hello(ctx->addr, str);
    32fe:	f000 fb43 	bl	3988 <board_add_hello>
	sprintf(displaystr, " says hi! %d", rssi);
    3302:	463a      	mov	r2, r7
    3304:	490b      	ldr	r1, [pc, #44]	; (3334 <vnd_hello+0x7c>)
    3306:	a808      	add	r0, sp, #32
    3308:	f003 fbcc 	bl	6aa4 <sprintf>
	strcat(str,displaystr);
    330c:	a908      	add	r1, sp, #32
    330e:	4668      	mov	r0, sp
    3310:	f023 fb2e 	bl	26970 <strcat>
	board_show_text(str, false, K_SECONDS(5));
    3314:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    3318:	2300      	movs	r3, #0
    331a:	4631      	mov	r1, r6
    331c:	4668      	mov	r0, sp
    331e:	f000 fad9 	bl	38d4 <board_show_text>
	board_blink_leds();
    3322:	f000 facf 	bl	38c4 <board_blink_leds>
	show_main();
    3326:	f000 fb5d 	bl	39e4 <show_main>
}
    332a:	b010      	add	sp, #64	; 0x40
    332c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3330:	0002f5cc 	.word	0x0002f5cc
    3334:	0002f5e8 	.word	0x0002f5e8

00003338 <node_added>:

//call back function for Provisioner after provisioning beacon node and storing the provisioned address of node
static void node_added(uint16_t net_idx, uint8_t uuid[16], uint16_t addr,
		       uint8_t num_elem)
{
	node_addr = addr;
    3338:	4b02      	ldr	r3, [pc, #8]	; (3344 <node_added+0xc>)
    333a:	801a      	strh	r2, [r3, #0]
    333c:	4802      	ldr	r0, [pc, #8]	; (3348 <node_added+0x10>)
    333e:	f020 bbb9 	b.w	23ab4 <z_impl_k_sem_give>
    3342:	bf00      	nop
    3344:	20008920 	.word	0x20008920
    3348:	20000dcc 	.word	0x20000dcc

0000334c <send_hello>:
{
    334c:	b510      	push	{r4, lr}
    334e:	b096      	sub	sp, #88	; 0x58
	NET_BUF_SIMPLE_DEFINE(msg, 3 + HELLO_MAX + 4);
    3350:	ab09      	add	r3, sp, #36	; 0x24
    3352:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    3356:	e9cd 2304 	strd	r2, r3, [sp, #16]
    335a:	9303      	str	r3, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    335c:	2300      	movs	r3, #0
    335e:	e9cd 3306 	strd	r3, r3, [sp, #24]
    3362:	f8cd 301f 	str.w	r3, [sp, #31]
    3366:	231f      	movs	r3, #31
	bin2hex(app_key, 16, app_key_str, sizeof(app_key_str));
    3368:	aa0d      	add	r2, sp, #52	; 0x34
	struct bt_mesh_msg_ctx ctx = {
    336a:	f8ad 001c 	strh.w	r0, [sp, #28]
    336e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	bin2hex(app_key, 16, app_key_str, sizeof(app_key_str));
    3372:	2110      	movs	r1, #16
    3374:	2321      	movs	r3, #33	; 0x21
    3376:	4818      	ldr	r0, [pc, #96]	; (33d8 <send_hello+0x8c>)
    3378:	f020 fff5 	bl	24366 <bin2hex>
	bt_mesh_model_msg_init(&msg, OP_VND_HELLO);
    337c:	4917      	ldr	r1, [pc, #92]	; (33dc <send_hello+0x90>)
    337e:	a803      	add	r0, sp, #12
    3380:	f027 f838 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_mem(&msg, name, MIN(HELLO_MAX, first_name_len(name)));
    3384:	a80d      	add	r0, sp, #52	; 0x34
    3386:	f020 ff9b 	bl	242c0 <first_name_len>
    338a:	2808      	cmp	r0, #8
    338c:	d81b      	bhi.n	33c6 <send_hello+0x7a>
    338e:	a80d      	add	r0, sp, #52	; 0x34
    3390:	f020 ff96 	bl	242c0 <first_name_len>
    3394:	4602      	mov	r2, r0
    3396:	a90d      	add	r1, sp, #52	; 0x34
	if (bt_mesh_model_send(&vnd_models[0], &ctx, &msg, NULL, NULL) == 0) {
    3398:	2400      	movs	r4, #0
	net_buf_simple_add_mem(&msg, name, MIN(HELLO_MAX, first_name_len(name)));
    339a:	a803      	add	r0, sp, #12
    339c:	f028 fe83 	bl	2c0a6 <net_buf_simple_add_mem>
	if (bt_mesh_model_send(&vnd_models[0], &ctx, &msg, NULL, NULL) == 0) {
    33a0:	a906      	add	r1, sp, #24
    33a2:	480f      	ldr	r0, [pc, #60]	; (33e0 <send_hello+0x94>)
    33a4:	9400      	str	r4, [sp, #0]
    33a6:	4623      	mov	r3, r4
    33a8:	aa03      	add	r2, sp, #12
    33aa:	f027 f84c 	bl	2a446 <bt_mesh_model_send>
    33ae:	4601      	mov	r1, r0
    33b0:	b958      	cbnz	r0, 33ca <send_hello+0x7e>
		board_show_text("Saying \"hi!\" to node\n\n", false,
    33b2:	480c      	ldr	r0, [pc, #48]	; (33e4 <send_hello+0x98>)
    33b4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    33b8:	2300      	movs	r3, #0
		board_show_text("Sending Failed!\n", false, K_SECONDS(2));
    33ba:	f000 fa8b 	bl	38d4 <board_show_text>
	show_main();
    33be:	f000 fb11 	bl	39e4 <show_main>
}
    33c2:	b016      	add	sp, #88	; 0x58
    33c4:	bd10      	pop	{r4, pc}
	net_buf_simple_add_mem(&msg, name, MIN(HELLO_MAX, first_name_len(name)));
    33c6:	2208      	movs	r2, #8
    33c8:	e7e5      	b.n	3396 <send_hello+0x4a>
		board_show_text("Sending Failed!\n", false, K_SECONDS(2));
    33ca:	4807      	ldr	r0, [pc, #28]	; (33e8 <send_hello+0x9c>)
    33cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    33d0:	2300      	movs	r3, #0
    33d2:	4621      	mov	r1, r4
    33d4:	e7f1      	b.n	33ba <send_hello+0x6e>
    33d6:	bf00      	nop
    33d8:	0002f8e2 	.word	0x0002f8e2
    33dc:	00fb05f1 	.word	0x00fb05f1
    33e0:	200002e8 	.word	0x200002e8
    33e4:	0002f5f5 	.word	0x0002f5f5
    33e8:	0002f60c 	.word	0x0002f60c

000033ec <check_unconfigured>:

	return 0;
}

static uint8_t check_unconfigured(struct bt_mesh_cdb_node *node, void *data)
{
    33ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    33f0:	f3bf 8f5b 	dmb	ish
    33f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
    33f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(node->flags, BT_MESH_CDB_NODE_CONFIGURED)) {
    33fa:	f014 0401 	ands.w	r4, r4, #1
{
    33fe:	4606      	mov	r6, r0
	if (!atomic_test_bit(node->flags, BT_MESH_CDB_NODE_CONFIGURED)) {
    3400:	f100 0728 	add.w	r7, r0, #40	; 0x28
    3404:	d138      	bne.n	3478 <check_unconfigured+0x8c>
		if (node->addr == self_addr) {
    3406:	f8df 8104 	ldr.w	r8, [pc, #260]	; 350c <check_unconfigured+0x120>
    340a:	8a02      	ldrh	r2, [r0, #16]
    340c:	f8b8 3000 	ldrh.w	r3, [r8]
    3410:	4d39      	ldr	r5, [pc, #228]	; (34f8 <check_unconfigured+0x10c>)
    3412:	429a      	cmp	r2, r3
    3414:	d134      	bne.n	3480 <check_unconfigured+0x94>
	printk("Self-Configuring Started\n");
    3416:	4839      	ldr	r0, [pc, #228]	; (34fc <check_unconfigured+0x110>)
    3418:	f021 f84c 	bl	244b4 <printk>
	err = bt_mesh_cfg_app_key_add(NET_IDX, self->addr, NET_IDX, APP_IDX,app_key, NULL);
    341c:	e9cd 5400 	strd	r5, r4, [sp]
    3420:	8a31      	ldrh	r1, [r6, #16]
    3422:	4623      	mov	r3, r4
    3424:	4622      	mov	r2, r4
    3426:	4620      	mov	r0, r4
    3428:	f00f fb7e 	bl	12b28 <bt_mesh_cfg_app_key_add>
	if (err < 0) {
    342c:	2800      	cmp	r0, #0
    342e:	db23      	blt.n	3478 <check_unconfigured+0x8c>
	err = bt_mesh_cfg_mod_app_bind_vnd(NET_IDX, self->addr, self->addr,APP_IDX, MOD_LF, BT_COMP_ID_LF, NULL);
    3430:	8a32      	ldrh	r2, [r6, #16]
    3432:	9402      	str	r4, [sp, #8]
    3434:	f240 53f1 	movw	r3, #1521	; 0x5f1
    3438:	e9cd 4300 	strd	r4, r3, [sp]
    343c:	4611      	mov	r1, r2
    343e:	4623      	mov	r3, r4
    3440:	4620      	mov	r0, r4
    3442:	f028 fd35 	bl	2beb0 <bt_mesh_cfg_mod_app_bind_vnd>
	if (err < 0) {
    3446:	2800      	cmp	r0, #0
    3448:	db16      	blt.n	3478 <check_unconfigured+0x8c>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    344a:	f3bf 8f5b 	dmb	ish
    344e:	e857 3f00 	ldrex	r3, [r7]
    3452:	f043 0301 	orr.w	r3, r3, #1
    3456:	e847 3200 	strex	r2, r3, [r7]
    345a:	2a00      	cmp	r2, #0
    345c:	d1f7      	bne.n	344e <check_unconfigured+0x62>
    345e:	f3bf 8f5b 	dmb	ish
		bt_mesh_cdb_node_store(self);
    3462:	4630      	mov	r0, r6
    3464:	f028 fd54 	bl	2bf10 <bt_mesh_cdb_node_store>
	printk("Self-Configuration complete\n\n");
    3468:	4825      	ldr	r0, [pc, #148]	; (3500 <check_unconfigured+0x114>)
    346a:	f021 f823 	bl	244b4 <printk>
	self_addr = self->addr;
    346e:	8a33      	ldrh	r3, [r6, #16]
    3470:	f8a8 3000 	strh.w	r3, [r8]
	show_main();
    3474:	f000 fab6 	bl	39e4 <show_main>
			configure_node(node);
		}
	}

	return BT_MESH_CDB_ITER_CONTINUE;
}
    3478:	2001      	movs	r0, #1
    347a:	b004      	add	sp, #16
    347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("Node Configuring Started \n");
    3480:	4820      	ldr	r0, [pc, #128]	; (3504 <check_unconfigured+0x118>)
    3482:	f021 f817 	bl	244b4 <printk>
	err = bt_mesh_cfg_app_key_add(NET_IDX, node->addr, NET_IDX, APP_IDX, app_key, NULL);
    3486:	e9cd 5400 	strd	r5, r4, [sp]
    348a:	8a31      	ldrh	r1, [r6, #16]
    348c:	4623      	mov	r3, r4
    348e:	4622      	mov	r2, r4
    3490:	4620      	mov	r0, r4
    3492:	f00f fb49 	bl	12b28 <bt_mesh_cfg_app_key_add>
	if (err < 0) {
    3496:	2800      	cmp	r0, #0
    3498:	dbee      	blt.n	3478 <check_unconfigured+0x8c>
	err = bt_mesh_cfg_mod_app_bind_vnd(NET_IDX, node->addr, node->addr,APP_IDX, MOD_LF, BT_COMP_ID_LF,NULL);
    349a:	8a32      	ldrh	r2, [r6, #16]
    349c:	9402      	str	r4, [sp, #8]
    349e:	f240 53f1 	movw	r3, #1521	; 0x5f1
    34a2:	e9cd 4300 	strd	r4, r3, [sp]
    34a6:	4611      	mov	r1, r2
    34a8:	4623      	mov	r3, r4
    34aa:	4620      	mov	r0, r4
    34ac:	f028 fd00 	bl	2beb0 <bt_mesh_cfg_mod_app_bind_vnd>
	if (err < 0) {
    34b0:	2800      	cmp	r0, #0
    34b2:	dbe1      	blt.n	3478 <check_unconfigured+0x8c>
    34b4:	f3bf 8f5b 	dmb	ish
    34b8:	e857 3f00 	ldrex	r3, [r7]
    34bc:	f043 0301 	orr.w	r3, r3, #1
    34c0:	e847 3200 	strex	r2, r3, [r7]
    34c4:	2a00      	cmp	r2, #0
    34c6:	d1f7      	bne.n	34b8 <check_unconfigured+0xcc>
    34c8:	f3bf 8f5b 	dmb	ish
		bt_mesh_cdb_node_store(node);
    34cc:	4630      	mov	r0, r6
    34ce:	f028 fd1f 	bl	2bf10 <bt_mesh_cdb_node_store>
	printk("Node Configuration completed\n\n");
    34d2:	480d      	ldr	r0, [pc, #52]	; (3508 <check_unconfigured+0x11c>)
    34d4:	f020 ffee 	bl	244b4 <printk>
	send_hello(node->addr);
    34d8:	8a30      	ldrh	r0, [r6, #16]
    34da:	f7ff ff37 	bl	334c <send_hello>
	return z_impl_k_sleep(timeout);
    34de:	2100      	movs	r1, #0
    34e0:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    34e4:	f020 fac0 	bl	23a68 <z_impl_k_sleep>
	show_main();
    34e8:	f000 fa7c 	bl	39e4 <show_main>
    34ec:	2100      	movs	r1, #0
    34ee:	f44f 3020 	mov.w	r0, #163840	; 0x28000
    34f2:	f020 fab9 	bl	23a68 <z_impl_k_sleep>
    34f6:	e7bf      	b.n	3478 <check_unconfigured+0x8c>
    34f8:	0002f8e2 	.word	0x0002f8e2
    34fc:	0002f61d 	.word	0x0002f61d
    3500:	0002f637 	.word	0x0002f637
    3504:	0002f655 	.word	0x0002f655
    3508:	0002f670 	.word	0x0002f670
    350c:	20008922 	.word	0x20008922

00003510 <mesh_start>:

void mesh_start(void)
{
    3510:	b530      	push	{r4, r5, lr}
	int err;

	/* Initialize the Bluetooth Subsystem */
	err = bt_enable(NULL);
    3512:	2000      	movs	r0, #0
{
    3514:	b099      	sub	sp, #100	; 0x64
	err = bt_enable(NULL);
    3516:	f004 ff51 	bl	83bc <bt_enable>
	err = board_init();
    351a:	f000 fbad 	bl	3c78 <board_init>
	err = bt_mesh_init(&prov, &comp);
    351e:	4973      	ldr	r1, [pc, #460]	; (36ec <mesh_start+0x1dc>)
    3520:	4873      	ldr	r0, [pc, #460]	; (36f0 <mesh_start+0x1e0>)
    3522:	f026 f9d1 	bl	298c8 <bt_mesh_init>
	if (err) {
    3526:	2800      	cmp	r0, #0
    3528:	d15b      	bne.n	35e2 <mesh_start+0xd2>
	printk("Initializing Device...\n");
    352a:	4872      	ldr	r0, [pc, #456]	; (36f4 <mesh_start+0x1e4>)
    352c:	f020 ffc2 	bl	244b4 <printk>
		printk("Loading stored settings\n\n");
    3530:	4871      	ldr	r0, [pc, #452]	; (36f8 <mesh_start+0x1e8>)
    3532:	f020 ffbf 	bl	244b4 <printk>
		settings_load();
    3536:	f021 fd2f 	bl	24f98 <settings_load>
	bin2hex(get_uuid(), 4, device_uuid, sizeof(device_uuid));
    353a:	2309      	movs	r3, #9
    353c:	aa03      	add	r2, sp, #12
    353e:	2104      	movs	r1, #4
    3540:	486e      	ldr	r0, [pc, #440]	; (36fc <mesh_start+0x1ec>)
    3542:	f020 ff10 	bl	24366 <bin2hex>
	printk("Device UUID:  %s \n", device_uuid);
    3546:	a903      	add	r1, sp, #12
    3548:	486d      	ldr	r0, [pc, #436]	; (3700 <mesh_start+0x1f0>)
    354a:	f020 ffb3 	bl	244b4 <printk>
	const char *name = bt_get_name();
    354e:	f004 ffcf 	bl	84f0 <bt_get_name>
    3552:	4601      	mov	r1, r0
	printk("Device Name: %s \n\n", name);
    3554:	486b      	ldr	r0, [pc, #428]	; (3704 <mesh_start+0x1f4>)
    3556:	f020 ffad 	bl	244b4 <printk>
	printk("Bluetooth initialized\n");
    355a:	486b      	ldr	r0, [pc, #428]	; (3708 <mesh_start+0x1f8>)
    355c:	f020 ffaa 	bl	244b4 <printk>
	printk("Mesh initialized\n\n");
    3560:	486a      	ldr	r0, [pc, #424]	; (370c <mesh_start+0x1fc>)
    3562:	f020 ffa7 	bl	244b4 <printk>
	show_main();
    3566:	f000 fa3d 	bl	39e4 <show_main>
	err = bt_mesh_cdb_create(net_key);
    356a:	4869      	ldr	r0, [pc, #420]	; (3710 <mesh_start+0x200>)
    356c:	f00f fbc0 	bl	12cf0 <bt_mesh_cdb_create>
	if (err == -EALREADY) {
    3570:	f110 0f45 	cmn.w	r0, #69	; 0x45
	err = bt_mesh_cdb_create(net_key);
    3574:	4604      	mov	r4, r0
	if (err == -EALREADY) {
    3576:	d12e      	bne.n	35d6 <mesh_start+0xc6>
		printk("Using stored CDB\n");
    3578:	4866      	ldr	r0, [pc, #408]	; (3714 <mesh_start+0x204>)
    357a:	f020 ff9b 	bl	244b4 <printk>
	bt_rand(dev_key, 16);
    357e:	ac06      	add	r4, sp, #24
    3580:	2110      	movs	r1, #16
    3582:	4620      	mov	r0, r4
    3584:	f012 fcc6 	bl	15f14 <bt_rand>
	memcpy(device_key, dev_key, 16);
    3588:	4863      	ldr	r0, [pc, #396]	; (3718 <mesh_start+0x208>)
    358a:	2210      	movs	r2, #16
    358c:	4621      	mov	r1, r4
    358e:	f023 fa08 	bl	269a2 <memcpy>
	printk("Self Provisioning started\n");
    3592:	4862      	ldr	r0, [pc, #392]	; (371c <mesh_start+0x20c>)
    3594:	f020 ff8e 	bl	244b4 <printk>
		err = bt_rand(&addr, sizeof(addr));
    3598:	2102      	movs	r1, #2
    359a:	f10d 000a 	add.w	r0, sp, #10
    359e:	f012 fcb9 	bl	15f14 <bt_rand>
	} while (!addr);
    35a2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    35a6:	2b00      	cmp	r3, #0
    35a8:	d0f6      	beq.n	3598 <mesh_start+0x88>
	self_addr = addr;
    35aa:	4d5d      	ldr	r5, [pc, #372]	; (3720 <mesh_start+0x210>)
	err = bt_mesh_provision(net_key, NET_IDX, FLAGS, IV_INDEX, addr,dev_key);
    35ac:	4858      	ldr	r0, [pc, #352]	; (3710 <mesh_start+0x200>)
	addr &= ~0x8000;
    35ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
	self_addr = addr;
    35b2:	802b      	strh	r3, [r5, #0]
	addr &= ~0x8000;
    35b4:	f8ad 300a 	strh.w	r3, [sp, #10]
	err = bt_mesh_provision(net_key, NET_IDX, FLAGS, IV_INDEX, addr,dev_key);
    35b8:	e9cd 3400 	strd	r3, r4, [sp]
    35bc:	2300      	movs	r3, #0
    35be:	4619      	mov	r1, r3
    35c0:	461a      	mov	r2, r3
    35c2:	f009 f885 	bl	c6d0 <bt_mesh_provision>
	if (err == -EALREADY) {
    35c6:	f110 0f45 	cmn.w	r0, #69	; 0x45
	err = bt_mesh_provision(net_key, NET_IDX, FLAGS, IV_INDEX, addr,dev_key);
    35ca:	4601      	mov	r1, r0
	if (err == -EALREADY) {
    35cc:	d17a      	bne.n	36c4 <mesh_start+0x1b4>
		printk("Using stored settings\n");
    35ce:	4855      	ldr	r0, [pc, #340]	; (3724 <mesh_start+0x214>)
		printk("Self Provisioning completed\n\n");
    35d0:	f020 ff70 	bl	244b4 <printk>
    35d4:	e005      	b.n	35e2 <mesh_start+0xd2>
	} else if (err) {
    35d6:	2800      	cmp	r0, #0
    35d8:	d049      	beq.n	366e <mesh_start+0x15e>
		printk("Failed to create CDB (err %d)\n", err);
    35da:	4601      	mov	r1, r0
    35dc:	4852      	ldr	r0, [pc, #328]	; (3728 <mesh_start+0x218>)
		printk("Provisioning failed (err %d)\n", err);
    35de:	f020 ff69 	bl	244b4 <printk>
/**
 * @internal
 */
static inline void z_impl_k_sem_reset(struct k_sem *sem)
{
	sem->count = 0U;
    35e2:	4d52      	ldr	r5, [pc, #328]	; (372c <mesh_start+0x21c>)
    35e4:	2400      	movs	r4, #0
    35e6:	60ac      	str	r4, [r5, #8]
    35e8:	4b51      	ldr	r3, [pc, #324]	; (3730 <mesh_start+0x220>)

	//provision and confiure nodes
	while (1) {
		k_sem_reset(&sem_unprov_beacon);
		k_sem_reset(&sem_node_added);
		bt_mesh_cdb_node_foreach(check_unconfigured, NULL);
    35ea:	4852      	ldr	r0, [pc, #328]	; (3734 <mesh_start+0x224>)
    35ec:	609c      	str	r4, [r3, #8]
    35ee:	2100      	movs	r1, #0
    35f0:	f00f fc2e 	bl	12e50 <bt_mesh_cdb_node_foreach>

		printk("Waiting for unprovisioned node...\n\n");
    35f4:	4850      	ldr	r0, [pc, #320]	; (3738 <mesh_start+0x228>)
    35f6:	f020 ff5d 	bl	244b4 <printk>
	return z_impl_k_sem_take(sem, timeout);
    35fa:	484c      	ldr	r0, [pc, #304]	; (372c <mesh_start+0x21c>)
    35fc:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
    3600:	2300      	movs	r3, #0
    3602:	f020 fa7d 	bl	23b00 <z_impl_k_sem_take>
		err = k_sem_take(&sem_unprov_beacon, K_SECONDS(15));
		if (err == -EAGAIN) {
    3606:	300b      	adds	r0, #11
    3608:	d0ed      	beq.n	35e6 <mesh_start+0xd6>
			continue;
		}
		char uuid_hex_str[32 + 1];
		bin2hex(node_uuid, 16, uuid_hex_str, sizeof(uuid_hex_str));
    360a:	2321      	movs	r3, #33	; 0x21
    360c:	aa0f      	add	r2, sp, #60	; 0x3c
    360e:	2110      	movs	r1, #16
    3610:	484a      	ldr	r0, [pc, #296]	; (373c <mesh_start+0x22c>)
    3612:	f020 fea8 	bl	24366 <bin2hex>
		printk("Unprovioned Node Detcted with UUID : %s\n",
    3616:	484a      	ldr	r0, [pc, #296]	; (3740 <mesh_start+0x230>)
    3618:	a90f      	add	r1, sp, #60	; 0x3c
    361a:	f020 ff4b 	bl	244b4 <printk>
		       uuid_hex_str);
		printk("Node Provisioning started \n");
    361e:	4849      	ldr	r0, [pc, #292]	; (3744 <mesh_start+0x234>)
    3620:	f020 ff48 	bl	244b4 <printk>
		uint16_t addr;
		int err;
		do {
			err = bt_rand(&addr, sizeof(addr));
    3624:	2102      	movs	r1, #2
    3626:	a806      	add	r0, sp, #24
    3628:	f012 fc74 	bl	15f14 <bt_rand>
			if (err) {
				continue;
			}
		} while (!addr);
    362c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    3630:	2a00      	cmp	r2, #0
    3632:	d0f7      	beq.n	3624 <mesh_start+0x114>

		/* Make sure it's a unicast address (highest bit unset) */
		addr &= ~0x8000;
		err = bt_mesh_provision_adv(node_uuid, NET_IDX, addr, 0);
    3634:	2300      	movs	r3, #0
		addr &= ~0x8000;
    3636:	f3c2 020e 	ubfx	r2, r2, #0, #15
		err = bt_mesh_provision_adv(node_uuid, NET_IDX, addr, 0);
    363a:	4840      	ldr	r0, [pc, #256]	; (373c <mesh_start+0x22c>)
		addr &= ~0x8000;
    363c:	f8ad 2018 	strh.w	r2, [sp, #24]
		err = bt_mesh_provision_adv(node_uuid, NET_IDX, addr, 0);
    3640:	4619      	mov	r1, r3
    3642:	f008 ffc1 	bl	c5c8 <bt_mesh_provision_adv>
		if (err < 0) {
    3646:	2800      	cmp	r0, #0
    3648:	dbcd      	blt.n	35e6 <mesh_start+0xd6>
    364a:	4839      	ldr	r0, [pc, #228]	; (3730 <mesh_start+0x220>)
    364c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    3650:	2300      	movs	r3, #0
    3652:	f020 fa55 	bl	23b00 <z_impl_k_sem_take>
			continue;
		}
		err = k_sem_take(&sem_node_added, K_SECONDS(10));
		if (err == -EAGAIN) {
    3656:	300b      	adds	r0, #11
    3658:	d0c5      	beq.n	35e6 <mesh_start+0xd6>
			continue;
		}
		printk("Node Provisioned Address  0x%04x\n", node_addr);
    365a:	4b3b      	ldr	r3, [pc, #236]	; (3748 <mesh_start+0x238>)
    365c:	483b      	ldr	r0, [pc, #236]	; (374c <mesh_start+0x23c>)
    365e:	8819      	ldrh	r1, [r3, #0]
    3660:	f020 ff28 	bl	244b4 <printk>
		printk("Node Provisioning Completed %s\n\n", uuid_hex_str);
    3664:	483a      	ldr	r0, [pc, #232]	; (3750 <mesh_start+0x240>)
    3666:	a90f      	add	r1, sp, #60	; 0x3c
    3668:	f020 ff24 	bl	244b4 <printk>
    366c:	e7bb      	b.n	35e6 <mesh_start+0xd6>
		printk("Created CDB\n");
    366e:	4839      	ldr	r0, [pc, #228]	; (3754 <mesh_start+0x244>)
    3670:	f020 ff20 	bl	244b4 <printk>
		bin2hex(net_key, 16, net_key_str, sizeof(net_key_str));
    3674:	2321      	movs	r3, #33	; 0x21
    3676:	aa06      	add	r2, sp, #24
    3678:	2110      	movs	r1, #16
    367a:	4825      	ldr	r0, [pc, #148]	; (3710 <mesh_start+0x200>)
    367c:	f020 fe73 	bl	24366 <bin2hex>
		printk("Network key %s\n", net_key_str);
    3680:	4835      	ldr	r0, [pc, #212]	; (3758 <mesh_start+0x248>)
    3682:	a906      	add	r1, sp, #24
    3684:	f020 ff16 	bl	244b4 <printk>
	key = bt_mesh_cdb_app_key_alloc(NET_IDX, APP_IDX);
    3688:	4621      	mov	r1, r4
    368a:	4620      	mov	r0, r4
    368c:	f00f fbf6 	bl	12e7c <bt_mesh_cdb_app_key_alloc>
	if (key == NULL) {
    3690:	4604      	mov	r4, r0
    3692:	b920      	cbnz	r0, 369e <mesh_start+0x18e>
		printk("Failed to allocate app-key 0x%04x\n", APP_IDX);
    3694:	4601      	mov	r1, r0
    3696:	4831      	ldr	r0, [pc, #196]	; (375c <mesh_start+0x24c>)
    3698:	f020 ff0c 	bl	244b4 <printk>
		return;
    369c:	e76f      	b.n	357e <mesh_start+0x6e>
	memcpy(key->keys[0].app_key, app_key, 16);
    369e:	4930      	ldr	r1, [pc, #192]	; (3760 <mesh_start+0x250>)
    36a0:	2210      	movs	r2, #16
    36a2:	3004      	adds	r0, #4
    36a4:	f023 f97d 	bl	269a2 <memcpy>
	bin2hex(app_key, 16, app_key_str, sizeof(app_key_str));
    36a8:	2321      	movs	r3, #33	; 0x21
    36aa:	aa0f      	add	r2, sp, #60	; 0x3c
    36ac:	2110      	movs	r1, #16
    36ae:	482c      	ldr	r0, [pc, #176]	; (3760 <mesh_start+0x250>)
    36b0:	f020 fe59 	bl	24366 <bin2hex>
	printk("Application key %s\n\n", app_key_str);
    36b4:	482b      	ldr	r0, [pc, #172]	; (3764 <mesh_start+0x254>)
    36b6:	a90f      	add	r1, sp, #60	; 0x3c
    36b8:	f020 fefc 	bl	244b4 <printk>
		bt_mesh_cdb_app_key_store(key);
    36bc:	4620      	mov	r0, r4
    36be:	f028 fc37 	bl	2bf30 <bt_mesh_cdb_app_key_store>
    36c2:	e75c      	b.n	357e <mesh_start+0x6e>
	} else if (err) {
    36c4:	b108      	cbz	r0, 36ca <mesh_start+0x1ba>
		printk("Provisioning failed (err %d)\n", err);
    36c6:	4828      	ldr	r0, [pc, #160]	; (3768 <mesh_start+0x258>)
    36c8:	e789      	b.n	35de <mesh_start+0xce>
		bin2hex(dev_key, 16, dev_key_str, sizeof(dev_key_str));
    36ca:	2321      	movs	r3, #33	; 0x21
    36cc:	aa0f      	add	r2, sp, #60	; 0x3c
    36ce:	2110      	movs	r1, #16
    36d0:	4620      	mov	r0, r4
    36d2:	f020 fe48 	bl	24366 <bin2hex>
		printk("Device key %s\n", dev_key_str);
    36d6:	4825      	ldr	r0, [pc, #148]	; (376c <mesh_start+0x25c>)
    36d8:	a90f      	add	r1, sp, #60	; 0x3c
    36da:	f020 feeb 	bl	244b4 <printk>
		printk("Self Provisioned Address  0x%04x\n", self_addr);
    36de:	4824      	ldr	r0, [pc, #144]	; (3770 <mesh_start+0x260>)
    36e0:	8829      	ldrh	r1, [r5, #0]
    36e2:	f020 fee7 	bl	244b4 <printk>
		printk("Self Provisioning completed\n\n");
    36e6:	4823      	ldr	r0, [pc, #140]	; (3774 <mesh_start+0x264>)
    36e8:	e772      	b.n	35d0 <mesh_start+0xc0>
    36ea:	bf00      	nop
    36ec:	0002dd58 	.word	0x0002dd58
    36f0:	0002dd68 	.word	0x0002dd68
    36f4:	0002f68f 	.word	0x0002f68f
    36f8:	0002f6a7 	.word	0x0002f6a7
    36fc:	0002f8f2 	.word	0x0002f8f2
    3700:	0002f6c1 	.word	0x0002f6c1
    3704:	0002f6d4 	.word	0x0002f6d4
    3708:	0002f6e7 	.word	0x0002f6e7
    370c:	0002f6fe 	.word	0x0002f6fe
    3710:	0002f902 	.word	0x0002f902
    3714:	0002f711 	.word	0x0002f711
    3718:	20009068 	.word	0x20009068
    371c:	0002f797 	.word	0x0002f797
    3720:	20008922 	.word	0x20008922
    3724:	0002f7b2 	.word	0x0002f7b2
    3728:	0002f723 	.word	0x0002f723
    372c:	20000dfc 	.word	0x20000dfc
    3730:	20000dcc 	.word	0x20000dcc
    3734:	000033ed 	.word	0x000033ed
    3738:	0002f836 	.word	0x0002f836
    373c:	20009078 	.word	0x20009078
    3740:	0002f85a 	.word	0x0002f85a
    3744:	0002f883 	.word	0x0002f883
    3748:	20008920 	.word	0x20008920
    374c:	0002f89f 	.word	0x0002f89f
    3750:	0002f8c1 	.word	0x0002f8c1
    3754:	0002f742 	.word	0x0002f742
    3758:	0002f74f 	.word	0x0002f74f
    375c:	0002f75f 	.word	0x0002f75f
    3760:	0002f8e2 	.word	0x0002f8e2
    3764:	0002f782 	.word	0x0002f782
    3768:	0002f7c9 	.word	0x0002f7c9
    376c:	0002f7e7 	.word	0x0002f7e7
    3770:	0002f7f6 	.word	0x0002f7f6
    3774:	0002f818 	.word	0x0002f818

00003778 <get_uuid>:
}

const uint8_t *get_uuid(void)
{
	return dev_uuid;
}
    3778:	4800      	ldr	r0, [pc, #0]	; (377c <get_uuid+0x4>)
    377a:	4770      	bx	lr
    377c:	0002f8f2 	.word	0x0002f8f2

00003780 <mesh_is_initialized>:

bool mesh_is_initialized(void)
{
	return self_addr != BT_MESH_ADDR_UNASSIGNED;
    3780:	4b02      	ldr	r3, [pc, #8]	; (378c <mesh_is_initialized+0xc>)
    3782:	8818      	ldrh	r0, [r3, #0]
}
    3784:	3800      	subs	r0, #0
    3786:	bf18      	it	ne
    3788:	2001      	movne	r0, #1
    378a:	4770      	bx	lr
    378c:	20008922 	.word	0x20008922

00003790 <get_my_addr>:


uint16_t get_my_addr(void)
{
	return self_addr;
}
    3790:	4b01      	ldr	r3, [pc, #4]	; (3798 <get_my_addr+0x8>)
    3792:	8818      	ldrh	r0, [r3, #0]
    3794:	4770      	bx	lr
    3796:	bf00      	nop
    3798:	20008922 	.word	0x20008922

0000379c <get_net_key>:

const uint8_t *get_net_key(void)
{
	return net_key;
}
    379c:	4800      	ldr	r0, [pc, #0]	; (37a0 <get_net_key+0x4>)
    379e:	4770      	bx	lr
    37a0:	0002f902 	.word	0x0002f902

000037a4 <get_dev_key>:

uint8_t *get_dev_key(void)
{
	return device_key;
}
    37a4:	4800      	ldr	r0, [pc, #0]	; (37a8 <get_dev_key+0x4>)
    37a6:	4770      	bx	lr
    37a8:	20009068 	.word	0x20009068

000037ac <get_app_key>:

const uint8_t *get_app_key(void)
{
	return app_key;
}
    37ac:	4800      	ldr	r0, [pc, #0]	; (37b0 <get_app_key+0x4>)
    37ae:	4770      	bx	lr
    37b0:	0002f8e2 	.word	0x0002f8e2

000037b4 <k_delayed_work_submit>:
{
    37b4:	4601      	mov	r1, r0
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    37b6:	4801      	ldr	r0, [pc, #4]	; (37bc <k_delayed_work_submit+0x8>)
    37b8:	f020 bad8 	b.w	23d6c <k_delayed_work_submit_to_queue>
    37bc:	20001fd8 	.word	0x20001fd8

000037c0 <clear_screen>:
{
	k_delayed_work_submit(&led_timer, K_MSEC(100));
}

static void clear_screen(void)
{
    37c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/*clear screen*/
	uint8_t ppt = cfb_get_display_parameter(epd_dev, CFB_DISPLAY_PPT);
    37c4:	4d0a      	ldr	r5, [pc, #40]	; (37f0 <clear_screen+0x30>)
	for (int i = 0; i < 15; i++) {
		cfb_print(epd_dev,
    37c6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 37f4 <clear_screen+0x34>
	uint8_t ppt = cfb_get_display_parameter(epd_dev, CFB_DISPLAY_PPT);
    37ca:	6828      	ldr	r0, [r5, #0]
    37cc:	2102      	movs	r1, #2
    37ce:	f002 f86b 	bl	58a8 <cfb_get_display_parameter>
    37d2:	2400      	movs	r4, #0
    37d4:	b2c7      	uxtb	r7, r0
    37d6:	260f      	movs	r6, #15
		cfb_print(epd_dev,
    37d8:	4623      	mov	r3, r4
    37da:	6828      	ldr	r0, [r5, #0]
    37dc:	2200      	movs	r2, #0
    37de:	4641      	mov	r1, r8
    37e0:	f001 ff6c 	bl	56bc <cfb_print>
	for (int i = 0; i < 15; i++) {
    37e4:	443c      	add	r4, r7
    37e6:	3e01      	subs	r6, #1
    37e8:	b2a4      	uxth	r4, r4
    37ea:	d1f5      	bne.n	37d8 <clear_screen+0x18>
			  "                                               ", 0,
			  i * ppt);
	}
}
    37ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37f0:	200020a8 	.word	0x200020a8
    37f4:	0002f912 	.word	0x0002f912

000037f8 <print_line>:
{
    37f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t line[fonts[FONT_SMALL].columns + 1];
    37fc:	f8df b094 	ldr.w	fp, [pc, #148]	; 3894 <print_line+0x9c>
{
    3800:	b083      	sub	sp, #12
    3802:	4690      	mov	r8, r2
	uint8_t line[fonts[FONT_SMALL].columns + 1];
    3804:	f89b 2000 	ldrb.w	r2, [fp]
{
    3808:	461d      	mov	r5, r3
	uint8_t line[fonts[FONT_SMALL].columns + 1];
    380a:	3208      	adds	r2, #8
	cfb_framebuffer_set_font(epd_dev, font_size);
    380c:	4b1f      	ldr	r3, [pc, #124]	; (388c <print_line+0x94>)
{
    380e:	af00      	add	r7, sp, #0
	uint8_t line[fonts[FONT_SMALL].columns + 1];
    3810:	f402 72fc 	and.w	r2, r2, #504	; 0x1f8
{
    3814:	4606      	mov	r6, r0
	uint8_t line[fonts[FONT_SMALL].columns + 1];
    3816:	ebad 0d02 	sub.w	sp, sp, r2
{
    381a:	4689      	mov	r9, r1
	cfb_framebuffer_set_font(epd_dev, font_size);
    381c:	4601      	mov	r1, r0
    381e:	6818      	ldr	r0, [r3, #0]
{
    3820:	f897 4030 	ldrb.w	r4, [r7, #48]	; 0x30
	cfb_framebuffer_set_font(epd_dev, font_size);
    3824:	f002 f864 	bl	58f0 <cfb_framebuffer_set_font>
	len = MIN(len, fonts[font_size].columns);
    3828:	f81b 2006 	ldrb.w	r2, [fp, r6]
    382c:	4295      	cmp	r5, r2
    382e:	bf28      	it	cs
    3830:	4615      	movcs	r5, r2
	memcpy(line, text, len);
    3832:	462a      	mov	r2, r5
    3834:	4641      	mov	r1, r8
    3836:	4668      	mov	r0, sp
    3838:	f023 f8b3 	bl	269a2 <memcpy>
    383c:	4b13      	ldr	r3, [pc, #76]	; (388c <print_line+0x94>)
	line[len] = '\0';
    383e:	2200      	movs	r2, #0
    3840:	f80d 2005 	strb.w	r2, [sp, r5]
	uint8_t line[fonts[FONT_SMALL].columns + 1];
    3844:	46ea      	mov	sl, sp
	if (center) {
    3846:	4698      	mov	r8, r3
    3848:	b11c      	cbz	r4, 3852 <print_line+0x5a>
		pad = (fonts[font_size].columns - len) / 2U;
    384a:	f81b 4006 	ldrb.w	r4, [fp, r6]
    384e:	1b64      	subs	r4, r4, r5
    3850:	0864      	lsrs	r4, r4, #1
	cfb_get_font_size(epd_dev, font_size, &font_width, &font_height);
    3852:	1dbb      	adds	r3, r7, #6
    3854:	1dfa      	adds	r2, r7, #7
    3856:	4631      	mov	r1, r6
    3858:	f8d8 0000 	ldr.w	r0, [r8]
    385c:	f002 f854 	bl	5908 <cfb_get_font_size>
	if (cfb_print(epd_dev, line, font_width * pad, font_height * row)) {
    3860:	79bb      	ldrb	r3, [r7, #6]
    3862:	79fa      	ldrb	r2, [r7, #7]
    3864:	f8d8 0000 	ldr.w	r0, [r8]
    3868:	fb13 f309 	smulbb	r3, r3, r9
    386c:	fb12 f204 	smulbb	r2, r2, r4
    3870:	b29b      	uxth	r3, r3
    3872:	b292      	uxth	r2, r2
    3874:	4651      	mov	r1, sl
    3876:	f001 ff21 	bl	56bc <cfb_print>
    387a:	b110      	cbz	r0, 3882 <print_line+0x8a>
		printk("Failed to print a string\n");
    387c:	4804      	ldr	r0, [pc, #16]	; (3890 <print_line+0x98>)
    387e:	f020 fe19 	bl	244b4 <printk>
}
    3882:	4628      	mov	r0, r5
    3884:	370c      	adds	r7, #12
    3886:	46bd      	mov	sp, r7
    3888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    388c:	200020a8 	.word	0x200020a8
    3890:	0002f942 	.word	0x0002f942
    3894:	20000b78 	.word	0x20000b78

00003898 <button_is_pressed>:
	board_refresh_display();
}

static bool button_is_pressed(void)
{
	return gpio_pin_get(gpio, DT_GPIO_PIN(DT_ALIAS(sw0), gpios)) > 0;
    3898:	4b09      	ldr	r3, [pc, #36]	; (38c0 <button_is_pressed+0x28>)
{
    389a:	b513      	push	{r0, r1, r4, lr}
	return gpio_pin_get(gpio, DT_GPIO_PIN(DT_ALIAS(sw0), gpios)) > 0;
    389c:	6818      	ldr	r0, [r3, #0]
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_port_get(const struct device *port,
				gpio_port_value_t *value)
{
	const struct gpio_driver_data *const data =
    389e:	68c4      	ldr	r4, [r0, #12]
	return api->port_get_raw(port, value);
    38a0:	6883      	ldr	r3, [r0, #8]
    38a2:	a901      	add	r1, sp, #4
    38a4:	685b      	ldr	r3, [r3, #4]
    38a6:	4798      	blx	r3
			(const struct gpio_driver_data *)port->data;
	int ret;

	ret = gpio_port_get_raw(port, value);
	if (ret == 0) {
    38a8:	b920      	cbnz	r0, 38b4 <button_is_pressed+0x1c>
		*value ^= data->invert;
    38aa:	6823      	ldr	r3, [r4, #0]
    38ac:	9801      	ldr	r0, [sp, #4]
    38ae:	4058      	eors	r0, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    38b0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
    38b4:	2800      	cmp	r0, #0
    38b6:	bfd4      	ite	le
    38b8:	2000      	movle	r0, #0
    38ba:	2001      	movgt	r0, #1
    38bc:	b002      	add	sp, #8
    38be:	bd10      	pop	{r4, pc}
    38c0:	200020ac 	.word	0x200020ac

000038c4 <board_blink_leds>:
	k_delayed_work_submit(&led_timer, K_MSEC(100));
    38c4:	4802      	ldr	r0, [pc, #8]	; (38d0 <board_blink_leds+0xc>)
    38c6:	f640 42cd 	movw	r2, #3277	; 0xccd
    38ca:	2300      	movs	r3, #0
    38cc:	f7ff bf72 	b.w	37b4 <k_delayed_work_submit>
    38d0:	20000fd0 	.word	0x20000fd0

000038d4 <board_show_text>:
{
    38d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	cfb_framebuffer_clear(epd_dev, true);
    38d8:	4e28      	ldr	r6, [pc, #160]	; (397c <board_show_text+0xa8>)
	for (i = 0; i <= fonts[font].columns; i++) {
    38da:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3984 <board_show_text+0xb0>
{
    38de:	4683      	mov	fp, r0
    38e0:	4688      	mov	r8, r1
	cfb_framebuffer_clear(epd_dev, true);
    38e2:	6830      	ldr	r0, [r6, #0]
    38e4:	2101      	movs	r1, #1
{
    38e6:	4614      	mov	r4, r2
    38e8:	461d      	mov	r5, r3
	cfb_framebuffer_clear(epd_dev, true);
    38ea:	f001 ff97 	bl	581c <cfb_framebuffer_clear>
	clear_screen();
    38ee:	f7ff ff67 	bl	37c0 <clear_screen>
	for (i = 0; i < 3; i++) {
    38f2:	2700      	movs	r7, #0
    38f4:	4658      	mov	r0, fp
    38f6:	e000      	b.n	38fa <board_show_text+0x26>
{
    38f8:	4618      	mov	r0, r3
		while (*text == ' ' || *text == '\n') {
    38fa:	4603      	mov	r3, r0
    38fc:	4682      	mov	sl, r0
    38fe:	f813 2b01 	ldrb.w	r2, [r3], #1
    3902:	2a20      	cmp	r2, #32
    3904:	d0f8      	beq.n	38f8 <board_show_text+0x24>
    3906:	2a0a      	cmp	r2, #10
    3908:	d0f6      	beq.n	38f8 <board_show_text+0x24>
	const char *space = NULL;
    390a:	2200      	movs	r2, #0
	for (i = 0; i <= fonts[font].columns; i++) {
    390c:	f899 c002 	ldrb.w	ip, [r9, #2]
    3910:	4613      	mov	r3, r2
		switch (text[i]) {
    3912:	4686      	mov	lr, r0
    3914:	f810 1b01 	ldrb.w	r1, [r0], #1
    3918:	290a      	cmp	r1, #10
    391a:	d002      	beq.n	3922 <board_show_text+0x4e>
    391c:	2920      	cmp	r1, #32
    391e:	d020      	beq.n	3962 <board_show_text+0x8e>
    3920:	bb01      	cbnz	r1, 3964 <board_show_text+0x90>
		if (!len) {
    3922:	b173      	cbz	r3, 3942 <board_show_text+0x6e>
		text += print_line(FONT_MEDIUM, i, text, len, center);
    3924:	f8cd 8000 	str.w	r8, [sp]
    3928:	4652      	mov	r2, sl
    392a:	4639      	mov	r1, r7
    392c:	2001      	movs	r0, #1
    392e:	f7ff ff63 	bl	37f8 <print_line>
		if (!*text) {
    3932:	f81a 3000 	ldrb.w	r3, [sl, r0]
		text += print_line(FONT_MEDIUM, i, text, len, center);
    3936:	eb0a 0b00 	add.w	fp, sl, r0
		if (!*text) {
    393a:	b113      	cbz	r3, 3942 <board_show_text+0x6e>
	for (i = 0; i < 3; i++) {
    393c:	3701      	adds	r7, #1
    393e:	2f03      	cmp	r7, #3
    3940:	d1d8      	bne.n	38f4 <board_show_text+0x20>
	cfb_framebuffer_finalize(epd_dev);
    3942:	6830      	ldr	r0, [r6, #0]
    3944:	f001 ff7a 	bl	583c <cfb_framebuffer_finalize>
	if (!K_TIMEOUT_EQ(duration, K_FOREVER)) {
    3948:	1c6b      	adds	r3, r5, #1
    394a:	bf08      	it	eq
    394c:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    3950:	d011      	beq.n	3976 <board_show_text+0xa2>
		k_delayed_work_submit(&epd_work, duration);
    3952:	480b      	ldr	r0, [pc, #44]	; (3980 <board_show_text+0xac>)
    3954:	4622      	mov	r2, r4
    3956:	462b      	mov	r3, r5
}
    3958:	b003      	add	sp, #12
    395a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		k_delayed_work_submit(&epd_work, duration);
    395e:	f7ff bf29 	b.w	37b4 <k_delayed_work_submit>
		switch (text[i]) {
    3962:	4672      	mov	r2, lr
	for (i = 0; i <= fonts[font].columns; i++) {
    3964:	3301      	adds	r3, #1
    3966:	4563      	cmp	r3, ip
    3968:	d9d3      	bls.n	3912 <board_show_text+0x3e>
	if (space) {
    396a:	b112      	cbz	r2, 3972 <board_show_text+0x9e>
		return space - text;
    396c:	eba2 030a 	sub.w	r3, r2, sl
    3970:	e7d7      	b.n	3922 <board_show_text+0x4e>
    3972:	4663      	mov	r3, ip
    3974:	e7d5      	b.n	3922 <board_show_text+0x4e>
}
    3976:	b003      	add	sp, #12
    3978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    397c:	200020a8 	.word	0x200020a8
    3980:	20000fa0 	.word	0x20000fa0
    3984:	20000b78 	.word	0x20000b78

00003988 <board_add_hello>:
{
    3988:	b570      	push	{r4, r5, r6, lr}
		if (!stat->addr) {
    398a:	4d14      	ldr	r5, [pc, #80]	; (39dc <board_add_hello+0x54>)
	for (i = 0; i < ARRAY_SIZE(stats); i++) {
    398c:	2300      	movs	r3, #0
    398e:	260e      	movs	r6, #14
		if (!stat->addr) {
    3990:	fb06 f403 	mul.w	r4, r6, r3
    3994:	5b62      	ldrh	r2, [r4, r5]
    3996:	b96a      	cbnz	r2, 39b4 <board_add_hello+0x2c>
			stat->addr = addr;
    3998:	5328      	strh	r0, [r5, r4]
			strncpy(stat->name, name, sizeof(stat->name) - 1);
    399a:	1ca0      	adds	r0, r4, #2
    399c:	2208      	movs	r2, #8
    399e:	4428      	add	r0, r5
    39a0:	f022 ffa3 	bl	268ea <strncpy>
			stat->addr = addr;
    39a4:	192e      	adds	r6, r5, r4
			stat_count++;
    39a6:	4a0e      	ldr	r2, [pc, #56]	; (39e0 <board_add_hello+0x58>)
			stat->hello_count = 1U;
    39a8:	2301      	movs	r3, #1
    39aa:	81b3      	strh	r3, [r6, #12]
			stat_count++;
    39ac:	6813      	ldr	r3, [r2, #0]
    39ae:	3301      	adds	r3, #1
    39b0:	6013      	str	r3, [r2, #0]
}
    39b2:	bd70      	pop	{r4, r5, r6, pc}
		if (stat->addr == addr) {
    39b4:	4290      	cmp	r0, r2
    39b6:	d10d      	bne.n	39d4 <board_add_hello+0x4c>
			strncpy(stat->name, name, sizeof(stat->name) - 1);
    39b8:	1ca0      	adds	r0, r4, #2
			if (stat->hello_count < 0xffff) {
    39ba:	442c      	add	r4, r5
			strncpy(stat->name, name, sizeof(stat->name) - 1);
    39bc:	2208      	movs	r2, #8
    39be:	4428      	add	r0, r5
    39c0:	f022 ff93 	bl	268ea <strncpy>
			if (stat->hello_count < 0xffff) {
    39c4:	89a3      	ldrh	r3, [r4, #12]
    39c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    39ca:	4293      	cmp	r3, r2
    39cc:	d0f1      	beq.n	39b2 <board_add_hello+0x2a>
				stat->hello_count++;
    39ce:	3301      	adds	r3, #1
    39d0:	81a3      	strh	r3, [r4, #12]
				return i;
    39d2:	e7ee      	b.n	39b2 <board_add_hello+0x2a>
	for (i = 0; i < ARRAY_SIZE(stats); i++) {
    39d4:	3301      	adds	r3, #1
    39d6:	2b80      	cmp	r3, #128	; 0x80
    39d8:	d1da      	bne.n	3990 <board_add_hello+0x8>
    39da:	e7ea      	b.n	39b2 <board_add_hello+0x2a>
    39dc:	20008924 	.word	0x20008924
    39e0:	200020b4 	.word	0x200020b4

000039e4 <show_main>:
{
    39e4:	b570      	push	{r4, r5, r6, lr}
	cfb_framebuffer_clear(epd_dev, true);
    39e6:	4d46      	ldr	r5, [pc, #280]	; (3b00 <show_main+0x11c>)
{
    39e8:	b0ea      	sub	sp, #424	; 0x1a8
	cfb_framebuffer_clear(epd_dev, true);
    39ea:	2101      	movs	r1, #1
    39ec:	6828      	ldr	r0, [r5, #0]
    39ee:	f001 ff15 	bl	581c <cfb_framebuffer_clear>
	clear_screen();
    39f2:	f7ff fee5 	bl	37c0 <clear_screen>
	len = snprintk(str, sizeof(str), "Mesh Info:\n");
    39f6:	4a43      	ldr	r2, [pc, #268]	; (3b04 <show_main+0x120>)
    39f8:	2164      	movs	r1, #100	; 0x64
    39fa:	a806      	add	r0, sp, #24
    39fc:	f020 fd67 	bl	244ce <snprintk>
	print_line(FONT_SMALL, line++, str, len, true);
    3a00:	2601      	movs	r6, #1
    3a02:	2100      	movs	r1, #0
	len = snprintk(str, sizeof(str), "Mesh Info:\n");
    3a04:	4603      	mov	r3, r0
	print_line(FONT_SMALL, line++, str, len, true);
    3a06:	aa06      	add	r2, sp, #24
    3a08:	4608      	mov	r0, r1
    3a0a:	9600      	str	r6, [sp, #0]
    3a0c:	f7ff fef4 	bl	37f8 <print_line>
	len = snprintk(str, sizeof(str), "Device Name: %s", bt_get_name());
    3a10:	f004 fd6e 	bl	84f0 <bt_get_name>
    3a14:	4a3c      	ldr	r2, [pc, #240]	; (3b08 <show_main+0x124>)
    3a16:	4603      	mov	r3, r0
    3a18:	2164      	movs	r1, #100	; 0x64
    3a1a:	a806      	add	r0, sp, #24
    3a1c:	f020 fd57 	bl	244ce <snprintk>
	print_line(FONT_SMALL, line++, str, len, false);
    3a20:	2400      	movs	r4, #0
	len = snprintk(str, sizeof(str), "Device Name: %s", bt_get_name());
    3a22:	4603      	mov	r3, r0
	print_line(FONT_SMALL, line++, str, len, false);
    3a24:	aa06      	add	r2, sp, #24
    3a26:	4631      	mov	r1, r6
    3a28:	9400      	str	r4, [sp, #0]
    3a2a:	4620      	mov	r0, r4
    3a2c:	f7ff fee4 	bl	37f8 <print_line>
	bin2hex(get_uuid(), 4, uuid_hex_str, sizeof(uuid_hex_str));
    3a30:	f7ff fea2 	bl	3778 <get_uuid>
    3a34:	aa03      	add	r2, sp, #12
    3a36:	2309      	movs	r3, #9
    3a38:	2104      	movs	r1, #4
    3a3a:	f020 fc94 	bl	24366 <bin2hex>
	len = snprintk(str, sizeof(str), "Device UUID:  %s", uuid_hex_str);
    3a3e:	ab03      	add	r3, sp, #12
    3a40:	4a32      	ldr	r2, [pc, #200]	; (3b0c <show_main+0x128>)
    3a42:	2164      	movs	r1, #100	; 0x64
    3a44:	a806      	add	r0, sp, #24
    3a46:	f020 fd42 	bl	244ce <snprintk>
	print_line(FONT_SMALL, line++, str, len, false);
    3a4a:	aa06      	add	r2, sp, #24
	len = snprintk(str, sizeof(str), "Device UUID:  %s", uuid_hex_str);
    3a4c:	4603      	mov	r3, r0
	print_line(FONT_SMALL, line++, str, len, false);
    3a4e:	2102      	movs	r1, #2
    3a50:	9400      	str	r4, [sp, #0]
    3a52:	4620      	mov	r0, r4
    3a54:	f7ff fed0 	bl	37f8 <print_line>
	len = snprintk(str, sizeof(str), "Addr:0x%04x  Node Count:%u", get_my_addr(),stat_count + 1);
    3a58:	f7ff fe9a 	bl	3790 <get_my_addr>
    3a5c:	4a2c      	ldr	r2, [pc, #176]	; (3b10 <show_main+0x12c>)
    3a5e:	6812      	ldr	r2, [r2, #0]
    3a60:	4432      	add	r2, r6
    3a62:	4603      	mov	r3, r0
    3a64:	9200      	str	r2, [sp, #0]
    3a66:	2164      	movs	r1, #100	; 0x64
    3a68:	4a2a      	ldr	r2, [pc, #168]	; (3b14 <show_main+0x130>)
    3a6a:	a806      	add	r0, sp, #24
    3a6c:	f020 fd2f 	bl	244ce <snprintk>
	print_line(FONT_SMALL, line++, str, len, false);
    3a70:	aa06      	add	r2, sp, #24
	len = snprintk(str, sizeof(str), "Addr:0x%04x  Node Count:%u", get_my_addr(),stat_count + 1);
    3a72:	4603      	mov	r3, r0
	print_line(FONT_SMALL, line++, str, len, false);
    3a74:	2103      	movs	r1, #3
    3a76:	9400      	str	r4, [sp, #0]
    3a78:	4620      	mov	r0, r4
    3a7a:	f7ff febd 	bl	37f8 <print_line>
	bin2hex(get_net_key(), 8, net_key_str, sizeof(net_key_str));
    3a7e:	f7ff fe8d 	bl	379c <get_net_key>
    3a82:	aa1f      	add	r2, sp, #124	; 0x7c
    3a84:	2364      	movs	r3, #100	; 0x64
    3a86:	2108      	movs	r1, #8
    3a88:	f020 fc6d 	bl	24366 <bin2hex>
	len = snprintk(str, sizeof(str), "N/w key: %s", net_key_str);
    3a8c:	ab1f      	add	r3, sp, #124	; 0x7c
    3a8e:	4a22      	ldr	r2, [pc, #136]	; (3b18 <show_main+0x134>)
    3a90:	2164      	movs	r1, #100	; 0x64
    3a92:	a806      	add	r0, sp, #24
    3a94:	f020 fd1b 	bl	244ce <snprintk>
	print_line(FONT_SMALL, line++, str, len, false);
    3a98:	aa06      	add	r2, sp, #24
	len = snprintk(str, sizeof(str), "N/w key: %s", net_key_str);
    3a9a:	4603      	mov	r3, r0
	print_line(FONT_SMALL, line++, str, len, false);
    3a9c:	2104      	movs	r1, #4
    3a9e:	9400      	str	r4, [sp, #0]
    3aa0:	4620      	mov	r0, r4
    3aa2:	f7ff fea9 	bl	37f8 <print_line>
	bin2hex(get_app_key(), 8, app_key_str, sizeof(app_key_str));
    3aa6:	f7ff fe81 	bl	37ac <get_app_key>
    3aaa:	aa38      	add	r2, sp, #224	; 0xe0
    3aac:	2364      	movs	r3, #100	; 0x64
    3aae:	2108      	movs	r1, #8
    3ab0:	f020 fc59 	bl	24366 <bin2hex>
	len = snprintk(str, sizeof(str), "App key: %s", app_key_str);
    3ab4:	ab38      	add	r3, sp, #224	; 0xe0
    3ab6:	4a19      	ldr	r2, [pc, #100]	; (3b1c <show_main+0x138>)
    3ab8:	2164      	movs	r1, #100	; 0x64
    3aba:	a806      	add	r0, sp, #24
    3abc:	f020 fd07 	bl	244ce <snprintk>
	print_line(FONT_SMALL, line++, str, len, false);
    3ac0:	aa06      	add	r2, sp, #24
	len = snprintk(str, sizeof(str), "App key: %s", app_key_str);
    3ac2:	4603      	mov	r3, r0
	print_line(FONT_SMALL, line++, str, len, false);
    3ac4:	2105      	movs	r1, #5
    3ac6:	9400      	str	r4, [sp, #0]
    3ac8:	4620      	mov	r0, r4
    3aca:	f7ff fe95 	bl	37f8 <print_line>
	bin2hex(get_dev_key(), 8, dev_key_str, sizeof(dev_key_str));
    3ace:	f7ff fe69 	bl	37a4 <get_dev_key>
    3ad2:	aa51      	add	r2, sp, #324	; 0x144
    3ad4:	2364      	movs	r3, #100	; 0x64
    3ad6:	2108      	movs	r1, #8
    3ad8:	f020 fc45 	bl	24366 <bin2hex>
	len = snprintk(str, sizeof(str), "Dev key: %s", dev_key_str);
    3adc:	ab51      	add	r3, sp, #324	; 0x144
    3ade:	4a10      	ldr	r2, [pc, #64]	; (3b20 <show_main+0x13c>)
    3ae0:	2164      	movs	r1, #100	; 0x64
    3ae2:	a806      	add	r0, sp, #24
    3ae4:	f020 fcf3 	bl	244ce <snprintk>
	print_line(FONT_SMALL, line++, str, len, false);
    3ae8:	aa06      	add	r2, sp, #24
	len = snprintk(str, sizeof(str), "Dev key: %s", dev_key_str);
    3aea:	4603      	mov	r3, r0
	print_line(FONT_SMALL, line++, str, len, false);
    3aec:	2106      	movs	r1, #6
    3aee:	9400      	str	r4, [sp, #0]
    3af0:	4620      	mov	r0, r4
    3af2:	f7ff fe81 	bl	37f8 <print_line>
	cfb_framebuffer_finalize(epd_dev);
    3af6:	6828      	ldr	r0, [r5, #0]
    3af8:	f001 fea0 	bl	583c <cfb_framebuffer_finalize>
}
    3afc:	b06a      	add	sp, #424	; 0x1a8
    3afe:	bd70      	pop	{r4, r5, r6, pc}
    3b00:	200020a8 	.word	0x200020a8
    3b04:	0002f95c 	.word	0x0002f95c
    3b08:	0002f968 	.word	0x0002f968
    3b0c:	0002f978 	.word	0x0002f978
    3b10:	200020b4 	.word	0x200020b4
    3b14:	0002f989 	.word	0x0002f989
    3b18:	0002f9a4 	.word	0x0002f9a4
    3b1c:	0002f9b0 	.word	0x0002f9b0
    3b20:	0002f9bc 	.word	0x0002f9bc

00003b24 <epd_update>:
	switch (screen_id) {
    3b24:	4b02      	ldr	r3, [pc, #8]	; (3b30 <epd_update+0xc>)
    3b26:	781b      	ldrb	r3, [r3, #0]
    3b28:	b90b      	cbnz	r3, 3b2e <epd_update+0xa>
		show_main();
    3b2a:	f7ff bf5b 	b.w	39e4 <show_main>
}
    3b2e:	4770      	bx	lr
    3b30:	20009089 	.word	0x20009089

00003b34 <button_interrupt>:

static void button_interrupt(const struct device *dev, struct gpio_callback *cb,
			     uint32_t pins)
{
    3b34:	b510      	push	{r4, lr}
	if (button_is_pressed() == pressed) {
    3b36:	4c17      	ldr	r4, [pc, #92]	; (3b94 <button_interrupt+0x60>)
    3b38:	f7ff feae 	bl	3898 <button_is_pressed>
    3b3c:	7821      	ldrb	r1, [r4, #0]
    3b3e:	4288      	cmp	r0, r1
    3b40:	d027      	beq.n	3b92 <button_interrupt+0x5e>
		return;
	}

	pressed = !pressed;
	printk("Button %s\n", pressed ? "pressed" : "released");
    3b42:	4b15      	ldr	r3, [pc, #84]	; (3b98 <button_interrupt+0x64>)
    3b44:	4a15      	ldr	r2, [pc, #84]	; (3b9c <button_interrupt+0x68>)
    3b46:	4816      	ldr	r0, [pc, #88]	; (3ba0 <button_interrupt+0x6c>)
	pressed = !pressed;
    3b48:	f081 0101 	eor.w	r1, r1, #1
    3b4c:	7021      	strb	r1, [r4, #0]
	printk("Button %s\n", pressed ? "pressed" : "released");
    3b4e:	2900      	cmp	r1, #0
    3b50:	bf14      	ite	ne
    3b52:	4611      	movne	r1, r2
    3b54:	4619      	moveq	r1, r3
    3b56:	f020 fcad 	bl	244b4 <printk>

	if (pressed) {
    3b5a:	7823      	ldrb	r3, [r4, #0]
    3b5c:	b13b      	cbz	r3, 3b6e <button_interrupt+0x3a>
		show_main();
		return;
	default:
		return;
	}
}
    3b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit(&long_press_work, LONG_PRESS_TIMEOUT);
    3b62:	4810      	ldr	r0, [pc, #64]	; (3ba4 <button_interrupt+0x70>)
    3b64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3b68:	2300      	movs	r3, #0
    3b6a:	f7ff be23 	b.w	37b4 <k_delayed_work_submit>
	k_delayed_work_cancel(&long_press_work);
    3b6e:	480d      	ldr	r0, [pc, #52]	; (3ba4 <button_interrupt+0x70>)
    3b70:	f029 fd20 	bl	2d5b4 <k_delayed_work_cancel>
	if (!mesh_is_initialized()) {
    3b74:	f7ff fe04 	bl	3780 <mesh_is_initialized>
    3b78:	b920      	cbnz	r0, 3b84 <button_interrupt+0x50>
}
    3b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Mesh not initializedd");
    3b7e:	480a      	ldr	r0, [pc, #40]	; (3ba8 <button_interrupt+0x74>)
    3b80:	f020 bc98 	b.w	244b4 <printk>
	switch (screen_id) {
    3b84:	4b09      	ldr	r3, [pc, #36]	; (3bac <button_interrupt+0x78>)
    3b86:	781b      	ldrb	r3, [r3, #0]
    3b88:	b91b      	cbnz	r3, 3b92 <button_interrupt+0x5e>
}
    3b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		show_main();
    3b8e:	f7ff bf29 	b.w	39e4 <show_main>
}
    3b92:	bd10      	pop	{r4, pc}
    3b94:	20009088 	.word	0x20009088
    3b98:	0002f9d0 	.word	0x0002f9d0
    3b9c:	0002f9c8 	.word	0x0002f9c8
    3ba0:	0002f9d9 	.word	0x0002f9d9
    3ba4:	20001000 	.word	0x20001000
    3ba8:	0002f9e4 	.word	0x0002f9e4
    3bac:	20009089 	.word	0x20009089

00003bb0 <set_led_state>:

	return 0;
}

int set_led_state(uint8_t id, bool state)
{
    3bb0:	b410      	push	{r4}
    3bb2:	460a      	mov	r2, r1
	return gpio_pin_set(leds[id].dev, leds[id].pin, state);
    3bb4:	490b      	ldr	r1, [pc, #44]	; (3be4 <set_led_state+0x34>)
    3bb6:	0104      	lsls	r4, r0, #4
    3bb8:	eb01 1300 	add.w	r3, r1, r0, lsl #4
    3bbc:	5908      	ldr	r0, [r1, r4]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    3bbe:	7a19      	ldrb	r1, [r3, #8]
    3bc0:	2301      	movs	r3, #1
    3bc2:	fa03 f101 	lsl.w	r1, r3, r1
    3bc6:	68c3      	ldr	r3, [r0, #12]
    3bc8:	681b      	ldr	r3, [r3, #0]
    3bca:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    3bcc:	bf18      	it	ne
    3bce:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    3bd2:	b11a      	cbz	r2, 3bdc <set_led_state+0x2c>
	return api->port_set_bits_raw(port, pins);
    3bd4:	6883      	ldr	r3, [r0, #8]
    3bd6:	68db      	ldr	r3, [r3, #12]
}
    3bd8:	bc10      	pop	{r4}
	return api->port_clear_bits_raw(port, pins);
    3bda:	4718      	bx	r3
    3bdc:	6883      	ldr	r3, [r0, #8]
    3bde:	691b      	ldr	r3, [r3, #16]
    3be0:	e7fa      	b.n	3bd8 <set_led_state+0x28>
    3be2:	bf00      	nop
    3be4:	20000304 	.word	0x20000304

00003be8 <led_timeout>:
	static int led_cntr;
	int i;

	/* Disable all LEDs */
	for (i = 0; i < ARRAY_SIZE(leds); i++) {
		set_led_state(i, 0);
    3be8:	2100      	movs	r1, #0
{
    3bea:	b510      	push	{r4, lr}
		set_led_state(i, 0);
    3bec:	4608      	mov	r0, r1
    3bee:	f7ff ffdf 	bl	3bb0 <set_led_state>
    3bf2:	2100      	movs	r1, #0
    3bf4:	2001      	movs	r0, #1
    3bf6:	f7ff ffdb 	bl	3bb0 <set_led_state>
    3bfa:	2100      	movs	r1, #0
    3bfc:	2002      	movs	r0, #2
    3bfe:	f7ff ffd7 	bl	3bb0 <set_led_state>
	}

	/* Stop after 5 iterations */
	if (led_cntr >= (ARRAY_SIZE(leds) * 5)) {
    3c02:	4b0d      	ldr	r3, [pc, #52]	; (3c38 <led_timeout+0x50>)
    3c04:	6818      	ldr	r0, [r3, #0]
    3c06:	280e      	cmp	r0, #14
    3c08:	dd02      	ble.n	3c10 <led_timeout+0x28>
		led_cntr = 0;
    3c0a:	2200      	movs	r2, #0
    3c0c:	601a      	str	r2, [r3, #0]
	/* Select and enable current LED */
	i = led_cntr++ % ARRAY_SIZE(leds);
	set_led_state(i, 1);

	k_delayed_work_submit(&led_timer, K_MSEC(100));
}
    3c0e:	bd10      	pop	{r4, pc}
	i = led_cntr++ % ARRAY_SIZE(leds);
    3c10:	1c42      	adds	r2, r0, #1
    3c12:	601a      	str	r2, [r3, #0]
    3c14:	2303      	movs	r3, #3
    3c16:	fb90 f3f3 	sdiv	r3, r0, r3
    3c1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3c1e:	1ac0      	subs	r0, r0, r3
	set_led_state(i, 1);
    3c20:	2101      	movs	r1, #1
    3c22:	b2c0      	uxtb	r0, r0
    3c24:	f7ff ffc4 	bl	3bb0 <set_led_state>
}
    3c28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_submit(&led_timer, K_MSEC(100));
    3c2c:	4803      	ldr	r0, [pc, #12]	; (3c3c <led_timeout+0x54>)
    3c2e:	f640 42cd 	movw	r2, #3277	; 0xccd
    3c32:	2300      	movs	r3, #0
    3c34:	f7ff bdbe 	b.w	37b4 <k_delayed_work_submit>
    3c38:	200020b0 	.word	0x200020b0
    3c3c:	20000fd0 	.word	0x20000fd0

00003c40 <board_refresh_display>:
			   FLASH_AREA_SIZE(storage));
}

void board_refresh_display(void)
{
	k_delayed_work_submit(&epd_work, K_NO_WAIT);
    3c40:	4802      	ldr	r0, [pc, #8]	; (3c4c <board_refresh_display+0xc>)
    3c42:	2200      	movs	r2, #0
    3c44:	2300      	movs	r3, #0
    3c46:	f7ff bdb5 	b.w	37b4 <k_delayed_work_submit>
    3c4a:	bf00      	nop
    3c4c:	20000fa0 	.word	0x20000fa0

00003c50 <long_press>:
{
    3c50:	b508      	push	{r3, lr}
	pressed = false;
    3c52:	4b06      	ldr	r3, [pc, #24]	; (3c6c <long_press+0x1c>)
	printk("Change screen to id = %d\n", screen_id);
    3c54:	4806      	ldr	r0, [pc, #24]	; (3c70 <long_press+0x20>)
	pressed = false;
    3c56:	2100      	movs	r1, #0
    3c58:	7019      	strb	r1, [r3, #0]
	screen_id = (screen_id + 1) % SCREEN_LAST;
    3c5a:	4b06      	ldr	r3, [pc, #24]	; (3c74 <long_press+0x24>)
    3c5c:	7019      	strb	r1, [r3, #0]
	printk("Change screen to id = %d\n", screen_id);
    3c5e:	f020 fc29 	bl	244b4 <printk>
}
    3c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	board_refresh_display();
    3c66:	f7ff bfeb 	b.w	3c40 <board_refresh_display>
    3c6a:	bf00      	nop
    3c6c:	20009088 	.word	0x20009088
    3c70:	0002f9fa 	.word	0x0002f9fa
    3c74:	20009089 	.word	0x20009089

00003c78 <board_init>:
}

int board_init(void)
{
    3c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    3c7a:	483d      	ldr	r0, [pc, #244]	; (3d70 <board_init+0xf8>)
	epd_dev = device_get_binding(DT_LABEL(DT_INST(0, solomon_ssd16xxfb)));
    3c7c:	4d3d      	ldr	r5, [pc, #244]	; (3d74 <board_init+0xfc>)
    3c7e:	f01f f8df 	bl	22e40 <z_impl_device_get_binding>
    3c82:	6028      	str	r0, [r5, #0]
	if (epd_dev == NULL) {
    3c84:	b930      	cbnz	r0, 3c94 <board_init+0x1c>
		printk("SSD16XX device not found\n");
    3c86:	483c      	ldr	r0, [pc, #240]	; (3d78 <board_init+0x100>)
    3c88:	f020 fc14 	bl	244b4 <printk>
		return -ENODEV;
    3c8c:	f06f 0412 	mvn.w	r4, #18
		printk("Erasing storage\n");
		board_show_text("Resetting Device", false, K_SECONDS(4));
		erase_storage();
	}
	return 0;
}
    3c90:	4620      	mov	r0, r4
    3c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (cfb_framebuffer_init(epd_dev)) {
    3c94:	f001 fe56 	bl	5944 <cfb_framebuffer_init>
    3c98:	4604      	mov	r4, r0
    3c9a:	b128      	cbz	r0, 3ca8 <board_init+0x30>
		printk("Framebuffer initialization failed\n");
    3c9c:	4837      	ldr	r0, [pc, #220]	; (3d7c <board_init+0x104>)
		printk("Failed to configure button\n");
    3c9e:	f020 fc09 	bl	244b4 <printk>
		return -EIO;
    3ca2:	f06f 0404 	mvn.w	r4, #4
    3ca6:	e7f3      	b.n	3c90 <board_init+0x18>
	cfb_framebuffer_clear(epd_dev, true);
    3ca8:	6828      	ldr	r0, [r5, #0]
    3caa:	2101      	movs	r1, #1
    3cac:	f001 fdb6 	bl	581c <cfb_framebuffer_clear>
    3cb0:	4833      	ldr	r0, [pc, #204]	; (3d80 <board_init+0x108>)
	gpio = device_get_binding(DT_GPIO_LABEL(DT_ALIAS(sw0), gpios));
    3cb2:	4d34      	ldr	r5, [pc, #208]	; (3d84 <board_init+0x10c>)
    3cb4:	f01f f8c4 	bl	22e40 <z_impl_device_get_binding>
    3cb8:	6028      	str	r0, [r5, #0]
	if (!gpio) {
    3cba:	b908      	cbnz	r0, 3cc0 <board_init+0x48>
		printk("Failed to configure button\n");
    3cbc:	4832      	ldr	r0, [pc, #200]	; (3d88 <board_init+0x110>)
    3cbe:	e7ee      	b.n	3c9e <board_init+0x26>
	gpio_pin_configure(gpio, DT_GPIO_PIN(DT_ALIAS(sw0), gpios),
    3cc0:	f240 1211 	movw	r2, #273	; 0x111
    3cc4:	2107      	movs	r1, #7
    3cc6:	f020 facb 	bl	24260 <gpio_pin_configure>
	gpio_pin_interrupt_configure(gpio, DT_GPIO_PIN(DT_ALIAS(sw0), gpios),
    3cca:	6828      	ldr	r0, [r5, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    3ccc:	2107      	movs	r1, #7
    3cce:	f44f 22e8 	mov.w	r2, #475136	; 0x74000
    3cd2:	f020 fab1 	bl	24238 <z_impl_gpio_pin_interrupt_configure>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    3cd6:	492d      	ldr	r1, [pc, #180]	; (3d8c <board_init+0x114>)
    3cd8:	4b2d      	ldr	r3, [pc, #180]	; (3d90 <board_init+0x118>)
	gpio_add_callback(gpio, &button_cb);
    3cda:	6828      	ldr	r0, [r5, #0]
    3cdc:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    3cde:	2380      	movs	r3, #128	; 0x80
    3ce0:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    3ce2:	6883      	ldr	r3, [r0, #8]
    3ce4:	69db      	ldr	r3, [r3, #28]
    3ce6:	b10b      	cbz	r3, 3cec <board_init+0x74>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    3ce8:	2201      	movs	r2, #1
    3cea:	4798      	blx	r3
    3cec:	4d29      	ldr	r5, [pc, #164]	; (3d94 <board_init+0x11c>)
{
    3cee:	2600      	movs	r6, #0
    3cf0:	462f      	mov	r7, r5
		leds[i].dev = device_get_binding(leds[i].name);
    3cf2:	6868      	ldr	r0, [r5, #4]
    3cf4:	f01f f8a4 	bl	22e40 <z_impl_device_get_binding>
    3cf8:	6028      	str	r0, [r5, #0]
		if (!leds[i].dev) {
    3cfa:	b938      	cbnz	r0, 3d0c <board_init+0x94>
			printk("Failed to get %s device\n", leds[i].name);
    3cfc:	eb07 1606 	add.w	r6, r7, r6, lsl #4
    3d00:	4825      	ldr	r0, [pc, #148]	; (3d98 <board_init+0x120>)
    3d02:	6871      	ldr	r1, [r6, #4]
    3d04:	f020 fbd6 	bl	244b4 <printk>
		printk("LED init failed\n");
    3d08:	4824      	ldr	r0, [pc, #144]	; (3d9c <board_init+0x124>)
    3d0a:	e7c8      	b.n	3c9e <board_init+0x26>
		gpio_pin_configure(leds[i].dev, leds[i].pin,
    3d0c:	68ea      	ldr	r2, [r5, #12]
    3d0e:	7a29      	ldrb	r1, [r5, #8]
    3d10:	f442 52b0 	orr.w	r2, r2, #5632	; 0x1600
	for (i = 0; i < ARRAY_SIZE(leds); i++) {
    3d14:	3601      	adds	r6, #1
		gpio_pin_configure(leds[i].dev, leds[i].pin,
    3d16:	f020 faa3 	bl	24260 <gpio_pin_configure>
	for (i = 0; i < ARRAY_SIZE(leds); i++) {
    3d1a:	2e03      	cmp	r6, #3
    3d1c:	f105 0510 	add.w	r5, r5, #16
    3d20:	d1e7      	bne.n	3cf2 <board_init+0x7a>
	k_delayed_work_init(&led_timer, led_timeout);
    3d22:	491f      	ldr	r1, [pc, #124]	; (3da0 <board_init+0x128>)
    3d24:	481f      	ldr	r0, [pc, #124]	; (3da4 <board_init+0x12c>)
    3d26:	f029 fc3d 	bl	2d5a4 <k_delayed_work_init>
	k_delayed_work_init(&epd_work, epd_update);
    3d2a:	491f      	ldr	r1, [pc, #124]	; (3da8 <board_init+0x130>)
    3d2c:	481f      	ldr	r0, [pc, #124]	; (3dac <board_init+0x134>)
    3d2e:	f029 fc39 	bl	2d5a4 <k_delayed_work_init>
	k_delayed_work_init(&long_press_work, long_press);
    3d32:	491f      	ldr	r1, [pc, #124]	; (3db0 <board_init+0x138>)
    3d34:	481f      	ldr	r0, [pc, #124]	; (3db4 <board_init+0x13c>)
    3d36:	f029 fc35 	bl	2d5a4 <k_delayed_work_init>
	pressed = button_is_pressed();
    3d3a:	f7ff fdad 	bl	3898 <button_is_pressed>
    3d3e:	4b1e      	ldr	r3, [pc, #120]	; (3db8 <board_init+0x140>)
    3d40:	7018      	strb	r0, [r3, #0]
	if (pressed) {
    3d42:	2800      	cmp	r0, #0
    3d44:	d0a4      	beq.n	3c90 <board_init+0x18>
		printk("Erasing storage\n");
    3d46:	481d      	ldr	r0, [pc, #116]	; (3dbc <board_init+0x144>)
    3d48:	f020 fbb4 	bl	244b4 <printk>
		board_show_text("Resetting Device", false, K_SECONDS(4));
    3d4c:	481c      	ldr	r0, [pc, #112]	; (3dc0 <board_init+0x148>)
    3d4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3d52:	2300      	movs	r3, #0
    3d54:	2100      	movs	r1, #0
    3d56:	f7ff fdbd 	bl	38d4 <board_show_text>
    3d5a:	481a      	ldr	r0, [pc, #104]	; (3dc4 <board_init+0x14c>)
    3d5c:	f01f f870 	bl	22e40 <z_impl_device_get_binding>
				     size_t size)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->erase(dev, offset, size);
    3d60:	6883      	ldr	r3, [r0, #8]
    3d62:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3d66:	689b      	ldr	r3, [r3, #8]
    3d68:	f44f 2178 	mov.w	r1, #1015808	; 0xf8000
    3d6c:	4798      	blx	r3
    3d6e:	e78f      	b.n	3c90 <board_init+0x18>
    3d70:	0002fa14 	.word	0x0002fa14
    3d74:	200020a8 	.word	0x200020a8
    3d78:	0002fa1c 	.word	0x0002fa1c
    3d7c:	0002fa36 	.word	0x0002fa36
    3d80:	0002fa59 	.word	0x0002fa59
    3d84:	200020ac 	.word	0x200020ac
    3d88:	0002fa60 	.word	0x0002fa60
    3d8c:	2000209c 	.word	0x2000209c
    3d90:	00003b35 	.word	0x00003b35
    3d94:	20000304 	.word	0x20000304
    3d98:	0002fa7c 	.word	0x0002fa7c
    3d9c:	0002fa95 	.word	0x0002fa95
    3da0:	00003be9 	.word	0x00003be9
    3da4:	20000fd0 	.word	0x20000fd0
    3da8:	00003b25 	.word	0x00003b25
    3dac:	20000fa0 	.word	0x20000fa0
    3db0:	00003c51 	.word	0x00003c51
    3db4:	20001000 	.word	0x20001000
    3db8:	20009088 	.word	0x20009088
    3dbc:	0002faa6 	.word	0x0002faa6
    3dc0:	0002fab7 	.word	0x0002fab7
    3dc4:	0002fac8 	.word	0x0002fac8

00003dc8 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    3dc8:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3dca:	4c0a      	ldr	r4, [pc, #40]	; (3df4 <crc8_ccitt+0x2c>)
    3dcc:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    3dce:	4291      	cmp	r1, r2
    3dd0:	d100      	bne.n	3dd4 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    3dd2:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    3dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
    3dd8:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3dda:	0903      	lsrs	r3, r0, #4
    3ddc:	5ce3      	ldrb	r3, [r4, r3]
    3dde:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    3de2:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3de4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3de8:	5ce0      	ldrb	r0, [r4, r3]
    3dea:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    3dee:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    3df0:	e7ed      	b.n	3dce <crc8_ccitt+0x6>
    3df2:	bf00      	nop
    3df4:	0002fae2 	.word	0x0002fae2

00003df8 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, unsigned int base,
			 bool pad_before, char pad_char, int min_width)
{
    3df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3dfc:	b087      	sub	sp, #28
	char buf[DIGITS_BUFLEN];
	unsigned int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    3dfe:	4c21      	ldr	r4, [pc, #132]	; (3e84 <print_digits+0x8c>)
{
    3e00:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
    3e04:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    3e08:	4606      	mov	r6, r0
    3e0a:	460f      	mov	r7, r1
    3e0c:	4610      	mov	r0, r2
    3e0e:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
    3e10:	2514      	movs	r5, #20
    3e12:	ea50 0301 	orrs.w	r3, r0, r1
    3e16:	d117      	bne.n	3e48 <print_digits+0x50>
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
    3e18:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (i == DIGITS_BUFLEN - 1U) {
    3e1a:	2d14      	cmp	r5, #20
		i++;
    3e1c:	bf18      	it	ne
    3e1e:	3501      	addne	r5, #1
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
    3e20:	f1a4 0415 	sub.w	r4, r4, #21
		buf[i] = '0';
    3e24:	bf08      	it	eq
    3e26:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
    3e28:	442c      	add	r4, r5
		buf[i] = '0';
    3e2a:	bf08      	it	eq
    3e2c:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
    3e30:	ea24 74e4 	bic.w	r4, r4, r4, asr #31

	for (/**/; pad > 0 && pad_before; pad--) {
    3e34:	b114      	cbz	r4, 3e3c <print_digits+0x44>
    3e36:	f1b9 0f00 	cmp.w	r9, #0
    3e3a:	d112      	bne.n	3e62 <print_digits+0x6a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
    3e3c:	2d14      	cmp	r5, #20
    3e3e:	d915      	bls.n	3e6c <print_digits+0x74>
		out(buf[i], ctx);
	}
	for (/**/; pad > 0; pad--) {
    3e40:	b9d4      	cbnz	r4, 3e78 <print_digits+0x80>
		out(pad_char, ctx);
	}
}
    3e42:	b007      	add	sp, #28
    3e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[i] = "0123456789abcdef"[num % base];
    3e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3e4a:	2300      	movs	r3, #0
    3e4c:	f7fc f9a8 	bl	1a0 <__aeabi_uldivmod>
    3e50:	5ca2      	ldrb	r2, [r4, r2]
    3e52:	f80d 2005 	strb.w	r2, [sp, r5]
    3e56:	4684      	mov	ip, r0
    3e58:	460b      	mov	r3, r1
		num /= base;
    3e5a:	4660      	mov	r0, ip
    3e5c:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
    3e5e:	3d01      	subs	r5, #1
    3e60:	e7d7      	b.n	3e12 <print_digits+0x1a>
		out(pad_char, ctx);
    3e62:	4639      	mov	r1, r7
    3e64:	4640      	mov	r0, r8
    3e66:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    3e68:	3c01      	subs	r4, #1
    3e6a:	e7e3      	b.n	3e34 <print_digits+0x3c>
		out(buf[i], ctx);
    3e6c:	f81d 0005 	ldrb.w	r0, [sp, r5]
    3e70:	4639      	mov	r1, r7
    3e72:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    3e74:	3501      	adds	r5, #1
    3e76:	e7e1      	b.n	3e3c <print_digits+0x44>
		out(pad_char, ctx);
    3e78:	4639      	mov	r1, r7
    3e7a:	4640      	mov	r0, r8
    3e7c:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    3e7e:	3c01      	subs	r4, #1
    3e80:	e7de      	b.n	3e40 <print_digits+0x48>
    3e82:	bf00      	nop
    3e84:	0002faf2 	.word	0x0002faf2

00003e88 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3e88:	680b      	ldr	r3, [r1, #0]
    3e8a:	3301      	adds	r3, #1
    3e8c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3e8e:	4b01      	ldr	r3, [pc, #4]	; (3e94 <char_out+0xc>)
    3e90:	681b      	ldr	r3, [r3, #0]
    3e92:	4718      	bx	r3
    3e94:	20000334 	.word	0x20000334

00003e98 <__printk_hook_install>:
	_char_out = fn;
    3e98:	4b01      	ldr	r3, [pc, #4]	; (3ea0 <__printk_hook_install+0x8>)
    3e9a:	6018      	str	r0, [r3, #0]
}
    3e9c:	4770      	bx	lr
    3e9e:	bf00      	nop
    3ea0:	20000334 	.word	0x20000334

00003ea4 <z_vprintk>:
{
    3ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    3ea8:	2600      	movs	r6, #0
{
    3eaa:	b087      	sub	sp, #28
    3eac:	4605      	mov	r5, r0
    3eae:	468b      	mov	fp, r1
    3eb0:	461c      	mov	r4, r3
	while (*fmt) {
    3eb2:	f102 3aff 	add.w	sl, r2, #4294967295
	int min_width = -1;
    3eb6:	f04f 38ff 	mov.w	r8, #4294967295
	enum pad_type padding = PAD_NONE;
    3eba:	4637      	mov	r7, r6
			might_format = 0;
    3ebc:	f04f 0900 	mov.w	r9, #0
					break;
    3ec0:	e007      	b.n	3ed2 <z_vprintk+0x2e>
		if (!might_format) {
    3ec2:	f1b9 0f00 	cmp.w	r9, #0
    3ec6:	d10b      	bne.n	3ee0 <z_vprintk+0x3c>
			if (*fmt != '%') {
    3ec8:	2825      	cmp	r0, #37	; 0x25
    3eca:	f000 810a 	beq.w	40e2 <CONFIG_HEAP_MEM_POOL_SIZE+0xe2>
				out((int)*fmt, ctx);
    3ece:	4659      	mov	r1, fp
    3ed0:	47a8      	blx	r5
	while (*fmt) {
    3ed2:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    3ed6:	2800      	cmp	r0, #0
    3ed8:	d1f3      	bne.n	3ec2 <z_vprintk+0x1e>
}
    3eda:	b007      	add	sp, #28
    3edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    3ee0:	287a      	cmp	r0, #122	; 0x7a
    3ee2:	d80a      	bhi.n	3efa <z_vprintk+0x56>
    3ee4:	2862      	cmp	r0, #98	; 0x62
    3ee6:	d810      	bhi.n	3f0a <z_vprintk+0x66>
    3ee8:	2830      	cmp	r0, #48	; 0x30
    3eea:	d051      	beq.n	3f90 <z_vprintk+0xec>
    3eec:	d844      	bhi.n	3f78 <z_vprintk+0xd4>
    3eee:	2825      	cmp	r0, #37	; 0x25
    3ef0:	f000 80f5 	beq.w	40de <CONFIG_HEAP_MEM_POOL_SIZE+0xde>
    3ef4:	282d      	cmp	r0, #45	; 0x2d
    3ef6:	f000 80fb 	beq.w	40f0 <CONFIG_HEAP_MEM_POOL_SIZE+0xf0>
					out((int)'%', ctx);
    3efa:	4659      	mov	r1, fp
    3efc:	2025      	movs	r0, #37	; 0x25
    3efe:	47a8      	blx	r5
					out((int)*fmt, ctx);
    3f00:	f89a 0000 	ldrb.w	r0, [sl]
    3f04:	4659      	mov	r1, fp
    3f06:	47a8      	blx	r5
    3f08:	e7d8      	b.n	3ebc <z_vprintk+0x18>
    3f0a:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    3f0e:	2b17      	cmp	r3, #23
    3f10:	d8f3      	bhi.n	3efa <z_vprintk+0x56>
    3f12:	a201      	add	r2, pc, #4	; (adr r2, 3f18 <z_vprintk+0x74>)
    3f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3f18:	000040d7 	.word	0x000040d7
    3f1c:	00003fd9 	.word	0x00003fd9
    3f20:	00003efb 	.word	0x00003efb
    3f24:	00003efb 	.word	0x00003efb
    3f28:	00003efb 	.word	0x00003efb
    3f2c:	00003fbb 	.word	0x00003fbb
    3f30:	00003fd9 	.word	0x00003fd9
    3f34:	00003efb 	.word	0x00003efb
    3f38:	00003efb 	.word	0x00003efb
    3f3c:	00003fbb 	.word	0x00003fbb
    3f40:	00003efb 	.word	0x00003efb
    3f44:	00003efb 	.word	0x00003efb
    3f48:	00003efb 	.word	0x00003efb
    3f4c:	00004053 	.word	0x00004053
    3f50:	00003efb 	.word	0x00003efb
    3f54:	00003efb 	.word	0x00003efb
    3f58:	0000409f 	.word	0x0000409f
    3f5c:	00003efb 	.word	0x00003efb
    3f60:	00003fd9 	.word	0x00003fd9
    3f64:	00003efb 	.word	0x00003efb
    3f68:	00003efb 	.word	0x00003efb
    3f6c:	00003f81 	.word	0x00003f81
    3f70:	00003efb 	.word	0x00003efb
    3f74:	00003fbb 	.word	0x00003fbb
			switch (*fmt) {
    3f78:	2839      	cmp	r0, #57	; 0x39
    3f7a:	d915      	bls.n	3fa8 <z_vprintk+0x104>
    3f7c:	2858      	cmp	r0, #88	; 0x58
    3f7e:	d1bc      	bne.n	3efa <z_vprintk+0x56>
				if (*fmt == 'p') {
    3f80:	f89a 3000 	ldrb.w	r3, [sl]
    3f84:	2b70      	cmp	r3, #112	; 0x70
    3f86:	d16e      	bne.n	4066 <CONFIG_HEAP_MEM_POOL_SIZE+0x66>
					x = va_arg(ap, unsigned int);
    3f88:	f854 2b04 	ldr.w	r2, [r4], #4
    3f8c:	2300      	movs	r3, #0
    3f8e:	e075      	b.n	407c <CONFIG_HEAP_MEM_POOL_SIZE+0x7c>
				if (min_width < 0 && padding == PAD_NONE) {
    3f90:	f1b8 0f00 	cmp.w	r8, #0
    3f94:	da0b      	bge.n	3fae <z_vprintk+0x10a>
    3f96:	2f00      	cmp	r7, #0
    3f98:	f000 80ac 	beq.w	40f4 <CONFIG_HEAP_MEM_POOL_SIZE+0xf4>
					min_width = *fmt - '0';
    3f9c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    3fa0:	2f00      	cmp	r7, #0
    3fa2:	bf08      	it	eq
    3fa4:	2702      	moveq	r7, #2
    3fa6:	e794      	b.n	3ed2 <z_vprintk+0x2e>
				if (min_width < 0) {
    3fa8:	f1b8 0f00 	cmp.w	r8, #0
    3fac:	dbf6      	blt.n	3f9c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    3fae:	230a      	movs	r3, #10
    3fb0:	fb03 0808 	mla	r8, r3, r8, r0
    3fb4:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    3fb8:	e7f2      	b.n	3fa0 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    3fba:	2868      	cmp	r0, #104	; 0x68
    3fbc:	d103      	bne.n	3fc6 <z_vprintk+0x122>
    3fbe:	2e68      	cmp	r6, #104	; 0x68
    3fc0:	d106      	bne.n	3fd0 <z_vprintk+0x12c>
					length_mod = 'H';
    3fc2:	2648      	movs	r6, #72	; 0x48
    3fc4:	e785      	b.n	3ed2 <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    3fc6:	286c      	cmp	r0, #108	; 0x6c
    3fc8:	d102      	bne.n	3fd0 <z_vprintk+0x12c>
    3fca:	2e6c      	cmp	r6, #108	; 0x6c
    3fcc:	f000 8094 	beq.w	40f8 <CONFIG_HEAP_MEM_POOL_SIZE+0xf8>
				} else if (length_mod == 0) {
    3fd0:	2e00      	cmp	r6, #0
    3fd2:	d192      	bne.n	3efa <z_vprintk+0x56>
    3fd4:	4606      	mov	r6, r0
    3fd6:	e77c      	b.n	3ed2 <z_vprintk+0x2e>
				if (length_mod == 'z') {
    3fd8:	2e7a      	cmp	r6, #122	; 0x7a
    3fda:	d106      	bne.n	3fea <z_vprintk+0x146>
					d = va_arg(ap, long);
    3fdc:	46a1      	mov	r9, r4
    3fde:	f859 2b04 	ldr.w	r2, [r9], #4
    3fe2:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    3fe4:	2875      	cmp	r0, #117	; 0x75
    3fe6:	d123      	bne.n	4030 <CONFIG_HEAP_MEM_POOL_SIZE+0x30>
    3fe8:	e00f      	b.n	400a <CONFIG_HEAP_MEM_POOL_SIZE+0xa>
				} else if (length_mod == 'l') {
    3fea:	2e6c      	cmp	r6, #108	; 0x6c
    3fec:	d0f6      	beq.n	3fdc <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    3fee:	2e4c      	cmp	r6, #76	; 0x4c
    3ff0:	d105      	bne.n	3ffe <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
    3ff2:	3407      	adds	r4, #7
    3ff4:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
    3ff8:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    3ffc:	e7f2      	b.n	3fe4 <z_vprintk+0x140>
				} else if (*fmt == 'u') {
    3ffe:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
    4000:	6822      	ldr	r2, [r4, #0]
    4002:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
    4006:	d112      	bne.n	402e <CONFIG_HEAP_MEM_POOL_SIZE+0x2e>
					d = va_arg(ap, unsigned int);
    4008:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10U, padding != PAD_SPACE_AFTER,
    400a:	1ef8      	subs	r0, r7, #3
    400c:	bf18      	it	ne
    400e:	2001      	movne	r0, #1
    4010:	2f01      	cmp	r7, #1
    4012:	bf0c      	ite	eq
    4014:	2430      	moveq	r4, #48	; 0x30
    4016:	2420      	movne	r4, #32
    4018:	9001      	str	r0, [sp, #4]
    401a:	200a      	movs	r0, #10
    401c:	e9cd 4802 	strd	r4, r8, [sp, #8]
    4020:	9000      	str	r0, [sp, #0]
    4022:	4659      	mov	r1, fp
    4024:	4628      	mov	r0, r5
    4026:	f7ff fee7 	bl	3df8 <print_digits>
}
    402a:	464c      	mov	r4, r9
    402c:	e746      	b.n	3ebc <z_vprintk+0x18>
					d = va_arg(ap, int);
    402e:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    4030:	2a00      	cmp	r2, #0
    4032:	f173 0100 	sbcs.w	r1, r3, #0
    4036:	dae8      	bge.n	400a <CONFIG_HEAP_MEM_POOL_SIZE+0xa>
					out((int)'-', ctx);
    4038:	4659      	mov	r1, fp
    403a:	202d      	movs	r0, #45	; 0x2d
    403c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4040:	47a8      	blx	r5
					d = -d;
    4042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4046:	4252      	negs	r2, r2
    4048:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    404c:	f108 38ff 	add.w	r8, r8, #4294967295
    4050:	e7db      	b.n	400a <CONFIG_HEAP_MEM_POOL_SIZE+0xa>
				out('0', ctx);
    4052:	4659      	mov	r1, fp
    4054:	2030      	movs	r0, #48	; 0x30
    4056:	47a8      	blx	r5
				out('x', ctx);
    4058:	4659      	mov	r1, fp
    405a:	2078      	movs	r0, #120	; 0x78
    405c:	47a8      	blx	r5
				min_width = sizeof(void *) * 2U;
    405e:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    4062:	2701      	movs	r7, #1
    4064:	e78c      	b.n	3f80 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    4066:	2e6c      	cmp	r6, #108	; 0x6c
    4068:	d08e      	beq.n	3f88 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    406a:	2e4c      	cmp	r6, #76	; 0x4c
    406c:	d18c      	bne.n	3f88 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    406e:	1de3      	adds	r3, r4, #7
    4070:	f023 0307 	bic.w	r3, r3, #7
    4074:	461c      	mov	r4, r3
    4076:	685b      	ldr	r3, [r3, #4]
    4078:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16U, padding != PAD_SPACE_AFTER,
    407c:	1ef8      	subs	r0, r7, #3
    407e:	bf18      	it	ne
    4080:	2001      	movne	r0, #1
    4082:	2f01      	cmp	r7, #1
    4084:	bf0c      	ite	eq
    4086:	2130      	moveq	r1, #48	; 0x30
    4088:	2120      	movne	r1, #32
    408a:	e9cd 1802 	strd	r1, r8, [sp, #8]
    408e:	2110      	movs	r1, #16
    4090:	9001      	str	r0, [sp, #4]
    4092:	9100      	str	r1, [sp, #0]
    4094:	4628      	mov	r0, r5
    4096:	4659      	mov	r1, fp
    4098:	f7ff feae 	bl	3df8 <print_digits>
    409c:	e70e      	b.n	3ebc <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
    409e:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
    40a2:	4699      	mov	r9, r3
    40a4:	464a      	mov	r2, r9
    40a6:	f819 0b01 	ldrb.w	r0, [r9], #1
    40aa:	b978      	cbnz	r0, 40cc <CONFIG_HEAP_MEM_POOL_SIZE+0xcc>
				if (padding == PAD_SPACE_AFTER) {
    40ac:	2f03      	cmp	r7, #3
    40ae:	d125      	bne.n	40fc <CONFIG_HEAP_MEM_POOL_SIZE+0xfc>
					int remaining = min_width - (s - start);
    40b0:	eba2 0903 	sub.w	r9, r2, r3
    40b4:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
    40b8:	f1b9 0f00 	cmp.w	r9, #0
    40bc:	f77f aefe 	ble.w	3ebc <z_vprintk+0x18>
						out(' ', ctx);
    40c0:	4659      	mov	r1, fp
    40c2:	2020      	movs	r0, #32
    40c4:	47a8      	blx	r5
    40c6:	f109 39ff 	add.w	r9, r9, #4294967295
    40ca:	e7f5      	b.n	40b8 <CONFIG_HEAP_MEM_POOL_SIZE+0xb8>
					out((int)(*s++), ctx);
    40cc:	4659      	mov	r1, fp
    40ce:	9304      	str	r3, [sp, #16]
    40d0:	47a8      	blx	r5
    40d2:	9b04      	ldr	r3, [sp, #16]
    40d4:	e7e6      	b.n	40a4 <CONFIG_HEAP_MEM_POOL_SIZE+0xa4>
				out(c, ctx);
    40d6:	f854 0b04 	ldr.w	r0, [r4], #4
    40da:	4659      	mov	r1, fp
    40dc:	e713      	b.n	3f06 <z_vprintk+0x62>
				out((int)'%', ctx);
    40de:	4659      	mov	r1, fp
    40e0:	e711      	b.n	3f06 <z_vprintk+0x62>
				length_mod = 0;
    40e2:	464e      	mov	r6, r9
				padding = PAD_NONE;
    40e4:	464f      	mov	r7, r9
				min_width = -1;
    40e6:	f04f 38ff 	mov.w	r8, #4294967295
				might_format = 1;
    40ea:	f04f 0901 	mov.w	r9, #1
    40ee:	e6f0      	b.n	3ed2 <z_vprintk+0x2e>
			switch (*fmt) {
    40f0:	2703      	movs	r7, #3
    40f2:	e6ee      	b.n	3ed2 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
    40f4:	2701      	movs	r7, #1
    40f6:	e6ec      	b.n	3ed2 <z_vprintk+0x2e>
					length_mod = 'L';
    40f8:	264c      	movs	r6, #76	; 0x4c
    40fa:	e6ea      	b.n	3ed2 <z_vprintk+0x2e>
			might_format = 0;
    40fc:	4681      	mov	r9, r0
    40fe:	e6e8      	b.n	3ed2 <z_vprintk+0x2e>

00004100 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    4100:	b507      	push	{r0, r1, r2, lr}
    4102:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    4104:	2100      	movs	r1, #0
{
    4106:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    4108:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    410a:	4803      	ldr	r0, [pc, #12]	; (4118 <vprintk+0x18>)
    410c:	a901      	add	r1, sp, #4
    410e:	f7ff fec9 	bl	3ea4 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    4112:	b003      	add	sp, #12
    4114:	f85d fb04 	ldr.w	pc, [sp], #4
    4118:	00003e89 	.word	0x00003e89

0000411c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    411c:	b530      	push	{r4, r5, lr}
    411e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4120:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4124:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4126:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    4128:	4805      	ldr	r0, [pc, #20]	; (4140 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    412a:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    412c:	a901      	add	r1, sp, #4
    412e:	f7ff feb9 	bl	3ea4 <z_vprintk>

	if (ctx.count < ctx.max) {
    4132:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4136:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4138:	bfb8      	it	lt
    413a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    413c:	b005      	add	sp, #20
    413e:	bd30      	pop	{r4, r5, pc}
    4140:	0002448f 	.word	0x0002448f

00004144 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4148:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    414c:	f019 0808 	ands.w	r8, r9, #8
{
    4150:	4604      	mov	r4, r0
    4152:	4693      	mov	fp, r2
	if (processing) {
    4154:	d00d      	beq.n	4172 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4156:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4158:	bf0c      	ite	eq
    415a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    415e:	f049 0920 	orrne.w	r9, r9, #32
    4162:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4166:	f38b 8811 	msr	BASEPRI, fp
    416a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    416e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4172:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4176:	2902      	cmp	r1, #2
    4178:	d107      	bne.n	418a <process_event+0x46>
			evt = process_recheck(mgr);
    417a:	4620      	mov	r0, r4
    417c:	f020 f9b4 	bl	244e8 <process_recheck>
		if (evt == EVT_NOP) {
    4180:	2800      	cmp	r0, #0
    4182:	d0f0      	beq.n	4166 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4184:	2801      	cmp	r0, #1
    4186:	8b23      	ldrh	r3, [r4, #24]
    4188:	d14e      	bne.n	4228 <process_event+0xe4>
			res = mgr->last_res;
    418a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    418c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    418e:	2f00      	cmp	r7, #0
    4190:	da15      	bge.n	41be <process_event+0x7a>
		*clients = mgr->clients;
    4192:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4194:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4198:	e9c4 8800 	strd	r8, r8, [r4]
    419c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    41a0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    41a2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    41a4:	8b21      	ldrh	r1, [r4, #24]
    41a6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    41aa:	45ca      	cmp	sl, r9
    41ac:	d002      	beq.n	41b4 <process_event+0x70>
		if (do_monitors
    41ae:	68a3      	ldr	r3, [r4, #8]
    41b0:	2b00      	cmp	r3, #0
    41b2:	d15a      	bne.n	426a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    41b4:	b90d      	cbnz	r5, 41ba <process_event+0x76>
		    || (transit != NULL)) {
    41b6:	2e00      	cmp	r6, #0
    41b8:	d071      	beq.n	429e <process_event+0x15a>
    41ba:	2300      	movs	r3, #0
    41bc:	e056      	b.n	426c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    41be:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    41c2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    41c4:	2a01      	cmp	r2, #1
    41c6:	d81e      	bhi.n	4206 <process_event+0xc2>
		*clients = mgr->clients;
    41c8:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    41cc:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    41ce:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    41d0:	b289      	uxth	r1, r1
	list->tail = NULL;
    41d2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    41d6:	d10a      	bne.n	41ee <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    41d8:	b13d      	cbz	r5, 41ea <process_event+0xa6>
    41da:	8b63      	ldrh	r3, [r4, #26]
    41dc:	462a      	mov	r2, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    41de:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    41e0:	3301      	adds	r3, #1
    41e2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    41e4:	2a00      	cmp	r2, #0
    41e6:	d1fa      	bne.n	41de <process_event+0x9a>
    41e8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    41ea:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    41ee:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    41f0:	4620      	mov	r0, r4
    41f2:	f020 f979 	bl	244e8 <process_recheck>
    41f6:	4606      	mov	r6, r0
    41f8:	2800      	cmp	r0, #0
    41fa:	d0d3      	beq.n	41a4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    41fc:	8b23      	ldrh	r3, [r4, #24]
    41fe:	f043 0320 	orr.w	r3, r3, #32
    4202:	8323      	strh	r3, [r4, #24]
    4204:	e7cd      	b.n	41a2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4206:	2b04      	cmp	r3, #4
    4208:	d10c      	bne.n	4224 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    420a:	f021 0107 	bic.w	r1, r1, #7
    420e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4210:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4212:	4620      	mov	r0, r4
    4214:	f020 f968 	bl	244e8 <process_recheck>
    4218:	4605      	mov	r5, r0
    421a:	2800      	cmp	r0, #0
    421c:	d0c1      	beq.n	41a2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    421e:	f041 0120 	orr.w	r1, r1, #32
    4222:	8321      	strh	r1, [r4, #24]
    4224:	2500      	movs	r5, #0
    4226:	e7bc      	b.n	41a2 <process_event+0x5e>
		} else if (evt == EVT_START) {
    4228:	2803      	cmp	r0, #3
    422a:	d109      	bne.n	4240 <process_event+0xfc>
			transit = mgr->transitions->start;
    422c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    422e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4232:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4234:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4238:	8323      	strh	r3, [r4, #24]
}
    423a:	2500      	movs	r5, #0
		res = 0;
    423c:	462f      	mov	r7, r5
    423e:	e7b1      	b.n	41a4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4240:	2804      	cmp	r0, #4
    4242:	d106      	bne.n	4252 <process_event+0x10e>
			transit = mgr->transitions->stop;
    4244:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4246:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    424a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    424c:	f043 0304 	orr.w	r3, r3, #4
    4250:	e7f2      	b.n	4238 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    4252:	2805      	cmp	r0, #5
    4254:	d106      	bne.n	4264 <process_event+0x120>
			transit = mgr->transitions->reset;
    4256:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4258:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    425c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    425e:	f043 0305 	orr.w	r3, r3, #5
    4262:	e7e9      	b.n	4238 <process_event+0xf4>
    4264:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4266:	462e      	mov	r6, r5
    4268:	e7e8      	b.n	423c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    426a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    426c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4270:	8321      	strh	r1, [r4, #24]
    4272:	f38b 8811 	msr	BASEPRI, fp
    4276:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    427a:	b9fb      	cbnz	r3, 42bc <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    427c:	bb85      	cbnz	r5, 42e0 <process_event+0x19c>
			if (transit != NULL) {
    427e:	b116      	cbz	r6, 4286 <process_event+0x142>
				transit(mgr, transition_complete);
    4280:	491f      	ldr	r1, [pc, #124]	; (4300 <process_event+0x1bc>)
    4282:	4620      	mov	r0, r4
    4284:	47b0      	blx	r6
	__asm__ volatile(
    4286:	f04f 0320 	mov.w	r3, #32
    428a:	f3ef 8b11 	mrs	fp, BASEPRI
    428e:	f383 8811 	msr	BASEPRI, r3
    4292:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4296:	8b23      	ldrh	r3, [r4, #24]
    4298:	f023 0308 	bic.w	r3, r3, #8
    429c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    429e:	8b23      	ldrh	r3, [r4, #24]
    42a0:	06da      	lsls	r2, r3, #27
    42a2:	d525      	bpl.n	42f0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    42a4:	f023 0310 	bic.w	r3, r3, #16
    42a8:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    42aa:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    42ac:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    42b0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    42b4:	2900      	cmp	r1, #0
    42b6:	f47f af5e 	bne.w	4176 <process_event+0x32>
out:
    42ba:	e754      	b.n	4166 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    42bc:	68a1      	ldr	r1, [r4, #8]
    42be:	2900      	cmp	r1, #0
    42c0:	d0dc      	beq.n	427c <process_event+0x138>
    42c2:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    42c6:	f8d1 b004 	ldr.w	fp, [r1, #4]
    42ca:	463b      	mov	r3, r7
    42cc:	4652      	mov	r2, sl
    42ce:	4620      	mov	r0, r4
    42d0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    42d2:	f1b9 0f00 	cmp.w	r9, #0
    42d6:	d0d1      	beq.n	427c <process_event+0x138>
    42d8:	4649      	mov	r1, r9
    42da:	f8d9 9000 	ldr.w	r9, [r9]
    42de:	e7f2      	b.n	42c6 <process_event+0x182>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    42e0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    42e2:	463b      	mov	r3, r7
    42e4:	4652      	mov	r2, sl
    42e6:	4620      	mov	r0, r4
    42e8:	682d      	ldr	r5, [r5, #0]
    42ea:	f020 f919 	bl	24520 <notify_one>
    42ee:	e7c5      	b.n	427c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    42f0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    42f4:	bf1e      	ittt	ne
    42f6:	f023 0320 	bicne.w	r3, r3, #32
    42fa:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    42fc:	2102      	movne	r1, #2
    42fe:	e7d5      	b.n	42ac <process_event+0x168>
    4300:	0002454d 	.word	0x0002454d

00004304 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    4304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4308:	b0a1      	sub	sp, #132	; 0x84
    430a:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    430c:	2300      	movs	r3, #0
{
    430e:	9003      	str	r0, [sp, #12]
    4310:	4689      	mov	r9, r1
	count = 0;
    4312:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    4314:	4613      	mov	r3, r2
    4316:	f813 0b01 	ldrb.w	r0, [r3], #1
    431a:	9306      	str	r3, [sp, #24]
    431c:	b158      	cbz	r0, 4336 <z_prf+0x32>
		if (c != '%') {
    431e:	2825      	cmp	r0, #37	; 0x25
    4320:	f000 8081 	beq.w	4426 <z_prf+0x122>
			PUTC(c);
    4324:	4649      	mov	r1, r9
    4326:	9b03      	ldr	r3, [sp, #12]
    4328:	4798      	blx	r3
    432a:	3001      	adds	r0, #1
    432c:	f040 844a 	bne.w	4bc4 <z_prf+0x8c0>
    4330:	f04f 33ff 	mov.w	r3, #4294967295
    4334:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    4336:	9802      	ldr	r0, [sp, #8]
    4338:	b021      	add	sp, #132	; 0x84
    433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    433e:	2d2b      	cmp	r5, #43	; 0x2b
    4340:	d065      	beq.n	440e <z_prf+0x10a>
    4342:	d85c      	bhi.n	43fe <z_prf+0xfa>
    4344:	2d20      	cmp	r5, #32
    4346:	d065      	beq.n	4414 <z_prf+0x110>
    4348:	2d23      	cmp	r5, #35	; 0x23
    434a:	d066      	beq.n	441a <z_prf+0x116>
    434c:	2d00      	cmp	r5, #0
    434e:	d0f2      	beq.n	4336 <z_prf+0x32>
					fzero = true;
    4350:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    4354:	f8dd 8018 	ldr.w	r8, [sp, #24]
    4358:	48a4      	ldr	r0, [pc, #656]	; (45ec <z_prf+0x2e8>)
    435a:	f818 5b01 	ldrb.w	r5, [r8], #1
    435e:	4629      	mov	r1, r5
    4360:	f022 fad6 	bl	26910 <strchr>
    4364:	2800      	cmp	r0, #0
    4366:	d1ea      	bne.n	433e <z_prf+0x3a>
			if (c == '*') {
    4368:	2d2a      	cmp	r5, #42	; 0x2a
    436a:	d163      	bne.n	4434 <z_prf+0x130>
				width = va_arg(vargs, int);
    436c:	f856 3b04 	ldr.w	r3, [r6], #4
    4370:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    4372:	2b00      	cmp	r3, #0
					width = -width;
    4374:	bfbf      	itttt	lt
    4376:	425b      	neglt	r3, r3
    4378:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    437a:	2301      	movlt	r3, #1
    437c:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    437e:	9b06      	ldr	r3, [sp, #24]
    4380:	f898 5000 	ldrb.w	r5, [r8]
    4384:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    4388:	2d2e      	cmp	r5, #46	; 0x2e
    438a:	d178      	bne.n	447e <z_prf+0x17a>
				if (c == '*') {
    438c:	f898 3000 	ldrb.w	r3, [r8]
    4390:	2b2a      	cmp	r3, #42	; 0x2a
    4392:	d171      	bne.n	4478 <z_prf+0x174>
					precision = va_arg(vargs, int);
    4394:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    4398:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    439c:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    43a0:	4893      	ldr	r0, [pc, #588]	; (45f0 <z_prf+0x2ec>)
    43a2:	4629      	mov	r1, r5
    43a4:	462f      	mov	r7, r5
    43a6:	f022 fab3 	bl	26910 <strchr>
    43aa:	2800      	cmp	r0, #0
    43ac:	d06a      	beq.n	4484 <z_prf+0x180>
				c = *format++;
    43ae:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    43b0:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    43b2:	f813 5b01 	ldrb.w	r5, [r3], #1
    43b6:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    43b8:	d107      	bne.n	43ca <z_prf+0xc6>
    43ba:	2d68      	cmp	r5, #104	; 0x68
    43bc:	d105      	bne.n	43ca <z_prf+0xc6>
					c = *format++;
    43be:	f108 0302 	add.w	r3, r8, #2
    43c2:	f898 5001 	ldrb.w	r5, [r8, #1]
    43c6:	9306      	str	r3, [sp, #24]
					i = 'H';
    43c8:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    43ca:	2d78      	cmp	r5, #120	; 0x78
    43cc:	d808      	bhi.n	43e0 <z_prf+0xdc>
    43ce:	2d57      	cmp	r5, #87	; 0x57
    43d0:	d85c      	bhi.n	448c <z_prf+0x188>
    43d2:	2d25      	cmp	r5, #37	; 0x25
    43d4:	f000 83f2 	beq.w	4bbc <z_prf+0x8b8>
    43d8:	f200 80a2 	bhi.w	4520 <z_prf+0x21c>
    43dc:	2d00      	cmp	r5, #0
    43de:	d0aa      	beq.n	4336 <z_prf+0x32>
				PUTC('%');
    43e0:	9b03      	ldr	r3, [sp, #12]
    43e2:	4649      	mov	r1, r9
    43e4:	2025      	movs	r0, #37	; 0x25
    43e6:	4798      	blx	r3
    43e8:	3001      	adds	r0, #1
    43ea:	d0a1      	beq.n	4330 <z_prf+0x2c>
				PUTC(c);
    43ec:	9b03      	ldr	r3, [sp, #12]
    43ee:	4649      	mov	r1, r9
    43f0:	4628      	mov	r0, r5
    43f2:	4798      	blx	r3
    43f4:	3001      	adds	r0, #1
    43f6:	d09b      	beq.n	4330 <z_prf+0x2c>
				count += 2;
    43f8:	9b02      	ldr	r3, [sp, #8]
    43fa:	3302      	adds	r3, #2
    43fc:	e3e4      	b.n	4bc8 <z_prf+0x8c4>
				switch (c) {
    43fe:	2d2d      	cmp	r5, #45	; 0x2d
    4400:	d00e      	beq.n	4420 <z_prf+0x11c>
					fzero = true;
    4402:	2d30      	cmp	r5, #48	; 0x30
    4404:	9b08      	ldr	r3, [sp, #32]
    4406:	bf08      	it	eq
    4408:	2301      	moveq	r3, #1
    440a:	9308      	str	r3, [sp, #32]
    440c:	e7a0      	b.n	4350 <z_prf+0x4c>
					fplus = true;
    440e:	2301      	movs	r3, #1
    4410:	9309      	str	r3, [sp, #36]	; 0x24
    4412:	e79d      	b.n	4350 <z_prf+0x4c>
					fspace = true;
    4414:	2301      	movs	r3, #1
    4416:	930c      	str	r3, [sp, #48]	; 0x30
    4418:	e79a      	b.n	4350 <z_prf+0x4c>
					falt = true;
    441a:	f04f 0a01 	mov.w	sl, #1
    441e:	e797      	b.n	4350 <z_prf+0x4c>
				switch (c) {
    4420:	2301      	movs	r3, #1
    4422:	930d      	str	r3, [sp, #52]	; 0x34
    4424:	e794      	b.n	4350 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    4426:	2300      	movs	r3, #0
    4428:	9308      	str	r3, [sp, #32]
    442a:	930c      	str	r3, [sp, #48]	; 0x30
    442c:	9309      	str	r3, [sp, #36]	; 0x24
    442e:	930d      	str	r3, [sp, #52]	; 0x34
    4430:	469a      	mov	sl, r3
    4432:	e78f      	b.n	4354 <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4434:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit((int)c)) {
    4438:	2b09      	cmp	r3, #9
				width = 0;
    443a:	9007      	str	r0, [sp, #28]
			} else if (!isdigit((int)c)) {
    443c:	d8a4      	bhi.n	4388 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    443e:	220a      	movs	r2, #10
	while (isdigit((int)*p)) {
    4440:	f8dd 8018 	ldr.w	r8, [sp, #24]
    4444:	f818 5b01 	ldrb.w	r5, [r8], #1
    4448:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    444c:	2b09      	cmp	r3, #9
    444e:	d89b      	bhi.n	4388 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    4450:	9b07      	ldr	r3, [sp, #28]
    4452:	fb02 5503 	mla	r5, r2, r3, r5
    4456:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    445a:	e9cd 8306 	strd	r8, r3, [sp, #24]
    445e:	e7ef      	b.n	4440 <z_prf+0x13c>
    4460:	fb01 3404 	mla	r4, r1, r4, r3
    4464:	3c30      	subs	r4, #48	; 0x30
    4466:	4690      	mov	r8, r2
	while (isdigit((int)*p)) {
    4468:	4642      	mov	r2, r8
    446a:	f812 3b01 	ldrb.w	r3, [r2], #1
    446e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    4472:	2809      	cmp	r0, #9
    4474:	d9f4      	bls.n	4460 <z_prf+0x15c>
    4476:	e791      	b.n	439c <z_prf+0x98>
	int i = 0;
    4478:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    447a:	210a      	movs	r1, #10
    447c:	e7f4      	b.n	4468 <z_prf+0x164>
			precision = -1;
    447e:	f04f 34ff 	mov.w	r4, #4294967295
    4482:	e78d      	b.n	43a0 <z_prf+0x9c>
    4484:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
    4488:	4607      	mov	r7, r0
    448a:	e79e      	b.n	43ca <z_prf+0xc6>
    448c:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    4490:	2b20      	cmp	r3, #32
    4492:	d8a5      	bhi.n	43e0 <z_prf+0xdc>
    4494:	a201      	add	r2, pc, #4	; (adr r2, 449c <z_prf+0x198>)
    4496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    449a:	bf00      	nop
    449c:	00004b21 	.word	0x00004b21
    44a0:	000043e1 	.word	0x000043e1
    44a4:	000043e1 	.word	0x000043e1
    44a8:	000043e1 	.word	0x000043e1
    44ac:	000043e1 	.word	0x000043e1
    44b0:	000043e1 	.word	0x000043e1
    44b4:	000043e1 	.word	0x000043e1
    44b8:	000043e1 	.word	0x000043e1
    44bc:	000043e1 	.word	0x000043e1
    44c0:	000043e1 	.word	0x000043e1
    44c4:	000043e1 	.word	0x000043e1
    44c8:	000045f5 	.word	0x000045f5
    44cc:	000046cb 	.word	0x000046cb
    44d0:	0000452d 	.word	0x0000452d
    44d4:	0000452d 	.word	0x0000452d
    44d8:	0000452d 	.word	0x0000452d
    44dc:	000043e1 	.word	0x000043e1
    44e0:	000046cb 	.word	0x000046cb
    44e4:	000043e1 	.word	0x000043e1
    44e8:	000043e1 	.word	0x000043e1
    44ec:	000043e1 	.word	0x000043e1
    44f0:	000043e1 	.word	0x000043e1
    44f4:	00004aad 	.word	0x00004aad
    44f8:	00004b21 	.word	0x00004b21
    44fc:	00004ad7 	.word	0x00004ad7
    4500:	000043e1 	.word	0x000043e1
    4504:	000043e1 	.word	0x000043e1
    4508:	00004af9 	.word	0x00004af9
    450c:	000043e1 	.word	0x000043e1
    4510:	00004b21 	.word	0x00004b21
    4514:	000043e1 	.word	0x000043e1
    4518:	000043e1 	.word	0x000043e1
    451c:	00004b21 	.word	0x00004b21
			switch (c) {
    4520:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    4524:	b2db      	uxtb	r3, r3
    4526:	2b02      	cmp	r3, #2
    4528:	f63f af5a 	bhi.w	43e0 <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    452c:	3607      	adds	r6, #7
    452e:	f026 0307 	bic.w	r3, r6, #7
    4532:	4619      	mov	r1, r3
    4534:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    4538:	02d8      	lsls	r0, r3, #11
    453a:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    453e:	02d6      	lsls	r6, r2, #11
    4540:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    4544:	9604      	str	r6, [sp, #16]
    4546:	9005      	str	r0, [sp, #20]
    4548:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
	if (sign) {
    454c:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    454e:	9101      	str	r1, [sp, #4]
	exp = double_temp >> 52 & 0x7ff;
    4550:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    4554:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    4558:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    455c:	f280 80e5 	bge.w	472a <z_prf+0x426>
		*buf++ = '-';
    4560:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    4562:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    4566:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    456a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    456e:	4299      	cmp	r1, r3
    4570:	f040 80f6 	bne.w	4760 <z_prf+0x45c>
		if (!fract) {
    4574:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4578:	430a      	orrs	r2, r1
    457a:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    457e:	f107 0303 	add.w	r3, r7, #3
    4582:	f040 80e2 	bne.w	474a <z_prf+0x446>
			if (isupper((int)c)) {
    4586:	2d19      	cmp	r5, #25
    4588:	f200 80d9 	bhi.w	473e <z_prf+0x43a>
				*buf++ = 'I';
    458c:	2249      	movs	r2, #73	; 0x49
    458e:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    4590:	224e      	movs	r2, #78	; 0x4e
    4592:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    4594:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    4596:	2400      	movs	r4, #0
		return buf - start;
    4598:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    459a:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    459c:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    459e:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    45a0:	46a2      	mov	sl, r4
    45a2:	46a3      	mov	fp, r4
				if (fplus || fspace || (buf[0] == '-')) {
    45a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    45a6:	2a00      	cmp	r2, #0
    45a8:	f040 827d 	bne.w	4aa6 <z_prf+0x7a2>
    45ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    45ae:	2a00      	cmp	r2, #0
    45b0:	f040 8279 	bne.w	4aa6 <z_prf+0x7a2>
    45b4:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    45b8:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    45bc:	f1d2 0800 	rsbs	r8, r2, #0
    45c0:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    45c4:	eb0b 060a 	add.w	r6, fp, sl
    45c8:	4433      	add	r3, r6
    45ca:	191e      	adds	r6, r3, r4
				if (!isdigit((int)buf[prefix])) {
    45cc:	ab20      	add	r3, sp, #128	; 0x80
    45ce:	4443      	add	r3, r8
    45d0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    45d4:	3b30      	subs	r3, #48	; 0x30
    45d6:	2b09      	cmp	r3, #9
    45d8:	f200 82fe 	bhi.w	4bd8 <z_prf+0x8d4>
			} else if (fzero) {
    45dc:	9b08      	ldr	r3, [sp, #32]
    45de:	2b00      	cmp	r3, #0
    45e0:	f000 82fd 	beq.w	4bde <z_prf+0x8da>
    45e4:	9b07      	ldr	r3, [sp, #28]
    45e6:	af19      	add	r7, sp, #100	; 0x64
    45e8:	1b9b      	subs	r3, r3, r6
    45ea:	e014      	b.n	4616 <z_prf+0x312>
    45ec:	0002fb03 	.word	0x0002fb03
    45f0:	0002fb09 	.word	0x0002fb09
				buf[0] = va_arg(vargs, int);
    45f4:	4632      	mov	r2, r6
				break;
    45f6:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    45fa:	f852 3b04 	ldr.w	r3, [r2], #4
    45fe:	9201      	str	r2, [sp, #4]
    4600:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				clen = 1;
    4604:	2601      	movs	r6, #1
				break;
    4606:	4644      	mov	r4, r8
    4608:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    460a:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    460e:	2400      	movs	r4, #0
				zero_head = precision - clen + prefix;
    4610:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    4612:	46a2      	mov	sl, r4
    4614:	46a3      	mov	fp, r4
			if (zero_head < 0) {
    4616:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    461a:	199a      	adds	r2, r3, r6
    461c:	9208      	str	r2, [sp, #32]
    461e:	9a07      	ldr	r2, [sp, #28]
    4620:	1999      	adds	r1, r3, r6
    4622:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    4624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    4626:	b912      	cbnz	r2, 462e <z_prf+0x32a>
    4628:	2d00      	cmp	r5, #0
    462a:	f300 82ed 	bgt.w	4c08 <z_prf+0x904>
			while (prefix-- > 0) {
    462e:	eb07 0208 	add.w	r2, r7, r8
    4632:	42ba      	cmp	r2, r7
    4634:	f040 82ea 	bne.w	4c0c <z_prf+0x908>
			while (zero_head-- > 0) {
    4638:	3b01      	subs	r3, #1
    463a:	f080 82f5 	bcs.w	4c28 <z_prf+0x924>
			clen -= prefix;
    463e:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    4642:	f1bb 0f00 	cmp.w	fp, #0
    4646:	d010      	beq.n	466a <z_prf+0x366>
				c = *cptr;
    4648:	7838      	ldrb	r0, [r7, #0]
				while (isdigit((int)c)) {
    464a:	eb07 0806 	add.w	r8, r7, r6
    464e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4652:	2b09      	cmp	r3, #9
    4654:	eba8 0607 	sub.w	r6, r8, r7
    4658:	f240 82f1 	bls.w	4c3e <z_prf+0x93a>
    465c:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    465e:	f1b8 0801 	subs.w	r8, r8, #1
    4662:	f080 82f5 	bcs.w	4c50 <z_prf+0x94c>
				clen -= zero.predot;
    4666:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    466a:	f1ba 0f00 	cmp.w	sl, #0
    466e:	d016      	beq.n	469e <z_prf+0x39a>
    4670:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    4674:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    4678:	9b03      	ldr	r3, [sp, #12]
    467a:	4649      	mov	r1, r9
    467c:	4658      	mov	r0, fp
    467e:	4798      	blx	r3
    4680:	3001      	adds	r0, #1
    4682:	f43f ae55 	beq.w	4330 <z_prf+0x2c>
				} while (c != '.');
    4686:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    468a:	eba8 0607 	sub.w	r6, r8, r7
    468e:	d1f1      	bne.n	4674 <z_prf+0x370>
				while (zero.postdot-- > 0) {
    4690:	46d0      	mov	r8, sl
    4692:	f1b8 0f00 	cmp.w	r8, #0
    4696:	f300 82e4 	bgt.w	4c62 <z_prf+0x95e>
				clen -= zero.postdot;
    469a:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    469e:	b194      	cbz	r4, 46c6 <z_prf+0x3c2>
				c = *cptr;
    46a0:	7838      	ldrb	r0, [r7, #0]
				while (isdigit((int)c) || c == '.') {
    46a2:	eb07 0806 	add.w	r8, r7, r6
    46a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    46aa:	2b09      	cmp	r3, #9
    46ac:	eba8 0607 	sub.w	r6, r8, r7
    46b0:	f240 82e2 	bls.w	4c78 <z_prf+0x974>
    46b4:	282e      	cmp	r0, #46	; 0x2e
    46b6:	f000 82df 	beq.w	4c78 <z_prf+0x974>
				while (zero.trail-- > 0) {
    46ba:	46a0      	mov	r8, r4
    46bc:	f1b8 0f00 	cmp.w	r8, #0
    46c0:	f300 82e3 	bgt.w	4c8a <z_prf+0x986>
				clen -= zero.trail;
    46c4:	1b36      	subs	r6, r6, r4
    46c6:	443e      	add	r6, r7
    46c8:	e2f2      	b.n	4cb0 <z_prf+0x9ac>
				switch (i) {
    46ca:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    46cc:	1d33      	adds	r3, r6, #4
    46ce:	2d00      	cmp	r5, #0
    46d0:	9301      	str	r3, [sp, #4]
    46d2:	da1c      	bge.n	470e <z_prf+0x40a>
		*buf++ = '-';
    46d4:	232d      	movs	r3, #45	; 0x2d
    46d6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		value = -value;
    46da:	4269      	negs	r1, r5
		*buf++ = ' ';
    46dc:	f10d 0665 	add.w	r6, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    46e0:	4630      	mov	r0, r6
    46e2:	220a      	movs	r2, #10
    46e4:	f020 fa05 	bl	24af2 <_to_x>
				if (fplus || fspace || val < 0) {
    46e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    46ea:	4406      	add	r6, r0
    46ec:	a819      	add	r0, sp, #100	; 0x64
    46ee:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    46f0:	2b00      	cmp	r3, #0
    46f2:	f040 826c 	bne.w	4bce <z_prf+0x8ca>
    46f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    46f8:	2b00      	cmp	r3, #0
    46fa:	f040 8268 	bne.w	4bce <z_prf+0x8ca>
    46fe:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    4702:	2c00      	cmp	r4, #0
    4704:	da80      	bge.n	4608 <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    4706:	2400      	movs	r4, #0
    4708:	46a2      	mov	sl, r4
    470a:	46a3      	mov	fp, r4
    470c:	e766      	b.n	45dc <z_prf+0x2d8>
	} else if (fplus) {
    470e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4710:	b123      	cbz	r3, 471c <z_prf+0x418>
		*buf++ = '+';
    4712:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    4714:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    4718:	4629      	mov	r1, r5
    471a:	e7df      	b.n	46dc <z_prf+0x3d8>
	} else if (fspace) {
    471c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    471e:	b10b      	cbz	r3, 4724 <z_prf+0x420>
		*buf++ = ' ';
    4720:	2320      	movs	r3, #32
    4722:	e7f7      	b.n	4714 <z_prf+0x410>
    4724:	4629      	mov	r1, r5
    4726:	ae19      	add	r6, sp, #100	; 0x64
    4728:	e7da      	b.n	46e0 <z_prf+0x3dc>
	} else if (fplus) {
    472a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    472c:	b10b      	cbz	r3, 4732 <z_prf+0x42e>
		*buf++ = '+';
    472e:	232b      	movs	r3, #43	; 0x2b
    4730:	e717      	b.n	4562 <z_prf+0x25e>
	} else if (fspace) {
    4732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4734:	b10b      	cbz	r3, 473a <z_prf+0x436>
		*buf++ = ' ';
    4736:	2320      	movs	r3, #32
    4738:	e713      	b.n	4562 <z_prf+0x25e>
    473a:	af19      	add	r7, sp, #100	; 0x64
    473c:	e715      	b.n	456a <z_prf+0x266>
				*buf++ = 'i';
    473e:	2269      	movs	r2, #105	; 0x69
    4740:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    4742:	226e      	movs	r2, #110	; 0x6e
    4744:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    4746:	2266      	movs	r2, #102	; 0x66
    4748:	e725      	b.n	4596 <z_prf+0x292>
			if (isupper((int)c)) {
    474a:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    474c:	bf99      	ittee	ls
    474e:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    4750:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    4752:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    4754:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    4756:	bf94      	ite	ls
    4758:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    475a:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    475c:	7079      	strb	r1, [r7, #1]
    475e:	e71a      	b.n	4596 <z_prf+0x292>
	if ((exp | fract) != 0) {
    4760:	9b04      	ldr	r3, [sp, #16]
    4762:	9805      	ldr	r0, [sp, #20]
    4764:	430b      	orrs	r3, r1
    4766:	930e      	str	r3, [sp, #56]	; 0x38
    4768:	17cb      	asrs	r3, r1, #31
    476a:	4303      	orrs	r3, r0
    476c:	930f      	str	r3, [sp, #60]	; 0x3c
    476e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
		c = 'f';
    4772:	2d46      	cmp	r5, #70	; 0x46
    4774:	bf08      	it	eq
    4776:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    4778:	4313      	orrs	r3, r2
    477a:	f000 8107 	beq.w	498c <z_prf+0x688>
		if (exp == 0) {
    477e:	2900      	cmp	r1, #0
    4780:	f000 809f 	beq.w	48c2 <z_prf+0x5be>
		fract |= HIGHBIT64;
    4784:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4786:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    478a:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    478e:	9315      	str	r3, [sp, #84]	; 0x54
    4790:	2600      	movs	r6, #0
	while (exp <= -3) {
    4792:	f118 0f02 	cmn.w	r8, #2
    4796:	f2c0 80a8 	blt.w	48ea <z_prf+0x5e6>
	while (exp > 0) {
    479a:	f1b8 0f00 	cmp.w	r8, #0
    479e:	f300 80d4 	bgt.w	494a <z_prf+0x646>
		_rlrshift(&fract);
    47a2:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    47a4:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    47a8:	f020 f9c7 	bl	24b3a <_rlrshift>
	while (exp < (0 + 4)) {
    47ac:	f1b8 0f04 	cmp.w	r8, #4
    47b0:	d1f7      	bne.n	47a2 <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    47b2:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    47b4:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    47b8:	bfb8      	it	lt
    47ba:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    47bc:	2b47      	cmp	r3, #71	; 0x47
    47be:	f040 80ee 	bne.w	499e <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    47c2:	1cf1      	adds	r1, r6, #3
    47c4:	db02      	blt.n	47cc <z_prf+0x4c8>
    47c6:	42b4      	cmp	r4, r6
    47c8:	f280 80e3 	bge.w	4992 <z_prf+0x68e>
			c += 'e' - 'g';
    47cc:	3d02      	subs	r5, #2
    47ce:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    47d0:	2c00      	cmp	r4, #0
    47d2:	f000 80ea 	beq.w	49aa <z_prf+0x6a6>
				precision--;
    47d6:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    47d8:	f1ba 0f00 	cmp.w	sl, #0
    47dc:	f040 80e5 	bne.w	49aa <z_prf+0x6a6>
    47e0:	2c00      	cmp	r4, #0
    47e2:	bfd4      	ite	le
    47e4:	f04f 0800 	movle.w	r8, #0
    47e8:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    47ec:	2d66      	cmp	r5, #102	; 0x66
    47ee:	f040 80de 	bne.w	49ae <z_prf+0x6aa>
		if (exp < 0) {
    47f2:	eb14 0b06 	adds.w	fp, r4, r6
    47f6:	f04f 0566 	mov.w	r5, #102	; 0x66
    47fa:	f100 80db 	bmi.w	49b4 <z_prf+0x6b0>
	if (exp > 16) {
    47fe:	f1bb 0f10 	cmp.w	fp, #16
    4802:	bfa8      	it	ge
    4804:	f04f 0b10 	movge.w	fp, #16
    4808:	2310      	movs	r3, #16
    480a:	9313      	str	r3, [sp, #76]	; 0x4c
	ltemp = 0x0800000000000000;
    480c:	2200      	movs	r2, #0
    480e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    4812:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    4816:	f1bb 0b01 	subs.w	fp, fp, #1
    481a:	f080 80ce 	bcs.w	49ba <z_prf+0x6b6>
	fract += ltemp;
    481e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4820:	9a16      	ldr	r2, [sp, #88]	; 0x58
    4822:	9917      	ldr	r1, [sp, #92]	; 0x5c
    4824:	189b      	adds	r3, r3, r2
    4826:	9a15      	ldr	r2, [sp, #84]	; 0x54
    4828:	eb41 0202 	adc.w	r2, r1, r2
    482c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    4830:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    4834:	9310      	str	r3, [sp, #64]	; 0x40
    4836:	2300      	movs	r3, #0
    4838:	9311      	str	r3, [sp, #68]	; 0x44
    483a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    483e:	4313      	orrs	r3, r2
    4840:	d006      	beq.n	4850 <z_prf+0x54c>
		_ldiv5(&fract);
    4842:	a814      	add	r0, sp, #80	; 0x50
    4844:	f020 f98b 	bl	24b5e <_ldiv5>
		_rlrshift(&fract);
    4848:	a814      	add	r0, sp, #80	; 0x50
    484a:	f020 f976 	bl	24b3a <_rlrshift>
		decexp++;
    484e:	3601      	adds	r6, #1
	if (c == 'f') {
    4850:	2d66      	cmp	r5, #102	; 0x66
    4852:	f040 80cf 	bne.w	49f4 <z_prf+0x6f0>
		if (decexp > 0) {
    4856:	2e00      	cmp	r6, #0
    4858:	f340 80b6 	ble.w	49c8 <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    485c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    485e:	2b00      	cmp	r3, #0
    4860:	dd07      	ble.n	4872 <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    4862:	a913      	add	r1, sp, #76	; 0x4c
    4864:	a814      	add	r0, sp, #80	; 0x50
    4866:	f020 f9a3 	bl	24bb0 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    486a:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    486c:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    4870:	d1f4      	bne.n	485c <z_prf+0x558>
			zp->predot = decexp;
    4872:	46b3      	mov	fp, r6
    4874:	463b      	mov	r3, r7
			decexp = 0;
    4876:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    4878:	f1ba 0f00 	cmp.w	sl, #0
    487c:	d101      	bne.n	4882 <z_prf+0x57e>
    487e:	2c00      	cmp	r4, #0
    4880:	dd15      	ble.n	48ae <z_prf+0x5aa>
			*buf++ = '.';
    4882:	222e      	movs	r2, #46	; 0x2e
    4884:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    4888:	2e00      	cmp	r6, #0
    488a:	f000 80ae 	beq.w	49ea <z_prf+0x6e6>
    488e:	2c00      	cmp	r4, #0
    4890:	f340 80ad 	ble.w	49ee <z_prf+0x6ea>
			zp->postdot = -decexp;
    4894:	f1c6 0a00 	rsb	sl, r6, #0
    4898:	45a2      	cmp	sl, r4
    489a:	bfa8      	it	ge
    489c:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    489e:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    48a2:	2c00      	cmp	r4, #0
    48a4:	dd03      	ble.n	48ae <z_prf+0x5aa>
    48a6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    48a8:	2a00      	cmp	r2, #0
    48aa:	f300 8094 	bgt.w	49d6 <z_prf+0x6d2>
	if (prune_zero) {
    48ae:	f1b8 0f00 	cmp.w	r8, #0
    48b2:	f040 80b4 	bne.w	4a1e <z_prf+0x71a>
	*buf = 0;
    48b6:	2200      	movs	r2, #0
	return buf - start;
    48b8:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    48ba:	701a      	strb	r2, [r3, #0]
	return buf - start;
    48bc:	1b9b      	subs	r3, r3, r6
    48be:	e671      	b.n	45a4 <z_prf+0x2a0>
				exp--;
    48c0:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    48c2:	9b04      	ldr	r3, [sp, #16]
    48c4:	18db      	adds	r3, r3, r3
    48c6:	9304      	str	r3, [sp, #16]
    48c8:	9b05      	ldr	r3, [sp, #20]
    48ca:	415b      	adcs	r3, r3
    48cc:	9305      	str	r3, [sp, #20]
    48ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    48d2:	2a00      	cmp	r2, #0
    48d4:	f173 0300 	sbcs.w	r3, r3, #0
    48d8:	daf2      	bge.n	48c0 <z_prf+0x5bc>
    48da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    48de:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    48e2:	e74f      	b.n	4784 <z_prf+0x480>
			_rlrshift(&fract);
    48e4:	a814      	add	r0, sp, #80	; 0x50
    48e6:	f020 f928 	bl	24b3a <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    48ea:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    48ee:	2300      	movs	r3, #0
    48f0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    48f4:	930b      	str	r3, [sp, #44]	; 0x2c
    48f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    48fa:	2900      	cmp	r1, #0
    48fc:	bf08      	it	eq
    48fe:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    4902:	f108 0801 	add.w	r8, r8, #1
    4906:	d2ed      	bcs.n	48e4 <z_prf+0x5e0>
		fract *= 5U;
    4908:	2005      	movs	r0, #5
    490a:	fba2 2300 	umull	r2, r3, r2, r0
    490e:	fb00 330c 	mla	r3, r0, ip, r3
    4912:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    4916:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    4918:	f04f 0e00 	mov.w	lr, #0
    491c:	2100      	movs	r1, #0
    491e:	f04f 0c00 	mov.w	ip, #0
    4922:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    4926:	458c      	cmp	ip, r1
    4928:	bf08      	it	eq
    492a:	459b      	cmpeq	fp, r3
    492c:	d206      	bcs.n	493c <z_prf+0x638>
    492e:	f1be 0f00 	cmp.w	lr, #0
    4932:	f43f af2e 	beq.w	4792 <z_prf+0x48e>
    4936:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    493a:	e72a      	b.n	4792 <z_prf+0x48e>
			fract <<= 1;
    493c:	1892      	adds	r2, r2, r2
    493e:	415b      	adcs	r3, r3
			exp--;
    4940:	f108 38ff 	add.w	r8, r8, #4294967295
    4944:	f04f 0e01 	mov.w	lr, #1
    4948:	e7e8      	b.n	491c <z_prf+0x618>
		_ldiv5(&fract);
    494a:	a814      	add	r0, sp, #80	; 0x50
    494c:	f020 f907 	bl	24b5e <_ldiv5>
		exp--;
    4950:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    4954:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    4958:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    495a:	f04f 0e00 	mov.w	lr, #0
    495e:	2300      	movs	r3, #0
    4960:	f04f 0c00 	mov.w	ip, #0
    4964:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    4968:	459c      	cmp	ip, r3
    496a:	bf08      	it	eq
    496c:	4583      	cmpeq	fp, r0
    496e:	d206      	bcs.n	497e <z_prf+0x67a>
    4970:	f1be 0f00 	cmp.w	lr, #0
    4974:	f43f af11 	beq.w	479a <z_prf+0x496>
    4978:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    497c:	e70d      	b.n	479a <z_prf+0x496>
			fract <<= 1;
    497e:	1849      	adds	r1, r1, r1
    4980:	4140      	adcs	r0, r0
			exp--;
    4982:	f108 38ff 	add.w	r8, r8, #4294967295
    4986:	f04f 0e01 	mov.w	lr, #1
    498a:	e7e8      	b.n	495e <z_prf+0x65a>
    498c:	2600      	movs	r6, #0
    498e:	46b0      	mov	r8, r6
    4990:	e707      	b.n	47a2 <z_prf+0x49e>
			precision -= decexp;
    4992:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    4994:	f1ba 0f00 	cmp.w	sl, #0
    4998:	d104      	bne.n	49a4 <z_prf+0x6a0>
			c = 'f';
    499a:	2566      	movs	r5, #102	; 0x66
    499c:	e720      	b.n	47e0 <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    499e:	f04f 0800 	mov.w	r8, #0
    49a2:	e723      	b.n	47ec <z_prf+0x4e8>
    49a4:	f04f 0800 	mov.w	r8, #0
    49a8:	e723      	b.n	47f2 <z_prf+0x4ee>
    49aa:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    49ae:	f104 0b01 	add.w	fp, r4, #1
    49b2:	e724      	b.n	47fe <z_prf+0x4fa>
			exp = 0;
    49b4:	f04f 0b00 	mov.w	fp, #0
    49b8:	e726      	b.n	4808 <z_prf+0x504>
		_ldiv5(&ltemp);
    49ba:	a816      	add	r0, sp, #88	; 0x58
    49bc:	f020 f8cf 	bl	24b5e <_ldiv5>
		_rlrshift(&ltemp);
    49c0:	a816      	add	r0, sp, #88	; 0x58
    49c2:	f020 f8ba 	bl	24b3a <_rlrshift>
    49c6:	e726      	b.n	4816 <z_prf+0x512>
			*buf++ = '0';
    49c8:	463b      	mov	r3, r7
    49ca:	2230      	movs	r2, #48	; 0x30
    49cc:	f803 2b01 	strb.w	r2, [r3], #1
			zero.predot = zero.postdot = zero.trail = 0;
    49d0:	f04f 0b00 	mov.w	fp, #0
    49d4:	e750      	b.n	4878 <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    49d6:	a913      	add	r1, sp, #76	; 0x4c
    49d8:	a814      	add	r0, sp, #80	; 0x50
    49da:	930a      	str	r3, [sp, #40]	; 0x28
    49dc:	f020 f8e8 	bl	24bb0 <_get_digit>
    49e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    49e2:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    49e4:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    49e8:	e75b      	b.n	48a2 <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    49ea:	46b2      	mov	sl, r6
    49ec:	e759      	b.n	48a2 <z_prf+0x59e>
    49ee:	f04f 0a00 	mov.w	sl, #0
    49f2:	e75c      	b.n	48ae <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    49f4:	a913      	add	r1, sp, #76	; 0x4c
    49f6:	a814      	add	r0, sp, #80	; 0x50
    49f8:	f020 f8da 	bl	24bb0 <_get_digit>
		if (*buf++ != '0') {
    49fc:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    49fe:	7038      	strb	r0, [r7, #0]
			decexp--;
    4a00:	bf18      	it	ne
    4a02:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (falt || (precision > 0)) {
    4a06:	f1ba 0f00 	cmp.w	sl, #0
    4a0a:	d137      	bne.n	4a7c <z_prf+0x778>
    4a0c:	2c00      	cmp	r4, #0
    4a0e:	dc35      	bgt.n	4a7c <z_prf+0x778>
		if (*buf++ != '0') {
    4a10:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    4a12:	f1b8 0f00 	cmp.w	r8, #0
    4a16:	d043      	beq.n	4aa0 <z_prf+0x79c>
			zero.predot = zero.postdot = zero.trail = 0;
    4a18:	f04f 0b00 	mov.w	fp, #0
    4a1c:	46da      	mov	sl, fp
		while (*--buf == '0')
    4a1e:	4619      	mov	r1, r3
    4a20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    4a24:	2a30      	cmp	r2, #48	; 0x30
    4a26:	d0fa      	beq.n	4a1e <z_prf+0x71a>
		if (*buf != '.') {
    4a28:	2a2e      	cmp	r2, #46	; 0x2e
    4a2a:	bf18      	it	ne
    4a2c:	460b      	movne	r3, r1
    4a2e:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    4a30:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    4a34:	2a45      	cmp	r2, #69	; 0x45
    4a36:	f47f af3e 	bne.w	48b6 <z_prf+0x5b2>
		if (decexp < 0) {
    4a3a:	2e00      	cmp	r6, #0
		*buf++ = c;
    4a3c:	4619      	mov	r1, r3
			decexp = -decexp;
    4a3e:	bfba      	itte	lt
    4a40:	4276      	neglt	r6, r6
			*buf++ = '-';
    4a42:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    4a44:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    4a46:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    4a48:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    4a4c:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    4a4e:	dd08      	ble.n	4a62 <z_prf+0x75e>
			*buf++ = (decexp / 100) + '0';
    4a50:	2064      	movs	r0, #100	; 0x64
    4a52:	fb96 f2f0 	sdiv	r2, r6, r0
    4a56:	f102 0530 	add.w	r5, r2, #48	; 0x30
    4a5a:	1cd9      	adds	r1, r3, #3
    4a5c:	709d      	strb	r5, [r3, #2]
			decexp %= 100;
    4a5e:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    4a62:	200a      	movs	r0, #10
    4a64:	460b      	mov	r3, r1
    4a66:	fb96 f2f0 	sdiv	r2, r6, r0
		decexp %= 10;
    4a6a:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    4a6e:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    4a72:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    4a74:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    4a78:	704e      	strb	r6, [r1, #1]
    4a7a:	e71c      	b.n	48b6 <z_prf+0x5b2>
			*buf++ = '.';
    4a7c:	222e      	movs	r2, #46	; 0x2e
    4a7e:	1cbb      	adds	r3, r7, #2
    4a80:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    4a82:	2c00      	cmp	r4, #0
    4a84:	ddc5      	ble.n	4a12 <z_prf+0x70e>
    4a86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4a88:	2a00      	cmp	r2, #0
    4a8a:	ddc2      	ble.n	4a12 <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    4a8c:	a913      	add	r1, sp, #76	; 0x4c
    4a8e:	a814      	add	r0, sp, #80	; 0x50
    4a90:	930a      	str	r3, [sp, #40]	; 0x28
    4a92:	f020 f88d 	bl	24bb0 <_get_digit>
    4a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    4a98:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    4a9a:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    4a9e:	e7f0      	b.n	4a82 <z_prf+0x77e>
			zero.predot = zero.postdot = zero.trail = 0;
    4aa0:	46c3      	mov	fp, r8
    4aa2:	46c2      	mov	sl, r8
    4aa4:	e7c4      	b.n	4a30 <z_prf+0x72c>
					prefix = 1;
    4aa6:	f04f 0801 	mov.w	r8, #1
    4aaa:	e58b      	b.n	45c4 <z_prf+0x2c0>
				switch (i) {
    4aac:	4632      	mov	r2, r6
    4aae:	2f68      	cmp	r7, #104	; 0x68
    4ab0:	f852 3b04 	ldr.w	r3, [r2], #4
    4ab4:	9201      	str	r2, [sp, #4]
    4ab6:	d006      	beq.n	4ac6 <z_prf+0x7c2>
    4ab8:	2f6c      	cmp	r7, #108	; 0x6c
    4aba:	d009      	beq.n	4ad0 <z_prf+0x7cc>
    4abc:	2f48      	cmp	r7, #72	; 0x48
    4abe:	d107      	bne.n	4ad0 <z_prf+0x7cc>
					*va_arg(vargs, char *) = count;
    4ac0:	9a02      	ldr	r2, [sp, #8]
    4ac2:	701a      	strb	r2, [r3, #0]
					break;
    4ac4:	e001      	b.n	4aca <z_prf+0x7c6>
					*va_arg(vargs, short *) = count;
    4ac6:	9a02      	ldr	r2, [sp, #8]
    4ac8:	801a      	strh	r2, [r3, #0]
				continue;
    4aca:	9e01      	ldr	r6, [sp, #4]
    4acc:	9a06      	ldr	r2, [sp, #24]
    4ace:	e421      	b.n	4314 <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    4ad0:	9a02      	ldr	r2, [sp, #8]
    4ad2:	601a      	str	r2, [r3, #0]
					break;
    4ad4:	e7f9      	b.n	4aca <z_prf+0x7c6>
		*buf++ = '0';
    4ad6:	f647 0330 	movw	r3, #30768	; 0x7830
    4ada:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    4ade:	4633      	mov	r3, r6
    4ae0:	2210      	movs	r2, #16
    4ae2:	f853 1b04 	ldr.w	r1, [r3], #4
    4ae6:	9301      	str	r3, [sp, #4]
    4ae8:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    4aec:	f020 f801 	bl	24af2 <_to_x>
				prefix = 2;
    4af0:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    4af4:	1c86      	adds	r6, r0, #2
				break;
    4af6:	e604      	b.n	4702 <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    4af8:	4633      	mov	r3, r6
					precision = INT_MAX;
    4afa:	2c00      	cmp	r4, #0
				cptr = va_arg(vargs, char *);
    4afc:	f853 7b04 	ldr.w	r7, [r3], #4
    4b00:	9301      	str	r3, [sp, #4]
					precision = INT_MAX;
    4b02:	bfb8      	it	lt
    4b04:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    4b08:	2600      	movs	r6, #0
    4b0a:	42b4      	cmp	r4, r6
    4b0c:	d103      	bne.n	4b16 <z_prf+0x812>
    4b0e:	4626      	mov	r6, r4
    4b10:	2400      	movs	r4, #0
    4b12:	46a0      	mov	r8, r4
    4b14:	e579      	b.n	460a <z_prf+0x306>
					if (cptr[clen] == '\0') {
    4b16:	5dbb      	ldrb	r3, [r7, r6]
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d05b      	beq.n	4bd4 <z_prf+0x8d0>
				for (clen = 0; clen < precision; clen++) {
    4b1c:	3601      	adds	r6, #1
    4b1e:	e7f4      	b.n	4b0a <z_prf+0x806>
				switch (i) {
    4b20:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    4b22:	2d6f      	cmp	r5, #111	; 0x6f
    4b24:	6831      	ldr	r1, [r6, #0]
    4b26:	9301      	str	r3, [sp, #4]
    4b28:	d119      	bne.n	4b5e <z_prf+0x85a>
	if (alt_form) {
    4b2a:	f1ba 0f00 	cmp.w	sl, #0
    4b2e:	d008      	beq.n	4b42 <z_prf+0x83e>
		*buf++ = '0';
    4b30:	2330      	movs	r3, #48	; 0x30
    4b32:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    4b36:	b979      	cbnz	r1, 4b58 <z_prf+0x854>
			*buf++ = 0;
    4b38:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			prefix = 0;
    4b3c:	4688      	mov	r8, r1
			return 1;
    4b3e:	2601      	movs	r6, #1
    4b40:	e5df      	b.n	4702 <z_prf+0x3fe>
    4b42:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    4b44:	4628      	mov	r0, r5
    4b46:	2208      	movs	r2, #8
    4b48:	f01f ffd3 	bl	24af2 <_to_x>
    4b4c:	ae19      	add	r6, sp, #100	; 0x64
    4b4e:	1bad      	subs	r5, r5, r6
    4b50:	182e      	adds	r6, r5, r0
			prefix = 0;
    4b52:	f04f 0800 	mov.w	r8, #0
    4b56:	e5d4      	b.n	4702 <z_prf+0x3fe>
		*buf++ = '0';
    4b58:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    4b5c:	e7f2      	b.n	4b44 <z_prf+0x840>
				} else if (c == 'u') {
    4b5e:	2d75      	cmp	r5, #117	; 0x75
    4b60:	d105      	bne.n	4b6e <z_prf+0x86a>
	return _to_x(buf, value, 10);
    4b62:	220a      	movs	r2, #10
    4b64:	a819      	add	r0, sp, #100	; 0x64
    4b66:	f01f ffc4 	bl	24af2 <_to_x>
    4b6a:	4606      	mov	r6, r0
    4b6c:	e7f1      	b.n	4b52 <z_prf+0x84e>
	if (alt_form) {
    4b6e:	f1ba 0f00 	cmp.w	sl, #0
    4b72:	d011      	beq.n	4b98 <z_prf+0x894>
		*buf++ = '0';
    4b74:	f647 0330 	movw	r3, #30768	; 0x7830
    4b78:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
		*buf++ = 'x';
    4b7c:	f10d 0766 	add.w	r7, sp, #102	; 0x66
	len = _to_x(buf, value, 16);
    4b80:	2210      	movs	r2, #16
    4b82:	4638      	mov	r0, r7
    4b84:	f01f ffb5 	bl	24af2 <_to_x>
	if (prefix == 'X') {
    4b88:	2d58      	cmp	r5, #88	; 0x58
    4b8a:	d007      	beq.n	4b9c <z_prf+0x898>
	return len + (buf - buf0);
    4b8c:	ae19      	add	r6, sp, #100	; 0x64
    4b8e:	1bbf      	subs	r7, r7, r6
    4b90:	183e      	adds	r6, r7, r0
						prefix = 2;
    4b92:	ea4f 084a 	mov.w	r8, sl, lsl #1
    4b96:	e5b4      	b.n	4702 <z_prf+0x3fe>
    4b98:	af19      	add	r7, sp, #100	; 0x64
    4b9a:	e7f1      	b.n	4b80 <z_prf+0x87c>
    4b9c:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    4b9e:	f812 3b01 	ldrb.w	r3, [r2], #1
    4ba2:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    4ba6:	2919      	cmp	r1, #25
    4ba8:	d803      	bhi.n	4bb2 <z_prf+0x8ae>
			*buf += 'A' - 'a';
    4baa:	3b20      	subs	r3, #32
    4bac:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    4bb0:	e7f5      	b.n	4b9e <z_prf+0x89a>
    4bb2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d1f1      	bne.n	4b9e <z_prf+0x89a>
    4bba:	e7e7      	b.n	4b8c <z_prf+0x888>
				PUTC('%');
    4bbc:	4649      	mov	r1, r9
    4bbe:	4628      	mov	r0, r5
    4bc0:	f7ff bbb1 	b.w	4326 <z_prf+0x22>
				count++;
    4bc4:	9b02      	ldr	r3, [sp, #8]
    4bc6:	3301      	adds	r3, #1
				continue;
    4bc8:	e9cd 6301 	strd	r6, r3, [sp, #4]
    4bcc:	e77d      	b.n	4aca <z_prf+0x7c6>
					prefix = 1;
    4bce:	f04f 0801 	mov.w	r8, #1
    4bd2:	e596      	b.n	4702 <z_prf+0x3fe>
    4bd4:	461c      	mov	r4, r3
    4bd6:	e79c      	b.n	4b12 <z_prf+0x80e>
			cptr = buf;
    4bd8:	af19      	add	r7, sp, #100	; 0x64
				zero_head = 0;
    4bda:	2300      	movs	r3, #0
    4bdc:	e51d      	b.n	461a <z_prf+0x316>
    4bde:	9b08      	ldr	r3, [sp, #32]
    4be0:	af19      	add	r7, sp, #100	; 0x64
    4be2:	e51a      	b.n	461a <z_prf+0x316>
    4be4:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    4be6:	4649      	mov	r1, r9
    4be8:	9b03      	ldr	r3, [sp, #12]
    4bea:	9207      	str	r2, [sp, #28]
    4bec:	2020      	movs	r0, #32
    4bee:	4798      	blx	r3
    4bf0:	3001      	adds	r0, #1
    4bf2:	9a07      	ldr	r2, [sp, #28]
    4bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4bf6:	f43f ab9b 	beq.w	4330 <z_prf+0x2c>
				while (width-- > 0) {
    4bfa:	3a01      	subs	r2, #1
    4bfc:	d2f2      	bcs.n	4be4 <z_prf+0x8e0>
				count += width;
    4bfe:	9902      	ldr	r1, [sp, #8]
    4c00:	4429      	add	r1, r5
    4c02:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    4c04:	4615      	mov	r5, r2
    4c06:	e512      	b.n	462e <z_prf+0x32a>
    4c08:	462a      	mov	r2, r5
    4c0a:	e7f6      	b.n	4bfa <z_prf+0x8f6>
    4c0c:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    4c0e:	f817 0b01 	ldrb.w	r0, [r7], #1
    4c12:	9b03      	ldr	r3, [sp, #12]
    4c14:	9207      	str	r2, [sp, #28]
    4c16:	4649      	mov	r1, r9
    4c18:	4798      	blx	r3
    4c1a:	3001      	adds	r0, #1
    4c1c:	9a07      	ldr	r2, [sp, #28]
    4c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4c20:	f47f ad07 	bne.w	4632 <z_prf+0x32e>
    4c24:	f7ff bb84 	b.w	4330 <z_prf+0x2c>
    4c28:	9307      	str	r3, [sp, #28]
				PUTC('0');
    4c2a:	4649      	mov	r1, r9
    4c2c:	9b03      	ldr	r3, [sp, #12]
    4c2e:	2030      	movs	r0, #48	; 0x30
    4c30:	4798      	blx	r3
    4c32:	3001      	adds	r0, #1
    4c34:	9b07      	ldr	r3, [sp, #28]
    4c36:	f47f acff 	bne.w	4638 <z_prf+0x334>
    4c3a:	f7ff bb79 	b.w	4330 <z_prf+0x2c>
					PUTC(c);
    4c3e:	9b03      	ldr	r3, [sp, #12]
    4c40:	4649      	mov	r1, r9
    4c42:	4798      	blx	r3
    4c44:	3001      	adds	r0, #1
    4c46:	f43f ab73 	beq.w	4330 <z_prf+0x2c>
					c = *++cptr;
    4c4a:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4c4e:	e4fe      	b.n	464e <z_prf+0x34a>
					PUTC('0');
    4c50:	9b03      	ldr	r3, [sp, #12]
    4c52:	4649      	mov	r1, r9
    4c54:	2030      	movs	r0, #48	; 0x30
    4c56:	4798      	blx	r3
    4c58:	3001      	adds	r0, #1
    4c5a:	f47f ad00 	bne.w	465e <z_prf+0x35a>
    4c5e:	f7ff bb67 	b.w	4330 <z_prf+0x2c>
					PUTC('0');
    4c62:	9b03      	ldr	r3, [sp, #12]
    4c64:	4649      	mov	r1, r9
    4c66:	2030      	movs	r0, #48	; 0x30
    4c68:	4798      	blx	r3
    4c6a:	3001      	adds	r0, #1
    4c6c:	f108 38ff 	add.w	r8, r8, #4294967295
    4c70:	f47f ad0f 	bne.w	4692 <z_prf+0x38e>
    4c74:	f7ff bb5c 	b.w	4330 <z_prf+0x2c>
					PUTC(c);
    4c78:	9b03      	ldr	r3, [sp, #12]
    4c7a:	4649      	mov	r1, r9
    4c7c:	4798      	blx	r3
    4c7e:	3001      	adds	r0, #1
    4c80:	f43f ab56 	beq.w	4330 <z_prf+0x2c>
					c = *++cptr;
    4c84:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4c88:	e50d      	b.n	46a6 <z_prf+0x3a2>
					PUTC('0');
    4c8a:	9b03      	ldr	r3, [sp, #12]
    4c8c:	4649      	mov	r1, r9
    4c8e:	2030      	movs	r0, #48	; 0x30
    4c90:	4798      	blx	r3
    4c92:	3001      	adds	r0, #1
    4c94:	f108 38ff 	add.w	r8, r8, #4294967295
    4c98:	f47f ad10 	bne.w	46bc <z_prf+0x3b8>
    4c9c:	f7ff bb48 	b.w	4330 <z_prf+0x2c>
				PUTC(*cptr++);
    4ca0:	f817 0b01 	ldrb.w	r0, [r7], #1
    4ca4:	9b03      	ldr	r3, [sp, #12]
    4ca6:	4649      	mov	r1, r9
    4ca8:	4798      	blx	r3
    4caa:	3001      	adds	r0, #1
    4cac:	f43f ab40 	beq.w	4330 <z_prf+0x2c>
			while (clen-- > 0) {
    4cb0:	1bf3      	subs	r3, r6, r7
    4cb2:	2b00      	cmp	r3, #0
    4cb4:	dcf4      	bgt.n	4ca0 <z_prf+0x99c>
			count += clen;
    4cb6:	9b02      	ldr	r3, [sp, #8]
    4cb8:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    4cba:	2d00      	cmp	r5, #0
			count += clen;
    4cbc:	4413      	add	r3, r2
    4cbe:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    4cc0:	f77f af03 	ble.w	4aca <z_prf+0x7c6>
    4cc4:	462c      	mov	r4, r5
    4cc6:	e006      	b.n	4cd6 <z_prf+0x9d2>
					PUTC(' ');
    4cc8:	9b03      	ldr	r3, [sp, #12]
    4cca:	4649      	mov	r1, r9
    4ccc:	2020      	movs	r0, #32
    4cce:	4798      	blx	r3
    4cd0:	3001      	adds	r0, #1
    4cd2:	f43f ab2d 	beq.w	4330 <z_prf+0x2c>
				while (width-- > 0) {
    4cd6:	3c01      	subs	r4, #1
    4cd8:	d2f6      	bcs.n	4cc8 <z_prf+0x9c4>
				count += width;
    4cda:	9b02      	ldr	r3, [sp, #8]
    4cdc:	442b      	add	r3, r5
    4cde:	9302      	str	r3, [sp, #8]
    4ce0:	e6f3      	b.n	4aca <z_prf+0x7c6>
    4ce2:	bf00      	nop

00004ce4 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    4ce4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4ce8:	460e      	mov	r6, r1
    4cea:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4cec:	2108      	movs	r1, #8
    4cee:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4cf0:	f01f ffeb 	bl	24cca <nvs_al_size.isra.0>

	*addr -= ate_size;
    4cf4:	6834      	ldr	r4, [r6, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    4cf6:	4b12      	ldr	r3, [pc, #72]	; (4d40 <nvs_recover_last_ate+0x5c>)
	*addr -= ate_size;
    4cf8:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4cfa:	4607      	mov	r7, r0
	*addr -= ate_size;
    4cfc:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    4cfe:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (!nvs_ate_crc8_check(&end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
    4d02:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
    4d04:	42ac      	cmp	r4, r5
    4d06:	d803      	bhi.n	4d10 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    4d08:	2000      	movs	r0, #0
}
    4d0a:	b003      	add	sp, #12
    4d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4d10:	2308      	movs	r3, #8
    4d12:	466a      	mov	r2, sp
    4d14:	4621      	mov	r1, r4
    4d16:	4640      	mov	r0, r8
    4d18:	f01f ff65 	bl	24be6 <nvs_flash_rd>
		if (rc) {
    4d1c:	2800      	cmp	r0, #0
    4d1e:	d1f4      	bne.n	4d0a <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    4d20:	4668      	mov	r0, sp
    4d22:	f01f ffbd 	bl	24ca0 <nvs_ate_crc8_check>
    4d26:	b940      	cbnz	r0, 4d3a <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    4d28:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    4d2c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    4d30:	6034      	str	r4, [r6, #0]
			data_end_addr &= ADDR_SECT_MASK;
    4d32:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    4d36:	4413      	add	r3, r2
    4d38:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    4d3a:	1be4      	subs	r4, r4, r7
    4d3c:	e7e2      	b.n	4d04 <nvs_recover_last_ate+0x20>
    4d3e:	bf00      	nop
    4d40:	ffff0000 	.word	0xffff0000

00004d44 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    4d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d48:	4605      	mov	r5, r0
    4d4a:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4d4c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4d4e:	2108      	movs	r1, #8
    4d50:	f01f ffbb 	bl	24cca <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    4d54:	686b      	ldr	r3, [r5, #4]
    4d56:	0c1b      	lsrs	r3, r3, #16
    4d58:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4d5a:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
    4d5c:	a903      	add	r1, sp, #12
    4d5e:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    4d60:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    4d62:	f01f ffbc 	bl	24cde <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4d66:	9b03      	ldr	r3, [sp, #12]
    4d68:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4d6a:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4d6c:	4419      	add	r1, r3
    4d6e:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4d72:	2308      	movs	r3, #8
    4d74:	4632      	mov	r2, r6
    4d76:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
    4d78:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4d7a:	f01f ff34 	bl	24be6 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    4d7e:	1e04      	subs	r4, r0, #0
    4d80:	f2c0 8099 	blt.w	4eb6 <nvs_gc+0x172>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    4d84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    4d86:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4d88:	2300      	movs	r3, #0
		if (data8[i] != value) {
    4d8a:	5cf1      	ldrb	r1, [r6, r3]
    4d8c:	4291      	cmp	r1, r2
    4d8e:	f040 8081 	bne.w	4e94 <nvs_gc+0x150>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4d92:	3301      	adds	r3, #1
    4d94:	2b08      	cmp	r3, #8
    4d96:	d1f8      	bne.n	4d8a <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    4d98:	9903      	ldr	r1, [sp, #12]
    4d9a:	4628      	mov	r0, r5
    4d9c:	f01f ffaa 	bl	24cf4 <nvs_flash_erase_sector>
    4da0:	4604      	mov	r4, r0
		if (rc) {
    4da2:	e088      	b.n	4eb6 <nvs_gc+0x172>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    4da4:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
    4da6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
    4daa:	0c1b      	lsrs	r3, r3, #16
    4dac:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    4dae:	4413      	add	r3, r2
    4db0:	9304      	str	r3, [sp, #16]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    4db2:	f8df b10c 	ldr.w	fp, [pc, #268]	; 4ec0 <nvs_gc+0x17c>
		gc_prev_addr = gc_addr;
    4db6:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    4dba:	aa08      	add	r2, sp, #32
    4dbc:	a904      	add	r1, sp, #16
    4dbe:	4628      	mov	r0, r5
    4dc0:	f01f ffc0 	bl	24d44 <nvs_prev_ate>
		if (rc) {
    4dc4:	4604      	mov	r4, r0
    4dc6:	2800      	cmp	r0, #0
    4dc8:	d175      	bne.n	4eb6 <nvs_gc+0x172>
		if (nvs_ate_crc8_check(&gc_ate)) {
    4dca:	a808      	add	r0, sp, #32
    4dcc:	f01f ff68 	bl	24ca0 <nvs_ate_crc8_check>
    4dd0:	2800      	cmp	r0, #0
    4dd2:	d136      	bne.n	4e42 <nvs_gc+0xfe>
		wlk_addr = fs->ate_wra;
    4dd4:	686b      	ldr	r3, [r5, #4]
    4dd6:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4dd8:	aa0a      	add	r2, sp, #40	; 0x28
    4dda:	a905      	add	r1, sp, #20
    4ddc:	4628      	mov	r0, r5
			wlk_prev_addr = wlk_addr;
    4dde:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4de0:	f01f ffb0 	bl	24d44 <nvs_prev_ate>
			if (rc) {
    4de4:	4604      	mov	r4, r0
    4de6:	2800      	cmp	r0, #0
    4de8:	d165      	bne.n	4eb6 <nvs_gc+0x172>
			if ((wlk_ate.id == gc_ate.id) &&
    4dea:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    4dee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4df2:	429a      	cmp	r2, r3
    4df4:	d028      	beq.n	4e48 <nvs_gc+0x104>
		} while (wlk_addr != fs->ate_wra);
    4df6:	686a      	ldr	r2, [r5, #4]
    4df8:	9b05      	ldr	r3, [sp, #20]
    4dfa:	429a      	cmp	r2, r3
    4dfc:	d1ec      	bne.n	4dd8 <nvs_gc+0x94>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    4dfe:	4556      	cmp	r6, sl
    4e00:	d11f      	bne.n	4e42 <nvs_gc+0xfe>
    4e02:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4e06:	b1e3      	cbz	r3, 4e42 <nvs_gc+0xfe>
			data_addr += gc_ate.offset;
    4e08:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    4e0c:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
    4e10:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    4e12:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    4e14:	68ab      	ldr	r3, [r5, #8]
    4e16:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    4e1a:	f01f ff4d 	bl	24cb8 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    4e1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    4e20:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    4e24:	681e      	ldr	r6, [r3, #0]
    4e26:	4276      	negs	r6, r6
	block_size =
    4e28:	f006 0320 	and.w	r3, r6, #32
    4e2c:	9301      	str	r3, [sp, #4]
	while (len) {
    4e2e:	f1b9 0f00 	cmp.w	r9, #0
    4e32:	d10f      	bne.n	4e54 <nvs_gc+0x110>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    4e34:	a908      	add	r1, sp, #32
    4e36:	4628      	mov	r0, r5
    4e38:	f020 f81c 	bl	24e74 <nvs_flash_ate_wrt>
			if (rc) {
    4e3c:	4604      	mov	r4, r0
    4e3e:	2800      	cmp	r0, #0
    4e40:	d139      	bne.n	4eb6 <nvs_gc+0x172>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    4e42:	45c2      	cmp	sl, r8
    4e44:	d1b7      	bne.n	4db6 <nvs_gc+0x72>
    4e46:	e7a7      	b.n	4d98 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    4e48:	a80a      	add	r0, sp, #40	; 0x28
    4e4a:	f01f ff29 	bl	24ca0 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    4e4e:	2800      	cmp	r0, #0
    4e50:	d1d1      	bne.n	4df6 <nvs_gc+0xb2>
    4e52:	e7d4      	b.n	4dfe <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
    4e54:	9b01      	ldr	r3, [sp, #4]
    4e56:	454b      	cmp	r3, r9
    4e58:	bf28      	it	cs
    4e5a:	464b      	movcs	r3, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    4e5c:	aa0c      	add	r2, sp, #48	; 0x30
    4e5e:	4639      	mov	r1, r7
    4e60:	4628      	mov	r0, r5
		bytes_to_copy = MIN(block_size, len);
    4e62:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    4e64:	f01f febf 	bl	24be6 <nvs_flash_rd>
		if (rc) {
    4e68:	4604      	mov	r4, r0
    4e6a:	bb20      	cbnz	r0, 4eb6 <nvs_gc+0x172>
	if (!len) {
    4e6c:	b136      	cbz	r6, 4e7c <nvs_gc+0x138>
    4e6e:	68a9      	ldr	r1, [r5, #8]
    4e70:	4633      	mov	r3, r6
    4e72:	aa0c      	add	r2, sp, #48	; 0x30
    4e74:	4628      	mov	r0, r5
    4e76:	f01f ffb5 	bl	24de4 <nvs_flash_al_wrt.part.0>
    4e7a:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
    4e7c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4e7e:	4631      	mov	r1, r6
    4e80:	f01f ff23 	bl	24cca <nvs_al_size.isra.0>
    4e84:	68aa      	ldr	r2, [r5, #8]
    4e86:	4402      	add	r2, r0
    4e88:	60aa      	str	r2, [r5, #8]
		if (rc) {
    4e8a:	b9a4      	cbnz	r4, 4eb6 <nvs_gc+0x172>
		len -= bytes_to_copy;
    4e8c:	eba9 0906 	sub.w	r9, r9, r6
		addr += bytes_to_copy;
    4e90:	4437      	add	r7, r6
    4e92:	e7cc      	b.n	4e2e <nvs_gc+0xea>
	stop_addr = gc_addr - ate_size;
    4e94:	9804      	ldr	r0, [sp, #16]
    4e96:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    4e9a:	4630      	mov	r0, r6
    4e9c:	f01f ff00 	bl	24ca0 <nvs_ate_crc8_check>
    4ea0:	2800      	cmp	r0, #0
    4ea2:	f43f af7f 	beq.w	4da4 <nvs_gc+0x60>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    4ea6:	a904      	add	r1, sp, #16
    4ea8:	4628      	mov	r0, r5
    4eaa:	f7ff ff1b 	bl	4ce4 <nvs_recover_last_ate>
		if (rc) {
    4eae:	4604      	mov	r4, r0
    4eb0:	2800      	cmp	r0, #0
    4eb2:	f43f af7e 	beq.w	4db2 <nvs_gc+0x6e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    4eb6:	4620      	mov	r0, r4
    4eb8:	b015      	add	sp, #84	; 0x54
    4eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4ebe:	bf00      	nop
    4ec0:	ffff0000 	.word	0xffff0000

00004ec4 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    4ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ec8:	4604      	mov	r4, r0
    4eca:	b086      	sub	sp, #24
    4ecc:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    4ece:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    4ed2:	4630      	mov	r0, r6
    4ed4:	f028 f93e 	bl	2d154 <z_impl_k_mutex_init>
    4ed8:	4628      	mov	r0, r5
    4eda:	f01d ffb1 	bl	22e40 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    4ede:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    4ee0:	2800      	cmp	r0, #0
    4ee2:	f000 80d4 	beq.w	508e <nvs_init+0x1ca>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    4ee6:	6883      	ldr	r3, [r0, #8]
    4ee8:	691b      	ldr	r3, [r3, #16]
    4eea:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    4eec:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    4eee:	b928      	cbnz	r0, 4efc <nvs_init+0x38>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
    4ef0:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    4ef4:	4628      	mov	r0, r5
    4ef6:	b006      	add	sp, #24
    4ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
    4efc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    4efe:	6883      	ldr	r3, [r0, #8]
    4f00:	691b      	ldr	r3, [r3, #16]
    4f02:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    4f04:	6803      	ldr	r3, [r0, #0]
    4f06:	3b01      	subs	r3, #1
    4f08:	2b1f      	cmp	r3, #31
    4f0a:	d8f1      	bhi.n	4ef0 <nvs_init+0x2c>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    4f0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f0e:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    4f10:	aa03      	add	r2, sp, #12
    4f12:	f027 ff28 	bl	2cd66 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    4f16:	2800      	cmp	r0, #0
    4f18:	d1ea      	bne.n	4ef0 <nvs_init+0x2c>
	if (!fs->sector_size || fs->sector_size % info.size) {
    4f1a:	89a3      	ldrh	r3, [r4, #12]
    4f1c:	2b00      	cmp	r3, #0
    4f1e:	d0e7      	beq.n	4ef0 <nvs_init+0x2c>
    4f20:	9a04      	ldr	r2, [sp, #16]
    4f22:	fbb3 f5f2 	udiv	r5, r3, r2
    4f26:	fb02 3515 	mls	r5, r2, r5, r3
    4f2a:	2d00      	cmp	r5, #0
    4f2c:	d1e0      	bne.n	4ef0 <nvs_init+0x2c>
	if (fs->sector_count < 2) {
    4f2e:	89e3      	ldrh	r3, [r4, #14]
    4f30:	2b01      	cmp	r3, #1
    4f32:	d9dd      	bls.n	4ef0 <nvs_init+0x2c>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    4f34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    4f36:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    4f38:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    4f3c:	f04f 32ff 	mov.w	r2, #4294967295
    4f40:	f04f 33ff 	mov.w	r3, #4294967295
    4f44:	4630      	mov	r0, r6
    4f46:	f01e f93f 	bl	231c8 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4f4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4f4c:	2108      	movs	r1, #8
    4f4e:	f01f febc 	bl	24cca <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    4f52:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4f54:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    4f56:	89e3      	ldrh	r3, [r4, #14]
    4f58:	fa1f fa85 	uxth.w	sl, r5
    4f5c:	4553      	cmp	r3, sl
    4f5e:	d852      	bhi.n	5006 <nvs_init+0x142>
	if (closed_sectors == fs->sector_count) {
    4f60:	89e3      	ldrh	r3, [r4, #14]
    4f62:	4543      	cmp	r3, r8
    4f64:	f000 8090 	beq.w	5088 <nvs_init+0x1c4>
	if (i == fs->sector_count) {
    4f68:	4553      	cmp	r3, sl
    4f6a:	d10b      	bne.n	4f84 <nvs_init+0xc0>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    4f6c:	9900      	ldr	r1, [sp, #0]
    4f6e:	2308      	movs	r3, #8
    4f70:	464a      	mov	r2, r9
    4f72:	1bc9      	subs	r1, r1, r7
    4f74:	4620      	mov	r0, r4
    4f76:	f01f fe6e 	bl	24c56 <nvs_flash_cmp_const>
		if (!rc) {
    4f7a:	b918      	cbnz	r0, 4f84 <nvs_init+0xc0>
			nvs_sector_advance(fs, &addr);
    4f7c:	89e0      	ldrh	r0, [r4, #14]
    4f7e:	4669      	mov	r1, sp
    4f80:	f01f fead 	bl	24cde <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    4f84:	9b00      	ldr	r3, [sp, #0]
    4f86:	1bda      	subs	r2, r3, r7
    4f88:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    4f8a:	4a4f      	ldr	r2, [pc, #316]	; (50c8 <nvs_init+0x204>)
    4f8c:	4013      	ands	r3, r2
    4f8e:	60a3      	str	r3, [r4, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    4f90:	4690      	mov	r8, r2
	while (fs->ate_wra >= fs->data_wra) {
    4f92:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    4f96:	4299      	cmp	r1, r3
    4f98:	d30e      	bcc.n	4fb8 <nvs_init+0xf4>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4f9a:	2308      	movs	r3, #8
    4f9c:	aa01      	add	r2, sp, #4
    4f9e:	4620      	mov	r0, r4
    4fa0:	f01f fe21 	bl	24be6 <nvs_flash_rd>
		if (rc) {
    4fa4:	4605      	mov	r5, r0
    4fa6:	bb28      	cbnz	r0, 4ff4 <nvs_init+0x130>
    4fa8:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    4faa:	f813 2b01 	ldrb.w	r2, [r3], #1
    4fae:	4591      	cmp	r9, r2
    4fb0:	d170      	bne.n	5094 <nvs_init+0x1d0>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4fb2:	3501      	adds	r5, #1
    4fb4:	2d08      	cmp	r5, #8
    4fb6:	d1f8      	bne.n	4faa <nvs_init+0xe6>
	while (fs->ate_wra > fs->data_wra) {
    4fb8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    4fbc:	428b      	cmp	r3, r1
    4fbe:	d907      	bls.n	4fd0 <nvs_init+0x10c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    4fc0:	1a5b      	subs	r3, r3, r1
    4fc2:	464a      	mov	r2, r9
    4fc4:	4620      	mov	r0, r4
    4fc6:	f01f fe46 	bl	24c56 <nvs_flash_cmp_const>
		if (rc < 0) {
    4fca:	1e05      	subs	r5, r0, #0
    4fcc:	db12      	blt.n	4ff4 <nvs_init+0x130>
		if (!rc) {
    4fce:	d13d      	bne.n	504c <nvs_init+0x188>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4fd0:	6863      	ldr	r3, [r4, #4]
    4fd2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 50c8 <nvs_init+0x204>
	nvs_sector_advance(fs, &addr);
    4fd6:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4fd8:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    4fdc:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    4fde:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    4fe0:	f01f fe7d 	bl	24cde <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    4fe4:	89a3      	ldrh	r3, [r4, #12]
    4fe6:	9900      	ldr	r1, [sp, #0]
    4fe8:	464a      	mov	r2, r9
    4fea:	4620      	mov	r0, r4
    4fec:	f01f fe33 	bl	24c56 <nvs_flash_cmp_const>
	if (rc < 0) {
    4ff0:	1e05      	subs	r5, r0, #0
    4ff2:	da31      	bge.n	5058 <nvs_init+0x194>
	return z_impl_k_mutex_unlock(mutex);
    4ff4:	4630      	mov	r0, r6
    4ff6:	f01e f95f 	bl	232b8 <z_impl_k_mutex_unlock>
	if (rc) {
    4ffa:	2d00      	cmp	r5, #0
    4ffc:	f47f af7a 	bne.w	4ef4 <nvs_init+0x30>
	fs->ready = true;
    5000:	2301      	movs	r3, #1
    5002:	7423      	strb	r3, [r4, #16]
	return 0;
    5004:	e776      	b.n	4ef4 <nvs_init+0x30>
		       (uint16_t)(fs->sector_size - ate_size);
    5006:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    5008:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    500a:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    500c:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5010:	464a      	mov	r2, r9
    5012:	2308      	movs	r3, #8
    5014:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    5016:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5018:	f01f fe1d 	bl	24c56 <nvs_flash_cmp_const>
		if (rc) {
    501c:	b178      	cbz	r0, 503e <nvs_init+0x17a>
			nvs_sector_advance(fs, &addr);
    501e:	89e0      	ldrh	r0, [r4, #14]
    5020:	4669      	mov	r1, sp
    5022:	f01f fe5c 	bl	24cde <nvs_sector_advance.isra.0>
			closed_sectors++;
    5026:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    502a:	9900      	ldr	r1, [sp, #0]
    502c:	2308      	movs	r3, #8
    502e:	464a      	mov	r2, r9
    5030:	4620      	mov	r0, r4
			closed_sectors++;
    5032:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    5036:	f01f fe0e 	bl	24c56 <nvs_flash_cmp_const>
			if (!rc) {
    503a:	2800      	cmp	r0, #0
    503c:	d090      	beq.n	4f60 <nvs_init+0x9c>
	for (i = 0; i < fs->sector_count; i++) {
    503e:	3501      	adds	r5, #1
    5040:	e789      	b.n	4f56 <nvs_init+0x92>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    5042:	2d00      	cmp	r5, #0
    5044:	d03c      	beq.n	50c0 <nvs_init+0x1fc>
				rc = -ESPIPE;
    5046:	f06f 051c 	mvn.w	r5, #28
    504a:	e7d3      	b.n	4ff4 <nvs_init+0x130>
		fs->data_wra += fs->flash_parameters->write_block_size;
    504c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    504e:	68a3      	ldr	r3, [r4, #8]
    5050:	6812      	ldr	r2, [r2, #0]
    5052:	4413      	add	r3, r2
    5054:	60a3      	str	r3, [r4, #8]
    5056:	e7af      	b.n	4fb8 <nvs_init+0xf4>
	if (rc) {
    5058:	d0cc      	beq.n	4ff4 <nvs_init+0x130>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    505a:	6861      	ldr	r1, [r4, #4]
    505c:	4620      	mov	r0, r4
    505e:	f01f fe49 	bl	24cf4 <nvs_flash_erase_sector>
		if (rc) {
    5062:	4605      	mov	r5, r0
    5064:	2800      	cmp	r0, #0
    5066:	d1c5      	bne.n	4ff4 <nvs_init+0x130>
		fs->ate_wra &= ADDR_SECT_MASK;
    5068:	6860      	ldr	r0, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    506a:	89a3      	ldrh	r3, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    506c:	ea00 0008 	and.w	r0, r0, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    5070:	4418      	add	r0, r3
    5072:	eba0 0047 	sub.w	r0, r0, r7, lsl #1
    5076:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    5078:	ea00 0008 	and.w	r0, r0, r8
    507c:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    507e:	4620      	mov	r0, r4
    5080:	f7ff fe60 	bl	4d44 <nvs_gc>
    5084:	4605      	mov	r5, r0
end:
    5086:	e7b5      	b.n	4ff4 <nvs_init+0x130>
		rc = -EDEADLK;
    5088:	f06f 0520 	mvn.w	r5, #32
    508c:	e7b2      	b.n	4ff4 <nvs_init+0x130>
		return -ENXIO;
    508e:	f06f 0505 	mvn.w	r5, #5
    5092:	e72f      	b.n	4ef4 <nvs_init+0x30>
		if (!nvs_ate_crc8_check(&last_ate)) {
    5094:	a801      	add	r0, sp, #4
    5096:	f01f fe03 	bl	24ca0 <nvs_ate_crc8_check>
    509a:	6862      	ldr	r2, [r4, #4]
    509c:	b980      	cbnz	r0, 50c0 <nvs_init+0x1fc>
			fs->data_wra = addr & ADDR_SECT_MASK;
    509e:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += last_ate.offset;
    50a0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    50a4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    50a8:	ea03 0308 	and.w	r3, r3, r8
			fs->data_wra += last_ate.offset;
    50ac:	4403      	add	r3, r0
    50ae:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    50b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    50b2:	4629      	mov	r1, r5
    50b4:	f01f fe09 	bl	24cca <nvs_al_size.isra.0>
    50b8:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    50ba:	4293      	cmp	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    50bc:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    50be:	d0c0      	beq.n	5042 <nvs_init+0x17e>
		fs->ate_wra -= ate_size;
    50c0:	1bd2      	subs	r2, r2, r7
    50c2:	6062      	str	r2, [r4, #4]
    50c4:	e765      	b.n	4f92 <nvs_init+0xce>
    50c6:	bf00      	nop
    50c8:	ffff0000 	.word	0xffff0000

000050cc <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    50cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50d0:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    50d2:	7c03      	ldrb	r3, [r0, #16]
{
    50d4:	b089      	sub	sp, #36	; 0x24
    50d6:	4604      	mov	r4, r0
    50d8:	4689      	mov	r9, r1
    50da:	4690      	mov	r8, r2
	if (!fs->ready) {
    50dc:	2b00      	cmp	r3, #0
    50de:	f000 80c0 	beq.w	5262 <nvs_write+0x196>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    50e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    50e4:	2108      	movs	r1, #8
    50e6:	4618      	mov	r0, r3
    50e8:	f01f fdef 	bl	24cca <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    50ec:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    50ee:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    50f0:	4618      	mov	r0, r3
    50f2:	f01f fdea 	bl	24cca <nvs_al_size.isra.0>

	/* The maximum data size is sector size - 3 ate
	 * where: 1 ate for data, 1 ate for sector close
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    50f6:	89a3      	ldrh	r3, [r4, #12]
    50f8:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    50fc:	1a9b      	subs	r3, r3, r2
    50fe:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    5100:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    5102:	f0c0 80b1 	bcc.w	5268 <nvs_write+0x19c>
    5106:	b11e      	cbz	r6, 5110 <nvs_write+0x44>
	    ((len > 0) && (data == NULL))) {
    5108:	f1b8 0f00 	cmp.w	r8, #0
    510c:	f000 80ac 	beq.w	5268 <nvs_write+0x19c>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
    5110:	6863      	ldr	r3, [r4, #4]
    5112:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;

	while (1) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    5114:	aa04      	add	r2, sp, #16
    5116:	a903      	add	r1, sp, #12
    5118:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    511a:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    511e:	f01f fe11 	bl	24d44 <nvs_prev_ate>
		if (rc) {
    5122:	4605      	mov	r5, r0
    5124:	2800      	cmp	r0, #0
    5126:	d165      	bne.n	51f4 <nvs_write+0x128>
			return rc;
		}
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    5128:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    512c:	454b      	cmp	r3, r9
    512e:	d005      	beq.n	513c <nvs_write+0x70>
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
    5130:	6862      	ldr	r2, [r4, #4]
    5132:	9b03      	ldr	r3, [sp, #12]
    5134:	429a      	cmp	r2, r3
    5136:	d1ed      	bne.n	5114 <nvs_write+0x48>
				return rc;
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
    5138:	b9de      	cbnz	r6, 5172 <nvs_write+0xa6>
    513a:	e05b      	b.n	51f4 <nvs_write+0x128>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    513c:	a804      	add	r0, sp, #16
    513e:	f01f fdaf 	bl	24ca0 <nvs_ate_crc8_check>
    5142:	2800      	cmp	r0, #0
    5144:	d1f4      	bne.n	5130 <nvs_write+0x64>
		if (len == 0) {
    5146:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    514a:	b186      	cbz	r6, 516e <nvs_write+0xa2>
		} else if (len == wlk_ate.len) {
    514c:	42b3      	cmp	r3, r6
    514e:	d110      	bne.n	5172 <nvs_write+0xa6>
		rd_addr += wlk_ate.offset;
    5150:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    5154:	ea4f 411b 	mov.w	r1, fp, lsr #16
    5158:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    515a:	4401      	add	r1, r0
    515c:	4633      	mov	r3, r6
    515e:	4642      	mov	r2, r8
    5160:	4620      	mov	r0, r4
    5162:	f01f fd4e 	bl	24c02 <nvs_flash_block_cmp>
			if (rc <= 0) {
    5166:	2800      	cmp	r0, #0
    5168:	dc03      	bgt.n	5172 <nvs_write+0xa6>
    516a:	4605      	mov	r5, r0
    516c:	e042      	b.n	51f4 <nvs_write+0x128>
			if (wlk_ate.len == 0U) {
    516e:	2b00      	cmp	r3, #0
    5170:	d040      	beq.n	51f4 <nvs_write+0x128>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
    5172:	2f00      	cmp	r7, #0
    5174:	d142      	bne.n	51fc <nvs_write+0x130>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    5176:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    517a:	f04f 32ff 	mov.w	r2, #4294967295
    517e:	f04f 33ff 	mov.w	r3, #4294967295
    5182:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
    5184:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 5274 <nvs_write+0x1a8>
    5188:	f01e f81e 	bl	231c8 <z_impl_k_mutex_lock>

	gc_count = 0;
    518c:	2200      	movs	r2, #0
	while (1) {
		if (gc_count == fs->sector_count) {
    518e:	89e3      	ldrh	r3, [r4, #14]
    5190:	429a      	cmp	r2, r3
    5192:	d063      	beq.n	525c <nvs_write+0x190>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= fs->data_wra + required_space) {
    5194:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    5198:	1878      	adds	r0, r7, r1
    519a:	4283      	cmp	r3, r0
    519c:	d331      	bcc.n	5202 <nvs_write+0x136>
	entry.part = 0xff;
    519e:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    51a0:	a806      	add	r0, sp, #24
	entry.id = id;
    51a2:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    51a6:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
    51aa:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    51ae:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    51b2:	f01f fd81 	bl	24cb8 <nvs_ate_crc8_update>
	if (!len) {
    51b6:	b136      	cbz	r6, 51c6 <nvs_write+0xfa>
    51b8:	68a1      	ldr	r1, [r4, #8]
    51ba:	4633      	mov	r3, r6
    51bc:	4642      	mov	r2, r8
    51be:	4620      	mov	r0, r4
    51c0:	f01f fe10 	bl	24de4 <nvs_flash_al_wrt.part.0>
    51c4:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    51c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    51c8:	4631      	mov	r1, r6
    51ca:	f01f fd7e 	bl	24cca <nvs_al_size.isra.0>
    51ce:	68a3      	ldr	r3, [r4, #8]
    51d0:	4403      	add	r3, r0
    51d2:	60a3      	str	r3, [r4, #8]
	if (rc) {
    51d4:	2d00      	cmp	r5, #0
    51d6:	d14a      	bne.n	526e <nvs_write+0x1a2>
	rc = nvs_flash_ate_wrt(fs, &entry);
    51d8:	a906      	add	r1, sp, #24
    51da:	4620      	mov	r0, r4
    51dc:	f01f fe4a 	bl	24e74 <nvs_flash_ate_wrt>
	if (rc) {
    51e0:	4605      	mov	r5, r0
    51e2:	2800      	cmp	r0, #0
    51e4:	d143      	bne.n	526e <nvs_write+0x1a2>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
    51e6:	4633      	mov	r3, r6
    51e8:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    51ea:	4650      	mov	r0, sl
    51ec:	f01e f864 	bl	232b8 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
    51f0:	9b01      	ldr	r3, [sp, #4]
    51f2:	461d      	mov	r5, r3
}
    51f4:	4628      	mov	r0, r5
    51f6:	b009      	add	sp, #36	; 0x24
    51f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		required_space = data_size + ate_size;
    51fc:	4457      	add	r7, sl
    51fe:	b2bf      	uxth	r7, r7
    5200:	e7b9      	b.n	5176 <nvs_write+0xaa>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5202:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5204:	9201      	str	r2, [sp, #4]
    5206:	2108      	movs	r1, #8
    5208:	f01f fd5f 	bl	24cca <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    520c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5210:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    5214:	2100      	movs	r1, #0
    5216:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    521a:	1819      	adds	r1, r3, r0
    521c:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    5220:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    5222:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    5226:	440b      	add	r3, r1
    5228:	1a18      	subs	r0, r3, r0
    522a:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    522c:	a806      	add	r0, sp, #24
    522e:	f01f fd43 	bl	24cb8 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    5232:	a906      	add	r1, sp, #24
    5234:	4620      	mov	r0, r4
    5236:	f01f fe1d 	bl	24e74 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    523a:	89e0      	ldrh	r0, [r4, #14]
    523c:	1d21      	adds	r1, r4, #4
    523e:	f01f fd4e 	bl	24cde <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    5242:	6863      	ldr	r3, [r4, #4]
    5244:	ea03 030b 	and.w	r3, r3, fp
    5248:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    524a:	4620      	mov	r0, r4
    524c:	f7ff fd7a 	bl	4d44 <nvs_gc>
		if (rc) {
    5250:	4603      	mov	r3, r0
    5252:	2800      	cmp	r0, #0
    5254:	d1c8      	bne.n	51e8 <nvs_write+0x11c>
		gc_count++;
    5256:	9a01      	ldr	r2, [sp, #4]
    5258:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
    525a:	e798      	b.n	518e <nvs_write+0xc2>
			rc = -ENOSPC;
    525c:	f06f 031b 	mvn.w	r3, #27
    5260:	e7c2      	b.n	51e8 <nvs_write+0x11c>
		return -EACCES;
    5262:	f06f 050c 	mvn.w	r5, #12
    5266:	e7c5      	b.n	51f4 <nvs_write+0x128>
		return -EINVAL;
    5268:	f06f 0515 	mvn.w	r5, #21
    526c:	e7c2      	b.n	51f4 <nvs_write+0x128>
			if (rc) {
    526e:	462b      	mov	r3, r5
    5270:	e7ba      	b.n	51e8 <nvs_write+0x11c>
    5272:	bf00      	nop
    5274:	ffff0000 	.word	0xffff0000

00005278 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    5278:	4b09      	ldr	r3, [pc, #36]	; (52a0 <get_flash_area_from_id+0x28>)
{
    527a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    527c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    527e:	4b09      	ldr	r3, [pc, #36]	; (52a4 <get_flash_area_from_id+0x2c>)
{
    5280:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    5282:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    5284:	2300      	movs	r3, #0
    5286:	429d      	cmp	r5, r3
    5288:	dc01      	bgt.n	528e <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    528a:	2000      	movs	r0, #0
}
    528c:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    528e:	0119      	lsls	r1, r3, #4
    5290:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    5294:	5c61      	ldrb	r1, [r4, r1]
    5296:	4291      	cmp	r1, r2
    5298:	d0f8      	beq.n	528c <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    529a:	3301      	adds	r3, #1
    529c:	e7f3      	b.n	5286 <get_flash_area_from_id+0xe>
    529e:	bf00      	nop
    52a0:	0002de14 	.word	0x0002de14
    52a4:	20000338 	.word	0x20000338

000052a8 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    52a8:	4b08      	ldr	r3, [pc, #32]	; (52cc <flash_area_open+0x24>)
    52aa:	681b      	ldr	r3, [r3, #0]
{
    52ac:	b510      	push	{r4, lr}
    52ae:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    52b0:	b12b      	cbz	r3, 52be <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    52b2:	f7ff ffe1 	bl	5278 <get_flash_area_from_id>
	if (area == NULL) {
    52b6:	b128      	cbz	r0, 52c4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    52b8:	6020      	str	r0, [r4, #0]
	return 0;
    52ba:	2000      	movs	r0, #0
}
    52bc:	bd10      	pop	{r4, pc}
		return -EACCES;
    52be:	f06f 000c 	mvn.w	r0, #12
    52c2:	e7fb      	b.n	52bc <flash_area_open+0x14>
		return -ENOENT;
    52c4:	f06f 0001 	mvn.w	r0, #1
    52c8:	e7f8      	b.n	52bc <flash_area_open+0x14>
    52ca:	bf00      	nop
    52cc:	20000338 	.word	0x20000338

000052d0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    52d0:	b530      	push	{r4, r5, lr}
    52d2:	b089      	sub	sp, #36	; 0x24
    52d4:	460c      	mov	r4, r1
    52d6:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    52d8:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    52da:	f7ff ffcd 	bl	5278 <get_flash_area_from_id>
	if (fa == NULL) {
    52de:	b1b8      	cbz	r0, 5310 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    52e0:	6843      	ldr	r3, [r0, #4]
    52e2:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    52e4:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    52e6:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    52e8:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    52ea:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    52ee:	2300      	movs	r3, #0
	cb_data->status = 0;
    52f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    52f4:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    52f6:	f01f fe2f 	bl	24f58 <device_get_binding>
	if (flash_dev == NULL) {
    52fa:	b160      	cbz	r0, 5316 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    52fc:	4907      	ldr	r1, [pc, #28]	; (531c <flash_area_get_sectors+0x4c>)
    52fe:	aa01      	add	r2, sp, #4
    5300:	f027 fd35 	bl	2cd6e <flash_page_foreach>
	if (cb_data->status == 0) {
    5304:	9807      	ldr	r0, [sp, #28]
    5306:	b908      	cbnz	r0, 530c <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    5308:	9b05      	ldr	r3, [sp, #20]
    530a:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    530c:	b009      	add	sp, #36	; 0x24
    530e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    5310:	f06f 0015 	mvn.w	r0, #21
    5314:	e7fa      	b.n	530c <flash_area_get_sectors+0x3c>
		return -ENODEV;
    5316:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    531a:	e7f7      	b.n	530c <flash_area_get_sectors+0x3c>
    531c:	00024f5d 	.word	0x00024f5d

00005320 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    5320:	4b10      	ldr	r3, [pc, #64]	; (5364 <settings_save_one+0x44>)
{
    5322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    5326:	681c      	ldr	r4, [r3, #0]
{
    5328:	4605      	mov	r5, r0
    532a:	460e      	mov	r6, r1
    532c:	4617      	mov	r7, r2
	if (!cs) {
    532e:	b1ac      	cbz	r4, 535c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    5330:	f04f 32ff 	mov.w	r2, #4294967295
    5334:	f04f 33ff 	mov.w	r3, #4294967295
    5338:	480b      	ldr	r0, [pc, #44]	; (5368 <settings_save_one+0x48>)
    533a:	f01d ff45 	bl	231c8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    533e:	6863      	ldr	r3, [r4, #4]
    5340:	4632      	mov	r2, r6
    5342:	f8d3 8008 	ldr.w	r8, [r3, #8]
    5346:	4629      	mov	r1, r5
    5348:	463b      	mov	r3, r7
    534a:	4620      	mov	r0, r4
    534c:	47c0      	blx	r8
    534e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    5350:	4805      	ldr	r0, [pc, #20]	; (5368 <settings_save_one+0x48>)
    5352:	f01d ffb1 	bl	232b8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    5356:	4620      	mov	r0, r4
    5358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    535c:	f06f 0401 	mvn.w	r4, #1
    5360:	e7f9      	b.n	5356 <settings_save_one+0x36>
    5362:	bf00      	nop
    5364:	200020c0 	.word	0x200020c0
    5368:	20000d88 	.word	0x20000d88

0000536c <settings_src_register>:
	parent->next = child;
    536c:	2300      	movs	r3, #0
    536e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    5370:	4b04      	ldr	r3, [pc, #16]	; (5384 <settings_src_register+0x18>)
    5372:	685a      	ldr	r2, [r3, #4]
    5374:	b912      	cbnz	r2, 537c <settings_src_register+0x10>
	list->head = node;
    5376:	e9c3 0000 	strd	r0, r0, [r3]
}
    537a:	4770      	bx	lr
	parent->next = child;
    537c:	6010      	str	r0, [r2, #0]
	list->tail = node;
    537e:	6058      	str	r0, [r3, #4]
}
    5380:	4770      	bx	lr
    5382:	bf00      	nop
    5384:	200020b8 	.word	0x200020b8

00005388 <settings_dst_register>:
	settings_save_dst = cs;
    5388:	4b01      	ldr	r3, [pc, #4]	; (5390 <settings_dst_register+0x8>)
    538a:	6018      	str	r0, [r3, #0]
}
    538c:	4770      	bx	lr
    538e:	bf00      	nop
    5390:	200020c0 	.word	0x200020c0

00005394 <settings_load_subtree>:
{
    5394:	b530      	push	{r4, r5, lr}
    5396:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    5398:	2300      	movs	r3, #0
{
    539a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    539c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    53a0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    53a2:	f04f 33ff 	mov.w	r3, #4294967295
    53a6:	480c      	ldr	r0, [pc, #48]	; (53d8 <settings_load_subtree+0x44>)
    53a8:	f04f 32ff 	mov.w	r2, #4294967295
    53ac:	f01d ff0c 	bl	231c8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    53b0:	4b0a      	ldr	r3, [pc, #40]	; (53dc <settings_load_subtree+0x48>)
    53b2:	681c      	ldr	r4, [r3, #0]
    53b4:	b134      	cbz	r4, 53c4 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    53b6:	6863      	ldr	r3, [r4, #4]
    53b8:	4620      	mov	r0, r4
    53ba:	681b      	ldr	r3, [r3, #0]
    53bc:	a901      	add	r1, sp, #4
    53be:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    53c0:	6824      	ldr	r4, [r4, #0]
	return node->next;
    53c2:	e7f7      	b.n	53b4 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    53c4:	4628      	mov	r0, r5
    53c6:	f000 f885 	bl	54d4 <settings_commit_subtree>
    53ca:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    53cc:	4802      	ldr	r0, [pc, #8]	; (53d8 <settings_load_subtree+0x44>)
    53ce:	f01d ff73 	bl	232b8 <z_impl_k_mutex_unlock>
}
    53d2:	4620      	mov	r0, r4
    53d4:	b005      	add	sp, #20
    53d6:	bd30      	pop	{r4, r5, pc}
    53d8:	20000d88 	.word	0x20000d88
    53dc:	200020b8 	.word	0x200020b8

000053e0 <settings_load_subtree_direct>:
{
    53e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    53e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
    53e6:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    53e8:	f04f 33ff 	mov.w	r3, #4294967295
    53ec:	480a      	ldr	r0, [pc, #40]	; (5418 <settings_load_subtree_direct+0x38>)
    53ee:	f04f 32ff 	mov.w	r2, #4294967295
    53f2:	f01d fee9 	bl	231c8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    53f6:	4b09      	ldr	r3, [pc, #36]	; (541c <settings_load_subtree_direct+0x3c>)
    53f8:	681c      	ldr	r4, [r3, #0]
    53fa:	b134      	cbz	r4, 540a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    53fc:	6863      	ldr	r3, [r4, #4]
    53fe:	4620      	mov	r0, r4
    5400:	681b      	ldr	r3, [r3, #0]
    5402:	a901      	add	r1, sp, #4
    5404:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5406:	6824      	ldr	r4, [r4, #0]
	return node->next;
    5408:	e7f7      	b.n	53fa <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    540a:	4803      	ldr	r0, [pc, #12]	; (5418 <settings_load_subtree_direct+0x38>)
    540c:	f01d ff54 	bl	232b8 <z_impl_k_mutex_unlock>
}
    5410:	2000      	movs	r0, #0
    5412:	b004      	add	sp, #16
    5414:	bd10      	pop	{r4, pc}
    5416:	bf00      	nop
    5418:	20000d88 	.word	0x20000d88
    541c:	200020b8 	.word	0x200020b8

00005420 <settings_store_init>:
	list->head = NULL;
    5420:	4b02      	ldr	r3, [pc, #8]	; (542c <settings_store_init+0xc>)
    5422:	2200      	movs	r2, #0
	list->tail = NULL;
    5424:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    5428:	4770      	bx	lr
    542a:	bf00      	nop
    542c:	200020b8 	.word	0x200020b8

00005430 <settings_init>:
	list->head = NULL;
    5430:	4b02      	ldr	r3, [pc, #8]	; (543c <settings_init+0xc>)
    5432:	2200      	movs	r2, #0
	list->tail = NULL;
    5434:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    5438:	f7ff bff2 	b.w	5420 <settings_store_init>
    543c:	200020c4 	.word	0x200020c4

00005440 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    5440:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5444:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    5446:	460e      	mov	r6, r1
    5448:	b109      	cbz	r1, 544e <settings_parse_and_lookup+0xe>
		*next = NULL;
    544a:	2300      	movs	r3, #0
    544c:	600b      	str	r3, [r1, #0]
    544e:	4c1e      	ldr	r4, [pc, #120]	; (54c8 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5450:	f8df 807c 	ldr.w	r8, [pc, #124]	; 54d0 <settings_parse_and_lookup+0x90>
    5454:	2500      	movs	r5, #0
    5456:	4544      	cmp	r4, r8
    5458:	d308      	bcc.n	546c <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    545a:	4b1c      	ldr	r3, [pc, #112]	; (54cc <settings_parse_and_lookup+0x8c>)
    545c:	681c      	ldr	r4, [r3, #0]
    545e:	b10c      	cbz	r4, 5464 <settings_parse_and_lookup+0x24>
    5460:	3c14      	subs	r4, #20
    5462:	b9c4      	cbnz	r4, 5496 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    5464:	4628      	mov	r0, r5
    5466:	b002      	add	sp, #8
    5468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    546c:	6821      	ldr	r1, [r4, #0]
    546e:	aa01      	add	r2, sp, #4
    5470:	4638      	mov	r0, r7
    5472:	f01f fd98 	bl	24fa6 <settings_name_steq>
    5476:	b160      	cbz	r0, 5492 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    5478:	b925      	cbnz	r5, 5484 <settings_parse_and_lookup+0x44>
			if (next) {
    547a:	b10e      	cbz	r6, 5480 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    547c:	9b01      	ldr	r3, [sp, #4]
    547e:	6033      	str	r3, [r6, #0]
    5480:	4625      	mov	r5, r4
    5482:	e006      	b.n	5492 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    5484:	6829      	ldr	r1, [r5, #0]
    5486:	6820      	ldr	r0, [r4, #0]
    5488:	2200      	movs	r2, #0
    548a:	f01f fd8c 	bl	24fa6 <settings_name_steq>
    548e:	2800      	cmp	r0, #0
    5490:	d1f3      	bne.n	547a <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    5492:	3414      	adds	r4, #20
    5494:	e7df      	b.n	5456 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    5496:	6821      	ldr	r1, [r4, #0]
    5498:	aa01      	add	r2, sp, #4
    549a:	4638      	mov	r0, r7
    549c:	f01f fd83 	bl	24fa6 <settings_name_steq>
    54a0:	b160      	cbz	r0, 54bc <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    54a2:	b925      	cbnz	r5, 54ae <settings_parse_and_lookup+0x6e>
			if (next) {
    54a4:	b10e      	cbz	r6, 54aa <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    54a6:	9b01      	ldr	r3, [sp, #4]
    54a8:	6033      	str	r3, [r6, #0]
    54aa:	4625      	mov	r5, r4
    54ac:	e006      	b.n	54bc <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    54ae:	6829      	ldr	r1, [r5, #0]
    54b0:	6820      	ldr	r0, [r4, #0]
    54b2:	2200      	movs	r2, #0
    54b4:	f01f fd77 	bl	24fa6 <settings_name_steq>
    54b8:	2800      	cmp	r0, #0
    54ba:	d1f3      	bne.n	54a4 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    54bc:	f114 0f14 	cmn.w	r4, #20
    54c0:	d0d0      	beq.n	5464 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    54c2:	6964      	ldr	r4, [r4, #20]
    54c4:	e7cb      	b.n	545e <settings_parse_and_lookup+0x1e>
    54c6:	bf00      	nop
    54c8:	0002dbd0 	.word	0x0002dbd0
    54cc:	200020c4 	.word	0x200020c4
    54d0:	0002dc5c 	.word	0x0002dc5c

000054d4 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    54d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    54d6:	4c1a      	ldr	r4, [pc, #104]	; (5540 <settings_commit_subtree+0x6c>)
    54d8:	4f1a      	ldr	r7, [pc, #104]	; (5544 <settings_commit_subtree+0x70>)
{
    54da:	4606      	mov	r6, r0
	rc = 0;
    54dc:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    54de:	42bc      	cmp	r4, r7
    54e0:	d306      	bcc.n	54f0 <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    54e2:	4b19      	ldr	r3, [pc, #100]	; (5548 <settings_commit_subtree+0x74>)
    54e4:	681c      	ldr	r4, [r3, #0]
    54e6:	b10c      	cbz	r4, 54ec <settings_commit_subtree+0x18>
    54e8:	3c14      	subs	r4, #20
    54ea:	b99c      	cbnz	r4, 5514 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    54ec:	4628      	mov	r0, r5
    54ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    54f0:	b91e      	cbnz	r6, 54fa <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    54f2:	68e3      	ldr	r3, [r4, #12]
    54f4:	b94b      	cbnz	r3, 550a <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    54f6:	3414      	adds	r4, #20
    54f8:	e7f1      	b.n	54de <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    54fa:	6820      	ldr	r0, [r4, #0]
    54fc:	2200      	movs	r2, #0
    54fe:	4631      	mov	r1, r6
    5500:	f01f fd51 	bl	24fa6 <settings_name_steq>
    5504:	2800      	cmp	r0, #0
    5506:	d1f4      	bne.n	54f2 <settings_commit_subtree+0x1e>
    5508:	e7f5      	b.n	54f6 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    550a:	4798      	blx	r3
				rc = rc2;
    550c:	2d00      	cmp	r5, #0
    550e:	bf08      	it	eq
    5510:	4605      	moveq	r5, r0
    5512:	e7f0      	b.n	54f6 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5514:	b936      	cbnz	r6, 5524 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    5516:	68e3      	ldr	r3, [r4, #12]
    5518:	b963      	cbnz	r3, 5534 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    551a:	f114 0f14 	cmn.w	r4, #20
    551e:	d0e5      	beq.n	54ec <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5520:	6964      	ldr	r4, [r4, #20]
    5522:	e7e0      	b.n	54e6 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    5524:	6820      	ldr	r0, [r4, #0]
    5526:	2200      	movs	r2, #0
    5528:	4631      	mov	r1, r6
    552a:	f01f fd3c 	bl	24fa6 <settings_name_steq>
    552e:	2800      	cmp	r0, #0
    5530:	d1f1      	bne.n	5516 <settings_commit_subtree+0x42>
    5532:	e7f2      	b.n	551a <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    5534:	4798      	blx	r3
				rc = rc2;
    5536:	2d00      	cmp	r5, #0
    5538:	bf08      	it	eq
    553a:	4605      	moveq	r5, r0
    553c:	e7ed      	b.n	551a <settings_commit_subtree+0x46>
    553e:	bf00      	nop
    5540:	0002dbd0 	.word	0x0002dbd0
    5544:	0002dc5c 	.word	0x0002dc5c
    5548:	200020c4 	.word	0x200020c4

0000554c <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    554c:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    554e:	4c06      	ldr	r4, [pc, #24]	; (5568 <settings_subsys_init+0x1c>)
    5550:	7823      	ldrb	r3, [r4, #0]
    5552:	b93b      	cbnz	r3, 5564 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    5554:	f7ff ff6c 	bl	5430 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    5558:	f000 f864 	bl	5624 <settings_backend_init>

	if (!err) {
    555c:	b908      	cbnz	r0, 5562 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    555e:	2301      	movs	r3, #1
    5560:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    5562:	bd10      	pop	{r4, pc}
		return 0;
    5564:	2000      	movs	r0, #0
    5566:	e7fc      	b.n	5562 <settings_subsys_init+0x16>
    5568:	2000908a 	.word	0x2000908a

0000556c <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    556c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    5570:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    5572:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 5620 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    5576:	3401      	adds	r4, #1
{
    5578:	b098      	sub	sp, #96	; 0x60
    557a:	4680      	mov	r8, r0
    557c:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    557e:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    5580:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    5584:	1e65      	subs	r5, r4, #1
    5586:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    5588:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    558c:	d045      	beq.n	561a <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    558e:	234a      	movs	r3, #74	; 0x4a
    5590:	aa05      	add	r2, sp, #20
    5592:	4629      	mov	r1, r5
    5594:	4630      	mov	r0, r6
    5596:	f01f fcd8 	bl	24f4a <nvs_read>
    559a:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    559e:	343f      	adds	r4, #63	; 0x3f
    55a0:	b2a4      	uxth	r4, r4
    55a2:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    55a4:	4621      	mov	r1, r4
    55a6:	2301      	movs	r3, #1
    55a8:	f10d 020b 	add.w	r2, sp, #11
    55ac:	4630      	mov	r0, r6
    55ae:	f01f fccc 	bl	24f4a <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    55b2:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    55b4:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    55b6:	dc03      	bgt.n	55c0 <settings_nvs_load+0x54>
    55b8:	2800      	cmp	r0, #0
    55ba:	dc03      	bgt.n	55c4 <settings_nvs_load+0x58>
{
    55bc:	462c      	mov	r4, r5
    55be:	e7e1      	b.n	5584 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    55c0:	2800      	cmp	r0, #0
    55c2:	dc16      	bgt.n	55f2 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    55c4:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    55c8:	42ab      	cmp	r3, r5
    55ca:	d109      	bne.n	55e0 <settings_nvs_load+0x74>
				cf->last_name_id--;
    55cc:	4642      	mov	r2, r8
    55ce:	1e6b      	subs	r3, r5, #1
    55d0:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    55d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    55d8:	2302      	movs	r3, #2
    55da:	4630      	mov	r0, r6
    55dc:	f7ff fd76 	bl	50cc <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    55e0:	4629      	mov	r1, r5
    55e2:	4630      	mov	r0, r6
    55e4:	f01f fc57 	bl	24e96 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    55e8:	4621      	mov	r1, r4
    55ea:	4630      	mov	r0, r6
    55ec:	f01f fc53 	bl	24e96 <nvs_delete>
			continue;
    55f0:	e7e4      	b.n	55bc <settings_nvs_load+0x50>
		name[rc1] = '\0';
    55f2:	ab18      	add	r3, sp, #96	; 0x60
    55f4:	441f      	add	r7, r3
    55f6:	2300      	movs	r3, #0
    55f8:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    55fc:	4652      	mov	r2, sl
    55fe:	f8cd 9000 	str.w	r9, [sp]
    5602:	ab03      	add	r3, sp, #12
    5604:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    5606:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    5608:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    560c:	f01f fd04 	bl	25018 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    5610:	2800      	cmp	r0, #0
    5612:	d0d3      	beq.n	55bc <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    5614:	b018      	add	sp, #96	; 0x60
    5616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    561a:	2000      	movs	r0, #0
	return ret;
    561c:	e7fa      	b.n	5614 <settings_nvs_load+0xa8>
    561e:	bf00      	nop
    5620:	0002507f 	.word	0x0002507f

00005624 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    5624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    5626:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    5628:	4669      	mov	r1, sp
    562a:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
    562c:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    562e:	f7ff fe3b 	bl	52a8 <flash_area_open>
	if (rc) {
    5632:	4604      	mov	r4, r0
    5634:	2800      	cmp	r0, #0
    5636:	d136      	bne.n	56a6 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    5638:	aa02      	add	r2, sp, #8
    563a:	a901      	add	r1, sp, #4
    563c:	2004      	movs	r0, #4
    563e:	f7ff fe47 	bl	52d0 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    5642:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    5646:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    5648:	d02d      	beq.n	56a6 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    564a:	b138      	cbz	r0, 565c <settings_backend_init+0x38>
    564c:	340c      	adds	r4, #12
    564e:	d005      	beq.n	565c <settings_backend_init+0x38>
		k_panic();
    5650:	4040      	eors	r0, r0
    5652:	f380 8811 	msr	BASEPRI, r0
    5656:	f04f 0004 	mov.w	r0, #4
    565a:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    565c:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    565e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    5662:	d223      	bcs.n	56ac <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    5664:	9a00      	ldr	r2, [sp, #0]
    5666:	2300      	movs	r3, #0
    5668:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    566a:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    566c:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    566e:	4285      	cmp	r5, r0
    5670:	b29c      	uxth	r4, r3
    5672:	d303      	bcc.n	567c <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    5674:	3301      	adds	r3, #1
    5676:	2b08      	cmp	r3, #8
    5678:	d1f8      	bne.n	566c <settings_backend_init+0x48>
    567a:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    567c:	4d0d      	ldr	r5, [pc, #52]	; (56b4 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    567e:	6853      	ldr	r3, [r2, #4]
    5680:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    5682:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    5684:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    5686:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    5688:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    568a:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    568c:	f01f fd8b 	bl	251a6 <settings_nvs_backend_init>
	if (rc) {
    5690:	4604      	mov	r4, r0
    5692:	b940      	cbnz	r0, 56a6 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    5694:	4e08      	ldr	r6, [pc, #32]	; (56b8 <settings_backend_init+0x94>)
    5696:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    5698:	4628      	mov	r0, r5
    569a:	f7ff fe67 	bl	536c <settings_src_register>
	settings_dst_register(&cf->cf_store);
    569e:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    56a0:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    56a2:	f7ff fe71 	bl	5388 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    56a6:	4620      	mov	r0, r4
    56a8:	b004      	add	sp, #16
    56aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    56ac:	f06f 0424 	mvn.w	r4, #36	; 0x24
    56b0:	e7f9      	b.n	56a6 <settings_backend_init+0x82>
    56b2:	bf00      	nop
    56b4:	200020cc 	.word	0x200020cc
    56b8:	2000033c 	.word	0x2000033c

000056bc <cfb_print>:

	return fptr->width;
}

int cfb_print(const struct device *dev, char *str, uint16_t x, uint16_t y)
{
    56bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct char_framebuffer *fb = &char_fb;
	const struct cfb_font *fptr;

	if (!fb->fonts || !fb->buf) {
    56c0:	4c55      	ldr	r4, [pc, #340]	; (5818 <cfb_print+0x15c>)
{
    56c2:	4615      	mov	r5, r2
	if (!fb->fonts || !fb->buf) {
    56c4:	68a2      	ldr	r2, [r4, #8]
{
    56c6:	b087      	sub	sp, #28
    56c8:	4688      	mov	r8, r1
    56ca:	461e      	mov	r6, r3
	if (!fb->fonts || !fb->buf) {
    56cc:	b182      	cbz	r2, 56f0 <cfb_print+0x34>
    56ce:	6823      	ldr	r3, [r4, #0]
    56d0:	b173      	cbz	r3, 56f0 <cfb_print+0x34>
		return -1;
	}

	fptr = &(fb->fonts[fb->font_idx]);
    56d2:	7d23      	ldrb	r3, [r4, #20]
    56d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    56d8:	eb02 0983 	add.w	r9, r2, r3, lsl #2

	if (fptr->height % 8) {
    56dc:	f899 3006 	ldrb.w	r3, [r9, #6]
    56e0:	075a      	lsls	r2, r3, #29
    56e2:	d105      	bne.n	56f0 <cfb_print+0x34>
		LOG_ERR("Wrong font size");
		return -1;
	}

	if ((fb->screen_info & SCREEN_INFO_MONO_VTILED) && !(y % 8)) {
    56e4:	7b63      	ldrb	r3, [r4, #13]
    56e6:	07db      	lsls	r3, r3, #31
    56e8:	d502      	bpl.n	56f0 <cfb_print+0x34>
    56ea:	f016 0707 	ands.w	r7, r6, #7
    56ee:	d02f      	beq.n	5750 <cfb_print+0x94>
		return -1;
    56f0:	f04f 30ff 	mov.w	r0, #4294967295
    56f4:	e032      	b.n	575c <cfb_print+0xa0>
		for (size_t i = 0; i < strlen(str); i++) {
			if (x + fptr->width > fb->x_res) {
    56f6:	f899 3005 	ldrb.w	r3, [r9, #5]
    56fa:	89e2      	ldrh	r2, [r4, #14]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
    56fc:	f894 c014 	ldrb.w	ip, [r4, #20]
    5700:	68a0      	ldr	r0, [r4, #8]
			if (x + fptr->width > fb->x_res) {
    5702:	442b      	add	r3, r5
    5704:	4293      	cmp	r3, r2
				x = 0U;
				y += fptr->height;
    5706:	bfc8      	it	gt
    5708:	f899 3006 	ldrbgt.w	r3, [r9, #6]
			}
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
    570c:	f818 2007 	ldrb.w	r2, [r8, r7]
				y += fptr->height;
    5710:	bfc8      	it	gt
    5712:	18f6      	addgt	r6, r6, r3
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
    5714:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
    5718:	f994 3015 	ldrsb.w	r3, [r4, #21]
    571c:	9302      	str	r3, [sp, #8]
	const struct cfb_font *fptr = &(fb->fonts[fb->font_idx]);
    571e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
				y += fptr->height;
    5722:	bfc8      	it	gt
    5724:	b2b6      	uxthgt	r6, r6
	if (c < fptr->first_char || c > fptr->last_char) {
    5726:	f893 a007 	ldrb.w	sl, [r3, #7]
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
    572a:	f893 e004 	ldrb.w	lr, [r3, #4]
				x = 0U;
    572e:	bfc8      	it	gt
    5730:	2500      	movgt	r5, #0
	if (c < fptr->first_char || c > fptr->last_char) {
    5732:	4552      	cmp	r2, sl
    5734:	d315      	bcc.n	5762 <cfb_print+0xa6>
    5736:	7a19      	ldrb	r1, [r3, #8]
		c = ' ';
    5738:	4291      	cmp	r1, r2
    573a:	bf38      	it	cc
    573c:	2220      	movcc	r2, #32
	if (fptr->caps & CFB_FONT_MONO_VPACKED) {
    573e:	f01e 0f01 	tst.w	lr, #1
    5742:	d110      	bne.n	5766 <cfb_print+0xaa>
		return 0;
    5744:	2200      	movs	r2, #0
			x += fb->kerning + draw_char_vtmono(fb, str[i], x, y);
    5746:	9b02      	ldr	r3, [sp, #8]
    5748:	441a      	add	r2, r3
    574a:	4415      	add	r5, r2
    574c:	b2ad      	uxth	r5, r5
		for (size_t i = 0; i < strlen(str); i++) {
    574e:	3701      	adds	r7, #1
    5750:	4640      	mov	r0, r8
    5752:	f021 f8eb 	bl	2692c <strlen>
    5756:	4287      	cmp	r7, r0
    5758:	d3cd      	bcc.n	56f6 <cfb_print+0x3a>
		}
		return 0;
    575a:	2000      	movs	r0, #0
	}

	LOG_ERR("Unsupported framebuffer configuration");
	return -1;
}
    575c:	b007      	add	sp, #28
    575e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		c = ' ';
    5762:	2220      	movs	r2, #32
    5764:	e7eb      	b.n	573e <cfb_print+0x82>
		       (fptr->width * fptr->height / 8U);
    5766:	7959      	ldrb	r1, [r3, #5]
    5768:	f893 b006 	ldrb.w	fp, [r3, #6]
		return (uint8_t *)fptr->data +
    576c:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
		       (fptr->width * fptr->height / 8U);
    5770:	fb11 f10b 	smulbb	r1, r1, fp
    5774:	08c9      	lsrs	r1, r1, #3
		       (c - fptr->first_char) *
    5776:	eba2 020a 	sub.w	r2, r2, sl
		return (uint8_t *)fptr->data +
    577a:	fb02 0201 	mla	r2, r2, r1, r0
    577e:	9201      	str	r2, [sp, #4]
	if (!glyph_ptr) {
    5780:	2a00      	cmp	r2, #0
    5782:	d0df      	beq.n	5744 <cfb_print+0x88>
			     != ((fptr->caps & CFB_FONT_MSB_FIRST) != 0));
    5784:	7b62      	ldrb	r2, [r4, #13]
    5786:	f3c2 0240 	ubfx	r2, r2, #1, #1
    578a:	4692      	mov	sl, r2
    578c:	f3ce 0280 	ubfx	r2, lr, #2, #1
    5790:	9203      	str	r2, [sp, #12]
		uint32_t y_segment = y / 8U;
    5792:	08f2      	lsrs	r2, r6, #3
    5794:	9204      	str	r2, [sp, #16]
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
    5796:	2100      	movs	r1, #0
    5798:	795a      	ldrb	r2, [r3, #5]
    579a:	4291      	cmp	r1, r2
    579c:	d2d3      	bcs.n	5746 <cfb_print+0x8a>
			if ((fb_y + x + g_x) >= fb->size) {
    579e:	186a      	adds	r2, r5, r1
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
    57a0:	f04f 0c00 	mov.w	ip, #0
			if ((fb_y + x + g_x) >= fb->size) {
    57a4:	9205      	str	r2, [sp, #20]
    57a6:	e02e      	b.n	5806 <cfb_print+0x14a>
			uint32_t fb_y = (y_segment + g_y) * fb->x_res;
    57a8:	9a04      	ldr	r2, [sp, #16]
    57aa:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
    57ae:	4462      	add	r2, ip
    57b0:	4610      	mov	r0, r2
			if ((fb_y + x + g_x) >= fb->size) {
    57b2:	9a05      	ldr	r2, [sp, #20]
    57b4:	fb00 2e0e 	mla	lr, r0, lr, r2
    57b8:	6862      	ldr	r2, [r4, #4]
    57ba:	4596      	cmp	lr, r2
    57bc:	d2c2      	bcs.n	5744 <cfb_print+0x88>
			byte = glyph_ptr[g_x * (fptr->height / 8U) + g_y];
    57be:	9a01      	ldr	r2, [sp, #4]
    57c0:	fb0b 2b01 	mla	fp, fp, r1, r2
			if (need_reverse) {
    57c4:	9a03      	ldr	r2, [sp, #12]
			byte = glyph_ptr[g_x * (fptr->height / 8U) + g_y];
    57c6:	f81b b00c 	ldrb.w	fp, [fp, ip]
			if (need_reverse) {
    57ca:	4592      	cmp	sl, r2
    57cc:	d016      	beq.n	57fc <cfb_print+0x140>
	b = (b & 0xf0) >> 4 | (b & 0x0f) << 4;
    57ce:	ea4f 120b 	mov.w	r2, fp, lsl #4
    57d2:	ea42 1b1b 	orr.w	fp, r2, fp, lsr #4
	b = (b & 0xcc) >> 2 | (b & 0x33) << 2;
    57d6:	f3cb 0285 	ubfx	r2, fp, #2, #6
    57da:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
    57de:	f00b 0bcc 	and.w	fp, fp, #204	; 0xcc
    57e2:	f002 0233 	and.w	r2, r2, #51	; 0x33
	b = (b & 0xaa) >> 1 | (b & 0x55) << 1;
    57e6:	ea4b 0202 	orr.w	r2, fp, r2
    57ea:	ea4f 0b62 	mov.w	fp, r2, asr #1
    57ee:	0052      	lsls	r2, r2, #1
    57f0:	f00b 0b55 	and.w	fp, fp, #85	; 0x55
    57f4:	f002 02aa 	and.w	r2, r2, #170	; 0xaa
    57f8:	ea42 0b0b 	orr.w	fp, r2, fp
			fb->buf[fb_y + x + g_x] = byte;
    57fc:	6822      	ldr	r2, [r4, #0]
    57fe:	f802 b00e 	strb.w	fp, [r2, lr]
		for (size_t g_y = 0; g_y < fptr->height / 8U; g_y++) {
    5802:	f10c 0c01 	add.w	ip, ip, #1
    5806:	799a      	ldrb	r2, [r3, #6]
    5808:	ebbc 0fd2 	cmp.w	ip, r2, lsr #3
    580c:	ea4f 0bd2 	mov.w	fp, r2, lsr #3
    5810:	d3ca      	bcc.n	57a8 <cfb_print+0xec>
	for (size_t g_x = 0; g_x < fptr->width; g_x++) {
    5812:	3101      	adds	r1, #1
    5814:	e7c0      	b.n	5798 <cfb_print+0xdc>
    5816:	bf00      	nop
    5818:	2000210c 	.word	0x2000210c

0000581c <cfb_framebuffer_clear>:

	return 0;
}

int cfb_framebuffer_clear(const struct device *dev, bool clear_display)
{
    581c:	b508      	push	{r3, lr}
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
    581e:	4b06      	ldr	r3, [pc, #24]	; (5838 <cfb_framebuffer_clear+0x1c>)
    5820:	6818      	ldr	r0, [r3, #0]
    5822:	b128      	cbz	r0, 5830 <cfb_framebuffer_clear+0x14>

	desc.buf_size = fb->size;
	desc.width = fb->x_res;
	desc.height = fb->y_res;
	desc.pitch = fb->x_res;
	memset(fb->buf, 0, fb->size);
    5824:	685a      	ldr	r2, [r3, #4]
    5826:	2100      	movs	r1, #0
    5828:	f021 f8e6 	bl	269f8 <memset>

	return 0;
    582c:	2000      	movs	r0, #0
}
    582e:	bd08      	pop	{r3, pc}
		return -1;
    5830:	f04f 30ff 	mov.w	r0, #4294967295
    5834:	e7fb      	b.n	582e <cfb_framebuffer_clear+0x12>
    5836:	bf00      	nop
    5838:	2000210c 	.word	0x2000210c

0000583c <cfb_framebuffer_finalize>:

	return 0;
}

int cfb_framebuffer_finalize(const struct device *dev)
{
    583c:	b570      	push	{r4, r5, r6, lr}
	const struct display_driver_api *api = dev->api;
	const struct char_framebuffer *fb = &char_fb;
	struct display_buffer_descriptor desc;

	if (!fb || !fb->buf) {
    583e:	4b19      	ldr	r3, [pc, #100]	; (58a4 <cfb_framebuffer_finalize+0x68>)
	const struct display_driver_api *api = dev->api;
    5840:	6885      	ldr	r5, [r0, #8]
	if (!fb || !fb->buf) {
    5842:	681a      	ldr	r2, [r3, #0]
{
    5844:	b086      	sub	sp, #24
	if (!fb || !fb->buf) {
    5846:	b352      	cbz	r2, 589e <cfb_framebuffer_finalize+0x62>
		return -1;
	}

	desc.buf_size = fb->size;
    5848:	685a      	ldr	r2, [r3, #4]
    584a:	9203      	str	r2, [sp, #12]
	desc.width = fb->x_res;
    584c:	89da      	ldrh	r2, [r3, #14]
	desc.height = fb->y_res;
    584e:	8a19      	ldrh	r1, [r3, #16]
	desc.width = fb->x_res;
    5850:	f8ad 2010 	strh.w	r2, [sp, #16]
	desc.pitch = fb->x_res;
    5854:	f8ad 2014 	strh.w	r2, [sp, #20]

	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
    5858:	7b1a      	ldrb	r2, [r3, #12]
	desc.height = fb->y_res;
    585a:	f8ad 1012 	strh.w	r1, [sp, #18]
	if (!(fb->pixel_format & PIXEL_FORMAT_MONO10) != !(fb->inverted)) {
    585e:	7d99      	ldrb	r1, [r3, #22]
    5860:	f082 0204 	eor.w	r2, r2, #4
    5864:	f3c2 0280 	ubfx	r2, r2, #2, #1
    5868:	f081 0101 	eor.w	r1, r1, #1
    586c:	428a      	cmp	r2, r1
    586e:	d114      	bne.n	589a <cfb_framebuffer_finalize+0x5e>
		cfb_invert(fb);
	}

	return api->write(dev, 0, 0, &desc, fb->buf);
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	9300      	str	r3, [sp, #0]
    5874:	2200      	movs	r2, #0
    5876:	68ac      	ldr	r4, [r5, #8]
    5878:	ab03      	add	r3, sp, #12
    587a:	4611      	mov	r1, r2
    587c:	47a0      	blx	r4
}
    587e:	b006      	add	sp, #24
    5880:	bd70      	pop	{r4, r5, r6, pc}
		fb->buf[i] = ~fb->buf[i];
    5882:	5ca1      	ldrb	r1, [r4, r2]
    5884:	43c9      	mvns	r1, r1
    5886:	54a1      	strb	r1, [r4, r2]
	for (size_t i = 0; i < fb->x_res * fb->y_res / 8U; i++) {
    5888:	3201      	adds	r2, #1
    588a:	89de      	ldrh	r6, [r3, #14]
    588c:	8a19      	ldrh	r1, [r3, #16]
    588e:	681c      	ldr	r4, [r3, #0]
    5890:	4371      	muls	r1, r6
    5892:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    5896:	d3f4      	bcc.n	5882 <cfb_framebuffer_finalize+0x46>
    5898:	e7ea      	b.n	5870 <cfb_framebuffer_finalize+0x34>
    589a:	2200      	movs	r2, #0
    589c:	e7f5      	b.n	588a <cfb_framebuffer_finalize+0x4e>
		return -1;
    589e:	f04f 30ff 	mov.w	r0, #4294967295
    58a2:	e7ec      	b.n	587e <cfb_framebuffer_finalize+0x42>
    58a4:	2000210c 	.word	0x2000210c

000058a8 <cfb_get_display_parameter>:
int cfb_get_display_parameter(const struct device *dev,
			       enum cfb_display_param param)
{
	const struct char_framebuffer *fb = &char_fb;

	switch (param) {
    58a8:	2904      	cmp	r1, #4
    58aa:	d81c      	bhi.n	58e6 <cfb_get_display_parameter+0x3e>
    58ac:	e8df f001 	tbb	[pc, r1]
    58b0:	0c090603 	.word	0x0c090603
    58b4:	15          	.byte	0x15
    58b5:	00          	.byte	0x00
	case CFB_DISPLAY_HEIGH:
		return fb->y_res;
    58b6:	4b0d      	ldr	r3, [pc, #52]	; (58ec <cfb_get_display_parameter+0x44>)
    58b8:	8a18      	ldrh	r0, [r3, #16]
    58ba:	4770      	bx	lr
	case CFB_DISPLAY_WIDTH:
		return fb->x_res;
    58bc:	4b0b      	ldr	r3, [pc, #44]	; (58ec <cfb_get_display_parameter+0x44>)
    58be:	89d8      	ldrh	r0, [r3, #14]
    58c0:	4770      	bx	lr
	case CFB_DISPLAY_PPT:
		return fb->ppt;
    58c2:	4b0a      	ldr	r3, [pc, #40]	; (58ec <cfb_get_display_parameter+0x44>)
    58c4:	7c98      	ldrb	r0, [r3, #18]
    58c6:	4770      	bx	lr
	case CFB_DISPLAY_ROWS:
		if (fb->screen_info & SCREEN_INFO_MONO_VTILED) {
    58c8:	4b08      	ldr	r3, [pc, #32]	; (58ec <cfb_get_display_parameter+0x44>)
    58ca:	7b5a      	ldrb	r2, [r3, #13]
    58cc:	8a18      	ldrh	r0, [r3, #16]
    58ce:	07d1      	lsls	r1, r2, #31
    58d0:	d508      	bpl.n	58e4 <cfb_get_display_parameter+0x3c>
		return fb->y_res;
	case CFB_DISPLAY_COLS:
		if (fb->screen_info & SCREEN_INFO_MONO_VTILED) {
			return fb->x_res;
		}
		return fb->x_res / fb->ppt;
    58d2:	7c9b      	ldrb	r3, [r3, #18]
    58d4:	fbb0 f0f3 	udiv	r0, r0, r3
    58d8:	4770      	bx	lr
		if (fb->screen_info & SCREEN_INFO_MONO_VTILED) {
    58da:	4b04      	ldr	r3, [pc, #16]	; (58ec <cfb_get_display_parameter+0x44>)
    58dc:	7b5a      	ldrb	r2, [r3, #13]
    58de:	89d8      	ldrh	r0, [r3, #14]
    58e0:	07d2      	lsls	r2, r2, #31
    58e2:	d5f6      	bpl.n	58d2 <cfb_get_display_parameter+0x2a>
	}
	return 0;
}
    58e4:	4770      	bx	lr
{
    58e6:	2000      	movs	r0, #0
    58e8:	e7fc      	b.n	58e4 <cfb_get_display_parameter+0x3c>
    58ea:	bf00      	nop
    58ec:	2000210c 	.word	0x2000210c

000058f0 <cfb_framebuffer_set_font>:

int cfb_framebuffer_set_font(const struct device *dev, uint8_t idx)
{
	struct char_framebuffer *fb = &char_fb;

	if (idx >= fb->numof_fonts) {
    58f0:	4b04      	ldr	r3, [pc, #16]	; (5904 <cfb_framebuffer_set_font+0x14>)
    58f2:	7cda      	ldrb	r2, [r3, #19]
    58f4:	428a      	cmp	r2, r1
		return -1;
	}

	fb->font_idx = idx;

	return 0;
    58f6:	bf86      	itte	hi
    58f8:	2000      	movhi	r0, #0
	fb->font_idx = idx;
    58fa:	7519      	strbhi	r1, [r3, #20]
		return -1;
    58fc:	f04f 30ff 	movls.w	r0, #4294967295
}
    5900:	4770      	bx	lr
    5902:	bf00      	nop
    5904:	2000210c 	.word	0x2000210c

00005908 <cfb_get_font_size>:

int cfb_get_font_size(const struct device *dev, uint8_t idx, uint8_t *width,
		      uint8_t *height)
{
    5908:	b510      	push	{r4, lr}
    590a:	4618      	mov	r0, r3
	const struct char_framebuffer *fb = &char_fb;

	if (idx >= fb->numof_fonts) {
    590c:	4b0b      	ldr	r3, [pc, #44]	; (593c <cfb_get_font_size+0x34>)
    590e:	7cdb      	ldrb	r3, [r3, #19]
    5910:	428b      	cmp	r3, r1
    5912:	d90f      	bls.n	5934 <cfb_get_font_size+0x2c>
		return -1;
	}

	if (width) {
    5914:	b12a      	cbz	r2, 5922 <cfb_get_font_size+0x1a>
		*width = __font_entry_start[idx].width;
    5916:	4c0a      	ldr	r4, [pc, #40]	; (5940 <cfb_get_font_size+0x38>)
    5918:	230c      	movs	r3, #12
    591a:	fb03 4301 	mla	r3, r3, r1, r4
    591e:	795b      	ldrb	r3, [r3, #5]
    5920:	7013      	strb	r3, [r2, #0]
	}

	if (height) {
    5922:	b130      	cbz	r0, 5932 <cfb_get_font_size+0x2a>
		*height = __font_entry_start[idx].height;
    5924:	4b06      	ldr	r3, [pc, #24]	; (5940 <cfb_get_font_size+0x38>)
    5926:	220c      	movs	r2, #12
    5928:	fb02 3101 	mla	r1, r2, r1, r3
    592c:	798b      	ldrb	r3, [r1, #6]
    592e:	7003      	strb	r3, [r0, #0]
	}

	return 0;
    5930:	2000      	movs	r0, #0
}
    5932:	bd10      	pop	{r4, pc}
		return -1;
    5934:	f04f 30ff 	mov.w	r0, #4294967295
    5938:	e7fb      	b.n	5932 <cfb_get_font_size+0x2a>
    593a:	bf00      	nop
    593c:	2000210c 	.word	0x2000210c
    5940:	0002dc5c 	.word	0x0002dc5c

00005944 <cfb_framebuffer_init>:

	return fb->numof_fonts;
}

int cfb_framebuffer_init(const struct device *dev)
{
    5944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct display_driver_api *api = dev->api;
	struct char_framebuffer *fb = &char_fb;
	struct display_capabilities cfg;

	api->get_capabilities(dev, &cfg);
    5946:	6883      	ldr	r3, [r0, #8]

	fb->numof_fonts = __font_entry_end - __font_entry_start;
    5948:	4c19      	ldr	r4, [pc, #100]	; (59b0 <cfb_framebuffer_init+0x6c>)
	api->get_capabilities(dev, &cfg);
    594a:	69db      	ldr	r3, [r3, #28]
    594c:	4669      	mov	r1, sp
    594e:	4798      	blx	r3
	fb->numof_fonts = __font_entry_end - __font_entry_start;
    5950:	4918      	ldr	r1, [pc, #96]	; (59b4 <cfb_framebuffer_init+0x70>)
    5952:	4b19      	ldr	r3, [pc, #100]	; (59b8 <cfb_framebuffer_init+0x74>)
    5954:	1a5b      	subs	r3, r3, r1
    5956:	109a      	asrs	r2, r3, #2
    5958:	4b18      	ldr	r3, [pc, #96]	; (59bc <cfb_framebuffer_init+0x78>)
    595a:	4353      	muls	r3, r2
    595c:	b2db      	uxtb	r3, r3
    595e:	74e3      	strb	r3, [r4, #19]
	LOG_DBG("number of fonts %d", fb->numof_fonts);
	if (!fb->numof_fonts) {
    5960:	b91b      	cbnz	r3, 596a <cfb_framebuffer_init+0x26>
		return -1;
    5962:	f04f 30ff 	mov.w	r0, #4294967295
	}

	memset(fb->buf, 0, fb->size);

	return 0;
}
    5966:	b004      	add	sp, #16
    5968:	bd10      	pop	{r4, pc}
	fb->x_res = cfg.x_resolution;
    596a:	f8bd 3000 	ldrh.w	r3, [sp]
	fb->y_res = cfg.y_resolution;
    596e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
    5972:	8220      	strh	r0, [r4, #16]
	fb->ppt = 8U;
    5974:	2208      	movs	r2, #8
	fb->size = fb->x_res * fb->y_res / fb->ppt;
    5976:	4358      	muls	r0, r3
	fb->ppt = 8U;
    5978:	74a2      	strb	r2, [r4, #18]
	fb->pixel_format = cfg.current_pixel_format;
    597a:	f89d 200c 	ldrb.w	r2, [sp, #12]
    597e:	7322      	strb	r2, [r4, #12]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
    5980:	bf48      	it	mi
    5982:	3007      	addmi	r0, #7
	fb->screen_info = cfg.screen_info;
    5984:	9a02      	ldr	r2, [sp, #8]
    5986:	7362      	strb	r2, [r4, #13]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
    5988:	10c0      	asrs	r0, r0, #3
	fb->buf = NULL;
    598a:	2200      	movs	r2, #0
	fb->x_res = cfg.x_resolution;
    598c:	81e3      	strh	r3, [r4, #14]
	fb->buf = NULL;
    598e:	6022      	str	r2, [r4, #0]
	fb->font_idx = 0U;
    5990:	82a2      	strh	r2, [r4, #20]
	fb->inverted = false;
    5992:	75a2      	strb	r2, [r4, #22]
	fb->fonts = __font_entry_start;
    5994:	60a1      	str	r1, [r4, #8]
	fb->size = fb->x_res * fb->y_res / fb->ppt;
    5996:	6060      	str	r0, [r4, #4]
	fb->buf = k_malloc(fb->size);
    5998:	f01e fc30 	bl	241fc <k_malloc>
    599c:	6020      	str	r0, [r4, #0]
	if (!fb->buf) {
    599e:	2800      	cmp	r0, #0
    59a0:	d0df      	beq.n	5962 <cfb_framebuffer_init+0x1e>
	memset(fb->buf, 0, fb->size);
    59a2:	6862      	ldr	r2, [r4, #4]
    59a4:	2100      	movs	r1, #0
    59a6:	f021 f827 	bl	269f8 <memset>
	return 0;
    59aa:	2000      	movs	r0, #0
    59ac:	e7db      	b.n	5966 <cfb_framebuffer_init+0x22>
    59ae:	bf00      	nop
    59b0:	2000210c 	.word	0x2000210c
    59b4:	0002dc5c 	.word	0x0002dc5c
    59b8:	0002dc80 	.word	0x0002dc80
    59bc:	aaaaaaab 	.word	0xaaaaaaab

000059c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    59c0:	b510      	push	{r4, lr}
    59c2:	4807      	ldr	r0, [pc, #28]	; (59e0 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    59c4:	4c07      	ldr	r4, [pc, #28]	; (59e4 <uart_console_init+0x24>)
    59c6:	f01d fa3b 	bl	22e40 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    59ca:	4b07      	ldr	r3, [pc, #28]	; (59e8 <uart_console_init+0x28>)
    59cc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    59ce:	4620      	mov	r0, r4
    59d0:	f001 f862 	bl	6a98 <__stdout_hook_install>
	__printk_hook_install(console_out);
    59d4:	4620      	mov	r0, r4
    59d6:	f7fe fa5f 	bl	3e98 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    59da:	2000      	movs	r0, #0
    59dc:	bd10      	pop	{r4, pc}
    59de:	bf00      	nop
    59e0:	000330dc 	.word	0x000330dc
    59e4:	000059ed 	.word	0x000059ed
    59e8:	20002124 	.word	0x20002124

000059ec <console_out>:
	if ('\n' == c) {
    59ec:	280a      	cmp	r0, #10
{
    59ee:	b538      	push	{r3, r4, r5, lr}
    59f0:	4d07      	ldr	r5, [pc, #28]	; (5a10 <console_out+0x24>)
    59f2:	4604      	mov	r4, r0
	if ('\n' == c) {
    59f4:	d104      	bne.n	5a00 <console_out+0x14>
    59f6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    59f8:	6883      	ldr	r3, [r0, #8]
    59fa:	210d      	movs	r1, #13
    59fc:	685b      	ldr	r3, [r3, #4]
    59fe:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    5a00:	6828      	ldr	r0, [r5, #0]
    5a02:	6883      	ldr	r3, [r0, #8]
    5a04:	b2e1      	uxtb	r1, r4
    5a06:	685b      	ldr	r3, [r3, #4]
    5a08:	4798      	blx	r3
}
    5a0a:	4620      	mov	r0, r4
    5a0c:	bd38      	pop	{r3, r4, r5, pc}
    5a0e:	bf00      	nop
    5a10:	20002124 	.word	0x20002124

00005a14 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5a14:	4a0e      	ldr	r2, [pc, #56]	; (5a50 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5a16:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5a18:	1a84      	subs	r4, r0, r2
    5a1a:	10a3      	asrs	r3, r4, #2
    5a1c:	4c0d      	ldr	r4, [pc, #52]	; (5a54 <onoff_stop+0x40>)
    5a1e:	435c      	muls	r4, r3
{
    5a20:	4605      	mov	r5, r0
    5a22:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    5a24:	200c      	movs	r0, #12
    5a26:	fb00 2004 	mla	r0, r0, r4, r2
{
    5a2a:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    5a2c:	2140      	movs	r1, #64	; 0x40
    5a2e:	4408      	add	r0, r1
    5a30:	f01f fbde 	bl	251f0 <set_off_state>
	if (err < 0) {
    5a34:	1e01      	subs	r1, r0, #0
    5a36:	db05      	blt.n	5a44 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    5a38:	4b07      	ldr	r3, [pc, #28]	; (5a58 <onoff_stop+0x44>)
    5a3a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    5a3e:	6863      	ldr	r3, [r4, #4]
    5a40:	4798      	blx	r3
	return 0;
    5a42:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    5a44:	4628      	mov	r0, r5
    5a46:	4633      	mov	r3, r6
}
    5a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5a4c:	4718      	bx	r3
    5a4e:	bf00      	nop
    5a50:	20002138 	.word	0x20002138
    5a54:	b6db6db7 	.word	0xb6db6db7
    5a58:	0002de2c 	.word	0x0002de2c

00005a5c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5a60:	4e10      	ldr	r6, [pc, #64]	; (5aa4 <onoff_start+0x48>)
    5a62:	1b84      	subs	r4, r0, r6
    5a64:	10a3      	asrs	r3, r4, #2
    5a66:	4c10      	ldr	r4, [pc, #64]	; (5aa8 <onoff_start+0x4c>)
    5a68:	435c      	muls	r4, r3
    5a6a:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    5a6c:	250c      	movs	r5, #12
    5a6e:	4365      	muls	r5, r4
{
    5a70:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    5a72:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    5a76:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    5a78:	4430      	add	r0, r6
    5a7a:	2140      	movs	r1, #64	; 0x40
    5a7c:	f01f fbd1 	bl	25222 <set_starting_state>
	if (err < 0) {
    5a80:	1e01      	subs	r1, r0, #0
    5a82:	db09      	blt.n	5a98 <onoff_start+0x3c>
	subdata->cb = cb;
    5a84:	4a09      	ldr	r2, [pc, #36]	; (5aac <onoff_start+0x50>)
    5a86:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    5a88:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5a8c:	4b08      	ldr	r3, [pc, #32]	; (5ab0 <onoff_start+0x54>)
    5a8e:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    5a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    5a96:	4718      	bx	r3
		notify(mgr, err);
    5a98:	4640      	mov	r0, r8
    5a9a:	463b      	mov	r3, r7
}
    5a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    5aa0:	4718      	bx	r3
    5aa2:	bf00      	nop
    5aa4:	20002138 	.word	0x20002138
    5aa8:	b6db6db7 	.word	0xb6db6db7
    5aac:	00025285 	.word	0x00025285
    5ab0:	0002de2c 	.word	0x0002de2c

00005ab4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ab4:	2200      	movs	r2, #0
{
    5ab6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5ab8:	2101      	movs	r1, #1
{
    5aba:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5abc:	4610      	mov	r0, r2
    5abe:	f000 fd5b 	bl	6578 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    5ac2:	2000      	movs	r0, #0
    5ac4:	f000 fd26 	bl	6514 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    5ac8:	480f      	ldr	r0, [pc, #60]	; (5b08 <clk_init+0x54>)
    5aca:	f01c fac9 	bl	22060 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5ace:	4b0f      	ldr	r3, [pc, #60]	; (5b0c <clk_init+0x58>)
    5ad0:	4298      	cmp	r0, r3
    5ad2:	d115      	bne.n	5b00 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5ad4:	f027 f9d3 	bl	2ce7e <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5ad8:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5ada:	490d      	ldr	r1, [pc, #52]	; (5b10 <clk_init+0x5c>)
    5adc:	4630      	mov	r0, r6
    5ade:	f01e fd52 	bl	24586 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5ae2:	2800      	cmp	r0, #0
    5ae4:	db0b      	blt.n	5afe <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5ae6:	2501      	movs	r5, #1
    5ae8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    5aea:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5aec:	4908      	ldr	r1, [pc, #32]	; (5b10 <clk_init+0x5c>)
    5aee:	f104 001c 	add.w	r0, r4, #28
    5af2:	f01e fd48 	bl	24586 <onoff_manager_init>
		if (err < 0) {
    5af6:	2800      	cmp	r0, #0
    5af8:	db01      	blt.n	5afe <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5afa:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5afc:	2000      	movs	r0, #0
}
    5afe:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5b00:	f06f 0004 	mvn.w	r0, #4
    5b04:	e7fb      	b.n	5afe <clk_init+0x4a>
    5b06:	bf00      	nop
    5b08:	00005b49 	.word	0x00005b49
    5b0c:	0bad0000 	.word	0x0bad0000
    5b10:	0002de3c 	.word	0x0002de3c

00005b14 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5b14:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5b16:	230c      	movs	r3, #12
    5b18:	4809      	ldr	r0, [pc, #36]	; (5b40 <clkstarted_handle.constprop.0+0x2c>)
    5b1a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    5b1c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    5b1e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5b20:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    5b24:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5b26:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    5b28:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5b2a:	4418      	add	r0, r3
    5b2c:	f01f fb97 	bl	2525e <set_on_state>
	if (callback) {
    5b30:	b12d      	cbz	r5, 5b3e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5b32:	4632      	mov	r2, r6
    5b34:	462b      	mov	r3, r5
    5b36:	4803      	ldr	r0, [pc, #12]	; (5b44 <clkstarted_handle.constprop.0+0x30>)
}
    5b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5b3c:	4718      	bx	r3
}
    5b3e:	bd70      	pop	{r4, r5, r6, pc}
    5b40:	20002138 	.word	0x20002138
    5b44:	20000c10 	.word	0x20000c10

00005b48 <clock_event_handler>:
	switch (event) {
    5b48:	b110      	cbz	r0, 5b50 <clock_event_handler+0x8>
    5b4a:	2801      	cmp	r0, #1
    5b4c:	d004      	beq.n	5b58 <clock_event_handler+0x10>
    5b4e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5b50:	4b03      	ldr	r3, [pc, #12]	; (5b60 <clock_event_handler+0x18>)
    5b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5b54:	075b      	lsls	r3, r3, #29
    5b56:	d101      	bne.n	5b5c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5b58:	f7ff bfdc 	b.w	5b14 <clkstarted_handle.constprop.0>
}
    5b5c:	4770      	bx	lr
    5b5e:	bf00      	nop
    5b60:	20002138 	.word	0x20002138

00005b64 <generic_hfclk_start>:
{
    5b64:	b508      	push	{r3, lr}
    5b66:	f04f 0320 	mov.w	r3, #32
    5b6a:	f3ef 8111 	mrs	r1, BASEPRI
    5b6e:	f383 8811 	msr	BASEPRI, r3
    5b72:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5b76:	4a12      	ldr	r2, [pc, #72]	; (5bc0 <generic_hfclk_start+0x5c>)
    5b78:	6813      	ldr	r3, [r2, #0]
    5b7a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    5b7e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5b82:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5b84:	d00c      	beq.n	5ba0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5b86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5b8a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5b8e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5b92:	f013 0301 	ands.w	r3, r3, #1
    5b96:	d003      	beq.n	5ba0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    5b98:	480a      	ldr	r0, [pc, #40]	; (5bc4 <generic_hfclk_start+0x60>)
    5b9a:	f01f fb60 	bl	2525e <set_on_state>
			already_started = true;
    5b9e:	2301      	movs	r3, #1
	__asm__ volatile(
    5ba0:	f381 8811 	msr	BASEPRI, r1
    5ba4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    5ba8:	b123      	cbz	r3, 5bb4 <generic_hfclk_start+0x50>
}
    5baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    5bae:	2000      	movs	r0, #0
    5bb0:	f7ff bfb0 	b.w	5b14 <clkstarted_handle.constprop.0>
}
    5bb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5bb8:	2001      	movs	r0, #1
    5bba:	f01c ba61 	b.w	22080 <nrfx_clock_start>
    5bbe:	bf00      	nop
    5bc0:	20002188 	.word	0x20002188
    5bc4:	20002178 	.word	0x20002178

00005bc8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5bc8:	4b09      	ldr	r3, [pc, #36]	; (5bf0 <generic_hfclk_stop+0x28>)
    5bca:	f3bf 8f5b 	dmb	ish
    5bce:	e853 2f00 	ldrex	r2, [r3]
    5bd2:	f022 0102 	bic.w	r1, r2, #2
    5bd6:	e843 1000 	strex	r0, r1, [r3]
    5bda:	2800      	cmp	r0, #0
    5bdc:	d1f7      	bne.n	5bce <generic_hfclk_stop+0x6>
    5bde:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    5be2:	07d3      	lsls	r3, r2, #31
    5be4:	d402      	bmi.n	5bec <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5be6:	2001      	movs	r0, #1
    5be8:	f01c ba7c 	b.w	220e4 <nrfx_clock_stop>
}
    5bec:	4770      	bx	lr
    5bee:	bf00      	nop
    5bf0:	20002188 	.word	0x20002188

00005bf4 <api_blocking_start>:
{
    5bf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5bf6:	2200      	movs	r2, #0
    5bf8:	2301      	movs	r3, #1
    5bfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    5bfe:	ab04      	add	r3, sp, #16
    5c00:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5c04:	4a09      	ldr	r2, [pc, #36]	; (5c2c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5c06:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5c0a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5c0c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5c10:	f01f fb5e 	bl	252d0 <api_start>
	if (err < 0) {
    5c14:	2800      	cmp	r0, #0
    5c16:	db05      	blt.n	5c24 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    5c18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5c1c:	2300      	movs	r3, #0
    5c1e:	4668      	mov	r0, sp
    5c20:	f01d ff6e 	bl	23b00 <z_impl_k_sem_take>
}
    5c24:	b007      	add	sp, #28
    5c26:	f85d fb04 	ldr.w	pc, [sp], #4
    5c2a:	bf00      	nop
    5c2c:	00025297 	.word	0x00025297

00005c30 <z_nrf_clock_control_get_onoff>:
}
    5c30:	4a02      	ldr	r2, [pc, #8]	; (5c3c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    5c32:	b2c3      	uxtb	r3, r0
}
    5c34:	201c      	movs	r0, #28
    5c36:	fb03 2000 	mla	r0, r3, r0, r2
    5c3a:	4770      	bx	lr
    5c3c:	20002138 	.word	0x20002138

00005c40 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c40:	4b09      	ldr	r3, [pc, #36]	; (5c68 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    5c42:	f3bf 8f5b 	dmb	ish
    5c46:	e853 2f00 	ldrex	r2, [r3]
    5c4a:	f042 0101 	orr.w	r1, r2, #1
    5c4e:	e843 1000 	strex	r0, r1, [r3]
    5c52:	2800      	cmp	r0, #0
    5c54:	d1f7      	bne.n	5c46 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    5c56:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    5c5a:	0793      	lsls	r3, r2, #30
    5c5c:	d402      	bmi.n	5c64 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5c5e:	2001      	movs	r0, #1
    5c60:	f01c ba0e 	b.w	22080 <nrfx_clock_start>
}
    5c64:	4770      	bx	lr
    5c66:	bf00      	nop
    5c68:	20002188 	.word	0x20002188

00005c6c <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5c6c:	4b09      	ldr	r3, [pc, #36]	; (5c94 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    5c6e:	f3bf 8f5b 	dmb	ish
    5c72:	e853 2f00 	ldrex	r2, [r3]
    5c76:	f022 0101 	bic.w	r1, r2, #1
    5c7a:	e843 1000 	strex	r0, r1, [r3]
    5c7e:	2800      	cmp	r0, #0
    5c80:	d1f7      	bne.n	5c72 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    5c82:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    5c86:	0793      	lsls	r3, r2, #30
    5c88:	d402      	bmi.n	5c90 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5c8a:	2001      	movs	r0, #1
    5c8c:	f01c ba2a 	b.w	220e4 <nrfx_clock_stop>
}
    5c90:	4770      	bx	lr
    5c92:	bf00      	nop
    5c94:	20002188 	.word	0x20002188

00005c98 <z_nrf_clock_control_lf_on>:
{
    5c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5c9c:	493a      	ldr	r1, [pc, #232]	; (5d88 <z_nrf_clock_control_lf_on+0xf0>)
    5c9e:	f3bf 8f5b 	dmb	ish
    5ca2:	4606      	mov	r6, r0
    5ca4:	2201      	movs	r2, #1
    5ca6:	e851 3f00 	ldrex	r3, [r1]
    5caa:	e841 2000 	strex	r0, r2, [r1]
    5cae:	2800      	cmp	r0, #0
    5cb0:	d1f9      	bne.n	5ca6 <z_nrf_clock_control_lf_on+0xe>
    5cb2:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5cb6:	b933      	cbnz	r3, 5cc6 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5cb8:	4934      	ldr	r1, [pc, #208]	; (5d8c <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    5cba:	4835      	ldr	r0, [pc, #212]	; (5d90 <z_nrf_clock_control_lf_on+0xf8>)
    5cbc:	604b      	str	r3, [r1, #4]
    5cbe:	60cb      	str	r3, [r1, #12]
    5cc0:	608a      	str	r2, [r1, #8]
    5cc2:	f01e fc73 	bl	245ac <onoff_request>
	switch (start_mode) {
    5cc6:	1e73      	subs	r3, r6, #1
    5cc8:	2b01      	cmp	r3, #1
    5cca:	d832      	bhi.n	5d32 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5ccc:	2e01      	cmp	r6, #1
    5cce:	d107      	bne.n	5ce0 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cd4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5cd8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5cdc:	2b01      	cmp	r3, #1
    5cde:	d028      	beq.n	5d32 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5ce0:	f027 fbf0 	bl	2d4c4 <k_is_in_isr>
    5ce4:	4604      	mov	r4, r0
    5ce6:	b918      	cbnz	r0, 5cf0 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5ce8:	4b2a      	ldr	r3, [pc, #168]	; (5d94 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    5cea:	781b      	ldrb	r3, [r3, #0]
    5cec:	2b00      	cmp	r3, #0
    5cee:	d144      	bne.n	5d7a <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    5cf0:	f04f 0320 	mov.w	r3, #32
    5cf4:	f3ef 8511 	mrs	r5, BASEPRI
    5cf8:	f383 8811 	msr	BASEPRI, r3
    5cfc:	f3bf 8f6f 	isb	sy
    5d00:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5d02:	4f25      	ldr	r7, [pc, #148]	; (5d98 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5d04:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5d9c <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d08:	f8df 9094 	ldr.w	r9, [pc, #148]	; 5da0 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5d10:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5d14:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    5d18:	03d2      	lsls	r2, r2, #15
    5d1a:	d50c      	bpl.n	5d36 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5d1c:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5d20:	2b01      	cmp	r3, #1
    5d22:	d001      	beq.n	5d28 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5d24:	2e01      	cmp	r6, #1
    5d26:	d106      	bne.n	5d36 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    5d28:	b30c      	cbz	r4, 5d6e <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    5d2a:	f385 8811 	msr	BASEPRI, r5
    5d2e:	f3bf 8f6f 	isb	sy
}
    5d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    5d36:	b1ac      	cbz	r4, 5d64 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5d38:	4628      	mov	r0, r5
    5d3a:	f000 fc8b 	bl	6654 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5d42:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5d46:	2b00      	cmp	r3, #0
    5d48:	d1e0      	bne.n	5d0c <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5d4a:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    5d4c:	2900      	cmp	r1, #0
    5d4e:	d0dd      	beq.n	5d0c <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d50:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5d52:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5d54:	2301      	movs	r3, #1
    5d56:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    5d5a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d5e:	f8c9 3000 	str.w	r3, [r9]
}
    5d62:	e7d3      	b.n	5d0c <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    5d64:	2100      	movs	r1, #0
    5d66:	2021      	movs	r0, #33	; 0x21
    5d68:	f01d fe7e 	bl	23a68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5d6c:	e7e7      	b.n	5d3e <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    5d6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d72:	2202      	movs	r2, #2
    5d74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5d78:	e7db      	b.n	5d32 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    5d7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5d7e:	2202      	movs	r2, #2
    5d80:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    5d84:	4605      	mov	r5, r0
}
    5d86:	e7bc      	b.n	5d02 <z_nrf_clock_control_lf_on+0x6a>
    5d88:	2000218c 	.word	0x2000218c
    5d8c:	20002128 	.word	0x20002128
    5d90:	20002154 	.word	0x20002154
    5d94:	20009163 	.word	0x20009163
    5d98:	40000104 	.word	0x40000104
    5d9c:	e000e100 	.word	0xe000e100
    5da0:	40000008 	.word	0x40000008

00005da4 <ssd16xx_get_capabilities>:
	return -ENOTSUP;
}

static void ssd16xx_get_capabilities(const struct device *dev,
				     struct display_capabilities *caps)
{
    5da4:	b510      	push	{r4, lr}
    5da6:	460c      	mov	r4, r1
	memset(caps, 0, sizeof(struct display_capabilities));
    5da8:	2210      	movs	r2, #16
    5daa:	2100      	movs	r1, #0
    5dac:	4620      	mov	r0, r4
    5dae:	f020 fe23 	bl	269f8 <memset>
	caps->x_resolution = EPD_PANEL_WIDTH;
	caps->y_resolution = EPD_PANEL_HEIGHT -
			     EPD_PANEL_HEIGHT % EPD_PANEL_NUMOF_ROWS_PER_PAGE;
	caps->supported_pixel_formats = PIXEL_FORMAT_MONO10;
    5db2:	4a04      	ldr	r2, [pc, #16]	; (5dc4 <ssd16xx_get_capabilities+0x20>)
    5db4:	2304      	movs	r3, #4
    5db6:	e9c4 2300 	strd	r2, r3, [r4]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
	caps->screen_info = SCREEN_INFO_MONO_VTILED |
    5dba:	220f      	movs	r2, #15
    5dbc:	60a2      	str	r2, [r4, #8]
	caps->current_pixel_format = PIXEL_FORMAT_MONO10;
    5dbe:	7323      	strb	r3, [r4, #12]
			    SCREEN_INFO_MONO_MSB_FIRST |
			    SCREEN_INFO_EPD |
			    SCREEN_INFO_DOUBLE_BUFFER;
}
    5dc0:	bd10      	pop	{r4, pc}
    5dc2:	bf00      	nop
    5dc4:	007800fa 	.word	0x007800fa

00005dc8 <ssd16xx_init>:

	return ssd16xx_clear_cntlr_mem(dev, SSD16XX_CMD_WRITE_RAM, true);
}

static int ssd16xx_init(const struct device *dev)
{
    5dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct ssd16xx_data *driver = dev->data;
    5dca:	68c5      	ldr	r5, [r0, #12]
{
    5dcc:	4604      	mov	r4, r0
    5dce:	4872      	ldr	r0, [pc, #456]	; (5f98 <ssd16xx_init+0x1d0>)
    5dd0:	f01d f836 	bl	22e40 <z_impl_device_get_binding>

	LOG_DBG("");

	driver->spi_dev = device_get_binding(SSD16XX_BUS_NAME);
    5dd4:	60e8      	str	r0, [r5, #12]
	if (driver->spi_dev == NULL) {
    5dd6:	b918      	cbnz	r0, 5de0 <ssd16xx_init+0x18>
		return -EIO;
    5dd8:	f06f 0004 	mvn.w	r0, #4
	driver->cs_ctrl.delay = 0U;
	driver->spi_config.cs = &driver->cs_ctrl;
#endif

	return ssd16xx_controller_init(dev);
}
    5ddc:	b003      	add	sp, #12
    5dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	driver->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
    5de0:	4b6e      	ldr	r3, [pc, #440]	; (5f9c <ssd16xx_init+0x1d4>)
    5de2:	f44f 7680 	mov.w	r6, #256	; 0x100
	driver->spi_config.cs = NULL;
    5de6:	2700      	movs	r7, #0
	driver->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
    5de8:	e9c5 3604 	strd	r3, r6, [r5, #16]
	driver->spi_config.cs = NULL;
    5dec:	61af      	str	r7, [r5, #24]
    5dee:	486c      	ldr	r0, [pc, #432]	; (5fa0 <ssd16xx_init+0x1d8>)
    5df0:	f01d f826 	bl	22e40 <z_impl_device_get_binding>
	driver->reset = device_get_binding(SSD16XX_RESET_CNTRL);
    5df4:	6028      	str	r0, [r5, #0]
	if (driver->reset == NULL) {
    5df6:	2800      	cmp	r0, #0
    5df8:	d0ee      	beq.n	5dd8 <ssd16xx_init+0x10>
	gpio_pin_configure(driver->reset, SSD16XX_RESET_PIN,
    5dfa:	f241 6201 	movw	r2, #5633	; 0x1601
    5dfe:	210f      	movs	r1, #15
    5e00:	f01f fa81 	bl	25306 <gpio_pin_configure>
    5e04:	4866      	ldr	r0, [pc, #408]	; (5fa0 <ssd16xx_init+0x1d8>)
    5e06:	f01d f81b 	bl	22e40 <z_impl_device_get_binding>
	driver->dc = device_get_binding(SSD16XX_DC_CNTRL);
    5e0a:	6068      	str	r0, [r5, #4]
	if (driver->dc == NULL) {
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d0e3      	beq.n	5dd8 <ssd16xx_init+0x10>
	gpio_pin_configure(driver->dc, SSD16XX_DC_PIN,
    5e10:	f241 6201 	movw	r2, #5633	; 0x1601
    5e14:	2110      	movs	r1, #16
    5e16:	f01f fa76 	bl	25306 <gpio_pin_configure>
    5e1a:	4861      	ldr	r0, [pc, #388]	; (5fa0 <ssd16xx_init+0x1d8>)
    5e1c:	f01d f810 	bl	22e40 <z_impl_device_get_binding>
	driver->busy = device_get_binding(SSD16XX_BUSY_CNTRL);
    5e20:	60a8      	str	r0, [r5, #8]
	if (driver->busy == NULL) {
    5e22:	2800      	cmp	r0, #0
    5e24:	d0d8      	beq.n	5dd8 <ssd16xx_init+0x10>
	gpio_pin_configure(driver->busy, SSD16XX_BUSY_PIN,
    5e26:	4632      	mov	r2, r6
    5e28:	210e      	movs	r1, #14
    5e2a:	f01f fa6c 	bl	25306 <gpio_pin_configure>
    5e2e:	485c      	ldr	r0, [pc, #368]	; (5fa0 <ssd16xx_init+0x1d8>)
    5e30:	f01d f806 	bl	22e40 <z_impl_device_get_binding>
	driver->cs_ctrl.gpio_dev = device_get_binding(SSD16XX_CS_CNTRL);
    5e34:	61e8      	str	r0, [r5, #28]
	if (!driver->cs_ctrl.gpio_dev) {
    5e36:	2800      	cmp	r0, #0
    5e38:	d0ce      	beq.n	5dd8 <ssd16xx_init+0x10>
	driver->cs_ctrl.gpio_pin = SSD16XX_CS_PIN;
    5e3a:	f240 1311 	movw	r3, #273	; 0x111
    5e3e:	84ab      	strh	r3, [r5, #36]	; 0x24
	struct ssd16xx_data *driver = dev->data;
    5e40:	68e6      	ldr	r6, [r4, #12]
	driver->cs_ctrl.delay = 0U;
    5e42:	622f      	str	r7, [r5, #32]
	driver->spi_config.cs = &driver->cs_ctrl;
    5e44:	f105 031c 	add.w	r3, r5, #28
    5e48:	61ab      	str	r3, [r5, #24]
	gpio_pin_set(driver->reset, SSD16XX_RESET_PIN, 0);
    5e4a:	4635      	mov	r5, r6
	gpio_pin_set(driver->reset, SSD16XX_RESET_PIN, 1);
    5e4c:	2201      	movs	r2, #1
    5e4e:	210f      	movs	r1, #15
    5e50:	6830      	ldr	r0, [r6, #0]
    5e52:	f01f fa75 	bl	25340 <gpio_pin_set>
	k_msleep(SSD16XX_RESET_DELAY);
    5e56:	f01f fa97 	bl	25388 <k_msleep.constprop.0>
	gpio_pin_set(driver->reset, SSD16XX_RESET_PIN, 0);
    5e5a:	f855 0b08 	ldr.w	r0, [r5], #8
    5e5e:	463a      	mov	r2, r7
    5e60:	210f      	movs	r1, #15
    5e62:	f01f fa6d 	bl	25340 <gpio_pin_set>
	k_msleep(SSD16XX_RESET_DELAY);
    5e66:	f01f fa8f 	bl	25388 <k_msleep.constprop.0>
	ssd16xx_busy_wait(driver);
    5e6a:	4628      	mov	r0, r5
    5e6c:	f01f fa96 	bl	2539c <ssd16xx_busy_wait.isra.0>
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_SW_RESET, NULL, 0);
    5e70:	463b      	mov	r3, r7
    5e72:	463a      	mov	r2, r7
    5e74:	2112      	movs	r1, #18
    5e76:	4630      	mov	r0, r6
    5e78:	f01f faa5 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
    5e7c:	2800      	cmp	r0, #0
    5e7e:	dbad      	blt.n	5ddc <ssd16xx_init+0x14>
	ssd16xx_busy_wait(driver);
    5e80:	4628      	mov	r0, r5
    5e82:	f01f fa8b 	bl	2539c <ssd16xx_busy_wait.isra.0>
	dst[0] = val;
    5e86:	23f9      	movs	r3, #249	; 0xf9
    5e88:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_GDO_CTRL, tmp, len);
    5e8c:	aa01      	add	r2, sp, #4
    5e8e:	2303      	movs	r3, #3
    5e90:	2101      	movs	r1, #1
    5e92:	4630      	mov	r0, r6
	tmp[len++] = 0U;
    5e94:	f88d 7006 	strb.w	r7, [sp, #6]
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_GDO_CTRL, tmp, len);
    5e98:	f01f fa95 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
    5e9c:	2800      	cmp	r0, #0
    5e9e:	db9d      	blt.n	5ddc <ssd16xx_init+0x14>
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_GDV_CTRL, ssd16xx_gdv,
    5ea0:	4a40      	ldr	r2, [pc, #256]	; (5fa4 <ssd16xx_init+0x1dc>)
    5ea2:	2301      	movs	r3, #1
    5ea4:	2103      	movs	r1, #3
    5ea6:	4630      	mov	r0, r6
    5ea8:	f01f fa8d 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
    5eac:	2800      	cmp	r0, #0
    5eae:	db95      	blt.n	5ddc <ssd16xx_init+0x14>
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_SDV_CTRL, ssd16xx_sdv,
    5eb0:	4a3d      	ldr	r2, [pc, #244]	; (5fa8 <ssd16xx_init+0x1e0>)
    5eb2:	2303      	movs	r3, #3
    5eb4:	2104      	movs	r1, #4
    5eb6:	4630      	mov	r0, r6
    5eb8:	f01f fa85 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
    5ebc:	2800      	cmp	r0, #0
    5ebe:	db8d      	blt.n	5ddc <ssd16xx_init+0x14>
	tmp[0] = DT_INST_PROP(0, vcom);
    5ec0:	2326      	movs	r3, #38	; 0x26
    5ec2:	f88d 3004 	strb.w	r3, [sp, #4]
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_VCOM_VOLTAGE, tmp, 1);
    5ec6:	aa01      	add	r2, sp, #4
    5ec8:	2301      	movs	r3, #1
    5eca:	212c      	movs	r1, #44	; 0x2c
    5ecc:	4630      	mov	r0, r6
    5ece:	f01f fa7a 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
    5ed2:	2800      	cmp	r0, #0
    5ed4:	db82      	blt.n	5ddc <ssd16xx_init+0x14>
	tmp[0] = SSD16XX_VAL_DUMMY_LINE;
    5ed6:	231a      	movs	r3, #26
    5ed8:	f88d 3004 	strb.w	r3, [sp, #4]
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_DUMMY_LINE, tmp, 1);
    5edc:	aa01      	add	r2, sp, #4
    5ede:	2301      	movs	r3, #1
    5ee0:	213a      	movs	r1, #58	; 0x3a
    5ee2:	4630      	mov	r0, r6
    5ee4:	f01f fa6f 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
    5ee8:	2800      	cmp	r0, #0
    5eea:	f6ff af77 	blt.w	5ddc <ssd16xx_init+0x14>
	tmp[0] = SSD16XX_VAL_GATE_LWIDTH;
    5eee:	2308      	movs	r3, #8
    5ef0:	f88d 3004 	strb.w	r3, [sp, #4]
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_GATE_LINE_WIDTH, tmp, 1);
    5ef4:	aa01      	add	r2, sp, #4
    5ef6:	2301      	movs	r3, #1
    5ef8:	213b      	movs	r1, #59	; 0x3b
    5efa:	4630      	mov	r0, r6
    5efc:	f01f fa63 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
    5f00:	2800      	cmp	r0, #0
    5f02:	f6ff af6b 	blt.w	5ddc <ssd16xx_init+0x14>
	tmp[0] = DT_INST_PROP(0, border_waveform);
    5f06:	2303      	movs	r3, #3
    5f08:	f88d 3004 	strb.w	r3, [sp, #4]
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_BWF_CTRL, tmp, 1);
    5f0c:	aa01      	add	r2, sp, #4
    5f0e:	2301      	movs	r3, #1
    5f10:	213c      	movs	r1, #60	; 0x3c
    5f12:	4630      	mov	r0, r6
    5f14:	f01f fa57 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
    5f18:	2800      	cmp	r0, #0
    5f1a:	f6ff af5f 	blt.w	5ddc <ssd16xx_init+0x14>
	driver->scan_mode = SSD16XX_DATA_ENTRY_XDYIY;
    5f1e:	f24c 7306 	movw	r3, #50950	; 0xc706
    5f22:	8533      	strh	r3, [r6, #40]	; 0x28
	if (ssd16xx_load_ws_initial(dev)) {
    5f24:	68e7      	ldr	r7, [r4, #12]
	if (ssd16xx_write_cmd(driver, SSD16XX_CMD_UPDATE_LUT,
    5f26:	4a21      	ldr	r2, [pc, #132]	; (5fac <ssd16xx_init+0x1e4>)
    5f28:	2346      	movs	r3, #70	; 0x46
    5f2a:	2132      	movs	r1, #50	; 0x32
    5f2c:	4638      	mov	r0, r7
    5f2e:	f01f fa4a 	bl	253c6 <ssd16xx_write_cmd>
    5f32:	4606      	mov	r6, r0
    5f34:	2800      	cmp	r0, #0
    5f36:	f47f af4f 	bne.w	5dd8 <ssd16xx_init+0x10>
	ssd16xx_busy_wait(driver);
    5f3a:	f107 0008 	add.w	r0, r7, #8
    5f3e:	f01f fa2d 	bl	2539c <ssd16xx_busy_wait.isra.0>
	err = ssd16xx_clear_cntlr_mem(dev, SSD16XX_CMD_WRITE_RAM, true);
    5f42:	2201      	movs	r2, #1
    5f44:	2124      	movs	r1, #36	; 0x24
    5f46:	4620      	mov	r0, r4
    5f48:	f01f fabb 	bl	254c2 <ssd16xx_clear_cntlr_mem>
	if (err < 0) {
    5f4c:	2800      	cmp	r0, #0
    5f4e:	f6ff af45 	blt.w	5ddc <ssd16xx_init+0x14>
	ssd16xx_busy_wait(driver);
    5f52:	4628      	mov	r0, r5
    5f54:	f01f fa22 	bl	2539c <ssd16xx_busy_wait.isra.0>
	err = ssd16xx_clear_cntlr_mem(dev, SSD16XX_CMD_WRITE_RED_RAM,
    5f58:	4632      	mov	r2, r6
    5f5a:	2126      	movs	r1, #38	; 0x26
    5f5c:	4620      	mov	r0, r4
    5f5e:	f01f fab0 	bl	254c2 <ssd16xx_clear_cntlr_mem>
	if (err < 0) {
    5f62:	2800      	cmp	r0, #0
    5f64:	f6ff af3a 	blt.w	5ddc <ssd16xx_init+0x14>
	ssd16xx_busy_wait(driver);
    5f68:	4628      	mov	r0, r5
    5f6a:	f01f fa17 	bl	2539c <ssd16xx_busy_wait.isra.0>
	if (ssd16xx_load_ws_default(dev)) {
    5f6e:	68e5      	ldr	r5, [r4, #12]
	if (ssd16xx_write_cmd(driver, SSD16XX_CMD_UPDATE_LUT,
    5f70:	4a0f      	ldr	r2, [pc, #60]	; (5fb0 <ssd16xx_init+0x1e8>)
    5f72:	2346      	movs	r3, #70	; 0x46
    5f74:	2132      	movs	r1, #50	; 0x32
    5f76:	4628      	mov	r0, r5
    5f78:	f01f fa25 	bl	253c6 <ssd16xx_write_cmd>
    5f7c:	2800      	cmp	r0, #0
    5f7e:	f47f af2b 	bne.w	5dd8 <ssd16xx_init+0x10>
	ssd16xx_busy_wait(driver);
    5f82:	f105 0008 	add.w	r0, r5, #8
    5f86:	f01f fa09 	bl	2539c <ssd16xx_busy_wait.isra.0>
	return ssd16xx_clear_cntlr_mem(dev, SSD16XX_CMD_WRITE_RAM, true);
    5f8a:	2201      	movs	r2, #1
    5f8c:	2124      	movs	r1, #36	; 0x24
    5f8e:	4620      	mov	r0, r4
    5f90:	f01f fa97 	bl	254c2 <ssd16xx_clear_cntlr_mem>
	return ssd16xx_controller_init(dev);
    5f94:	e722      	b.n	5ddc <ssd16xx_init+0x14>
    5f96:	bf00      	nop
    5f98:	000330e9 	.word	0x000330e9
    5f9c:	003d0900 	.word	0x003d0900
    5fa0:	0002fa59 	.word	0x0002fa59
    5fa4:	20000b7b 	.word	0x20000b7b
    5fa8:	20000c08 	.word	0x20000c08
    5fac:	20000bc2 	.word	0x20000bc2
    5fb0:	20000b7c 	.word	0x20000b7c

00005fb4 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    5fb4:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    5fb6:	4b08      	ldr	r3, [pc, #32]	; (5fd8 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    5fb8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5fbc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    5fc0:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    5fc4:	4290      	cmp	r0, r2
    5fc6:	d100      	bne.n	5fca <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    5fc8:	4770      	bx	lr
    5fca:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    5fce:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    5fd0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5fd4:	e7f2      	b.n	5fbc <handle_next_cycle_case+0x8>
    5fd6:	bf00      	nop
    5fd8:	40011000 	.word	0x40011000

00005fdc <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5fdc:	4b07      	ldr	r3, [pc, #28]	; (5ffc <rtc_nrf_isr+0x20>)
    5fde:	2200      	movs	r2, #0
    5fe0:	601a      	str	r2, [r3, #0]
    5fe2:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    5fe4:	4a06      	ldr	r2, [pc, #24]	; (6000 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    5fe6:	4b07      	ldr	r3, [pc, #28]	; (6004 <rtc_nrf_isr+0x28>)
    5fe8:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    5fec:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    5fee:	1ac0      	subs	r0, r0, r3
    5ff0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    5ff4:	4403      	add	r3, r0
    5ff6:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    5ff8:	f01d bff2 	b.w	23fe0 <z_clock_announce>
    5ffc:	40011140 	.word	0x40011140
    6000:	200021bc 	.word	0x200021bc
    6004:	40011000 	.word	0x40011000

00006008 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    6008:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    600a:	4d10      	ldr	r5, [pc, #64]	; (604c <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    600c:	4b10      	ldr	r3, [pc, #64]	; (6050 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    600e:	2400      	movs	r4, #0
    6010:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6014:	601c      	str	r4, [r3, #0]
    6016:	681b      	ldr	r3, [r3, #0]
    6018:	4b0e      	ldr	r3, [pc, #56]	; (6054 <z_clock_driver_init+0x4c>)
    601a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    601e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    6022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6026:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    602a:	4622      	mov	r2, r4
    602c:	2101      	movs	r1, #1
    602e:	2011      	movs	r0, #17
    6030:	f000 faa2 	bl	6578 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6034:	2011      	movs	r0, #17
    6036:	f000 fa6d 	bl	6514 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    603a:	4a07      	ldr	r2, [pc, #28]	; (6058 <z_clock_driver_init+0x50>)
    603c:	2301      	movs	r3, #1
    603e:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    6040:	2002      	movs	r0, #2
    6042:	602b      	str	r3, [r5, #0]
    6044:	f7ff fe28 	bl	5c98 <z_nrf_clock_control_lf_on>

	return 0;
}
    6048:	4620      	mov	r0, r4
    604a:	bd38      	pop	{r3, r4, r5, pc}
    604c:	40011000 	.word	0x40011000
    6050:	40011140 	.word	0x40011140
    6054:	e000e100 	.word	0xe000e100
    6058:	40011008 	.word	0x40011008

0000605c <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    605e:	4b2b      	ldr	r3, [pc, #172]	; (610c <z_clock_set_timeout+0xb0>)
     return p_reg->COUNTER;
    6060:	4c2b      	ldr	r4, [pc, #172]	; (6110 <z_clock_set_timeout+0xb4>)
    6062:	6819      	ldr	r1, [r3, #0]
    6064:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6068:	4d2a      	ldr	r5, [pc, #168]	; (6114 <z_clock_set_timeout+0xb8>)
	return (a - b) & COUNTER_MAX;
    606a:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    606c:	f1b0 3fff 	cmp.w	r0, #4294967295
    6070:	bf08      	it	eq
    6072:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    6074:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    6078:	0212      	lsls	r2, r2, #8
    607a:	d436      	bmi.n	60ea <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    607c:	3801      	subs	r0, #1
    607e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6082:	42a8      	cmp	r0, r5
    6084:	bfa8      	it	ge
    6086:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6088:	3301      	adds	r3, #1
    608a:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    608c:	42a8      	cmp	r0, r5
    608e:	bf94      	ite	ls
    6090:	180d      	addls	r5, r1, r0
    6092:	194d      	addhi	r5, r1, r5
    p_reg->INTENCLR = mask;
    6094:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    6098:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
     return p_reg->COUNTER;
    609c:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    60a0:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    60a4:	4e1c      	ldr	r6, [pc, #112]	; (6118 <z_clock_set_timeout+0xbc>)
    60a6:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
    60a8:	1a9b      	subs	r3, r3, r2
    60aa:	6037      	str	r7, [r6, #0]
    60ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    60b0:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
    60b2:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    60b4:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    60b8:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    60bc:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    60c0:	d104      	bne.n	60cc <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    60c2:	200f      	movs	r0, #15
    60c4:	f027 fa04 	bl	2d4d0 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    60c8:	6037      	str	r7, [r6, #0]
    60ca:	6833      	ldr	r3, [r6, #0]
    60cc:	4b13      	ldr	r3, [pc, #76]	; (611c <z_clock_set_timeout+0xc0>)
    60ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    60d2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    60d6:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    60da:	1a2b      	subs	r3, r5, r0
    60dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    60e0:	2b01      	cmp	r3, #1
    60e2:	d104      	bne.n	60ee <z_clock_set_timeout+0x92>
		handle_next_cycle_case(t);
    60e4:	f7ff ff66 	bl	5fb4 <handle_next_cycle_case>
    60e8:	e00b      	b.n	6102 <z_clock_set_timeout+0xa6>
		ticks = 0;
    60ea:	2000      	movs	r0, #0
    60ec:	e7cc      	b.n	6088 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    60ee:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    60f2:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    60f6:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    60fa:	1a2d      	subs	r5, r5, r0
    60fc:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    60fe:	022b      	lsls	r3, r5, #8
    6100:	d4f0      	bmi.n	60e4 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    6102:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6106:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    610a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    610c:	200021bc 	.word	0x200021bc
    6110:	40011000 	.word	0x40011000
    6114:	007fffff 	.word	0x007fffff
    6118:	40011140 	.word	0x40011140
    611c:	e000e100 	.word	0xe000e100

00006120 <z_clock_elapsed>:
	__asm__ volatile(
    6120:	f04f 0220 	mov.w	r2, #32
    6124:	f3ef 8311 	mrs	r3, BASEPRI
    6128:	f382 8811 	msr	BASEPRI, r2
    612c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    6130:	4a06      	ldr	r2, [pc, #24]	; (614c <z_clock_elapsed+0x2c>)
    6132:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    6136:	4a06      	ldr	r2, [pc, #24]	; (6150 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    6138:	6812      	ldr	r2, [r2, #0]
    613a:	1a80      	subs	r0, r0, r2
    613c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    6140:	f383 8811 	msr	BASEPRI, r3
    6144:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    6148:	4770      	bx	lr
    614a:	bf00      	nop
    614c:	40011000 	.word	0x40011000
    6150:	200021bc 	.word	0x200021bc

00006154 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    6154:	4b01      	ldr	r3, [pc, #4]	; (615c <uECC_get_rng+0x8>)
    6156:	6818      	ldr	r0, [r3, #0]
    6158:	4770      	bx	lr
    615a:	bf00      	nop
    615c:	20000374 	.word	0x20000374

00006160 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    6160:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6162:	2208      	movs	r2, #8
{
    6164:	b089      	sub	sp, #36	; 0x24
    6166:	460c      	mov	r4, r1
    6168:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    616a:	f01f fc28 	bl	259be <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    616e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    6170:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    6172:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    6174:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    6176:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6178:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    617a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    617c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    617e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    6180:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    6182:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6184:	2308      	movs	r3, #8
    6186:	466a      	mov	r2, sp
    6188:	4669      	mov	r1, sp
    618a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    618c:	e9cd 7701 	strd	r7, r7, [sp, #4]
    6190:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6192:	f01f fb16 	bl	257c2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6196:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6198:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    619a:	466a      	mov	r2, sp
    619c:	4631      	mov	r1, r6
    619e:	4630      	mov	r0, r6
    61a0:	f01f fb0f 	bl	257c2 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    61a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    61a6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    61a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    61aa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    61ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    61ae:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    61b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    61b2:	4405      	add	r5, r0
	tmp[7] = 0;
    61b4:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    61b8:	466a      	mov	r2, sp
    61ba:	2308      	movs	r3, #8
    61bc:	4669      	mov	r1, sp
    61be:	4668      	mov	r0, sp
    61c0:	f01f faff 	bl	257c2 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    61c4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    61c6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    61c8:	2308      	movs	r3, #8
    61ca:	466a      	mov	r2, sp
    61cc:	4630      	mov	r0, r6
    61ce:	f01f faf8 	bl	257c2 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    61d2:	6a23      	ldr	r3, [r4, #32]
    61d4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    61d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    61d8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    61da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    61dc:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    61de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    61e0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    61e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    61e4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    61e6:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    61e8:	2308      	movs	r3, #8
    61ea:	466a      	mov	r2, sp
    61ec:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    61ee:	e9cd 7704 	strd	r7, r7, [sp, #16]
    61f2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    61f4:	f01f fae5 	bl	257c2 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    61f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    61fa:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    61fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    61fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    6200:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    6202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6204:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    6206:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    6208:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    620a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    620c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    620e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    6212:	6a23      	ldr	r3, [r4, #32]
    6214:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6216:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6218:	2308      	movs	r3, #8
    621a:	466a      	mov	r2, sp
    621c:	4630      	mov	r0, r6
    621e:	f01f fad0 	bl	257c2 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    6222:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6224:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    6226:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6228:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    622a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    622c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    622e:	6a23      	ldr	r3, [r4, #32]
    6230:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    6232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6234:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6236:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6238:	2308      	movs	r3, #8
    623a:	466a      	mov	r2, sp
    623c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    623e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6242:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6244:	f01f fbf1 	bl	25a2a <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    6248:	6b23      	ldr	r3, [r4, #48]	; 0x30
    624a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    624c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    624e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    6250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6252:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    6254:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6256:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    6258:	6a63      	ldr	r3, [r4, #36]	; 0x24
    625a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    625c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    625e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6260:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6262:	2308      	movs	r3, #8
    6264:	466a      	mov	r2, sp
    6266:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    6268:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    626c:	f01f fbdd 	bl	25a2a <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    6270:	6b63      	ldr	r3, [r4, #52]	; 0x34
    6272:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    6274:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6276:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    6278:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    627a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    627c:	6a23      	ldr	r3, [r4, #32]
    627e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    6280:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6282:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    6284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    6286:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    628a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    628c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    628e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6290:	2308      	movs	r3, #8
    6292:	466a      	mov	r2, sp
    6294:	4630      	mov	r0, r6
    6296:	f01f fbc8 	bl	25a2a <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    629a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    629c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    629e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    62a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    62a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    62a6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    62a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    62aa:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    62ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    62ae:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    62b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    62b4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    62b6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    62b8:	2308      	movs	r3, #8
    62ba:	466a      	mov	r2, sp
    62bc:	4630      	mov	r0, r6
    62be:	f01f fbb4 	bl	25a2a <uECC_vli_sub>

	if (carry < 0) {
    62c2:	1a2d      	subs	r5, r5, r0
    62c4:	d410      	bmi.n	62e8 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    62c6:	4c0d      	ldr	r4, [pc, #52]	; (62fc <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    62c8:	b935      	cbnz	r5, 62d8 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    62ca:	2208      	movs	r2, #8
    62cc:	4631      	mov	r1, r6
    62ce:	4620      	mov	r0, r4
    62d0:	f01f fb81 	bl	259d6 <uECC_vli_cmp_unsafe>
		while (carry || 
    62d4:	2801      	cmp	r0, #1
    62d6:	d00f      	beq.n	62f8 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    62d8:	2308      	movs	r3, #8
    62da:	4622      	mov	r2, r4
    62dc:	4631      	mov	r1, r6
    62de:	4630      	mov	r0, r6
    62e0:	f01f fba3 	bl	25a2a <uECC_vli_sub>
    62e4:	1a2d      	subs	r5, r5, r0
    62e6:	e7ef      	b.n	62c8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    62e8:	4a04      	ldr	r2, [pc, #16]	; (62fc <vli_mmod_fast_secp256r1+0x19c>)
    62ea:	2308      	movs	r3, #8
    62ec:	4631      	mov	r1, r6
    62ee:	4630      	mov	r0, r6
    62f0:	f01f fa67 	bl	257c2 <uECC_vli_add>
		while (carry < 0);
    62f4:	182d      	adds	r5, r5, r0
    62f6:	d4f8      	bmi.n	62ea <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    62f8:	b009      	add	sp, #36	; 0x24
    62fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62fc:	0002de4c 	.word	0x0002de4c

00006300 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    6300:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    6302:	4e26      	ldr	r6, [pc, #152]	; (639c <tc_aes128_set_encrypt_key+0x9c>)
{
    6304:	4607      	mov	r7, r0
    6306:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    6308:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    630a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    630c:	ad01      	add	r5, sp, #4
    630e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6310:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    6312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    6314:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    6318:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    631c:	4638      	mov	r0, r7
    631e:	2f00      	cmp	r7, #0
    6320:	d038      	beq.n	6394 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    6322:	2c00      	cmp	r4, #0
    6324:	d038      	beq.n	6398 <tc_aes128_set_encrypt_key+0x98>
    6326:	1f38      	subs	r0, r7, #4
    6328:	4621      	mov	r1, r4
    632a:	4602      	mov	r2, r0
    632c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    632e:	784b      	ldrb	r3, [r1, #1]
    6330:	780d      	ldrb	r5, [r1, #0]
    6332:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6334:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6338:	78cd      	ldrb	r5, [r1, #3]
    633a:	432b      	orrs	r3, r5
    633c:	788d      	ldrb	r5, [r1, #2]
    633e:	3104      	adds	r1, #4
    6340:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6344:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6346:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    634a:	d1f0      	bne.n	632e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    634c:	4c14      	ldr	r4, [pc, #80]	; (63a0 <tc_aes128_set_encrypt_key+0xa0>)
    634e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    6350:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    6352:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    6354:	d116      	bne.n	6384 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6356:	f3c3 4207 	ubfx	r2, r3, #16, #8
    635a:	5ca5      	ldrb	r5, [r4, r2]
    635c:	0e1a      	lsrs	r2, r3, #24
    635e:	5ca2      	ldrb	r2, [r4, r2]
    6360:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    6364:	f3c3 2507 	ubfx	r5, r3, #8, #8
    6368:	b2db      	uxtb	r3, r3
    636a:	5d65      	ldrb	r5, [r4, r5]
    636c:	5ce3      	ldrb	r3, [r4, r3]
    636e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    6372:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    6376:	ad0c      	add	r5, sp, #48	; 0x30
    6378:	f021 0303 	bic.w	r3, r1, #3
    637c:	442b      	add	r3, r5
    637e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    6382:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    6384:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    6388:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    638a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    638c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    638e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    6390:	d1de      	bne.n	6350 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    6392:	2001      	movs	r0, #1
}
    6394:	b00d      	add	sp, #52	; 0x34
    6396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    6398:	4620      	mov	r0, r4
    639a:	e7fb      	b.n	6394 <tc_aes128_set_encrypt_key+0x94>
    639c:	0002dc80 	.word	0x0002dc80
    63a0:	000330f9 	.word	0x000330f9

000063a4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    63a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    63a8:	4615      	mov	r5, r2
    63aa:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    63ac:	4606      	mov	r6, r0
    63ae:	2800      	cmp	r0, #0
    63b0:	d058      	beq.n	6464 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    63b2:	2900      	cmp	r1, #0
    63b4:	d059      	beq.n	646a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    63b6:	2a00      	cmp	r2, #0
    63b8:	d059      	beq.n	646e <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    63ba:	2310      	movs	r3, #16
    63bc:	460a      	mov	r2, r1
    63be:	4668      	mov	r0, sp
    63c0:	4619      	mov	r1, r3
    63c2:	f01f f93a 	bl	2563a <_copy>
	add_round_key(state, s->words);
    63c6:	4629      	mov	r1, r5
    63c8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    63ca:	4c2a      	ldr	r4, [pc, #168]	; (6474 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    63cc:	f020 f83f 	bl	2644e <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    63d0:	f105 0710 	add.w	r7, r5, #16
    63d4:	46a1      	mov	r9, r4
    63d6:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    63d8:	46e8      	mov	r8, sp
{
    63da:	466a      	mov	r2, sp
    63dc:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    63de:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    63e0:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    63e2:	5c61      	ldrb	r1, [r4, r1]
    63e4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    63e8:	d1f9      	bne.n	63de <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    63ea:	4668      	mov	r0, sp
    63ec:	f020 f874 	bl	264d8 <shift_rows>
	mult_row_column(t, s);
    63f0:	4669      	mov	r1, sp
    63f2:	a804      	add	r0, sp, #16
    63f4:	f020 f8a9 	bl	2654a <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    63f8:	a901      	add	r1, sp, #4
    63fa:	a805      	add	r0, sp, #20
    63fc:	f020 f8a5 	bl	2654a <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    6400:	a902      	add	r1, sp, #8
    6402:	a806      	add	r0, sp, #24
    6404:	f020 f8a1 	bl	2654a <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    6408:	a903      	add	r1, sp, #12
    640a:	a807      	add	r0, sp, #28
    640c:	f020 f89d 	bl	2654a <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    6410:	2310      	movs	r3, #16
    6412:	4619      	mov	r1, r3
    6414:	eb0d 0203 	add.w	r2, sp, r3
    6418:	4668      	mov	r0, sp
    641a:	f01f f90e 	bl	2563a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    641e:	4639      	mov	r1, r7
    6420:	4668      	mov	r0, sp
    6422:	3710      	adds	r7, #16
    6424:	f020 f813 	bl	2644e <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    6428:	42af      	cmp	r7, r5
    642a:	d1d5      	bne.n	63d8 <tc_aes_encrypt+0x34>
    642c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    642e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    6432:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    6434:	f819 3003 	ldrb.w	r3, [r9, r3]
    6438:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    643c:	d1f7      	bne.n	642e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    643e:	4668      	mov	r0, sp
    6440:	f020 f84a 	bl	264d8 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    6444:	4629      	mov	r1, r5
    6446:	4668      	mov	r0, sp
    6448:	f020 f801 	bl	2644e <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    644c:	2310      	movs	r3, #16
    644e:	4619      	mov	r1, r3
    6450:	466a      	mov	r2, sp
    6452:	4630      	mov	r0, r6
    6454:	f01f f8f1 	bl	2563a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    6458:	4668      	mov	r0, sp
    645a:	2210      	movs	r2, #16
    645c:	4621      	mov	r1, r4
    645e:	f01f f8f9 	bl	25654 <_set>

	return TC_CRYPTO_SUCCESS;
    6462:	2001      	movs	r0, #1
}
    6464:	b009      	add	sp, #36	; 0x24
    6466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    646a:	4608      	mov	r0, r1
    646c:	e7fa      	b.n	6464 <tc_aes_encrypt+0xc0>
    646e:	4610      	mov	r0, r2
    6470:	e7f8      	b.n	6464 <tc_aes_encrypt+0xc0>
    6472:	bf00      	nop
    6474:	000330f9 	.word	0x000330f9

00006478 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6478:	4a09      	ldr	r2, [pc, #36]	; (64a0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    647a:	490a      	ldr	r1, [pc, #40]	; (64a4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    647c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    647e:	6809      	ldr	r1, [r1, #0]
    6480:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6482:	4909      	ldr	r1, [pc, #36]	; (64a8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    6484:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6486:	684b      	ldr	r3, [r1, #4]
    6488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    648c:	604b      	str	r3, [r1, #4]
    648e:	2300      	movs	r3, #0
    6490:	f383 8811 	msr	BASEPRI, r3
    6494:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6498:	6893      	ldr	r3, [r2, #8]
}
    649a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    649c:	4770      	bx	lr
    649e:	bf00      	nop
    64a0:	200040a0 	.word	0x200040a0
    64a4:	0002f5c8 	.word	0x0002f5c8
    64a8:	e000ed00 	.word	0xe000ed00

000064ac <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    64ac:	490f      	ldr	r1, [pc, #60]	; (64ec <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    64ae:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    64b0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    64b4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    64b6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    64ba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    64be:	2020      	movs	r0, #32
    msr BASEPRI, r0
    64c0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    64c4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    64c8:	4f09      	ldr	r7, [pc, #36]	; (64f0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    64ca:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    64ce:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    64d0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    64d2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    64d4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    64d6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    64d8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    64da:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    64de:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    64e2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    64e6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    64ea:	4770      	bx	lr
    ldr r1, =_kernel
    64ec:	200040a0 	.word	0x200040a0
    ldr v4, =_SCS_ICSR
    64f0:	e000ed04 	.word	0xe000ed04

000064f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    64f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    64f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    64fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    64fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6502:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6504:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6508:	2902      	cmp	r1, #2
    beq _oops
    650a:	d0ff      	beq.n	650c <_oops>

0000650c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    650c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    650e:	f020 f961 	bl	267d4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    6512:	bd01      	pop	{r0, pc}

00006514 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6514:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6516:	2b00      	cmp	r3, #0
    6518:	db08      	blt.n	652c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    651a:	2201      	movs	r2, #1
    651c:	f000 001f 	and.w	r0, r0, #31
    6520:	fa02 f000 	lsl.w	r0, r2, r0
    6524:	095b      	lsrs	r3, r3, #5
    6526:	4a02      	ldr	r2, [pc, #8]	; (6530 <arch_irq_enable+0x1c>)
    6528:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    652c:	4770      	bx	lr
    652e:	bf00      	nop
    6530:	e000e100 	.word	0xe000e100

00006534 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6534:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    6536:	2b00      	cmp	r3, #0
    6538:	db0d      	blt.n	6556 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    653a:	2201      	movs	r2, #1
    653c:	095b      	lsrs	r3, r3, #5
    653e:	f000 001f 	and.w	r0, r0, #31
    6542:	fa02 f000 	lsl.w	r0, r2, r0
    6546:	3320      	adds	r3, #32
    6548:	4a03      	ldr	r2, [pc, #12]	; (6558 <arch_irq_disable+0x24>)
    654a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    654e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6552:	f3bf 8f6f 	isb	sy
}
    6556:	4770      	bx	lr
    6558:	e000e100 	.word	0xe000e100

0000655c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    655c:	4b05      	ldr	r3, [pc, #20]	; (6574 <arch_irq_is_enabled+0x18>)
    655e:	0942      	lsrs	r2, r0, #5
    6560:	f000 001f 	and.w	r0, r0, #31
    6564:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6568:	2301      	movs	r3, #1
    656a:	fa03 f000 	lsl.w	r0, r3, r0
}
    656e:	4010      	ands	r0, r2
    6570:	4770      	bx	lr
    6572:	bf00      	nop
    6574:	e000e100 	.word	0xe000e100

00006578 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6578:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    657a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    657c:	bfa8      	it	ge
    657e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    6582:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6586:	bfb8      	it	lt
    6588:	4b06      	ldrlt	r3, [pc, #24]	; (65a4 <z_arm_irq_priority_set+0x2c>)
    658a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    658e:	bfac      	ite	ge
    6590:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6594:	f000 000f 	andlt.w	r0, r0, #15
    6598:	b2c9      	uxtb	r1, r1
    659a:	bfb4      	ite	lt
    659c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    659e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    65a2:	4770      	bx	lr
    65a4:	e000ed14 	.word	0xe000ed14

000065a8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    65a8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    65aa:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    65ac:	4b04      	ldr	r3, [pc, #16]	; (65c0 <_arch_isr_direct_pm+0x18>)
    65ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
    65b0:	b118      	cbz	r0, 65ba <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    65b2:	2200      	movs	r2, #0
    65b4:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
    65b6:	f026 fd46 	bl	2d046 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    65ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    65bc:	bd08      	pop	{r3, pc}
    65be:	bf00      	nop
    65c0:	200040a0 	.word	0x200040a0

000065c4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    65c4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    65c8:	9b00      	ldr	r3, [sp, #0]
    65ca:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    65ce:	490a      	ldr	r1, [pc, #40]	; (65f8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    65d0:	9b01      	ldr	r3, [sp, #4]
    65d2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    65d6:	9b02      	ldr	r3, [sp, #8]
    65d8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    65dc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    65e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    65e4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    65e8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    65ec:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    65ee:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    65f0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    65f2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    65f4:	4770      	bx	lr
    65f6:	bf00      	nop
    65f8:	0002463f 	.word	0x0002463f

000065fc <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    65fc:	b508      	push	{r3, lr}
    65fe:	4606      	mov	r6, r0
    6600:	460d      	mov	r5, r1
    6602:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    6604:	f000 f99c 	bl	6940 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6608:	4b07      	ldr	r3, [pc, #28]	; (6628 <arch_switch_to_main_thread+0x2c>)
    660a:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    660c:	4620      	mov	r0, r4
    660e:	f385 8809 	msr	PSP, r5
    6612:	2100      	movs	r1, #0
    6614:	b663      	cpsie	if
    6616:	f381 8811 	msr	BASEPRI, r1
    661a:	f3bf 8f6f 	isb	sy
    661e:	2200      	movs	r2, #0
    6620:	2300      	movs	r3, #0
    6622:	f01e f80c 	bl	2463e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6626:	bf00      	nop
    6628:	200040a0 	.word	0x200040a0

0000662c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    662c:	4901      	ldr	r1, [pc, #4]	; (6634 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    662e:	2210      	movs	r2, #16
	str	r2, [r1]
    6630:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    6632:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    6634:	e000ed10 	.word	0xe000ed10

00006638 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6638:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    663a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    663c:	f380 8811 	msr	BASEPRI, r0
	isb
    6640:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    6644:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    6648:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    664a:	b662      	cpsie	i
	isb
    664c:	f3bf 8f6f 	isb	sy

	bx	lr
    6650:	4770      	bx	lr
    6652:	bf00      	nop

00006654 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    6654:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    6656:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    6658:	f381 8811 	msr	BASEPRI, r1

	wfe
    665c:	bf20      	wfe

	msr	BASEPRI, r0
    665e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    6662:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    6664:	4770      	bx	lr
    6666:	bf00      	nop

00006668 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6668:	bf30      	wfi
    b z_SysNmiOnReset
    666a:	f7ff bffd 	b.w	6668 <z_SysNmiOnReset>
    666e:	bf00      	nop

00006670 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6670:	4a0e      	ldr	r2, [pc, #56]	; (66ac <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    6672:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6674:	4b0e      	ldr	r3, [pc, #56]	; (66b0 <z_arm_prep_c+0x40>)
    6676:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    667a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    667c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6680:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6684:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6688:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    668c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    6690:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    6694:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    6698:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    669c:	f01c fc3a 	bl	22f14 <z_bss_zero>
	z_data_copy();
    66a0:	f01c fc42 	bl	22f28 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    66a4:	f000 f91e 	bl	68e4 <z_arm_interrupt_init>
	z_cstart();
    66a8:	f01c fc7c 	bl	22fa4 <z_cstart>
    66ac:	00000000 	.word	0x00000000
    66b0:	e000ed00 	.word	0xe000ed00

000066b4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    66b4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    66b6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    66b8:	4a0b      	ldr	r2, [pc, #44]	; (66e8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    66ba:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    66bc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    66be:	bf1e      	ittt	ne
	movne	r1, #0
    66c0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    66c2:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
    66c4:	f026 fcbf 	blne	2d046 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    66c8:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    66ca:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    66ce:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    66d2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    66d6:	4905      	ldr	r1, [pc, #20]	; (66ec <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    66d8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    66da:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    66dc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    66de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    66e2:	4903      	ldr	r1, [pc, #12]	; (66f0 <_isr_wrapper+0x3c>)
	bx r1
    66e4:	4708      	bx	r1
    66e6:	0000      	.short	0x0000
	ldr r2, =_kernel
    66e8:	200040a0 	.word	0x200040a0
	ldr r1, =_sw_isr_table
    66ec:	0002da10 	.word	0x0002da10
	ldr r1, =z_arm_int_exit
    66f0:	000068c9 	.word	0x000068c9

000066f4 <__start>:
    msr CONTROL, r0
    isb
#endif

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    66f4:	f020 f9b3 	bl	26a5e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    66f8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    66fa:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    66fe:	4808      	ldr	r0, [pc, #32]	; (6720 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    6700:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    6704:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6706:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    670a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    670e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    6710:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6712:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6716:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    671a:	f7ff ffa9 	bl	6670 <z_arm_prep_c>
    671e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    6720:	2000b480 	.word	0x2000b480

00006724 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    6724:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6728:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    672c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    672e:	4672      	mov	r2, lr
	bl z_arm_fault
    6730:	f000 f84e 	bl	67d0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    6734:	bd01      	pop	{r0, pc}
    6736:	bf00      	nop

00006738 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6738:	4b0c      	ldr	r3, [pc, #48]	; (676c <mem_manage_fault.isra.0+0x34>)
    673a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    673c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    673e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6740:	0792      	lsls	r2, r2, #30
    6742:	d508      	bpl.n	6756 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    6744:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6746:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6748:	0612      	lsls	r2, r2, #24
    674a:	d504      	bpl.n	6756 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    674c:	b118      	cbz	r0, 6756 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    674e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6754:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6756:	4b05      	ldr	r3, [pc, #20]	; (676c <mem_manage_fault.isra.0+0x34>)
    6758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    675a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    675c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    675e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    6760:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6762:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    6766:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    6768:	7008      	strb	r0, [r1, #0]

	return reason;
}
    676a:	4770      	bx	lr
    676c:	e000ed00 	.word	0xe000ed00

00006770 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6770:	4b0d      	ldr	r3, [pc, #52]	; (67a8 <bus_fault.isra.0+0x38>)
    6772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6778:	0592      	lsls	r2, r2, #22
    677a:	d508      	bpl.n	678e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    677c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    677e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6780:	0412      	lsls	r2, r2, #16
    6782:	d504      	bpl.n	678e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    6784:	b118      	cbz	r0, 678e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6788:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    678c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    678e:	4b06      	ldr	r3, [pc, #24]	; (67a8 <bus_fault.isra.0+0x38>)
    6790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6792:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6794:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6796:	bf58      	it	pl
    6798:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    679a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    679c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    679e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    67a2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    67a4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    67a6:	4770      	bx	lr
    67a8:	e000ed00 	.word	0xe000ed00

000067ac <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    67ac:	4b07      	ldr	r3, [pc, #28]	; (67cc <usage_fault.isra.0+0x20>)
    67ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    67b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    67b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    67b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    67b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    67b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    67ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    67bc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    67c0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    67c4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    67c6:	2000      	movs	r0, #0
    67c8:	4770      	bx	lr
    67ca:	bf00      	nop
    67cc:	e000ed00 	.word	0xe000ed00

000067d0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    67d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    67d2:	4b36      	ldr	r3, [pc, #216]	; (68ac <z_arm_fault+0xdc>)
    67d4:	685b      	ldr	r3, [r3, #4]
{
    67d6:	b08a      	sub	sp, #40	; 0x28
    67d8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    67da:	f3c3 0308 	ubfx	r3, r3, #0, #9
    67de:	2500      	movs	r5, #0
    67e0:	f385 8811 	msr	BASEPRI, r5
    67e4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    67e8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    67ec:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    67f0:	d111      	bne.n	6816 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    67f2:	f002 010c 	and.w	r1, r2, #12
    67f6:	2908      	cmp	r1, #8
    67f8:	d00d      	beq.n	6816 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    67fa:	0711      	lsls	r1, r2, #28
    67fc:	d401      	bmi.n	6802 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    67fe:	4606      	mov	r6, r0
			*nested_exc = true;
    6800:	2501      	movs	r5, #1
	*recoverable = false;
    6802:	2200      	movs	r2, #0
    6804:	3b03      	subs	r3, #3
    6806:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    680a:	2b03      	cmp	r3, #3
    680c:	d847      	bhi.n	689e <z_arm_fault+0xce>
    680e:	e8df f003 	tbb	[pc, r3]
    6812:	3e04      	.short	0x3e04
    6814:	3b42      	.short	0x3b42
		return NULL;
    6816:	462e      	mov	r6, r5
    6818:	e7f3      	b.n	6802 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    681a:	4b24      	ldr	r3, [pc, #144]	; (68ac <z_arm_fault+0xdc>)
    681c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    681e:	0792      	lsls	r2, r2, #30
    6820:	d43d      	bmi.n	689e <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6822:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    6824:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    6828:	d008      	beq.n	683c <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    682a:	3328      	adds	r3, #40	; 0x28
    682c:	781b      	ldrb	r3, [r3, #0]
    682e:	b1eb      	cbz	r3, 686c <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    6830:	f10d 0107 	add.w	r1, sp, #7
    6834:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    6836:	f7ff ff7f 	bl	6738 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    683a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    683c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6840:	b993      	cbnz	r3, 6868 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    6842:	2220      	movs	r2, #32
    6844:	4631      	mov	r1, r6
    6846:	a802      	add	r0, sp, #8
    6848:	f020 f8ab 	bl	269a2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    684c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    684e:	b345      	cbz	r5, 68a2 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    6850:	f3c3 0208 	ubfx	r2, r3, #0, #9
    6854:	b922      	cbnz	r2, 6860 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    6856:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    685a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    685e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6860:	a902      	add	r1, sp, #8
    6862:	4620      	mov	r0, r4
    6864:	f01f ffb4 	bl	267d0 <z_arm_fatal_error>
}
    6868:	b00a      	add	sp, #40	; 0x28
    686a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    686c:	4b10      	ldr	r3, [pc, #64]	; (68b0 <z_arm_fault+0xe0>)
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	b12b      	cbz	r3, 687e <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    6872:	f10d 0107 	add.w	r1, sp, #7
    6876:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    6878:	f7ff ff7a 	bl	6770 <bus_fault.isra.0>
    687c:	e7dd      	b.n	683a <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    687e:	4b0d      	ldr	r3, [pc, #52]	; (68b4 <z_arm_fault+0xe4>)
    6880:	8818      	ldrh	r0, [r3, #0]
    6882:	b284      	uxth	r4, r0
    6884:	2c00      	cmp	r4, #0
    6886:	d0d9      	beq.n	683c <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    6888:	f7ff ff90 	bl	67ac <usage_fault.isra.0>
    688c:	e7d5      	b.n	683a <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    688e:	f10d 0107 	add.w	r1, sp, #7
    6892:	2000      	movs	r0, #0
    6894:	e7cf      	b.n	6836 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    6896:	f10d 0107 	add.w	r1, sp, #7
    689a:	2000      	movs	r0, #0
    689c:	e7ec      	b.n	6878 <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    689e:	2400      	movs	r4, #0
    68a0:	e7cc      	b.n	683c <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    68a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    68a6:	f023 0301 	bic.w	r3, r3, #1
    68aa:	e7d8      	b.n	685e <z_arm_fault+0x8e>
    68ac:	e000ed00 	.word	0xe000ed00
    68b0:	e000ed29 	.word	0xe000ed29
    68b4:	e000ed2a 	.word	0xe000ed2a

000068b8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    68b8:	4a02      	ldr	r2, [pc, #8]	; (68c4 <z_arm_fault_init+0xc>)
    68ba:	6953      	ldr	r3, [r2, #20]
    68bc:	f043 0310 	orr.w	r3, r3, #16
    68c0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    68c2:	4770      	bx	lr
    68c4:	e000ed00 	.word	0xe000ed00

000068c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    68c8:	4b04      	ldr	r3, [pc, #16]	; (68dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    68ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    68cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    68ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    68d0:	d003      	beq.n	68da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    68d2:	4903      	ldr	r1, [pc, #12]	; (68e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    68d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    68d8:	600a      	str	r2, [r1, #0]

000068da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    68da:	4770      	bx	lr
	ldr r3, =_kernel
    68dc:	200040a0 	.word	0x200040a0
	ldr r1, =_SCS_ICSR
    68e0:	e000ed04 	.word	0xe000ed04

000068e4 <z_arm_interrupt_init>:
    68e4:	4804      	ldr	r0, [pc, #16]	; (68f8 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    68e6:	2300      	movs	r3, #0
    68e8:	2120      	movs	r1, #32
    68ea:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    68ec:	3301      	adds	r3, #1
    68ee:	2b30      	cmp	r3, #48	; 0x30
    68f0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    68f4:	d1f9      	bne.n	68ea <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    68f6:	4770      	bx	lr
    68f8:	e000e100 	.word	0xe000e100

000068fc <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    68fc:	b508      	push	{r3, lr}
	if (_current == thread) {
    68fe:	4b0e      	ldr	r3, [pc, #56]	; (6938 <z_impl_k_thread_abort+0x3c>)
    6900:	689b      	ldr	r3, [r3, #8]
    6902:	4283      	cmp	r3, r0
    6904:	d107      	bne.n	6916 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6906:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    690a:	b193      	cbz	r3, 6932 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    690c:	4a0b      	ldr	r2, [pc, #44]	; (693c <z_impl_k_thread_abort+0x40>)
    690e:	6853      	ldr	r3, [r2, #4]
    6910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6914:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    6916:	f01c ff0b 	bl	23730 <z_thread_single_abort>
	__asm__ volatile(
    691a:	f04f 0320 	mov.w	r3, #32
    691e:	f3ef 8011 	mrs	r0, BASEPRI
    6922:	f383 8811 	msr	BASEPRI, r3
    6926:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    692a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    692e:	f026 bcee 	b.w	2d30e <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    6932:	f01d f9e1 	bl	23cf8 <z_self_abort>
    6936:	bf00      	nop
    6938:	200040a0 	.word	0x200040a0
    693c:	e000ed00 	.word	0xe000ed00

00006940 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    6940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    6942:	4b08      	ldr	r3, [pc, #32]	; (6964 <z_arm_configure_static_mpu_regions+0x24>)
    6944:	9301      	str	r3, [sp, #4]
    6946:	4b08      	ldr	r3, [pc, #32]	; (6968 <z_arm_configure_static_mpu_regions+0x28>)
    6948:	9302      	str	r3, [sp, #8]
    694a:	4b08      	ldr	r3, [pc, #32]	; (696c <z_arm_configure_static_mpu_regions+0x2c>)
    694c:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    694e:	ab01      	add	r3, sp, #4
    6950:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    6952:	4a07      	ldr	r2, [pc, #28]	; (6970 <z_arm_configure_static_mpu_regions+0x30>)
    6954:	4b07      	ldr	r3, [pc, #28]	; (6974 <z_arm_configure_static_mpu_regions+0x34>)
    6956:	2101      	movs	r1, #1
    6958:	4668      	mov	r0, sp
    695a:	f000 f893 	bl	6a84 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    695e:	b005      	add	sp, #20
    6960:	f85d fb04 	ldr.w	pc, [sp], #4
    6964:	20000000 	.word	0x20000000
    6968:	00000000 	.word	0x00000000
    696c:	060b0000 	.word	0x060b0000
    6970:	20000000 	.word	0x20000000
    6974:	20040000 	.word	0x20040000

00006978 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    6978:	f8df c084 	ldr.w	ip, [pc, #132]	; 6a00 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    697c:	b5f0      	push	{r4, r5, r6, r7, lr}
    697e:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    6980:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    6982:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    6984:	428f      	cmp	r7, r1
    6986:	db00      	blt.n	698a <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    6988:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    698a:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    698e:	f8de 4004 	ldr.w	r4, [lr, #4]
    6992:	b394      	cbz	r4, 69fa <mpu_configure_regions+0x82>
		if (do_sanity_check &&
    6994:	b143      	cbz	r3, 69a8 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    6996:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6998:	422c      	tst	r4, r5
    699a:	d119      	bne.n	69d0 <mpu_configure_regions+0x58>
		&&
    699c:	2c1f      	cmp	r4, #31
    699e:	d917      	bls.n	69d0 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1U)) == 0U);
    69a0:	f8de 2000 	ldr.w	r2, [lr]
		&&
    69a4:	4215      	tst	r5, r2
    69a6:	d113      	bne.n	69d0 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    69a8:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    69aa:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    69ac:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    69b0:	f8de 0008 	ldr.w	r0, [lr, #8]
    69b4:	d90f      	bls.n	69d6 <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    69b6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    69ba:	d80e      	bhi.n	69da <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    69bc:	3c01      	subs	r4, #1
    69be:	fab4 f484 	clz	r4, r4
    69c2:	f1c4 041f 	rsb	r4, r4, #31
    69c6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    69c8:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    69ca:	ea44 0400 	orr.w	r4, r4, r0
    69ce:	d906      	bls.n	69de <mpu_configure_regions+0x66>
			return -EINVAL;
    69d0:	f06f 0015 	mvn.w	r0, #21
    69d4:	e7d8      	b.n	6988 <mpu_configure_regions+0x10>
		return REGION_32B;
    69d6:	2408      	movs	r4, #8
    69d8:	e7f6      	b.n	69c8 <mpu_configure_regions+0x50>
		return REGION_4G;
    69da:	243e      	movs	r4, #62	; 0x3e
    69dc:	e7f4      	b.n	69c8 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    69de:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    69e2:	4315      	orrs	r5, r2
    69e4:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    69e8:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    69ec:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    69f0:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    69f2:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    69f6:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    69fa:	3701      	adds	r7, #1
    69fc:	e7c2      	b.n	6984 <mpu_configure_regions+0xc>
    69fe:	bf00      	nop
    6a00:	e000ed90 	.word	0xe000ed90

00006a04 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6a04:	4b03      	ldr	r3, [pc, #12]	; (6a14 <arm_core_mpu_enable+0x10>)
    6a06:	2205      	movs	r2, #5
    6a08:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    6a0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6a0e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6a12:	4770      	bx	lr
    6a14:	e000ed90 	.word	0xe000ed90

00006a18 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    6a18:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6a1c:	4b01      	ldr	r3, [pc, #4]	; (6a24 <arm_core_mpu_disable+0xc>)
    6a1e:	2200      	movs	r2, #0
    6a20:	605a      	str	r2, [r3, #4]
}
    6a22:	4770      	bx	lr
    6a24:	e000ed90 	.word	0xe000ed90

00006a28 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    6a28:	4913      	ldr	r1, [pc, #76]	; (6a78 <arm_mpu_init+0x50>)
    6a2a:	6808      	ldr	r0, [r1, #0]
    6a2c:	2808      	cmp	r0, #8
{
    6a2e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6a30:	d81e      	bhi.n	6a70 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6a32:	f7ff fff1 	bl	6a18 <arm_core_mpu_disable>
	MPU->RNR = index;
    6a36:	4c11      	ldr	r4, [pc, #68]	; (6a7c <arm_mpu_init+0x54>)
    6a38:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6a3a:	2200      	movs	r2, #0
    6a3c:	4290      	cmp	r0, r2
    6a3e:	f101 010c 	add.w	r1, r1, #12
    6a42:	d105      	bne.n	6a50 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6a44:	4b0e      	ldr	r3, [pc, #56]	; (6a80 <arm_mpu_init+0x58>)
    6a46:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    6a48:	f7ff ffdc 	bl	6a04 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    6a4c:	2000      	movs	r0, #0
}
    6a4e:	bd10      	pop	{r4, pc}
    6a50:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6a52:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    6a56:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6a5a:	4313      	orrs	r3, r2
    6a5c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6a60:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6a66:	f043 0301 	orr.w	r3, r3, #1
    6a6a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6a6c:	3201      	adds	r2, #1
    6a6e:	e7e5      	b.n	6a3c <arm_mpu_init+0x14>
		return -1;
    6a70:	f04f 30ff 	mov.w	r0, #4294967295
    6a74:	e7eb      	b.n	6a4e <arm_mpu_init+0x26>
    6a76:	bf00      	nop
    6a78:	0002def8 	.word	0x0002def8
    6a7c:	e000ed90 	.word	0xe000ed90
    6a80:	2000908b 	.word	0x2000908b

00006a84 <arm_core_mpu_configure_static_mpu_regions>:
{
    6a84:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    6a86:	4c03      	ldr	r4, [pc, #12]	; (6a94 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6a88:	2301      	movs	r3, #1
    6a8a:	7822      	ldrb	r2, [r4, #0]
    6a8c:	f7ff ff74 	bl	6978 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6a90:	7020      	strb	r0, [r4, #0]
}
    6a92:	bd10      	pop	{r4, pc}
    6a94:	2000908b 	.word	0x2000908b

00006a98 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6a98:	4b01      	ldr	r3, [pc, #4]	; (6aa0 <__stdout_hook_install+0x8>)
    6a9a:	6018      	str	r0, [r3, #0]
}
    6a9c:	4770      	bx	lr
    6a9e:	bf00      	nop
    6aa0:	20000378 	.word	0x20000378

00006aa4 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    6aa4:	b40e      	push	{r1, r2, r3}
    6aa6:	b50f      	push	{r0, r1, r2, r3, lr}
    6aa8:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    6aaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    6aae:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    6ab2:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    6ab4:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    6ab6:	4806      	ldr	r0, [pc, #24]	; (6ad0 <sprintf+0x2c>)
	va_start(vargs, format);
    6ab8:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    6aba:	a902      	add	r1, sp, #8
    6abc:	f7fd fc22 	bl	4304 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    6ac0:	9b02      	ldr	r3, [sp, #8]
    6ac2:	2200      	movs	r2, #0
    6ac4:	701a      	strb	r2, [r3, #0]
	return r;
}
    6ac6:	b004      	add	sp, #16
    6ac8:	f85d eb04 	ldr.w	lr, [sp], #4
    6acc:	b003      	add	sp, #12
    6ace:	4770      	bx	lr
    6ad0:	00026a45 	.word	0x00026a45

00006ad4 <nordicsemi_nrf52_init>:
    6ad4:	f04f 0320 	mov.w	r3, #32
    6ad8:	f3ef 8211 	mrs	r2, BASEPRI
    6adc:	f383 8811 	msr	BASEPRI, r3
    6ae0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    6ae4:	4906      	ldr	r1, [pc, #24]	; (6b00 <nordicsemi_nrf52_init+0x2c>)
    6ae6:	2301      	movs	r3, #1
    6ae8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6aec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    6af0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    6af4:	f382 8811 	msr	BASEPRI, r2
    6af8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    6afc:	2000      	movs	r0, #0
    6afe:	4770      	bx	lr
    6b00:	4001e000 	.word	0x4001e000

00006b04 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    6b04:	b120      	cbz	r0, 6b10 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    6b06:	4b03      	ldr	r3, [pc, #12]	; (6b14 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    6b08:	0180      	lsls	r0, r0, #6
    6b0a:	f043 0301 	orr.w	r3, r3, #1
    6b0e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6b10:	4770      	bx	lr
    6b12:	bf00      	nop
    6b14:	0002dd50 	.word	0x0002dd50

00006b18 <board_reel_board_init>:
	volatile NRF_GPIO_Type *gpio = NRF_P1;

	/*
	 * Workaround to enable peripheral voltage.
	 */
	gpio->PIN_CNF[PERIPH_PON_PIN] =
    6b18:	4b07      	ldr	r3, [pc, #28]	; (6b38 <board_reel_board_init+0x20>)
    6b1a:	2203      	movs	r2, #3
    6b1c:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
		(GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos) |
		(GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);

	gpio->OUTSET = BIT(PERIPH_PON_PIN);
    6b20:	2201      	movs	r2, #1
    6b22:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	 * to 2mA more than expected.
	 * The consumption increases because RX pin is floating
	 * (High-Impedance state of pin B from Dual-Supply Bus Transceiver).
	 */
	gpio = NRF_P0;
	gpio->PIN_CNF[DT_PROP(DT_INST(0, nordic_nrf_uart), rx_pin)] =
    6b26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6b2a:	220e      	movs	r2, #14
    6b2c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
		(GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos) |
		(GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos);


	return 0;
}
    6b30:	2000      	movs	r0, #0
	gpio->PIN_CNF[DT_PROP(DT_INST(0, nordic_nrf_uart), tx_pin)] =
    6b32:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
}
    6b36:	4770      	bx	lr
    6b38:	50000300 	.word	0x50000300

00006b3c <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    6b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b40:	4f5b      	ldr	r7, [pc, #364]	; (6cb0 <ecc_thread+0x174>)
	return z_impl_k_sem_take(sem, timeout);
    6b42:	f8df 8184 	ldr.w	r8, [pc, #388]	; 6cc8 <ecc_thread+0x18c>
    6b46:	463e      	mov	r6, r7
    6b48:	f04f 32ff 	mov.w	r2, #4294967295
    6b4c:	f04f 33ff 	mov.w	r3, #4294967295
    6b50:	4640      	mov	r0, r8
    6b52:	f01c ffd5 	bl	23b00 <z_impl_k_sem_take>
    6b56:	f3bf 8f5b 	dmb	ish
    6b5a:	683c      	ldr	r4, [r7, #0]
    6b5c:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    6b60:	f014 0401 	ands.w	r4, r4, #1
    6b64:	d055      	beq.n	6c12 <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    6b66:	f8df 915c 	ldr.w	r9, [pc, #348]	; 6cc4 <ecc_thread+0x188>
    6b6a:	4c52      	ldr	r4, [pc, #328]	; (6cb4 <ecc_thread+0x178>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    6b6c:	4d52      	ldr	r5, [pc, #328]	; (6cb8 <ecc_thread+0x17c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    6b6e:	4853      	ldr	r0, [pc, #332]	; (6cbc <ecc_thread+0x180>)
    6b70:	464a      	mov	r2, r9
    6b72:	4621      	mov	r1, r4
    6b74:	f01e fd79 	bl	2566a <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    6b78:	2800      	cmp	r0, #0
    6b7a:	d03e      	beq.n	6bfa <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    6b7c:	2220      	movs	r2, #32
    6b7e:	4629      	mov	r1, r5
    6b80:	4620      	mov	r0, r4
    6b82:	f01f fefe 	bl	26982 <memcmp>
    6b86:	2800      	cmp	r0, #0
    6b88:	d0f1      	beq.n	6b6e <ecc_thread+0x32>
	return 0;
    6b8a:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6b8e:	f04f 32ff 	mov.w	r2, #4294967295
    6b92:	f04f 33ff 	mov.w	r3, #4294967295
    6b96:	2001      	movs	r0, #1
    6b98:	f002 f94e 	bl	8e38 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6b9c:	f100 0508 	add.w	r5, r0, #8
    6ba0:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6ba2:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6ba4:	4628      	mov	r0, r5
    6ba6:	f025 fa78 	bl	2c09a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    6baa:	233e      	movs	r3, #62	; 0x3e
    6bac:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6bae:	2342      	movs	r3, #66	; 0x42
    6bb0:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    6bb2:	2101      	movs	r1, #1
    6bb4:	4628      	mov	r0, r5
    6bb6:	f025 fa70 	bl	2c09a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    6bba:	2308      	movs	r3, #8
    6bbc:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6bbe:	2141      	movs	r1, #65	; 0x41
    6bc0:	4628      	mov	r0, r5
    6bc2:	f025 fa6a 	bl	2c09a <net_buf_simple_add>
    6bc6:	4605      	mov	r5, r0
	evt->status = status;
    6bc8:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    6bcc:	f1b9 0f00 	cmp.w	r9, #0
    6bd0:	d016      	beq.n	6c00 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
    6bd2:	2240      	movs	r2, #64	; 0x40
    6bd4:	2100      	movs	r1, #0
    6bd6:	f01f ff0f 	bl	269f8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6bda:	f3bf 8f5b 	dmb	ish
    6bde:	e856 3f00 	ldrex	r3, [r6]
    6be2:	f023 0301 	bic.w	r3, r3, #1
    6be6:	e846 3200 	strex	r2, r3, [r6]
    6bea:	2a00      	cmp	r2, #0
    6bec:	d1f7      	bne.n	6bde <ecc_thread+0xa2>
    6bee:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    6bf2:	4620      	mov	r0, r4
	bt_recv(buf);
    6bf4:	f001 fb1e 	bl	8234 <bt_recv>
	while (true) {
    6bf8:	e7a6      	b.n	6b48 <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
    6bfa:	f04f 091f 	mov.w	r9, #31
    6bfe:	e7c6      	b.n	6b8e <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    6c00:	492e      	ldr	r1, [pc, #184]	; (6cbc <ecc_thread+0x180>)
    6c02:	f01f ff99 	bl	26b38 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    6c06:	492e      	ldr	r1, [pc, #184]	; (6cc0 <ecc_thread+0x184>)
    6c08:	f105 0021 	add.w	r0, r5, #33	; 0x21
    6c0c:	f01f ff94 	bl	26b38 <sys_memcpy_swap.constprop.0>
    6c10:	e7e3      	b.n	6bda <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6c12:	f3bf 8f5b 	dmb	ish
    6c16:	683b      	ldr	r3, [r7, #0]
    6c18:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    6c1c:	079b      	lsls	r3, r3, #30
    6c1e:	d593      	bpl.n	6b48 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    6c20:	4928      	ldr	r1, [pc, #160]	; (6cc4 <ecc_thread+0x188>)
    6c22:	4826      	ldr	r0, [pc, #152]	; (6cbc <ecc_thread+0x180>)
    6c24:	f01f fbf0 	bl	26408 <uECC_valid_public_key>
	if (ret < 0) {
    6c28:	2800      	cmp	r0, #0
    6c2a:	db07      	blt.n	6c3c <ecc_thread+0x100>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    6c2c:	4a23      	ldr	r2, [pc, #140]	; (6cbc <ecc_thread+0x180>)
    6c2e:	4b25      	ldr	r3, [pc, #148]	; (6cc4 <ecc_thread+0x188>)
    6c30:	f1a2 0120 	sub.w	r1, r2, #32
    6c34:	4610      	mov	r0, r2
    6c36:	f01e fd67 	bl	25708 <uECC_shared_secret>
    6c3a:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6c3c:	f04f 32ff 	mov.w	r2, #4294967295
    6c40:	f04f 33ff 	mov.w	r3, #4294967295
    6c44:	2001      	movs	r0, #1
    6c46:	f002 f8f7 	bl	8e38 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6c4a:	f100 0908 	add.w	r9, r0, #8
    6c4e:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6c50:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    6c52:	4648      	mov	r0, r9
    6c54:	f025 fa21 	bl	2c09a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    6c58:	233e      	movs	r3, #62	; 0x3e
    6c5a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6c5c:	2322      	movs	r3, #34	; 0x22
    6c5e:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    6c60:	2101      	movs	r1, #1
    6c62:	4648      	mov	r0, r9
    6c64:	f025 fa19 	bl	2c09a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    6c68:	2309      	movs	r3, #9
    6c6a:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6c6c:	2121      	movs	r1, #33	; 0x21
    6c6e:	4648      	mov	r0, r9
    6c70:	f025 fa13 	bl	2c09a <net_buf_simple_add>
    6c74:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    6c76:	3001      	adds	r0, #1
    6c78:	b99c      	cbnz	r4, 6ca2 <ecc_thread+0x166>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    6c7a:	221f      	movs	r2, #31
    6c7c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    6c7e:	21ff      	movs	r1, #255	; 0xff
    6c80:	2220      	movs	r2, #32
    6c82:	f01f feb9 	bl	269f8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6c86:	f3bf 8f5b 	dmb	ish
    6c8a:	e856 3f00 	ldrex	r3, [r6]
    6c8e:	f023 0302 	bic.w	r3, r3, #2
    6c92:	e846 3200 	strex	r2, r3, [r6]
    6c96:	2a00      	cmp	r2, #0
    6c98:	d1f7      	bne.n	6c8a <ecc_thread+0x14e>
    6c9a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    6c9e:	4628      	mov	r0, r5
    6ca0:	e7a8      	b.n	6bf4 <ecc_thread+0xb8>
		evt->status = 0U;
    6ca2:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    6ca4:	4905      	ldr	r1, [pc, #20]	; (6cbc <ecc_thread+0x180>)
		evt->status = 0U;
    6ca6:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    6ca8:	f01f ff46 	bl	26b38 <sys_memcpy_swap.constprop.0>
    6cac:	e7eb      	b.n	6c86 <ecc_thread+0x14a>
    6cae:	bf00      	nop
    6cb0:	200021c0 	.word	0x200021c0
    6cb4:	2000908c 	.word	0x2000908c
    6cb8:	0002dfc8 	.word	0x0002dfc8
    6cbc:	200090ac 	.word	0x200090ac
    6cc0:	200090cc 	.word	0x200090cc
    6cc4:	0002df18 	.word	0x0002df18
    6cc8:	20000d9c 	.word	0x20000d9c

00006ccc <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    6ccc:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    6cce:	7d05      	ldrb	r5, [r0, #20]
    6cd0:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    6cd2:	b9ad      	cbnz	r5, 6d00 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    6cd4:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    6cd6:	881a      	ldrh	r2, [r3, #0]
    6cd8:	f242 0125 	movw	r1, #8229	; 0x2025
    6cdc:	428a      	cmp	r2, r1
    6cde:	d017      	beq.n	6d10 <bt_hci_ecc_send+0x44>
    6ce0:	f242 0126 	movw	r1, #8230	; 0x2026
    6ce4:	428a      	cmp	r2, r1
    6ce6:	d03c      	beq.n	6d62 <bt_hci_ecc_send+0x96>
    6ce8:	f242 0101 	movw	r1, #8193	; 0x2001
    6cec:	428a      	cmp	r2, r1
    6cee:	d107      	bne.n	6d00 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    6cf0:	78da      	ldrb	r2, [r3, #3]
    6cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6cf6:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    6cf8:	791a      	ldrb	r2, [r3, #4]
    6cfa:	f022 0201 	bic.w	r2, r2, #1
    6cfe:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    6d00:	4b31      	ldr	r3, [pc, #196]	; (6dc8 <bt_hci_ecc_send+0xfc>)
    6d02:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    6d06:	4620      	mov	r0, r4
    6d08:	691b      	ldr	r3, [r3, #16]
}
    6d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    6d0e:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    6d10:	2103      	movs	r1, #3
    6d12:	3008      	adds	r0, #8
    6d14:	f025 fa35 	bl	2c182 <net_buf_simple_pull>
	net_buf_unref(buf);
    6d18:	4620      	mov	r0, r4
    6d1a:	f019 f837 	bl	1fd8c <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6d1e:	f3bf 8f5b 	dmb	ish
    6d22:	4b2a      	ldr	r3, [pc, #168]	; (6dcc <bt_hci_ecc_send+0x100>)
    6d24:	681a      	ldr	r2, [r3, #0]
    6d26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    6d2a:	0790      	lsls	r0, r2, #30
    6d2c:	d507      	bpl.n	6d3e <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6d2e:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    6d30:	4629      	mov	r1, r5
    6d32:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    6d36:	f01f fedb 	bl	26af0 <send_cmd_status>
}
    6d3a:	2000      	movs	r0, #0
    6d3c:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6d3e:	f3bf 8f5b 	dmb	ish
    6d42:	e853 2f00 	ldrex	r2, [r3]
    6d46:	f042 0101 	orr.w	r1, r2, #1
    6d4a:	e843 1000 	strex	r0, r1, [r3]
    6d4e:	2800      	cmp	r0, #0
    6d50:	d1f7      	bne.n	6d42 <bt_hci_ecc_send+0x76>
    6d52:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    6d56:	07d1      	lsls	r1, r2, #31
    6d58:	d4e9      	bmi.n	6d2e <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    6d5a:	481d      	ldr	r0, [pc, #116]	; (6dd0 <bt_hci_ecc_send+0x104>)
    6d5c:	f01c feaa 	bl	23ab4 <z_impl_k_sem_give>
}
    6d60:	e7e6      	b.n	6d30 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    6d62:	2103      	movs	r1, #3
    6d64:	3008      	adds	r0, #8
    6d66:	f025 fa0c 	bl	2c182 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6d6a:	f3bf 8f5b 	dmb	ish
    6d6e:	4b17      	ldr	r3, [pc, #92]	; (6dcc <bt_hci_ecc_send+0x100>)
    6d70:	681a      	ldr	r2, [r3, #0]
    6d72:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    6d76:	07d2      	lsls	r2, r2, #31
    6d78:	d507      	bpl.n	6d8a <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    6d7a:	250c      	movs	r5, #12
	net_buf_unref(buf);
    6d7c:	4620      	mov	r0, r4
    6d7e:	f019 f805 	bl	1fd8c <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    6d82:	4629      	mov	r1, r5
    6d84:	f242 0026 	movw	r0, #8230	; 0x2026
    6d88:	e7d5      	b.n	6d36 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    6d8a:	89a2      	ldrh	r2, [r4, #12]
    6d8c:	2a3f      	cmp	r2, #63	; 0x3f
    6d8e:	d919      	bls.n	6dc4 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6d90:	f3bf 8f5b 	dmb	ish
    6d94:	e853 2f00 	ldrex	r2, [r3]
    6d98:	f042 0102 	orr.w	r1, r2, #2
    6d9c:	e843 1000 	strex	r0, r1, [r3]
    6da0:	2800      	cmp	r0, #0
    6da2:	d1f7      	bne.n	6d94 <bt_hci_ecc_send+0xc8>
    6da4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    6da8:	0793      	lsls	r3, r2, #30
    6daa:	d4e6      	bmi.n	6d7a <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    6dac:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    6dae:	4809      	ldr	r0, [pc, #36]	; (6dd4 <bt_hci_ecc_send+0x108>)
    6db0:	f01f fec2 	bl	26b38 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    6db4:	4808      	ldr	r0, [pc, #32]	; (6dd8 <bt_hci_ecc_send+0x10c>)
    6db6:	3120      	adds	r1, #32
    6db8:	f01f febe 	bl	26b38 <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    6dbc:	4804      	ldr	r0, [pc, #16]	; (6dd0 <bt_hci_ecc_send+0x104>)
    6dbe:	f01c fe79 	bl	23ab4 <z_impl_k_sem_give>
}
    6dc2:	e7db      	b.n	6d7c <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    6dc4:	2512      	movs	r5, #18
    6dc6:	e7d9      	b.n	6d7c <bt_hci_ecc_send+0xb0>
    6dc8:	20000068 	.word	0x20000068
    6dcc:	200021c0 	.word	0x200021c0
    6dd0:	20000d9c 	.word	0x20000d9c
    6dd4:	200090ac 	.word	0x200090ac
    6dd8:	200090cc 	.word	0x200090cc

00006ddc <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    6ddc:	b510      	push	{r4, lr}
    6dde:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6de0:	4c0c      	ldr	r4, [pc, #48]	; (6e14 <bt_hci_ecc_init+0x38>)
    6de2:	490d      	ldr	r1, [pc, #52]	; (6e18 <bt_hci_ecc_init+0x3c>)
    6de4:	2200      	movs	r2, #0
    6de6:	2300      	movs	r3, #0
    6de8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6dec:	2300      	movs	r3, #0
    6dee:	220a      	movs	r2, #10
    6df0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    6df4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    6df8:	9300      	str	r3, [sp, #0]
    6dfa:	f44f 628a 	mov.w	r2, #1104	; 0x450
    6dfe:	4b07      	ldr	r3, [pc, #28]	; (6e1c <bt_hci_ecc_init+0x40>)
    6e00:	4620      	mov	r0, r4
    6e02:	f01c feef 	bl	23be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    6e06:	4906      	ldr	r1, [pc, #24]	; (6e20 <bt_hci_ecc_init+0x44>)
    6e08:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    6e0a:	b008      	add	sp, #32
    6e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e10:	f026 bb62 	b.w	2d4d8 <z_impl_k_thread_name_set>
    6e14:	20001030 	.word	0x20001030
    6e18:	200093b0 	.word	0x200093b0
    6e1c:	00006b3d 	.word	0x00006b3d
    6e20:	00033208 	.word	0x00033208

00006e24 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    6e24:	b510      	push	{r4, lr}
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    6e26:	4c08      	ldr	r4, [pc, #32]	; (6e48 <save_id+0x24>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    6e28:	4808      	ldr	r0, [pc, #32]	; (6e4c <save_id+0x28>)
    6e2a:	79e2      	ldrb	r2, [r4, #7]
    6e2c:	4621      	mov	r1, r4
    6e2e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    6e32:	f7fe fa75 	bl	5320 <settings_save_one>
	if (err) {
		BT_ERR("Failed to save ID (err %d)", err);
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    6e36:	79e2      	ldrb	r2, [r4, #7]
    6e38:	4805      	ldr	r0, [pc, #20]	; (6e50 <save_id+0x2c>)
    6e3a:	f504 7194 	add.w	r1, r4, #296	; 0x128
    6e3e:	0112      	lsls	r2, r2, #4
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    6e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    6e44:	f7fe ba6c 	b.w	5320 <settings_save_one>
    6e48:	20000068 	.word	0x20000068
    6e4c:	0003320f 	.word	0x0003320f
    6e50:	00033215 	.word	0x00033215

00006e54 <set>:
{
    6e54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6e58:	4605      	mov	r5, r0
    6e5a:	4616      	mov	r6, r2
    6e5c:	461f      	mov	r7, r3
	if (!name) {
    6e5e:	b928      	cbnz	r0, 6e6c <set+0x18>
		return -ENOENT;
    6e60:	f06f 0401 	mvn.w	r4, #1
}
    6e64:	4620      	mov	r0, r4
    6e66:	b002      	add	sp, #8
    6e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = settings_name_next(name, &next);
    6e6c:	a901      	add	r1, sp, #4
    6e6e:	f01e f8bd 	bl	24fec <settings_name_next>
	if (!strncmp(name, "id", len)) {
    6e72:	4925      	ldr	r1, [pc, #148]	; (6f08 <set+0xb4>)
    6e74:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    6e76:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    6e78:	4628      	mov	r0, r5
    6e7a:	f01f fd6a 	bl	26952 <strncmp>
    6e7e:	4604      	mov	r4, r0
    6e80:	b9e0      	cbnz	r0, 6ebc <set+0x68>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e82:	f3bf 8f5b 	dmb	ish
    6e86:	4d21      	ldr	r5, [pc, #132]	; (6f0c <set+0xb8>)
    6e88:	682b      	ldr	r3, [r5, #0]
    6e8a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    6e8e:	075b      	lsls	r3, r3, #29
    6e90:	d501      	bpl.n	6e96 <set+0x42>
			return 0;
    6e92:	2400      	movs	r4, #0
    6e94:	e7e6      	b.n	6e64 <set+0x10>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    6e96:	3d98      	subs	r5, #152	; 0x98
    6e98:	2207      	movs	r2, #7
    6e9a:	4629      	mov	r1, r5
    6e9c:	4638      	mov	r0, r7
    6e9e:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    6ea0:	2806      	cmp	r0, #6
    6ea2:	d806      	bhi.n	6eb2 <set+0x5e>
			(void)memset(bt_dev.id_addr, 0,
    6ea4:	2207      	movs	r2, #7
    6ea6:	4621      	mov	r1, r4
    6ea8:	4628      	mov	r0, r5
    6eaa:	f01f fda5 	bl	269f8 <memset>
			bt_dev.id_count = 0U;
    6eae:	71ec      	strb	r4, [r5, #7]
    6eb0:	e7d8      	b.n	6e64 <set+0x10>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    6eb2:	2307      	movs	r3, #7
    6eb4:	fbb0 f0f3 	udiv	r0, r0, r3
    6eb8:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    6eba:	e7d3      	b.n	6e64 <set+0x10>
	if (!strncmp(name, "name", len)) {
    6ebc:	4914      	ldr	r1, [pc, #80]	; (6f10 <set+0xbc>)
    6ebe:	4642      	mov	r2, r8
    6ec0:	4628      	mov	r0, r5
    6ec2:	f01f fd46 	bl	26952 <strncmp>
    6ec6:	4604      	mov	r4, r0
    6ec8:	b950      	cbnz	r0, 6ee0 <set+0x8c>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    6eca:	4912      	ldr	r1, [pc, #72]	; (6f14 <set+0xc0>)
    6ecc:	2220      	movs	r2, #32
    6ece:	4638      	mov	r0, r7
    6ed0:	47b0      	blx	r6
		if (len < 0) {
    6ed2:	2800      	cmp	r0, #0
    6ed4:	dbdd      	blt.n	6e92 <set+0x3e>
			bt_dev.name[len] = '\0';
    6ed6:	4b10      	ldr	r3, [pc, #64]	; (6f18 <set+0xc4>)
    6ed8:	4418      	add	r0, r3
    6eda:	f880 4168 	strb.w	r4, [r0, #360]	; 0x168
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    6ede:	e7c1      	b.n	6e64 <set+0x10>
	if (!strncmp(name, "irk", len)) {
    6ee0:	490e      	ldr	r1, [pc, #56]	; (6f1c <set+0xc8>)
    6ee2:	4642      	mov	r2, r8
    6ee4:	4628      	mov	r0, r5
    6ee6:	f01f fd34 	bl	26952 <strncmp>
    6eea:	4604      	mov	r4, r0
    6eec:	2800      	cmp	r0, #0
    6eee:	d1b7      	bne.n	6e60 <set+0xc>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    6ef0:	490b      	ldr	r1, [pc, #44]	; (6f20 <set+0xcc>)
    6ef2:	2210      	movs	r2, #16
    6ef4:	4638      	mov	r0, r7
    6ef6:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    6ef8:	280f      	cmp	r0, #15
    6efa:	d8ca      	bhi.n	6e92 <set+0x3e>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    6efc:	2210      	movs	r2, #16
    6efe:	4621      	mov	r1, r4
    6f00:	4807      	ldr	r0, [pc, #28]	; (6f20 <set+0xcc>)
    6f02:	f01f fd79 	bl	269f8 <memset>
    6f06:	e7ad      	b.n	6e64 <set+0x10>
    6f08:	00033212 	.word	0x00033212
    6f0c:	20000100 	.word	0x20000100
    6f10:	0003338b 	.word	0x0003338b
    6f14:	200001d0 	.word	0x200001d0
    6f18:	20000068 	.word	0x20000068
    6f1c:	00033218 	.word	0x00033218
    6f20:	20000190 	.word	0x20000190

00006f24 <bt_settings_encode_key>:
{
    6f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f28:	b088      	sub	sp, #32
    6f2a:	799c      	ldrb	r4, [r3, #6]
    6f2c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    6f30:	795d      	ldrb	r5, [r3, #5]
    6f32:	791e      	ldrb	r6, [r3, #4]
    6f34:	78df      	ldrb	r7, [r3, #3]
    6f36:	f893 c002 	ldrb.w	ip, [r3, #2]
    6f3a:	f893 e001 	ldrb.w	lr, [r3, #1]
    6f3e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    6f40:	f1b8 0f00 	cmp.w	r8, #0
    6f44:	d00e      	beq.n	6f64 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    6f46:	e9cd 3806 	strd	r3, r8, [sp, #24]
    6f4a:	e9cd ce04 	strd	ip, lr, [sp, #16]
    6f4e:	4613      	mov	r3, r2
    6f50:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6f54:	e9cd 4500 	strd	r4, r5, [sp]
    6f58:	4a08      	ldr	r2, [pc, #32]	; (6f7c <bt_settings_encode_key+0x58>)
    6f5a:	f01d fab8 	bl	244ce <snprintk>
}
    6f5e:	b008      	add	sp, #32
    6f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    6f64:	e9cd e305 	strd	lr, r3, [sp, #20]
    6f68:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    6f6c:	4613      	mov	r3, r2
    6f6e:	e9cd 5601 	strd	r5, r6, [sp, #4]
    6f72:	4a03      	ldr	r2, [pc, #12]	; (6f80 <bt_settings_encode_key+0x5c>)
    6f74:	9400      	str	r4, [sp, #0]
    6f76:	f01d faaa 	bl	244ce <snprintk>
}
    6f7a:	e7f0      	b.n	6f5e <bt_settings_encode_key+0x3a>
    6f7c:	0003321c 	.word	0x0003321c
    6f80:	00033240 	.word	0x00033240

00006f84 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6f84:	4909      	ldr	r1, [pc, #36]	; (6fac <bt_settings_save_id+0x28>)
    6f86:	f3bf 8f5b 	dmb	ish
    6f8a:	e851 3f00 	ldrex	r3, [r1]
    6f8e:	f043 0201 	orr.w	r2, r3, #1
    6f92:	e841 2000 	strex	r0, r2, [r1]
    6f96:	2800      	cmp	r0, #0
    6f98:	d1f7      	bne.n	6f8a <bt_settings_save_id+0x6>
    6f9a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6f9e:	07db      	lsls	r3, r3, #31
    6fa0:	d403      	bmi.n	6faa <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    6fa2:	4803      	ldr	r0, [pc, #12]	; (6fb0 <bt_settings_save_id+0x2c>)
    6fa4:	3908      	subs	r1, #8
    6fa6:	f026 b958 	b.w	2d25a <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    6faa:	4770      	bx	lr
    6fac:	20000384 	.word	0x20000384
    6fb0:	20001fd8 	.word	0x20001fd8

00006fb4 <commit>:

static int commit(void)
{
    6fb4:	b510      	push	{r4, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    6fb6:	4c18      	ldr	r4, [pc, #96]	; (7018 <commit+0x64>)
    6fb8:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
    6fbc:	b913      	cbnz	r3, 6fc4 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    6fbe:	4817      	ldr	r0, [pc, #92]	; (701c <commit+0x68>)
    6fc0:	f001 fa58 	bl	8474 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    6fc4:	79e3      	ldrb	r3, [r4, #7]
    6fc6:	b1e3      	cbz	r3, 7002 <commit+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6fc8:	f3bf 8f5b 	dmb	ish
    6fcc:	4c14      	ldr	r4, [pc, #80]	; (7020 <commit+0x6c>)
    6fce:	6823      	ldr	r3, [r4, #0]
    6fd0:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6fd4:	079b      	lsls	r3, r3, #30
    6fd6:	d401      	bmi.n	6fdc <commit+0x28>
		bt_finalize_init();
    6fd8:	f001 f9d8 	bl	838c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6fdc:	f3bf 8f5b 	dmb	ish
    6fe0:	e854 0f00 	ldrex	r0, [r4]
    6fe4:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    6fe8:	e844 3200 	strex	r2, r3, [r4]
    6fec:	2a00      	cmp	r2, #0
    6fee:	d1f7      	bne.n	6fe0 <commit+0x2c>
    6ff0:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    6ff4:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
    6ff8:	d00c      	beq.n	7014 <commit+0x60>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
    6ffa:	f7ff ffc3 	bl	6f84 <bt_settings_save_id>
	}

	return 0;
    6ffe:	2000      	movs	r0, #0
    7000:	e008      	b.n	7014 <commit+0x60>
		bt_setup_public_id_addr();
    7002:	f001 faad 	bl	8560 <bt_setup_public_id_addr>
	if (!bt_dev.id_count) {
    7006:	79e3      	ldrb	r3, [r4, #7]
    7008:	2b00      	cmp	r3, #0
    700a:	d1dd      	bne.n	6fc8 <commit+0x14>
		err = bt_setup_random_id_addr();
    700c:	f001 fb42 	bl	8694 <bt_setup_random_id_addr>
		if (err) {
    7010:	2800      	cmp	r0, #0
    7012:	d0d9      	beq.n	6fc8 <commit+0x14>
}
    7014:	bd10      	pop	{r4, pc}
    7016:	bf00      	nop
    7018:	20000068 	.word	0x20000068
    701c:	00033261 	.word	0x00033261
    7020:	20000100 	.word	0x20000100

00007024 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    7024:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    7026:	7802      	ldrb	r2, [r0, #0]
    7028:	2a01      	cmp	r2, #1
{
    702a:	4604      	mov	r4, r0
    702c:	460b      	mov	r3, r1
	switch (src->type) {
    702e:	d016      	beq.n	705e <uuid_to_uuid128+0x3a>
    7030:	2a02      	cmp	r2, #2
    7032:	d02c      	beq.n	708e <uuid_to_uuid128+0x6a>
    7034:	b98a      	cbnz	r2, 705a <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    7036:	4a19      	ldr	r2, [pc, #100]	; (709c <uuid_to_uuid128+0x78>)
    7038:	460d      	mov	r5, r1
    703a:	f102 0710 	add.w	r7, r2, #16
    703e:	6810      	ldr	r0, [r2, #0]
    7040:	6851      	ldr	r1, [r2, #4]
    7042:	462e      	mov	r6, r5
    7044:	c603      	stmia	r6!, {r0, r1}
    7046:	3208      	adds	r2, #8
    7048:	42ba      	cmp	r2, r7
    704a:	4635      	mov	r5, r6
    704c:	d1f7      	bne.n	703e <uuid_to_uuid128+0x1a>
    704e:	7812      	ldrb	r2, [r2, #0]
    7050:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    7052:	8862      	ldrh	r2, [r4, #2]
    7054:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    7056:	0a12      	lsrs	r2, r2, #8
    7058:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    705a:	bcf0      	pop	{r4, r5, r6, r7}
    705c:	4770      	bx	lr
		*dst = uuid128_base;
    705e:	4a0f      	ldr	r2, [pc, #60]	; (709c <uuid_to_uuid128+0x78>)
    7060:	460d      	mov	r5, r1
    7062:	f102 0710 	add.w	r7, r2, #16
    7066:	6810      	ldr	r0, [r2, #0]
    7068:	6851      	ldr	r1, [r2, #4]
    706a:	462e      	mov	r6, r5
    706c:	c603      	stmia	r6!, {r0, r1}
    706e:	3208      	adds	r2, #8
    7070:	42ba      	cmp	r2, r7
    7072:	4635      	mov	r5, r6
    7074:	d1f7      	bne.n	7066 <uuid_to_uuid128+0x42>
    7076:	7812      	ldrb	r2, [r2, #0]
    7078:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    707a:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    707c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    707e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    7082:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    7084:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    7086:	0a12      	lsrs	r2, r2, #8
    7088:	7399      	strb	r1, [r3, #14]
    708a:	741a      	strb	r2, [r3, #16]
}
    708c:	e7e5      	b.n	705a <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    708e:	4601      	mov	r1, r0
}
    7090:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    7092:	2211      	movs	r2, #17
    7094:	4618      	mov	r0, r3
    7096:	f01f bc84 	b.w	269a2 <memcpy>
    709a:	bf00      	nop
    709c:	00033270 	.word	0x00033270

000070a0 <le_dhkey_complete>:
{
    70a0:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    70a2:	4c06      	ldr	r4, [pc, #24]	; (70bc <le_dhkey_complete+0x1c>)
    70a4:	6822      	ldr	r2, [r4, #0]
    70a6:	b132      	cbz	r2, 70b6 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    70a8:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    70aa:	7803      	ldrb	r3, [r0, #0]
    70ac:	b923      	cbnz	r3, 70b8 <le_dhkey_complete+0x18>
    70ae:	3001      	adds	r0, #1
    70b0:	4790      	blx	r2
		dh_key_cb = NULL;
    70b2:	2300      	movs	r3, #0
    70b4:	6023      	str	r3, [r4, #0]
}
    70b6:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    70b8:	2000      	movs	r0, #0
    70ba:	e7f9      	b.n	70b0 <le_dhkey_complete+0x10>
    70bc:	200021dc 	.word	0x200021dc

000070c0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    70c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    70c2:	4f0a      	ldr	r7, [pc, #40]	; (70ec <id_find+0x2c>)
{
    70c4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    70c6:	2500      	movs	r5, #0
    70c8:	79fb      	ldrb	r3, [r7, #7]
    70ca:	b2ec      	uxtb	r4, r5
    70cc:	42a3      	cmp	r3, r4
    70ce:	d802      	bhi.n	70d6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    70d0:	f06f 0401 	mvn.w	r4, #1
    70d4:	e008      	b.n	70e8 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    70d6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    70da:	4439      	add	r1, r7
    70dc:	4630      	mov	r0, r6
    70de:	f01f ffb3 	bl	27048 <bt_addr_le_cmp>
    70e2:	3501      	adds	r5, #1
    70e4:	2800      	cmp	r0, #0
    70e6:	d1ef      	bne.n	70c8 <id_find+0x8>
}
    70e8:	4620      	mov	r0, r4
    70ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    70ec:	20000068 	.word	0x20000068

000070f0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    70f0:	6843      	ldr	r3, [r0, #4]
{
    70f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    70f4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    70f6:	0558      	lsls	r0, r3, #21
    70f8:	d502      	bpl.n	7100 <valid_adv_param+0x10>
		return false;
    70fa:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    70fc:	b003      	add	sp, #12
    70fe:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7100:	6922      	ldr	r2, [r4, #16]
    7102:	b10a      	cbz	r2, 7108 <valid_adv_param+0x18>
    7104:	07d9      	lsls	r1, r3, #31
    7106:	d5f8      	bpl.n	70fa <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    7108:	4d17      	ldr	r5, [pc, #92]	; (7168 <valid_adv_param+0x78>)
    710a:	7820      	ldrb	r0, [r4, #0]
    710c:	79eb      	ldrb	r3, [r5, #7]
    710e:	4283      	cmp	r3, r0
    7110:	d9f3      	bls.n	70fa <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    7112:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    7116:	2300      	movs	r3, #0
    7118:	4669      	mov	r1, sp
    711a:	4428      	add	r0, r5
    711c:	9300      	str	r3, [sp, #0]
    711e:	f8cd 3003 	str.w	r3, [sp, #3]
    7122:	f01f ff91 	bl	27048 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    7126:	2800      	cmp	r0, #0
    7128:	d0e7      	beq.n	70fa <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    712a:	6860      	ldr	r0, [r4, #4]
    712c:	07c2      	lsls	r2, r0, #31
    712e:	d406      	bmi.n	713e <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    7130:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
    7134:	2b08      	cmp	r3, #8
    7136:	d802      	bhi.n	713e <valid_adv_param+0x4e>
    7138:	68a3      	ldr	r3, [r4, #8]
    713a:	2b9f      	cmp	r3, #159	; 0x9f
    713c:	d9dd      	bls.n	70fa <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    713e:	06c3      	lsls	r3, r0, #27
    7140:	d401      	bmi.n	7146 <valid_adv_param+0x56>
    7142:	6923      	ldr	r3, [r4, #16]
    7144:	b943      	cbnz	r3, 7158 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
    7146:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    714a:	429a      	cmp	r2, r3
    714c:	d8d5      	bhi.n	70fa <valid_adv_param+0xa>
    714e:	2a1f      	cmp	r2, #31
    7150:	d9d3      	bls.n	70fa <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    7152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    7156:	d8d0      	bhi.n	70fa <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    7158:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    715c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    7160:	bf18      	it	ne
    7162:	2001      	movne	r0, #1
    7164:	e7ca      	b.n	70fc <valid_adv_param+0xc>
    7166:	bf00      	nop
    7168:	20000068 	.word	0x20000068

0000716c <le_pkey_complete>:
{
    716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    716e:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7170:	480f      	ldr	r0, [pc, #60]	; (71b0 <le_pkey_complete+0x44>)
    7172:	f06f 0110 	mvn.w	r1, #16
    7176:	f01f ff4b 	bl	27010 <atomic_and>
	if (!evt->status) {
    717a:	7833      	ldrb	r3, [r6, #0]
    717c:	b943      	cbnz	r3, 7190 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    717e:	1c71      	adds	r1, r6, #1
    7180:	480c      	ldr	r0, [pc, #48]	; (71b4 <le_pkey_complete+0x48>)
    7182:	2240      	movs	r2, #64	; 0x40
    7184:	f01f fc0d 	bl	269a2 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7188:	4809      	ldr	r0, [pc, #36]	; (71b0 <le_pkey_complete+0x44>)
    718a:	2108      	movs	r1, #8
    718c:	f01f ffa9 	bl	270e2 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7190:	4d09      	ldr	r5, [pc, #36]	; (71b8 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    7192:	4f08      	ldr	r7, [pc, #32]	; (71b4 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    7194:	682c      	ldr	r4, [r5, #0]
    7196:	b90c      	cbnz	r4, 719c <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    7198:	602c      	str	r4, [r5, #0]
}
    719a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    719c:	7832      	ldrb	r2, [r6, #0]
    719e:	6823      	ldr	r3, [r4, #0]
    71a0:	2a00      	cmp	r2, #0
    71a2:	bf0c      	ite	eq
    71a4:	4638      	moveq	r0, r7
    71a6:	2000      	movne	r0, #0
    71a8:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    71aa:	6864      	ldr	r4, [r4, #4]
    71ac:	e7f3      	b.n	7196 <le_pkey_complete+0x2a>
    71ae:	bf00      	nop
    71b0:	20000100 	.word	0x20000100
    71b4:	200090ec 	.word	0x200090ec
    71b8:	200021e0 	.word	0x200021e0

000071bc <hci_le_meta_event>:
{
    71bc:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    71be:	2101      	movs	r1, #1
{
    71c0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    71c2:	3008      	adds	r0, #8
    71c4:	f024 ffe5 	bl	2c192 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    71c8:	4621      	mov	r1, r4
    71ca:	4a03      	ldr	r2, [pc, #12]	; (71d8 <hci_le_meta_event+0x1c>)
    71cc:	7800      	ldrb	r0, [r0, #0]
}
    71ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    71d2:	230b      	movs	r3, #11
    71d4:	f01f bef8 	b.w	26fc8 <handle_event>
    71d8:	0002dfe8 	.word	0x0002dfe8

000071dc <hci_encrypt_key_refresh_complete>:
{
    71dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    71de:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    71e0:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    71e4:	f002 f904 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
    71e8:	4604      	mov	r4, r0
    71ea:	b1c8      	cbz	r0, 7220 <hci_encrypt_key_refresh_complete+0x44>
	if (evt->status) {
    71ec:	7829      	ldrb	r1, [r5, #0]
    71ee:	b161      	cbz	r1, 720a <hci_encrypt_key_refresh_complete+0x2e>
	switch (hci_err) {
    71f0:	2929      	cmp	r1, #41	; 0x29
    71f2:	bf9a      	itte	ls
    71f4:	4b0b      	ldrls	r3, [pc, #44]	; (7224 <hci_encrypt_key_refresh_complete+0x48>)
    71f6:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
    71f8:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    71fa:	4620      	mov	r0, r4
    71fc:	f002 f814 	bl	9228 <bt_conn_security_changed>
	bt_conn_unref(conn);
    7200:	4620      	mov	r0, r4
}
    7202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7206:	f020 bbbd 	b.w	27984 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    720a:	7883      	ldrb	r3, [r0, #2]
    720c:	2b01      	cmp	r3, #1
    720e:	d104      	bne.n	721a <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
    7210:	f022 fa77 	bl	29702 <bt_smp_update_keys>
		update_sec_level(conn);
    7214:	4620      	mov	r0, r4
    7216:	f020 f800 	bl	2721a <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    721a:	7829      	ldrb	r1, [r5, #0]
    721c:	2200      	movs	r2, #0
    721e:	e7ec      	b.n	71fa <hci_encrypt_key_refresh_complete+0x1e>
}
    7220:	bd38      	pop	{r3, r4, r5, pc}
    7222:	bf00      	nop
    7224:	00033395 	.word	0x00033395

00007228 <hci_encrypt_change>:
{
    7228:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    722a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    722c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    7230:	f002 f8de 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
    7234:	4604      	mov	r4, r0
    7236:	b1e0      	cbz	r0, 7272 <hci_encrypt_change+0x4a>
	if (evt->status) {
    7238:	7829      	ldrb	r1, [r5, #0]
    723a:	b161      	cbz	r1, 7256 <hci_encrypt_change+0x2e>
	switch (hci_err) {
    723c:	2929      	cmp	r1, #41	; 0x29
    723e:	bf9a      	itte	ls
    7240:	4b0c      	ldrls	r3, [pc, #48]	; (7274 <hci_encrypt_change+0x4c>)
    7242:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
    7244:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    7246:	4620      	mov	r0, r4
    7248:	f001 ffee 	bl	9228 <bt_conn_security_changed>
	bt_conn_unref(conn);
    724c:	4620      	mov	r0, r4
}
    724e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7252:	f020 bb97 	b.w	27984 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    7256:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    7258:	78eb      	ldrb	r3, [r5, #3]
    725a:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    725c:	2a01      	cmp	r2, #1
    725e:	d105      	bne.n	726c <hci_encrypt_change+0x44>
		if (conn->encrypt) {
    7260:	b10b      	cbz	r3, 7266 <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
    7262:	f022 fa4e 	bl	29702 <bt_smp_update_keys>
		update_sec_level(conn);
    7266:	4620      	mov	r0, r4
    7268:	f01f ffd7 	bl	2721a <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    726c:	7829      	ldrb	r1, [r5, #0]
    726e:	2200      	movs	r2, #0
    7270:	e7e9      	b.n	7246 <hci_encrypt_change+0x1e>
}
    7272:	bd38      	pop	{r3, r4, r5, pc}
    7274:	00033395 	.word	0x00033395

00007278 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7278:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    727a:	4c0c      	ldr	r4, [pc, #48]	; (72ac <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    727c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    727e:	2205      	movs	r2, #5
    7280:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    7284:	f002 f8d8 	bl	9438 <bt_conn_lookup_state_le>
		if (!conn) {
    7288:	b970      	cbnz	r0, 72a8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    728a:	4b09      	ldr	r3, [pc, #36]	; (72b0 <find_pending_connect.part.0+0x38>)
    728c:	6818      	ldr	r0, [r3, #0]
    728e:	889a      	ldrh	r2, [r3, #4]
    7290:	9000      	str	r0, [sp, #0]
    7292:	799b      	ldrb	r3, [r3, #6]
    7294:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7298:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
    729c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    72a0:	2204      	movs	r2, #4
    72a2:	4669      	mov	r1, sp
    72a4:	f002 f8c8 	bl	9438 <bt_conn_lookup_state_le>
}
    72a8:	b002      	add	sp, #8
    72aa:	bd10      	pop	{r4, pc}
    72ac:	20000068 	.word	0x20000068
    72b0:	0002dcec 	.word	0x0002dcec

000072b4 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    72b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    72b6:	4a28      	ldr	r2, [pc, #160]	; (7358 <le_adv_start_add_conn+0xa4>)
	struct adv_id_check_data check_data = {
		.id = adv->id,
    72b8:	7806      	ldrb	r6, [r0, #0]
{
    72ba:	b085      	sub	sp, #20
    72bc:	4605      	mov	r5, r0
    72be:	460f      	mov	r7, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    72c0:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    72c4:	2106      	movs	r1, #6
    72c6:	f01f feb8 	bl	2703a <atomic_test_bit>
    72ca:	4614      	mov	r4, r2
    72cc:	b140      	cbz	r0, 72e0 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    72ce:	2108      	movs	r1, #8
    72d0:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    72d4:	f01f feb1 	bl	2703a <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    72d8:	b110      	cbz	r0, 72e0 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    72da:	7e13      	ldrb	r3, [r2, #24]
    72dc:	42b3      	cmp	r3, r6
    72de:	d131      	bne.n	7344 <le_adv_start_add_conn+0x90>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    72e0:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    72e2:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    72e4:	f816 3b0b 	ldrb.w	r3, [r6], #11
    72e8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    72ec:	4630      	mov	r0, r6
    72ee:	2300      	movs	r3, #0
    72f0:	9300      	str	r3, [sp, #0]
    72f2:	f8cd 3003 	str.w	r3, [sp, #3]
    72f6:	f01f fea7 	bl	27048 <bt_addr_le_cmp>
    72fa:	4604      	mov	r4, r0
    72fc:	7828      	ldrb	r0, [r5, #0]
    72fe:	b164      	cbz	r4, 731a <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    7300:	4631      	mov	r1, r6
    7302:	f020 fb54 	bl	279ae <bt_conn_exists_le>
    7306:	4604      	mov	r4, r0
    7308:	b9f8      	cbnz	r0, 734a <le_adv_start_add_conn+0x96>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    730a:	7828      	ldrb	r0, [r5, #0]
    730c:	4631      	mov	r1, r6
    730e:	f002 f845 	bl	939c <bt_conn_add_le>
	if (!conn) {
    7312:	4605      	mov	r5, r0
    7314:	b1e0      	cbz	r0, 7350 <le_adv_start_add_conn+0x9c>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7316:	2105      	movs	r1, #5
    7318:	e00e      	b.n	7338 <le_adv_start_add_conn+0x84>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    731a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    731e:	9302      	str	r3, [sp, #8]
    7320:	a902      	add	r1, sp, #8
    7322:	f64f 73ff 	movw	r3, #65535	; 0xffff
    7326:	f8ad 300c 	strh.w	r3, [sp, #12]
    732a:	f88d 300e 	strb.w	r3, [sp, #14]
    732e:	f002 f835 	bl	939c <bt_conn_add_le>
		if (!conn) {
    7332:	4605      	mov	r5, r0
    7334:	b160      	cbz	r0, 7350 <le_adv_start_add_conn+0x9c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    7336:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    7338:	f002 f8a4 	bl	9484 <bt_conn_set_state>
	*out_conn = conn;
    733c:	603d      	str	r5, [r7, #0]
	return 0;
}
    733e:	4620      	mov	r0, r4
    7340:	b005      	add	sp, #20
    7342:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    7344:	f06f 0422 	mvn.w	r4, #34	; 0x22
    7348:	e7f9      	b.n	733e <le_adv_start_add_conn+0x8a>
		return -EINVAL;
    734a:	f06f 0415 	mvn.w	r4, #21
    734e:	e7f6      	b.n	733e <le_adv_start_add_conn+0x8a>
		return -ENOMEM;
    7350:	f06f 040b 	mvn.w	r4, #11
    7354:	e7f3      	b.n	733e <le_adv_start_add_conn+0x8a>
    7356:	bf00      	nop
    7358:	20000068 	.word	0x20000068

0000735c <le_rpa_invalidate>:
{
    735c:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    735e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    7362:	480a      	ldr	r0, [pc, #40]	; (738c <le_rpa_invalidate+0x30>)
    7364:	f01f fe54 	bl	27010 <atomic_and>
    7368:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    736c:	4807      	ldr	r0, [pc, #28]	; (738c <le_rpa_invalidate+0x30>)
    736e:	f01f fe4f 	bl	27010 <atomic_and>
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
    7372:	4807      	ldr	r0, [pc, #28]	; (7390 <le_rpa_invalidate+0x34>)
    7374:	2105      	movs	r1, #5
    7376:	f01f fe60 	bl	2703a <atomic_test_bit>
    737a:	b930      	cbnz	r0, 738a <le_rpa_invalidate+0x2e>
}
    737c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7380:	4803      	ldr	r0, [pc, #12]	; (7390 <le_rpa_invalidate+0x34>)
    7382:	f06f 0110 	mvn.w	r1, #16
    7386:	f01f be43 	b.w	27010 <atomic_and>
    738a:	bd08      	pop	{r3, pc}
    738c:	20000100 	.word	0x20000100
    7390:	20000094 	.word	0x20000094

00007394 <hci_num_completed_packets>:
{
    7394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    7398:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    739a:	6887      	ldr	r7, [r0, #8]
    739c:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 7488 <hci_num_completed_packets+0xf4>
			tx->pending_no_cb = 0U;
    73a0:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    73a2:	783b      	ldrb	r3, [r7, #0]
    73a4:	429d      	cmp	r5, r3
    73a6:	db01      	blt.n	73ac <hci_num_completed_packets+0x18>
}
    73a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    73ac:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    73b0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    73b4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    73b8:	f04f 0320 	mov.w	r3, #32
    73bc:	f3ef 8a11 	mrs	sl, BASEPRI
    73c0:	f383 8811 	msr	BASEPRI, r3
    73c4:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    73c8:	f002 f812 	bl	93f0 <bt_conn_lookup_handle>
		if (!conn) {
    73cc:	4604      	mov	r4, r0
    73ce:	b928      	cbnz	r0, 73dc <hci_num_completed_packets+0x48>
	__asm__ volatile(
    73d0:	f38a 8811 	msr	BASEPRI, sl
    73d4:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
    73d8:	3501      	adds	r5, #1
    73da:	e7e2      	b.n	73a2 <hci_num_completed_packets+0xe>
    73dc:	f38a 8811 	msr	BASEPRI, sl
    73e0:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    73e4:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    73e8:	b326      	cbz	r6, 7434 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
    73ea:	f04f 0320 	mov.w	r3, #32
    73ee:	f3ef 8211 	mrs	r2, BASEPRI
    73f2:	f383 8811 	msr	BASEPRI, r3
    73f6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    73fa:	69e3      	ldr	r3, [r4, #28]
    73fc:	b16b      	cbz	r3, 741a <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
    73fe:	3b01      	subs	r3, #1
    7400:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7402:	f382 8811 	msr	BASEPRI, r2
    7406:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    740a:	4620      	mov	r0, r4
    740c:	f001 fe9a 	bl	9144 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    7410:	3e01      	subs	r6, #1
    7412:	f01c fb4f 	bl	23ab4 <z_impl_k_sem_give>
    7416:	b2b6      	uxth	r6, r6
    7418:	e7e6      	b.n	73e8 <hci_num_completed_packets+0x54>
Z_GENLIST_IS_EMPTY(slist)
    741a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    741c:	b12b      	cbz	r3, 742a <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    741e:	69a1      	ldr	r1, [r4, #24]
    7420:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    7422:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7424:	428b      	cmp	r3, r1
	list->tail = node;
    7426:	bf08      	it	eq
    7428:	61a0      	streq	r0, [r4, #24]
    742a:	f382 8811 	msr	BASEPRI, r2
    742e:	f3bf 8f6f 	isb	sy
			if (!node) {
    7432:	b91b      	cbnz	r3, 743c <hci_num_completed_packets+0xa8>
		bt_conn_unref(conn);
    7434:	4620      	mov	r0, r4
    7436:	f020 faa5 	bl	27984 <bt_conn_unref>
    743a:	e7cd      	b.n	73d8 <hci_num_completed_packets+0x44>
	__asm__ volatile(
    743c:	f04f 0220 	mov.w	r2, #32
    7440:	f3ef 8111 	mrs	r1, BASEPRI
    7444:	f382 8811 	msr	BASEPRI, r2
    7448:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    744c:	68da      	ldr	r2, [r3, #12]
    744e:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    7450:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    7454:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    7456:	f8c3 800c 	str.w	r8, [r3, #12]
    745a:	b98a      	cbnz	r2, 7480 <hci_num_completed_packets+0xec>
	list->head = node;
    745c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    7460:	f381 8811 	msr	BASEPRI, r1
    7464:	f3bf 8f6f 	isb	sy
    7468:	2100      	movs	r1, #0
    746a:	f104 0030 	add.w	r0, r4, #48	; 0x30
    746e:	f01f fe47 	bl	27100 <atomic_test_and_set_bit>
    7472:	2800      	cmp	r0, #0
    7474:	d1c9      	bne.n	740a <hci_num_completed_packets+0x76>
		k_queue_append(&work_q->queue, work);
    7476:	4651      	mov	r1, sl
    7478:	4648      	mov	r0, r9
    747a:	f025 feee 	bl	2d25a <k_queue_append>
    747e:	e7c4      	b.n	740a <hci_num_completed_packets+0x76>
	parent->next = child;
    7480:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7482:	6263      	str	r3, [r4, #36]	; 0x24
}
    7484:	e7ec      	b.n	7460 <hci_num_completed_packets+0xcc>
    7486:	bf00      	nop
    7488:	20001fd8 	.word	0x20001fd8

0000748c <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
    748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    748e:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7490:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
    7492:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7494:	f018 fbbe 	bl	1fc14 <net_buf_pool_get>
    7498:	4b19      	ldr	r3, [pc, #100]	; (7500 <hci_cmd_done.isra.0+0x74>)
    749a:	4283      	cmp	r3, r0
    749c:	d12e      	bne.n	74fc <hci_cmd_done.isra.0+0x70>
	if (cmd(buf)->opcode != opcode) {
    749e:	4620      	mov	r0, r4
    74a0:	f018 fbc0 	bl	1fc24 <net_buf_id>
	if (cmd(buf)->state && !status) {
    74a4:	4620      	mov	r0, r4
    74a6:	f018 fbbd 	bl	1fc24 <net_buf_id>
    74aa:	4d16      	ldr	r5, [pc, #88]	; (7504 <hci_cmd_done.isra.0+0x78>)
    74ac:	270c      	movs	r7, #12
    74ae:	fb07 5300 	mla	r3, r7, r0, r5
    74b2:	685b      	ldr	r3, [r3, #4]
    74b4:	b15b      	cbz	r3, 74ce <hci_cmd_done.isra.0+0x42>
    74b6:	b956      	cbnz	r6, 74ce <hci_cmd_done.isra.0+0x42>
		struct cmd_state_set *update = cmd(buf)->state;
    74b8:	4620      	mov	r0, r4
    74ba:	f018 fbb3 	bl	1fc24 <net_buf_id>
    74be:	fb07 5000 	mla	r0, r7, r0, r5
    74c2:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    74c4:	e9d3 0100 	ldrd	r0, r1, [r3]
    74c8:	7a1a      	ldrb	r2, [r3, #8]
    74ca:	f01f fe24 	bl	27116 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    74ce:	4620      	mov	r0, r4
    74d0:	f018 fba8 	bl	1fc24 <net_buf_id>
    74d4:	270c      	movs	r7, #12
    74d6:	fb07 5000 	mla	r0, r7, r0, r5
    74da:	6883      	ldr	r3, [r0, #8]
    74dc:	b173      	cbz	r3, 74fc <hci_cmd_done.isra.0+0x70>
		cmd(buf)->status = status;
    74de:	4620      	mov	r0, r4
    74e0:	f018 fba0 	bl	1fc24 <net_buf_id>
    74e4:	4378      	muls	r0, r7
    74e6:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    74e8:	4620      	mov	r0, r4
    74ea:	f018 fb9b 	bl	1fc24 <net_buf_id>
    74ee:	fb07 5500 	mla	r5, r7, r0, r5
    74f2:	68a8      	ldr	r0, [r5, #8]
}
    74f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    74f8:	f01c badc 	b.w	23ab4 <z_impl_k_sem_give>
    74fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    74fe:	bf00      	nop
    7500:	20000efc 	.word	0x20000efc
    7504:	200021c4 	.word	0x200021c4

00007508 <hci_cmd_complete>:
{
    7508:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    750a:	2103      	movs	r1, #3
{
    750c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    750e:	3008      	adds	r0, #8
    7510:	f024 fe3f 	bl	2c192 <net_buf_simple_pull_mem>
	status = buf->data[0];
    7514:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7516:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7518:	7818      	ldrb	r0, [r3, #0]
    751a:	4621      	mov	r1, r4
    751c:	f7ff ffb6 	bl	748c <hci_cmd_done.isra.0>
	if (ncmd) {
    7520:	b125      	cbz	r5, 752c <hci_cmd_complete+0x24>
    7522:	4803      	ldr	r0, [pc, #12]	; (7530 <hci_cmd_complete+0x28>)
}
    7524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7528:	f01c bac4 	b.w	23ab4 <z_impl_k_sem_give>
    752c:	bd38      	pop	{r3, r4, r5, pc}
    752e:	bf00      	nop
    7530:	20000158 	.word	0x20000158

00007534 <hci_tx_thread>:
{
    7534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    7538:	f8df 8104 	ldr.w	r8, [pc, #260]	; 7640 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
    753c:	f8df a114 	ldr.w	sl, [pc, #276]	; 7654 <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
    7540:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7544:	483d      	ldr	r0, [pc, #244]	; (763c <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7546:	f36f 3310 	bfc	r3, #12, #5
    754a:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    754e:	f001 fee7 	bl	9320 <bt_conn_prepare_events>
    7552:	1c45      	adds	r5, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7554:	483a      	ldr	r0, [pc, #232]	; (7640 <hci_tx_thread+0x10c>)
    7556:	f04f 32ff 	mov.w	r2, #4294967295
    755a:	f04f 33ff 	mov.w	r3, #4294967295
    755e:	4629      	mov	r1, r5
    7560:	f01c fdc4 	bl	240ec <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7564:	b160      	cbz	r0, 7580 <hci_tx_thread+0x4c>
    7566:	4937      	ldr	r1, [pc, #220]	; (7644 <hci_tx_thread+0x110>)
    7568:	4837      	ldr	r0, [pc, #220]	; (7648 <hci_tx_thread+0x114>)
    756a:	f241 4376 	movw	r3, #5238	; 0x1476
    756e:	4652      	mov	r2, sl
    7570:	f01c ffa0 	bl	244b4 <printk>
    7574:	4040      	eors	r0, r0
    7576:	f380 8811 	msr	BASEPRI, r0
    757a:	f04f 0003 	mov.w	r0, #3
    757e:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7580:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 7658 <hci_tx_thread+0x124>
{
    7584:	4e2e      	ldr	r6, [pc, #184]	; (7640 <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
    7586:	f5a9 7786 	sub.w	r7, r9, #268	; 0x10c
    758a:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    758e:	b915      	cbnz	r5, 7596 <hci_tx_thread+0x62>
	z_impl_k_yield();
    7590:	f01c fa1e 	bl	239d0 <z_impl_k_yield>
	while (1) {
    7594:	e7d4      	b.n	7540 <hci_tx_thread+0xc>
		switch (ev->state) {
    7596:	68f3      	ldr	r3, [r6, #12]
    7598:	f3c3 3304 	ubfx	r3, r3, #12, #5
    759c:	2b04      	cmp	r3, #4
    759e:	d142      	bne.n	7626 <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
    75a0:	7b33      	ldrb	r3, [r6, #12]
    75a2:	2b00      	cmp	r3, #0
    75a4:	d142      	bne.n	762c <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    75a6:	2200      	movs	r2, #0
    75a8:	2300      	movs	r3, #0
    75aa:	4648      	mov	r0, r9
    75ac:	f024 fcc8 	bl	2bf40 <net_buf_get>
	BT_ASSERT(buf);
    75b0:	4604      	mov	r4, r0
    75b2:	b960      	cbnz	r0, 75ce <hci_tx_thread+0x9a>
    75b4:	4925      	ldr	r1, [pc, #148]	; (764c <hci_tx_thread+0x118>)
    75b6:	4824      	ldr	r0, [pc, #144]	; (7648 <hci_tx_thread+0x114>)
    75b8:	f241 4313 	movw	r3, #5139	; 0x1413
    75bc:	4652      	mov	r2, sl
    75be:	f01c ff79 	bl	244b4 <printk>
    75c2:	4040      	eors	r0, r0
    75c4:	f380 8811 	msr	BASEPRI, r0
    75c8:	f04f 0003 	mov.w	r0, #3
    75cc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    75ce:	f04f 32ff 	mov.w	r2, #4294967295
    75d2:	f04f 33ff 	mov.w	r3, #4294967295
    75d6:	4658      	mov	r0, fp
    75d8:	f01c fa92 	bl	23b00 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    75dc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    75e0:	b120      	cbz	r0, 75ec <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    75e2:	f018 fbd3 	bl	1fd8c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    75e6:	2300      	movs	r3, #0
    75e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
    75ec:	4620      	mov	r0, r4
    75ee:	f024 fd2e 	bl	2c04e <net_buf_ref>
    75f2:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		return bt_hci_ecc_send(buf);
    75f6:	4620      	mov	r0, r4
    75f8:	f7ff fb68 	bl	6ccc <bt_hci_ecc_send>
	if (err) {
    75fc:	b198      	cbz	r0, 7626 <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
    75fe:	4814      	ldr	r0, [pc, #80]	; (7650 <hci_tx_thread+0x11c>)
    7600:	f01c fa58 	bl	23ab4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    7604:	4620      	mov	r0, r4
    7606:	f018 fb0d 	bl	1fc24 <net_buf_id>
    760a:	4621      	mov	r1, r4
    760c:	201f      	movs	r0, #31
    760e:	f7ff ff3d 	bl	748c <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
    7612:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    7616:	f018 fbb9 	bl	1fd8c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    761a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    761c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    761e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		net_buf_unref(buf);
    7622:	f018 fbb3 	bl	1fd8c <net_buf_unref>
	for (; count; ev++, count--) {
    7626:	3614      	adds	r6, #20
    7628:	3d01      	subs	r5, #1
    762a:	e7b0      	b.n	758e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    762c:	2b01      	cmp	r3, #1
    762e:	d1fa      	bne.n	7626 <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
    7630:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    7632:	3834      	subs	r0, #52	; 0x34
    7634:	f002 f89e 	bl	9774 <bt_conn_process_tx>
    7638:	e7f5      	b.n	7626 <hci_tx_thread+0xf2>
    763a:	bf00      	nop
    763c:	2000039c 	.word	0x2000039c
    7640:	20000388 	.word	0x20000388
    7644:	000332b5 	.word	0x000332b5
    7648:	000332be 	.word	0x000332be
    764c:	000332db 	.word	0x000332db
    7650:	20000158 	.word	0x20000158
    7654:	00033281 	.word	0x00033281
    7658:	20000174 	.word	0x20000174

0000765c <hci_cmd_status>:
{
    765c:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    765e:	2104      	movs	r1, #4
{
    7660:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7662:	3008      	adds	r0, #8
    7664:	f024 fd95 	bl	2c192 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7668:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    766a:	7800      	ldrb	r0, [r0, #0]
    766c:	4621      	mov	r1, r4
    766e:	f7ff ff0d 	bl	748c <hci_cmd_done.isra.0>
	if (ncmd) {
    7672:	b125      	cbz	r5, 767e <hci_cmd_status+0x22>
    7674:	4802      	ldr	r0, [pc, #8]	; (7680 <hci_cmd_status+0x24>)
}
    7676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    767a:	f01c ba1b 	b.w	23ab4 <z_impl_k_sem_give>
    767e:	bd38      	pop	{r3, r4, r5, pc}
    7680:	20000158 	.word	0x20000158

00007684 <bt_hci_cmd_create>:
{
    7684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7688:	f04f 32ff 	mov.w	r2, #4294967295
    768c:	f04f 33ff 	mov.w	r3, #4294967295
{
    7690:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7692:	4816      	ldr	r0, [pc, #88]	; (76ec <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    7694:	f8df 8058 	ldr.w	r8, [pc, #88]	; 76f0 <bt_hci_cmd_create+0x6c>
{
    7698:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    769a:	f024 fc4c 	bl	2bf36 <net_buf_alloc_fixed>
    769e:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    76a0:	f100 0b08 	add.w	fp, r0, #8
    76a4:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
    76a6:	2700      	movs	r7, #0
    76a8:	4658      	mov	r0, fp
    76aa:	f024 fc69 	bl	2bf80 <net_buf_simple_reserve>
    76ae:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    76b0:	4620      	mov	r0, r4
    76b2:	f018 fab7 	bl	1fc24 <net_buf_id>
    76b6:	f04f 0a0c 	mov.w	sl, #12
    76ba:	fb0a 8000 	mla	r0, sl, r0, r8
    76be:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    76c0:	4620      	mov	r0, r4
    76c2:	f018 faaf 	bl	1fc24 <net_buf_id>
    76c6:	fb0a 8000 	mla	r0, sl, r0, r8
    76ca:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    76cc:	4620      	mov	r0, r4
    76ce:	f018 faa9 	bl	1fc24 <net_buf_id>
    76d2:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    76d6:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    76d8:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    76da:	4658      	mov	r0, fp
    76dc:	f024 fcdd 	bl	2c09a <net_buf_simple_add>
	hdr->param_len = param_len;
    76e0:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    76e2:	8005      	strh	r5, [r0, #0]
}
    76e4:	4620      	mov	r0, r4
    76e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76ea:	bf00      	nop
    76ec:	20000efc 	.word	0x20000efc
    76f0:	200021c4 	.word	0x200021c4

000076f4 <bt_hci_cmd_send>:
{
    76f4:	b538      	push	{r3, r4, r5, lr}
    76f6:	4605      	mov	r5, r0
	if (!buf) {
    76f8:	460c      	mov	r4, r1
    76fa:	b919      	cbnz	r1, 7704 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    76fc:	f7ff ffc2 	bl	7684 <bt_hci_cmd_create>
		if (!buf) {
    7700:	4604      	mov	r4, r0
    7702:	b198      	cbz	r0, 772c <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    7704:	f640 4335 	movw	r3, #3125	; 0xc35
    7708:	429d      	cmp	r5, r3
    770a:	d109      	bne.n	7720 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
    770c:	4620      	mov	r0, r4
    770e:	f7ff fadd 	bl	6ccc <bt_hci_ecc_send>
		if (err) {
    7712:	4605      	mov	r5, r0
    7714:	b110      	cbz	r0, 771c <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    7716:	4620      	mov	r0, r4
    7718:	f018 fb38 	bl	1fd8c <net_buf_unref>
}
    771c:	4628      	mov	r0, r5
    771e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7720:	4804      	ldr	r0, [pc, #16]	; (7734 <bt_hci_cmd_send+0x40>)
    7722:	4621      	mov	r1, r4
    7724:	f024 fc86 	bl	2c034 <net_buf_put>
	return 0;
    7728:	2500      	movs	r5, #0
    772a:	e7f7      	b.n	771c <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    772c:	f06f 0536 	mvn.w	r5, #54	; 0x36
    7730:	e7f4      	b.n	771c <bt_hci_cmd_send+0x28>
    7732:	bf00      	nop
    7734:	20000174 	.word	0x20000174

00007738 <bt_hci_cmd_send_sync>:
{
    7738:	b5f0      	push	{r4, r5, r6, r7, lr}
    773a:	4615      	mov	r5, r2
    773c:	b087      	sub	sp, #28
	if (!buf) {
    773e:	460c      	mov	r4, r1
    7740:	b921      	cbnz	r1, 774c <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    7742:	f7ff ff9f 	bl	7684 <bt_hci_cmd_create>
		if (!buf) {
    7746:	4604      	mov	r4, r0
    7748:	2800      	cmp	r0, #0
    774a:	d048      	beq.n	77de <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    774c:	2201      	movs	r2, #1
    774e:	2100      	movs	r1, #0
    7750:	4668      	mov	r0, sp
    7752:	f025 fea7 	bl	2d4a4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    7756:	4620      	mov	r0, r4
    7758:	f018 fa64 	bl	1fc24 <net_buf_id>
    775c:	4e21      	ldr	r6, [pc, #132]	; (77e4 <bt_hci_cmd_send_sync+0xac>)
    775e:	230c      	movs	r3, #12
    7760:	fb03 6000 	mla	r0, r3, r0, r6
    7764:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    7768:	4620      	mov	r0, r4
    776a:	f024 fc70 	bl	2c04e <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    776e:	481e      	ldr	r0, [pc, #120]	; (77e8 <bt_hci_cmd_send_sync+0xb0>)
    7770:	4621      	mov	r1, r4
    7772:	f024 fc5f 	bl	2c034 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    7776:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    777a:	2300      	movs	r3, #0
    777c:	4668      	mov	r0, sp
    777e:	f01c f9bf 	bl	23b00 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    7782:	4607      	mov	r7, r0
    7784:	b180      	cbz	r0, 77a8 <bt_hci_cmd_send_sync+0x70>
    7786:	4a19      	ldr	r2, [pc, #100]	; (77ec <bt_hci_cmd_send_sync+0xb4>)
    7788:	4919      	ldr	r1, [pc, #100]	; (77f0 <bt_hci_cmd_send_sync+0xb8>)
    778a:	481a      	ldr	r0, [pc, #104]	; (77f4 <bt_hci_cmd_send_sync+0xbc>)
    778c:	f44f 73bb 	mov.w	r3, #374	; 0x176
    7790:	f01c fe90 	bl	244b4 <printk>
    7794:	4818      	ldr	r0, [pc, #96]	; (77f8 <bt_hci_cmd_send_sync+0xc0>)
    7796:	4639      	mov	r1, r7
    7798:	f01c fe8c 	bl	244b4 <printk>
    779c:	4040      	eors	r0, r0
    779e:	f380 8811 	msr	BASEPRI, r0
    77a2:	f04f 0003 	mov.w	r0, #3
    77a6:	df02      	svc	2
	status = cmd(buf)->status;
    77a8:	4620      	mov	r0, r4
    77aa:	f018 fa3b 	bl	1fc24 <net_buf_id>
    77ae:	230c      	movs	r3, #12
    77b0:	4343      	muls	r3, r0
    77b2:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    77b4:	b156      	cbz	r6, 77cc <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    77b6:	4620      	mov	r0, r4
    77b8:	f018 fae8 	bl	1fd8c <net_buf_unref>
			return -EIO;
    77bc:	2e09      	cmp	r6, #9
    77be:	bf0c      	ite	eq
    77c0:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    77c4:	f06f 0004 	mvnne.w	r0, #4
}
    77c8:	b007      	add	sp, #28
    77ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    77cc:	b115      	cbz	r5, 77d4 <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    77ce:	602c      	str	r4, [r5, #0]
	return 0;
    77d0:	4630      	mov	r0, r6
    77d2:	e7f9      	b.n	77c8 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    77d4:	4620      	mov	r0, r4
    77d6:	f018 fad9 	bl	1fd8c <net_buf_unref>
	return 0;
    77da:	4628      	mov	r0, r5
    77dc:	e7f4      	b.n	77c8 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    77de:	f06f 0036 	mvn.w	r0, #54	; 0x36
    77e2:	e7f1      	b.n	77c8 <bt_hci_cmd_send_sync+0x90>
    77e4:	200021c4 	.word	0x200021c4
    77e8:	20000174 	.word	0x20000174
    77ec:	00033281 	.word	0x00033281
    77f0:	000332b5 	.word	0x000332b5
    77f4:	000332be 	.word	0x000332be
    77f8:	000332df 	.word	0x000332df

000077fc <set_random_address>:
{
    77fc:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    77fe:	4e15      	ldr	r6, [pc, #84]	; (7854 <set_random_address+0x58>)
    7800:	2206      	movs	r2, #6
    7802:	f106 0131 	add.w	r1, r6, #49	; 0x31
    7806:	4605      	mov	r5, r0
    7808:	f01f f8bb 	bl	26982 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    780c:	4604      	mov	r4, r0
    780e:	b1d8      	cbz	r0, 7848 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    7810:	2106      	movs	r1, #6
    7812:	f242 0005 	movw	r0, #8197	; 0x2005
    7816:	f7ff ff35 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    781a:	4604      	mov	r4, r0
    781c:	b1b0      	cbz	r0, 784c <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    781e:	2206      	movs	r2, #6
    7820:	4629      	mov	r1, r5
    7822:	3008      	adds	r0, #8
    7824:	f024 fc3f 	bl	2c0a6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    7828:	4621      	mov	r1, r4
    782a:	2200      	movs	r2, #0
    782c:	f242 0005 	movw	r0, #8197	; 0x2005
    7830:	f7ff ff82 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    7834:	4604      	mov	r4, r0
    7836:	b938      	cbnz	r0, 7848 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    7838:	4629      	mov	r1, r5
    783a:	f106 0031 	add.w	r0, r6, #49	; 0x31
    783e:	f01f fc06 	bl	2704e <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    7842:	2301      	movs	r3, #1
    7844:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    7848:	4620      	mov	r0, r4
    784a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    784c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7850:	e7fa      	b.n	7848 <set_random_address+0x4c>
    7852:	bf00      	nop
    7854:	20000068 	.word	0x20000068

00007858 <le_set_private_addr>:
{
    7858:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    785a:	4d16      	ldr	r5, [pc, #88]	; (78b4 <le_set_private_addr+0x5c>)
    785c:	4603      	mov	r3, r0
    785e:	f105 0098 	add.w	r0, r5, #152	; 0x98
    7862:	f01f fbe4 	bl	2702e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    7866:	04c2      	lsls	r2, r0, #19
    7868:	d422      	bmi.n	78b0 <le_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    786a:	eb05 1003 	add.w	r0, r5, r3, lsl #4
    786e:	4669      	mov	r1, sp
    7870:	f500 7094 	add.w	r0, r0, #296	; 0x128
    7874:	f01f f925 	bl	26ac2 <bt_rpa_create>
	if (!err) {
    7878:	4604      	mov	r4, r0
    787a:	b950      	cbnz	r0, 7892 <le_set_private_addr+0x3a>
		err = set_random_address(&rpa);
    787c:	4668      	mov	r0, sp
    787e:	f7ff ffbd 	bl	77fc <set_random_address>
		if (!err) {
    7882:	4604      	mov	r4, r0
    7884:	b928      	cbnz	r0, 7892 <le_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    788a:	f105 0098 	add.w	r0, r5, #152	; 0x98
    788e:	f01f fc28 	bl	270e2 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_RPA_TIMEOUT_SET)) {
    7892:	4809      	ldr	r0, [pc, #36]	; (78b8 <le_set_private_addr+0x60>)
    7894:	210d      	movs	r1, #13
    7896:	f01f fc33 	bl	27100 <atomic_test_and_set_bit>
    789a:	b930      	cbnz	r0, 78aa <le_set_private_addr+0x52>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    789c:	4907      	ldr	r1, [pc, #28]	; (78bc <le_set_private_addr+0x64>)
    789e:	4808      	ldr	r0, [pc, #32]	; (78c0 <le_set_private_addr+0x68>)
    78a0:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    78a4:	2300      	movs	r3, #0
    78a6:	f01c fa61 	bl	23d6c <k_delayed_work_submit_to_queue>
}
    78aa:	4620      	mov	r0, r4
    78ac:	b003      	add	sp, #12
    78ae:	bd30      	pop	{r4, r5, pc}
		return 0;
    78b0:	2400      	movs	r4, #0
    78b2:	e7fa      	b.n	78aa <le_set_private_addr+0x52>
    78b4:	20000068 	.word	0x20000068
    78b8:	20000100 	.word	0x20000100
    78bc:	200001a0 	.word	0x200001a0
    78c0:	20001fd8 	.word	0x20001fd8

000078c4 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    78c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78c6:	f001 0304 	and.w	r3, r1, #4
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    78ca:	f011 0101 	ands.w	r1, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    78ce:	4605      	mov	r5, r0
    78d0:	4614      	mov	r4, r2
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    78d2:	d020      	beq.n	7916 <le_adv_set_random_addr.isra.0+0x52>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    78d4:	b953      	cbnz	r3, 78ec <le_adv_set_random_addr.isra.0+0x28>
		return le_set_private_addr(adv->id);
    78d6:	f7ff ffbf 	bl	7858 <le_set_private_addr>
			if (err) {
    78da:	b990      	cbnz	r0, 7902 <le_adv_set_random_addr.isra.0+0x3e>
			if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    78dc:	4b19      	ldr	r3, [pc, #100]	; (7944 <le_adv_set_random_addr.isra.0+0x80>)
    78de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    78e2:	065b      	lsls	r3, r3, #25
    78e4:	d52c      	bpl.n	7940 <le_adv_set_random_addr.isra.0+0x7c>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    78e6:	2303      	movs	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    78e8:	7023      	strb	r3, [r4, #0]
		if (err) {
    78ea:	e00a      	b.n	7902 <le_adv_set_random_addr.isra.0+0x3e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    78ec:	4e15      	ldr	r6, [pc, #84]	; (7944 <le_adv_set_random_addr.isra.0+0x80>)
    78ee:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    78f2:	00c7      	lsls	r7, r0, #3
    78f4:	5cf3      	ldrb	r3, [r6, r3]
    78f6:	2b01      	cmp	r3, #1
    78f8:	d004      	beq.n	7904 <le_adv_set_random_addr.isra.0+0x40>
			*own_addr_type = id_addr->type;
    78fa:	1b7d      	subs	r5, r7, r5
	return 0;
    78fc:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
    78fe:	5d73      	ldrb	r3, [r6, r5]
    7900:	7023      	strb	r3, [r4, #0]
}
    7902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = set_adv_random_address(adv, &id_addr->a);
    7904:	2007      	movs	r0, #7
    7906:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    790a:	4430      	add	r0, r6
    790c:	f7ff ff76 	bl	77fc <set_random_address>
				if (err) {
    7910:	2800      	cmp	r0, #0
    7912:	d0f2      	beq.n	78fa <le_adv_set_random_addr.isra.0+0x36>
    7914:	e7f5      	b.n	7902 <le_adv_set_random_addr.isra.0+0x3e>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    7916:	b18b      	cbz	r3, 793c <le_adv_set_random_addr.isra.0+0x78>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7918:	4e0a      	ldr	r6, [pc, #40]	; (7944 <le_adv_set_random_addr.isra.0+0x80>)
    791a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    791e:	00c7      	lsls	r7, r0, #3
    7920:	5cf3      	ldrb	r3, [r6, r3]
    7922:	2b01      	cmp	r3, #1
    7924:	d108      	bne.n	7938 <le_adv_set_random_addr.isra.0+0x74>
				err = set_adv_random_address(adv, &id_addr->a);
    7926:	2007      	movs	r0, #7
    7928:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    792c:	4430      	add	r0, r6
    792e:	f7ff ff65 	bl	77fc <set_random_address>
			*own_addr_type = id_addr->type;
    7932:	1b7d      	subs	r5, r7, r5
    7934:	5d73      	ldrb	r3, [r6, r5]
    7936:	e7d7      	b.n	78e8 <le_adv_set_random_addr.isra.0+0x24>
	int err = 0;
    7938:	4608      	mov	r0, r1
    793a:	e7fa      	b.n	7932 <le_adv_set_random_addr.isra.0+0x6e>
		return le_set_private_addr(adv->id);
    793c:	f7ff ff8c 	bl	7858 <le_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7940:	2301      	movs	r3, #1
    7942:	e7d1      	b.n	78e8 <le_adv_set_random_addr.isra.0+0x24>
    7944:	20000068 	.word	0x20000068

00007948 <set_le_adv_enable_legacy>:
{
    7948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    794a:	4606      	mov	r6, r0
    794c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    794e:	f242 000a 	movw	r0, #8202	; 0x200a
    7952:	2101      	movs	r1, #1
    7954:	f7ff fe96 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    7958:	4604      	mov	r4, r0
    795a:	b1e8      	cbz	r0, 7998 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    795c:	3008      	adds	r0, #8
    795e:	b1cd      	cbz	r5, 7994 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    7960:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7962:	f024 fba9 	bl	2c0b8 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    7966:	3614      	adds	r6, #20
	state->bit = bit;
    7968:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    796a:	4620      	mov	r0, r4
	state->bit = bit;
    796c:	9302      	str	r3, [sp, #8]
	state->target = target;
    796e:	9601      	str	r6, [sp, #4]
	state->val = val;
    7970:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    7974:	f018 f956 	bl	1fc24 <net_buf_id>
    7978:	4b09      	ldr	r3, [pc, #36]	; (79a0 <set_le_adv_enable_legacy+0x58>)
    797a:	220c      	movs	r2, #12
    797c:	fb02 3000 	mla	r0, r2, r0, r3
    7980:	ab01      	add	r3, sp, #4
    7982:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    7984:	2200      	movs	r2, #0
    7986:	4621      	mov	r1, r4
    7988:	f242 000a 	movw	r0, #8202	; 0x200a
    798c:	f7ff fed4 	bl	7738 <bt_hci_cmd_send_sync>
}
    7990:	b004      	add	sp, #16
    7992:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7994:	4629      	mov	r1, r5
    7996:	e7e4      	b.n	7962 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    7998:	f06f 0036 	mvn.w	r0, #54	; 0x36
    799c:	e7f8      	b.n	7990 <set_le_adv_enable_legacy+0x48>
    799e:	bf00      	nop
    79a0:	200021c4 	.word	0x200021c4

000079a4 <set_le_scan_enable_legacy>:
{
    79a4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    79a6:	2102      	movs	r1, #2
{
    79a8:	b085      	sub	sp, #20
    79aa:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    79ac:	f242 000c 	movw	r0, #8204	; 0x200c
    79b0:	f7ff fe68 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    79b4:	4605      	mov	r5, r0
    79b6:	b348      	cbz	r0, 7a0c <set_le_scan_enable_legacy+0x68>
	cp = net_buf_add(buf, sizeof(*cp));
    79b8:	2102      	movs	r1, #2
    79ba:	3008      	adds	r0, #8
    79bc:	f024 fb6d 	bl	2c09a <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    79c0:	2c01      	cmp	r4, #1
	cp = net_buf_add(buf, sizeof(*cp));
    79c2:	4603      	mov	r3, r0
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    79c4:	d11f      	bne.n	7a06 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    79c6:	4813      	ldr	r0, [pc, #76]	; (7a14 <set_le_scan_enable_legacy+0x70>)
    79c8:	f01f fb31 	bl	2702e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    79cc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    79d0:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    79d2:	701c      	strb	r4, [r3, #0]
	state->target = target;
    79d4:	4b0f      	ldr	r3, [pc, #60]	; (7a14 <set_le_scan_enable_legacy+0x70>)
    79d6:	9301      	str	r3, [sp, #4]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    79d8:	f004 0401 	and.w	r4, r4, #1
	state->bit = bit;
    79dc:	2305      	movs	r3, #5
	cmd(buf)->state = &state;
    79de:	4628      	mov	r0, r5
	state->bit = bit;
    79e0:	9302      	str	r3, [sp, #8]
	cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    79e2:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    79e6:	f018 f91d 	bl	1fc24 <net_buf_id>
    79ea:	4b0b      	ldr	r3, [pc, #44]	; (7a18 <set_le_scan_enable_legacy+0x74>)
    79ec:	220c      	movs	r2, #12
    79ee:	fb02 3000 	mla	r0, r2, r0, r3
    79f2:	ab01      	add	r3, sp, #4
    79f4:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    79f6:	2200      	movs	r2, #0
    79f8:	4629      	mov	r1, r5
    79fa:	f242 000c 	movw	r0, #8204	; 0x200c
    79fe:	f7ff fe9b 	bl	7738 <bt_hci_cmd_send_sync>
}
    7a02:	b005      	add	sp, #20
    7a04:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    7a06:	2200      	movs	r2, #0
    7a08:	7042      	strb	r2, [r0, #1]
    7a0a:	e7e2      	b.n	79d2 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    7a0c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7a10:	e7f7      	b.n	7a02 <set_le_scan_enable_legacy+0x5e>
    7a12:	bf00      	nop
    7a14:	20000100 	.word	0x20000100
    7a18:	200021c4 	.word	0x200021c4

00007a1c <le_update_private_addr>:
{
    7a1c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7a1e:	481d      	ldr	r0, [pc, #116]	; (7a94 <le_update_private_addr+0x78>)
    7a20:	f01f fb05 	bl	2702e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    7a24:	0684      	lsls	r4, r0, #26
    7a26:	d41a      	bmi.n	7a5e <le_update_private_addr+0x42>
	bool scan_enabled = false;
    7a28:	2500      	movs	r5, #0
    7a2a:	4b1b      	ldr	r3, [pc, #108]	; (7a98 <le_update_private_addr+0x7c>)
    7a2c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7a30:	f01f fafd 	bl	2702e <atomic_get>
		if (adv &&
    7a34:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7a36:	f3c0 1680 	ubfx	r6, r0, #6, #1
    7a3a:	d41b      	bmi.n	7a74 <le_update_private_addr+0x58>
	uint8_t id = BT_ID_DEFAULT;
    7a3c:	2400      	movs	r4, #0
	bool adv_enabled = false;
    7a3e:	4626      	mov	r6, r4
	err = le_set_private_addr(id);
    7a40:	4620      	mov	r0, r4
    7a42:	f7ff ff09 	bl	7858 <le_set_private_addr>
	if (err) {
    7a46:	bb18      	cbnz	r0, 7a90 <le_update_private_addr+0x74>
	if (adv && adv_enabled) {
    7a48:	b11e      	cbz	r6, 7a52 <le_update_private_addr+0x36>
		set_le_adv_enable_legacy(adv, true);
    7a4a:	4814      	ldr	r0, [pc, #80]	; (7a9c <le_update_private_addr+0x80>)
    7a4c:	2101      	movs	r1, #1
    7a4e:	f7ff ff7b 	bl	7948 <set_le_adv_enable_legacy>
	if (scan_enabled) {
    7a52:	b1ed      	cbz	r5, 7a90 <le_update_private_addr+0x74>
}
    7a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return set_le_scan_enable_legacy(enable);
    7a58:	2001      	movs	r0, #1
    7a5a:	f7ff bfa3 	b.w	79a4 <set_le_scan_enable_legacy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7a5e:	480d      	ldr	r0, [pc, #52]	; (7a94 <le_update_private_addr+0x78>)
    7a60:	f01f fae5 	bl	2702e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7a64:	f3c0 15c0 	ubfx	r5, r0, #7, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    7a68:	0600      	lsls	r0, r0, #24
    7a6a:	d5dd      	bpl.n	7a28 <le_update_private_addr+0xc>
	return set_le_scan_enable_legacy(enable);
    7a6c:	2000      	movs	r0, #0
    7a6e:	f7ff ff99 	bl	79a4 <set_le_scan_enable_legacy>
    7a72:	e7da      	b.n	7a2a <le_update_private_addr+0xe>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7a74:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7a78:	f01f fad9 	bl	2702e <atomic_get>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7a7c:	0502      	lsls	r2, r0, #20
    7a7e:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    7a82:	d4db      	bmi.n	7a3c <le_update_private_addr+0x20>
			id = adv->id;
    7a84:	4618      	mov	r0, r3
    7a86:	f810 4f18 	ldrb.w	r4, [r0, #24]!
			set_le_adv_enable_legacy(adv, false);
    7a8a:	f7ff ff5d 	bl	7948 <set_le_adv_enable_legacy>
    7a8e:	e7d7      	b.n	7a40 <le_update_private_addr+0x24>
}
    7a90:	bd70      	pop	{r4, r5, r6, pc}
    7a92:	bf00      	nop
    7a94:	20000100 	.word	0x20000100
    7a98:	20000068 	.word	0x20000068
    7a9c:	20000080 	.word	0x20000080

00007aa0 <rpa_timeout>:
{
    7aa0:	b508      	push	{r3, lr}
	le_rpa_invalidate();
    7aa2:	f7ff fc5b 	bl	735c <le_rpa_invalidate>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7aa6:	480f      	ldr	r0, [pc, #60]	; (7ae4 <rpa_timeout+0x44>)
    7aa8:	2106      	movs	r1, #6
    7aaa:	f01f fac6 	bl	2703a <atomic_test_bit>
    7aae:	b978      	cbnz	r0, 7ad0 <rpa_timeout+0x30>
    7ab0:	480d      	ldr	r0, [pc, #52]	; (7ae8 <rpa_timeout+0x48>)
    7ab2:	f01f fabc 	bl	2702e <atomic_get>
	if (!(adv_enabled ||
    7ab6:	0501      	lsls	r1, r0, #20
    7ab8:	d410      	bmi.n	7adc <rpa_timeout+0x3c>
    7aba:	480b      	ldr	r0, [pc, #44]	; (7ae8 <rpa_timeout+0x48>)
    7abc:	f01f fab7 	bl	2702e <atomic_get>
    7ac0:	0682      	lsls	r2, r0, #26
    7ac2:	d504      	bpl.n	7ace <rpa_timeout+0x2e>
    7ac4:	4808      	ldr	r0, [pc, #32]	; (7ae8 <rpa_timeout+0x48>)
    7ac6:	f01f fab2 	bl	2702e <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    7aca:	0603      	lsls	r3, r0, #24
    7acc:	d406      	bmi.n	7adc <rpa_timeout+0x3c>
}
    7ace:	bd08      	pop	{r3, pc}
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    7ad0:	4804      	ldr	r0, [pc, #16]	; (7ae4 <rpa_timeout+0x44>)
    7ad2:	210b      	movs	r1, #11
    7ad4:	f01f fab1 	bl	2703a <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7ad8:	2800      	cmp	r0, #0
    7ada:	d1e9      	bne.n	7ab0 <rpa_timeout+0x10>
}
    7adc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
    7ae0:	f7ff bf9c 	b.w	7a1c <le_update_private_addr>
    7ae4:	20000094 	.word	0x20000094
    7ae8:	20000100 	.word	0x20000100

00007aec <hci_id_add>:
{
    7aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7af0:	4605      	mov	r5, r0
    7af2:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    7af4:	f242 0027 	movw	r0, #8231	; 0x2027
    7af8:	2127      	movs	r1, #39	; 0x27
{
    7afa:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    7afc:	f7ff fdc2 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    7b00:	4604      	mov	r4, r0
    7b02:	b1f0      	cbz	r0, 7b42 <hci_id_add+0x56>
	cp = net_buf_add(buf, sizeof(*cp));
    7b04:	2127      	movs	r1, #39	; 0x27
    7b06:	3008      	adds	r0, #8
    7b08:	f024 fac7 	bl	2c09a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    7b0c:	4641      	mov	r1, r8
	cp = net_buf_add(buf, sizeof(*cp));
    7b0e:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    7b10:	f01f faa0 	bl	27054 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    7b14:	4639      	mov	r1, r7
    7b16:	2210      	movs	r2, #16
    7b18:	1df0      	adds	r0, r6, #7
    7b1a:	f01e ff42 	bl	269a2 <memcpy>
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
    7b1e:	490b      	ldr	r1, [pc, #44]	; (7b4c <hci_id_add+0x60>)
    7b20:	2210      	movs	r2, #16
    7b22:	fb02 1105 	mla	r1, r2, r5, r1
    7b26:	f501 7194 	add.w	r1, r1, #296	; 0x128
    7b2a:	f106 0017 	add.w	r0, r6, #23
    7b2e:	f01e ff38 	bl	269a2 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    7b32:	4621      	mov	r1, r4
    7b34:	2200      	movs	r2, #0
}
    7b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    7b3a:	f242 0027 	movw	r0, #8231	; 0x2027
    7b3e:	f7ff bdfb 	b.w	7738 <bt_hci_cmd_send_sync>
}
    7b42:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b4a:	bf00      	nop
    7b4c:	20000068 	.word	0x20000068

00007b50 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    7b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7b54:	b087      	sub	sp, #28
    7b56:	4606      	mov	r6, r0
    7b58:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    7b5c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    7b60:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    7b64:	460c      	mov	r4, r1
    7b66:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    7b68:	2100      	movs	r1, #0
    7b6a:	2210      	movs	r2, #16
    7b6c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    7b6e:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    7b70:	f01e ff42 	bl	269f8 <memset>
	if (use_name) {
    7b74:	f1b8 0f00 	cmp.w	r8, #0
    7b78:	d00e      	beq.n	7b98 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    7b7a:	bbb4      	cbnz	r4, 7bea <le_adv_update.constprop.0+0x9a>
    7b7c:	2d00      	cmp	r5, #0
    7b7e:	d13f      	bne.n	7c00 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    7b80:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 7c34 <le_adv_update.constprop.0+0xe4>
    7b84:	4658      	mov	r0, fp
    7b86:	f01e fed1 	bl	2692c <strlen>
    7b8a:	2309      	movs	r3, #9
    7b8c:	f88d 3000 	strb.w	r3, [sp]
    7b90:	f88d 0001 	strb.w	r0, [sp, #1]
    7b94:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    7b98:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    7b9c:	f1b8 0f00 	cmp.w	r8, #0
    7ba0:	d030      	beq.n	7c04 <le_adv_update.constprop.0+0xb4>
    7ba2:	f1ba 0f00 	cmp.w	sl, #0
    7ba6:	d12d      	bne.n	7c04 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    7ba8:	2301      	movs	r3, #1
			d[1].data = &data;
    7baa:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    7bae:	9305      	str	r3, [sp, #20]
			d_len = 2;
    7bb0:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    7bb2:	a902      	add	r1, sp, #8
    7bb4:	f242 0008 	movw	r0, #8200	; 0x2008
    7bb8:	f01f fc6d 	bl	27496 <hci_set_ad>
		if (err) {
    7bbc:	4604      	mov	r4, r0
    7bbe:	b938      	cbnz	r0, 7bd0 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    7bc0:	f1ba 0f00 	cmp.w	sl, #0
    7bc4:	d120      	bne.n	7c08 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7bc6:	2104      	movs	r1, #4
    7bc8:	f106 0014 	add.w	r0, r6, #20
    7bcc:	f01f fa89 	bl	270e2 <atomic_or>
}
    7bd0:	4620      	mov	r0, r4
    7bd2:	b007      	add	sp, #28
    7bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    7bd8:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    7bdc:	3a08      	subs	r2, #8
    7bde:	2a01      	cmp	r2, #1
    7be0:	d925      	bls.n	7c2e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    7be2:	3301      	adds	r3, #1
    7be4:	429f      	cmp	r7, r3
    7be6:	d1f7      	bne.n	7bd8 <le_adv_update.constprop.0+0x88>
    7be8:	e7c8      	b.n	7b7c <le_adv_update.constprop.0+0x2c>
    7bea:	2300      	movs	r3, #0
    7bec:	e7fa      	b.n	7be4 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    7bee:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    7bf2:	3a08      	subs	r2, #8
    7bf4:	2a01      	cmp	r2, #1
    7bf6:	d91a      	bls.n	7c2e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    7bf8:	3301      	adds	r3, #1
    7bfa:	4599      	cmp	r9, r3
    7bfc:	d1f7      	bne.n	7bee <le_adv_update.constprop.0+0x9e>
    7bfe:	e7bf      	b.n	7b80 <le_adv_update.constprop.0+0x30>
    7c00:	2300      	movs	r3, #0
    7c02:	e7fa      	b.n	7bfa <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    7c04:	2201      	movs	r2, #1
    7c06:	e7d4      	b.n	7bb2 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    7c08:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    7c0c:	2201      	movs	r2, #1
    7c0e:	f1b8 0f00 	cmp.w	r8, #0
    7c12:	d003      	beq.n	7c1c <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    7c14:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    7c16:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    7c1a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    7c1c:	a902      	add	r1, sp, #8
    7c1e:	f242 0009 	movw	r0, #8201	; 0x2009
    7c22:	f01f fc38 	bl	27496 <hci_set_ad>
		if (err) {
    7c26:	2800      	cmp	r0, #0
    7c28:	d0cd      	beq.n	7bc6 <le_adv_update.constprop.0+0x76>
    7c2a:	4604      	mov	r4, r0
    7c2c:	e7d0      	b.n	7bd0 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    7c2e:	f06f 0415 	mvn.w	r4, #21
    7c32:	e7cd      	b.n	7bd0 <le_adv_update.constprop.0+0x80>
    7c34:	200001d0 	.word	0x200001d0

00007c38 <le_adv_report>:
{
    7c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t num_reports = net_buf_pull_u8(buf);
    7c3c:	f100 0808 	add.w	r8, r0, #8
{
    7c40:	b08b      	sub	sp, #44	; 0x2c
    7c42:	4604      	mov	r4, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
    7c44:	4640      	mov	r0, r8
    7c46:	f024 faac 	bl	2c1a2 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    7c4a:	f8df b11c 	ldr.w	fp, [pc, #284]	; 7d68 <le_adv_report+0x130>
	uint8_t num_reports = net_buf_pull_u8(buf);
    7c4e:	4606      	mov	r6, r0
	while (num_reports--) {
    7c50:	b916      	cbnz	r6, 7c58 <le_adv_report+0x20>
}
    7c52:	b00b      	add	sp, #44	; 0x2c
    7c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    7c58:	89a3      	ldrh	r3, [r4, #12]
    7c5a:	2b08      	cmp	r3, #8
    7c5c:	d9f9      	bls.n	7c52 <le_adv_report+0x1a>
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    7c5e:	2109      	movs	r1, #9
    7c60:	4640      	mov	r0, r8
    7c62:	f024 fa96 	bl	2c192 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
    7c66:	f890 a008 	ldrb.w	sl, [r0, #8]
    7c6a:	eb00 030a 	add.w	r3, r0, sl
		evt = net_buf_pull_mem(buf, sizeof(*evt));
    7c6e:	4605      	mov	r5, r0
		adv_info.rssi = evt->data[evt->length];
    7c70:	7a5b      	ldrb	r3, [r3, #9]
    7c72:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    7c76:	2301      	movs	r3, #1
    7c78:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    7c7c:	237f      	movs	r3, #127	; 0x7f
    7c7e:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.sid = BT_GAP_SID_INVALID;
    7c82:	23ff      	movs	r3, #255	; 0xff
    7c84:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.adv_type = evt->evt_type;
    7c88:	7803      	ldrb	r3, [r0, #0]
    7c8a:	f88d 301f 	strb.w	r3, [sp, #31]
	switch (evt_type) {
    7c8e:	2b04      	cmp	r3, #4
    7c90:	bf96      	itet	ls
    7c92:	4a33      	ldrls	r2, [pc, #204]	; (7d60 <le_adv_report+0x128>)
		adv_info.adv_type = evt->evt_type;
    7c94:	2300      	movhi	r3, #0
    7c96:	5cd3      	ldrbls	r3, [r2, r3]
		adv_info.adv_props = get_adv_props(evt->evt_type);
    7c98:	f8ad 3020 	strh.w	r3, [sp, #32]
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    7c9c:	7843      	ldrb	r3, [r0, #1]
    7c9e:	1e9a      	subs	r2, r3, #2
    7ca0:	2a01      	cmp	r2, #1
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    7ca2:	f100 0101 	add.w	r1, r0, #1
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    7ca6:	d82e      	bhi.n	7d06 <le_adv_report+0xce>
		bt_addr_le_copy(&id_addr, addr);
    7ca8:	a802      	add	r0, sp, #8
    7caa:	f01f f9d3 	bl	27054 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7cae:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7cb2:	3b02      	subs	r3, #2
    7cb4:	f88d 3008 	strb.w	r3, [sp, #8]
	info->addr = &id_addr;
    7cb8:	ab02      	add	r3, sp, #8
    7cba:	9306      	str	r3, [sp, #24]
	if (scan_dev_found_cb) {
    7cbc:	f8db 3000 	ldr.w	r3, [fp]
    7cc0:	b1b3      	cbz	r3, 7cf0 <le_adv_report+0xb8>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    7cc2:	4640      	mov	r0, r8
    7cc4:	f024 fa91 	bl	2c1ea <net_buf_simple_headroom>
	state->len = buf->len;
    7cc8:	89a3      	ldrh	r3, [r4, #12]
    7cca:	9301      	str	r3, [sp, #4]
	state->offset = net_buf_simple_headroom(buf);
    7ccc:	4681      	mov	r9, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    7cce:	4643      	mov	r3, r8
    7cd0:	a802      	add	r0, sp, #8
    7cd2:	f89d 201f 	ldrb.w	r2, [sp, #31]
    7cd6:	f99d 101d 	ldrsb.w	r1, [sp, #29]
    7cda:	f8db 7000 	ldr.w	r7, [fp]
		buf->len = len;
    7cde:	f8a4 a00c 	strh.w	sl, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    7ce2:	47b8      	blx	r7
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    7ce4:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7ce6:	9b01      	ldr	r3, [sp, #4]
    7ce8:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7cea:	fa10 f089 	uxtah	r0, r0, r9
    7cee:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    7cf0:	4b1c      	ldr	r3, [pc, #112]	; (7d64 <le_adv_report+0x12c>)
    7cf2:	681f      	ldr	r7, [r3, #0]
    7cf4:	b9bf      	cbnz	r7, 7d26 <le_adv_report+0xee>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    7cf6:	7a29      	ldrb	r1, [r5, #8]
    7cf8:	4640      	mov	r0, r8
    7cfa:	3101      	adds	r1, #1
    7cfc:	3e01      	subs	r6, #1
    7cfe:	f024 fa40 	bl	2c182 <net_buf_simple_pull>
    7d02:	b2f6      	uxtb	r6, r6
    7d04:	e7a4      	b.n	7c50 <le_adv_report+0x18>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    7d06:	2bff      	cmp	r3, #255	; 0xff
    7d08:	d108      	bne.n	7d1c <le_adv_report+0xe4>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    7d0a:	2300      	movs	r3, #0
    7d0c:	9304      	str	r3, [sp, #16]
    7d0e:	a904      	add	r1, sp, #16
    7d10:	f8cd 3013 	str.w	r3, [sp, #19]
		bt_addr_le_copy(&id_addr,
    7d14:	a802      	add	r0, sp, #8
    7d16:	f01f f99d 	bl	27054 <bt_addr_le_copy>
    7d1a:	e7cd      	b.n	7cb8 <le_adv_report+0x80>
    7d1c:	2000      	movs	r0, #0
    7d1e:	f01f fbe8 	bl	274f2 <bt_lookup_id_addr>
    7d22:	4601      	mov	r1, r0
    7d24:	e7f6      	b.n	7d14 <le_adv_report+0xdc>
	SYS_SLIST_FOR_EACH_CONTAINER(&scan_cbs, listener, node) {
    7d26:	3f08      	subs	r7, #8
    7d28:	2f00      	cmp	r7, #0
    7d2a:	d0e4      	beq.n	7cf6 <le_adv_report+0xbe>
		if (listener->recv) {
    7d2c:	683b      	ldr	r3, [r7, #0]
    7d2e:	b18b      	cbz	r3, 7d54 <le_adv_report+0x11c>
	state->offset = net_buf_simple_headroom(buf);
    7d30:	4640      	mov	r0, r8
    7d32:	f024 fa5a 	bl	2c1ea <net_buf_simple_headroom>
	state->len = buf->len;
    7d36:	89a2      	ldrh	r2, [r4, #12]
			listener->recv(info, &buf->b);
    7d38:	683b      	ldr	r3, [r7, #0]
			buf->len = len;
    7d3a:	f8a4 a00c 	strh.w	sl, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    7d3e:	4681      	mov	r9, r0
			listener->recv(info, &buf->b);
    7d40:	4641      	mov	r1, r8
    7d42:	a806      	add	r0, sp, #24
	state->len = buf->len;
    7d44:	9201      	str	r2, [sp, #4]
    7d46:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    7d48:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7d4a:	9a01      	ldr	r2, [sp, #4]
    7d4c:	81a2      	strh	r2, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7d4e:	fa10 f089 	uxtah	r0, r0, r9
    7d52:	60a0      	str	r0, [r4, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d54:	f117 0f08 	cmn.w	r7, #8
    7d58:	d0cd      	beq.n	7cf6 <le_adv_report+0xbe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7d5a:	68bf      	ldr	r7, [r7, #8]
	return node->next;
    7d5c:	e7ca      	b.n	7cf4 <le_adv_report+0xbc>
    7d5e:	bf00      	nop
    7d60:	00033390 	.word	0x00033390
    7d64:	200021e8 	.word	0x200021e8
    7d68:	200021f0 	.word	0x200021f0

00007d6c <bt_le_scan_random_addr_check>:
{
    7d6c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7d6e:	4b0e      	ldr	r3, [pc, #56]	; (7da8 <bt_le_scan_random_addr_check+0x3c>)
    7d70:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7d74:	f01f f95b 	bl	2702e <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_BROADCASTER) ||
    7d78:	f010 0f40 	tst.w	r0, #64	; 0x40
    7d7c:	4619      	mov	r1, r3
    7d7e:	d101      	bne.n	7d84 <bt_le_scan_random_addr_check+0x18>
		return true;
    7d80:	2001      	movs	r0, #1
}
    7d82:	bd08      	pop	{r3, pc}
    7d84:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7d88:	f01f f951 	bl	2702e <atomic_get>
		if ((atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY) &&
    7d8c:	0502      	lsls	r2, r0, #20
    7d8e:	d505      	bpl.n	7d9c <bt_le_scan_random_addr_check+0x30>
		     bt_dev.id_addr[adv->id].type == BT_ADDR_LE_RANDOM) ||
    7d90:	7e1a      	ldrb	r2, [r3, #24]
    7d92:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		if ((atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY) &&
    7d96:	5c9b      	ldrb	r3, [r3, r2]
    7d98:	2b01      	cmp	r3, #1
    7d9a:	d002      	beq.n	7da2 <bt_le_scan_random_addr_check+0x36>
		     bt_dev.id_addr[adv->id].type == BT_ADDR_LE_RANDOM) ||
    7d9c:	7e0b      	ldrb	r3, [r1, #24]
    7d9e:	2b00      	cmp	r3, #0
    7da0:	d0ee      	beq.n	7d80 <bt_le_scan_random_addr_check+0x14>
			return false;
    7da2:	2000      	movs	r0, #0
    7da4:	e7ed      	b.n	7d82 <bt_le_scan_random_addr_check+0x16>
    7da6:	bf00      	nop
    7da8:	20000068 	.word	0x20000068

00007dac <conn_auto_initiate>:
{
    7dac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    7dae:	7b43      	ldrb	r3, [r0, #13]
    7db0:	2b07      	cmp	r3, #7
{
    7db2:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7db4:	d11e      	bne.n	7df4 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    7db6:	1d06      	adds	r6, r0, #4
    7db8:	210d      	movs	r1, #13
    7dba:	4630      	mov	r0, r6
    7dbc:	f01f f93d 	bl	2703a <atomic_test_bit>
    7dc0:	b9d0      	cbnz	r0, 7df8 <conn_auto_initiate+0x4c>
    7dc2:	78e3      	ldrb	r3, [r4, #3]
    7dc4:	b123      	cbz	r3, 7dd0 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    7dc6:	4b24      	ldr	r3, [pc, #144]	; (7e58 <conn_auto_initiate+0xac>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    7dc8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    7dcc:	071d      	lsls	r5, r3, #28
    7dce:	d513      	bpl.n	7df8 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    7dd0:	2102      	movs	r1, #2
    7dd2:	f242 0016 	movw	r0, #8214	; 0x2016
    7dd6:	f7ff fc55 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    7dda:	4605      	mov	r5, r0
    7ddc:	b160      	cbz	r0, 7df8 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    7dde:	2102      	movs	r1, #2
    7de0:	3008      	adds	r0, #8
    7de2:	f024 f95a 	bl	2c09a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    7de6:	8823      	ldrh	r3, [r4, #0]
    7de8:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    7dea:	4629      	mov	r1, r5
    7dec:	f242 0016 	movw	r0, #8214	; 0x2016
    7df0:	f7ff fc80 	bl	76f4 <bt_hci_cmd_send>
}
    7df4:	b004      	add	sp, #16
    7df6:	bd70      	pop	{r4, r5, r6, pc}
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    7df8:	210c      	movs	r1, #12
    7dfa:	4630      	mov	r0, r6
    7dfc:	f01f f91d 	bl	2703a <atomic_test_bit>
    7e00:	4d15      	ldr	r5, [pc, #84]	; (7e58 <conn_auto_initiate+0xac>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    7e02:	4601      	mov	r1, r0
    7e04:	b978      	cbnz	r0, 7e26 <conn_auto_initiate+0x7a>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    7e06:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    7e0a:	07d8      	lsls	r0, r3, #31
    7e0c:	d50b      	bpl.n	7e26 <conn_auto_initiate+0x7a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    7e0e:	2302      	movs	r3, #2
    7e10:	9100      	str	r1, [sp, #0]
    7e12:	461a      	mov	r2, r3
    7e14:	4620      	mov	r0, r4
    7e16:	f01f fbab 	bl	27570 <bt_le_set_phy>
		if (!err) {
    7e1a:	b920      	cbnz	r0, 7e26 <conn_auto_initiate+0x7a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7e1c:	2180      	movs	r1, #128	; 0x80
    7e1e:	4630      	mov	r0, r6
    7e20:	f01f f95f 	bl	270e2 <atomic_or>
			return;
    7e24:	e7e6      	b.n	7df4 <conn_auto_initiate+0x48>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    7e26:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    7e2a:	069a      	lsls	r2, r3, #26
    7e2c:	d5e2      	bpl.n	7df4 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    7e2e:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    7e32:	689b      	ldr	r3, [r3, #8]
    7e34:	079b      	lsls	r3, r3, #30
    7e36:	d5dd      	bpl.n	7df4 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    7e38:	f10d 010e 	add.w	r1, sp, #14
    7e3c:	a803      	add	r0, sp, #12
    7e3e:	f01f faef 	bl	27420 <hci_le_read_max_data_len>
			if (!err) {
    7e42:	2800      	cmp	r0, #0
    7e44:	d1d6      	bne.n	7df4 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
    7e46:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    7e4a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    7e4e:	4620      	mov	r0, r4
    7e50:	f01f fb71 	bl	27536 <bt_le_set_data_len>
		}
    7e54:	e7ce      	b.n	7df4 <conn_auto_initiate+0x48>
    7e56:	bf00      	nop
    7e58:	20000068 	.word	0x20000068

00007e5c <bt_id_add>:
{
    7e5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7e60:	4f4a      	ldr	r7, [pc, #296]	; (7f8c <bt_id_add+0x130>)
    7e62:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
    7e66:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
    7e6a:	4604      	mov	r4, r0
    7e6c:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    7e6e:	b10a      	cbz	r2, 7e74 <bt_id_add+0x18>
    7e70:	429a      	cmp	r2, r3
    7e72:	d209      	bcs.n	7e88 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
    7e74:	3301      	adds	r3, #1
    7e76:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    7e7a:	7a23      	ldrb	r3, [r4, #8]
    7e7c:	f043 0304 	orr.w	r3, r3, #4
    7e80:	7223      	strb	r3, [r4, #8]
}
    7e82:	b002      	add	sp, #8
    7e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    7e88:	2100      	movs	r1, #0
    7e8a:	2206      	movs	r2, #6
    7e8c:	4608      	mov	r0, r1
    7e8e:	f001 fad3 	bl	9438 <bt_conn_lookup_state_le>
	if (conn) {
    7e92:	4606      	mov	r6, r0
    7e94:	b168      	cbz	r0, 7eb2 <bt_id_add+0x56>
    7e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    7e9a:	f107 0098 	add.w	r0, r7, #152	; 0x98
    7e9e:	f01f f920 	bl	270e2 <atomic_or>
	keys->state |= flag;
    7ea2:	7a23      	ldrb	r3, [r4, #8]
    7ea4:	f043 0301 	orr.w	r3, r3, #1
    7ea8:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    7eaa:	4630      	mov	r0, r6
    7eac:	f01f fd6a 	bl	27984 <bt_conn_unref>
		return;
    7eb0:	e7e7      	b.n	7e82 <bt_id_add+0x26>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7eb2:	f107 0098 	add.w	r0, r7, #152	; 0x98
    7eb6:	f01f f8ba 	bl	2702e <atomic_get>
	func(&bt_dev.adv, data);
    7eba:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7ebc:	f3c0 1740 	ubfx	r7, r0, #5, #1
    7ec0:	f105 0018 	add.w	r0, r5, #24
    7ec4:	f01f fa87 	bl	273d6 <adv_pause_enabled>
	if (scan_enabled) {
    7ec8:	b117      	cbz	r7, 7ed0 <bt_id_add+0x74>
	return set_le_scan_enable_legacy(enable);
    7eca:	4630      	mov	r0, r6
    7ecc:	f7ff fd6a 	bl	79a4 <set_le_scan_enable_legacy>
	if (bt_dev.le.rl_entries) {
    7ed0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7ed4:	b9b3      	cbnz	r3, 7f04 <bt_id_add+0xa8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    7ed6:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
    7eda:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    7ede:	429a      	cmp	r2, r3
    7ee0:	d121      	bne.n	7f26 <bt_id_add+0xca>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    7ee2:	2200      	movs	r2, #0
    7ee4:	4611      	mov	r1, r2
    7ee6:	f242 0029 	movw	r0, #8233	; 0x2029
    7eea:	f7ff fc25 	bl	7738 <bt_hci_cmd_send_sync>
		if (err) {
    7eee:	b970      	cbnz	r0, 7f0e <bt_id_add+0xb2>
		bt_dev.le.rl_entries++;
    7ef0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7ef4:	3301      	adds	r3, #1
    7ef6:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    7efa:	7a23      	ldrb	r3, [r4, #8]
    7efc:	f043 0304 	orr.w	r3, r3, #4
    7f00:	7223      	strb	r3, [r4, #8]
		goto done;
    7f02:	e004      	b.n	7f0e <bt_id_add+0xb2>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    7f04:	2000      	movs	r0, #0
    7f06:	f01f faae 	bl	27466 <addr_res_enable>
		if (err) {
    7f0a:	2800      	cmp	r0, #0
    7f0c:	d0e3      	beq.n	7ed6 <bt_id_add+0x7a>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    7f0e:	2001      	movs	r0, #1
    7f10:	f01f faa9 	bl	27466 <addr_res_enable>
	if (scan_enabled) {
    7f14:	b117      	cbz	r7, 7f1c <bt_id_add+0xc0>
	return set_le_scan_enable_legacy(enable);
    7f16:	2001      	movs	r0, #1
    7f18:	f7ff fd44 	bl	79a4 <set_le_scan_enable_legacy>
	func(&bt_dev.adv, data);
    7f1c:	481c      	ldr	r0, [pc, #112]	; (7f90 <bt_id_add+0x134>)
    7f1e:	2100      	movs	r1, #0
    7f20:	f01f fa6e 	bl	27400 <adv_unpause_enabled>
}
    7f24:	e7ad      	b.n	7e82 <bt_id_add+0x26>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    7f26:	4622      	mov	r2, r4
    7f28:	f104 0801 	add.w	r8, r4, #1
    7f2c:	f812 0b2a 	ldrb.w	r0, [r2], #42
    7f30:	4641      	mov	r1, r8
    7f32:	f7ff fddb 	bl	7aec <hci_id_add>
	if (err) {
    7f36:	4606      	mov	r6, r0
    7f38:	2800      	cmp	r0, #0
    7f3a:	d1e8      	bne.n	7f0e <bt_id_add+0xb2>
	bt_dev.le.rl_entries++;
    7f3c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    7f40:	3301      	adds	r3, #1
    7f42:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
    7f46:	7a23      	ldrb	r3, [r4, #8]
    7f48:	f043 0304 	orr.w	r3, r3, #4
    7f4c:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    7f4e:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    7f52:	075b      	lsls	r3, r3, #29
    7f54:	d5db      	bpl.n	7f0e <bt_id_add+0xb2>
	bt_addr_le_copy(&cp.id_addr, addr);
    7f56:	4641      	mov	r1, r8
    7f58:	4668      	mov	r0, sp
    7f5a:	f01f f87b 	bl	27054 <bt_addr_le_copy>
	cp.mode = mode;
    7f5e:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    7f60:	2108      	movs	r1, #8
    7f62:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    7f66:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    7f6a:	f7ff fb8b 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    7f6e:	4604      	mov	r4, r0
    7f70:	2800      	cmp	r0, #0
    7f72:	d0cc      	beq.n	7f0e <bt_id_add+0xb2>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    7f74:	2208      	movs	r2, #8
    7f76:	4669      	mov	r1, sp
    7f78:	4410      	add	r0, r2
    7f7a:	f024 f894 	bl	2c0a6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    7f7e:	4632      	mov	r2, r6
    7f80:	4621      	mov	r1, r4
    7f82:	f242 004e 	movw	r0, #8270	; 0x204e
    7f86:	f7ff fbd7 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    7f8a:	e7c0      	b.n	7f0e <bt_id_add+0xb2>
    7f8c:	20000068 	.word	0x20000068
    7f90:	20000080 	.word	0x20000080

00007f94 <bt_id_del>:
{
    7f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    7f98:	4f43      	ldr	r7, [pc, #268]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
    7f9a:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
    7f9e:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
    7fa2:	4604      	mov	r4, r0
    7fa4:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
    7fa6:	b112      	cbz	r2, 7fae <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    7fa8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    7faa:	4293      	cmp	r3, r2
    7fac:	dd08      	ble.n	7fc0 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    7fae:	3b01      	subs	r3, #1
    7fb0:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    7fb4:	7a23      	ldrb	r3, [r4, #8]
    7fb6:	f023 0304 	bic.w	r3, r3, #4
    7fba:	7223      	strb	r3, [r4, #8]
}
    7fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    7fc0:	2100      	movs	r1, #0
    7fc2:	2206      	movs	r2, #6
    7fc4:	4608      	mov	r0, r1
    7fc6:	f001 fa37 	bl	9438 <bt_conn_lookup_state_le>
	if (conn) {
    7fca:	4606      	mov	r6, r0
    7fcc:	b170      	cbz	r0, 7fec <bt_id_del+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7fce:	f107 0098 	add.w	r0, r7, #152	; 0x98
    7fd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    7fd6:	f01f f884 	bl	270e2 <atomic_or>
	keys->state |= flag;
    7fda:	7a23      	ldrb	r3, [r4, #8]
    7fdc:	f043 0302 	orr.w	r3, r3, #2
    7fe0:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    7fe2:	4630      	mov	r0, r6
}
    7fe4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    7fe8:	f01f bccc 	b.w	27984 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7fec:	f107 0098 	add.w	r0, r7, #152	; 0x98
    7ff0:	f01f f81d 	bl	2702e <atomic_get>
	func(&bt_dev.adv, data);
    7ff4:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7ff6:	f3c0 1840 	ubfx	r8, r0, #5, #1
    7ffa:	f107 0018 	add.w	r0, r7, #24
    7ffe:	f01f f9ea 	bl	273d6 <adv_pause_enabled>
	if (scan_enabled) {
    8002:	f1b8 0f00 	cmp.w	r8, #0
    8006:	d002      	beq.n	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
	return set_le_scan_enable_legacy(enable);
    8008:	4630      	mov	r0, r6
    800a:	f7ff fccb 	bl	79a4 <set_le_scan_enable_legacy>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    800e:	2000      	movs	r0, #0
    8010:	f01f fa29 	bl	27466 <addr_res_enable>
	if (err) {
    8014:	4607      	mov	r7, r0
    8016:	b988      	cbnz	r0, 803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8018:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    801c:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    8020:	429a      	cmp	r2, r3
    8022:	d21d      	bcs.n	8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
		bt_dev.le.rl_entries--;
    8024:	3b01      	subs	r3, #1
    8026:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    802a:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    802c:	491f      	ldr	r1, [pc, #124]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    802e:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8032:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    8034:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8036:	2002      	movs	r0, #2
    8038:	f004 fa08 	bl	c44c <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    803c:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    8040:	b113      	cbz	r3, 8048 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x48>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    8042:	2001      	movs	r0, #1
    8044:	f01f fa0f 	bl	27466 <addr_res_enable>
	if (scan_enabled) {
    8048:	f1b8 0f00 	cmp.w	r8, #0
    804c:	d002      	beq.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
	return set_le_scan_enable_legacy(enable);
    804e:	2001      	movs	r0, #1
    8050:	f7ff fca8 	bl	79a4 <set_le_scan_enable_legacy>
}
    8054:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	func(&bt_dev.adv, data);
    8058:	4815      	ldr	r0, [pc, #84]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
    805a:	2100      	movs	r1, #0
    805c:	f01f b9d0 	b.w	27400 <adv_unpause_enabled>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    8060:	2107      	movs	r1, #7
    8062:	f242 0028 	movw	r0, #8232	; 0x2028
    8066:	f7ff fb0d 	bl	7684 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    806a:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    806e:	4606      	mov	r6, r0
    8070:	2800      	cmp	r0, #0
    8072:	d0e3      	beq.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
	cp = net_buf_add(buf, sizeof(*cp));
    8074:	2107      	movs	r1, #7
    8076:	3008      	adds	r0, #8
    8078:	f024 f80f 	bl	2c09a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    807c:	4649      	mov	r1, r9
    807e:	f01e ffe9 	bl	27054 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    8082:	463a      	mov	r2, r7
    8084:	4631      	mov	r1, r6
    8086:	f242 0028 	movw	r0, #8232	; 0x2028
    808a:	f7ff fb55 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    808e:	2800      	cmp	r0, #0
    8090:	d1d4      	bne.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
	bt_dev.le.rl_entries--;
    8092:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    8096:	3b01      	subs	r3, #1
    8098:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
    809c:	7a23      	ldrb	r3, [r4, #8]
    809e:	f023 0304 	bic.w	r3, r3, #4
    80a2:	7223      	strb	r3, [r4, #8]
    80a4:	e7ca      	b.n	803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>
    80a6:	bf00      	nop
    80a8:	20000068 	.word	0x20000068
    80ac:	00027451 	.word	0x00027451
    80b0:	20000080 	.word	0x20000080

000080b4 <bt_le_scan_update>:
{
    80b4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    80b6:	4809      	ldr	r0, [pc, #36]	; (80dc <bt_le_scan_update+0x28>)
    80b8:	f01e ffb9 	bl	2702e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    80bc:	0641      	lsls	r1, r0, #25
    80be:	f3c0 1380 	ubfx	r3, r0, #6, #1
    80c2:	d409      	bmi.n	80d8 <bt_le_scan_update+0x24>
    80c4:	4805      	ldr	r0, [pc, #20]	; (80dc <bt_le_scan_update+0x28>)
    80c6:	f01e ffb2 	bl	2702e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    80ca:	0682      	lsls	r2, r0, #26
    80cc:	d504      	bpl.n	80d8 <bt_le_scan_update+0x24>
	return set_le_scan_enable_legacy(enable);
    80ce:	4618      	mov	r0, r3
}
    80d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return set_le_scan_enable_legacy(enable);
    80d4:	f7ff bc66 	b.w	79a4 <set_le_scan_enable_legacy>
}
    80d8:	2000      	movs	r0, #0
    80da:	bd08      	pop	{r3, pc}
    80dc:	20000100 	.word	0x20000100

000080e0 <id_create>:
{
    80e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80e4:	4604      	mov	r4, r0
    80e6:	4828      	ldr	r0, [pc, #160]	; (8188 <id_create+0xa8>)
    80e8:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    80ec:	b086      	sub	sp, #24
    80ee:	4615      	mov	r5, r2
    80f0:	4407      	add	r7, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    80f2:	460e      	mov	r6, r1
    80f4:	4680      	mov	r8, r0
    80f6:	b361      	cbz	r1, 8152 <id_create+0x72>
    80f8:	2300      	movs	r3, #0
    80fa:	4669      	mov	r1, sp
    80fc:	4630      	mov	r0, r6
    80fe:	9300      	str	r3, [sp, #0]
    8100:	f8cd 3003 	str.w	r3, [sp, #3]
    8104:	f01e ffa0 	bl	27048 <bt_addr_le_cmp>
    8108:	b318      	cbz	r0, 8152 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    810a:	4631      	mov	r1, r6
    810c:	4638      	mov	r0, r7
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    810e:	f01e ffa1 	bl	27054 <bt_addr_le_copy>
		uint8_t zero_irk[16] = { 0 };
    8112:	2610      	movs	r6, #16
    8114:	2300      	movs	r3, #0
    8116:	fb06 8404 	mla	r4, r6, r4, r8
    811a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    811e:	e9cd 3304 	strd	r3, r3, [sp, #16]
		if (irk && memcmp(irk, zero_irk, 16)) {
    8122:	f504 7494 	add.w	r4, r4, #296	; 0x128
    8126:	b32d      	cbz	r5, 8174 <id_create+0x94>
    8128:	4632      	mov	r2, r6
    812a:	a902      	add	r1, sp, #8
    812c:	4628      	mov	r0, r5
    812e:	f01e fc28 	bl	26982 <memcmp>
    8132:	b1f8      	cbz	r0, 8174 <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
    8134:	4632      	mov	r2, r6
    8136:	4629      	mov	r1, r5
    8138:	4620      	mov	r0, r4
				memcpy(irk, &bt_dev.irk[id], 16);
    813a:	f01e fc32 	bl	269a2 <memcpy>
    813e:	4813      	ldr	r0, [pc, #76]	; (818c <id_create+0xac>)
    8140:	f01e ff75 	bl	2702e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    8144:	0783      	lsls	r3, r0, #30
    8146:	d501      	bpl.n	814c <id_create+0x6c>
		bt_settings_save_id();
    8148:	f7fe ff1c 	bl	6f84 <bt_settings_save_id>
}
    814c:	b006      	add	sp, #24
    814e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_addr_le_create_static(&new_addr);
    8152:	a802      	add	r0, sp, #8
    8154:	f01f fa9d 	bl	27692 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    8158:	a802      	add	r0, sp, #8
    815a:	f7fe ffb1 	bl	70c0 <id_find>
    815e:	2800      	cmp	r0, #0
    8160:	daf7      	bge.n	8152 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8162:	a902      	add	r1, sp, #8
    8164:	4638      	mov	r0, r7
    8166:	f01e ff75 	bl	27054 <bt_addr_le_copy>
		if (addr) {
    816a:	2e00      	cmp	r6, #0
    816c:	d0d1      	beq.n	8112 <id_create+0x32>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    816e:	4639      	mov	r1, r7
    8170:	4630      	mov	r0, r6
    8172:	e7cc      	b.n	810e <id_create+0x2e>
			bt_rand(&bt_dev.irk[id], 16);
    8174:	2110      	movs	r1, #16
    8176:	4620      	mov	r0, r4
    8178:	f00d fecc 	bl	15f14 <bt_rand>
			if (irk) {
    817c:	2d00      	cmp	r5, #0
    817e:	d0de      	beq.n	813e <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
    8180:	2210      	movs	r2, #16
    8182:	4621      	mov	r1, r4
    8184:	4628      	mov	r0, r5
    8186:	e7d8      	b.n	813a <id_create+0x5a>
    8188:	20000068 	.word	0x20000068
    818c:	20000100 	.word	0x20000100

00008190 <hci_event_prio>:
{
    8190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8194:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    8196:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    819a:	4630      	mov	r0, r6
    819c:	f024 f825 	bl	2c1ea <net_buf_simple_headroom>
	state->len = buf->len;
    81a0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    81a4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    81a8:	4605      	mov	r5, r0
    81aa:	d80c      	bhi.n	81c6 <hci_event_prio+0x36>
    81ac:	4a1c      	ldr	r2, [pc, #112]	; (8220 <hci_event_prio+0x90>)
    81ae:	491d      	ldr	r1, [pc, #116]	; (8224 <hci_event_prio+0x94>)
    81b0:	481d      	ldr	r0, [pc, #116]	; (8228 <hci_event_prio+0x98>)
    81b2:	f641 03cc 	movw	r3, #6348	; 0x18cc
    81b6:	f01c f97d 	bl	244b4 <printk>
    81ba:	4040      	eors	r0, r0
    81bc:	f380 8811 	msr	BASEPRI, r0
    81c0:	f04f 0003 	mov.w	r0, #3
    81c4:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    81c6:	2102      	movs	r1, #2
    81c8:	4630      	mov	r0, r6
    81ca:	f023 ffe2 	bl	2c192 <net_buf_simple_pull_mem>
    81ce:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    81d0:	7800      	ldrb	r0, [r0, #0]
    81d2:	f01e fee7 	bl	26fa4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    81d6:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    81d8:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    81da:	d40c      	bmi.n	81f6 <hci_event_prio+0x66>
    81dc:	4a10      	ldr	r2, [pc, #64]	; (8220 <hci_event_prio+0x90>)
    81de:	4913      	ldr	r1, [pc, #76]	; (822c <hci_event_prio+0x9c>)
    81e0:	4811      	ldr	r0, [pc, #68]	; (8228 <hci_event_prio+0x98>)
    81e2:	f641 03d0 	movw	r3, #6352	; 0x18d0
    81e6:	f01c f965 	bl	244b4 <printk>
    81ea:	4040      	eors	r0, r0
    81ec:	f380 8811 	msr	BASEPRI, r0
    81f0:	f04f 0003 	mov.w	r0, #3
    81f4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    81f6:	2305      	movs	r3, #5
    81f8:	4a0d      	ldr	r2, [pc, #52]	; (8230 <hci_event_prio+0xa0>)
    81fa:	7838      	ldrb	r0, [r7, #0]
    81fc:	4621      	mov	r1, r4
    81fe:	f01e fee3 	bl	26fc8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    8202:	07b3      	lsls	r3, r6, #30
    8204:	d507      	bpl.n	8216 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    8206:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8208:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    820c:	fa10 f585 	uxtah	r5, r0, r5
    8210:	60a5      	str	r5, [r4, #8]
}
    8212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    8216:	4620      	mov	r0, r4
}
    8218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    821c:	f017 bdb6 	b.w	1fd8c <net_buf_unref>
    8220:	00033281 	.word	0x00033281
    8224:	000332ff 	.word	0x000332ff
    8228:	000332be 	.word	0x000332be
    822c:	00033318 	.word	0x00033318
    8230:	0002e0b0 	.word	0x0002e0b0

00008234 <bt_recv>:
{
    8234:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    8236:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    8238:	2b01      	cmp	r3, #1
{
    823a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    823c:	d036      	beq.n	82ac <bt_recv+0x78>
    823e:	2b03      	cmp	r3, #3
    8240:	d163      	bne.n	830a <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8242:	8983      	ldrh	r3, [r0, #12]
    8244:	2b03      	cmp	r3, #3
    8246:	d80c      	bhi.n	8262 <bt_recv+0x2e>
    8248:	4a32      	ldr	r2, [pc, #200]	; (8314 <bt_recv+0xe0>)
    824a:	4933      	ldr	r1, [pc, #204]	; (8318 <bt_recv+0xe4>)
    824c:	4833      	ldr	r0, [pc, #204]	; (831c <bt_recv+0xe8>)
    824e:	f240 530a 	movw	r3, #1290	; 0x50a
    8252:	f01c f92f 	bl	244b4 <printk>
    8256:	4040      	eors	r0, r0
    8258:	f380 8811 	msr	BASEPRI, r0
    825c:	f04f 0003 	mov.w	r0, #3
    8260:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8262:	2104      	movs	r1, #4
    8264:	f104 0008 	add.w	r0, r4, #8
    8268:	f023 ff93 	bl	2c192 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    826c:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    826e:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    8270:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8272:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    8274:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    8276:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    827a:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    827c:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    827e:	d003      	beq.n	8288 <bt_recv+0x54>
	net_buf_unref(buf);
    8280:	4620      	mov	r0, r4
    8282:	f017 fd83 	bl	1fd8c <net_buf_unref>
    8286:	e00f      	b.n	82a8 <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    8288:	f001 f8b2 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
    828c:	4605      	mov	r5, r0
    828e:	2800      	cmp	r0, #0
    8290:	d0f6      	beq.n	8280 <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    8292:	f001 fad7 	bl	9844 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    8296:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    8298:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    829a:	4621      	mov	r1, r4
    829c:	4628      	mov	r0, r5
    829e:	f01f fae9 	bl	27874 <bt_conn_recv>
	bt_conn_unref(conn);
    82a2:	4628      	mov	r0, r5
    82a4:	f01f fb6e 	bl	27984 <bt_conn_unref>
		return 0;
    82a8:	2000      	movs	r0, #0
}
    82aa:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    82ac:	8983      	ldrh	r3, [r0, #12]
    82ae:	2b01      	cmp	r3, #1
    82b0:	d80c      	bhi.n	82cc <bt_recv+0x98>
    82b2:	4a18      	ldr	r2, [pc, #96]	; (8314 <bt_recv+0xe0>)
    82b4:	4918      	ldr	r1, [pc, #96]	; (8318 <bt_recv+0xe4>)
    82b6:	4819      	ldr	r0, [pc, #100]	; (831c <bt_recv+0xe8>)
    82b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    82bc:	f01c f8fa 	bl	244b4 <printk>
    82c0:	4040      	eors	r0, r0
    82c2:	f380 8811 	msr	BASEPRI, r0
    82c6:	f04f 0003 	mov.w	r0, #3
    82ca:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    82cc:	2102      	movs	r1, #2
    82ce:	f104 0008 	add.w	r0, r4, #8
    82d2:	f023 ff5e 	bl	2c192 <net_buf_simple_pull_mem>
    82d6:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    82d8:	7800      	ldrb	r0, [r0, #0]
    82da:	f01e fe63 	bl	26fa4 <bt_hci_evt_get_flags>
    82de:	0783      	lsls	r3, r0, #30
    82e0:	d40c      	bmi.n	82fc <bt_recv+0xc8>
    82e2:	4a0c      	ldr	r2, [pc, #48]	; (8314 <bt_recv+0xe0>)
    82e4:	490e      	ldr	r1, [pc, #56]	; (8320 <bt_recv+0xec>)
    82e6:	480d      	ldr	r0, [pc, #52]	; (831c <bt_recv+0xe8>)
    82e8:	f241 4304 	movw	r3, #5124	; 0x1404
    82ec:	f01c f8e2 	bl	244b4 <printk>
    82f0:	4040      	eors	r0, r0
    82f2:	f380 8811 	msr	BASEPRI, r0
    82f6:	f04f 0003 	mov.w	r0, #3
    82fa:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    82fc:	4a09      	ldr	r2, [pc, #36]	; (8324 <bt_recv+0xf0>)
    82fe:	7828      	ldrb	r0, [r5, #0]
    8300:	2306      	movs	r3, #6
    8302:	4621      	mov	r1, r4
    8304:	f01e fe60 	bl	26fc8 <handle_event>
    8308:	e7ba      	b.n	8280 <bt_recv+0x4c>
		net_buf_unref(buf);
    830a:	f017 fd3f 	bl	1fd8c <net_buf_unref>
		return -EINVAL;
    830e:	f06f 0015 	mvn.w	r0, #21
    8312:	e7ca      	b.n	82aa <bt_recv+0x76>
    8314:	00033281 	.word	0x00033281
    8318:	000332ff 	.word	0x000332ff
    831c:	000332be 	.word	0x000332be
    8320:	00033331 	.word	0x00033331
    8324:	0002e080 	.word	0x0002e080

00008328 <bt_recv_prio>:
{
    8328:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    832a:	7d03      	ldrb	r3, [r0, #20]
    832c:	2b01      	cmp	r3, #1
{
    832e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8330:	d00c      	beq.n	834c <bt_recv_prio+0x24>
    8332:	4a09      	ldr	r2, [pc, #36]	; (8358 <bt_recv_prio+0x30>)
    8334:	4909      	ldr	r1, [pc, #36]	; (835c <bt_recv_prio+0x34>)
    8336:	480a      	ldr	r0, [pc, #40]	; (8360 <bt_recv_prio+0x38>)
    8338:	f641 1313 	movw	r3, #6419	; 0x1913
    833c:	f01c f8ba 	bl	244b4 <printk>
    8340:	4040      	eors	r0, r0
    8342:	f380 8811 	msr	BASEPRI, r0
    8346:	f04f 0003 	mov.w	r0, #3
    834a:	df02      	svc	2
	hci_event_prio(buf);
    834c:	4620      	mov	r0, r4
    834e:	f7ff ff1f 	bl	8190 <hci_event_prio>
}
    8352:	2000      	movs	r0, #0
    8354:	bd10      	pop	{r4, pc}
    8356:	bf00      	nop
    8358:	00033281 	.word	0x00033281
    835c:	0003335f 	.word	0x0003335f
    8360:	000332be 	.word	0x000332be

00008364 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    8364:	4a08      	ldr	r2, [pc, #32]	; (8388 <bt_hci_driver_register+0x24>)
{
    8366:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    8368:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    836c:	b930      	cbnz	r0, 837c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    836e:	68d9      	ldr	r1, [r3, #12]
    8370:	b139      	cbz	r1, 8382 <bt_hci_driver_register+0x1e>
    8372:	6919      	ldr	r1, [r3, #16]
    8374:	b129      	cbz	r1, 8382 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    8376:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    837a:	4770      	bx	lr
		return -EALREADY;
    837c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    8380:	4770      	bx	lr
		return -EINVAL;
    8382:	f06f 0015 	mvn.w	r0, #21
}
    8386:	4770      	bx	lr
    8388:	20000068 	.word	0x20000068

0000838c <bt_finalize_init>:
{
    838c:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    838e:	4804      	ldr	r0, [pc, #16]	; (83a0 <bt_finalize_init+0x14>)
    8390:	2102      	movs	r1, #2
    8392:	f01e fea6 	bl	270e2 <atomic_or>
}
    8396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    839a:	2000      	movs	r0, #0
    839c:	f7ff be8a 	b.w	80b4 <bt_le_scan_update>
    83a0:	20000100 	.word	0x20000100

000083a4 <init_work>:
{
    83a4:	b510      	push	{r4, lr}
	err = bt_init();
    83a6:	f7f8 f88b 	bl	4c0 <bt_init>
	if (ready_cb) {
    83aa:	4b03      	ldr	r3, [pc, #12]	; (83b8 <init_work+0x14>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	b113      	cbz	r3, 83b6 <init_work+0x12>
}
    83b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    83b4:	4718      	bx	r3
}
    83b6:	bd10      	pop	{r4, pc}
    83b8:	200021e4 	.word	0x200021e4

000083bc <bt_enable>:
{
    83bc:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    83be:	4d26      	ldr	r5, [pc, #152]	; (8458 <bt_enable+0x9c>)
    83c0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    83c4:	b088      	sub	sp, #32
    83c6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    83c8:	2b00      	cmp	r3, #0
    83ca:	d03e      	beq.n	844a <bt_enable+0x8e>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    83cc:	2100      	movs	r1, #0
    83ce:	f105 0098 	add.w	r0, r5, #152	; 0x98
    83d2:	f01e fe95 	bl	27100 <atomic_test_and_set_bit>
    83d6:	2800      	cmp	r0, #0
    83d8:	d13a      	bne.n	8450 <bt_enable+0x94>
		err = bt_settings_init();
    83da:	f01e fbe2 	bl	26ba2 <bt_settings_init>
		if (err) {
    83de:	4604      	mov	r4, r0
    83e0:	bb80      	cbnz	r0, 8444 <bt_enable+0x88>
	ready_cb = cb;
    83e2:	4b1e      	ldr	r3, [pc, #120]	; (845c <bt_enable+0xa0>)
    83e4:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    83e6:	2200      	movs	r2, #0
    83e8:	2300      	movs	r3, #0
    83ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    83ee:	f06f 0308 	mvn.w	r3, #8
    83f2:	e9cd 0302 	strd	r0, r3, [sp, #8]
    83f6:	e9cd 0000 	strd	r0, r0, [sp]
    83fa:	9004      	str	r0, [sp, #16]
    83fc:	4b18      	ldr	r3, [pc, #96]	; (8460 <bt_enable+0xa4>)
    83fe:	4919      	ldr	r1, [pc, #100]	; (8464 <bt_enable+0xa8>)
    8400:	4819      	ldr	r0, [pc, #100]	; (8468 <bt_enable+0xac>)
    8402:	f44f 7220 	mov.w	r2, #640	; 0x280
    8406:	f01b fbed 	bl	23be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    840a:	4918      	ldr	r1, [pc, #96]	; (846c <bt_enable+0xb0>)
    840c:	4816      	ldr	r0, [pc, #88]	; (8468 <bt_enable+0xac>)
    840e:	f025 f863 	bl	2d4d8 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    8412:	f7fe fce3 	bl	6ddc <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    8416:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    841a:	68db      	ldr	r3, [r3, #12]
    841c:	4798      	blx	r3
	if (err) {
    841e:	4604      	mov	r4, r0
    8420:	b980      	cbnz	r0, 8444 <bt_enable+0x88>
	if (!cb) {
    8422:	b926      	cbnz	r6, 842e <bt_enable+0x72>
}
    8424:	b008      	add	sp, #32
    8426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    842a:	f7f8 b849 	b.w	4c0 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    842e:	4601      	mov	r1, r0
    8430:	f105 0094 	add.w	r0, r5, #148	; 0x94
    8434:	f01e fe64 	bl	27100 <atomic_test_and_set_bit>
    8438:	b920      	cbnz	r0, 8444 <bt_enable+0x88>
		k_queue_append(&work_q->queue, work);
    843a:	480d      	ldr	r0, [pc, #52]	; (8470 <bt_enable+0xb4>)
    843c:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    8440:	f024 ff0b 	bl	2d25a <k_queue_append>
}
    8444:	4620      	mov	r0, r4
    8446:	b008      	add	sp, #32
    8448:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    844a:	f06f 0412 	mvn.w	r4, #18
    844e:	e7f9      	b.n	8444 <bt_enable+0x88>
		return -EALREADY;
    8450:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8454:	e7f6      	b.n	8444 <bt_enable+0x88>
    8456:	bf00      	nop
    8458:	20000068 	.word	0x20000068
    845c:	200021e4 	.word	0x200021e4
    8460:	00007535 	.word	0x00007535
    8464:	20009800 	.word	0x20009800
    8468:	200010b0 	.word	0x200010b0
    846c:	00033382 	.word	0x00033382
    8470:	20001fd8 	.word	0x20001fd8

00008474 <bt_set_name>:
{
    8474:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8476:	4605      	mov	r5, r0
	size_t len = strlen(name);
    8478:	f01e fa58 	bl	2692c <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    847c:	2820      	cmp	r0, #32
	size_t len = strlen(name);
    847e:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    8480:	d82d      	bhi.n	84de <bt_set_name+0x6a>
	if (!strcmp(bt_dev.name, name)) {
    8482:	4e18      	ldr	r6, [pc, #96]	; (84e4 <bt_set_name+0x70>)
    8484:	4629      	mov	r1, r5
    8486:	f506 70b4 	add.w	r0, r6, #360	; 0x168
    848a:	f01e fa56 	bl	2693a <strcmp>
    848e:	b320      	cbz	r0, 84da <bt_set_name+0x66>
	strncpy(bt_dev.name, name, len);
    8490:	4622      	mov	r2, r4
    8492:	4629      	mov	r1, r5
    8494:	f506 70b4 	add.w	r0, r6, #360	; 0x168
    8498:	f01e fa27 	bl	268ea <strncpy>
	bt_dev.name[len] = '\0';
    849c:	1933      	adds	r3, r6, r4
    849e:	2200      	movs	r2, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    84a0:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    84a4:	f883 2168 	strb.w	r2, [r3, #360]	; 0x168
    84a8:	f01e fdc1 	bl	2702e <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    84ac:	0603      	lsls	r3, r0, #24
    84ae:	d50e      	bpl.n	84ce <bt_set_name+0x5a>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    84b0:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    84b2:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    84b4:	a902      	add	r1, sp, #8
    84b6:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    84ba:	f88d 3000 	strb.w	r3, [sp]
    84be:	f88d 4001 	strb.w	r4, [sp, #1]
    84c2:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    84c4:	f8cd d008 	str.w	sp, [sp, #8]
    84c8:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    84ca:	f01e ffe4 	bl	27496 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    84ce:	4906      	ldr	r1, [pc, #24]	; (84e8 <bt_set_name+0x74>)
    84d0:	4806      	ldr	r0, [pc, #24]	; (84ec <bt_set_name+0x78>)
    84d2:	4622      	mov	r2, r4
    84d4:	f7fc ff24 	bl	5320 <settings_save_one>
	return 0;
    84d8:	2000      	movs	r0, #0
}
    84da:	b004      	add	sp, #16
    84dc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    84de:	f06f 000b 	mvn.w	r0, #11
    84e2:	e7fa      	b.n	84da <bt_set_name+0x66>
    84e4:	20000068 	.word	0x20000068
    84e8:	200001d0 	.word	0x200001d0
    84ec:	00033388 	.word	0x00033388

000084f0 <bt_get_name>:
}
    84f0:	4800      	ldr	r0, [pc, #0]	; (84f4 <bt_get_name+0x4>)
    84f2:	4770      	bx	lr
    84f4:	200001d0 	.word	0x200001d0

000084f8 <bt_id_create>:
{
    84f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    84fa:	460e      	mov	r6, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    84fc:	4605      	mov	r5, r0
    84fe:	b930      	cbnz	r0, 850e <bt_id_create+0x16>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    8500:	4b16      	ldr	r3, [pc, #88]	; (855c <bt_id_create+0x64>)
    8502:	79dc      	ldrb	r4, [r3, #7]
    8504:	2c01      	cmp	r4, #1
    8506:	d120      	bne.n	854a <bt_id_create+0x52>
		return -ENOMEM;
    8508:	f06f 040b 	mvn.w	r4, #11
    850c:	e017      	b.n	853e <bt_id_create+0x46>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    850e:	2300      	movs	r3, #0
    8510:	4669      	mov	r1, sp
    8512:	9300      	str	r3, [sp, #0]
    8514:	f8cd 3003 	str.w	r3, [sp, #3]
    8518:	f01e fd96 	bl	27048 <bt_addr_le_cmp>
    851c:	2800      	cmp	r0, #0
    851e:	d0ef      	beq.n	8500 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    8520:	782b      	ldrb	r3, [r5, #0]
    8522:	2b01      	cmp	r3, #1
    8524:	d10e      	bne.n	8544 <bt_id_create+0x4c>
    8526:	79ab      	ldrb	r3, [r5, #6]
    8528:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    852c:	2bc0      	cmp	r3, #192	; 0xc0
    852e:	d109      	bne.n	8544 <bt_id_create+0x4c>
		if (id_find(addr) >= 0) {
    8530:	4628      	mov	r0, r5
    8532:	f7fe fdc5 	bl	70c0 <id_find>
    8536:	2800      	cmp	r0, #0
    8538:	dbe2      	blt.n	8500 <bt_id_create+0x8>
			return -EALREADY;
    853a:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    853e:	4620      	mov	r0, r4
    8540:	b002      	add	sp, #8
    8542:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    8544:	f06f 0415 	mvn.w	r4, #21
    8548:	e7f9      	b.n	853e <bt_id_create+0x46>
	new_id = bt_dev.id_count++;
    854a:	1c62      	adds	r2, r4, #1
    854c:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    854e:	4629      	mov	r1, r5
    8550:	4632      	mov	r2, r6
    8552:	4620      	mov	r0, r4
    8554:	f7ff fdc4 	bl	80e0 <id_create>
	return new_id;
    8558:	e7f1      	b.n	853e <bt_id_create+0x46>
    855a:	bf00      	nop
    855c:	20000068 	.word	0x20000068

00008560 <bt_setup_public_id_addr>:
{
    8560:	b570      	push	{r4, r5, r6, lr}
    8562:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    8564:	aa01      	add	r2, sp, #4
    8566:	2100      	movs	r1, #0
    8568:	f241 0009 	movw	r0, #4105	; 0x1009
    856c:	f7ff f8e4 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    8570:	4e2d      	ldr	r6, [pc, #180]	; (8628 <bt_setup_public_id_addr+0xc8>)
    8572:	4604      	mov	r4, r0
    8574:	b118      	cbz	r0, 857e <bt_setup_public_id_addr+0x1e>
	bt_dev.id_count = bt_read_public_addr(&addr);
    8576:	2300      	movs	r3, #0
    8578:	71f3      	strb	r3, [r6, #7]
}
    857a:	b00c      	add	sp, #48	; 0x30
    857c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    857e:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8580:	689d      	ldr	r5, [r3, #8]
    8582:	9008      	str	r0, [sp, #32]
    8584:	3501      	adds	r5, #1
    8586:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    858a:	2206      	movs	r2, #6
    858c:	a908      	add	r1, sp, #32
    858e:	4628      	mov	r0, r5
    8590:	f01e f9f7 	bl	26982 <memcmp>
    8594:	b918      	cbnz	r0, 859e <bt_setup_public_id_addr+0x3e>
		net_buf_unref(rsp);
    8596:	9801      	ldr	r0, [sp, #4]
    8598:	f017 fbf8 	bl	1fd8c <net_buf_unref>
    859c:	e7eb      	b.n	8576 <bt_setup_public_id_addr+0x16>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    859e:	4b23      	ldr	r3, [pc, #140]	; (862c <bt_setup_public_id_addr+0xcc>)
    85a0:	6818      	ldr	r0, [r3, #0]
    85a2:	9004      	str	r0, [sp, #16]
    85a4:	889b      	ldrh	r3, [r3, #4]
    85a6:	f8ad 3014 	strh.w	r3, [sp, #20]
    85aa:	2206      	movs	r2, #6
    85ac:	a904      	add	r1, sp, #16
    85ae:	4628      	mov	r0, r5
    85b0:	f01e f9e7 	bl	26982 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    85b4:	2800      	cmp	r0, #0
    85b6:	d0ee      	beq.n	8596 <bt_setup_public_id_addr+0x36>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    85b8:	4629      	mov	r1, r5
    85ba:	f10d 0009 	add.w	r0, sp, #9
    85be:	f01e fd46 	bl	2704e <bt_addr_copy>
	net_buf_unref(rsp);
    85c2:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    85c4:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    85c8:	f017 fbe0 	bl	1fd8c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    85cc:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    85ce:	2210      	movs	r2, #16
    85d0:	4621      	mov	r1, r4
    85d2:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    85d4:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    85d6:	f01e fa0f 	bl	269f8 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    85da:	f896 308a 	ldrb.w	r3, [r6, #138]	; 0x8a
    85de:	079b      	lsls	r3, r3, #30
    85e0:	d510      	bpl.n	8604 <bt_setup_public_id_addr+0xa4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    85e2:	aa04      	add	r2, sp, #16
    85e4:	4621      	mov	r1, r4
    85e6:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    85ea:	f7ff f8a5 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    85ee:	b948      	cbnz	r0, 8604 <bt_setup_public_id_addr+0xa4>
	rp = (void *)rsp->data;
    85f0:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    85f2:	6899      	ldr	r1, [r3, #8]
    85f4:	2210      	movs	r2, #16
    85f6:	3101      	adds	r1, #1
    85f8:	a808      	add	r0, sp, #32
    85fa:	f01e f9d2 	bl	269a2 <memcpy>
	net_buf_unref(rsp);
    85fe:	9804      	ldr	r0, [sp, #16]
    8600:	f017 fbc4 	bl	1fd8c <net_buf_unref>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    8604:	a904      	add	r1, sp, #16
    8606:	a808      	add	r0, sp, #32
    8608:	f021 f85a 	bl	296c0 <bt_smp_irk_get>
    860c:	b150      	cbz	r0, 8624 <bt_setup_public_id_addr+0xc4>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    860e:	4808      	ldr	r0, [pc, #32]	; (8630 <bt_setup_public_id_addr+0xd0>)
    8610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8614:	f01e fd65 	bl	270e2 <atomic_or>
	uint8_t *irk = NULL;
    8618:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    861a:	a902      	add	r1, sp, #8
    861c:	2000      	movs	r0, #0
    861e:	f7ff fd5f 	bl	80e0 <id_create>
    8622:	e7aa      	b.n	857a <bt_setup_public_id_addr+0x1a>
		irk = ir_irk;
    8624:	aa04      	add	r2, sp, #16
    8626:	e7f8      	b.n	861a <bt_setup_public_id_addr+0xba>
    8628:	20000068 	.word	0x20000068
    862c:	0002dcf3 	.word	0x0002dcf3
    8630:	20000100 	.word	0x20000100

00008634 <bt_read_static_addr>:
{
    8634:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    8638:	4b15      	ldr	r3, [pc, #84]	; (8690 <bt_read_static_addr+0x5c>)
    863a:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    863e:	f014 0401 	ands.w	r4, r4, #1
{
    8642:	4607      	mov	r7, r0
    8644:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    8646:	d015      	beq.n	8674 <bt_read_static_addr+0x40>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    8648:	aa01      	add	r2, sp, #4
    864a:	2100      	movs	r1, #0
    864c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    8650:	f7ff f872 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    8654:	4605      	mov	r5, r0
    8656:	b9c8      	cbnz	r0, 868c <bt_read_static_addr+0x58>
	rp = (void *)rsp->data;
    8658:	9b01      	ldr	r3, [sp, #4]
    865a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    865c:	785c      	ldrb	r4, [r3, #1]
    865e:	42b4      	cmp	r4, r6
    8660:	bf28      	it	cs
    8662:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    8664:	f04f 0816 	mov.w	r8, #22
    8668:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    866a:	42a5      	cmp	r5, r4
    866c:	db06      	blt.n	867c <bt_read_static_addr+0x48>
	net_buf_unref(rsp);
    866e:	9801      	ldr	r0, [sp, #4]
    8670:	f017 fb8c 	bl	1fd8c <net_buf_unref>
}
    8674:	4620      	mov	r0, r4
    8676:	b002      	add	sp, #8
    8678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    867c:	fb08 7005 	mla	r0, r8, r5, r7
    8680:	2216      	movs	r2, #22
    8682:	4631      	mov	r1, r6
    8684:	f01e f98d 	bl	269a2 <memcpy>
	for (i = 0; i < cnt; i++) {
    8688:	3501      	adds	r5, #1
    868a:	e7ee      	b.n	866a <bt_read_static_addr+0x36>
		return 0;
    868c:	2400      	movs	r4, #0
    868e:	e7f1      	b.n	8674 <bt_read_static_addr+0x40>
    8690:	20000068 	.word	0x20000068

00008694 <bt_setup_random_id_addr>:
{
    8694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    8698:	4c21      	ldr	r4, [pc, #132]	; (8720 <bt_setup_random_id_addr+0x8c>)
    869a:	79e5      	ldrb	r5, [r4, #7]
{
    869c:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    869e:	bba5      	cbnz	r5, 870a <bt_setup_random_id_addr+0x76>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    86a0:	2101      	movs	r1, #1
    86a2:	a806      	add	r0, sp, #24
    86a4:	f7ff ffc6 	bl	8634 <bt_read_static_addr>
    86a8:	71e0      	strb	r0, [r4, #7]
		if (bt_dev.id_count) {
    86aa:	b370      	cbz	r0, 870a <bt_setup_random_id_addr+0x76>
    86ac:	f04f 0916 	mov.w	r9, #22
    86b0:	f104 0a98 	add.w	sl, r4, #152	; 0x98
    86b4:	e01f      	b.n	86f6 <bt_setup_random_id_addr+0x62>
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    86b6:	fb09 f806 	mul.w	r8, r9, r6
    86ba:	f108 0006 	add.w	r0, r8, #6
    86be:	ab06      	add	r3, sp, #24
    86c0:	a902      	add	r1, sp, #8
    86c2:	4418      	add	r0, r3
    86c4:	f020 fffc 	bl	296c0 <bt_smp_irk_get>
    86c8:	b1e8      	cbz	r0, 8706 <bt_setup_random_id_addr+0x72>
    86ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    86ce:	4650      	mov	r0, sl
    86d0:	f01e fd07 	bl	270e2 <atomic_or>
				uint8_t *irk = NULL;
    86d4:	2700      	movs	r7, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    86d6:	ab06      	add	r3, sp, #24
    86d8:	eb03 0108 	add.w	r1, r3, r8
    86dc:	f10d 0001 	add.w	r0, sp, #1
    86e0:	f01e fcb5 	bl	2704e <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    86e4:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    86e6:	463a      	mov	r2, r7
    86e8:	4669      	mov	r1, sp
    86ea:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    86ec:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    86f0:	f7ff fcf6 	bl	80e0 <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    86f4:	3501      	adds	r5, #1
    86f6:	79e3      	ldrb	r3, [r4, #7]
    86f8:	b2ee      	uxtb	r6, r5
    86fa:	42b3      	cmp	r3, r6
    86fc:	d8db      	bhi.n	86b6 <bt_setup_random_id_addr+0x22>
			return 0;
    86fe:	2000      	movs	r0, #0
}
    8700:	b00c      	add	sp, #48	; 0x30
    8702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
    8706:	af02      	add	r7, sp, #8
    8708:	e7e5      	b.n	86d6 <bt_setup_random_id_addr+0x42>
    870a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    870e:	4805      	ldr	r0, [pc, #20]	; (8724 <bt_setup_random_id_addr+0x90>)
    8710:	f01e fce7 	bl	270e2 <atomic_or>
	return bt_id_create(NULL, NULL);
    8714:	2100      	movs	r1, #0
    8716:	4608      	mov	r0, r1
    8718:	f7ff feee 	bl	84f8 <bt_id_create>
    871c:	e7f0      	b.n	8700 <bt_setup_random_id_addr+0x6c>
    871e:	bf00      	nop
    8720:	20000068 	.word	0x20000068
    8724:	20000100 	.word	0x20000100

00008728 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    8728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    872c:	b08d      	sub	sp, #52	; 0x34
    872e:	4605      	mov	r5, r0
    8730:	469a      	mov	sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8732:	4889      	ldr	r0, [pc, #548]	; (8958 <bt_le_adv_start_legacy+0x230>)
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    8734:	690e      	ldr	r6, [r1, #16]
	struct bt_conn *conn = NULL;
    8736:	2300      	movs	r3, #0
{
    8738:	460c      	mov	r4, r1
    873a:	4691      	mov	r9, r2
	struct bt_conn *conn = NULL;
    873c:	9305      	str	r3, [sp, #20]
    873e:	f01e fc76 	bl	2702e <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8742:	0780      	lsls	r0, r0, #30
    8744:	f140 80ff 	bpl.w	8946 <bt_le_adv_start_legacy+0x21e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    8748:	4608      	mov	r0, r1
    874a:	f7fe fcd1 	bl	70f0 <valid_adv_param>
    874e:	4607      	mov	r7, r0
    8750:	b928      	cbnz	r0, 875e <bt_le_adv_start_legacy+0x36>
		return -EINVAL;
    8752:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    8756:	4658      	mov	r0, fp
    8758:	b00d      	add	sp, #52	; 0x34
    875a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    875e:	487e      	ldr	r0, [pc, #504]	; (8958 <bt_le_adv_start_legacy+0x230>)
    8760:	f01e fc65 	bl	2702e <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    8764:	0501      	lsls	r1, r0, #20
    8766:	d505      	bpl.n	8774 <bt_le_adv_start_legacy+0x4c>
		if (((param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
    8768:	6862      	ldr	r2, [r4, #4]
    876a:	7823      	ldrb	r3, [r4, #0]
    876c:	0752      	lsls	r2, r2, #29
    876e:	d411      	bmi.n	8794 <bt_le_adv_start_legacy+0x6c>
		     bt_dev.id_addr[param->id].type == BT_ADDR_LE_RANDOM) ||
    8770:	b12b      	cbz	r3, 877e <bt_le_adv_start_legacy+0x56>
    8772:	e7ee      	b.n	8752 <bt_le_adv_start_legacy+0x2a>
    8774:	4878      	ldr	r0, [pc, #480]	; (8958 <bt_le_adv_start_legacy+0x230>)
    8776:	f01e fc5a 	bl	2702e <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    877a:	0680      	lsls	r0, r0, #26
    877c:	d4f4      	bmi.n	8768 <bt_le_adv_start_legacy+0x40>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    877e:	f105 0814 	add.w	r8, r5, #20
    8782:	2106      	movs	r1, #6
    8784:	4640      	mov	r0, r8
    8786:	f01e fc58 	bl	2703a <atomic_test_bit>
    878a:	4683      	mov	fp, r0
    878c:	b148      	cbz	r0, 87a2 <bt_le_adv_start_legacy+0x7a>
		return -EALREADY;
    878e:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    8792:	e7e0      	b.n	8756 <bt_le_adv_start_legacy+0x2e>
		if (((param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
    8794:	4971      	ldr	r1, [pc, #452]	; (895c <bt_le_adv_start_legacy+0x234>)
		     bt_dev.id_addr[param->id].type == BT_ADDR_LE_RANDOM) ||
    8796:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
		if (((param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
    879a:	5c8a      	ldrb	r2, [r1, r2]
    879c:	2a01      	cmp	r2, #1
    879e:	d1e7      	bne.n	8770 <bt_le_adv_start_legacy+0x48>
    87a0:	e7d7      	b.n	8752 <bt_le_adv_start_legacy+0x2a>
	(void)memset(&set_param, 0, sizeof(set_param));
    87a2:	220f      	movs	r2, #15
    87a4:	4601      	mov	r1, r0
    87a6:	a808      	add	r0, sp, #32
    87a8:	f01e f926 	bl	269f8 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    87ac:	68a3      	ldr	r3, [r4, #8]
    87ae:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    87b2:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    87b4:	68e3      	ldr	r3, [r4, #12]
    87b6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    87ba:	f01e fc1a 	bl	26ff2 <get_adv_channel_map>
	if (adv->id != param->id) {
    87be:	782a      	ldrb	r2, [r5, #0]
    87c0:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    87c2:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    87c6:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    87c8:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    87cc:	d004      	beq.n	87d8 <bt_le_adv_start_legacy+0xb0>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    87ce:	4862      	ldr	r0, [pc, #392]	; (8958 <bt_le_adv_start_legacy+0x230>)
    87d0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    87d4:	f01e fc1c 	bl	27010 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    87d8:	4b60      	ldr	r3, [pc, #384]	; (895c <bt_le_adv_start_legacy+0x234>)
	adv->id = param->id;
    87da:	7820      	ldrb	r0, [r4, #0]
    87dc:	7028      	strb	r0, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    87de:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37
	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    87e2:	6861      	ldr	r1, [r4, #4]
    87e4:	f10d 0225 	add.w	r2, sp, #37	; 0x25
    87e8:	f7ff f86c 	bl	78c4 <le_adv_set_random_addr.isra.0>
	if (err) {
    87ec:	4683      	mov	fp, r0
    87ee:	2800      	cmp	r0, #0
    87f0:	d1b1      	bne.n	8756 <bt_le_adv_start_legacy+0x2e>
	if (dir_adv) {
    87f2:	f105 000b 	add.w	r0, r5, #11
    87f6:	2e00      	cmp	r6, #0
    87f8:	d041      	beq.n	887e <bt_le_adv_start_legacy+0x156>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    87fa:	6921      	ldr	r1, [r4, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    87fc:	f01e fc2a 	bl	27054 <bt_addr_le_copy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    8800:	6860      	ldr	r0, [r4, #4]
    8802:	07c1      	lsls	r1, r0, #31
    8804:	d543      	bpl.n	888e <bt_le_adv_start_legacy+0x166>
		if (dir_adv) {
    8806:	2e00      	cmp	r6, #0
    8808:	d03e      	beq.n	8888 <bt_le_adv_start_legacy+0x160>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    880a:	f010 0f10 	tst.w	r0, #16
    880e:	bf14      	ite	ne
    8810:	2304      	movne	r3, #4
    8812:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    8814:	6921      	ldr	r1, [r4, #16]
    8816:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    881a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    881e:	f01e fc19 	bl	27054 <bt_addr_le_copy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    8822:	210f      	movs	r1, #15
    8824:	f242 0006 	movw	r0, #8198	; 0x2006
    8828:	f7fe ff2c 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    882c:	4683      	mov	fp, r0
    882e:	2800      	cmp	r0, #0
    8830:	f000 808c 	beq.w	894c <bt_le_adv_start_legacy+0x224>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8834:	220f      	movs	r2, #15
    8836:	a908      	add	r1, sp, #32
    8838:	3008      	adds	r0, #8
    883a:	f023 fc34 	bl	2c0a6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    883e:	2200      	movs	r2, #0
    8840:	4659      	mov	r1, fp
    8842:	f242 0006 	movw	r0, #8198	; 0x2006
    8846:	f7fe ff77 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    884a:	2800      	cmp	r0, #0
    884c:	f040 8081 	bne.w	8952 <bt_le_adv_start_legacy+0x22a>
	if (!dir_adv) {
    8850:	b346      	cbz	r6, 88a4 <bt_le_adv_start_legacy+0x17c>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8852:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8854:	07da      	lsls	r2, r3, #31
    8856:	d436      	bmi.n	88c6 <bt_le_adv_start_legacy+0x19e>
	return set_le_adv_enable_legacy(adv, enable);
    8858:	2101      	movs	r1, #1
    885a:	4628      	mov	r0, r5
    885c:	f7ff f874 	bl	7948 <set_le_adv_enable_legacy>
	if (err) {
    8860:	4683      	mov	fp, r0
    8862:	9805      	ldr	r0, [sp, #20]
    8864:	f1bb 0f00 	cmp.w	fp, #0
    8868:	d067      	beq.n	893a <bt_le_adv_start_legacy+0x212>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    886a:	2800      	cmp	r0, #0
    886c:	f43f af73 	beq.w	8756 <bt_le_adv_start_legacy+0x2e>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8870:	2100      	movs	r1, #0
    8872:	f000 fe07 	bl	9484 <bt_conn_set_state>
			bt_conn_unref(conn);
    8876:	9805      	ldr	r0, [sp, #20]
    8878:	f01f f884 	bl	27984 <bt_conn_unref>
    887c:	e76b      	b.n	8756 <bt_le_adv_start_legacy+0x2e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    887e:	9606      	str	r6, [sp, #24]
    8880:	a906      	add	r1, sp, #24
    8882:	f8cd 601b 	str.w	r6, [sp, #27]
    8886:	e7b9      	b.n	87fc <bt_le_adv_start_legacy+0xd4>
			set_param.type = BT_HCI_ADV_IND;
    8888:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    888c:	e7c9      	b.n	8822 <bt_le_adv_start_legacy+0xfa>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    888e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8890:	b933      	cbnz	r3, 88a0 <bt_le_adv_start_legacy+0x178>
    8892:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    8896:	f1c7 0303 	rsb	r3, r7, #3
    889a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    889e:	e7c0      	b.n	8822 <bt_le_adv_start_legacy+0xfa>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    88a0:	2701      	movs	r7, #1
    88a2:	e7f8      	b.n	8896 <bt_le_adv_start_legacy+0x16e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    88a4:	6863      	ldr	r3, [r4, #4]
    88a6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    88aa:	e9cd 7301 	strd	r7, r3, [sp, #4]
    88ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    88b0:	9300      	str	r3, [sp, #0]
    88b2:	4652      	mov	r2, sl
    88b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    88b6:	4649      	mov	r1, r9
    88b8:	4628      	mov	r0, r5
    88ba:	f7ff f949 	bl	7b50 <le_adv_update.constprop.0>
		if (err) {
    88be:	4683      	mov	fp, r0
    88c0:	2800      	cmp	r0, #0
    88c2:	d0c6      	beq.n	8852 <bt_le_adv_start_legacy+0x12a>
    88c4:	e747      	b.n	8756 <bt_le_adv_start_legacy+0x2e>
		err = le_adv_start_add_conn(adv, &conn);
    88c6:	a905      	add	r1, sp, #20
    88c8:	4628      	mov	r0, r5
    88ca:	f7fe fcf3 	bl	72b4 <le_adv_start_add_conn>
		if (err) {
    88ce:	4683      	mov	fp, r0
    88d0:	2800      	cmp	r0, #0
    88d2:	d0c1      	beq.n	8858 <bt_le_adv_start_legacy+0x130>
			if (err == -ENOMEM && !dir_adv &&
    88d4:	f110 0f0c 	cmn.w	r0, #12
    88d8:	f47f af3d 	bne.w	8756 <bt_le_adv_start_legacy+0x2e>
    88dc:	2e00      	cmp	r6, #0
    88de:	f47f af3a 	bne.w	8756 <bt_le_adv_start_legacy+0x2e>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    88e2:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    88e4:	079b      	lsls	r3, r3, #30
    88e6:	f53f af36 	bmi.w	8756 <bt_le_adv_start_legacy+0x2e>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    88ea:	6862      	ldr	r2, [r4, #4]
    88ec:	f082 0202 	eor.w	r2, r2, #2
    88f0:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    88f4:	f00b 0201 	and.w	r2, fp, #1
    88f8:	210c      	movs	r1, #12
    88fa:	4640      	mov	r0, r8
    88fc:	f01e fc0b 	bl	27116 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    8900:	6862      	ldr	r2, [r4, #4]
    8902:	2107      	movs	r1, #7
    8904:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    8908:	4640      	mov	r0, r8
    890a:	f01e fc04 	bl	27116 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    890e:	6862      	ldr	r2, [r4, #4]
    8910:	2108      	movs	r1, #8
    8912:	f002 0201 	and.w	r2, r2, #1
    8916:	4640      	mov	r0, r8
    8918:	f01e fbfd 	bl	27116 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    891c:	463a      	mov	r2, r7
    891e:	2109      	movs	r1, #9
    8920:	4640      	mov	r0, r8
    8922:	f01e fbf8 	bl	27116 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    8926:	6862      	ldr	r2, [r4, #4]
    8928:	210b      	movs	r1, #11
    892a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    892e:	4640      	mov	r0, r8
    8930:	f01e fbf1 	bl	27116 <atomic_set_bit_to>
	return 0;
    8934:	f04f 0b00 	mov.w	fp, #0
    8938:	e70d      	b.n	8756 <bt_le_adv_start_legacy+0x2e>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    893a:	b108      	cbz	r0, 8940 <bt_le_adv_start_legacy+0x218>
		bt_conn_unref(conn);
    893c:	f01f f822 	bl	27984 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    8940:	2e00      	cmp	r6, #0
    8942:	d1d7      	bne.n	88f4 <bt_le_adv_start_legacy+0x1cc>
    8944:	e7d1      	b.n	88ea <bt_le_adv_start_legacy+0x1c2>
		return -EAGAIN;
    8946:	f06f 0b0a 	mvn.w	fp, #10
    894a:	e704      	b.n	8756 <bt_le_adv_start_legacy+0x2e>
		return -ENOBUFS;
    894c:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    8950:	e701      	b.n	8756 <bt_le_adv_start_legacy+0x2e>
    8952:	4683      	mov	fp, r0
    8954:	e6ff      	b.n	8756 <bt_le_adv_start_legacy+0x2e>
    8956:	bf00      	nop
    8958:	20000100 	.word	0x20000100
    895c:	20000068 	.word	0x20000068

00008960 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    8960:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    8962:	9c04      	ldr	r4, [sp, #16]
    8964:	e9cd 3400 	strd	r3, r4, [sp]
    8968:	4613      	mov	r3, r2
    896a:	460a      	mov	r2, r1
    896c:	4601      	mov	r1, r0
    896e:	4802      	ldr	r0, [pc, #8]	; (8978 <bt_le_adv_start+0x18>)
    8970:	f7ff feda 	bl	8728 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    8974:	b002      	add	sp, #8
    8976:	bd10      	pop	{r4, pc}
    8978:	20000080 	.word	0x20000080

0000897c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    897c:	b530      	push	{r4, r5, lr}
    897e:	4c22      	ldr	r4, [pc, #136]	; (8a08 <bt_le_adv_stop+0x8c>)
    8980:	b085      	sub	sp, #20
    8982:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8986:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    898a:	f01e fb41 	bl	27010 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    898e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8992:	f01e fb4c 	bl	2702e <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8996:	0642      	lsls	r2, r0, #25
    8998:	f3c0 1380 	ubfx	r3, r0, #6, #1
    899c:	d531      	bpl.n	8a02 <bt_le_adv_stop+0x86>
    899e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    89a2:	f01e fb44 	bl	2702e <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    89a6:	05c3      	lsls	r3, r0, #23
    89a8:	d521      	bpl.n	89ee <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    89aa:	2300      	movs	r3, #0
    89ac:	4669      	mov	r1, sp
    89ae:	f104 0023 	add.w	r0, r4, #35	; 0x23
    89b2:	9300      	str	r3, [sp, #0]
    89b4:	f8cd 3003 	str.w	r3, [sp, #3]
    89b8:	f01e fb46 	bl	27048 <bt_addr_le_cmp>
    89bc:	7e25      	ldrb	r5, [r4, #24]
    89be:	b9e0      	cbnz	r0, 89fa <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    89c0:	4b12      	ldr	r3, [pc, #72]	; (8a0c <bt_le_adv_stop+0x90>)
    89c2:	889a      	ldrh	r2, [r3, #4]
    89c4:	6818      	ldr	r0, [r3, #0]
    89c6:	799b      	ldrb	r3, [r3, #6]
    89c8:	f8ad 200c 	strh.w	r2, [sp, #12]
    89cc:	9002      	str	r0, [sp, #8]
    89ce:	f88d 300e 	strb.w	r3, [sp, #14]
    89d2:	2204      	movs	r2, #4
    89d4:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    89d6:	4628      	mov	r0, r5
    89d8:	f000 fd2e 	bl	9438 <bt_conn_lookup_state_le>
    89dc:	4604      	mov	r4, r0
	if (conn) {
    89de:	b130      	cbz	r0, 89ee <bt_le_adv_stop+0x72>
		conn->err = status;
    89e0:	2100      	movs	r1, #0
    89e2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    89e4:	f000 fd4e 	bl	9484 <bt_conn_set_state>
		bt_conn_unref(conn);
    89e8:	4620      	mov	r0, r4
    89ea:	f01e ffcb 	bl	27984 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    89ee:	4808      	ldr	r0, [pc, #32]	; (8a10 <bt_le_adv_stop+0x94>)
    89f0:	2100      	movs	r1, #0
    89f2:	f7fe ffa9 	bl	7948 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    89f6:	b005      	add	sp, #20
    89f8:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    89fa:	2205      	movs	r2, #5
    89fc:	f104 0123 	add.w	r1, r4, #35	; 0x23
    8a00:	e7e9      	b.n	89d6 <bt_le_adv_stop+0x5a>
		return 0;
    8a02:	4618      	mov	r0, r3
    8a04:	e7f7      	b.n	89f6 <bt_le_adv_stop+0x7a>
    8a06:	bf00      	nop
    8a08:	20000068 	.word	0x20000068
    8a0c:	0002dcec 	.word	0x0002dcec
    8a10:	20000080 	.word	0x20000080

00008a14 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    8a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8a16:	4c1f      	ldr	r4, [pc, #124]	; (8a94 <bt_le_adv_resume+0x80>)
    8a18:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8a1c:	f01e fb07 	bl	2702e <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    8a20:	04c0      	lsls	r0, r0, #19
    8a22:	d535      	bpl.n	8a90 <bt_le_adv_resume+0x7c>
    8a24:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8a28:	f01e fb01 	bl	2702e <atomic_get>
    8a2c:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    8a2e:	f3c0 1580 	ubfx	r5, r0, #6, #1
    8a32:	d42d      	bmi.n	8a90 <bt_le_adv_resume+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8a34:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8a38:	f01e faf9 	bl	2702e <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    8a3c:	05c2      	lsls	r2, r0, #23
    8a3e:	d527      	bpl.n	8a90 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    8a40:	a901      	add	r1, sp, #4
    8a42:	f104 0018 	add.w	r0, r4, #24
    8a46:	f7fe fc35 	bl	72b4 <le_adv_start_add_conn>
	if (err) {
    8a4a:	bb08      	cbnz	r0, 8a90 <bt_le_adv_resume+0x7c>
    8a4c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8a50:	f01e faed 	bl	2702e <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8a54:	0503      	lsls	r3, r0, #20
    8a56:	d402      	bmi.n	8a5e <bt_le_adv_resume+0x4a>
		return le_set_private_addr(adv->id);
    8a58:	7e20      	ldrb	r0, [r4, #24]
    8a5a:	f7fe fefd 	bl	7858 <le_set_private_addr>
	return set_le_adv_enable_legacy(adv, enable);
    8a5e:	480e      	ldr	r0, [pc, #56]	; (8a98 <bt_le_adv_resume+0x84>)
    8a60:	2101      	movs	r1, #1
    8a62:	f7fe ff71 	bl	7948 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    8a66:	b150      	cbz	r0, 8a7e <bt_le_adv_resume+0x6a>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8a68:	9801      	ldr	r0, [sp, #4]
    8a6a:	2100      	movs	r1, #0
    8a6c:	f000 fd0a 	bl	9484 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8a70:	480a      	ldr	r0, [pc, #40]	; (8a9c <bt_le_adv_resume+0x88>)
    8a72:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8a76:	f01e facb 	bl	27010 <atomic_and>
	return (old & mask) != 0;
    8a7a:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    8a7e:	9801      	ldr	r0, [sp, #4]
    8a80:	f01e ff80 	bl	27984 <bt_conn_unref>
	if (persist_paused) {
    8a84:	b125      	cbz	r5, 8a90 <bt_le_adv_resume+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8a86:	4805      	ldr	r0, [pc, #20]	; (8a9c <bt_le_adv_resume+0x88>)
    8a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    8a8c:	f01e fb29 	bl	270e2 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    8a90:	b003      	add	sp, #12
    8a92:	bd30      	pop	{r4, r5, pc}
    8a94:	20000068 	.word	0x20000068
    8a98:	20000080 	.word	0x20000080
    8a9c:	20000094 	.word	0x20000094

00008aa0 <enh_conn_complete>:
{
    8aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8aa4:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8aa8:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    8aac:	b086      	sub	sp, #24
    8aae:	4604      	mov	r4, r0
    8ab0:	485f      	ldr	r0, [pc, #380]	; (8c30 <enh_conn_complete+0x190>)
    8ab2:	f01e faad 	bl	27010 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    8ab6:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8ab8:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    8abc:	d504      	bpl.n	8ac8 <enh_conn_complete+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    8abe:	495d      	ldr	r1, [pc, #372]	; (8c34 <enh_conn_complete+0x194>)
    8ac0:	2200      	movs	r2, #0
    8ac2:	2002      	movs	r0, #2
    8ac4:	f003 fcc2 	bl	c44c <bt_keys_foreach>
	if (evt->status) {
    8ac8:	7825      	ldrb	r5, [r4, #0]
    8aca:	b19d      	cbz	r5, 8af4 <enh_conn_complete+0x54>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8acc:	2d3c      	cmp	r5, #60	; 0x3c
    8ace:	d13d      	bne.n	8b4c <enh_conn_complete+0xac>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8ad0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8ad4:	4858      	ldr	r0, [pc, #352]	; (8c38 <enh_conn_complete+0x198>)
    8ad6:	f01e fa9b 	bl	27010 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    8ada:	2000      	movs	r0, #0
    8adc:	f7fe fbcc 	bl	7278 <find_pending_connect.part.0>
		if (!conn) {
    8ae0:	4604      	mov	r4, r0
    8ae2:	b398      	cbz	r0, 8b4c <enh_conn_complete+0xac>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    8ae4:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8ae6:	2100      	movs	r1, #0
    8ae8:	f000 fccc 	bl	9484 <bt_conn_set_state>
		bt_conn_unref(conn);
    8aec:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    8aee:	f01e ff49 	bl	27984 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8af2:	e02b      	b.n	8b4c <enh_conn_complete+0xac>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8af4:	7923      	ldrb	r3, [r4, #4]
    8af6:	3b02      	subs	r3, #2
    8af8:	2b01      	cmp	r3, #1
    8afa:	f104 0604 	add.w	r6, r4, #4
    8afe:	d828      	bhi.n	8b52 <enh_conn_complete+0xb2>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    8b00:	4631      	mov	r1, r6
    8b02:	a804      	add	r0, sp, #16
    8b04:	f01e faa6 	bl	27054 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8b08:	f89d 3010 	ldrb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    8b0c:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8b10:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    8b12:	f10d 0009 	add.w	r0, sp, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8b16:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    8b1a:	f01e fa98 	bl	2704e <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    8b1e:	2301      	movs	r3, #1
    8b20:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    8b24:	78e3      	ldrb	r3, [r4, #3]
    8b26:	2b01      	cmp	r3, #1
    8b28:	d10c      	bne.n	8b44 <enh_conn_complete+0xa4>
    8b2a:	a804      	add	r0, sp, #16
    8b2c:	f7fe fba4 	bl	7278 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8b30:	78e3      	ldrb	r3, [r4, #3]
    8b32:	2b01      	cmp	r3, #1
    8b34:	4605      	mov	r5, r0
    8b36:	d104      	bne.n	8b42 <enh_conn_complete+0xa2>
    8b38:	483f      	ldr	r0, [pc, #252]	; (8c38 <enh_conn_complete+0x198>)
    8b3a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8b3e:	f01e fa67 	bl	27010 <atomic_and>
	if (!conn) {
    8b42:	b9cd      	cbnz	r5, 8b78 <enh_conn_complete+0xd8>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    8b44:	211f      	movs	r1, #31
    8b46:	4640      	mov	r0, r8
    8b48:	f01e fcdb 	bl	27502 <bt_hci_disconnect>
}
    8b4c:	b006      	add	sp, #24
    8b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    8b52:	78e3      	ldrb	r3, [r4, #3]
    8b54:	2b01      	cmp	r3, #1
    8b56:	bf04      	itt	eq
    8b58:	4b38      	ldreq	r3, [pc, #224]	; (8c3c <enh_conn_complete+0x19c>)
    8b5a:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    8b5e:	4631      	mov	r1, r6
    8b60:	4628      	mov	r0, r5
    8b62:	f01e fcc6 	bl	274f2 <bt_lookup_id_addr>
    8b66:	4601      	mov	r1, r0
    8b68:	a804      	add	r0, sp, #16
    8b6a:	f01e fa73 	bl	27054 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    8b6e:	4631      	mov	r1, r6
    8b70:	a802      	add	r0, sp, #8
    8b72:	f01e fa6f 	bl	27054 <bt_addr_le_copy>
    8b76:	e7d5      	b.n	8b24 <enh_conn_complete+0x84>
	conn->handle = handle;
    8b78:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    8b7a:	a904      	add	r1, sp, #16
	conn->handle = handle;
    8b7c:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    8b80:	f01e fa68 	bl	27054 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    8b84:	7e22      	ldrb	r2, [r4, #24]
    8b86:	7de3      	ldrb	r3, [r4, #23]
    8b88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8b8c:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    8b90:	7ea2      	ldrb	r2, [r4, #26]
    8b92:	7e63      	ldrb	r3, [r4, #25]
    8b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8b98:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8b9c:	7ee3      	ldrb	r3, [r4, #27]
    8b9e:	7f22      	ldrb	r2, [r4, #28]
    8ba0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8ba4:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    8ba8:	78e7      	ldrb	r7, [r4, #3]
    8baa:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    8bac:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8bae:	2f01      	cmp	r7, #1
	conn->err = 0U;
    8bb0:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8bb2:	d128      	bne.n	8c06 <enh_conn_complete+0x166>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8bb4:	4e21      	ldr	r6, [pc, #132]	; (8c3c <enh_conn_complete+0x19c>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    8bb6:	a902      	add	r1, sp, #8
    8bb8:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    8bbc:	f01e fa4a 	bl	27054 <bt_addr_le_copy>
    8bc0:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    8bc4:	f01e fa33 	bl	2702e <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    8bc8:	0502      	lsls	r2, r0, #20
    8bca:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    8bce:	d426      	bmi.n	8c1e <enh_conn_complete+0x17e>
				if (bt_addr_cmp(&evt->local_rpa,
    8bd0:	340b      	adds	r4, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    8bd2:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
    8bd6:	2206      	movs	r2, #6
    8bd8:	4669      	mov	r1, sp
    8bda:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
    8bdc:	9300      	str	r3, [sp, #0]
    8bde:	f8ad 3004 	strh.w	r3, [sp, #4]
    8be2:	f01d fece 	bl	26982 <memcmp>
    8be6:	4603      	mov	r3, r0
    8be8:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
    8bec:	b1a3      	cbz	r3, 8c18 <enh_conn_complete+0x178>
					bt_addr_copy(&conn->le.resp_addr.a,
    8bee:	4621      	mov	r1, r4
					bt_addr_copy(&conn->le.resp_addr.a,
    8bf0:	f01e fa2d 	bl	2704e <bt_addr_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    8bf4:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    8bf8:	2200      	movs	r2, #0
    8bfa:	f001 0340 	and.w	r3, r1, #64	; 0x40
    8bfe:	4313      	orrs	r3, r2
    8c00:	d001      	beq.n	8c06 <enh_conn_complete+0x166>
			bt_le_adv_resume();
    8c02:	f7ff ff07 	bl	8a14 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    8c06:	2107      	movs	r1, #7
    8c08:	4628      	mov	r0, r5
    8c0a:	f000 fc3b 	bl	9484 <bt_conn_set_state>
	conn_auto_initiate(conn);
    8c0e:	4628      	mov	r0, r5
    8c10:	f7ff f8cc 	bl	7dac <conn_auto_initiate>
	bt_conn_unref(conn);
    8c14:	4628      	mov	r0, r5
    8c16:	e76a      	b.n	8aee <enh_conn_complete+0x4e>
					bt_addr_copy(&conn->le.resp_addr.a,
    8c18:	f106 0131 	add.w	r1, r6, #49	; 0x31
    8c1c:	e7e8      	b.n	8bf0 <enh_conn_complete+0x150>
						&bt_dev.id_addr[conn->id]);
    8c1e:	7a29      	ldrb	r1, [r5, #8]
    8c20:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    8c24:	4431      	add	r1, r6
    8c26:	f105 0096 	add.w	r0, r5, #150	; 0x96
    8c2a:	f01e fa13 	bl	27054 <bt_addr_le_copy>
    8c2e:	e7e1      	b.n	8bf4 <enh_conn_complete+0x154>
    8c30:	20000100 	.word	0x20000100
    8c34:	00027673 	.word	0x00027673
    8c38:	20000094 	.word	0x20000094
    8c3c:	20000068 	.word	0x20000068

00008c40 <le_legacy_conn_complete>:
{
    8c40:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    8c42:	6881      	ldr	r1, [r0, #8]
{
    8c44:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    8c46:	780b      	ldrb	r3, [r1, #0]
    8c48:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    8c4c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    8c50:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    8c54:	78cb      	ldrb	r3, [r1, #3]
    8c56:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    8c5a:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    8c5e:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    8c62:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    8c66:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    8c6a:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    8c6e:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    8c72:	7c4b      	ldrb	r3, [r1, #17]
    8c74:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    8c78:	a803      	add	r0, sp, #12
    8c7a:	3104      	adds	r1, #4
    8c7c:	f01e f9ea 	bl	27054 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    8c80:	f10d 0013 	add.w	r0, sp, #19
    8c84:	4908      	ldr	r1, [pc, #32]	; (8ca8 <le_legacy_conn_complete+0x68>)
    8c86:	f01e f9e2 	bl	2704e <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    8c8a:	2300      	movs	r3, #0
    8c8c:	4669      	mov	r1, sp
    8c8e:	f10d 0019 	add.w	r0, sp, #25
    8c92:	9300      	str	r3, [sp, #0]
    8c94:	f8ad 3004 	strh.w	r3, [sp, #4]
    8c98:	f01e f9d9 	bl	2704e <bt_addr_copy>
	enh_conn_complete(&enh);
    8c9c:	a802      	add	r0, sp, #8
    8c9e:	f7ff feff 	bl	8aa0 <enh_conn_complete>
}
    8ca2:	b00b      	add	sp, #44	; 0x2c
    8ca4:	f85d fb04 	ldr.w	pc, [sp], #4
    8ca8:	20000099 	.word	0x20000099

00008cac <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
    8cac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8cb0:	4605      	mov	r5, r0
    8cb2:	4853      	ldr	r0, [pc, #332]	; (8e00 <bt_le_scan_start+0x154>)
    8cb4:	460f      	mov	r7, r1
    8cb6:	f01e f9ba 	bl	2702e <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8cba:	0781      	lsls	r1, r0, #30
    8cbc:	f140 809c 	bpl.w	8df8 <bt_le_scan_start+0x14c>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
    8cc0:	782a      	ldrb	r2, [r5, #0]
    8cc2:	2a01      	cmp	r2, #1
    8cc4:	d905      	bls.n	8cd2 <bt_le_scan_start+0x26>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
    8cc6:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
    8cca:	4620      	mov	r0, r4
    8ccc:	b003      	add	sp, #12
    8cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
    8cd2:	686b      	ldr	r3, [r5, #4]
    8cd4:	f033 030f 	bics.w	r3, r3, #15
    8cd8:	d1f5      	bne.n	8cc6 <bt_le_scan_start+0x1a>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
    8cda:	8928      	ldrh	r0, [r5, #8]
    8cdc:	1f03      	subs	r3, r0, #4
    8cde:	b29b      	uxth	r3, r3
    8ce0:	f643 74fc 	movw	r4, #16380	; 0x3ffc
    8ce4:	42a3      	cmp	r3, r4
    8ce6:	d8ee      	bhi.n	8cc6 <bt_le_scan_start+0x1a>
	if (param->window < 0x0004 || param->window > 0x4000) {
    8ce8:	8969      	ldrh	r1, [r5, #10]
    8cea:	1f0b      	subs	r3, r1, #4
    8cec:	b29b      	uxth	r3, r3
    8cee:	42a3      	cmp	r3, r4
    8cf0:	d8e9      	bhi.n	8cc6 <bt_le_scan_start+0x1a>
	if (param->window > param->interval) {
    8cf2:	4288      	cmp	r0, r1
    8cf4:	d3e7      	bcc.n	8cc6 <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
    8cf6:	b942      	cbnz	r2, 8d0a <bt_le_scan_start+0x5e>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8cf8:	4841      	ldr	r0, [pc, #260]	; (8e00 <bt_le_scan_start+0x154>)
    8cfa:	2106      	movs	r1, #6
    8cfc:	f01e fa00 	bl	27100 <atomic_test_and_set_bit>
    8d00:	4603      	mov	r3, r0
    8d02:	b138      	cbz	r0, 8d14 <bt_le_scan_start+0x68>
		return -EALREADY;
    8d04:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8d08:	e7df      	b.n	8cca <bt_le_scan_start+0x1e>
	if (param->type && !bt_le_scan_random_addr_check()) {
    8d0a:	f7ff f82f 	bl	7d6c <bt_le_scan_random_addr_check>
    8d0e:	2800      	cmp	r0, #0
    8d10:	d1f2      	bne.n	8cf8 <bt_le_scan_start+0x4c>
    8d12:	e7d8      	b.n	8cc6 <bt_le_scan_start+0x1a>
    8d14:	483a      	ldr	r0, [pc, #232]	; (8e00 <bt_le_scan_start+0x154>)
    8d16:	f01e f98a 	bl	2702e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    8d1a:	0682      	lsls	r2, r0, #26
    8d1c:	d50a      	bpl.n	8d34 <bt_le_scan_start+0x88>
	return set_le_scan_enable_legacy(enable);
    8d1e:	4618      	mov	r0, r3
    8d20:	f7fe fe40 	bl	79a4 <set_le_scan_enable_legacy>
		if (err) {
    8d24:	4604      	mov	r4, r0
    8d26:	b128      	cbz	r0, 8d34 <bt_le_scan_start+0x88>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8d28:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8d2c:	4834      	ldr	r0, [pc, #208]	; (8e00 <bt_le_scan_start+0x154>)
    8d2e:	f01e f96f 	bl	27010 <atomic_and>
		return err;
    8d32:	e7ca      	b.n	8cca <bt_le_scan_start+0x1e>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
    8d34:	686a      	ldr	r2, [r5, #4]
    8d36:	4e33      	ldr	r6, [pc, #204]	; (8e04 <bt_le_scan_start+0x158>)
    8d38:	f002 0201 	and.w	r2, r2, #1
    8d3c:	2108      	movs	r1, #8
    8d3e:	f106 0098 	add.w	r0, r6, #152	; 0x98
    8d42:	f01e f9e8 	bl	27116 <atomic_set_bit_to>
		if (param->timeout) {
    8d46:	89ac      	ldrh	r4, [r5, #12]
    8d48:	b144      	cbz	r4, 8d5c <bt_le_scan_start+0xb0>
    8d4a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8d4e:	f106 0098 	add.w	r0, r6, #152	; 0x98
    8d52:	f01e f95d 	bl	27010 <atomic_and>
			return -ENOTSUP;
    8d56:	f06f 0422 	mvn.w	r4, #34	; 0x22
    8d5a:	e7b6      	b.n	8cca <bt_le_scan_start+0x1e>
		err = start_le_scan_legacy(param->type, param->interval,
    8d5c:	f895 8000 	ldrb.w	r8, [r5]
    8d60:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    8d64:	896d      	ldrh	r5, [r5, #10]
	(void)memset(&set_param, 0, sizeof(set_param));
    8d66:	4621      	mov	r1, r4
    8d68:	2207      	movs	r2, #7
    8d6a:	4668      	mov	r0, sp
    8d6c:	f01d fe44 	bl	269f8 <memset>
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    8d70:	f108 33ff 	add.w	r3, r8, #4294967295
	set_param.scan_type = scan_type;
    8d74:	f88d 8000 	strb.w	r8, [sp]
		err = le_set_private_addr(BT_ID_DEFAULT);
    8d78:	4620      	mov	r0, r4
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    8d7a:	f1d3 0800 	rsbs	r8, r3, #0
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    8d7e:	f88d 4006 	strb.w	r4, [sp, #6]
	set_param.interval = sys_cpu_to_le16(interval);
    8d82:	f8ad 9001 	strh.w	r9, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
    8d86:	f8ad 5003 	strh.w	r5, [sp, #3]
	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
    8d8a:	eb48 0803 	adc.w	r8, r8, r3
		err = le_set_private_addr(BT_ID_DEFAULT);
    8d8e:	f7fe fd63 	bl	7858 <le_set_private_addr>
		if (err) {
    8d92:	4604      	mov	r4, r0
    8d94:	2800      	cmp	r0, #0
    8d96:	d1c7      	bne.n	8d28 <bt_le_scan_start+0x7c>
		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    8d98:	f896 30a0 	ldrb.w	r3, [r6, #160]	; 0xa0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    8d9c:	f013 0f40 	tst.w	r3, #64	; 0x40
    8da0:	bf14      	ite	ne
    8da2:	2303      	movne	r3, #3
    8da4:	2301      	moveq	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    8da6:	2107      	movs	r1, #7
    8da8:	f242 000b 	movw	r0, #8203	; 0x200b
    8dac:	f88d 3005 	strb.w	r3, [sp, #5]
    8db0:	f7fe fc68 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    8db4:	4605      	mov	r5, r0
    8db6:	b1e0      	cbz	r0, 8df2 <bt_le_scan_start+0x146>
	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8db8:	2207      	movs	r2, #7
    8dba:	4669      	mov	r1, sp
    8dbc:	3008      	adds	r0, #8
    8dbe:	f023 f972 	bl	2c0a6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    8dc2:	4622      	mov	r2, r4
    8dc4:	4629      	mov	r1, r5
    8dc6:	f242 000b 	movw	r0, #8203	; 0x200b
    8dca:	f7fe fcb5 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    8dce:	4604      	mov	r4, r0
    8dd0:	2800      	cmp	r0, #0
    8dd2:	d1a9      	bne.n	8d28 <bt_le_scan_start+0x7c>
	return set_le_scan_enable_legacy(enable);
    8dd4:	2001      	movs	r0, #1
    8dd6:	f7fe fde5 	bl	79a4 <set_le_scan_enable_legacy>
	if (err) {
    8dda:	4604      	mov	r4, r0
    8ddc:	2800      	cmp	r0, #0
    8dde:	d1a3      	bne.n	8d28 <bt_le_scan_start+0x7c>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    8de0:	4642      	mov	r2, r8
    8de2:	2107      	movs	r1, #7
    8de4:	f106 0098 	add.w	r0, r6, #152	; 0x98
    8de8:	f01e f995 	bl	27116 <atomic_set_bit_to>
	scan_dev_found_cb = cb;
    8dec:	4b06      	ldr	r3, [pc, #24]	; (8e08 <bt_le_scan_start+0x15c>)
    8dee:	601f      	str	r7, [r3, #0]
	return 0;
    8df0:	e76b      	b.n	8cca <bt_le_scan_start+0x1e>
		return -ENOBUFS;
    8df2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8df6:	e797      	b.n	8d28 <bt_le_scan_start+0x7c>
		return -EAGAIN;
    8df8:	f06f 040a 	mvn.w	r4, #10
    8dfc:	e765      	b.n	8cca <bt_le_scan_start+0x1e>
    8dfe:	bf00      	nop
    8e00:	20000100 	.word	0x20000100
    8e04:	20000068 	.word	0x20000068
    8e08:	200021f0 	.word	0x200021f0

00008e0c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    8e0c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8e0e:	4808      	ldr	r0, [pc, #32]	; (8e30 <bt_le_scan_stop+0x24>)
    8e10:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8e14:	f01e f8fc 	bl	27010 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    8e18:	0643      	lsls	r3, r0, #25
    8e1a:	d506      	bpl.n	8e2a <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
    8e1c:	4b05      	ldr	r3, [pc, #20]	; (8e34 <bt_le_scan_stop+0x28>)
    8e1e:	2000      	movs	r0, #0
    8e20:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
    8e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
    8e26:	f7ff b945 	b.w	80b4 <bt_le_scan_update>
}
    8e2a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    8e2e:	bd08      	pop	{r3, pc}
    8e30:	20000100 	.word	0x20000100
    8e34:	200021f0 	.word	0x200021f0

00008e38 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    8e38:	b538      	push	{r3, r4, r5, lr}
    8e3a:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    8e3c:	4805      	ldr	r0, [pc, #20]	; (8e54 <bt_buf_get_rx+0x1c>)
    8e3e:	f023 f87a 	bl	2bf36 <net_buf_alloc_fixed>
#endif

	if (buf) {
    8e42:	4604      	mov	r4, r0
    8e44:	b120      	cbz	r0, 8e50 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8e46:	2100      	movs	r1, #0
    8e48:	3008      	adds	r0, #8
    8e4a:	f023 f899 	bl	2bf80 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
    8e4e:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    8e50:	4620      	mov	r0, r4
    8e52:	bd38      	pop	{r3, r4, r5, pc}
    8e54:	20000f24 	.word	0x20000f24

00008e58 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    8e58:	b570      	push	{r4, r5, r6, lr}
    8e5a:	4602      	mov	r2, r0
    8e5c:	460b      	mov	r3, r1
	__asm__ volatile(
    8e5e:	f04f 0120 	mov.w	r1, #32
    8e62:	f3ef 8511 	mrs	r5, BASEPRI
    8e66:	f381 8811 	msr	BASEPRI, r1
    8e6a:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    8e6e:	480c      	ldr	r0, [pc, #48]	; (8ea0 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    8e70:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    8e72:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
    8e76:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
    8e7a:	f385 8811 	msr	BASEPRI, r5
    8e7e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    8e82:	b924      	cbnz	r4, 8e8e <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    8e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8e88:	2001      	movs	r0, #1
    8e8a:	f7ff bfd5 	b.w	8e38 <bt_buf_get_rx>
    8e8e:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8e90:	f104 0008 	add.w	r0, r4, #8
    8e94:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    8e96:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    8e98:	f023 f872 	bl	2bf80 <net_buf_simple_reserve>
}
    8e9c:	4620      	mov	r0, r4
    8e9e:	bd70      	pop	{r4, r5, r6, pc}
    8ea0:	20000068 	.word	0x20000068

00008ea4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
    8ea4:	b570      	push	{r4, r5, r6, lr}
    8ea6:	4604      	mov	r4, r0
	switch (evt) {
    8ea8:	2c0f      	cmp	r4, #15
{
    8eaa:	460d      	mov	r5, r1
    8eac:	4610      	mov	r0, r2
    8eae:	4619      	mov	r1, r3
	switch (evt) {
    8eb0:	d805      	bhi.n	8ebe <bt_buf_get_evt+0x1a>
    8eb2:	2c0d      	cmp	r4, #13
    8eb4:	d912      	bls.n	8edc <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    8eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    8eba:	f7ff bfcd 	b.w	8e58 <bt_buf_get_cmd_complete>
	switch (evt) {
    8ebe:	2c13      	cmp	r4, #19
    8ec0:	d10c      	bne.n	8edc <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    8ec2:	480b      	ldr	r0, [pc, #44]	; (8ef0 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    8ec4:	f023 f837 	bl	2bf36 <net_buf_alloc_fixed>
			if (buf) {
    8ec8:	4604      	mov	r4, r0
    8eca:	b128      	cbz	r0, 8ed8 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    8ecc:	2100      	movs	r1, #0
    8ece:	3008      	adds	r0, #8
    8ed0:	f023 f856 	bl	2bf80 <net_buf_simple_reserve>
    8ed4:	2301      	movs	r3, #1
    8ed6:	7523      	strb	r3, [r4, #20]
}
    8ed8:	4620      	mov	r0, r4
    8eda:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
		if (discardable) {
    8ee0:	b10d      	cbz	r5, 8ee6 <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    8ee2:	4804      	ldr	r0, [pc, #16]	; (8ef4 <bt_buf_get_evt+0x50>)
    8ee4:	e7ee      	b.n	8ec4 <bt_buf_get_evt+0x20>
}
    8ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8eea:	2001      	movs	r0, #1
    8eec:	f7ff bfa4 	b.w	8e38 <bt_buf_get_rx>
    8ef0:	20000f74 	.word	0x20000f74
    8ef4:	20000eac 	.word	0x20000eac

00008ef8 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    8ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    8efa:	4e17      	ldr	r6, [pc, #92]	; (8f58 <bt_pub_key_gen+0x60>)
    8efc:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
    8f00:	f003 0306 	and.w	r3, r3, #6
    8f04:	2b06      	cmp	r3, #6
    8f06:	d121      	bne.n	8f4c <bt_pub_key_gen+0x54>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    8f08:	4f14      	ldr	r7, [pc, #80]	; (8f5c <bt_pub_key_gen+0x64>)
    8f0a:	683b      	ldr	r3, [r7, #0]
    8f0c:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    8f0e:	6038      	str	r0, [r7, #0]

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8f10:	2104      	movs	r1, #4
    8f12:	f106 0098 	add.w	r0, r6, #152	; 0x98
    8f16:	f01e f8f3 	bl	27100 <atomic_test_and_set_bit>
    8f1a:	4605      	mov	r5, r0
    8f1c:	b9c8      	cbnz	r0, 8f52 <bt_pub_key_gen+0x5a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8f1e:	f06f 0108 	mvn.w	r1, #8
    8f22:	f106 0098 	add.w	r0, r6, #152	; 0x98
    8f26:	f01e f873 	bl	27010 <atomic_and>
		return 0;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    8f2a:	462a      	mov	r2, r5
    8f2c:	4629      	mov	r1, r5
    8f2e:	f242 0025 	movw	r0, #8229	; 0x2025
    8f32:	f7fe fc01 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    8f36:	4604      	mov	r4, r0
    8f38:	b130      	cbz	r0, 8f48 <bt_pub_key_gen+0x50>
    8f3a:	f06f 0110 	mvn.w	r1, #16
    8f3e:	f106 0098 	add.w	r0, r6, #152	; 0x98
    8f42:	f01e f865 	bl	27010 <atomic_and>
		BT_ERR("Sending LE P256 Public Key command failed");
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
    8f46:	603d      	str	r5, [r7, #0]
		return err;
	}

	return 0;
}
    8f48:	4620      	mov	r0, r4
    8f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    8f4c:	f06f 0422 	mvn.w	r4, #34	; 0x22
    8f50:	e7fa      	b.n	8f48 <bt_pub_key_gen+0x50>
		return 0;
    8f52:	2400      	movs	r4, #0
    8f54:	e7f8      	b.n	8f48 <bt_pub_key_gen+0x50>
    8f56:	bf00      	nop
    8f58:	20000068 	.word	0x20000068
    8f5c:	200021e0 	.word	0x200021e0

00008f60 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    8f60:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8f62:	4804      	ldr	r0, [pc, #16]	; (8f74 <bt_pub_key_get+0x14>)
    8f64:	f01e f863 	bl	2702e <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    8f68:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    8f6c:	4802      	ldr	r0, [pc, #8]	; (8f78 <bt_pub_key_get+0x18>)
    8f6e:	bf08      	it	eq
    8f70:	2000      	moveq	r0, #0
    8f72:	bd08      	pop	{r3, pc}
    8f74:	20000100 	.word	0x20000100
    8f78:	200090ec 	.word	0x200090ec

00008f7c <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    8f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8f7e:	4d1a      	ldr	r5, [pc, #104]	; (8fe8 <bt_dh_key_gen+0x6c>)
    8f80:	682b      	ldr	r3, [r5, #0]
{
    8f82:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8f84:	b113      	cbz	r3, 8f8c <bt_dh_key_gen+0x10>
		return -EBUSY;
    8f86:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    8f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8f8c:	4817      	ldr	r0, [pc, #92]	; (8fec <bt_dh_key_gen+0x70>)
    8f8e:	f01e f84e 	bl	2702e <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    8f92:	06c2      	lsls	r2, r0, #27
    8f94:	f3c0 1700 	ubfx	r7, r0, #4, #1
    8f98:	d4f5      	bmi.n	8f86 <bt_dh_key_gen+0xa>
    8f9a:	4814      	ldr	r0, [pc, #80]	; (8fec <bt_dh_key_gen+0x70>)
    8f9c:	f01e f847 	bl	2702e <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    8fa0:	0703      	lsls	r3, r0, #28
    8fa2:	d51d      	bpl.n	8fe0 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    8fa4:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    8fa6:	f242 0026 	movw	r0, #8230	; 0x2026
    8faa:	2140      	movs	r1, #64	; 0x40
    8fac:	f7fe fb6a 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
    8fb0:	4604      	mov	r4, r0
    8fb2:	b918      	cbnz	r0, 8fbc <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    8fb4:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    8fb6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    8fba:	e7e6      	b.n	8f8a <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    8fbc:	2140      	movs	r1, #64	; 0x40
    8fbe:	3008      	adds	r0, #8
    8fc0:	f023 f86b 	bl	2c09a <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    8fc4:	2240      	movs	r2, #64	; 0x40
    8fc6:	4631      	mov	r1, r6
    8fc8:	f01d fceb 	bl	269a2 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    8fcc:	463a      	mov	r2, r7
    8fce:	4621      	mov	r1, r4
    8fd0:	f242 0026 	movw	r0, #8230	; 0x2026
    8fd4:	f7fe fbb0 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
    8fd8:	2800      	cmp	r0, #0
    8fda:	d0d6      	beq.n	8f8a <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    8fdc:	602f      	str	r7, [r5, #0]
		return err;
    8fde:	e7d4      	b.n	8f8a <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    8fe0:	f06f 0030 	mvn.w	r0, #48	; 0x30
    8fe4:	e7d1      	b.n	8f8a <bt_dh_key_gen+0xe>
    8fe6:	bf00      	nop
    8fe8:	200021dc 	.word	0x200021dc
    8fec:	20000100 	.word	0x20000100

00008ff0 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    8ff0:	2300      	movs	r3, #0
	tx->user_data = NULL;
    8ff2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    8ff6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    8ff8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    8ffa:	4801      	ldr	r0, [pc, #4]	; (9000 <tx_free+0x10>)
    8ffc:	f024 b92d 	b.w	2d25a <k_queue_append>
    9000:	20000e2c 	.word	0x20000e2c

00009004 <notify_connected>:
{
    9004:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    9006:	4b09      	ldr	r3, [pc, #36]	; (902c <notify_connected+0x28>)
    9008:	681d      	ldr	r5, [r3, #0]
{
    900a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    900c:	7b21      	ldrb	r1, [r4, #12]
    900e:	b92d      	cbnz	r5, 901c <notify_connected+0x18>
	if (!conn->err) {
    9010:	b951      	cbnz	r1, 9028 <notify_connected+0x24>
		bt_gatt_connected(conn);
    9012:	4620      	mov	r0, r4
}
    9014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    9018:	f002 b87a 	b.w	b110 <bt_gatt_connected>
		if (cb->connected) {
    901c:	682b      	ldr	r3, [r5, #0]
    901e:	b10b      	cbz	r3, 9024 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    9020:	4620      	mov	r0, r4
    9022:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9024:	69ad      	ldr	r5, [r5, #24]
    9026:	e7f1      	b.n	900c <notify_connected+0x8>
}
    9028:	bd38      	pop	{r3, r4, r5, pc}
    902a:	bf00      	nop
    902c:	200021f8 	.word	0x200021f8

00009030 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    9030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    9034:	694d      	ldr	r5, [r1, #20]
{
    9036:	4604      	mov	r4, r0
    9038:	460e      	mov	r6, r1
    903a:	4690      	mov	r8, r2
    903c:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    903e:	f04f 33ff 	mov.w	r3, #4294967295
    9042:	483f      	ldr	r0, [pc, #252]	; (9140 <send_frag+0x110>)
    9044:	f04f 32ff 	mov.w	r2, #4294967295
    9048:	f01a fd5a 	bl	23b00 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    904c:	7b63      	ldrb	r3, [r4, #13]
    904e:	2b07      	cmp	r3, #7
    9050:	d146      	bne.n	90e0 <send_frag+0xb0>
	__asm__ volatile(
    9052:	f04f 0320 	mov.w	r3, #32
    9056:	f3ef 8211 	mrs	r2, BASEPRI
    905a:	f383 8811 	msr	BASEPRI, r3
    905e:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    9062:	2d00      	cmp	r5, #0
    9064:	d04e      	beq.n	9104 <send_frag+0xd4>
	parent->next = child;
    9066:	2300      	movs	r3, #0
    9068:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    906a:	69a3      	ldr	r3, [r4, #24]
    906c:	2b00      	cmp	r3, #0
    906e:	d146      	bne.n	90fe <send_frag+0xce>
	list->head = node;
    9070:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    9074:	f382 8811 	msr	BASEPRI, r2
    9078:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
    907c:	2104      	movs	r1, #4
    907e:	f106 0008 	add.w	r0, r6, #8
    9082:	f023 f851 	bl	2c128 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9086:	8823      	ldrh	r3, [r4, #0]
    9088:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    908c:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9090:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9092:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9096:	3b04      	subs	r3, #4
    9098:	8043      	strh	r3, [r0, #2]
    909a:	2302      	movs	r3, #2
    909c:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    909e:	4630      	mov	r0, r6
    90a0:	f01e fb05 	bl	276ae <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    90a4:	2800      	cmp	r0, #0
    90a6:	d049      	beq.n	913c <send_frag+0x10c>
	__asm__ volatile(
    90a8:	f04f 0320 	mov.w	r3, #32
    90ac:	f3ef 8111 	mrs	r1, BASEPRI
    90b0:	f383 8811 	msr	BASEPRI, r3
    90b4:	f3bf 8f6f 	isb	sy
		BT_ERR("Unable to send to driver (err %d)", err);
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    90b8:	2d00      	cmp	r5, #0
    90ba:	d039      	beq.n	9130 <send_frag+0x100>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    90bc:	6963      	ldr	r3, [r4, #20]
    90be:	2200      	movs	r2, #0
    90c0:	b153      	cbz	r3, 90d8 <send_frag+0xa8>
    90c2:	429d      	cmp	r5, r3
    90c4:	d131      	bne.n	912a <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
    90c6:	682b      	ldr	r3, [r5, #0]
    90c8:	bb4a      	cbnz	r2, 911e <send_frag+0xee>
    90ca:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    90cc:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    90ce:	4295      	cmp	r5, r2
    90d0:	d100      	bne.n	90d4 <send_frag+0xa4>
	list->tail = node;
    90d2:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    90d4:	2300      	movs	r3, #0
    90d6:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    90d8:	f381 8811 	msr	BASEPRI, r1
    90dc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    90e0:	4817      	ldr	r0, [pc, #92]	; (9140 <send_frag+0x110>)
    90e2:	f01a fce7 	bl	23ab4 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    90e6:	b115      	cbz	r5, 90ee <send_frag+0xbe>
		tx_free(tx);
    90e8:	4628      	mov	r0, r5
    90ea:	f7ff ff81 	bl	8ff0 <tx_free>
	}

	if (always_consume) {
    90ee:	b11f      	cbz	r7, 90f8 <send_frag+0xc8>
		net_buf_unref(buf);
    90f0:	4630      	mov	r0, r6
    90f2:	f016 fe4b 	bl	1fd8c <net_buf_unref>
	}
	return false;
    90f6:	2700      	movs	r7, #0
}
    90f8:	4638      	mov	r0, r7
    90fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    90fe:	601d      	str	r5, [r3, #0]
	list->tail = node;
    9100:	61a5      	str	r5, [r4, #24]
}
    9102:	e7b7      	b.n	9074 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    9104:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    9106:	b133      	cbz	r3, 9116 <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
    9108:	f103 090c 	add.w	r9, r3, #12
    910c:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    910e:	3301      	adds	r3, #1
    9110:	f8c9 3000 	str.w	r3, [r9]
    9114:	e7ae      	b.n	9074 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    9116:	69e3      	ldr	r3, [r4, #28]
    9118:	f104 091c 	add.w	r9, r4, #28
    911c:	e7f7      	b.n	910e <send_frag+0xde>
	parent->next = child;
    911e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    9120:	69a3      	ldr	r3, [r4, #24]
    9122:	429d      	cmp	r5, r3
	list->tail = node;
    9124:	bf08      	it	eq
    9126:	61a2      	streq	r2, [r4, #24]
}
    9128:	e7d4      	b.n	90d4 <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    912a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    912c:	681b      	ldr	r3, [r3, #0]
    912e:	e7c7      	b.n	90c0 <send_frag+0x90>
			(*pending_no_cb)--;
    9130:	f8d9 3000 	ldr.w	r3, [r9]
    9134:	3b01      	subs	r3, #1
    9136:	f8c9 3000 	str.w	r3, [r9]
    913a:	e7cd      	b.n	90d8 <send_frag+0xa8>
	return true;
    913c:	2701      	movs	r7, #1
    913e:	e7db      	b.n	90f8 <send_frag+0xc8>
    9140:	20000138 	.word	0x20000138

00009144 <bt_conn_get_pkts>:
}
    9144:	4800      	ldr	r0, [pc, #0]	; (9148 <bt_conn_get_pkts+0x4>)
    9146:	4770      	bx	lr
    9148:	20000138 	.word	0x20000138

0000914c <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    914c:	1d03      	adds	r3, r0, #4
{
    914e:	b570      	push	{r4, r5, r6, lr}
    9150:	4604      	mov	r4, r0
    9152:	4618      	mov	r0, r3
    9154:	f01e faf0 	bl	27738 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9158:	0582      	lsls	r2, r0, #22
    915a:	d519      	bpl.n	9190 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    915c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9160:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    9164:	4291      	cmp	r1, r2
    9166:	d813      	bhi.n	9190 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    9168:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    916c:	4291      	cmp	r1, r2
    916e:	d30f      	bcc.n	9190 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    9170:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    9174:	4291      	cmp	r1, r2
    9176:	d10b      	bne.n	9190 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9178:	f3bf 8f5b 	dmb	ish
    917c:	e853 2f00 	ldrex	r2, [r3]
    9180:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    9184:	e843 2100 	strex	r1, r2, [r3]
    9188:	2900      	cmp	r1, #0
    918a:	d1f7      	bne.n	917c <notify_le_param_updated+0x30>
    918c:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    9190:	4b07      	ldr	r3, [pc, #28]	; (91b0 <notify_le_param_updated+0x64>)
    9192:	681d      	ldr	r5, [r3, #0]
    9194:	b905      	cbnz	r5, 9198 <notify_le_param_updated+0x4c>
}
    9196:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    9198:	68ee      	ldr	r6, [r5, #12]
    919a:	b13e      	cbz	r6, 91ac <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    919c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    91a0:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    91a4:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    91a8:	4620      	mov	r0, r4
    91aa:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    91ac:	69ad      	ldr	r5, [r5, #24]
    91ae:	e7f1      	b.n	9194 <notify_le_param_updated+0x48>
    91b0:	200021f8 	.word	0x200021f8

000091b4 <le_param_req>:
{
    91b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91b6:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    91b8:	4608      	mov	r0, r1
{
    91ba:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    91bc:	f01e fa39 	bl	27632 <bt_le_conn_params_valid>
    91c0:	4604      	mov	r4, r0
    91c2:	b910      	cbnz	r0, 91ca <le_param_req+0x16>
		return false;
    91c4:	2400      	movs	r4, #0
}
    91c6:	4620      	mov	r0, r4
    91c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    91ca:	4b09      	ldr	r3, [pc, #36]	; (91f0 <le_param_req+0x3c>)
    91cc:	681e      	ldr	r6, [r3, #0]
    91ce:	2e00      	cmp	r6, #0
    91d0:	d0f9      	beq.n	91c6 <le_param_req+0x12>
		if (!cb->le_param_req) {
    91d2:	68b3      	ldr	r3, [r6, #8]
    91d4:	b90b      	cbnz	r3, 91da <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    91d6:	69b6      	ldr	r6, [r6, #24]
    91d8:	e7f9      	b.n	91ce <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    91da:	4629      	mov	r1, r5
    91dc:	4638      	mov	r0, r7
    91de:	4798      	blx	r3
    91e0:	2800      	cmp	r0, #0
    91e2:	d0ef      	beq.n	91c4 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    91e4:	4628      	mov	r0, r5
    91e6:	f01e fa24 	bl	27632 <bt_le_conn_params_valid>
    91ea:	2800      	cmp	r0, #0
    91ec:	d1f3      	bne.n	91d6 <le_param_req+0x22>
    91ee:	e7e9      	b.n	91c4 <le_param_req+0x10>
    91f0:	200021f8 	.word	0x200021f8

000091f4 <bt_conn_identity_resolved>:
{
    91f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    91f6:	78c3      	ldrb	r3, [r0, #3]
{
    91f8:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    91fa:	b93b      	cbnz	r3, 920c <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    91fc:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    9200:	4b08      	ldr	r3, [pc, #32]	; (9224 <bt_conn_identity_resolved+0x30>)
    9202:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    9204:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    9208:	b91d      	cbnz	r5, 9212 <bt_conn_identity_resolved+0x1e>
}
    920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    920c:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    9210:	e7f6      	b.n	9200 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    9212:	692b      	ldr	r3, [r5, #16]
    9214:	b11b      	cbz	r3, 921e <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    9216:	463a      	mov	r2, r7
    9218:	4631      	mov	r1, r6
    921a:	4620      	mov	r0, r4
    921c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    921e:	69ad      	ldr	r5, [r5, #24]
    9220:	e7f2      	b.n	9208 <bt_conn_identity_resolved+0x14>
    9222:	bf00      	nop
    9224:	200021f8 	.word	0x200021f8

00009228 <bt_conn_security_changed>:
{
    9228:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    922a:	7a43      	ldrb	r3, [r0, #9]
    922c:	7283      	strb	r3, [r0, #10]
{
    922e:	4604      	mov	r4, r0
    9230:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    9232:	f01e fc86 	bl	27b42 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    9236:	4b06      	ldr	r3, [pc, #24]	; (9250 <bt_conn_security_changed+0x28>)
    9238:	681d      	ldr	r5, [r3, #0]
    923a:	b905      	cbnz	r5, 923e <bt_conn_security_changed+0x16>
}
    923c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    923e:	696b      	ldr	r3, [r5, #20]
    9240:	b11b      	cbz	r3, 924a <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    9242:	7a61      	ldrb	r1, [r4, #9]
    9244:	4632      	mov	r2, r6
    9246:	4620      	mov	r0, r4
    9248:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    924a:	69ad      	ldr	r5, [r5, #24]
    924c:	e7f5      	b.n	923a <bt_conn_security_changed+0x12>
    924e:	bf00      	nop
    9250:	200021f8 	.word	0x200021f8

00009254 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    9254:	b570      	push	{r4, r5, r6, lr}
    9256:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    9258:	f100 0634 	add.w	r6, r0, #52	; 0x34
    925c:	2200      	movs	r2, #0
    925e:	2300      	movs	r3, #0
    9260:	4630      	mov	r0, r6
    9262:	f022 fe6d 	bl	2bf40 <net_buf_get>
    9266:	4605      	mov	r5, r0
    9268:	b958      	cbnz	r0, 9282 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    926a:	4620      	mov	r0, r4
    926c:	f01e faf9 	bl	27862 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9270:	f104 0158 	add.w	r1, r4, #88	; 0x58
    9274:	4807      	ldr	r0, [pc, #28]	; (9294 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    9276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    927a:	2200      	movs	r2, #0
    927c:	2300      	movs	r3, #0
    927e:	f01a bd75 	b.w	23d6c <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    9282:	6968      	ldr	r0, [r5, #20]
    9284:	b108      	cbz	r0, 928a <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    9286:	f7ff feb3 	bl	8ff0 <tx_free>
		net_buf_unref(buf);
    928a:	4628      	mov	r0, r5
    928c:	f016 fd7e 	bl	1fd8c <net_buf_unref>
    9290:	e7e4      	b.n	925c <conn_cleanup+0x8>
    9292:	bf00      	nop
    9294:	20001fd8 	.word	0x20001fd8

00009298 <bt_conn_send_cb>:
{
    9298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    929c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    929e:	7b43      	ldrb	r3, [r0, #13]
    92a0:	2b07      	cmp	r3, #7
{
    92a2:	4606      	mov	r6, r0
    92a4:	460d      	mov	r5, r1
    92a6:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    92a8:	d005      	beq.n	92b6 <bt_conn_send_cb+0x1e>
		net_buf_unref(buf);
    92aa:	4608      	mov	r0, r1
    92ac:	f016 fd6e 	bl	1fd8c <net_buf_unref>
			return -ENOTCONN;
    92b0:	f06f 0038 	mvn.w	r0, #56	; 0x38
    92b4:	e015      	b.n	92e2 <bt_conn_send_cb+0x4a>
	if (cb) {
    92b6:	b362      	cbz	r2, 9312 <bt_conn_send_cb+0x7a>
	return z_impl_k_current_get();
    92b8:	f01a fbf6 	bl	23aa8 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    92bc:	4b16      	ldr	r3, [pc, #88]	; (9318 <bt_conn_send_cb+0x80>)
    92be:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    92c0:	4816      	ldr	r0, [pc, #88]	; (931c <bt_conn_send_cb+0x84>)
    92c2:	bf07      	ittee	eq
    92c4:	2200      	moveq	r2, #0
    92c6:	2300      	moveq	r3, #0
    92c8:	f04f 32ff 	movne.w	r2, #4294967295
    92cc:	f04f 33ff 	movne.w	r3, #4294967295
    92d0:	f01a f838 	bl	23344 <z_impl_k_queue_get>
    92d4:	4604      	mov	r4, r0
		if (!tx) {
    92d6:	b930      	cbnz	r0, 92e6 <bt_conn_send_cb+0x4e>
			net_buf_unref(buf);
    92d8:	4628      	mov	r0, r5
    92da:	f016 fd57 	bl	1fd8c <net_buf_unref>
			return -ENOBUFS;
    92de:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    92e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    92e6:	7b73      	ldrb	r3, [r6, #13]
    92e8:	2b07      	cmp	r3, #7
    92ea:	d006      	beq.n	92fa <bt_conn_send_cb+0x62>
			net_buf_unref(buf);
    92ec:	4628      	mov	r0, r5
    92ee:	f016 fd4d 	bl	1fd8c <net_buf_unref>
			tx_free(tx);
    92f2:	4620      	mov	r0, r4
    92f4:	f7ff fe7c 	bl	8ff0 <tx_free>
    92f8:	e7da      	b.n	92b0 <bt_conn_send_cb+0x18>
		tx->pending_no_cb = 0U;
    92fa:	2300      	movs	r3, #0
		tx->user_data = user_data;
    92fc:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    9300:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    9302:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    9304:	f106 0034 	add.w	r0, r6, #52	; 0x34
    9308:	4629      	mov	r1, r5
    930a:	f022 fe93 	bl	2c034 <net_buf_put>
	return 0;
    930e:	2000      	movs	r0, #0
    9310:	e7e7      	b.n	92e2 <bt_conn_send_cb+0x4a>
		tx_data(buf)->tx = NULL;
    9312:	614a      	str	r2, [r1, #20]
    9314:	e7f6      	b.n	9304 <bt_conn_send_cb+0x6c>
    9316:	bf00      	nop
    9318:	20001ff0 	.word	0x20001ff0
    931c:	20000e2c 	.word	0x20000e2c

00009320 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    9320:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    9322:	4b1b      	ldr	r3, [pc, #108]	; (9390 <bt_conn_prepare_events+0x70>)
    9324:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    9326:	2101      	movs	r1, #1
{
    9328:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    932a:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    932c:	f024 fad4 	bl	2d8d8 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    9330:	4b18      	ldr	r3, [pc, #96]	; (9394 <bt_conn_prepare_events+0x74>)
    9332:	f103 0054 	add.w	r0, r3, #84	; 0x54
    9336:	f01e f9ff 	bl	27738 <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    933a:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    933e:	4619      	mov	r1, r3
    9340:	b908      	cbnz	r0, 9346 <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
    9342:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    9344:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    9346:	7b5a      	ldrb	r2, [r3, #13]
    9348:	b99a      	cbnz	r2, 9372 <bt_conn_prepare_events+0x52>
    934a:	f3bf 8f5b 	dmb	ish
    934e:	1d1a      	adds	r2, r3, #4
    9350:	e852 0f00 	ldrex	r0, [r2]
    9354:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    9358:	e842 ce00 	strex	lr, ip, [r2]
    935c:	f1be 0f00 	cmp.w	lr, #0
    9360:	d1f6      	bne.n	9350 <bt_conn_prepare_events+0x30>
    9362:	f3bf 8f5b 	dmb	ish
    9366:	0642      	lsls	r2, r0, #25
    9368:	d503      	bpl.n	9372 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
    936a:	4618      	mov	r0, r3
    936c:	f7ff ff72 	bl	9254 <conn_cleanup>
    9370:	e7e7      	b.n	9342 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    9372:	7b4b      	ldrb	r3, [r1, #13]
    9374:	2b07      	cmp	r3, #7
    9376:	d1e4      	bne.n	9342 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    9378:	4b07      	ldr	r3, [pc, #28]	; (9398 <bt_conn_prepare_events+0x78>)
    937a:	4628      	mov	r0, r5
    937c:	2200      	movs	r2, #0
    937e:	2104      	movs	r1, #4
    9380:	f024 faaa 	bl	2d8d8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    9384:	2301      	movs	r3, #1
    9386:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    938a:	2002      	movs	r0, #2
	return ev_count;
    938c:	e7da      	b.n	9344 <bt_conn_prepare_events+0x24>
    938e:	bf00      	nop
    9390:	200003c4 	.word	0x200003c4
    9394:	20001130 	.word	0x20001130
    9398:	20001164 	.word	0x20001164

0000939c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    939c:	b570      	push	{r4, r5, r6, lr}
    939e:	4606      	mov	r6, r0
    93a0:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    93a2:	480f      	ldr	r0, [pc, #60]	; (93e0 <bt_conn_add_le+0x44>)
    93a4:	2101      	movs	r1, #1
    93a6:	f01e fa00 	bl	277aa <bt_conn_new>
	if (!conn) {
    93aa:	4604      	mov	r4, r0
    93ac:	b1b0      	cbz	r0, 93dc <bt_conn_add_le+0x40>
	k_delayed_work_init(&conn->deferred_work, deferred_work);
    93ae:	490d      	ldr	r1, [pc, #52]	; (93e4 <bt_conn_add_le+0x48>)
    93b0:	3058      	adds	r0, #88	; 0x58
    93b2:	f024 f8f7 	bl	2d5a4 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    93b6:	4a0c      	ldr	r2, [pc, #48]	; (93e8 <bt_conn_add_le+0x4c>)

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    93b8:	7226      	strb	r6, [r4, #8]
    93ba:	2300      	movs	r3, #0
    93bc:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    93c0:	62a3      	str	r3, [r4, #40]	; 0x28
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    93c2:	2207      	movs	r2, #7
    93c4:	4629      	mov	r1, r5
    93c6:	f104 0088 	add.w	r0, r4, #136	; 0x88
    93ca:	f01d faea 	bl	269a2 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    93ce:	2301      	movs	r3, #1
    93d0:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    93d2:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    93d4:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    93d6:	4b05      	ldr	r3, [pc, #20]	; (93ec <bt_conn_add_le+0x50>)
    93d8:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    93dc:	4620      	mov	r0, r4
    93de:	bd70      	pop	{r4, r5, r6, pc}
    93e0:	20001130 	.word	0x20001130
    93e4:	0000963d 	.word	0x0000963d
    93e8:	000277a5 	.word	0x000277a5
    93ec:	00280018 	.word	0x00280018

000093f0 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    93f0:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    93f2:	2101      	movs	r1, #1
    93f4:	4801      	ldr	r0, [pc, #4]	; (93fc <bt_conn_lookup_handle+0xc>)
    93f6:	f01e ba84 	b.w	27902 <conn_lookup_handle>
    93fa:	bf00      	nop
    93fc:	20001130 	.word	0x20001130

00009400 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    9400:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		if (!atomic_get(&acl_conns[i].ref)) {
    9402:	4c0c      	ldr	r4, [pc, #48]	; (9434 <bt_conn_lookup_addr_le+0x34>)
{
    9404:	4603      	mov	r3, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    9406:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    940a:	460a      	mov	r2, r1
		if (!atomic_get(&acl_conns[i].ref)) {
    940c:	f01e f994 	bl	27738 <atomic_get>
    9410:	b908      	cbnz	r0, 9416 <bt_conn_lookup_addr_le+0x16>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
    9412:	2000      	movs	r0, #0
}
    9414:	bd10      	pop	{r4, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
    9416:	78a1      	ldrb	r1, [r4, #2]
    9418:	2901      	cmp	r1, #1
    941a:	d1fa      	bne.n	9412 <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    941c:	4619      	mov	r1, r3
    941e:	4620      	mov	r0, r4
    9420:	f01e fa90 	bl	27944 <bt_conn_is_peer_addr_le>
    9424:	2800      	cmp	r0, #0
    9426:	d0f4      	beq.n	9412 <bt_conn_lookup_addr_le+0x12>
#endif /* defined(CONFIG_BT_ISO) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
    9428:	f104 0054 	add.w	r0, r4, #84	; 0x54
    942c:	f01e f98a 	bl	27744 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    9430:	4620      	mov	r0, r4
			return bt_conn_ref(&acl_conns[i]);
    9432:	e7ef      	b.n	9414 <bt_conn_lookup_addr_le+0x14>
    9434:	20001130 	.word	0x20001130

00009438 <bt_conn_lookup_state_le>:
{
    9438:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
    943a:	4c10      	ldr	r4, [pc, #64]	; (947c <bt_conn_lookup_state_le+0x44>)
{
    943c:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    943e:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    9442:	4616      	mov	r6, r2
		if (!atomic_get(&acl_conns[i].ref)) {
    9444:	f01e f978 	bl	27738 <atomic_get>
    9448:	b908      	cbnz	r0, 944e <bt_conn_lookup_state_le+0x16>
	return NULL;
    944a:	2000      	movs	r0, #0
}
    944c:	bd70      	pop	{r4, r5, r6, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
    944e:	78a3      	ldrb	r3, [r4, #2]
    9450:	2b01      	cmp	r3, #1
    9452:	d1fa      	bne.n	944a <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    9454:	b951      	cbnz	r1, 946c <bt_conn_lookup_state_le+0x34>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
    9456:	7b63      	ldrb	r3, [r4, #13]
    9458:	42b3      	cmp	r3, r6
    945a:	d1f6      	bne.n	944a <bt_conn_lookup_state_le+0x12>
    945c:	7a23      	ldrb	r3, [r4, #8]
    945e:	42ab      	cmp	r3, r5
    9460:	d1f3      	bne.n	944a <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    9462:	4807      	ldr	r0, [pc, #28]	; (9480 <bt_conn_lookup_state_le+0x48>)
    9464:	f01e f96e 	bl	27744 <atomic_inc>
			return bt_conn_ref(&acl_conns[i]);
    9468:	4804      	ldr	r0, [pc, #16]	; (947c <bt_conn_lookup_state_le+0x44>)
    946a:	e7ef      	b.n	944c <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    946c:	460a      	mov	r2, r1
    946e:	4620      	mov	r0, r4
    9470:	4629      	mov	r1, r5
    9472:	f01e fa67 	bl	27944 <bt_conn_is_peer_addr_le>
    9476:	2800      	cmp	r0, #0
    9478:	d1ed      	bne.n	9456 <bt_conn_lookup_state_le+0x1e>
    947a:	e7e6      	b.n	944a <bt_conn_lookup_state_le+0x12>
    947c:	20001130 	.word	0x20001130
    9480:	20001184 	.word	0x20001184

00009484 <bt_conn_set_state>:
{
    9484:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    9486:	7b45      	ldrb	r5, [r0, #13]
    9488:	428d      	cmp	r5, r1
{
    948a:	4604      	mov	r4, r0
	if (conn->state == state) {
    948c:	f000 80a1 	beq.w	95d2 <bt_conn_set_state+0x14e>
	conn->state = state;
    9490:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    9492:	b915      	cbnz	r5, 949a <bt_conn_set_state+0x16>
	atomic_val_t old = atomic_inc(&conn->ref);
    9494:	3054      	adds	r0, #84	; 0x54
    9496:	f01e f955 	bl	27744 <atomic_inc>
	switch (conn->state) {
    949a:	7b63      	ldrb	r3, [r4, #13]
    949c:	2b01      	cmp	r3, #1
    949e:	d116      	bne.n	94ce <bt_conn_set_state+0x4a>
	z_impl_k_sem_give(sem);
    94a0:	4d4c      	ldr	r5, [pc, #304]	; (95d4 <bt_conn_set_state+0x150>)
		tx->pending_no_cb = 0U;
    94a2:	2600      	movs	r6, #0
	__asm__ volatile(
    94a4:	f04f 0320 	mov.w	r3, #32
    94a8:	f3ef 8211 	mrs	r2, BASEPRI
    94ac:	f383 8811 	msr	BASEPRI, r3
    94b0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    94b4:	69e3      	ldr	r3, [r4, #28]
    94b6:	2b00      	cmp	r3, #0
    94b8:	d06c      	beq.n	9594 <bt_conn_set_state+0x110>
			conn->pending_no_cb--;
    94ba:	3b01      	subs	r3, #1
    94bc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    94be:	f382 8811 	msr	BASEPRI, r2
    94c2:	f3bf 8f6f 	isb	sy
    94c6:	4628      	mov	r0, r5
    94c8:	f01a faf4 	bl	23ab4 <z_impl_k_sem_give>
}
    94cc:	e7ea      	b.n	94a4 <bt_conn_set_state+0x20>
	switch (conn->state) {
    94ce:	2b07      	cmp	r3, #7
    94d0:	d009      	beq.n	94e6 <bt_conn_set_state+0x62>
    94d2:	2b00      	cmp	r3, #0
    94d4:	d17d      	bne.n	95d2 <bt_conn_set_state+0x14e>
		if (conn->type == BT_CONN_TYPE_SCO) {
    94d6:	78a3      	ldrb	r3, [r4, #2]
    94d8:	2b04      	cmp	r3, #4
    94da:	d125      	bne.n	9528 <bt_conn_set_state+0xa4>
			bt_conn_unref(conn);
    94dc:	4620      	mov	r0, r4
}
    94de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    94e2:	f01e ba4f 	b.w	27984 <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    94e6:	78a3      	ldrb	r3, [r4, #2]
    94e8:	2b04      	cmp	r3, #4
    94ea:	d072      	beq.n	95d2 <bt_conn_set_state+0x14e>
	z_impl_k_queue_init(queue);
    94ec:	f104 0034 	add.w	r0, r4, #52	; 0x34
    94f0:	f023 fea7 	bl	2d242 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    94f4:	2100      	movs	r1, #0
    94f6:	4838      	ldr	r0, [pc, #224]	; (95d8 <bt_conn_set_state+0x154>)
    94f8:	f01a fe58 	bl	241ac <z_impl_k_poll_signal_raise>
	list->head = NULL;
    94fc:	2300      	movs	r3, #0
	list->tail = NULL;
    94fe:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    9502:	4620      	mov	r0, r4
    9504:	f000 f9d4 	bl	98b0 <bt_l2cap_connected>
		notify_connected(conn);
    9508:	4620      	mov	r0, r4
    950a:	f7ff fd7b 	bl	9004 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    950e:	78e3      	ldrb	r3, [r4, #3]
    9510:	2b01      	cmp	r3, #1
    9512:	d15e      	bne.n	95d2 <bt_conn_set_state+0x14e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9514:	f104 0158 	add.w	r1, r4, #88	; 0x58
    9518:	4830      	ldr	r0, [pc, #192]	; (95dc <bt_conn_set_state+0x158>)
}
    951a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    951e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    9522:	2300      	movs	r3, #0
    9524:	f01a bc22 	b.w	23d6c <k_delayed_work_submit_to_queue>
		switch (old_state) {
    9528:	3d01      	subs	r5, #1
    952a:	2d05      	cmp	r5, #5
    952c:	d851      	bhi.n	95d2 <bt_conn_set_state+0x14e>
    952e:	a301      	add	r3, pc, #4	; (adr r3, 9534 <bt_conn_set_state+0xb0>)
    9530:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    9534:	0000954d 	.word	0x0000954d
    9538:	00009587 	.word	0x00009587
    953c:	000094dd 	.word	0x000094dd
    9540:	000094dd 	.word	0x000094dd
    9544:	00009587 	.word	0x00009587
    9548:	00009587 	.word	0x00009587
			tx_notify(conn);
    954c:	4620      	mov	r0, r4
    954e:	f01e f906 	bl	2775e <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    9552:	78a3      	ldrb	r3, [r4, #2]
    9554:	2b01      	cmp	r3, #1
    9556:	d103      	bne.n	9560 <bt_conn_set_state+0xdc>
				k_delayed_work_cancel(&conn->deferred_work);
    9558:	f104 0058 	add.w	r0, r4, #88	; 0x58
    955c:	f024 f82a 	bl	2d5b4 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9560:	f3bf 8f5b 	dmb	ish
    9564:	3404      	adds	r4, #4
    9566:	e854 3f00 	ldrex	r3, [r4]
    956a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    956e:	e844 3200 	strex	r2, r3, [r4]
    9572:	2a00      	cmp	r2, #0
    9574:	d1f7      	bne.n	9566 <bt_conn_set_state+0xe2>
    9576:	f3bf 8f5b 	dmb	ish
    957a:	4817      	ldr	r0, [pc, #92]	; (95d8 <bt_conn_set_state+0x154>)
}
    957c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9580:	2100      	movs	r1, #0
    9582:	f01a be13 	b.w	241ac <z_impl_k_poll_signal_raise>
			if (conn->err) {
    9586:	7b23      	ldrb	r3, [r4, #12]
    9588:	2b00      	cmp	r3, #0
    958a:	d0a7      	beq.n	94dc <bt_conn_set_state+0x58>
				notify_connected(conn);
    958c:	4620      	mov	r0, r4
    958e:	f7ff fd39 	bl	9004 <notify_connected>
    9592:	e7a3      	b.n	94dc <bt_conn_set_state+0x58>
Z_GENLIST_IS_EMPTY(slist)
    9594:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    9596:	b128      	cbz	r0, 95a4 <bt_conn_set_state+0x120>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9598:	69a1      	ldr	r1, [r4, #24]
    959a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    959c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    959e:	4288      	cmp	r0, r1
	list->tail = node;
    95a0:	bf08      	it	eq
    95a2:	61a3      	streq	r3, [r4, #24]
    95a4:	f382 8811 	msr	BASEPRI, r2
    95a8:	f3bf 8f6f 	isb	sy
		if (!node) {
    95ac:	b188      	cbz	r0, 95d2 <bt_conn_set_state+0x14e>
	__asm__ volatile(
    95ae:	f04f 0220 	mov.w	r2, #32
    95b2:	f3ef 8311 	mrs	r3, BASEPRI
    95b6:	f382 8811 	msr	BASEPRI, r2
    95ba:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    95be:	68c2      	ldr	r2, [r0, #12]
    95c0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    95c2:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    95c4:	f383 8811 	msr	BASEPRI, r3
    95c8:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    95cc:	f7ff fd10 	bl	8ff0 <tx_free>
    95d0:	e779      	b.n	94c6 <bt_conn_set_state+0x42>
}
    95d2:	bd70      	pop	{r4, r5, r6, pc}
    95d4:	20000138 	.word	0x20000138
    95d8:	200003c4 	.word	0x200003c4
    95dc:	20001fd8 	.word	0x20001fd8

000095e0 <send_conn_le_param_update>:
{
    95e0:	b538      	push	{r3, r4, r5, lr}
    95e2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    95e4:	4608      	mov	r0, r1
{
    95e6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    95e8:	f01e f823 	bl	27632 <bt_le_conn_params_valid>
    95ec:	b308      	cbz	r0, 9632 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    95ee:	4b12      	ldr	r3, [pc, #72]	; (9638 <send_conn_le_param_update+0x58>)
    95f0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    95f4:	0799      	lsls	r1, r3, #30
    95f6:	d407      	bmi.n	9608 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    95f8:	78e3      	ldrb	r3, [r4, #3]
    95fa:	b173      	cbz	r3, 961a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    95fc:	4629      	mov	r1, r5
    95fe:	4620      	mov	r0, r4
}
    9600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    9604:	f000 b9b0 	b.w	9968 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9608:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    960c:	079a      	lsls	r2, r3, #30
    960e:	d5f3      	bpl.n	95f8 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9610:	1d20      	adds	r0, r4, #4
    9612:	f01e f891 	bl	27738 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    9616:	0543      	lsls	r3, r0, #21
    9618:	d4ee      	bmi.n	95f8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    961a:	4629      	mov	r1, r5
    961c:	4620      	mov	r0, r4
    961e:	f01e f9f7 	bl	27a10 <bt_conn_le_conn_update>
		if (rc == 0) {
    9622:	b928      	cbnz	r0, 9630 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    9624:	88ab      	ldrh	r3, [r5, #4]
    9626:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    962a:	88eb      	ldrh	r3, [r5, #6]
    962c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    9630:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9632:	f06f 0015 	mvn.w	r0, #21
    9636:	e7fb      	b.n	9630 <send_conn_le_param_update+0x50>
    9638:	20000068 	.word	0x20000068

0000963c <deferred_work>:
{
    963c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    963e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    9642:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    9644:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    9648:	b993      	cbnz	r3, 9670 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    964a:	4630      	mov	r0, r6
    964c:	f01e fa63 	bl	27b16 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    9650:	4b1f      	ldr	r3, [pc, #124]	; (96d0 <deferred_work+0x94>)
    9652:	681d      	ldr	r5, [r3, #0]
    9654:	b925      	cbnz	r5, 9660 <deferred_work+0x24>
		bt_conn_unref(conn);
    9656:	4630      	mov	r0, r6
    9658:	f01e f994 	bl	27984 <bt_conn_unref>
}
    965c:	b002      	add	sp, #8
    965e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    9660:	686b      	ldr	r3, [r5, #4]
    9662:	b11b      	cbz	r3, 966c <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    9664:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    9668:	4630      	mov	r0, r6
    966a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    966c:	69ad      	ldr	r5, [r5, #24]
    966e:	e7f1      	b.n	9654 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    9670:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    9674:	2b01      	cmp	r3, #1
    9676:	d1f1      	bne.n	965c <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9678:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    967c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    9680:	e855 3f00 	ldrex	r3, [r5]
    9684:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    9688:	e845 2100 	strex	r1, r2, [r5]
    968c:	2900      	cmp	r1, #0
    968e:	d1f7      	bne.n	9680 <deferred_work+0x44>
    9690:	f3bf 8f5b 	dmb	ish
    9694:	059b      	lsls	r3, r3, #22
    9696:	d514      	bpl.n	96c2 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    9698:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    969a:	9300      	str	r3, [sp, #0]
    969c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    969e:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    96a0:	4669      	mov	r1, sp
    96a2:	4630      	mov	r0, r6
    96a4:	f7ff ff9c 	bl	95e0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    96a8:	f3bf 8f5b 	dmb	ish
    96ac:	e855 3f00 	ldrex	r3, [r5]
    96b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    96b4:	e845 3200 	strex	r2, r3, [r5]
    96b8:	2a00      	cmp	r2, #0
    96ba:	d1f7      	bne.n	96ac <deferred_work+0x70>
    96bc:	f3bf 8f5b 	dmb	ish
    96c0:	e7cc      	b.n	965c <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    96c2:	4a04      	ldr	r2, [pc, #16]	; (96d4 <deferred_work+0x98>)
    96c4:	6810      	ldr	r0, [r2, #0]
    96c6:	6851      	ldr	r1, [r2, #4]
    96c8:	466b      	mov	r3, sp
    96ca:	c303      	stmia	r3!, {r0, r1}
    96cc:	e7e8      	b.n	96a0 <deferred_work+0x64>
    96ce:	bf00      	nop
    96d0:	200021f8 	.word	0x200021f8
    96d4:	0002dce4 	.word	0x0002dce4

000096d8 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    96d8:	b538      	push	{r3, r4, r5, lr}
    96da:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    96dc:	4906      	ldr	r1, [pc, #24]	; (96f8 <bt_conn_create_pdu_timeout+0x20>)
    96de:	2800      	cmp	r0, #0
    96e0:	bf08      	it	eq
    96e2:	4608      	moveq	r0, r1
    96e4:	f022 fc27 	bl	2bf36 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    96e8:	4604      	mov	r4, r0
    96ea:	b118      	cbz	r0, 96f4 <bt_conn_create_pdu_timeout+0x1c>
		BT_WARN("Unable to allocate buffer within timeout");
		return NULL;
	}

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);
    96ec:	1d29      	adds	r1, r5, #4
    96ee:	3008      	adds	r0, #8
    96f0:	f022 fc46 	bl	2bf80 <net_buf_simple_reserve>

	return buf;
}
    96f4:	4620      	mov	r0, r4
    96f6:	bd38      	pop	{r3, r4, r5, pc}
    96f8:	20000e5c 	.word	0x20000e5c

000096fc <bt_conn_create_frag_timeout>:
{
    96fc:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    96fe:	4801      	ldr	r0, [pc, #4]	; (9704 <bt_conn_create_frag_timeout+0x8>)
    9700:	f7ff bfea 	b.w	96d8 <bt_conn_create_pdu_timeout>
    9704:	20000ed4 	.word	0x20000ed4

00009708 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    9708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    970c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    970e:	f04f 33ff 	mov.w	r3, #4294967295
    9712:	f04f 32ff 	mov.w	r2, #4294967295
    9716:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    9718:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    971a:	f7ff ffef 	bl	96fc <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    971e:	7833      	ldrb	r3, [r6, #0]
    9720:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    9722:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9724:	f04f 0600 	mov.w	r6, #0
    9728:	d005      	beq.n	9736 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    972a:	f016 fb2f 	bl	1fd8c <net_buf_unref>
		return NULL;
    972e:	4635      	mov	r5, r6
}
    9730:	4628      	mov	r0, r5
    9732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    9736:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9738:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    973c:	4e0c      	ldr	r6, [pc, #48]	; (9770 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    973e:	4638      	mov	r0, r7
    9740:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    9744:	f022 fd55 	bl	2c1f2 <net_buf_simple_tailroom>
    9748:	4580      	cmp	r8, r0
    974a:	d20c      	bcs.n	9766 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    974c:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	net_buf_add_mem(frag, buf->data, frag_len);
    9750:	f854 1f08 	ldr.w	r1, [r4, #8]!
    9754:	4632      	mov	r2, r6
    9756:	4638      	mov	r0, r7
    9758:	f022 fca5 	bl	2c0a6 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    975c:	4631      	mov	r1, r6
    975e:	4620      	mov	r0, r4
    9760:	f022 fd0f 	bl	2c182 <net_buf_simple_pull>
	return frag;
    9764:	e7e4      	b.n	9730 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9766:	4638      	mov	r0, r7
    9768:	f022 fd43 	bl	2c1f2 <net_buf_simple_tailroom>
    976c:	b286      	uxth	r6, r0
    976e:	e7ef      	b.n	9750 <create_frag.isra.0+0x48>
    9770:	20000068 	.word	0x20000068

00009774 <bt_conn_process_tx>:
{
    9774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    9776:	7b43      	ldrb	r3, [r0, #13]
{
    9778:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    977a:	b993      	cbnz	r3, 97a2 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    977c:	f3bf 8f5b 	dmb	ish
    9780:	1d03      	adds	r3, r0, #4
    9782:	e853 2f00 	ldrex	r2, [r3]
    9786:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    978a:	e843 1400 	strex	r4, r1, [r3]
    978e:	2c00      	cmp	r4, #0
    9790:	d1f7      	bne.n	9782 <bt_conn_process_tx+0xe>
    9792:	f3bf 8f5b 	dmb	ish
    9796:	0653      	lsls	r3, r2, #25
    9798:	d503      	bpl.n	97a2 <bt_conn_process_tx+0x2e>
}
    979a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    979e:	f7ff bd59 	b.w	9254 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    97a2:	2200      	movs	r2, #0
    97a4:	2300      	movs	r3, #0
    97a6:	f105 0034 	add.w	r0, r5, #52	; 0x34
    97aa:	f022 fbc9 	bl	2bf40 <net_buf_get>
	BT_ASSERT(buf);
    97ae:	4604      	mov	r4, r0
    97b0:	b960      	cbnz	r0, 97cc <bt_conn_process_tx+0x58>
    97b2:	4a20      	ldr	r2, [pc, #128]	; (9834 <bt_conn_process_tx+0xc0>)
    97b4:	4920      	ldr	r1, [pc, #128]	; (9838 <bt_conn_process_tx+0xc4>)
    97b6:	4821      	ldr	r0, [pc, #132]	; (983c <bt_conn_process_tx+0xc8>)
    97b8:	f240 5355 	movw	r3, #1365	; 0x555
    97bc:	f01a fe7a 	bl	244b4 <printk>
    97c0:	4040      	eors	r0, r0
    97c2:	f380 8811 	msr	BASEPRI, r0
    97c6:	f04f 0003 	mov.w	r0, #3
    97ca:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    97cc:	4f1c      	ldr	r7, [pc, #112]	; (9840 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    97ce:	89a1      	ldrh	r1, [r4, #12]
    97d0:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
    97d4:	4291      	cmp	r1, r2
    97d6:	d807      	bhi.n	97e8 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    97d8:	2300      	movs	r3, #0
    97da:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    97dc:	4621      	mov	r1, r4
    97de:	4628      	mov	r0, r5
    97e0:	f7ff fc26 	bl	9030 <send_frag>
	if (!send_buf(conn, buf)) {
    97e4:	b140      	cbz	r0, 97f8 <bt_conn_process_tx+0x84>
}
    97e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    97e8:	f105 060d 	add.w	r6, r5, #13
    97ec:	4621      	mov	r1, r4
    97ee:	4630      	mov	r0, r6
    97f0:	f7ff ff8a 	bl	9708 <create_frag.isra.0>
	if (!frag) {
    97f4:	4601      	mov	r1, r0
    97f6:	b920      	cbnz	r0, 9802 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    97f8:	4620      	mov	r0, r4
}
    97fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    97fe:	f016 bac5 	b.w	1fd8c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    9802:	2301      	movs	r3, #1
    9804:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    9806:	4628      	mov	r0, r5
    9808:	f7ff fc12 	bl	9030 <send_frag>
    980c:	2800      	cmp	r0, #0
    980e:	d0f3      	beq.n	97f8 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    9810:	89a2      	ldrh	r2, [r4, #12]
    9812:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    9816:	429a      	cmp	r2, r3
    9818:	d802      	bhi.n	9820 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    981a:	2300      	movs	r3, #0
    981c:	2203      	movs	r2, #3
    981e:	e7dd      	b.n	97dc <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    9820:	4621      	mov	r1, r4
    9822:	4630      	mov	r0, r6
    9824:	f7ff ff70 	bl	9708 <create_frag.isra.0>
		if (!frag) {
    9828:	4601      	mov	r1, r0
    982a:	2800      	cmp	r0, #0
    982c:	d0e4      	beq.n	97f8 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    982e:	2301      	movs	r3, #1
    9830:	461a      	mov	r2, r3
    9832:	e7e8      	b.n	9806 <bt_conn_process_tx+0x92>
    9834:	000333bf 	.word	0x000333bf
    9838:	000332db 	.word	0x000332db
    983c:	000332be 	.word	0x000332be
    9840:	20000068 	.word	0x20000068

00009844 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    9844:	4b03      	ldr	r3, [pc, #12]	; (9854 <bt_conn_index+0x10>)
    9846:	1ac0      	subs	r0, r0, r3
    9848:	4b03      	ldr	r3, [pc, #12]	; (9858 <bt_conn_index+0x14>)
    984a:	10c0      	asrs	r0, r0, #3
    984c:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
    984e:	b2c0      	uxtb	r0, r0
    9850:	4770      	bx	lr
    9852:	bf00      	nop
    9854:	20001130 	.word	0x20001130
    9858:	e9bd37a7 	.word	0xe9bd37a7

0000985c <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    985c:	b570      	push	{r4, r5, r6, lr}
    985e:	4d0b      	ldr	r5, [pc, #44]	; (988c <bt_conn_init+0x30>)
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    9860:	4e0b      	ldr	r6, [pc, #44]	; (9890 <bt_conn_init+0x34>)
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    9862:	2400      	movs	r4, #0
		k_fifo_put(&free_tx, &conn_tx[i]);
    9864:	4629      	mov	r1, r5
    9866:	4630      	mov	r0, r6
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    9868:	3401      	adds	r4, #1
		k_fifo_put(&free_tx, &conn_tx[i]);
    986a:	f023 fcf6 	bl	2d25a <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    986e:	2c08      	cmp	r4, #8
    9870:	f105 0510 	add.w	r5, r5, #16
    9874:	d1f6      	bne.n	9864 <bt_conn_init+0x8>
	}

	bt_att_init();
    9876:	f01e fdcf 	bl	28418 <bt_att_init>

	err = bt_smp_init();
    987a:	f002 fda9 	bl	c3d0 <bt_smp_init>
	if (err) {
    987e:	4604      	mov	r4, r0
    9880:	b908      	cbnz	r0, 9886 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    9882:	f01e f9fc 	bl	27c7e <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    9886:	4620      	mov	r0, r4
    9888:	bd70      	pop	{r4, r5, r6, pc}
    988a:	bf00      	nop
    988c:	200021fc 	.word	0x200021fc
    9890:	20000e2c 	.word	0x20000e2c

00009894 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    9894:	4b04      	ldr	r3, [pc, #16]	; (98a8 <l2cap_accept+0x14>)
    9896:	6818      	ldr	r0, [r3, #0]
    9898:	b918      	cbnz	r0, 98a2 <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    989a:	4a04      	ldr	r2, [pc, #16]	; (98ac <l2cap_accept+0x18>)
    989c:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    989e:	600b      	str	r3, [r1, #0]

		return 0;
    98a0:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    98a2:	f06f 000b 	mvn.w	r0, #11
}
    98a6:	4770      	bx	lr
    98a8:	200011e8 	.word	0x200011e8
    98ac:	0002e0f8 	.word	0x0002e0f8

000098b0 <bt_l2cap_connected>:
{
    98b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    98b4:	4e29      	ldr	r6, [pc, #164]	; (995c <bt_l2cap_connected+0xac>)
    98b6:	4f2a      	ldr	r7, [pc, #168]	; (9960 <bt_l2cap_connected+0xb0>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    98b8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 9964 <bt_l2cap_connected+0xb4>
{
    98bc:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    98be:	42be      	cmp	r6, r7
    98c0:	d302      	bcc.n	98c8 <bt_l2cap_connected+0x18>
}
    98c2:	b003      	add	sp, #12
    98c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    98c8:	6873      	ldr	r3, [r6, #4]
    98ca:	a901      	add	r1, sp, #4
    98cc:	4620      	mov	r0, r4
    98ce:	4798      	blx	r3
    98d0:	2800      	cmp	r0, #0
    98d2:	db3d      	blt.n	9950 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    98d4:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    98d6:	8833      	ldrh	r3, [r6, #0]
    98d8:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    98dc:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    98e0:	4641      	mov	r1, r8
    98e2:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    98e6:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    98ea:	f023 fe5b 	bl	2d5a4 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    98ee:	f3bf 8f5b 	dmb	ish
    98f2:	f105 0340 	add.w	r3, r5, #64	; 0x40
    98f6:	2200      	movs	r2, #0
    98f8:	e853 1f00 	ldrex	r1, [r3]
    98fc:	e843 2000 	strex	r0, r2, [r3]
    9900:	2800      	cmp	r0, #0
    9902:	d1f9      	bne.n	98f8 <bt_l2cap_connected+0x48>
    9904:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    9908:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    990a:	6d22      	ldr	r2, [r4, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    990c:	f105 0308 	add.w	r3, r5, #8
    9910:	bb02      	cbnz	r2, 9954 <bt_l2cap_connected+0xa4>
	list->head = node;
    9912:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		if (chan->ops->connected) {
    9916:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    9918:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    991a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    991c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    9920:	681b      	ldr	r3, [r3, #0]
    9922:	b103      	cbz	r3, 9926 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    9924:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9926:	9b01      	ldr	r3, [sp, #4]
    9928:	f3bf 8f5b 	dmb	ish
    992c:	3340      	adds	r3, #64	; 0x40
    992e:	e853 2f00 	ldrex	r2, [r3]
    9932:	f042 0201 	orr.w	r2, r2, #1
    9936:	e843 2100 	strex	r1, r2, [r3]
    993a:	2900      	cmp	r1, #0
    993c:	d1f7      	bne.n	992e <bt_l2cap_connected+0x7e>
    993e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    9942:	9801      	ldr	r0, [sp, #4]
    9944:	6843      	ldr	r3, [r0, #4]
    9946:	699b      	ldr	r3, [r3, #24]
    9948:	b113      	cbz	r3, 9950 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    994a:	f100 0140 	add.w	r1, r0, #64	; 0x40
    994e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    9950:	360c      	adds	r6, #12
    9952:	e7b4      	b.n	98be <bt_l2cap_connected+0xe>
	parent->next = child;
    9954:	6013      	str	r3, [r2, #0]
	list->tail = node;
    9956:	6523      	str	r3, [r4, #80]	; 0x50
}
    9958:	e7dd      	b.n	9916 <bt_l2cap_connected+0x66>
    995a:	bf00      	nop
    995c:	0002db90 	.word	0x0002db90
    9960:	0002dbb4 	.word	0x0002dbb4
    9964:	00027aff 	.word	0x00027aff

00009968 <bt_l2cap_update_conn_param>:
{
    9968:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    996a:	4b15      	ldr	r3, [pc, #84]	; (99c0 <bt_l2cap_update_conn_param+0x58>)
    996c:	781a      	ldrb	r2, [r3, #0]
    996e:	3201      	adds	r2, #1
	if (!ident) {
    9970:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    9974:	bf08      	it	eq
    9976:	2201      	moveq	r2, #1
    9978:	701a      	strb	r2, [r3, #0]
{
    997a:	4605      	mov	r5, r0
    997c:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    997e:	2208      	movs	r2, #8
    9980:	7819      	ldrb	r1, [r3, #0]
    9982:	2012      	movs	r0, #18
    9984:	f01e f86d 	bl	27a62 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    9988:	4606      	mov	r6, r0
    998a:	b1b0      	cbz	r0, 99ba <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    998c:	2108      	movs	r1, #8
    998e:	4408      	add	r0, r1
    9990:	f022 fb83 	bl	2c09a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    9994:	8822      	ldrh	r2, [r4, #0]
    9996:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    9998:	8862      	ldrh	r2, [r4, #2]
    999a:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    999c:	88a2      	ldrh	r2, [r4, #4]
    999e:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    99a0:	88e2      	ldrh	r2, [r4, #6]
    99a2:	80c2      	strh	r2, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    99a4:	2400      	movs	r4, #0
    99a6:	9400      	str	r4, [sp, #0]
    99a8:	4623      	mov	r3, r4
    99aa:	4632      	mov	r2, r6
    99ac:	2105      	movs	r1, #5
    99ae:	4628      	mov	r0, r5
    99b0:	f01e f8e4 	bl	27b7c <bt_l2cap_send_cb>
	return 0;
    99b4:	4620      	mov	r0, r4
}
    99b6:	b002      	add	sp, #8
    99b8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    99ba:	f06f 000b 	mvn.w	r0, #11
    99be:	e7fa      	b.n	99b6 <bt_l2cap_update_conn_param+0x4e>
    99c0:	2000912c 	.word	0x2000912c

000099c4 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    99c4:	4b02      	ldr	r3, [pc, #8]	; (99d0 <att_cfm_sent+0xc>)
    99c6:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    99ca:	f01e b986 	b.w	27cda <att_sent>
    99ce:	bf00      	nop
    99d0:	00028075 	.word	0x00028075

000099d4 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    99d4:	4b02      	ldr	r3, [pc, #8]	; (99e0 <att_rsp_sent+0xc>)
    99d6:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    99da:	f01e b97e 	b.w	27cda <att_sent>
    99de:	bf00      	nop
    99e0:	00028091 	.word	0x00028091

000099e4 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    99e4:	4b02      	ldr	r3, [pc, #8]	; (99f0 <att_req_sent+0xc>)
    99e6:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    99ea:	f01e b976 	b.w	27cda <att_sent>
    99ee:	bf00      	nop
    99f0:	00009b61 	.word	0x00009b61

000099f4 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    99f4:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    99f6:	3808      	subs	r0, #8
    99f8:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    99fa:	a901      	add	r1, sp, #4
    99fc:	4802      	ldr	r0, [pc, #8]	; (9a08 <bt_att_released+0x14>)
    99fe:	f019 fbb9 	bl	23174 <k_mem_slab_free>
}
    9a02:	b003      	add	sp, #12
    9a04:	f85d fb04 	ldr.w	pc, [sp], #4
    9a08:	20000d20 	.word	0x20000d20

00009a0c <read_group_cb>:
{
    9a0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9a10:	4606      	mov	r6, r0
    9a12:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9a14:	f04f 0800 	mov.w	r8, #0
    9a18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9a1c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    9a1e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9a20:	f88d 8008 	strb.w	r8, [sp, #8]
    9a24:	a902      	add	r1, sp, #8
{
    9a26:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9a28:	f8ad 300a 	strh.w	r3, [sp, #10]
    9a2c:	f01d fa68 	bl	26f00 <bt_uuid_cmp>
    9a30:	b1a0      	cbz	r0, 9a5c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9a32:	f642 0301 	movw	r3, #10241	; 0x2801
    9a36:	6830      	ldr	r0, [r6, #0]
    9a38:	f88d 800c 	strb.w	r8, [sp, #12]
    9a3c:	a903      	add	r1, sp, #12
    9a3e:	f8ad 300e 	strh.w	r3, [sp, #14]
    9a42:	f01d fa5d 	bl	26f00 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9a46:	b148      	cbz	r0, 9a5c <read_group_cb+0x50>
		if (data->group &&
    9a48:	6923      	ldr	r3, [r4, #16]
    9a4a:	b11b      	cbz	r3, 9a54 <read_group_cb+0x48>
    9a4c:	885a      	ldrh	r2, [r3, #2]
    9a4e:	42aa      	cmp	r2, r5
    9a50:	d200      	bcs.n	9a54 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    9a52:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    9a54:	2001      	movs	r0, #1
}
    9a56:	b004      	add	sp, #16
    9a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9a5c:	6861      	ldr	r1, [r4, #4]
    9a5e:	6830      	ldr	r0, [r6, #0]
    9a60:	f01d fa4e 	bl	26f00 <bt_uuid_cmp>
    9a64:	b110      	cbz	r0, 9a6c <read_group_cb+0x60>
		data->group = NULL;
    9a66:	2300      	movs	r3, #0
    9a68:	6123      	str	r3, [r4, #16]
    9a6a:	e7f3      	b.n	9a54 <read_group_cb+0x48>
	if (data->rsp->len &&
    9a6c:	68e3      	ldr	r3, [r4, #12]
    9a6e:	68a0      	ldr	r0, [r4, #8]
    9a70:	781a      	ldrb	r2, [r3, #0]
    9a72:	b13a      	cbz	r2, 9a84 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    9a74:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    9a78:	8981      	ldrh	r1, [r0, #12]
    9a7a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    9a7c:	4293      	cmp	r3, r2
    9a7e:	da01      	bge.n	9a84 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    9a80:	2000      	movs	r0, #0
    9a82:	e7e8      	b.n	9a56 <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9a84:	2104      	movs	r1, #4
    9a86:	3008      	adds	r0, #8
    9a88:	f022 fb07 	bl	2c09a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9a8c:	4b09      	ldr	r3, [pc, #36]	; (9ab4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9a8e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9a90:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    9a92:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    9a94:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    9a96:	4631      	mov	r1, r6
    9a98:	9300      	str	r3, [sp, #0]
    9a9a:	9401      	str	r4, [sp, #4]
    9a9c:	2300      	movs	r3, #0
    9a9e:	4638      	mov	r0, r7
    9aa0:	f01e f96b 	bl	27d7a <att_chan_read>
	if (read < 0) {
    9aa4:	2800      	cmp	r0, #0
    9aa6:	dbeb      	blt.n	9a80 <read_group_cb+0x74>
	if (!data->group) {
    9aa8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    9aaa:	3800      	subs	r0, #0
    9aac:	bf18      	it	ne
    9aae:	2001      	movne	r0, #1
    9ab0:	e7d1      	b.n	9a56 <read_group_cb+0x4a>
    9ab2:	bf00      	nop
    9ab4:	00028051 	.word	0x00028051

00009ab8 <read_type_cb>:
{
    9ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    9abc:	f8d2 8000 	ldr.w	r8, [r2]
{
    9ac0:	4606      	mov	r6, r0
    9ac2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9ac4:	6800      	ldr	r0, [r0, #0]
    9ac6:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    9ac8:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    9acc:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9ace:	f01d fa17 	bl	26f00 <bt_uuid_cmp>
    9ad2:	4607      	mov	r7, r0
    9ad4:	2800      	cmp	r0, #0
    9ad6:	d13e      	bne.n	9b56 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    9ad8:	4628      	mov	r0, r5
    9ada:	2215      	movs	r2, #21
    9adc:	4631      	mov	r1, r6
    9ade:	f01f f93f 	bl	28d60 <bt_gatt_check_perm>
    9ae2:	4605      	mov	r5, r0
    9ae4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    9ae6:	b148      	cbz	r0, 9afc <read_type_cb+0x44>
		if (data->rsp->len) {
    9ae8:	68e3      	ldr	r3, [r4, #12]
    9aea:	781b      	ldrb	r3, [r3, #0]
    9aec:	b923      	cbnz	r3, 9af8 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    9aee:	2500      	movs	r5, #0
}
    9af0:	4628      	mov	r0, r5
    9af2:	b003      	add	sp, #12
    9af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    9af8:	7527      	strb	r7, [r4, #20]
    9afa:	e7f8      	b.n	9aee <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    9afc:	68a0      	ldr	r0, [r4, #8]
    9afe:	f022 faaa 	bl	2c056 <net_buf_frag_last>
    9b02:	2102      	movs	r1, #2
    9b04:	3008      	adds	r0, #8
    9b06:	f022 fac8 	bl	2c09a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    9b0a:	4b14      	ldr	r3, [pc, #80]	; (9b5c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    9b0c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    9b0e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    9b10:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    9b14:	4631      	mov	r1, r6
    9b16:	9300      	str	r3, [sp, #0]
    9b18:	9401      	str	r4, [sp, #4]
    9b1a:	462b      	mov	r3, r5
    9b1c:	4640      	mov	r0, r8
    9b1e:	f01e f92c 	bl	27d7a <att_chan_read>
	if (read < 0) {
    9b22:	2800      	cmp	r0, #0
    9b24:	da07      	bge.n	9b36 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    9b26:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    9b2a:	bf26      	itte	cs
    9b2c:	4240      	negcs	r0, r0
    9b2e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    9b30:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    9b32:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    9b34:	e7dc      	b.n	9af0 <read_type_cb+0x38>
	if (!data->item) {
    9b36:	6923      	ldr	r3, [r4, #16]
    9b38:	2b00      	cmp	r3, #0
    9b3a:	d0d8      	beq.n	9aee <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    9b3c:	68a0      	ldr	r0, [r4, #8]
    9b3e:	f01e f8c4 	bl	27cca <net_buf_frags_len>
    9b42:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9b46:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    9b48:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9b4a:	7818      	ldrb	r0, [r3, #0]
    9b4c:	4285      	cmp	r5, r0
    9b4e:	bf94      	ite	ls
    9b50:	2500      	movls	r5, #0
    9b52:	2501      	movhi	r5, #1
    9b54:	e7cc      	b.n	9af0 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    9b56:	2501      	movs	r5, #1
    9b58:	e7ca      	b.n	9af0 <read_type_cb+0x38>
    9b5a:	bf00      	nop
    9b5c:	00027ce7 	.word	0x00027ce7

00009b60 <chan_req_sent>:
	if (chan->req) {
    9b60:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    9b64:	b13b      	cbz	r3, 9b76 <chan_req_sent+0x16>
    9b66:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    9b6a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    9b6e:	4802      	ldr	r0, [pc, #8]	; (9b78 <chan_req_sent+0x18>)
    9b70:	2300      	movs	r3, #0
    9b72:	f01a b8fb 	b.w	23d6c <k_delayed_work_submit_to_queue>
}
    9b76:	4770      	bx	lr
    9b78:	20001fd8 	.word	0x20001fd8

00009b7c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    9b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9b7e:	2300      	movs	r3, #0
{
    9b80:	4607      	mov	r7, r0
    9b82:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    9b84:	4822      	ldr	r0, [pc, #136]	; (9c10 <bt_att_accept+0x94>)
    9b86:	2200      	movs	r2, #0
    9b88:	4669      	mov	r1, sp
    9b8a:	f019 fac1 	bl	23110 <k_mem_slab_alloc>
    9b8e:	4604      	mov	r4, r0
    9b90:	b120      	cbz	r0, 9b9c <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    9b92:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    9b96:	4620      	mov	r0, r4
    9b98:	b003      	add	sp, #12
    9b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    9b9c:	4601      	mov	r1, r0
    9b9e:	222c      	movs	r2, #44	; 0x2c
    9ba0:	9800      	ldr	r0, [sp, #0]
    9ba2:	f01c ff29 	bl	269f8 <memset>
	att->conn = conn;
    9ba6:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    9ba8:	481a      	ldr	r0, [pc, #104]	; (9c14 <bt_att_accept+0x98>)
	list->tail = NULL;
    9baa:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    9bac:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    9bb0:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    9bb4:	2200      	movs	r2, #0
    9bb6:	2300      	movs	r3, #0
    9bb8:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    9bba:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    9bbc:	f019 faa8 	bl	23110 <k_mem_slab_alloc>
    9bc0:	4604      	mov	r4, r0
    9bc2:	2800      	cmp	r0, #0
    9bc4:	d1e5      	bne.n	9b92 <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    9bc6:	4601      	mov	r1, r0
    9bc8:	f44f 7298 	mov.w	r2, #304	; 0x130
    9bcc:	9801      	ldr	r0, [sp, #4]
    9bce:	f01c ff13 	bl	269f8 <memset>
	chan->chan.chan.ops = &ops;
    9bd2:	9801      	ldr	r0, [sp, #4]
    9bd4:	4b10      	ldr	r3, [pc, #64]	; (9c18 <bt_att_accept+0x9c>)
    9bd6:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    9bd8:	30c8      	adds	r0, #200	; 0xc8
    9bda:	f023 fb32 	bl	2d242 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    9bde:	9801      	ldr	r0, [sp, #4]
    9be0:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    9be4:	2208      	movs	r2, #8
    9be6:	4611      	mov	r1, r2
    9be8:	f023 fc5c 	bl	2d4a4 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9bec:	9b01      	ldr	r3, [sp, #4]
    9bee:	f3bf 8f5b 	dmb	ish
    9bf2:	33c0      	adds	r3, #192	; 0xc0
    9bf4:	e853 2f00 	ldrex	r2, [r3]
    9bf8:	e843 4100 	strex	r1, r4, [r3]
    9bfc:	2900      	cmp	r1, #0
    9bfe:	d1f9      	bne.n	9bf4 <bt_att_accept+0x78>
    9c00:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    9c04:	9b01      	ldr	r3, [sp, #4]
    9c06:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    9c0a:	6033      	str	r3, [r6, #0]
	return 0;
    9c0c:	e7c3      	b.n	9b96 <bt_att_accept+0x1a>
    9c0e:	bf00      	nop
    9c10:	20000d04 	.word	0x20000d04
    9c14:	20000d20 	.word	0x20000d20
    9c18:	200003d4 	.word	0x200003d4

00009c1c <bt_att_connected>:
{
    9c1c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    9c1e:	2104      	movs	r1, #4
{
    9c20:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    9c22:	6800      	ldr	r0, [r0, #0]
    9c24:	f01d fff0 	bl	27c08 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    9c28:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    9c2c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    9c2e:	b91b      	cbnz	r3, 9c38 <bt_att_connected+0x1c>
	z_impl_k_queue_init(queue);
    9c30:	f105 000c 	add.w	r0, r5, #12
    9c34:	f023 fb05 	bl	2d242 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    9c38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	parent->next = child;
    9c3a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    9c3e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    9c40:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    9c44:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    9c46:	b902      	cbnz	r2, 9c4a <bt_att_connected+0x2e>
	list->tail = node;
    9c48:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9c4a:	f3bf 8f5b 	dmb	ish
    9c4e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    9c52:	4908      	ldr	r1, [pc, #32]	; (9c74 <bt_att_connected+0x58>)
    9c54:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    9c58:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9c5a:	bf5e      	ittt	pl
    9c5c:	2317      	movpl	r3, #23
    9c5e:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9c62:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    9c66:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
    9c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    9c6e:	f023 bc99 	b.w	2d5a4 <k_delayed_work_init>
    9c72:	bf00      	nop
    9c74:	000284b5 	.word	0x000284b5

00009c78 <chan_send>:
{
    9c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9c7c:	688b      	ldr	r3, [r1, #8]
    9c7e:	781b      	ldrb	r3, [r3, #0]
    9c80:	2bd2      	cmp	r3, #210	; 0xd2
{
    9c82:	4605      	mov	r5, r0
    9c84:	460c      	mov	r4, r1
    9c86:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9c88:	d10c      	bne.n	9ca4 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    9c8a:	6803      	ldr	r3, [r0, #0]
    9c8c:	6818      	ldr	r0, [r3, #0]
    9c8e:	f01f fd14 	bl	296ba <bt_smp_sign>
		if (err) {
    9c92:	4606      	mov	r6, r0
    9c94:	b130      	cbz	r0, 9ca4 <chan_send+0x2c>
		net_buf_unref(buf);
    9c96:	4620      	mov	r0, r4
    9c98:	f016 f878 	bl	1fd8c <net_buf_unref>
}
    9c9c:	4630      	mov	r0, r6
    9c9e:	b003      	add	sp, #12
    9ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    9ca4:	f104 0008 	add.w	r0, r4, #8
    9ca8:	f022 fa9f 	bl	2c1ea <net_buf_simple_headroom>
	state->len = buf->len;
    9cac:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    9cb0:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    9cb2:	f1b9 0f00 	cmp.w	r9, #0
    9cb6:	d10a      	bne.n	9cce <chan_send+0x56>
	switch (att_op_get_type(buf->data[0])) {
    9cb8:	68a3      	ldr	r3, [r4, #8]
    9cba:	7818      	ldrb	r0, [r3, #0]
    9cbc:	f01e f825 	bl	27d0a <att_op_get_type>
    9cc0:	1e43      	subs	r3, r0, #1
    9cc2:	b2db      	uxtb	r3, r3
    9cc4:	2b04      	cmp	r3, #4
    9cc6:	bf9c      	itt	ls
    9cc8:	4a16      	ldrls	r2, [pc, #88]	; (9d24 <chan_send+0xac>)
    9cca:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    9cce:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    9cd0:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    9cd4:	4620      	mov	r0, r4
    9cd6:	681e      	ldr	r6, [r3, #0]
    9cd8:	f022 f9b9 	bl	2c04e <net_buf_ref>
    9cdc:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    9ce0:	4b11      	ldr	r3, [pc, #68]	; (9d28 <chan_send+0xb0>)
    9ce2:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    9ce4:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    9ce6:	d019      	beq.n	9d1c <chan_send+0xa4>
	} else if (cb == chan_cfm_sent) {
    9ce8:	4b10      	ldr	r3, [pc, #64]	; (9d2c <chan_send+0xb4>)
    9cea:	4299      	cmp	r1, r3
    9cec:	d018      	beq.n	9d20 <chan_send+0xa8>
		return att_sent;
    9cee:	f8df c050 	ldr.w	ip, [pc, #80]	; 9d40 <chan_send+0xc8>
    9cf2:	4b0f      	ldr	r3, [pc, #60]	; (9d30 <chan_send+0xb8>)
    9cf4:	480f      	ldr	r0, [pc, #60]	; (9d34 <chan_send+0xbc>)
    9cf6:	4561      	cmp	r1, ip
    9cf8:	bf18      	it	ne
    9cfa:	4603      	movne	r3, r0
				&chan->chan.chan);
    9cfc:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    9cfe:	4630      	mov	r0, r6
    9d00:	9500      	str	r5, [sp, #0]
    9d02:	2104      	movs	r1, #4
    9d04:	f01d ff3a 	bl	27b7c <bt_l2cap_send_cb>
	if (!err) {
    9d08:	4606      	mov	r6, r0
    9d0a:	2800      	cmp	r0, #0
    9d0c:	d0c3      	beq.n	9c96 <chan_send+0x1e>
	buf->data = buf->__buf + state->offset;
    9d0e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    9d10:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9d14:	fa10 f787 	uxtah	r7, r0, r7
    9d18:	60a7      	str	r7, [r4, #8]
}
    9d1a:	e7bf      	b.n	9c9c <chan_send+0x24>
		return att_rsp_sent;
    9d1c:	4b06      	ldr	r3, [pc, #24]	; (9d38 <chan_send+0xc0>)
    9d1e:	e7ed      	b.n	9cfc <chan_send+0x84>
		return att_cfm_sent;
    9d20:	4b06      	ldr	r3, [pc, #24]	; (9d3c <chan_send+0xc4>)
    9d22:	e7eb      	b.n	9cfc <chan_send+0x84>
    9d24:	0002e118 	.word	0x0002e118
    9d28:	00028091 	.word	0x00028091
    9d2c:	00028075 	.word	0x00028075
    9d30:	000099e5 	.word	0x000099e5
    9d34:	00027cdb 	.word	0x00027cdb
    9d38:	000099d5 	.word	0x000099d5
    9d3c:	000099c5 	.word	0x000099c5
    9d40:	00009b61 	.word	0x00009b61

00009d44 <att_write_cmd>:
{
    9d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d46:	4604      	mov	r4, r0
    9d48:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    9d4a:	f101 0008 	add.w	r0, r1, #8
{
    9d4e:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    9d50:	f022 fa2f 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9d54:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
    9d56:	68af      	ldr	r7, [r5, #8]
    9d58:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
    9d5a:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9d5c:	2100      	movs	r1, #0
    9d5e:	6818      	ldr	r0, [r3, #0]
    9d60:	f01f f829 	bl	28db6 <bt_gatt_change_aware>
    9d64:	b328      	cbz	r0, 9db2 <att_write_cmd+0x6e>
	if (!handle) {
    9d66:	b336      	cbz	r6, 9db6 <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
    9d68:	2218      	movs	r2, #24
    9d6a:	2100      	movs	r1, #0
    9d6c:	4668      	mov	r0, sp
    9d6e:	f01c fe43 	bl	269f8 <memset>
	data.conn = chan->att->conn;
    9d72:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9d74:	4a11      	ldr	r2, [pc, #68]	; (9dbc <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
    9d76:	681b      	ldr	r3, [r3, #0]
    9d78:	9300      	str	r3, [sp, #0]
	data.req = req;
    9d7a:	2300      	movs	r3, #0
    9d7c:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
    9d80:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9d84:	2301      	movs	r3, #1
    9d86:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9d8a:	4631      	mov	r1, r6
    9d8c:	466b      	mov	r3, sp
    9d8e:	4630      	mov	r0, r6
	data.value = value;
    9d90:	9703      	str	r7, [sp, #12]
	data.len = len;
    9d92:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9d96:	f01d ffe5 	bl	27d64 <bt_gatt_foreach_attr>
	if (data.err) {
    9d9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9d9e:	b92b      	cbnz	r3, 9dac <att_write_cmd+0x68>
	if (data.buf) {
    9da0:	9901      	ldr	r1, [sp, #4]
    9da2:	b119      	cbz	r1, 9dac <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9da4:	4a06      	ldr	r2, [pc, #24]	; (9dc0 <att_write_cmd+0x7c>)
    9da6:	4620      	mov	r0, r4
    9da8:	f01e fa68 	bl	2827c <bt_att_chan_send_rsp>
    9dac:	2000      	movs	r0, #0
}
    9dae:	b007      	add	sp, #28
    9db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9db2:	2012      	movs	r0, #18
    9db4:	e7fb      	b.n	9dae <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
    9db6:	2001      	movs	r0, #1
    9db8:	e7f9      	b.n	9dae <att_write_cmd+0x6a>
    9dba:	bf00      	nop
    9dbc:	000280d9 	.word	0x000280d9
    9dc0:	00028091 	.word	0x00028091

00009dc4 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    9dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9dc8:	4688      	mov	r8, r1
    9dca:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9dcc:	2101      	movs	r1, #1
    9dce:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    9dd0:	4605      	mov	r5, r0
    9dd2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    9dd4:	f01e fabb 	bl	2834e <bt_att_chan_create_pdu>
	if (!buf) {
    9dd8:	4604      	mov	r4, r0
    9dda:	b178      	cbz	r0, 9dfc <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    9ddc:	2104      	movs	r1, #4
    9dde:	3008      	adds	r0, #8
    9de0:	f022 f95b 	bl	2c09a <net_buf_simple_add>
	rsp->request = req;
    9de4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    9de8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    9dea:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    9dee:	4621      	mov	r1, r4
    9df0:	4628      	mov	r0, r5
    9df2:	4a03      	ldr	r2, [pc, #12]	; (9e00 <send_err_rsp.part.0+0x3c>)
}
    9df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    9df8:	f01e ba40 	b.w	2827c <bt_att_chan_send_rsp>
}
    9dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e00:	00028091 	.word	0x00028091

00009e04 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    9e04:	898b      	ldrh	r3, [r1, #12]
{
    9e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e0a:	4604      	mov	r4, r0
    9e0c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    9e0e:	2b00      	cmp	r3, #0
    9e10:	d05a      	beq.n	9ec8 <bt_att_recv+0xc4>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9e12:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    9e14:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9e18:	f105 0008 	add.w	r0, r5, #8
    9e1c:	f022 f9b9 	bl	2c192 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    9e20:	4a2d      	ldr	r2, [pc, #180]	; (9ed8 <bt_att_recv+0xd4>)
    9e22:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    9e24:	4607      	mov	r7, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9e26:	2300      	movs	r3, #0
    9e28:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    9e2a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    9e2e:	4288      	cmp	r0, r1
    9e30:	d11a      	bne.n	9e68 <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
    9e32:	00d9      	lsls	r1, r3, #3
    9e34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9e38:	f893 8002 	ldrb.w	r8, [r3, #2]
    9e3c:	f1b8 0f01 	cmp.w	r8, #1
    9e40:	d020      	beq.n	9e84 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    9e42:	f1b8 0f05 	cmp.w	r8, #5
    9e46:	d12d      	bne.n	9ea4 <bt_att_recv+0xa0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9e48:	f3bf 8f5b 	dmb	ish
    9e4c:	34b8      	adds	r4, #184	; 0xb8
    9e4e:	e854 2f00 	ldrex	r2, [r4]
    9e52:	f042 0302 	orr.w	r3, r2, #2
    9e56:	e844 3000 	strex	r0, r3, [r4]
    9e5a:	2800      	cmp	r0, #0
    9e5c:	d1f7      	bne.n	9e4e <bt_att_recv+0x4a>
    9e5e:	f3bf 8f5b 	dmb	ish
    9e62:	f012 0f02 	tst.w	r2, #2
    9e66:	e01c      	b.n	9ea2 <bt_att_recv+0x9e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9e68:	3301      	adds	r3, #1
    9e6a:	2b0d      	cmp	r3, #13
    9e6c:	d1dd      	bne.n	9e2a <bt_att_recv+0x26>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9e6e:	4608      	mov	r0, r1
    9e70:	f01d ff4b 	bl	27d0a <att_op_get_type>
    9e74:	b340      	cbz	r0, 9ec8 <bt_att_recv+0xc4>
	if (!req) {
    9e76:	b339      	cbz	r1, 9ec8 <bt_att_recv+0xc4>
    9e78:	2306      	movs	r3, #6
    9e7a:	2200      	movs	r2, #0
    9e7c:	4630      	mov	r0, r6
    9e7e:	f7ff ffa1 	bl	9dc4 <send_err_rsp.part.0>
    9e82:	e021      	b.n	9ec8 <bt_att_recv+0xc4>
    9e84:	34b8      	adds	r4, #184	; 0xb8
    9e86:	f3bf 8f5b 	dmb	ish
    9e8a:	e854 3f00 	ldrex	r3, [r4]
    9e8e:	f043 0201 	orr.w	r2, r3, #1
    9e92:	e844 2000 	strex	r0, r2, [r4]
    9e96:	2800      	cmp	r0, #0
    9e98:	d1f7      	bne.n	9e8a <bt_att_recv+0x86>
    9e9a:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    9e9e:	f013 0f01 	tst.w	r3, #1
    9ea2:	d111      	bne.n	9ec8 <bt_att_recv+0xc4>
	if (buf->len < handler->expect_len) {
    9ea4:	eb0c 0301 	add.w	r3, ip, r1
    9ea8:	89a9      	ldrh	r1, [r5, #12]
    9eaa:	785a      	ldrb	r2, [r3, #1]
    9eac:	4291      	cmp	r1, r2
    9eae:	d30e      	bcc.n	9ece <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
    9eb0:	685b      	ldr	r3, [r3, #4]
    9eb2:	4629      	mov	r1, r5
    9eb4:	4630      	mov	r0, r6
    9eb6:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    9eb8:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    9ebc:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    9ebe:	d103      	bne.n	9ec8 <bt_att_recv+0xc4>
    9ec0:	b110      	cbz	r0, 9ec8 <bt_att_recv+0xc4>
		send_err_rsp(att_chan, hdr->code, 0, err);
    9ec2:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    9ec4:	2900      	cmp	r1, #0
    9ec6:	d1d8      	bne.n	9e7a <bt_att_recv+0x76>
}
    9ec8:	2000      	movs	r0, #0
    9eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    9ece:	f1b8 0f01 	cmp.w	r8, #1
    9ed2:	d1f9      	bne.n	9ec8 <bt_att_recv+0xc4>
		err = BT_ATT_ERR_INVALID_PDU;
    9ed4:	2304      	movs	r3, #4
    9ed6:	e7f4      	b.n	9ec2 <bt_att_recv+0xbe>
    9ed8:	0002e12c 	.word	0x0002e12c

00009edc <att_write_req>:
{
    9edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9ee0:	4604      	mov	r4, r0
    9ee2:	b087      	sub	sp, #28
	handle = net_buf_pull_le16(buf);
    9ee4:	f101 0008 	add.w	r0, r1, #8
{
    9ee8:	460d      	mov	r5, r1
	handle = net_buf_pull_le16(buf);
    9eea:	f022 f962 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9eee:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
    9ef0:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    9ef4:	89ad      	ldrh	r5, [r5, #12]
	handle = net_buf_pull_le16(buf);
    9ef6:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    9ef8:	2101      	movs	r1, #1
    9efa:	6818      	ldr	r0, [r3, #0]
    9efc:	f01e ff5b 	bl	28db6 <bt_gatt_change_aware>
    9f00:	2800      	cmp	r0, #0
    9f02:	d040      	beq.n	9f86 <att_write_req+0xaa>
	if (!handle) {
    9f04:	2e00      	cmp	r6, #0
    9f06:	d040      	beq.n	9f8a <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
    9f08:	2218      	movs	r2, #24
    9f0a:	2100      	movs	r1, #0
    9f0c:	4668      	mov	r0, sp
    9f0e:	f01c fd73 	bl	269f8 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    9f12:	2200      	movs	r2, #0
    9f14:	2113      	movs	r1, #19
    9f16:	4620      	mov	r0, r4
    9f18:	f01e fa19 	bl	2834e <bt_att_chan_create_pdu>
    9f1c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    9f1e:	b380      	cbz	r0, 9f82 <att_write_req+0xa6>
	data.conn = chan->att->conn;
    9f20:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9f22:	4a1b      	ldr	r2, [pc, #108]	; (9f90 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
    9f24:	681b      	ldr	r3, [r3, #0]
    9f26:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9f28:	2301      	movs	r3, #1
    9f2a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
    9f2e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
    9f32:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9f34:	466b      	mov	r3, sp
    9f36:	4631      	mov	r1, r6
    9f38:	4630      	mov	r0, r6
	data.len = len;
    9f3a:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
    9f3e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
    9f42:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
    9f46:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9f4a:	f01d ff0b 	bl	27d64 <bt_gatt_foreach_attr>
	if (data.err) {
    9f4e:	f89d 5014 	ldrb.w	r5, [sp, #20]
    9f52:	b175      	cbz	r5, 9f72 <att_write_req+0x96>
			net_buf_unref(data.buf);
    9f54:	9801      	ldr	r0, [sp, #4]
    9f56:	f015 ff19 	bl	1fd8c <net_buf_unref>
	if (!req) {
    9f5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9f5e:	4632      	mov	r2, r6
    9f60:	4641      	mov	r1, r8
    9f62:	4620      	mov	r0, r4
    9f64:	f7ff ff2e 	bl	9dc4 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    9f68:	463d      	mov	r5, r7
}
    9f6a:	4628      	mov	r0, r5
    9f6c:	b007      	add	sp, #28
    9f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
    9f72:	9901      	ldr	r1, [sp, #4]
    9f74:	2900      	cmp	r1, #0
    9f76:	d0f8      	beq.n	9f6a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9f78:	4a06      	ldr	r2, [pc, #24]	; (9f94 <att_write_req+0xb8>)
    9f7a:	4620      	mov	r0, r4
    9f7c:	f01e f97e 	bl	2827c <bt_att_chan_send_rsp>
    9f80:	e7f3      	b.n	9f6a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
    9f82:	250e      	movs	r5, #14
    9f84:	e7f1      	b.n	9f6a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9f86:	2512      	movs	r5, #18
    9f88:	e7ef      	b.n	9f6a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
    9f8a:	2501      	movs	r5, #1
    9f8c:	e7ed      	b.n	9f6a <att_write_req+0x8e>
    9f8e:	bf00      	nop
    9f90:	000280d9 	.word	0x000280d9
    9f94:	00028091 	.word	0x00028091

00009f98 <att_read_group_req>:
{
    9f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9f9c:	7b0c      	ldrb	r4, [r1, #12]
    9f9e:	3c04      	subs	r4, #4
    9fa0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9fa2:	2c02      	cmp	r4, #2
{
    9fa4:	4605      	mov	r5, r0
    9fa6:	b08c      	sub	sp, #48	; 0x30
    9fa8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    9faa:	d001      	beq.n	9fb0 <att_read_group_req+0x18>
    9fac:	2c10      	cmp	r4, #16
    9fae:	d16f      	bne.n	a090 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    9fb0:	2104      	movs	r1, #4
    9fb2:	3008      	adds	r0, #8
    9fb4:	f022 f8ed 	bl	2c192 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9fb8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    9fbc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9fbe:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9fc0:	1d01      	adds	r1, r0, #4
    9fc2:	4622      	mov	r2, r4
    9fc4:	4640      	mov	r0, r8
    9fc6:	f01c ffc5 	bl	26f54 <bt_uuid_create>
    9fca:	2800      	cmp	r0, #0
    9fcc:	d062      	beq.n	a094 <att_read_group_req+0xfc>
	if (!start || !end) {
    9fce:	2e00      	cmp	r6, #0
    9fd0:	d03a      	beq.n	a048 <att_read_group_req+0xb0>
    9fd2:	2400      	movs	r4, #0
    9fd4:	2f00      	cmp	r7, #0
    9fd6:	d036      	beq.n	a046 <att_read_group_req+0xae>
	if (start > end) {
    9fd8:	42be      	cmp	r6, r7
    9fda:	d835      	bhi.n	a048 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9fdc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9fe0:	a901      	add	r1, sp, #4
    9fe2:	4640      	mov	r0, r8
    9fe4:	f88d 4004 	strb.w	r4, [sp, #4]
    9fe8:	f8ad 3006 	strh.w	r3, [sp, #6]
    9fec:	f01c ff88 	bl	26f00 <bt_uuid_cmp>
    9ff0:	2800      	cmp	r0, #0
    9ff2:	d134      	bne.n	a05e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    9ff4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9ff6:	2214      	movs	r2, #20
    9ff8:	2100      	movs	r1, #0
    9ffa:	a807      	add	r0, sp, #28
    9ffc:	f01c fcfc 	bl	269f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    a000:	2201      	movs	r2, #1
    a002:	2111      	movs	r1, #17
    a004:	4620      	mov	r0, r4
    a006:	f01e f9c7 	bl	28398 <bt_att_create_pdu>
    a00a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    a00c:	2800      	cmp	r0, #0
    a00e:	d041      	beq.n	a094 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a010:	2101      	movs	r1, #1
    a012:	3008      	adds	r0, #8
	data.uuid = uuid;
    a014:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a018:	f022 f83f 	bl	2c09a <net_buf_simple_add>
	data.rsp->len = 0U;
    a01c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a020:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a022:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    a024:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a028:	4a1b      	ldr	r2, [pc, #108]	; (a098 <att_read_group_req+0x100>)
	data.group = NULL;
    a02a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    a02e:	4639      	mov	r1, r7
    a030:	4630      	mov	r0, r6
    a032:	f01d fe97 	bl	27d64 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    a036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a038:	781c      	ldrb	r4, [r3, #0]
    a03a:	bb1c      	cbnz	r4, a084 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    a03c:	9809      	ldr	r0, [sp, #36]	; 0x24
    a03e:	f015 fea5 	bl	1fd8c <net_buf_unref>
	if (!req) {
    a042:	230a      	movs	r3, #10
    a044:	e018      	b.n	a078 <att_read_group_req+0xe0>
			*err = 0U;
    a046:	463e      	mov	r6, r7
	if (!req) {
    a048:	2301      	movs	r3, #1
    a04a:	4632      	mov	r2, r6
    a04c:	2110      	movs	r1, #16
    a04e:	4628      	mov	r0, r5
    a050:	f7ff feb8 	bl	9dc4 <send_err_rsp.part.0>
		return 0;
    a054:	2400      	movs	r4, #0
}
    a056:	4620      	mov	r0, r4
    a058:	b00c      	add	sp, #48	; 0x30
    a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    a05e:	f642 0301 	movw	r3, #10241	; 0x2801
    a062:	a907      	add	r1, sp, #28
    a064:	4640      	mov	r0, r8
    a066:	f88d 401c 	strb.w	r4, [sp, #28]
    a06a:	f8ad 301e 	strh.w	r3, [sp, #30]
    a06e:	f01c ff47 	bl	26f00 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    a072:	2800      	cmp	r0, #0
    a074:	d0be      	beq.n	9ff4 <att_read_group_req+0x5c>
	if (!req) {
    a076:	2310      	movs	r3, #16
    a078:	4632      	mov	r2, r6
    a07a:	2110      	movs	r1, #16
    a07c:	4628      	mov	r0, r5
    a07e:	f7ff fea1 	bl	9dc4 <send_err_rsp.part.0>
		return 0;
    a082:	e7e8      	b.n	a056 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a084:	4a05      	ldr	r2, [pc, #20]	; (a09c <att_read_group_req+0x104>)
    a086:	9909      	ldr	r1, [sp, #36]	; 0x24
    a088:	4628      	mov	r0, r5
    a08a:	f01e f8f7 	bl	2827c <bt_att_chan_send_rsp>
	return 0;
    a08e:	e7e1      	b.n	a054 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    a090:	2404      	movs	r4, #4
    a092:	e7e0      	b.n	a056 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    a094:	240e      	movs	r4, #14
    a096:	e7de      	b.n	a056 <att_read_group_req+0xbe>
    a098:	00009a0d 	.word	0x00009a0d
    a09c:	00028091 	.word	0x00028091

0000a0a0 <att_read_mult_req>:
{
    a0a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    a0a4:	6886      	ldr	r6, [r0, #8]
{
    a0a6:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    a0a8:	2210      	movs	r2, #16
{
    a0aa:	4604      	mov	r4, r0
    a0ac:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    a0ae:	4668      	mov	r0, sp
    a0b0:	2100      	movs	r1, #0
    a0b2:	f01c fca1 	bl	269f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    a0b6:	2200      	movs	r2, #0
    a0b8:	210f      	movs	r1, #15
    a0ba:	4630      	mov	r0, r6
    a0bc:	f01e f96c 	bl	28398 <bt_att_create_pdu>
    a0c0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a0c2:	b360      	cbz	r0, a11e <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a0c4:	f8df 9060 	ldr.w	r9, [pc, #96]	; a128 <att_read_mult_req+0x88>
	data.chan = chan;
    a0c8:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
    a0ca:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a0ce:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    a0d2:	89ab      	ldrh	r3, [r5, #12]
    a0d4:	2b01      	cmp	r3, #1
    a0d6:	d805      	bhi.n	a0e4 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a0d8:	4a12      	ldr	r2, [pc, #72]	; (a124 <att_read_mult_req+0x84>)
    a0da:	9902      	ldr	r1, [sp, #8]
    a0dc:	4620      	mov	r0, r4
    a0de:	f01e f8cd 	bl	2827c <bt_att_chan_send_rsp>
    a0e2:	e018      	b.n	a116 <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    a0e4:	4638      	mov	r0, r7
    a0e6:	f022 f864 	bl	2c1b2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a0ea:	466b      	mov	r3, sp
    a0ec:	464a      	mov	r2, r9
    a0ee:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    a0f0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    a0f2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a0f6:	f01d fe35 	bl	27d64 <bt_gatt_foreach_attr>
		if (data.err) {
    a0fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a0fe:	2b00      	cmp	r3, #0
    a100:	d0e7      	beq.n	a0d2 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    a102:	9802      	ldr	r0, [sp, #8]
    a104:	f015 fe42 	bl	1fd8c <net_buf_unref>
	if (!req) {
    a108:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a10c:	4632      	mov	r2, r6
    a10e:	210e      	movs	r1, #14
    a110:	4620      	mov	r0, r4
    a112:	f7ff fe57 	bl	9dc4 <send_err_rsp.part.0>
	return 0;
    a116:	2000      	movs	r0, #0
}
    a118:	b005      	add	sp, #20
    a11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    a11e:	200e      	movs	r0, #14
    a120:	e7fa      	b.n	a118 <att_read_mult_req+0x78>
    a122:	bf00      	nop
    a124:	00028091 	.word	0x00028091
    a128:	00028135 	.word	0x00028135

0000a12c <att_read_rsp>:
{
    a12c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    a130:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    a134:	4605      	mov	r5, r0
    a136:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    a138:	4640      	mov	r0, r8
    a13a:	2101      	movs	r1, #1
{
    a13c:	4614      	mov	r4, r2
    a13e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    a140:	f01e fe39 	bl	28db6 <bt_gatt_change_aware>
    a144:	b390      	cbz	r0, a1ac <att_read_rsp+0x80>
	if (!handle) {
    a146:	b39e      	cbz	r6, a1b0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    a148:	2210      	movs	r2, #16
    a14a:	2100      	movs	r1, #0
    a14c:	4668      	mov	r0, sp
    a14e:	f01c fc53 	bl	269f8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    a152:	2200      	movs	r2, #0
    a154:	4621      	mov	r1, r4
    a156:	4640      	mov	r0, r8
    a158:	f01e f91e 	bl	28398 <bt_att_create_pdu>
    a15c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a15e:	b348      	cbz	r0, a1b4 <att_read_rsp+0x88>
	data.offset = offset;
    a160:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a164:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    a168:	2301      	movs	r3, #1
    a16a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a16e:	4a12      	ldr	r2, [pc, #72]	; (a1b8 <att_read_rsp+0x8c>)
	data.chan = chan;
    a170:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    a172:	466b      	mov	r3, sp
    a174:	4631      	mov	r1, r6
    a176:	4630      	mov	r0, r6
    a178:	f01d fdf4 	bl	27d64 <bt_gatt_foreach_attr>
	if (data.err) {
    a17c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    a180:	b174      	cbz	r4, a1a0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    a182:	9802      	ldr	r0, [sp, #8]
    a184:	f015 fe02 	bl	1fd8c <net_buf_unref>
	if (!req) {
    a188:	f89d 300c 	ldrb.w	r3, [sp, #12]
    a18c:	4632      	mov	r2, r6
    a18e:	4639      	mov	r1, r7
    a190:	4628      	mov	r0, r5
    a192:	f7ff fe17 	bl	9dc4 <send_err_rsp.part.0>
		return 0;
    a196:	2400      	movs	r4, #0
}
    a198:	4620      	mov	r0, r4
    a19a:	b004      	add	sp, #16
    a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a1a0:	4a06      	ldr	r2, [pc, #24]	; (a1bc <att_read_rsp+0x90>)
    a1a2:	9902      	ldr	r1, [sp, #8]
    a1a4:	4628      	mov	r0, r5
    a1a6:	f01e f869 	bl	2827c <bt_att_chan_send_rsp>
	return 0;
    a1aa:	e7f5      	b.n	a198 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    a1ac:	2412      	movs	r4, #18
    a1ae:	e7f3      	b.n	a198 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    a1b0:	2401      	movs	r4, #1
    a1b2:	e7f1      	b.n	a198 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a1b4:	240e      	movs	r4, #14
    a1b6:	e7ef      	b.n	a198 <att_read_rsp+0x6c>
    a1b8:	00028135 	.word	0x00028135
    a1bc:	00028091 	.word	0x00028091

0000a1c0 <att_read_type_req>:
{
    a1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    a1c4:	7b0c      	ldrb	r4, [r1, #12]
    a1c6:	3c04      	subs	r4, #4
    a1c8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    a1ca:	2c02      	cmp	r4, #2
{
    a1cc:	4605      	mov	r5, r0
    a1ce:	b08c      	sub	sp, #48	; 0x30
    a1d0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    a1d2:	d001      	beq.n	a1d8 <att_read_type_req+0x18>
    a1d4:	2c10      	cmp	r4, #16
    a1d6:	d150      	bne.n	a27a <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    a1d8:	2104      	movs	r1, #4
    a1da:	3008      	adds	r0, #8
    a1dc:	f021 ffd9 	bl	2c192 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a1e0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    a1e4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    a1e6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    a1e8:	1d01      	adds	r1, r0, #4
    a1ea:	4622      	mov	r2, r4
    a1ec:	4640      	mov	r0, r8
    a1ee:	f01c feb1 	bl	26f54 <bt_uuid_create>
    a1f2:	b188      	cbz	r0, a218 <att_read_type_req+0x58>
	if (!start || !end) {
    a1f4:	b19e      	cbz	r6, a21e <att_read_type_req+0x5e>
    a1f6:	b18f      	cbz	r7, a21c <att_read_type_req+0x5c>
	if (start > end) {
    a1f8:	42b7      	cmp	r7, r6
    a1fa:	d310      	bcc.n	a21e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    a1fc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    a1fe:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    a200:	2100      	movs	r1, #0
    a202:	eb0d 0002 	add.w	r0, sp, r2
    a206:	f01c fbf7 	bl	269f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    a20a:	2201      	movs	r2, #1
    a20c:	2109      	movs	r1, #9
    a20e:	4620      	mov	r0, r4
    a210:	f01e f8c2 	bl	28398 <bt_att_create_pdu>
    a214:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    a216:	b968      	cbnz	r0, a234 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    a218:	240e      	movs	r4, #14
    a21a:	e007      	b.n	a22c <att_read_type_req+0x6c>
			*err = 0U;
    a21c:	463e      	mov	r6, r7
	if (!req) {
    a21e:	2301      	movs	r3, #1
    a220:	4632      	mov	r2, r6
    a222:	2108      	movs	r1, #8
    a224:	4628      	mov	r0, r5
    a226:	f7ff fdcd 	bl	9dc4 <send_err_rsp.part.0>
		return 0;
    a22a:	2400      	movs	r4, #0
}
    a22c:	4620      	mov	r0, r4
    a22e:	b00c      	add	sp, #48	; 0x30
    a230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a234:	2101      	movs	r1, #1
    a236:	3008      	adds	r0, #8
	data.uuid = uuid;
    a238:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a23c:	f021 ff2d 	bl	2c09a <net_buf_simple_add>
	data.rsp->len = 0U;
    a240:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a244:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    a246:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a248:	4a0d      	ldr	r2, [pc, #52]	; (a280 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    a24a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a24e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a250:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    a254:	4630      	mov	r0, r6
    a256:	ab06      	add	r3, sp, #24
    a258:	f01d fd84 	bl	27d64 <bt_gatt_foreach_attr>
	if (data.err) {
    a25c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    a260:	b12c      	cbz	r4, a26e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    a262:	9808      	ldr	r0, [sp, #32]
    a264:	f015 fd92 	bl	1fd8c <net_buf_unref>
	if (!req) {
    a268:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    a26c:	e7d8      	b.n	a220 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a26e:	4a05      	ldr	r2, [pc, #20]	; (a284 <att_read_type_req+0xc4>)
    a270:	9908      	ldr	r1, [sp, #32]
    a272:	4628      	mov	r0, r5
    a274:	f01e f802 	bl	2827c <bt_att_chan_send_rsp>
	return 0;
    a278:	e7d8      	b.n	a22c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    a27a:	2404      	movs	r4, #4
    a27c:	e7d6      	b.n	a22c <att_read_type_req+0x6c>
    a27e:	bf00      	nop
    a280:	00009ab9 	.word	0x00009ab9
    a284:	00028091 	.word	0x00028091

0000a288 <att_find_type_req>:
{
    a288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a28c:	4688      	mov	r8, r1
    a28e:	b086      	sub	sp, #24
    a290:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    a292:	2106      	movs	r1, #6
    a294:	f108 0008 	add.w	r0, r8, #8
    a298:	f021 ff7b 	bl	2c192 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    a29c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    a29e:	b317      	cbz	r7, a2e6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a2a0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    a2a4:	f1b9 0f00 	cmp.w	r9, #0
    a2a8:	d01c      	beq.n	a2e4 <att_find_type_req+0x5c>
	if (start > end) {
    a2aa:	454f      	cmp	r7, r9
    a2ac:	d81b      	bhi.n	a2e6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    a2ae:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a2b0:	f8ad 3002 	strh.w	r3, [sp, #2]
    a2b4:	2400      	movs	r4, #0
    a2b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a2ba:	a901      	add	r1, sp, #4
    a2bc:	4668      	mov	r0, sp
	value = buf->data;
    a2be:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    a2c2:	f88d 4000 	strb.w	r4, [sp]
    a2c6:	f88d 4004 	strb.w	r4, [sp, #4]
    a2ca:	f8ad 3006 	strh.w	r3, [sp, #6]
    a2ce:	f01c fe17 	bl	26f00 <bt_uuid_cmp>
    a2d2:	4606      	mov	r6, r0
    a2d4:	b190      	cbz	r0, a2fc <att_find_type_req+0x74>
	if (!req) {
    a2d6:	230a      	movs	r3, #10
    a2d8:	463a      	mov	r2, r7
    a2da:	2106      	movs	r1, #6
    a2dc:	4628      	mov	r0, r5
    a2de:	f7ff fd71 	bl	9dc4 <send_err_rsp.part.0>
		return 0;
    a2e2:	e007      	b.n	a2f4 <att_find_type_req+0x6c>
			*err = 0U;
    a2e4:	464f      	mov	r7, r9
	if (!req) {
    a2e6:	2301      	movs	r3, #1
    a2e8:	463a      	mov	r2, r7
    a2ea:	2106      	movs	r1, #6
    a2ec:	4628      	mov	r0, r5
    a2ee:	f7ff fd69 	bl	9dc4 <send_err_rsp.part.0>
		return 0;
    a2f2:	2400      	movs	r4, #0
}
    a2f4:	4620      	mov	r0, r4
    a2f6:	b006      	add	sp, #24
    a2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    a2fc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    a300:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    a304:	4601      	mov	r1, r0
    a306:	2214      	movs	r2, #20
    a308:	a801      	add	r0, sp, #4
    a30a:	f01c fb75 	bl	269f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    a30e:	4632      	mov	r2, r6
    a310:	2107      	movs	r1, #7
    a312:	4640      	mov	r0, r8
    a314:	f01e f840 	bl	28398 <bt_att_create_pdu>
    a318:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    a31a:	b1e0      	cbz	r0, a356 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    a31c:	230a      	movs	r3, #10
    a31e:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a322:	4a0e      	ldr	r2, [pc, #56]	; (a35c <att_find_type_req+0xd4>)
	data.value_len = value_len;
    a324:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a328:	ab01      	add	r3, sp, #4
    a32a:	4649      	mov	r1, r9
    a32c:	4638      	mov	r0, r7
	data.value = value;
    a32e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    a332:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    a334:	f01d fd16 	bl	27d64 <bt_gatt_foreach_attr>
	if (data.err) {
    a338:	f89d 4015 	ldrb.w	r4, [sp, #21]
    a33c:	b12c      	cbz	r4, a34a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    a33e:	9802      	ldr	r0, [sp, #8]
    a340:	f015 fd24 	bl	1fd8c <net_buf_unref>
	if (!req) {
    a344:	f89d 3015 	ldrb.w	r3, [sp, #21]
    a348:	e7ce      	b.n	a2e8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a34a:	4a05      	ldr	r2, [pc, #20]	; (a360 <att_find_type_req+0xd8>)
    a34c:	9902      	ldr	r1, [sp, #8]
    a34e:	4628      	mov	r0, r5
    a350:	f01d ff94 	bl	2827c <bt_att_chan_send_rsp>
	return 0;
    a354:	e7ce      	b.n	a2f4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    a356:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    a358:	e7cc      	b.n	a2f4 <att_find_type_req+0x6c>
    a35a:	bf00      	nop
    a35c:	00027e91 	.word	0x00027e91
    a360:	00028091 	.word	0x00028091

0000a364 <att_find_info_req>:
{
    a364:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    a366:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    a368:	881e      	ldrh	r6, [r3, #0]
{
    a36a:	b085      	sub	sp, #20
    a36c:	4605      	mov	r5, r0
	if (!start || !end) {
    a36e:	b19e      	cbz	r6, a398 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    a370:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    a372:	b184      	cbz	r4, a396 <att_find_info_req+0x32>
	if (start > end) {
    a374:	42b4      	cmp	r4, r6
    a376:	d30f      	bcc.n	a398 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    a378:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    a37a:	2210      	movs	r2, #16
    a37c:	2100      	movs	r1, #0
    a37e:	4668      	mov	r0, sp
    a380:	f01c fb3a 	bl	269f8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    a384:	2200      	movs	r2, #0
    a386:	2105      	movs	r1, #5
    a388:	4638      	mov	r0, r7
    a38a:	f01e f805 	bl	28398 <bt_att_create_pdu>
    a38e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    a390:	b958      	cbnz	r0, a3aa <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    a392:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    a394:	e007      	b.n	a3a6 <att_find_info_req+0x42>
			*err = 0U;
    a396:	4626      	mov	r6, r4
	if (!req) {
    a398:	2301      	movs	r3, #1
    a39a:	4632      	mov	r2, r6
    a39c:	2104      	movs	r1, #4
    a39e:	4628      	mov	r0, r5
    a3a0:	f7ff fd10 	bl	9dc4 <send_err_rsp.part.0>
	return 0;
    a3a4:	2000      	movs	r0, #0
}
    a3a6:	b005      	add	sp, #20
    a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a3aa:	4621      	mov	r1, r4
    a3ac:	4a09      	ldr	r2, [pc, #36]	; (a3d4 <att_find_info_req+0x70>)
	data.chan = chan;
    a3ae:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    a3b0:	466b      	mov	r3, sp
    a3b2:	4630      	mov	r0, r6
    a3b4:	f01d fcd6 	bl	27d64 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    a3b8:	9c02      	ldr	r4, [sp, #8]
    a3ba:	b924      	cbnz	r4, a3c6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    a3bc:	9801      	ldr	r0, [sp, #4]
    a3be:	f015 fce5 	bl	1fd8c <net_buf_unref>
	if (!req) {
    a3c2:	230a      	movs	r3, #10
    a3c4:	e7e9      	b.n	a39a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    a3c6:	4a04      	ldr	r2, [pc, #16]	; (a3d8 <att_find_info_req+0x74>)
    a3c8:	9901      	ldr	r1, [sp, #4]
    a3ca:	4628      	mov	r0, r5
    a3cc:	f01d ff56 	bl	2827c <bt_att_chan_send_rsp>
    a3d0:	e7e8      	b.n	a3a4 <att_find_info_req+0x40>
    a3d2:	bf00      	nop
    a3d4:	00027fb9 	.word	0x00027fb9
    a3d8:	00028091 	.word	0x00028091

0000a3dc <att_mtu_req>:
{
    a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    a3de:	6803      	ldr	r3, [r0, #0]
{
    a3e0:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    a3e2:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a3e4:	f3bf 8f5b 	dmb	ish
    a3e8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    a3ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    a3f0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    a3f4:	071b      	lsls	r3, r3, #28
    a3f6:	d41e      	bmi.n	a436 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
    a3f8:	688b      	ldr	r3, [r1, #8]
    a3fa:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    a3fc:	2e16      	cmp	r6, #22
    a3fe:	d91c      	bls.n	a43a <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    a400:	2202      	movs	r2, #2
    a402:	2103      	movs	r1, #3
    a404:	f01d ffc8 	bl	28398 <bt_att_create_pdu>
	if (!pdu) {
    a408:	4607      	mov	r7, r0
    a40a:	b1c0      	cbz	r0, a43e <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    a40c:	2102      	movs	r1, #2
    a40e:	3008      	adds	r0, #8
    a410:	f021 fe43 	bl	2c09a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    a414:	2345      	movs	r3, #69	; 0x45
    a416:	7003      	strb	r3, [r0, #0]
    a418:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    a41a:	4a0a      	ldr	r2, [pc, #40]	; (a444 <att_mtu_req+0x68>)
    a41c:	4628      	mov	r0, r5
    a41e:	4639      	mov	r1, r7
    a420:	f01d ff2c 	bl	2827c <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    a424:	2e45      	cmp	r6, #69	; 0x45
    a426:	bf28      	it	cs
    a428:	2645      	movcs	r6, #69	; 0x45
    a42a:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    a42e:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    a432:	4620      	mov	r0, r4
}
    a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    a436:	2006      	movs	r0, #6
    a438:	e7fc      	b.n	a434 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
    a43a:	2004      	movs	r0, #4
    a43c:	e7fa      	b.n	a434 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
    a43e:	200e      	movs	r0, #14
    a440:	e7f8      	b.n	a434 <att_mtu_req+0x58>
    a442:	bf00      	nop
    a444:	00028091 	.word	0x00028091

0000a448 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    a448:	b513      	push	{r0, r1, r4, lr}
    a44a:	4602      	mov	r2, r0
    a44c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a44e:	4808      	ldr	r0, [pc, #32]	; (a470 <bt_att_req_alloc+0x28>)
    a450:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    a452:	2400      	movs	r4, #0
    a454:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    a456:	f018 fe5b 	bl	23110 <k_mem_slab_alloc>
    a45a:	4601      	mov	r1, r0
    a45c:	b930      	cbnz	r0, a46c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    a45e:	9801      	ldr	r0, [sp, #4]
    a460:	221c      	movs	r2, #28
    a462:	f01c fac9 	bl	269f8 <memset>

	return req;
    a466:	9801      	ldr	r0, [sp, #4]
}
    a468:	b002      	add	sp, #8
    a46a:	bd10      	pop	{r4, pc}
		return NULL;
    a46c:	4620      	mov	r0, r4
    a46e:	e7fb      	b.n	a468 <bt_att_req_alloc+0x20>
    a470:	20000d3c 	.word	0x20000d3c

0000a474 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    a474:	b507      	push	{r0, r1, r2, lr}
    a476:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    a478:	a901      	add	r1, sp, #4
    a47a:	4803      	ldr	r0, [pc, #12]	; (a488 <bt_att_req_free+0x14>)
    a47c:	f018 fe7a 	bl	23174 <k_mem_slab_free>
}
    a480:	b003      	add	sp, #12
    a482:	f85d fb04 	ldr.w	pc, [sp], #4
    a486:	bf00      	nop
    a488:	20000d3c 	.word	0x20000d3c

0000a48c <att_handle_rsp>:
{
    a48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a490:	4604      	mov	r4, r0
    a492:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    a494:	30e0      	adds	r0, #224	; 0xe0
{
    a496:	4689      	mov	r9, r1
    a498:	4692      	mov	sl, r2
    a49a:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    a49c:	f023 f88a 	bl	2d5b4 <k_delayed_work_cancel>
	if (!chan->req) {
    a4a0:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
    a4a4:	2600      	movs	r6, #0
    a4a6:	b12d      	cbz	r5, a4b4 <att_handle_rsp+0x28>
	if (chan->req == &cancel) {
    a4a8:	4b2b      	ldr	r3, [pc, #172]	; (a558 <att_handle_rsp+0xcc>)
    a4aa:	429d      	cmp	r5, r3
    a4ac:	d123      	bne.n	a4f6 <att_handle_rsp+0x6a>
		chan->req = NULL;
    a4ae:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
	bt_att_func_t func = NULL;
    a4b2:	4635      	mov	r5, r6
	att_process(chan->att);
    a4b4:	f8d4 b000 	ldr.w	fp, [r4]
	node = sys_slist_get(&att->reqs);
    a4b8:	f10b 0004 	add.w	r0, fp, #4
    a4bc:	f01d fbe0 	bl	27c80 <sys_slist_get>
	if (!node) {
    a4c0:	4607      	mov	r7, r0
    a4c2:	b380      	cbz	r0, a526 <att_handle_rsp+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    a4c4:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
    a4c8:	b152      	cbz	r2, a4e0 <att_handle_rsp+0x54>
    a4ca:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    a4ce:	d007      	beq.n	a4e0 <att_handle_rsp+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a4d0:	6816      	ldr	r6, [r2, #0]
    a4d2:	b10e      	cbz	r6, a4d8 <att_handle_rsp+0x4c>
    a4d4:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    a4d8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    a4dc:	b1f2      	cbz	r2, a51c <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    a4de:	bb7e      	cbnz	r6, a540 <att_handle_rsp+0xb4>
Z_GENLIST_PREPEND(slist, snode)
    a4e0:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    a4e4:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    a4e6:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    a4ea:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    a4ee:	b9d2      	cbnz	r2, a526 <att_handle_rsp+0x9a>
	list->tail = node;
    a4f0:	f8cb 7008 	str.w	r7, [fp, #8]
}
    a4f4:	e017      	b.n	a526 <att_handle_rsp+0x9a>
	if (chan->req->buf) {
    a4f6:	6928      	ldr	r0, [r5, #16]
    a4f8:	b120      	cbz	r0, a504 <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
    a4fa:	f015 fc47 	bl	1fd8c <net_buf_unref>
		chan->req->buf = NULL;
    a4fe:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    a502:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
    a504:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
	chan->req->func = NULL;
    a508:	2600      	movs	r6, #0
	func = chan->req->func;
    a50a:	6845      	ldr	r5, [r0, #4]
	params = chan->req->user_data;
    a50c:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    a50e:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    a510:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    a512:	f01d ff83 	bl	2841c <att_req_destroy>
	chan->req = NULL;
    a516:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
    a51a:	e7cb      	b.n	a4b4 <att_handle_rsp+0x28>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    a51c:	4639      	mov	r1, r7
    a51e:	f01d fe59 	bl	281d4 <bt_att_chan_req_send>
    a522:	2800      	cmp	r0, #0
    a524:	dbdb      	blt.n	a4de <att_handle_rsp+0x52>
	if (func) {
    a526:	b13d      	cbz	r5, a538 <att_handle_rsp+0xac>
		func(chan->att->conn, err, pdu, len, params);
    a528:	9b03      	ldr	r3, [sp, #12]
    a52a:	6820      	ldr	r0, [r4, #0]
    a52c:	9300      	str	r3, [sp, #0]
    a52e:	6800      	ldr	r0, [r0, #0]
    a530:	4653      	mov	r3, sl
    a532:	464a      	mov	r2, r9
    a534:	4641      	mov	r1, r8
    a536:	47a8      	blx	r5
}
    a538:	2000      	movs	r0, #0
    a53a:	b005      	add	sp, #20
    a53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    a540:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    a544:	d004      	beq.n	a550 <att_handle_rsp+0xc4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    a546:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    a54a:	b10a      	cbz	r2, a550 <att_handle_rsp+0xc4>
    a54c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    a550:	4630      	mov	r0, r6
    a552:	4616      	mov	r6, r2
    a554:	e7c0      	b.n	a4d8 <att_handle_rsp+0x4c>
    a556:	bf00      	nop
    a558:	2000227c 	.word	0x2000227c

0000a55c <bt_att_encrypt_change>:
{
    a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a560:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    a562:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
    a566:	460d      	mov	r5, r1
    a568:	b161      	cbz	r1, a584 <bt_att_encrypt_change+0x28>
		if (att_chan->req && att_chan->req->retrying) {
    a56a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    a56e:	b34b      	cbz	r3, a5c4 <bt_att_encrypt_change+0x68>
    a570:	7d1b      	ldrb	r3, [r3, #20]
    a572:	b33b      	cbz	r3, a5c4 <bt_att_encrypt_change+0x68>
			att_handle_rsp(att_chan, NULL, 0,
    a574:	2200      	movs	r2, #0
    a576:	4630      	mov	r0, r6
    a578:	2305      	movs	r3, #5
}
    a57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
    a57e:	4611      	mov	r1, r2
    a580:	f7ff bf84 	b.w	a48c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    a584:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    a586:	4638      	mov	r0, r7
    a588:	f000 fdfe 	bl	b188 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    a58c:	7a7b      	ldrb	r3, [r7, #9]
    a58e:	2b01      	cmp	r3, #1
    a590:	d018      	beq.n	a5c4 <bt_att_encrypt_change+0x68>
	if (!(att_chan->req && att_chan->req->retrying)) {
    a592:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    a596:	b1ab      	cbz	r3, a5c4 <bt_att_encrypt_change+0x68>
    a598:	7d1a      	ldrb	r2, [r3, #20]
    a59a:	b19a      	cbz	r2, a5c4 <bt_att_encrypt_change+0x68>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    a59c:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    a59e:	688b      	ldr	r3, [r1, #8]
    a5a0:	7818      	ldrb	r0, [r3, #0]
    a5a2:	f01d fbb2 	bl	27d0a <att_op_get_type>
    a5a6:	3801      	subs	r0, #1
    a5a8:	b2c0      	uxtb	r0, r0
    a5aa:	2804      	cmp	r0, #4
    a5ac:	bf96      	itet	ls
    a5ae:	4b06      	ldrls	r3, [pc, #24]	; (a5c8 <bt_att_encrypt_change+0x6c>)
    a5b0:	462a      	movhi	r2, r5
    a5b2:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    a5b6:	4630      	mov	r0, r6
    a5b8:	f01d fe60 	bl	2827c <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    a5bc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    a5c0:	2200      	movs	r2, #0
    a5c2:	611a      	str	r2, [r3, #16]
}
    a5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a5c8:	0002e118 	.word	0x0002e118

0000a5cc <att_reset>:
{
    a5cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a5ce:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    a5d0:	9803      	ldr	r0, [sp, #12]
    a5d2:	2200      	movs	r2, #0
    a5d4:	2300      	movs	r3, #0
    a5d6:	300c      	adds	r0, #12
    a5d8:	f021 fcb2 	bl	2bf40 <net_buf_get>
    a5dc:	b948      	cbnz	r0, a5f2 <att_reset+0x26>
	att->conn = NULL;
    a5de:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    a5e0:	6854      	ldr	r4, [r2, #4]
	att->conn = NULL;
    a5e2:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    a5e4:	b944      	cbnz	r4, a5f8 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
    a5e6:	480d      	ldr	r0, [pc, #52]	; (a61c <att_reset+0x50>)
    a5e8:	a903      	add	r1, sp, #12
    a5ea:	f018 fdc3 	bl	23174 <k_mem_slab_free>
}
    a5ee:	b004      	add	sp, #16
    a5f0:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    a5f2:	f015 fbcb 	bl	1fd8c <net_buf_unref>
    a5f6:	e7eb      	b.n	a5d0 <att_reset+0x4>
    a5f8:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
    a5fa:	6866      	ldr	r6, [r4, #4]
    a5fc:	b136      	cbz	r6, a60c <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    a5fe:	69a3      	ldr	r3, [r4, #24]
    a600:	9300      	str	r3, [sp, #0]
    a602:	2300      	movs	r3, #0
    a604:	461a      	mov	r2, r3
    a606:	210e      	movs	r1, #14
    a608:	4618      	mov	r0, r3
    a60a:	47b0      	blx	r6
		att_req_destroy(req);
    a60c:	4620      	mov	r0, r4
    a60e:	f01d ff05 	bl	2841c <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    a612:	2d00      	cmp	r5, #0
    a614:	d0e7      	beq.n	a5e6 <att_reset+0x1a>
    a616:	462c      	mov	r4, r5
    a618:	682d      	ldr	r5, [r5, #0]
    a61a:	e7ee      	b.n	a5fa <att_reset+0x2e>
    a61c:	20000d04 	.word	0x20000d04

0000a620 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    a620:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    a622:	4904      	ldr	r1, [pc, #16]	; (a634 <db_hash_set+0x14>)
{
    a624:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    a626:	4618      	mov	r0, r3
    a628:	2210      	movs	r2, #16
    a62a:	47a0      	blx	r4
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    a62c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    a630:	bd10      	pop	{r4, pc}
    a632:	bf00      	nop
    a634:	2000913d 	.word	0x2000913d

0000a638 <sc_store>:
{
    a638:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    a63a:	4605      	mov	r5, r0
{
    a63c:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    a63e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    a642:	4604      	mov	r4, r0
	if (cfg->id) {
    a644:	b19a      	cbz	r2, a66e <sc_store+0x36>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a646:	ae02      	add	r6, sp, #8
    a648:	2104      	movs	r1, #4
    a64a:	4630      	mov	r0, r6
    a64c:	f019 fe45 	bl	242da <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    a650:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    a652:	462b      	mov	r3, r5
    a654:	a803      	add	r0, sp, #12
    a656:	4a07      	ldr	r2, [pc, #28]	; (a674 <sc_store+0x3c>)
    a658:	2124      	movs	r1, #36	; 0x24
    a65a:	f7fc fc63 	bl	6f24 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    a65e:	2204      	movs	r2, #4
    a660:	f104 0108 	add.w	r1, r4, #8
    a664:	a803      	add	r0, sp, #12
    a666:	f7fa fe5b 	bl	5320 <settings_save_one>
}
    a66a:	b00c      	add	sp, #48	; 0x30
    a66c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    a66e:	9200      	str	r2, [sp, #0]
    a670:	e7ef      	b.n	a652 <sc_store+0x1a>
    a672:	bf00      	nop
    a674:	00033407 	.word	0x00033407

0000a678 <ccc_load>:
{
    a678:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a67a:	4b21      	ldr	r3, [pc, #132]	; (a700 <ccc_load+0x88>)
{
    a67c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a67e:	6882      	ldr	r2, [r0, #8]
    a680:	429a      	cmp	r2, r3
    a682:	d002      	beq.n	a68a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    a684:	2001      	movs	r0, #1
}
    a686:	b002      	add	sp, #8
    a688:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    a68a:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    a68c:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    a68e:	b94b      	cbnz	r3, a6a4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    a690:	7922      	ldrb	r2, [r4, #4]
    a692:	6821      	ldr	r1, [r4, #0]
    a694:	4630      	mov	r0, r6
    a696:	f01e f894 	bl	287c2 <ccc_find_cfg>
	if (!cfg) {
    a69a:	2800      	cmp	r0, #0
    a69c:	d0f2      	beq.n	a684 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    a69e:	f01d ffb6 	bl	2860e <clear_ccc_cfg>
    a6a2:	e7ef      	b.n	a684 <ccc_load+0xc>
	} else if (!load->count) {
    a6a4:	68e0      	ldr	r0, [r4, #12]
    a6a6:	2800      	cmp	r0, #0
    a6a8:	d0ed      	beq.n	a686 <ccc_load+0xe>
	if (load->entry->handle != handle) {
    a6aa:	881b      	ldrh	r3, [r3, #0]
    a6ac:	4299      	cmp	r1, r3
    a6ae:	d00a      	beq.n	a6c6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    a6b0:	d9e8      	bls.n	a684 <ccc_load+0xc>
	load->count--;
    a6b2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    a6b4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    a6b6:	3801      	subs	r0, #1
	load->entry++;
    a6b8:	3304      	adds	r3, #4
	load->count--;
    a6ba:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a6bc:	3800      	subs	r0, #0
	load->entry++;
    a6be:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a6c0:	bf18      	it	ne
    a6c2:	2001      	movne	r0, #1
    a6c4:	e7df      	b.n	a686 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    a6c6:	7922      	ldrb	r2, [r4, #4]
    a6c8:	6821      	ldr	r1, [r4, #0]
    a6ca:	4630      	mov	r0, r6
    a6cc:	f01e f879 	bl	287c2 <ccc_find_cfg>
	if (!cfg) {
    a6d0:	4605      	mov	r5, r0
    a6d2:	b980      	cbnz	r0, a6f6 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    a6d4:	9000      	str	r0, [sp, #0]
    a6d6:	4602      	mov	r2, r0
    a6d8:	f8cd 0003 	str.w	r0, [sp, #3]
    a6dc:	4669      	mov	r1, sp
    a6de:	4630      	mov	r0, r6
    a6e0:	f01e f86f 	bl	287c2 <ccc_find_cfg>
		if (!cfg) {
    a6e4:	4605      	mov	r5, r0
    a6e6:	2800      	cmp	r0, #0
    a6e8:	d0e3      	beq.n	a6b2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    a6ea:	6821      	ldr	r1, [r4, #0]
    a6ec:	3001      	adds	r0, #1
    a6ee:	f01d ff8b 	bl	28608 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    a6f2:	7923      	ldrb	r3, [r4, #4]
    a6f4:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    a6f6:	68a3      	ldr	r3, [r4, #8]
    a6f8:	885b      	ldrh	r3, [r3, #2]
    a6fa:	812b      	strh	r3, [r5, #8]
    a6fc:	e7d9      	b.n	a6b2 <ccc_load+0x3a>
    a6fe:	bf00      	nop
    a700:	00028815 	.word	0x00028815

0000a704 <ccc_save>:
{
    a704:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a706:	4b0c      	ldr	r3, [pc, #48]	; (a738 <ccc_save+0x34>)
{
    a708:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a70a:	6882      	ldr	r2, [r0, #8]
    a70c:	429a      	cmp	r2, r3
{
    a70e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    a710:	d10f      	bne.n	a732 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    a712:	7922      	ldrb	r2, [r4, #4]
    a714:	6821      	ldr	r1, [r4, #0]
    a716:	68c0      	ldr	r0, [r0, #12]
    a718:	f01e f853 	bl	287c2 <ccc_find_cfg>
	if (!cfg) {
    a71c:	b148      	cbz	r0, a732 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    a71e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    a722:	8901      	ldrh	r1, [r0, #8]
    a724:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    a728:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    a72a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    a72c:	8151      	strh	r1, [r2, #10]
	save->count++;
    a72e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    a732:	2001      	movs	r0, #1
    a734:	bd38      	pop	{r3, r4, r5, pc}
    a736:	bf00      	nop
    a738:	00028815 	.word	0x00028815

0000a73c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    a73c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a73e:	6881      	ldr	r1, [r0, #8]
{
    a740:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a742:	4a07      	ldr	r2, [pc, #28]	; (a760 <remove_peer_from_attr+0x24>)
    a744:	4291      	cmp	r1, r2
    a746:	d109      	bne.n	a75c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    a748:	791a      	ldrb	r2, [r3, #4]
    a74a:	6819      	ldr	r1, [r3, #0]
    a74c:	68c0      	ldr	r0, [r0, #12]
    a74e:	f01e f838 	bl	287c2 <ccc_find_cfg>
	if (cfg) {
    a752:	b118      	cbz	r0, a75c <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    a754:	220a      	movs	r2, #10
    a756:	2100      	movs	r1, #0
    a758:	f01c f94e 	bl	269f8 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    a75c:	2001      	movs	r0, #1
    a75e:	bd08      	pop	{r3, pc}
    a760:	00028815 	.word	0x00028815

0000a764 <sc_commit>:
{
    a764:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a766:	4c0c      	ldr	r4, [pc, #48]	; (a798 <sc_commit+0x34>)
    a768:	f06f 0102 	mvn.w	r1, #2
    a76c:	f104 0048 	add.w	r0, r4, #72	; 0x48
    a770:	f01d ffd1 	bl	28716 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a774:	f3bf 8f5b 	dmb	ish
    a778:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a77a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a77e:	07db      	lsls	r3, r3, #31
    a780:	d507      	bpl.n	a792 <sc_commit+0x2e>
    a782:	4806      	ldr	r0, [pc, #24]	; (a79c <sc_commit+0x38>)
    a784:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a788:	2300      	movs	r3, #0
    a78a:	f104 0118 	add.w	r1, r4, #24
    a78e:	f019 faed 	bl	23d6c <k_delayed_work_submit_to_queue>
}
    a792:	2000      	movs	r0, #0
    a794:	bd10      	pop	{r4, pc}
    a796:	bf00      	nop
    a798:	200012d0 	.word	0x200012d0
    a79c:	20001fd8 	.word	0x20001fd8

0000a7a0 <find_cf_cfg_by_addr>:
{
    a7a0:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    a7a2:	4c0e      	ldr	r4, [pc, #56]	; (a7dc <find_cf_cfg_by_addr+0x3c>)
    a7a4:	7823      	ldrb	r3, [r4, #0]
    a7a6:	4283      	cmp	r3, r0
{
    a7a8:	4606      	mov	r6, r0
    a7aa:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    a7ac:	d00a      	beq.n	a7c4 <find_cf_cfg_by_addr+0x24>
    a7ae:	7c23      	ldrb	r3, [r4, #16]
    a7b0:	42b3      	cmp	r3, r6
    a7b2:	d111      	bne.n	a7d8 <find_cf_cfg_by_addr+0x38>
	return memcmp(a, b, sizeof(*a));
    a7b4:	490a      	ldr	r1, [pc, #40]	; (a7e0 <find_cf_cfg_by_addr+0x40>)
    a7b6:	2207      	movs	r2, #7
    a7b8:	4628      	mov	r0, r5
    a7ba:	f01c f8e2 	bl	26982 <memcmp>
    a7be:	b958      	cbnz	r0, a7d8 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    a7c0:	2001      	movs	r0, #1
    a7c2:	e006      	b.n	a7d2 <find_cf_cfg_by_addr+0x32>
    a7c4:	2207      	movs	r2, #7
    a7c6:	1c61      	adds	r1, r4, #1
    a7c8:	4628      	mov	r0, r5
    a7ca:	f01c f8da 	bl	26982 <memcmp>
			if (id == cf_cfg[i].id &&
    a7ce:	2800      	cmp	r0, #0
    a7d0:	d1ed      	bne.n	a7ae <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    a7d2:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    a7d6:	e000      	b.n	a7da <find_cf_cfg_by_addr+0x3a>
	return NULL;
    a7d8:	2000      	movs	r0, #0
}
    a7da:	bd70      	pop	{r4, r5, r6, pc}
    a7dc:	20002298 	.word	0x20002298
    a7e0:	200022a9 	.word	0x200022a9

0000a7e4 <find_sc_cfg>:
{
    a7e4:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    a7e6:	4c0e      	ldr	r4, [pc, #56]	; (a820 <find_sc_cfg+0x3c>)
    a7e8:	7823      	ldrb	r3, [r4, #0]
    a7ea:	4283      	cmp	r3, r0
{
    a7ec:	4605      	mov	r5, r0
    a7ee:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    a7f0:	d00a      	beq.n	a808 <find_sc_cfg+0x24>
    a7f2:	7b23      	ldrb	r3, [r4, #12]
    a7f4:	42ab      	cmp	r3, r5
    a7f6:	d111      	bne.n	a81c <find_sc_cfg+0x38>
    a7f8:	480a      	ldr	r0, [pc, #40]	; (a824 <find_sc_cfg+0x40>)
    a7fa:	2207      	movs	r2, #7
    a7fc:	4631      	mov	r1, r6
    a7fe:	f01c f8c0 	bl	26982 <memcmp>
    a802:	b958      	cbnz	r0, a81c <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a804:	2001      	movs	r0, #1
    a806:	e005      	b.n	a814 <find_sc_cfg+0x30>
    a808:	2207      	movs	r2, #7
    a80a:	1c60      	adds	r0, r4, #1
    a80c:	f01c f8b9 	bl	26982 <memcmp>
		if (id == sc_cfg[i].id &&
    a810:	2800      	cmp	r0, #0
    a812:	d1ee      	bne.n	a7f2 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    a814:	230c      	movs	r3, #12
    a816:	fb03 4000 	mla	r0, r3, r0, r4
    a81a:	e000      	b.n	a81e <find_sc_cfg+0x3a>
	return NULL;
    a81c:	2000      	movs	r0, #0
}
    a81e:	bd70      	pop	{r4, r5, r6, pc}
    a820:	20009026 	.word	0x20009026
    a824:	20009033 	.word	0x20009033

0000a828 <find_cf_cfg>:
{
    a828:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a82a:	4c16      	ldr	r4, [pc, #88]	; (a884 <find_cf_cfg+0x5c>)
		if (!conn) {
    a82c:	4605      	mov	r5, r0
    a82e:	b140      	cbz	r0, a842 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a830:	4622      	mov	r2, r4
    a832:	f812 1b01 	ldrb.w	r1, [r2], #1
    a836:	f01d f885 	bl	27944 <bt_conn_is_peer_addr_le>
    a83a:	b1c0      	cbz	r0, a86e <find_cf_cfg+0x46>
}
    a83c:	4620      	mov	r0, r4
    a83e:	b003      	add	sp, #12
    a840:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a842:	9000      	str	r0, [sp, #0]
    a844:	2207      	movs	r2, #7
    a846:	f8cd 0003 	str.w	r0, [sp, #3]
    a84a:	4669      	mov	r1, sp
    a84c:	1c60      	adds	r0, r4, #1
    a84e:	f01c f898 	bl	26982 <memcmp>
    a852:	2800      	cmp	r0, #0
    a854:	d0f2      	beq.n	a83c <find_cf_cfg+0x14>
    a856:	2207      	movs	r2, #7
    a858:	4669      	mov	r1, sp
    a85a:	f104 0011 	add.w	r0, r4, #17
    a85e:	9500      	str	r5, [sp, #0]
    a860:	f8cd 5003 	str.w	r5, [sp, #3]
    a864:	f01c f88d 	bl	26982 <memcmp>
    a868:	b948      	cbnz	r0, a87e <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    a86a:	3410      	adds	r4, #16
    a86c:	e7e6      	b.n	a83c <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a86e:	7c21      	ldrb	r1, [r4, #16]
    a870:	f104 0211 	add.w	r2, r4, #17
    a874:	4628      	mov	r0, r5
    a876:	f01d f865 	bl	27944 <bt_conn_is_peer_addr_le>
    a87a:	2800      	cmp	r0, #0
    a87c:	d1f5      	bne.n	a86a <find_cf_cfg+0x42>
	return NULL;
    a87e:	2400      	movs	r4, #0
    a880:	e7dc      	b.n	a83c <find_cf_cfg+0x14>
    a882:	bf00      	nop
    a884:	20002298 	.word	0x20002298

0000a888 <sc_indicate_rsp>:
{
    a888:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a88a:	4d12      	ldr	r5, [pc, #72]	; (a8d4 <sc_indicate_rsp+0x4c>)
    a88c:	4604      	mov	r4, r0
    a88e:	f06f 0102 	mvn.w	r1, #2
    a892:	f105 0048 	add.w	r0, r5, #72	; 0x48
    a896:	f01d ff3e 	bl	28716 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a89a:	f3bf 8f5b 	dmb	ish
    a89e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    a8a0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a8a4:	07da      	lsls	r2, r3, #31
    a8a6:	d506      	bpl.n	a8b6 <sc_indicate_rsp+0x2e>
    a8a8:	480b      	ldr	r0, [pc, #44]	; (a8d8 <sc_indicate_rsp+0x50>)
    a8aa:	2200      	movs	r2, #0
    a8ac:	2300      	movs	r3, #0
    a8ae:	f105 0118 	add.w	r1, r5, #24
    a8b2:	f019 fa5b 	bl	23d6c <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    a8b6:	4620      	mov	r0, r4
    a8b8:	f7ff ffb6 	bl	a828 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    a8bc:	b140      	cbz	r0, a8d0 <sc_indicate_rsp+0x48>
    a8be:	7a03      	ldrb	r3, [r0, #8]
    a8c0:	07db      	lsls	r3, r3, #31
    a8c2:	d505      	bpl.n	a8d0 <sc_indicate_rsp+0x48>
}
    a8c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    a8c8:	2100      	movs	r1, #0
    a8ca:	300c      	adds	r0, #12
    a8cc:	f01d bff4 	b.w	288b8 <atomic_set_bit>
}
    a8d0:	bd38      	pop	{r3, r4, r5, pc}
    a8d2:	bf00      	nop
    a8d4:	200012d0 	.word	0x200012d0
    a8d8:	20001fd8 	.word	0x20001fd8

0000a8dc <read_ppcp>:
{
    a8dc:	b513      	push	{r0, r1, r4, lr}
    a8de:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a8e2:	4c0b      	ldr	r4, [pc, #44]	; (a910 <read_ppcp+0x34>)
{
    a8e4:	4610      	mov	r0, r2
	if (offset > value_len) {
    a8e6:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    a8e8:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    a8ec:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    a8f0:	d80b      	bhi.n	a90a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    a8f2:	f1c1 0408 	rsb	r4, r1, #8
    a8f6:	429c      	cmp	r4, r3
    a8f8:	bfa8      	it	ge
    a8fa:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    a8fc:	4622      	mov	r2, r4
    a8fe:	4469      	add	r1, sp
    a900:	f01c f84f 	bl	269a2 <memcpy>
}
    a904:	4620      	mov	r0, r4
    a906:	b002      	add	sp, #8
    a908:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a90a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    a90e:	e7f9      	b.n	a904 <read_ppcp+0x28>
    a910:	00280018 	.word	0x00280018

0000a914 <bt_gatt_clear_sc>:
{
    a914:	b570      	push	{r4, r5, r6, lr}
    a916:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    a918:	f7ff ff64 	bl	a7e4 <find_sc_cfg>
	if (!cfg) {
    a91c:	4604      	mov	r4, r0
    a91e:	b1b8      	cbz	r0, a950 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
    a920:	4605      	mov	r5, r0
    a922:	f815 2b01 	ldrb.w	r2, [r5], #1
    a926:	b1b2      	cbz	r2, a956 <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    a928:	ae02      	add	r6, sp, #8
    a92a:	2104      	movs	r1, #4
    a92c:	4630      	mov	r0, r6
    a92e:	f019 fcd4 	bl	242da <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    a932:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    a934:	4a09      	ldr	r2, [pc, #36]	; (a95c <bt_gatt_clear_sc+0x48>)
    a936:	2124      	movs	r1, #36	; 0x24
    a938:	462b      	mov	r3, r5
    a93a:	a803      	add	r0, sp, #12
    a93c:	f7fc faf2 	bl	6f24 <bt_settings_encode_key>
		err = settings_delete(key);
    a940:	a803      	add	r0, sp, #12
    a942:	f01a fb2c 	bl	24f9e <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
    a946:	220c      	movs	r2, #12
    a948:	2100      	movs	r1, #0
    a94a:	4620      	mov	r0, r4
    a94c:	f01c f854 	bl	269f8 <memset>
}
    a950:	2000      	movs	r0, #0
    a952:	b00c      	add	sp, #48	; 0x30
    a954:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    a956:	9200      	str	r2, [sp, #0]
    a958:	e7ec      	b.n	a934 <bt_gatt_clear_sc+0x20>
    a95a:	bf00      	nop
    a95c:	00033407 	.word	0x00033407

0000a960 <disconnected_cb>:
{
    a960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a964:	4b1f      	ldr	r3, [pc, #124]	; (a9e4 <disconnected_cb+0x84>)
{
    a966:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a968:	6882      	ldr	r2, [r0, #8]
    a96a:	429a      	cmp	r2, r3
{
    a96c:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a96e:	d102      	bne.n	a976 <disconnected_cb+0x16>
	ccc = attr->user_data;
    a970:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    a972:	8963      	ldrh	r3, [r4, #10]
    a974:	b9c3      	cbnz	r3, a9a8 <disconnected_cb+0x48>
}
    a976:	2001      	movs	r0, #1
    a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    a97c:	f105 0888 	add.w	r8, r5, #136	; 0x88
    a980:	7a28      	ldrb	r0, [r5, #8]
    a982:	4641      	mov	r1, r8
    a984:	f01c fe95 	bl	276b2 <bt_addr_le_is_bonded>
    a988:	b948      	cbnz	r0, a99e <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    a98a:	4b17      	ldr	r3, [pc, #92]	; (a9e8 <disconnected_cb+0x88>)
    a98c:	429c      	cmp	r4, r3
    a98e:	d102      	bne.n	a996 <disconnected_cb+0x36>
					sc_clear(conn);
    a990:	4628      	mov	r0, r5
    a992:	f01e f960 	bl	28c56 <sc_clear>
				clear_ccc_cfg(cfg);
    a996:	4620      	mov	r0, r4
    a998:	f01d fe39 	bl	2860e <clear_ccc_cfg>
	if (!value_used) {
    a99c:	e019      	b.n	a9d2 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    a99e:	4641      	mov	r1, r8
    a9a0:	4638      	mov	r0, r7
    a9a2:	f01d fe31 	bl	28608 <bt_addr_le_copy>
	if (!value_used) {
    a9a6:	e014      	b.n	a9d2 <disconnected_cb+0x72>
		if (!cfg->value) {
    a9a8:	8923      	ldrh	r3, [r4, #8]
    a9aa:	b193      	cbz	r3, a9d2 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a9ac:	4627      	mov	r7, r4
    a9ae:	4628      	mov	r0, r5
    a9b0:	f817 1b01 	ldrb.w	r1, [r7], #1
    a9b4:	463a      	mov	r2, r7
    a9b6:	f01c ffc5 	bl	27944 <bt_conn_is_peer_addr_le>
    a9ba:	2800      	cmp	r0, #0
    a9bc:	d1de      	bne.n	a97c <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a9be:	7820      	ldrb	r0, [r4, #0]
    a9c0:	4639      	mov	r1, r7
    a9c2:	f7fe fd1d 	bl	9400 <bt_conn_lookup_addr_le>
			if (tmp) {
    a9c6:	b120      	cbz	r0, a9d2 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    a9c8:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    a9ca:	f01c ffdb 	bl	27984 <bt_conn_unref>
	if (!value_used) {
    a9ce:	2d07      	cmp	r5, #7
    a9d0:	d0d1      	beq.n	a976 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    a9d2:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    a9d4:	2100      	movs	r1, #0
    a9d6:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d0cc      	beq.n	a976 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    a9dc:	4630      	mov	r0, r6
    a9de:	4798      	blx	r3
    a9e0:	e7c9      	b.n	a976 <disconnected_cb+0x16>
    a9e2:	bf00      	nop
    a9e4:	00028815 	.word	0x00028815
    a9e8:	20000424 	.word	0x20000424

0000a9ec <gatt_indicate>:
{
    a9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a9f0:	4615      	mov	r5, r2
				sizeof(*ind) + params->len);
    a9f2:	8a12      	ldrh	r2, [r2, #16]
{
    a9f4:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a9f6:	3202      	adds	r2, #2
    a9f8:	211d      	movs	r1, #29
{
    a9fa:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a9fc:	f01d fccc 	bl	28398 <bt_att_create_pdu>
	if (!buf) {
    aa00:	4606      	mov	r6, r0
    aa02:	b308      	cbz	r0, aa48 <gatt_indicate+0x5c>
	ind = net_buf_add(buf, sizeof(*ind));
    aa04:	f100 0808 	add.w	r8, r0, #8
    aa08:	2102      	movs	r1, #2
    aa0a:	4640      	mov	r0, r8
    aa0c:	f021 fb45 	bl	2c09a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    aa10:	4604      	mov	r4, r0
	net_buf_add(buf, params->len);
    aa12:	8a29      	ldrh	r1, [r5, #16]
	ind->handle = sys_cpu_to_le16(handle);
    aa14:	f824 9b02 	strh.w	r9, [r4], #2
	net_buf_add(buf, params->len);
    aa18:	4640      	mov	r0, r8
    aa1a:	f021 fb3e 	bl	2c09a <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    aa1e:	8a2a      	ldrh	r2, [r5, #16]
    aa20:	68e9      	ldr	r1, [r5, #12]
    aa22:	4620      	mov	r0, r4
    aa24:	f01b ffbd 	bl	269a2 <memcpy>
	if (!params->func) {
    aa28:	68ab      	ldr	r3, [r5, #8]
    aa2a:	b933      	cbnz	r3, aa3a <gatt_indicate+0x4e>
		err = bt_att_send(conn, buf, NULL, NULL);
    aa2c:	4631      	mov	r1, r6
    aa2e:	4638      	mov	r0, r7
    aa30:	461a      	mov	r2, r3
}
    aa32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = bt_att_send(conn, buf, NULL, NULL);
    aa36:	f01d bd4f 	b.w	284d8 <bt_att_send>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    aa3a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    aa3e:	2100      	movs	r1, #0
    aa40:	f7ff fd02 	bl	a448 <bt_att_req_alloc>
		if (!req) {
    aa44:	4604      	mov	r4, r0
    aa46:	b910      	cbnz	r0, aa4e <gatt_indicate+0x62>
		return -ENOMEM;
    aa48:	f06f 050b 	mvn.w	r5, #11
    aa4c:	e00e      	b.n	aa6c <gatt_indicate+0x80>
		req->func = func;
    aa4e:	4b09      	ldr	r3, [pc, #36]	; (aa74 <gatt_indicate+0x88>)
    aa50:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
    aa52:	2300      	movs	r3, #0
		req->user_data = params;
    aa54:	6185      	str	r5, [r0, #24]
		req->buf = buf;
    aa56:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
    aa58:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    aa5a:	4601      	mov	r1, r0
    aa5c:	4638      	mov	r0, r7
    aa5e:	f01d fd85 	bl	2856c <bt_att_req_send>
		if (err) {
    aa62:	4605      	mov	r5, r0
    aa64:	b110      	cbz	r0, aa6c <gatt_indicate+0x80>
			bt_att_req_free(req);
    aa66:	4620      	mov	r0, r4
    aa68:	f7ff fd04 	bl	a474 <bt_att_req_free>
}
    aa6c:	4628      	mov	r0, r5
    aa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa72:	bf00      	nop
    aa74:	000285ed 	.word	0x000285ed

0000aa78 <notify_cb>:
{
    aa78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    aa7c:	4b30      	ldr	r3, [pc, #192]	; (ab40 <notify_cb+0xc8>)
{
    aa7e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    aa80:	6882      	ldr	r2, [r0, #8]
    aa82:	429a      	cmp	r2, r3
{
    aa84:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    aa86:	d113      	bne.n	aab0 <notify_cb+0x38>
	ccc = attr->user_data;
    aa88:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    aa8a:	4b2e      	ldr	r3, [pc, #184]	; (ab44 <notify_cb+0xcc>)
    aa8c:	429f      	cmp	r7, r3
    aa8e:	d013      	beq.n	aab8 <notify_cb+0x40>
		if (cfg->value != data->type) {
    aa90:	893a      	ldrh	r2, [r7, #8]
    aa92:	89a3      	ldrh	r3, [r4, #12]
    aa94:	429a      	cmp	r2, r3
    aa96:	d10b      	bne.n	aab0 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    aa98:	4639      	mov	r1, r7
    aa9a:	f811 0b01 	ldrb.w	r0, [r1], #1
    aa9e:	f7fe fcaf 	bl	9400 <bt_conn_lookup_addr_le>
		if (!conn) {
    aaa2:	4605      	mov	r5, r0
    aaa4:	b120      	cbz	r0, aab0 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    aaa6:	7b43      	ldrb	r3, [r0, #13]
    aaa8:	2b07      	cmp	r3, #7
    aaaa:	d02d      	beq.n	ab08 <notify_cb+0x90>
			bt_conn_unref(conn);
    aaac:	f01c ff6a 	bl	27984 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    aab0:	2001      	movs	r0, #1
}
    aab2:	b003      	add	sp, #12
    aab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    aab8:	f04f 0800 	mov.w	r8, #0
    aabc:	4d22      	ldr	r5, [pc, #136]	; (ab48 <notify_cb+0xd0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    aabe:	46c1      	mov	r9, r8
    aac0:	2207      	movs	r2, #7
    aac2:	4669      	mov	r1, sp
    aac4:	4628      	mov	r0, r5
    aac6:	f8cd 9000 	str.w	r9, [sp]
    aaca:	f8cd 9003 	str.w	r9, [sp, #3]
    aace:	f01b ff58 	bl	26982 <memcmp>
    aad2:	b178      	cbz	r0, aaf4 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    aad4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    aad8:	2207      	movs	r2, #7
    aada:	4629      	mov	r1, r5
    aadc:	f7fe fcac 	bl	9438 <bt_conn_lookup_state_le>
			if (!conn) {
    aae0:	b978      	cbnz	r0, ab02 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    aae2:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    aae4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    aae8:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    aaea:	4629      	mov	r1, r5
    aaec:	8853      	ldrh	r3, [r2, #2]
    aaee:	8812      	ldrh	r2, [r2, #0]
    aaf0:	f01d fef0 	bl	288d4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    aaf4:	350c      	adds	r5, #12
    aaf6:	f1b8 0f00 	cmp.w	r8, #0
    aafa:	d1c9      	bne.n	aa90 <notify_cb+0x18>
    aafc:	f04f 0801 	mov.w	r8, #1
    ab00:	e7de      	b.n	aac0 <notify_cb+0x48>
			bt_conn_unref(conn);
    ab02:	f01c ff3f 	bl	27984 <bt_conn_unref>
    ab06:	e7f5      	b.n	aaf4 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    ab08:	697b      	ldr	r3, [r7, #20]
    ab0a:	b123      	cbz	r3, ab16 <notify_cb+0x9e>
    ab0c:	4631      	mov	r1, r6
    ab0e:	4798      	blx	r3
    ab10:	b908      	cbnz	r0, ab16 <notify_cb+0x9e>
			bt_conn_unref(conn);
    ab12:	4628      	mov	r0, r5
    ab14:	e7ca      	b.n	aaac <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    ab16:	89a3      	ldrh	r3, [r4, #12]
    ab18:	88a1      	ldrh	r1, [r4, #4]
    ab1a:	6922      	ldr	r2, [r4, #16]
    ab1c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    ab1e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    ab20:	d10b      	bne.n	ab3a <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
    ab22:	f7ff ff63 	bl	a9ec <gatt_indicate>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    ab26:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    ab28:	4628      	mov	r0, r5
    ab2a:	f01c ff2b 	bl	27984 <bt_conn_unref>
		if (err < 0) {
    ab2e:	2e00      	cmp	r6, #0
    ab30:	f04f 0000 	mov.w	r0, #0
    ab34:	dbbd      	blt.n	aab2 <notify_cb+0x3a>
		data->err = 0;
    ab36:	60a0      	str	r0, [r4, #8]
    ab38:	e7ba      	b.n	aab0 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    ab3a:	f01d fdfb 	bl	28734 <gatt_notify>
    ab3e:	e7f2      	b.n	ab26 <notify_cb+0xae>
    ab40:	00028815 	.word	0x00028815
    ab44:	20000424 	.word	0x20000424
    ab48:	20009027 	.word	0x20009027

0000ab4c <bt_gatt_init>:
{
    ab4c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    ab4e:	4b24      	ldr	r3, [pc, #144]	; (abe0 <bt_gatt_init+0x94>)
    ab50:	f3bf 8f5b 	dmb	ish
    ab54:	2201      	movs	r2, #1
    ab56:	e853 1f00 	ldrex	r1, [r3]
    ab5a:	2900      	cmp	r1, #0
    ab5c:	d103      	bne.n	ab66 <bt_gatt_init+0x1a>
    ab5e:	e843 2000 	strex	r0, r2, [r3]
    ab62:	2800      	cmp	r0, #0
    ab64:	d1f7      	bne.n	ab56 <bt_gatt_init+0xa>
    ab66:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    ab6a:	d132      	bne.n	abd2 <bt_gatt_init+0x86>
    ab6c:	f3bf 8f5b 	dmb	ish
    ab70:	4b1c      	ldr	r3, [pc, #112]	; (abe4 <bt_gatt_init+0x98>)
    ab72:	e853 1f00 	ldrex	r1, [r3]
    ab76:	2900      	cmp	r1, #0
    ab78:	d103      	bne.n	ab82 <bt_gatt_init+0x36>
    ab7a:	e843 2000 	strex	r0, r2, [r3]
    ab7e:	2800      	cmp	r0, #0
    ab80:	d1f7      	bne.n	ab72 <bt_gatt_init+0x26>
    ab82:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    ab86:	d108      	bne.n	ab9a <bt_gatt_init+0x4e>
    ab88:	4a17      	ldr	r2, [pc, #92]	; (abe8 <bt_gatt_init+0x9c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    ab8a:	4918      	ldr	r1, [pc, #96]	; (abec <bt_gatt_init+0xa0>)
    ab8c:	8813      	ldrh	r3, [r2, #0]
    ab8e:	4c18      	ldr	r4, [pc, #96]	; (abf0 <bt_gatt_init+0xa4>)
	if (!atomic_cas(&service_init, 0, 1)) {
    ab90:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    ab92:	42a1      	cmp	r1, r4
    ab94:	d31e      	bcc.n	abd4 <bt_gatt_init+0x88>
    ab96:	b100      	cbz	r0, ab9a <bt_gatt_init+0x4e>
    ab98:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    ab9a:	4916      	ldr	r1, [pc, #88]	; (abf4 <bt_gatt_init+0xa8>)
    ab9c:	4816      	ldr	r0, [pc, #88]	; (abf8 <bt_gatt_init+0xac>)
    ab9e:	f022 fd01 	bl	2d5a4 <k_delayed_work_init>
    aba2:	2300      	movs	r3, #0
    aba4:	4914      	ldr	r1, [pc, #80]	; (abf8 <bt_gatt_init+0xac>)
    aba6:	4815      	ldr	r0, [pc, #84]	; (abfc <bt_gatt_init+0xb0>)
    aba8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    abac:	f019 f8de 	bl	23d6c <k_delayed_work_submit_to_queue>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    abb0:	4913      	ldr	r1, [pc, #76]	; (ac00 <bt_gatt_init+0xb4>)
    abb2:	4814      	ldr	r0, [pc, #80]	; (ac04 <bt_gatt_init+0xb8>)
    abb4:	f022 fcf6 	bl	2d5a4 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    abb8:	f3bf 8f5b 	dmb	ish
    abbc:	4b12      	ldr	r3, [pc, #72]	; (ac08 <bt_gatt_init+0xbc>)
    abbe:	e853 2f00 	ldrex	r2, [r3]
    abc2:	f042 0202 	orr.w	r2, r2, #2
    abc6:	e843 2100 	strex	r1, r2, [r3]
    abca:	2900      	cmp	r1, #0
    abcc:	d1f7      	bne.n	abbe <bt_gatt_init+0x72>
    abce:	f3bf 8f5b 	dmb	ish
}
    abd2:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    abd4:	6848      	ldr	r0, [r1, #4]
    abd6:	4403      	add	r3, r0
    abd8:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    abda:	3108      	adds	r1, #8
    abdc:	2001      	movs	r0, #1
    abde:	e7d8      	b.n	ab92 <bt_gatt_init+0x46>
    abe0:	200022b8 	.word	0x200022b8
    abe4:	200022d0 	.word	0x200022d0
    abe8:	20009024 	.word	0x20009024
    abec:	0002dbb4 	.word	0x0002dbb4
    abf0:	0002dbc4 	.word	0x0002dbc4
    abf4:	00028d5b 	.word	0x00028d5b
    abf8:	200012a0 	.word	0x200012a0
    abfc:	20001fd8 	.word	0x20001fd8
    ac00:	0000afd1 	.word	0x0000afd1
    ac04:	200012e8 	.word	0x200012e8
    ac08:	20001318 	.word	0x20001318

0000ac0c <bt_gatt_attr_get_handle>:
{
    ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    ac10:	4603      	mov	r3, r0
    ac12:	b148      	cbz	r0, ac28 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    ac14:	8a00      	ldrh	r0, [r0, #16]
    ac16:	b938      	cbnz	r0, ac28 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ac18:	4912      	ldr	r1, [pc, #72]	; (ac64 <bt_gatt_attr_get_handle+0x58>)
    ac1a:	f8df e04c 	ldr.w	lr, [pc, #76]	; ac68 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    ac1e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ac20:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ac24:	4571      	cmp	r1, lr
    ac26:	d301      	bcc.n	ac2c <bt_gatt_attr_get_handle+0x20>
}
    ac28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    ac2c:	e9d1 7600 	ldrd	r7, r6, [r1]
    ac30:	42bb      	cmp	r3, r7
    ac32:	d304      	bcc.n	ac3e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ac34:	fb0c 7206 	mla	r2, ip, r6, r7
    ac38:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    ac3a:	4293      	cmp	r3, r2
    ac3c:	d90e      	bls.n	ac5c <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    ac3e:	19a2      	adds	r2, r4, r6
    ac40:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ac42:	3108      	adds	r1, #8
    ac44:	4614      	mov	r4, r2
    ac46:	e7ed      	b.n	ac24 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    ac48:	fb0c 7805 	mla	r8, ip, r5, r7
    ac4c:	4543      	cmp	r3, r8
    ac4e:	d007      	beq.n	ac60 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    ac50:	3501      	adds	r5, #1
    ac52:	1962      	adds	r2, r4, r5
    ac54:	42b5      	cmp	r5, r6
    ac56:	b292      	uxth	r2, r2
    ac58:	d1f6      	bne.n	ac48 <bt_gatt_attr_get_handle+0x3c>
    ac5a:	e7f2      	b.n	ac42 <bt_gatt_attr_get_handle+0x36>
    ac5c:	2500      	movs	r5, #0
    ac5e:	e7f8      	b.n	ac52 <bt_gatt_attr_get_handle+0x46>
    ac60:	4610      	mov	r0, r2
    ac62:	e7e1      	b.n	ac28 <bt_gatt_attr_get_handle+0x1c>
    ac64:	0002dbb4 	.word	0x0002dbb4
    ac68:	0002dbc4 	.word	0x0002dbc4

0000ac6c <bt_gatt_foreach_attr_type>:
{
    ac6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac70:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    ac74:	9100      	str	r1, [sp, #0]
    ac76:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    ac78:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ac7c:	2d00      	cmp	r5, #0
    ac7e:	bf08      	it	eq
    ac80:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    ac82:	4b24      	ldr	r3, [pc, #144]	; (ad14 <bt_gatt_foreach_attr_type+0xa8>)
    ac84:	881b      	ldrh	r3, [r3, #0]
    ac86:	4283      	cmp	r3, r0
{
    ac88:	4607      	mov	r7, r0
    ac8a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    ac8c:	d23c      	bcs.n	ad08 <bt_gatt_foreach_attr_type+0x9c>
}
    ac8e:	b003      	add	sp, #12
    ac90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    ac94:	6873      	ldr	r3, [r6, #4]
    ac96:	4423      	add	r3, r4
    ac98:	42bb      	cmp	r3, r7
    ac9a:	d232      	bcs.n	ad02 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    ac9c:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ac9e:	3608      	adds	r6, #8
    aca0:	4b1d      	ldr	r3, [pc, #116]	; (ad18 <bt_gatt_foreach_attr_type+0xac>)
    aca2:	429e      	cmp	r6, r3
    aca4:	d3f6      	bcc.n	ac94 <bt_gatt_foreach_attr_type+0x28>
    aca6:	e7f2      	b.n	ac8e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    aca8:	5889      	ldr	r1, [r1, r2]
    acaa:	9301      	str	r3, [sp, #4]
    acac:	4640      	mov	r0, r8
    acae:	f01c f927 	bl	26f00 <bt_uuid_cmp>
    acb2:	9b01      	ldr	r3, [sp, #4]
    acb4:	b190      	cbz	r0, acdc <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    acb6:	3401      	adds	r4, #1
    acb8:	f10a 0a01 	add.w	sl, sl, #1
    acbc:	b2a4      	uxth	r4, r4
    acbe:	6873      	ldr	r3, [r6, #4]
    acc0:	4553      	cmp	r3, sl
    acc2:	d9ec      	bls.n	ac9e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    acc4:	9b00      	ldr	r3, [sp, #0]
    acc6:	429c      	cmp	r4, r3
    acc8:	d8e1      	bhi.n	ac8e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    acca:	42bc      	cmp	r4, r7
    accc:	d3f3      	bcc.n	acb6 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    acce:	6831      	ldr	r1, [r6, #0]
    acd0:	fb0b f20a 	mul.w	r2, fp, sl
    acd4:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    acd6:	f1b8 0f00 	cmp.w	r8, #0
    acda:	d1e5      	bne.n	aca8 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    acdc:	f1b9 0f00 	cmp.w	r9, #0
    ace0:	d10b      	bne.n	acfa <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    ace2:	3d01      	subs	r5, #1
    ace4:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    ace6:	4618      	mov	r0, r3
    ace8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    acea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    acec:	4621      	mov	r1, r4
    acee:	4798      	blx	r3
	if (!*num_matches) {
    acf0:	2d00      	cmp	r5, #0
    acf2:	d0cc      	beq.n	ac8e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    acf4:	2800      	cmp	r0, #0
    acf6:	d1de      	bne.n	acb6 <bt_gatt_foreach_attr_type+0x4a>
    acf8:	e7c9      	b.n	ac8e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    acfa:	68da      	ldr	r2, [r3, #12]
    acfc:	4591      	cmp	r9, r2
    acfe:	d1da      	bne.n	acb6 <bt_gatt_foreach_attr_type+0x4a>
    ad00:	e7ef      	b.n	ace2 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    ad02:	f04f 0a00 	mov.w	sl, #0
    ad06:	e7da      	b.n	acbe <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ad08:	4e04      	ldr	r6, [pc, #16]	; (ad1c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    ad0a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    ad0c:	f04f 0b14 	mov.w	fp, #20
    ad10:	e7c6      	b.n	aca0 <bt_gatt_foreach_attr_type+0x34>
    ad12:	bf00      	nop
    ad14:	20009024 	.word	0x20009024
    ad18:	0002dbc4 	.word	0x0002dbc4
    ad1c:	0002dbb4 	.word	0x0002dbb4

0000ad20 <db_hash_gen>:
{
    ad20:	b530      	push	{r4, r5, lr}
    ad22:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    ad24:	2300      	movs	r3, #0
{
    ad26:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    ad28:	aa1c      	add	r2, sp, #112	; 0x70
    ad2a:	4669      	mov	r1, sp
    ad2c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    ad2e:	e9cd 3300 	strd	r3, r3, [sp]
    ad32:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    ad36:	f01b fc7b 	bl	26630 <tc_cmac_setup>
    ad3a:	b1e8      	cbz	r0, ad78 <db_hash_gen+0x58>
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    ad3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ad40:	2001      	movs	r0, #1
    ad42:	4a0e      	ldr	r2, [pc, #56]	; (ad7c <db_hash_gen+0x5c>)
    ad44:	ab04      	add	r3, sp, #16
    ad46:	f01d fffd 	bl	28d44 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    ad4a:	480d      	ldr	r0, [pc, #52]	; (ad80 <db_hash_gen+0x60>)
    ad4c:	a904      	add	r1, sp, #16
    ad4e:	f01b fd06 	bl	2675e <tc_cmac_final>
    ad52:	b188      	cbz	r0, ad78 <db_hash_gen+0x58>
    ad54:	4b0a      	ldr	r3, [pc, #40]	; (ad80 <db_hash_gen+0x60>)
    ad56:	2208      	movs	r2, #8
    ad58:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    ad5c:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    ad5e:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    ad62:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    ad66:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    ad68:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    ad6a:	d1f7      	bne.n	ad5c <db_hash_gen+0x3c>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    ad6c:	b124      	cbz	r4, ad78 <db_hash_gen+0x58>
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    ad6e:	4904      	ldr	r1, [pc, #16]	; (ad80 <db_hash_gen+0x60>)
    ad70:	4804      	ldr	r0, [pc, #16]	; (ad84 <db_hash_gen+0x64>)
    ad72:	2210      	movs	r2, #16
    ad74:	f7fa fad4 	bl	5320 <settings_save_one>
}
    ad78:	b049      	add	sp, #292	; 0x124
    ad7a:	bd30      	pop	{r4, r5, pc}
    ad7c:	0002866b 	.word	0x0002866b
    ad80:	2000912d 	.word	0x2000912d
    ad84:	000333ef 	.word	0x000333ef

0000ad88 <db_hash_commit>:
{
    ad88:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    ad8a:	4827      	ldr	r0, [pc, #156]	; (ae28 <db_hash_commit+0xa0>)
    ad8c:	f022 fc12 	bl	2d5b4 <k_delayed_work_cancel>
	if (!err) {
    ad90:	b908      	cbnz	r0, ad96 <db_hash_commit+0xe>
		db_hash_gen(false);
    ad92:	f7ff ffc5 	bl	ad20 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    ad96:	4925      	ldr	r1, [pc, #148]	; (ae2c <db_hash_commit+0xa4>)
    ad98:	4825      	ldr	r0, [pc, #148]	; (ae30 <db_hash_commit+0xa8>)
    ad9a:	2210      	movs	r2, #16
    ad9c:	f01b fdf1 	bl	26982 <memcmp>
    ada0:	b948      	cbnz	r0, adb6 <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    ada2:	4824      	ldr	r0, [pc, #144]	; (ae34 <db_hash_commit+0xac>)
    ada4:	f022 fc06 	bl	2d5b4 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ada8:	4823      	ldr	r0, [pc, #140]	; (ae38 <db_hash_commit+0xb0>)
    adaa:	f06f 0101 	mvn.w	r1, #1
    adae:	f01d fcb2 	bl	28716 <atomic_and>
}
    adb2:	2000      	movs	r0, #0
    adb4:	bd08      	pop	{r3, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    adb6:	4b21      	ldr	r3, [pc, #132]	; (ae3c <db_hash_commit+0xb4>)
    adb8:	f3bf 8f5b 	dmb	ish
    adbc:	f103 0248 	add.w	r2, r3, #72	; 0x48
    adc0:	e852 1f00 	ldrex	r1, [r2]
    adc4:	f041 0001 	orr.w	r0, r1, #1
    adc8:	e842 0c00 	strex	ip, r0, [r2]
    adcc:	f1bc 0f00 	cmp.w	ip, #0
    add0:	d1f6      	bne.n	adc0 <db_hash_commit+0x38>
    add2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    add6:	07ca      	lsls	r2, r1, #31
    add8:	d415      	bmi.n	ae06 <db_hash_commit+0x7e>
		gatt_sc.start = start;
    adda:	4a19      	ldr	r2, [pc, #100]	; (ae40 <db_hash_commit+0xb8>)
    addc:	615a      	str	r2, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    adde:	f3bf 8f5b 	dmb	ish
    ade2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    ade4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    ade8:	079b      	lsls	r3, r3, #30
    adea:	d406      	bmi.n	adfa <db_hash_commit+0x72>
    adec:	4911      	ldr	r1, [pc, #68]	; (ae34 <db_hash_commit+0xac>)
    adee:	4815      	ldr	r0, [pc, #84]	; (ae44 <db_hash_commit+0xbc>)
    adf0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    adf4:	2300      	movs	r3, #0
    adf6:	f018 ffb9 	bl	23d6c <k_delayed_work_submit_to_queue>
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    adfa:	490c      	ldr	r1, [pc, #48]	; (ae2c <db_hash_commit+0xa4>)
    adfc:	4812      	ldr	r0, [pc, #72]	; (ae48 <db_hash_commit+0xc0>)
    adfe:	2210      	movs	r2, #16
    ae00:	f7fa fa8e 	bl	5320 <settings_save_one>
}
    ae04:	e7d5      	b.n	adb2 <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    ae06:	8a9a      	ldrh	r2, [r3, #20]
    ae08:	8ad9      	ldrh	r1, [r3, #22]
    ae0a:	2a01      	cmp	r2, #1
    ae0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ae10:	d805      	bhi.n	ae1e <db_hash_commit+0x96>
    ae12:	4291      	cmp	r1, r2
    ae14:	d0f1      	beq.n	adfa <db_hash_commit+0x72>
		*end = new_end;
    ae16:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ae1a:	82da      	strh	r2, [r3, #22]
    ae1c:	e7df      	b.n	adde <db_hash_commit+0x56>
		*start = new_start;
    ae1e:	2001      	movs	r0, #1
	if (*end < new_end) {
    ae20:	4291      	cmp	r1, r2
		*start = new_start;
    ae22:	8298      	strh	r0, [r3, #20]
	if (*end < new_end) {
    ae24:	d0db      	beq.n	adde <db_hash_commit+0x56>
    ae26:	e7f6      	b.n	ae16 <db_hash_commit+0x8e>
    ae28:	200012a0 	.word	0x200012a0
    ae2c:	2000912d 	.word	0x2000912d
    ae30:	2000913d 	.word	0x2000913d
    ae34:	200012e8 	.word	0x200012e8
    ae38:	20001318 	.word	0x20001318
    ae3c:	200012d0 	.word	0x200012d0
    ae40:	ffff0001 	.word	0xffff0001
    ae44:	20001fd8 	.word	0x20001fd8
    ae48:	000333ef 	.word	0x000333ef

0000ae4c <ccc_set_direct>:
{
    ae4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae50:	b0b8      	sub	sp, #224	; 0xe0
    ae52:	460f      	mov	r7, r1
    ae54:	4615      	mov	r5, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    ae56:	4920      	ldr	r1, [pc, #128]	; (aed8 <ccc_set_direct+0x8c>)
    ae58:	983e      	ldr	r0, [sp, #248]	; 0xf8
    ae5a:	466a      	mov	r2, sp
{
    ae5c:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    ae5e:	f01a f8a2 	bl	24fa6 <settings_name_steq>
    ae62:	b3a8      	cbz	r0, aed0 <ccc_set_direct+0x84>
		return ccc_set(name, len, read_cb, cb_arg);
    ae64:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
    ae66:	a901      	add	r1, sp, #4
    ae68:	4620      	mov	r0, r4
    ae6a:	f01a f8bf 	bl	24fec <settings_name_next>
		if (!name) {
    ae6e:	b35c      	cbz	r4, aec8 <ccc_set_direct+0x7c>
		} else if (!next) {
    ae70:	9801      	ldr	r0, [sp, #4]
    ae72:	bb08      	cbnz	r0, aeb8 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
    ae74:	f10d 0808 	add.w	r8, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    ae78:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    ae7c:	4641      	mov	r1, r8
    ae7e:	4620      	mov	r0, r4
    ae80:	f01b fe6b 	bl	26b5a <bt_settings_decode_key>
		if (err) {
    ae84:	4604      	mov	r4, r0
    ae86:	b9f8      	cbnz	r0, aec8 <ccc_set_direct+0x7c>
		load.addr_with_id.addr = &addr;
    ae88:	f8cd 8010 	str.w	r8, [sp, #16]
		if (len_rd) {
    ae8c:	b1cf      	cbz	r7, aec2 <ccc_set_direct+0x76>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    ae8e:	af08      	add	r7, sp, #32
    ae90:	22c0      	movs	r2, #192	; 0xc0
    ae92:	4639      	mov	r1, r7
    ae94:	4630      	mov	r0, r6
    ae96:	47a8      	blx	r5
			if (len < 0) {
    ae98:	2800      	cmp	r0, #0
    ae9a:	db17      	blt.n	aecc <ccc_set_direct+0x80>
			load.count = len / sizeof(*ccc_store);
    ae9c:	0880      	lsrs	r0, r0, #2
			load.entry = ccc_store;
    ae9e:	9706      	str	r7, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    aea0:	9007      	str	r0, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    aea2:	4a0e      	ldr	r2, [pc, #56]	; (aedc <ccc_set_direct+0x90>)
    aea4:	ab04      	add	r3, sp, #16
    aea6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    aeaa:	2001      	movs	r0, #1
    aeac:	f01d ff4a 	bl	28d44 <bt_gatt_foreach_attr>
}
    aeb0:	4620      	mov	r0, r4
    aeb2:	b038      	add	sp, #224	; 0xe0
    aeb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			load.addr_with_id.id = strtol(next, NULL, 10);
    aeb8:	220a      	movs	r2, #10
    aeba:	2100      	movs	r1, #0
    aebc:	f01b fc95 	bl	267ea <strtol>
    aec0:	e7d8      	b.n	ae74 <ccc_set_direct+0x28>
			load.count = 0;
    aec2:	e9cd 0006 	strd	r0, r0, [sp, #24]
    aec6:	e7ec      	b.n	aea2 <ccc_set_direct+0x56>
			return -EINVAL;
    aec8:	f06f 0015 	mvn.w	r0, #21
    aecc:	4604      	mov	r4, r0
    aece:	e7ef      	b.n	aeb0 <ccc_set_direct+0x64>
			return -EINVAL;
    aed0:	f06f 0415 	mvn.w	r4, #21
    aed4:	e7ec      	b.n	aeb0 <ccc_set_direct+0x64>
    aed6:	bf00      	nop
    aed8:	000333f7 	.word	0x000333f7
    aedc:	0000a679 	.word	0x0000a679

0000aee0 <bt_gatt_indicate>:
{
    aee0:	b530      	push	{r4, r5, lr}
    aee2:	4b38      	ldr	r3, [pc, #224]	; (afc4 <bt_gatt_indicate+0xe4>)
    aee4:	f3bf 8f5b 	dmb	ish
    aee8:	681b      	ldr	r3, [r3, #0]
    aeea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aeee:	079a      	lsls	r2, r3, #30
{
    aef0:	b08b      	sub	sp, #44	; 0x2c
    aef2:	4604      	mov	r4, r0
    aef4:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    aef6:	d55e      	bpl.n	afb6 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
    aef8:	6848      	ldr	r0, [r1, #4]
    aefa:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    aefc:	b114      	cbz	r4, af04 <bt_gatt_indicate+0x24>
    aefe:	7b63      	ldrb	r3, [r4, #13]
    af00:	2b07      	cmp	r3, #7
    af02:	d15b      	bne.n	afbc <bt_gatt_indicate+0xdc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    af04:	f7ff fe82 	bl	ac0c <bt_gatt_attr_get_handle>
    af08:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    af0c:	b918      	cbnz	r0, af16 <bt_gatt_indicate+0x36>
		return -ENOENT;
    af0e:	f06f 0001 	mvn.w	r0, #1
}
    af12:	b00b      	add	sp, #44	; 0x2c
    af14:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    af16:	682a      	ldr	r2, [r5, #0]
    af18:	b9aa      	cbnz	r2, af46 <bt_gatt_indicate+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    af1a:	9b05      	ldr	r3, [sp, #20]
    af1c:	6818      	ldr	r0, [r3, #0]
    af1e:	2300      	movs	r3, #0
    af20:	f88d 3010 	strb.w	r3, [sp, #16]
    af24:	a904      	add	r1, sp, #16
    af26:	f642 0303 	movw	r3, #10243	; 0x2803
    af2a:	f8ad 3012 	strh.w	r3, [sp, #18]
    af2e:	f01b ffe7 	bl	26f00 <bt_uuid_cmp>
    af32:	b1c0      	cbz	r0, af66 <bt_gatt_indicate+0x86>
	if (conn) {
    af34:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    af38:	b314      	cbz	r4, af80 <bt_gatt_indicate+0xa0>
		return gatt_indicate(conn, data.handle, params);
    af3a:	4601      	mov	r1, r0
    af3c:	462a      	mov	r2, r5
    af3e:	4620      	mov	r0, r4
    af40:	f7ff fd54 	bl	a9ec <gatt_indicate>
    af44:	e7e5      	b.n	af12 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    af46:	a905      	add	r1, sp, #20
    af48:	9102      	str	r1, [sp, #8]
    af4a:	491f      	ldr	r1, [pc, #124]	; (afc8 <bt_gatt_indicate+0xe8>)
    af4c:	9101      	str	r1, [sp, #4]
    af4e:	2101      	movs	r1, #1
	found->attr = NULL;
    af50:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    af52:	9100      	str	r1, [sp, #0]
    af54:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    af58:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    af5a:	f7ff fe87 	bl	ac6c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    af5e:	9b05      	ldr	r3, [sp, #20]
    af60:	2b00      	cmp	r3, #0
    af62:	d1da      	bne.n	af1a <bt_gatt_indicate+0x3a>
    af64:	e7d3      	b.n	af0e <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    af66:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    af68:	68c3      	ldr	r3, [r0, #12]
    af6a:	799b      	ldrb	r3, [r3, #6]
    af6c:	069b      	lsls	r3, r3, #26
    af6e:	d402      	bmi.n	af76 <bt_gatt_indicate+0x96>
			return -EINVAL;
    af70:	f06f 0015 	mvn.w	r0, #21
    af74:	e7cd      	b.n	af12 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    af76:	f01d fe97 	bl	28ca8 <bt_gatt_attr_value_handle>
    af7a:	f8ad 0018 	strh.w	r0, [sp, #24]
    af7e:	e7d9      	b.n	af34 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    af80:	f06f 0338 	mvn.w	r3, #56	; 0x38
    af84:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    af86:	2302      	movs	r3, #2
    af88:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    af8c:	f642 1302 	movw	r3, #10498	; 0x2902
    af90:	f8ad 3012 	strh.w	r3, [sp, #18]
    af94:	ab05      	add	r3, sp, #20
    af96:	9302      	str	r3, [sp, #8]
    af98:	4b0c      	ldr	r3, [pc, #48]	; (afcc <bt_gatt_indicate+0xec>)
    af9a:	9301      	str	r3, [sp, #4]
    af9c:	2301      	movs	r3, #1
    af9e:	9300      	str	r3, [sp, #0]
    afa0:	aa04      	add	r2, sp, #16
    afa2:	4623      	mov	r3, r4
    afa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    afa8:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    afaa:	f88d 4010 	strb.w	r4, [sp, #16]
    afae:	f7ff fe5d 	bl	ac6c <bt_gatt_foreach_attr_type>
	return data.err;
    afb2:	9807      	ldr	r0, [sp, #28]
    afb4:	e7ad      	b.n	af12 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    afb6:	f06f 000a 	mvn.w	r0, #10
    afba:	e7aa      	b.n	af12 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    afbc:	f06f 0038 	mvn.w	r0, #56	; 0x38
    afc0:	e7a7      	b.n	af12 <bt_gatt_indicate+0x32>
    afc2:	bf00      	nop
    afc4:	20000100 	.word	0x20000100
    afc8:	000285fd 	.word	0x000285fd
    afcc:	0000aa79 	.word	0x0000aa79

0000afd0 <sc_process>:
{
    afd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    afd2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    afd6:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    afd8:	f850 3c04 	ldr.w	r3, [r0, #-4]
    afdc:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    afde:	f1a0 0618 	sub.w	r6, r0, #24
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    afe2:	f06f 0101 	mvn.w	r1, #1
    afe6:	4628      	mov	r0, r5
    afe8:	f01d fb95 	bl	28716 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    afec:	4b0d      	ldr	r3, [pc, #52]	; (b024 <sc_process+0x54>)
    afee:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    aff2:	4b0d      	ldr	r3, [pc, #52]	; (b028 <sc_process+0x58>)
    aff4:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    aff8:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    affa:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    affc:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    b000:	2304      	movs	r3, #4
	sc->start = 0U;
    b002:	f824 0c04 	strh.w	r0, [r4, #-4]
	sc->end = 0U;
    b006:	f824 0c02 	strh.w	r0, [r4, #-2]
	sc->params.len = sizeof(sc_range);
    b00a:	f824 3c08 	strh.w	r3, [r4, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    b00e:	4631      	mov	r1, r6
    b010:	f7ff ff66 	bl	aee0 <bt_gatt_indicate>
    b014:	b918      	cbnz	r0, b01e <sc_process+0x4e>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    b016:	2101      	movs	r1, #1
    b018:	4628      	mov	r0, r5
    b01a:	f01d fc4d 	bl	288b8 <atomic_set_bit>
}
    b01e:	b002      	add	sp, #8
    b020:	bd70      	pop	{r4, r5, r6, pc}
    b022:	bf00      	nop
    b024:	0002e1bc 	.word	0x0002e1bc
    b028:	0000a889 	.word	0x0000a889

0000b02c <update_ccc>:
{
    b02c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b030:	4b32      	ldr	r3, [pc, #200]	; (b0fc <update_ccc+0xd0>)
{
    b032:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    b034:	6882      	ldr	r2, [r0, #8]
    b036:	429a      	cmp	r2, r3
{
    b038:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    b03a:	d122      	bne.n	b082 <update_ccc+0x56>
	ccc = attr->user_data;
    b03c:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
    b03e:	6835      	ldr	r5, [r6, #0]
		if (!cfg->value ||
    b040:	893b      	ldrh	r3, [r7, #8]
    b042:	b1f3      	cbz	r3, b082 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    b044:	463a      	mov	r2, r7
    b046:	4628      	mov	r0, r5
    b048:	f812 1b01 	ldrb.w	r1, [r2], #1
    b04c:	f01c fc7a 	bl	27944 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    b050:	b1b8      	cbz	r0, b082 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    b052:	222a      	movs	r2, #42	; 0x2a
    b054:	4621      	mov	r1, r4
    b056:	4628      	mov	r0, r5
    b058:	f01d fe82 	bl	28d60 <bt_gatt_check_perm>
		if (err) {
    b05c:	b1a8      	cbz	r0, b08a <update_ccc+0x5e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    b05e:	2803      	cmp	r0, #3
    b060:	d00f      	beq.n	b082 <update_ccc+0x56>
				sec = BT_SECURITY_L3;
    b062:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    b064:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    b066:	bf14      	ite	ne
    b068:	f04f 0802 	movne.w	r8, #2
    b06c:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    b070:	f01c fbf5 	bl	2785e <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    b074:	4580      	cmp	r8, r0
    b076:	d908      	bls.n	b08a <update_ccc+0x5e>
				if (data->sec < sec) {
    b078:	7933      	ldrb	r3, [r6, #4]
    b07a:	4543      	cmp	r3, r8
    b07c:	d201      	bcs.n	b082 <update_ccc+0x56>
					data->sec = sec;
    b07e:	f886 8004 	strb.w	r8, [r6, #4]
}
    b082:	2001      	movs	r0, #1
    b084:	b002      	add	sp, #8
    b086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
    b08a:	4639      	mov	r1, r7
    b08c:	4620      	mov	r0, r4
    b08e:	f01d faa3 	bl	285d8 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    b092:	4b1b      	ldr	r3, [pc, #108]	; (b100 <update_ccc+0xd4>)
    b094:	429f      	cmp	r7, r3
    b096:	d1f4      	bne.n	b082 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    b098:	7a28      	ldrb	r0, [r5, #8]
    b09a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    b09e:	f7ff fba1 	bl	a7e4 <find_sc_cfg>
	if (!cfg) {
    b0a2:	4604      	mov	r4, r0
    b0a4:	2800      	cmp	r0, #0
    b0a6:	d0ec      	beq.n	b082 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
    b0a8:	8902      	ldrh	r2, [r0, #8]
    b0aa:	8943      	ldrh	r3, [r0, #10]
    b0ac:	ea53 0102 	orrs.w	r1, r3, r2
    b0b0:	d0e7      	beq.n	b082 <update_ccc+0x56>
	index = bt_conn_index(conn);
    b0b2:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    b0b4:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    b0b8:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    b0bc:	f7fe fbc2 	bl	9844 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    b0c0:	4910      	ldr	r1, [pc, #64]	; (b104 <update_ccc+0xd8>)
    b0c2:	4a11      	ldr	r2, [pc, #68]	; (b108 <update_ccc+0xdc>)
    b0c4:	2314      	movs	r3, #20
    b0c6:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
    b0ca:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    b0cc:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    b0ce:	4a0f      	ldr	r2, [pc, #60]	; (b10c <update_ccc+0xe0>)
    b0d0:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    b0d2:	aa01      	add	r2, sp, #4
    b0d4:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    b0d6:	821e      	strh	r6, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    b0d8:	b203      	sxth	r3, r0
    b0da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    b0de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    b0e2:	4628      	mov	r0, r5
    b0e4:	f7ff fefc 	bl	aee0 <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
    b0e8:	4632      	mov	r2, r6
    b0ea:	2100      	movs	r1, #0
    b0ec:	f104 0008 	add.w	r0, r4, #8
    b0f0:	f01b fc82 	bl	269f8 <memset>
		sc_store(cfg);
    b0f4:	4620      	mov	r0, r4
    b0f6:	f7ff fa9f 	bl	a638 <sc_store>
    b0fa:	e7c2      	b.n	b082 <update_ccc+0x56>
    b0fc:	00028815 	.word	0x00028815
    b100:	20000424 	.word	0x20000424
    b104:	200022bc 	.word	0x200022bc
    b108:	0002e1bc 	.word	0x0002e1bc
    b10c:	00028a69 	.word	0x00028a69

0000b110 <bt_gatt_connected>:
{
    b110:	b570      	push	{r4, r5, r6, lr}
    b112:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b114:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    b118:	4604      	mov	r4, r0
	data.conn = conn;
    b11a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    b11c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b11e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    b120:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b124:	4629      	mov	r1, r5
    b126:	f01c fac4 	bl	276b2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b12a:	b190      	cbz	r0, b152 <bt_gatt_connected+0x42>
		if (conn->id) {
    b12c:	7a22      	ldrb	r2, [r4, #8]
    b12e:	b31a      	cbz	r2, b178 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b130:	ae02      	add	r6, sp, #8
    b132:	2104      	movs	r1, #4
    b134:	4630      	mov	r0, r6
    b136:	f019 f8d0 	bl	242da <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b13a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b13c:	4a0f      	ldr	r2, [pc, #60]	; (b17c <bt_gatt_connected+0x6c>)
    b13e:	2124      	movs	r1, #36	; 0x24
    b140:	a805      	add	r0, sp, #20
    b142:	462b      	mov	r3, r5
    b144:	f7fb feee 	bl	6f24 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    b148:	aa05      	add	r2, sp, #20
    b14a:	490d      	ldr	r1, [pc, #52]	; (b180 <bt_gatt_connected+0x70>)
    b14c:	4610      	mov	r0, r2
    b14e:	f7fa f947 	bl	53e0 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b152:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b156:	4a0b      	ldr	r2, [pc, #44]	; (b184 <bt_gatt_connected+0x74>)
    b158:	ab03      	add	r3, sp, #12
    b15a:	2001      	movs	r0, #1
    b15c:	f01d fdf2 	bl	28d44 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    b160:	4620      	mov	r0, r4
    b162:	f01c fb7c 	bl	2785e <bt_conn_get_security>
    b166:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    b16a:	4288      	cmp	r0, r1
    b16c:	d202      	bcs.n	b174 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    b16e:	4620      	mov	r0, r4
    b170:	f01c fb42 	bl	277f8 <bt_conn_set_security>
}
    b174:	b00e      	add	sp, #56	; 0x38
    b176:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b178:	9200      	str	r2, [sp, #0]
    b17a:	e7df      	b.n	b13c <bt_gatt_connected+0x2c>
    b17c:	000333fa 	.word	0x000333fa
    b180:	0000ae4d 	.word	0x0000ae4d
    b184:	0000b02d 	.word	0x0000b02d

0000b188 <bt_gatt_encrypt_change>:
{
    b188:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b18a:	4a06      	ldr	r2, [pc, #24]	; (b1a4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    b18c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b18e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    b190:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b192:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    b196:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b19a:	f01d fdd3 	bl	28d44 <bt_gatt_foreach_attr>
}
    b19e:	b003      	add	sp, #12
    b1a0:	f85d fb04 	ldr.w	pc, [sp], #4
    b1a4:	0000b02d 	.word	0x0000b02d

0000b1a8 <db_hash_read>:
{
    b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1aa:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    b1ac:	4810      	ldr	r0, [pc, #64]	; (b1f0 <db_hash_read+0x48>)
{
    b1ae:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    b1b2:	4615      	mov	r5, r2
    b1b4:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    b1b6:	f022 f9fd 	bl	2d5b4 <k_delayed_work_cancel>
	if (!err) {
    b1ba:	b910      	cbnz	r0, b1c2 <db_hash_read+0x1a>
		db_hash_gen(true);
    b1bc:	2001      	movs	r0, #1
    b1be:	f7ff fdaf 	bl	ad20 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    b1c2:	2101      	movs	r1, #1
    b1c4:	4620      	mov	r0, r4
    b1c6:	f01d fdf6 	bl	28db6 <bt_gatt_change_aware>
	if (offset > value_len) {
    b1ca:	2e10      	cmp	r6, #16
    b1cc:	d80c      	bhi.n	b1e8 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    b1ce:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    b1d2:	4908      	ldr	r1, [pc, #32]	; (b1f4 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    b1d4:	42bc      	cmp	r4, r7
    b1d6:	bfa8      	it	ge
    b1d8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    b1da:	4622      	mov	r2, r4
    b1dc:	4431      	add	r1, r6
    b1de:	4628      	mov	r0, r5
    b1e0:	f01b fbdf 	bl	269a2 <memcpy>
}
    b1e4:	4620      	mov	r0, r4
    b1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    b1e8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b1ec:	e7fa      	b.n	b1e4 <db_hash_read+0x3c>
    b1ee:	bf00      	nop
    b1f0:	200012a0 	.word	0x200012a0
    b1f4:	2000912d 	.word	0x2000912d

0000b1f8 <bt_gatt_store_ccc>:
{
    b1f8:	b570      	push	{r4, r5, r6, lr}
    b1fa:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    b1fc:	2300      	movs	r3, #0
{
    b1fe:	4604      	mov	r4, r0
    b200:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    b202:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    b204:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    b208:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    b20a:	4a11      	ldr	r2, [pc, #68]	; (b250 <bt_gatt_store_ccc+0x58>)
    b20c:	ab0d      	add	r3, sp, #52	; 0x34
    b20e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b212:	2001      	movs	r0, #1
    b214:	f01d fd96 	bl	28d44 <bt_gatt_foreach_attr>
	if (id) {
    b218:	b1ac      	cbz	r4, b246 <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
    b21a:	ae03      	add	r6, sp, #12
    b21c:	4622      	mov	r2, r4
    b21e:	2104      	movs	r1, #4
    b220:	4630      	mov	r0, r6
    b222:	f019 f85a 	bl	242da <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    b226:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b228:	4a0a      	ldr	r2, [pc, #40]	; (b254 <bt_gatt_store_ccc+0x5c>)
    b22a:	462b      	mov	r3, r5
    b22c:	2124      	movs	r1, #36	; 0x24
    b22e:	a804      	add	r0, sp, #16
    b230:	f7fb fe78 	bl	6f24 <bt_settings_encode_key>
	if (save.count) {
    b234:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    b236:	b142      	cbz	r2, b24a <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
    b238:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    b23a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    b23c:	a804      	add	r0, sp, #16
    b23e:	f7fa f86f 	bl	5320 <settings_save_one>
}
    b242:	b040      	add	sp, #256	; 0x100
    b244:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b246:	9400      	str	r4, [sp, #0]
    b248:	e7ee      	b.n	b228 <bt_gatt_store_ccc+0x30>
		str = NULL;
    b24a:	4611      	mov	r1, r2
    b24c:	e7f6      	b.n	b23c <bt_gatt_store_ccc+0x44>
    b24e:	bf00      	nop
    b250:	0000a705 	.word	0x0000a705
    b254:	000333fa 	.word	0x000333fa

0000b258 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    b258:	b5f0      	push	{r4, r5, r6, r7, lr}
    b25a:	4604      	mov	r4, r0
    b25c:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b25e:	4603      	mov	r3, r0
    b260:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b264:	2001      	movs	r0, #1
    b266:	4a31      	ldr	r2, [pc, #196]	; (b32c <bt_gatt_disconnected+0xd4>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b268:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b26c:	f01d fd6a 	bl	28d44 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b270:	7a20      	ldrb	r0, [r4, #8]
    b272:	4629      	mov	r1, r5
    b274:	f01c fa1d 	bl	276b2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b278:	b348      	cbz	r0, b2ce <bt_gatt_disconnected+0x76>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b27a:	4629      	mov	r1, r5
    b27c:	7a20      	ldrb	r0, [r4, #8]
    b27e:	f7ff ffbb 	bl	b1f8 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b282:	4620      	mov	r0, r4
    b284:	f7ff fad0 	bl	a828 <find_cf_cfg>
	if (!cfg) {
    b288:	4606      	mov	r6, r0
    b28a:	2800      	cmp	r0, #0
    b28c:	d03e      	beq.n	b30c <bt_gatt_disconnected+0xb4>
		if (conn->id) {
    b28e:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    b290:	3608      	adds	r6, #8
		if (conn->id) {
    b292:	2a00      	cmp	r2, #0
    b294:	d03c      	beq.n	b310 <bt_gatt_disconnected+0xb8>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b296:	af02      	add	r7, sp, #8
    b298:	2104      	movs	r1, #4
    b29a:	4638      	mov	r0, r7
    b29c:	f019 f81d 	bl	242da <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b2a0:	9700      	str	r7, [sp, #0]
    b2a2:	462b      	mov	r3, r5
    b2a4:	4a22      	ldr	r2, [pc, #136]	; (b330 <bt_gatt_disconnected+0xd8>)
    b2a6:	2124      	movs	r1, #36	; 0x24
    b2a8:	a803      	add	r0, sp, #12
    b2aa:	f7fb fe3b 	bl	6f24 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b2ae:	7a23      	ldrb	r3, [r4, #8]
    b2b0:	2701      	movs	r7, #1
    b2b2:	b93b      	cbnz	r3, b2c4 <bt_gatt_disconnected+0x6c>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b2b4:	2300      	movs	r3, #0
    b2b6:	9300      	str	r3, [sp, #0]
    b2b8:	4a1d      	ldr	r2, [pc, #116]	; (b330 <bt_gatt_disconnected+0xd8>)
    b2ba:	462b      	mov	r3, r5
    b2bc:	2124      	movs	r1, #36	; 0x24
    b2be:	a803      	add	r0, sp, #12
    b2c0:	f7fb fe30 	bl	6f24 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b2c4:	463a      	mov	r2, r7
    b2c6:	4631      	mov	r1, r6
    b2c8:	a803      	add	r0, sp, #12
    b2ca:	f7fa f829 	bl	5320 <settings_save_one>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b2ce:	7a20      	ldrb	r0, [r4, #8]
    b2d0:	4629      	mov	r1, r5
    b2d2:	f01c f9ee 	bl	276b2 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b2d6:	b150      	cbz	r0, b2ee <bt_gatt_disconnected+0x96>
		struct addr_with_id addr_with_id = {
    b2d8:	7a23      	ldrb	r3, [r4, #8]
    b2da:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b2de:	4a15      	ldr	r2, [pc, #84]	; (b334 <bt_gatt_disconnected+0xdc>)
		struct addr_with_id addr_with_id = {
    b2e0:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b2e2:	ab03      	add	r3, sp, #12
    b2e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b2e8:	2001      	movs	r0, #1
    b2ea:	f01d fd2b 	bl	28d44 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    b2ee:	4620      	mov	r0, r4
    b2f0:	f7ff fa9a 	bl	a828 <find_cf_cfg>
	if (!cfg) {
    b2f4:	4606      	mov	r6, r0
    b2f6:	b138      	cbz	r0, b308 <bt_gatt_disconnected+0xb0>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b2f8:	7a20      	ldrb	r0, [r4, #8]
    b2fa:	4629      	mov	r1, r5
    b2fc:	f01c f9d9 	bl	276b2 <bt_addr_le_is_bonded>
    b300:	b940      	cbnz	r0, b314 <bt_gatt_disconnected+0xbc>
		clear_cf_cfg(cfg);
    b302:	4630      	mov	r0, r6
    b304:	f01d fa40 	bl	28788 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    b308:	b00d      	add	sp, #52	; 0x34
    b30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    b30c:	4607      	mov	r7, r0
    b30e:	e7d1      	b.n	b2b4 <bt_gatt_disconnected+0x5c>
    b310:	2701      	movs	r7, #1
    b312:	e7cf      	b.n	b2b4 <bt_gatt_disconnected+0x5c>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b314:	4629      	mov	r1, r5
    b316:	1c70      	adds	r0, r6, #1
    b318:	f01d f976 	bl	28608 <bt_addr_le_copy>
    b31c:	f06f 0102 	mvn.w	r1, #2
    b320:	f106 000c 	add.w	r0, r6, #12
    b324:	f01d f9f7 	bl	28716 <atomic_and>
}
    b328:	e7ee      	b.n	b308 <bt_gatt_disconnected+0xb0>
    b32a:	bf00      	nop
    b32c:	0000a961 	.word	0x0000a961
    b330:	00033401 	.word	0x00033401
    b334:	0000a73d 	.word	0x0000a73d

0000b338 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    b338:	4b10      	ldr	r3, [pc, #64]	; (b37c <get_io_capa+0x44>)
    b33a:	681b      	ldr	r3, [r3, #0]
    b33c:	b1bb      	cbz	r3, b36e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    b33e:	681a      	ldr	r2, [r3, #0]
    b340:	b142      	cbz	r2, b354 <get_io_capa+0x1c>
    b342:	6859      	ldr	r1, [r3, #4]
    b344:	b131      	cbz	r1, b354 <get_io_capa+0x1c>
    b346:	6899      	ldr	r1, [r3, #8]
    b348:	b911      	cbnz	r1, b350 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    b34a:	490d      	ldr	r1, [pc, #52]	; (b380 <get_io_capa+0x48>)
    b34c:	7809      	ldrb	r1, [r1, #0]
    b34e:	b939      	cbnz	r1, b360 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    b350:	2004      	movs	r0, #4
    b352:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    b354:	490a      	ldr	r1, [pc, #40]	; (b380 <get_io_capa+0x48>)
    b356:	7809      	ldrb	r1, [r1, #0]
    b358:	b111      	cbz	r1, b360 <get_io_capa+0x28>
    b35a:	b10a      	cbz	r2, b360 <get_io_capa+0x28>
    b35c:	6899      	ldr	r1, [r3, #8]
    b35e:	b941      	cbnz	r1, b372 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    b360:	685b      	ldr	r3, [r3, #4]
    b362:	b943      	cbnz	r3, b376 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    b364:	2a00      	cmp	r2, #0
    b366:	bf0c      	ite	eq
    b368:	2003      	moveq	r0, #3
    b36a:	2000      	movne	r0, #0
    b36c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    b36e:	2003      	movs	r0, #3
    b370:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    b372:	2001      	movs	r0, #1
    b374:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    b376:	2002      	movs	r0, #2
	}
}
    b378:	4770      	bx	lr
    b37a:	bf00      	nop
    b37c:	200021f4 	.word	0x200021f4
    b380:	2000914e 	.word	0x2000914e

0000b384 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    b384:	4b04      	ldr	r3, [pc, #16]	; (b398 <bt_smp_accept+0x14>)
    b386:	6818      	ldr	r0, [r3, #0]
    b388:	b918      	cbnz	r0, b392 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.chan.ops = &ops;
    b38a:	4a04      	ldr	r2, [pc, #16]	; (b39c <bt_smp_accept+0x18>)
    b38c:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    b38e:	600b      	str	r3, [r1, #0]

		return 0;
    b390:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    b392:	f06f 000b 	mvn.w	r0, #11
}
    b396:	4770      	bx	lr
    b398:	20001320 	.word	0x20001320
    b39c:	0002e330 	.word	0x0002e330

0000b3a0 <get_auth.isra.0>:
	if (sc_supported) {
    b3a0:	4b0c      	ldr	r3, [pc, #48]	; (b3d4 <get_auth.isra.0+0x34>)
    b3a2:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    b3a4:	b510      	push	{r4, lr}
	if (sc_supported) {
    b3a6:	b17b      	cbz	r3, b3c8 <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    b3a8:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b3ac:	f7ff ffc4 	bl	b338 <get_io_capa>
	if (bondable) {
    b3b0:	4b09      	ldr	r3, [pc, #36]	; (b3d8 <get_auth.isra.0+0x38>)
    b3b2:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    b3b4:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    b3b6:	bf0c      	ite	eq
    b3b8:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    b3bc:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    b3c0:	b12b      	cbz	r3, b3ce <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    b3c2:	f044 0001 	orr.w	r0, r4, #1
}
    b3c6:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    b3c8:	f000 0407 	and.w	r4, r0, #7
    b3cc:	e7ee      	b.n	b3ac <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    b3ce:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    b3d2:	e7f8      	b.n	b3c6 <get_auth.isra.0+0x26>
    b3d4:	2000914e 	.word	0x2000914e
    b3d8:	20000c0b 	.word	0x20000c0b

0000b3dc <smp_init>:
{
    b3dc:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    b3de:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    b3e2:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    b3e4:	22f0      	movs	r2, #240	; 0xf0
    b3e6:	2100      	movs	r1, #0
    b3e8:	4628      	mov	r0, r5
    b3ea:	f01b fb05 	bl	269f8 <memset>
	if (bt_rand(smp->prnd, 16)) {
    b3ee:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    b3f2:	2110      	movs	r1, #16
    b3f4:	f00a fd8e 	bl	15f14 <bt_rand>
    b3f8:	4604      	mov	r4, r0
    b3fa:	b948      	cbnz	r0, b410 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    b3fc:	2105      	movs	r1, #5
    b3fe:	4628      	mov	r0, r5
    b400:	f01d fd14 	bl	28e2c <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    b404:	f7fd fdac 	bl	8f60 <bt_pub_key_get>
    b408:	4b02      	ldr	r3, [pc, #8]	; (b414 <smp_init+0x38>)
    b40a:	6018      	str	r0, [r3, #0]
}
    b40c:	4620      	mov	r0, r4
    b40e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b410:	2408      	movs	r4, #8
    b412:	e7fb      	b.n	b40c <smp_init+0x30>
    b414:	200022d4 	.word	0x200022d4

0000b418 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b418:	b513      	push	{r0, r1, r4, lr}
    b41a:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b41c:	2200      	movs	r2, #0
    b41e:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    b420:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    b422:	460a      	mov	r2, r1
    b424:	6800      	ldr	r0, [r0, #0]
    b426:	2106      	movs	r1, #6
    b428:	f01c fba8 	bl	27b7c <bt_l2cap_send_cb>
    b42c:	4805      	ldr	r0, [pc, #20]	; (b444 <smp_send.isra.0+0x2c>)
    b42e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    b432:	2300      	movs	r3, #0
    b434:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    b438:	b002      	add	sp, #8
    b43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b43e:	f018 bc95 	b.w	23d6c <k_delayed_work_submit_to_queue>
    b442:	bf00      	nop
    b444:	20001fd8 	.word	0x20001fd8

0000b448 <compute_and_check_and_send_slave_dhcheck>:
{
    b448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    b44c:	2210      	movs	r2, #16
{
    b44e:	b0a3      	sub	sp, #140	; 0x8c
    b450:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    b452:	2100      	movs	r1, #0
    b454:	eb0d 0002 	add.w	r0, sp, r2
    b458:	f01b face 	bl	269f8 <memset>
	switch (smp->method) {
    b45c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b460:	2b05      	cmp	r3, #5
    b462:	d87e      	bhi.n	b562 <compute_and_check_and_send_slave_dhcheck+0x11a>
    b464:	e8df f003 	tbb	[pc, r3]
    b468:	09030309 	.word	0x09030309
    b46c:	7f7d      	.short	0x7f7d
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b46e:	2204      	movs	r2, #4
    b470:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    b474:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    b476:	f01b fa94 	bl	269a2 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    b47a:	4b63      	ldr	r3, [pc, #396]	; (b608 <compute_and_check_and_send_slave_dhcheck+0x1c0>)
		   &smp->chan.chan.conn->le.init_addr,
    b47c:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    b480:	aa14      	add	r2, sp, #80	; 0x50
    b482:	f103 0630 	add.w	r6, r3, #48	; 0x30
    b486:	6818      	ldr	r0, [r3, #0]
    b488:	6859      	ldr	r1, [r3, #4]
    b48a:	4615      	mov	r5, r2
    b48c:	c503      	stmia	r5!, {r0, r1}
    b48e:	3308      	adds	r3, #8
    b490:	42b3      	cmp	r3, r6
    b492:	462a      	mov	r2, r5
    b494:	d1f7      	bne.n	b486 <compute_and_check_and_send_slave_dhcheck+0x3e>
    b496:	6818      	ldr	r0, [r3, #0]
    b498:	791b      	ldrb	r3, [r3, #4]
    b49a:	6028      	str	r0, [r5, #0]
    b49c:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    b49e:	ad0c      	add	r5, sp, #48	; 0x30
    b4a0:	2220      	movs	r2, #32
    b4a2:	f204 114f 	addw	r1, r4, #335	; 0x14f
    b4a6:	4628      	mov	r0, r5
    b4a8:	f01d fcb1 	bl	28e0e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    b4ac:	4857      	ldr	r0, [pc, #348]	; (b60c <compute_and_check_and_send_slave_dhcheck+0x1c4>)
    b4ae:	ab08      	add	r3, sp, #32
    b4b0:	2220      	movs	r2, #32
    b4b2:	4629      	mov	r1, r5
    b4b4:	f01d fcd7 	bl	28e66 <bt_smp_aes_cmac>
	if (err) {
    b4b8:	2800      	cmp	r0, #0
    b4ba:	d152      	bne.n	b562 <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b4bc:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    b4c0:	2210      	movs	r2, #16
    b4c2:	4639      	mov	r1, r7
    b4c4:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b4c8:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    b4cc:	f01d fc9f 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    b4d0:	2210      	movs	r2, #16
    b4d2:	4641      	mov	r1, r8
    b4d4:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    b4d8:	f01d fc99 	bl	28e0e <sys_memcpy_swap>
	m[37] = a1->type;
    b4dc:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    b4e0:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    b4e4:	2206      	movs	r2, #6
    b4e6:	f109 0190 	add.w	r1, r9, #144	; 0x90
    b4ea:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    b4ee:	f01d fc8e 	bl	28e0e <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b4f2:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    b4f6:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    b4fa:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    b4fe:	2206      	movs	r2, #6
    b500:	f109 0197 	add.w	r1, r9, #151	; 0x97
    b504:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    b508:	f01d fc81 	bl	28e0e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    b50c:	4633      	mov	r3, r6
    b50e:	2235      	movs	r2, #53	; 0x35
    b510:	a914      	add	r1, sp, #80	; 0x50
    b512:	a808      	add	r0, sp, #32
    b514:	f01d fca7 	bl	28e66 <bt_smp_aes_cmac>
	if (err) {
    b518:	bb18      	cbnz	r0, b562 <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(mackey, 16);
    b51a:	4630      	mov	r0, r6
    b51c:	f01d fcdb 	bl	28ed6 <sys_mem_swap.constprop.0>
		   smp->tk)) {
    b520:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    b524:	2301      	movs	r3, #1
    b526:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    b52a:	2235      	movs	r2, #53	; 0x35
    b52c:	464b      	mov	r3, r9
    b52e:	a914      	add	r1, sp, #80	; 0x50
    b530:	a808      	add	r0, sp, #32
    b532:	f01d fc98 	bl	28e66 <bt_smp_aes_cmac>
	if (err) {
    b536:	b9a0      	cbnz	r0, b562 <compute_and_check_and_send_slave_dhcheck+0x11a>
	sys_mem_swap(ltk, 16);
    b538:	4648      	mov	r0, r9
    b53a:	f01d fccc 	bl	28ed6 <sys_mem_swap.constprop.0>
		   &smp->chan.chan.conn->le.resp_addr,
    b53e:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b540:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    b542:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b546:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b548:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    b54c:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b54e:	e9cd 2300 	strd	r2, r3, [sp]
    b552:	9102      	str	r1, [sp, #8]
    b554:	ab04      	add	r3, sp, #16
    b556:	463a      	mov	r2, r7
    b558:	4641      	mov	r1, r8
    b55a:	4630      	mov	r0, r6
    b55c:	f01d fcc9 	bl	28ef2 <smp_f6>
    b560:	b148      	cbz	r0, b576 <compute_and_check_and_send_slave_dhcheck+0x12e>
		return BT_SMP_ERR_UNSPECIFIED;
    b562:	2008      	movs	r0, #8
    b564:	e048      	b.n	b5f8 <compute_and_check_and_send_slave_dhcheck+0x1b0>
		if (smp->oobd_remote) {
    b566:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    b56a:	2900      	cmp	r1, #0
    b56c:	d085      	beq.n	b47a <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    b56e:	2210      	movs	r2, #16
    b570:	eb0d 0002 	add.w	r0, sp, r2
    b574:	e77f      	b.n	b476 <compute_and_check_and_send_slave_dhcheck+0x2e>
	if (smp->method == LE_SC_OOB) {
    b576:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b57a:	2b05      	cmp	r3, #5
    b57c:	d108      	bne.n	b590 <compute_and_check_and_send_slave_dhcheck+0x148>
		if (smp->oobd_local) {
    b57e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    b582:	2210      	movs	r2, #16
    b584:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    b588:	2900      	cmp	r1, #0
    b58a:	d038      	beq.n	b5fe <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    b58c:	f01b fa09 	bl	269a2 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    b590:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b592:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    b594:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b598:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b59a:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    b59e:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b5a0:	e9cd 2300 	strd	r2, r3, [sp]
    b5a4:	9102      	str	r1, [sp, #8]
    b5a6:	ab04      	add	r3, sp, #16
    b5a8:	4642      	mov	r2, r8
    b5aa:	4639      	mov	r1, r7
    b5ac:	f01d fca1 	bl	28ef2 <smp_f6>
    b5b0:	2800      	cmp	r0, #0
    b5b2:	d1d6      	bne.n	b562 <compute_and_check_and_send_slave_dhcheck+0x11a>
	if (memcmp(smp->e, re, 16)) {
    b5b4:	4629      	mov	r1, r5
    b5b6:	2210      	movs	r2, #16
    b5b8:	f204 106f 	addw	r0, r4, #367	; 0x16f
    b5bc:	f01b f9e1 	bl	26982 <memcmp>
    b5c0:	4605      	mov	r5, r0
    b5c2:	b9f8      	cbnz	r0, b604 <compute_and_check_and_send_slave_dhcheck+0x1bc>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    b5c4:	210d      	movs	r1, #13
    b5c6:	4620      	mov	r0, r4
    b5c8:	f01d fd0f 	bl	28fea <smp_create_pdu.isra.0>
	if (!buf) {
    b5cc:	4606      	mov	r6, r0
    b5ce:	2800      	cmp	r0, #0
    b5d0:	d0c7      	beq.n	b562 <compute_and_check_and_send_slave_dhcheck+0x11a>
	req = net_buf_add(buf, sizeof(*req));
    b5d2:	2110      	movs	r1, #16
    b5d4:	3008      	adds	r0, #8
    b5d6:	f020 fd60 	bl	2c09a <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    b5da:	2210      	movs	r2, #16
    b5dc:	a914      	add	r1, sp, #80	; 0x50
    b5de:	f01b f9e0 	bl	269a2 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    b5e2:	462a      	mov	r2, r5
    b5e4:	4631      	mov	r1, r6
    b5e6:	4620      	mov	r0, r4
    b5e8:	f7ff ff16 	bl	b418 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b5ec:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b5f0:	2101      	movs	r1, #1
    b5f2:	f01d fc1b 	bl	28e2c <atomic_set_bit>
	return 0;
    b5f6:	4628      	mov	r0, r5
}
    b5f8:	b023      	add	sp, #140	; 0x8c
    b5fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
    b5fe:	f01b f9fb 	bl	269f8 <memset>
    b602:	e7c5      	b.n	b590 <compute_and_check_and_send_slave_dhcheck+0x148>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b604:	200b      	movs	r0, #11
    b606:	e7f7      	b.n	b5f8 <compute_and_check_and_send_slave_dhcheck+0x1b0>
    b608:	0002dcf9 	.word	0x0002dcf9
    b60c:	0003344a 	.word	0x0003344a

0000b610 <sc_send_public_key>:
{
    b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    b612:	210c      	movs	r1, #12
{
    b614:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    b616:	f01d fce8 	bl	28fea <smp_create_pdu.isra.0>
	if (!req_buf) {
    b61a:	4604      	mov	r4, r0
    b61c:	b1b0      	cbz	r0, b64c <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    b61e:	2140      	movs	r1, #64	; 0x40
    b620:	3008      	adds	r0, #8
    b622:	f020 fd3a 	bl	2c09a <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    b626:	4f0a      	ldr	r7, [pc, #40]	; (b650 <sc_send_public_key+0x40>)
    b628:	2220      	movs	r2, #32
    b62a:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    b62c:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    b62e:	f01b f9b8 	bl	269a2 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    b632:	6839      	ldr	r1, [r7, #0]
    b634:	2220      	movs	r2, #32
    b636:	4411      	add	r1, r2
    b638:	18b0      	adds	r0, r6, r2
    b63a:	f01b f9b2 	bl	269a2 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    b63e:	4628      	mov	r0, r5
    b640:	2200      	movs	r2, #0
    b642:	4621      	mov	r1, r4
    b644:	f7ff fee8 	bl	b418 <smp_send.isra.0>
	return 0;
    b648:	2000      	movs	r0, #0
}
    b64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b64c:	2008      	movs	r0, #8
    b64e:	e7fc      	b.n	b64a <sc_send_public_key+0x3a>
    b650:	200022d4 	.word	0x200022d4

0000b654 <smp_send_pairing_confirm>:
{
    b654:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    b656:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    b65a:	2c02      	cmp	r4, #2
{
    b65c:	4605      	mov	r5, r0
	switch (smp->method) {
    b65e:	d824      	bhi.n	b6aa <smp_send_pairing_confirm+0x56>
    b660:	b14c      	cbz	r4, b676 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b662:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    b666:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    b66a:	40dc      	lsrs	r4, r3
    b66c:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    b670:	f064 047f 	orn	r4, r4, #127	; 0x7f
    b674:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b676:	2103      	movs	r1, #3
    b678:	4628      	mov	r0, r5
    b67a:	f01d fcb6 	bl	28fea <smp_create_pdu.isra.0>
	if (!buf) {
    b67e:	4606      	mov	r6, r0
    b680:	b1a8      	cbz	r0, b6ae <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    b682:	2110      	movs	r1, #16
    b684:	3008      	adds	r0, #8
    b686:	f020 fd08 	bl	2c09a <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b68a:	9000      	str	r0, [sp, #0]
    b68c:	4810      	ldr	r0, [pc, #64]	; (b6d0 <smp_send_pairing_confirm+0x7c>)
    b68e:	4623      	mov	r3, r4
    b690:	6800      	ldr	r0, [r0, #0]
    b692:	f105 02df 	add.w	r2, r5, #223	; 0xdf
    b696:	f205 110f 	addw	r1, r5, #271	; 0x10f
    b69a:	f01d fc76 	bl	28f8a <smp_f4>
    b69e:	4604      	mov	r4, r0
    b6a0:	b148      	cbz	r0, b6b6 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    b6a2:	4630      	mov	r0, r6
    b6a4:	f014 fb72 	bl	1fd8c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b6a8:	e001      	b.n	b6ae <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    b6aa:	2c03      	cmp	r4, #3
    b6ac:	d001      	beq.n	b6b2 <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    b6ae:	2008      	movs	r0, #8
    b6b0:	e00c      	b.n	b6cc <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
    b6b2:	2400      	movs	r4, #0
    b6b4:	e7df      	b.n	b676 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    b6b6:	4602      	mov	r2, r0
    b6b8:	4631      	mov	r1, r6
    b6ba:	4628      	mov	r0, r5
    b6bc:	f7ff feac 	bl	b418 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b6c0:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    b6c4:	4621      	mov	r1, r4
    b6c6:	f01d fbbf 	bl	28e48 <atomic_clear_bit>
	return 0;
    b6ca:	4620      	mov	r0, r4
}
    b6cc:	b002      	add	sp, #8
    b6ce:	bd70      	pop	{r4, r5, r6, pc}
    b6d0:	200022d4 	.word	0x200022d4

0000b6d4 <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
    b6d4:	b538      	push	{r3, r4, r5, lr}
    b6d6:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    b6da:	4604      	mov	r4, r0
    b6dc:	2b05      	cmp	r3, #5
    b6de:	d814      	bhi.n	b70a <smp_public_key_slave.part.0+0x36>
    b6e0:	e8df f003 	tbb	[pc, r3]
    b6e4:	030d3603 	.word	0x030d3603
    b6e8:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b6ea:	30b8      	adds	r0, #184	; 0xb8
    b6ec:	2104      	movs	r1, #4
    b6ee:	f01d fb9d 	bl	28e2c <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    b6f2:	4620      	mov	r0, r4
    b6f4:	f7ff ffae 	bl	b654 <smp_send_pairing_confirm>
		if (err) {
    b6f8:	2800      	cmp	r0, #0
    b6fa:	d037      	beq.n	b76c <smp_public_key_slave.part.0+0x98>
}
    b6fc:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    b6fe:	2104      	movs	r1, #4
    b700:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    b704:	f00a fc06 	bl	15f14 <bt_rand>
    b708:	b108      	cbz	r0, b70e <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
    b70a:	2008      	movs	r0, #8
    b70c:	e7f6      	b.n	b6fc <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
    b70e:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    b712:	4a1f      	ldr	r2, [pc, #124]	; (b790 <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
    b714:	4d1f      	ldr	r5, [pc, #124]	; (b794 <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
    b716:	fbb1 f3f2 	udiv	r3, r1, r2
    b71a:	fb02 1313 	mls	r3, r2, r3, r1
    b71e:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    b722:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    b724:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    b728:	b163      	cbz	r3, b744 <smp_public_key_slave.part.0+0x70>
    b72a:	681b      	ldr	r3, [r3, #0]
    b72c:	b153      	cbz	r3, b744 <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    b72e:	210a      	movs	r1, #10
    b730:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b734:	f01d fb7a 	bl	28e2c <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    b738:	682b      	ldr	r3, [r5, #0]
    b73a:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    b73e:	681b      	ldr	r3, [r3, #0]
    b740:	6820      	ldr	r0, [r4, #0]
    b742:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b744:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b746:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    b74a:	f01d fb6f 	bl	28e2c <atomic_set_bit>
		break;
    b74e:	e00d      	b.n	b76c <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b750:	2103      	movs	r1, #3
    b752:	30b8      	adds	r0, #184	; 0xb8
    b754:	f01d fb6a 	bl	28e2c <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b758:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b75c:	2109      	movs	r1, #9
    b75e:	f01d fb65 	bl	28e2c <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    b762:	4b0c      	ldr	r3, [pc, #48]	; (b794 <smp_public_key_slave.part.0+0xc0>)
    b764:	6820      	ldr	r0, [r4, #0]
    b766:	681b      	ldr	r3, [r3, #0]
    b768:	685b      	ldr	r3, [r3, #4]
    b76a:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    b76c:	490a      	ldr	r1, [pc, #40]	; (b798 <smp_public_key_slave.part.0+0xc4>)
    b76e:	f204 100f 	addw	r0, r4, #271	; 0x10f
    b772:	f7fd fc03 	bl	8f7c <bt_dh_key_gen>
    b776:	4605      	mov	r5, r0
    b778:	2800      	cmp	r0, #0
    b77a:	d1c6      	bne.n	b70a <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    b77c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    b780:	2107      	movs	r1, #7
    b782:	f01d fb53 	bl	28e2c <atomic_set_bit>
	return 0;
    b786:	4628      	mov	r0, r5
    b788:	e7b8      	b.n	b6fc <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b78a:	2104      	movs	r1, #4
    b78c:	e7db      	b.n	b746 <smp_public_key_slave.part.0+0x72>
    b78e:	bf00      	nop
    b790:	000f4240 	.word	0x000f4240
    b794:	200021f4 	.word	0x200021f4
    b798:	0000bc91 	.word	0x0000bc91

0000b79c <smp_public_key>:
{
    b79c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    b79e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    b7a0:	f200 140f 	addw	r4, r0, #271	; 0x10f
{
    b7a4:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    b7a6:	2220      	movs	r2, #32
    b7a8:	4631      	mov	r1, r6
    b7aa:	4620      	mov	r0, r4
    b7ac:	f01b f8f9 	bl	269a2 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    b7b0:	2220      	movs	r2, #32
    b7b2:	18b1      	adds	r1, r6, r2
    b7b4:	f205 102f 	addw	r0, r5, #303	; 0x12f
    b7b8:	f01b f8f3 	bl	269a2 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    b7bc:	491b      	ldr	r1, [pc, #108]	; (b82c <smp_public_key+0x90>)
    b7be:	2240      	movs	r2, #64	; 0x40
    b7c0:	4620      	mov	r0, r4
    b7c2:	f01b f8de 	bl	26982 <memcmp>
    b7c6:	b148      	cbz	r0, b7dc <smp_public_key+0x40>
	if (!sc_public_key) {
    b7c8:	4b19      	ldr	r3, [pc, #100]	; (b830 <smp_public_key+0x94>)
    b7ca:	681c      	ldr	r4, [r3, #0]
    b7cc:	bb24      	cbnz	r4, b818 <smp_public_key+0x7c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    b7ce:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    b7d2:	2106      	movs	r1, #6
    b7d4:	f01d fb2a 	bl	28e2c <atomic_set_bit>
		return 0;
    b7d8:	4620      	mov	r0, r4
}
    b7da:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b7dc:	210d      	movs	r1, #13
    b7de:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    b7e2:	f01d fb23 	bl	28e2c <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    b7e6:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
    b7e8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    b7ec:	b933      	cbnz	r3, b7fc <smp_public_key+0x60>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b7ee:	7a20      	ldrb	r0, [r4, #8]
    b7f0:	f104 0188 	add.w	r1, r4, #136	; 0x88
    b7f4:	f000 fe02 	bl	c3fc <bt_keys_get_addr>
    b7f8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
    b7fc:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    b800:	2b00      	cmp	r3, #0
    b802:	d0e1      	beq.n	b7c8 <smp_public_key+0x2c>
    b804:	89da      	ldrh	r2, [r3, #14]
    b806:	f002 0224 	and.w	r2, r2, #36	; 0x24
    b80a:	2a00      	cmp	r2, #0
    b80c:	d0dc      	beq.n	b7c8 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    b80e:	7b5b      	ldrb	r3, [r3, #13]
    b810:	079b      	lsls	r3, r3, #30
    b812:	d5d9      	bpl.n	b7c8 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    b814:	2003      	movs	r0, #3
    b816:	e7e0      	b.n	b7da <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
    b818:	4628      	mov	r0, r5
    b81a:	f7ff fef9 	bl	b610 <sc_send_public_key>
	if (err) {
    b81e:	2800      	cmp	r0, #0
    b820:	d1db      	bne.n	b7da <smp_public_key+0x3e>
    b822:	4628      	mov	r0, r5
}
    b824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b828:	f7ff bf54 	b.w	b6d4 <smp_public_key_slave.part.0>
    b82c:	0003345a 	.word	0x0003345a
    b830:	200022d4 	.word	0x200022d4

0000b834 <smp_pairing_req>:
{
    b834:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    b838:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    b83a:	78fb      	ldrb	r3, [r7, #3]
    b83c:	3b07      	subs	r3, #7
    b83e:	2b09      	cmp	r3, #9
{
    b840:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    b842:	d904      	bls.n	b84e <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    b844:	2706      	movs	r7, #6
}
    b846:	4638      	mov	r0, r7
    b848:	b002      	add	sp, #8
    b84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    b84e:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
    b850:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    b854:	b163      	cbz	r3, b870 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    b856:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    b85a:	210e      	movs	r1, #14
    b85c:	4628      	mov	r0, r5
    b85e:	f01d fbbb 	bl	28fd8 <atomic_test_bit>
    b862:	b980      	cbnz	r0, b886 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    b864:	4620      	mov	r0, r4
    b866:	f7ff fdb9 	bl	b3dc <smp_init>
		if (ret) {
    b86a:	b160      	cbz	r0, b886 <smp_pairing_req+0x52>
			return ret;
    b86c:	b2c7      	uxtb	r7, r0
    b86e:	e7ea      	b.n	b846 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b870:	7a30      	ldrb	r0, [r6, #8]
    b872:	f106 0188 	add.w	r1, r6, #136	; 0x88
    b876:	f000 fdc1 	bl	c3fc <bt_keys_get_addr>
    b87a:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    b87e:	2800      	cmp	r0, #0
    b880:	d1e9      	bne.n	b856 <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    b882:	2708      	movs	r7, #8
    b884:	e7df      	b.n	b846 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    b886:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    b888:	2206      	movs	r2, #6
    b88a:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    b88c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    b890:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    b894:	f01b f885 	bl	269a2 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    b898:	2302      	movs	r3, #2
    b89a:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    b89e:	78b8      	ldrb	r0, [r7, #2]
    b8a0:	f7ff fd7e 	bl	b3a0 <get_auth.isra.0>
    b8a4:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    b8a8:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    b8aa:	f7ff fd45 	bl	b338 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b8ae:	4bb2      	ldr	r3, [pc, #712]	; (bb78 <smp_pairing_req+0x344>)
	rsp->io_capability = get_io_capa();
    b8b0:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    b8b4:	781b      	ldrb	r3, [r3, #0]
    b8b6:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    b8ba:	2310      	movs	r3, #16
    b8bc:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    b8c0:	793b      	ldrb	r3, [r7, #4]
    b8c2:	f003 0303 	and.w	r3, r3, #3
    b8c6:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    b8ca:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    b8cc:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    b8d0:	f003 0303 	and.w	r3, r3, #3
    b8d4:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    b8d8:	d012      	beq.n	b900 <smp_pairing_req+0xcc>
    b8da:	78bb      	ldrb	r3, [r7, #2]
    b8dc:	071b      	lsls	r3, r3, #28
    b8de:	d50f      	bpl.n	b900 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    b8e0:	2105      	movs	r1, #5
    b8e2:	4628      	mov	r0, r5
    b8e4:	f01d faa2 	bl	28e2c <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    b8e8:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    b8ec:	f003 0302 	and.w	r3, r3, #2
    b8f0:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    b8f4:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    b8f8:	f003 0302 	and.w	r3, r3, #2
    b8fc:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    b900:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    b904:	0698      	lsls	r0, r3, #26
    b906:	d506      	bpl.n	b916 <smp_pairing_req+0xe2>
    b908:	78bb      	ldrb	r3, [r7, #2]
    b90a:	0699      	lsls	r1, r3, #26
    b90c:	d503      	bpl.n	b916 <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    b90e:	2113      	movs	r1, #19
    b910:	4628      	mov	r0, r5
    b912:	f01d fa8b 	bl	28e2c <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    b916:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    b91a:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    b91e:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    b922:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    b926:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    b92a:	07da      	lsls	r2, r3, #31
    b92c:	d506      	bpl.n	b93c <smp_pairing_req+0x108>
    b92e:	78bb      	ldrb	r3, [r7, #2]
    b930:	07db      	lsls	r3, r3, #31
    b932:	d503      	bpl.n	b93c <smp_pairing_req+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    b934:	210c      	movs	r1, #12
    b936:	4628      	mov	r0, r5
    b938:	f01d fa78 	bl	28e2c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    b93c:	2103      	movs	r1, #3
    b93e:	4628      	mov	r0, r5
    b940:	f01d fa74 	bl	28e2c <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b944:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    b946:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b948:	f01d fb46 	bl	28fd8 <atomic_test_bit>
    b94c:	f8d4 8000 	ldr.w	r8, [r4]
    b950:	2800      	cmp	r0, #0
    b952:	d151      	bne.n	b9f8 <smp_pairing_req+0x1c4>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    b954:	2f04      	cmp	r7, #4
    b956:	d81d      	bhi.n	b994 <smp_pairing_req+0x160>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    b958:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    b95c:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    b960:	4013      	ands	r3, r2
    b962:	07d8      	lsls	r0, r3, #31
    b964:	d465      	bmi.n	ba32 <smp_pairing_req+0x1fe>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    b966:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    b96a:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    b96e:	4318      	orrs	r0, r3
    b970:	f010 0004 	ands.w	r0, r0, #4
    b974:	d00e      	beq.n	b994 <smp_pairing_req+0x160>
	method = gen_method_legacy[remote_io][get_io_capa()];
    b976:	f7ff fcdf 	bl	b338 <get_io_capa>
    b97a:	4b80      	ldr	r3, [pc, #512]	; (bb7c <smp_pairing_req+0x348>)
    b97c:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    b980:	441f      	add	r7, r3
    b982:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
    b984:	2804      	cmp	r0, #4
    b986:	d105      	bne.n	b994 <smp_pairing_req+0x160>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b988:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    b98c:	2b00      	cmp	r3, #0
    b98e:	bf0c      	ite	eq
    b990:	2002      	moveq	r0, #2
    b992:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    b994:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    b998:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    b99c:	b93b      	cbnz	r3, b9ae <smp_pairing_req+0x17a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b99e:	f898 0008 	ldrb.w	r0, [r8, #8]
    b9a2:	f108 0188 	add.w	r1, r8, #136	; 0x88
    b9a6:	f000 fd29 	bl	c3fc <bt_keys_get_addr>
    b9aa:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    b9ae:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    b9b2:	2a00      	cmp	r2, #0
    b9b4:	d143      	bne.n	ba3e <smp_pairing_req+0x20a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b9b6:	2105      	movs	r1, #5
    b9b8:	4628      	mov	r0, r5
    b9ba:	f01d fb0d 	bl	28fd8 <atomic_test_bit>
    b9be:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    b9c2:	2800      	cmp	r0, #0
    b9c4:	f040 80e2 	bne.w	bb8c <smp_pairing_req+0x358>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    b9c8:	461f      	mov	r7, r3
    b9ca:	2b00      	cmp	r3, #0
    b9cc:	d155      	bne.n	ba7a <smp_pairing_req+0x246>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    b9ce:	210e      	movs	r1, #14
    b9d0:	4628      	mov	r0, r5
    b9d2:	f01d fb01 	bl	28fd8 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    b9d6:	2800      	cmp	r0, #0
    b9d8:	d14f      	bne.n	ba7a <smp_pairing_req+0x246>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    b9da:	4e69      	ldr	r6, [pc, #420]	; (bb80 <smp_pairing_req+0x34c>)
    b9dc:	6833      	ldr	r3, [r6, #0]
    b9de:	2b00      	cmp	r3, #0
    b9e0:	d04b      	beq.n	ba7a <smp_pairing_req+0x246>
	    bt_auth && bt_auth->pairing_confirm) {
    b9e2:	695b      	ldr	r3, [r3, #20]
    b9e4:	2b00      	cmp	r3, #0
    b9e6:	d048      	beq.n	ba7a <smp_pairing_req+0x246>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b9e8:	4628      	mov	r0, r5
    b9ea:	2109      	movs	r1, #9
    b9ec:	f01d fa1e 	bl	28e2c <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    b9f0:	6833      	ldr	r3, [r6, #0]
    b9f2:	6820      	ldr	r0, [r4, #0]
    b9f4:	695b      	ldr	r3, [r3, #20]
    b9f6:	e0bb      	b.n	bb70 <smp_pairing_req+0x33c>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    b9f8:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    b9fc:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    ba00:	ea00 0302 	and.w	r3, r0, r2
    ba04:	0719      	lsls	r1, r3, #28
    ba06:	d506      	bpl.n	ba16 <smp_pairing_req+0x1e2>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    ba08:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    ba0c:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    ba10:	430b      	orrs	r3, r1
    ba12:	07db      	lsls	r3, r3, #31
    ba14:	d40f      	bmi.n	ba36 <smp_pairing_req+0x202>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    ba16:	2f04      	cmp	r7, #4
    ba18:	d80f      	bhi.n	ba3a <smp_pairing_req+0x206>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ba1a:	4310      	orrs	r0, r2
    ba1c:	f010 0004 	ands.w	r0, r0, #4
    ba20:	d0b8      	beq.n	b994 <smp_pairing_req+0x160>
	return gen_method_sc[remote_io][get_io_capa()];
    ba22:	f7ff fc89 	bl	b338 <get_io_capa>
    ba26:	4b57      	ldr	r3, [pc, #348]	; (bb84 <smp_pairing_req+0x350>)
    ba28:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    ba2c:	441f      	add	r7, r3
    ba2e:	5c38      	ldrb	r0, [r7, r0]
    ba30:	e7b0      	b.n	b994 <smp_pairing_req+0x160>
		return LEGACY_OOB;
    ba32:	2006      	movs	r0, #6
    ba34:	e7ae      	b.n	b994 <smp_pairing_req+0x160>
			return LE_SC_OOB;
    ba36:	2005      	movs	r0, #5
    ba38:	e7ac      	b.n	b994 <smp_pairing_req+0x160>
		return JUST_WORKS;
    ba3a:	2000      	movs	r0, #0
    ba3c:	e7aa      	b.n	b994 <smp_pairing_req+0x160>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    ba3e:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    ba40:	f011 0f24 	tst.w	r1, #36	; 0x24
    ba44:	d0b7      	beq.n	b9b6 <smp_pairing_req+0x182>
	return MIN(req->max_key_size, rsp->max_key_size);
    ba46:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    ba4a:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    ba4e:	7b12      	ldrb	r2, [r2, #12]
    ba50:	4283      	cmp	r3, r0
    ba52:	bf28      	it	cs
    ba54:	4603      	movcs	r3, r0
    ba56:	429a      	cmp	r2, r3
    ba58:	d901      	bls.n	ba5e <smp_pairing_req+0x22a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ba5a:	2703      	movs	r7, #3
    ba5c:	e6f3      	b.n	b846 <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    ba5e:	0689      	lsls	r1, r1, #26
    ba60:	d404      	bmi.n	ba6c <smp_pairing_req+0x238>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    ba62:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ba66:	2b00      	cmp	r3, #0
    ba68:	d1a5      	bne.n	b9b6 <smp_pairing_req+0x182>
    ba6a:	e7f6      	b.n	ba5a <smp_pairing_req+0x226>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ba6c:	2105      	movs	r1, #5
    ba6e:	4628      	mov	r0, r5
    ba70:	f01d fab2 	bl	28fd8 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    ba74:	2800      	cmp	r0, #0
    ba76:	d1f4      	bne.n	ba62 <smp_pairing_req+0x22e>
    ba78:	e7ef      	b.n	ba5a <smp_pairing_req+0x226>
	ret = send_pairing_rsp(smp);
    ba7a:	4620      	mov	r0, r4
    ba7c:	f01d faee 	bl	2905c <send_pairing_rsp>
	if (ret) {
    ba80:	4607      	mov	r7, r0
    ba82:	2800      	cmp	r0, #0
    ba84:	f47f aedf 	bne.w	b846 <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ba88:	2103      	movs	r1, #3
    ba8a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ba8e:	f01d f9cd 	bl	28e2c <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    ba92:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    ba94:	7a30      	ldrb	r0, [r6, #8]
    ba96:	f106 0188 	add.w	r1, r6, #136	; 0x88
    ba9a:	f000 fd3f 	bl	c51c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    ba9e:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    baa2:	b128      	cbz	r0, bab0 <smp_pairing_req+0x27c>
    baa4:	7b42      	ldrb	r2, [r0, #13]
    baa6:	07d2      	lsls	r2, r2, #31
    baa8:	d502      	bpl.n	bab0 <smp_pairing_req+0x27c>
    baaa:	2b00      	cmp	r3, #0
    baac:	f43f aee9 	beq.w	b882 <smp_pairing_req+0x4e>
	switch (smp->method) {
    bab0:	2b06      	cmp	r3, #6
    bab2:	f63f aee6 	bhi.w	b882 <smp_pairing_req+0x4e>
    bab6:	a201      	add	r2, pc, #4	; (adr r2, babc <smp_pairing_req+0x288>)
    bab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    babc:	0000bad9 	.word	0x0000bad9
    bac0:	0000bb61 	.word	0x0000bb61
    bac4:	0000bb05 	.word	0x0000bb05
    bac8:	0000b883 	.word	0x0000b883
    bacc:	0000b883 	.word	0x0000b883
    bad0:	0000b883 	.word	0x0000b883
    bad4:	0000badd 	.word	0x0000badd
    bad8:	461f      	mov	r7, r3
    bada:	e6b4      	b.n	b846 <smp_pairing_req+0x12>
		if (bt_auth && bt_auth->oob_data_request) {
    badc:	4e28      	ldr	r6, [pc, #160]	; (bb80 <smp_pairing_req+0x34c>)
    bade:	6833      	ldr	r3, [r6, #0]
    bae0:	2b00      	cmp	r3, #0
    bae2:	d047      	beq.n	bb74 <smp_pairing_req+0x340>
    bae4:	68db      	ldr	r3, [r3, #12]
    bae6:	2b00      	cmp	r3, #0
    bae8:	d044      	beq.n	bb74 <smp_pairing_req+0x340>
			struct bt_conn_oob_info info = {
    baea:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    baec:	4628      	mov	r0, r5
    baee:	2109      	movs	r1, #9
			struct bt_conn_oob_info info = {
    baf0:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    baf4:	f01d f99a 	bl	28e2c <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    baf8:	6833      	ldr	r3, [r6, #0]
    bafa:	6820      	ldr	r0, [r4, #0]
    bafc:	68db      	ldr	r3, [r3, #12]
    bafe:	a901      	add	r1, sp, #4
    bb00:	4798      	blx	r3
		break;
    bb02:	e6a0      	b.n	b846 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    bb04:	2104      	movs	r1, #4
    bb06:	eb0d 0001 	add.w	r0, sp, r1
    bb0a:	f00a fa03 	bl	15f14 <bt_rand>
    bb0e:	2800      	cmp	r0, #0
    bb10:	f47f aeb7 	bne.w	b882 <smp_pairing_req+0x4e>
			passkey %= 1000000;
    bb14:	9901      	ldr	r1, [sp, #4]
    bb16:	4a1c      	ldr	r2, [pc, #112]	; (bb88 <smp_pairing_req+0x354>)
		if (bt_auth && bt_auth->passkey_display) {
    bb18:	f8df 8064 	ldr.w	r8, [pc, #100]	; bb80 <smp_pairing_req+0x34c>
			passkey %= 1000000;
    bb1c:	fbb1 f3f2 	udiv	r3, r1, r2
    bb20:	fb02 1313 	mls	r3, r2, r3, r1
    bb24:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    bb26:	f8d8 3000 	ldr.w	r3, [r8]
    bb2a:	b15b      	cbz	r3, bb44 <smp_pairing_req+0x310>
    bb2c:	681b      	ldr	r3, [r3, #0]
    bb2e:	b14b      	cbz	r3, bb44 <smp_pairing_req+0x310>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    bb30:	210a      	movs	r1, #10
    bb32:	4628      	mov	r0, r5
    bb34:	f01d f97a 	bl	28e2c <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    bb38:	f8d8 3000 	ldr.w	r3, [r8]
    bb3c:	9901      	ldr	r1, [sp, #4]
    bb3e:	681b      	ldr	r3, [r3, #0]
    bb40:	4630      	mov	r0, r6
    bb42:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    bb44:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    bb46:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
    bb4a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    bb4e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    bb50:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    bb54:	0a1b      	lsrs	r3, r3, #8
    bb56:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    bb5a:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
}
    bb5e:	e672      	b.n	b846 <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bb60:	4628      	mov	r0, r5
    bb62:	2109      	movs	r1, #9
    bb64:	f01d f962 	bl	28e2c <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    bb68:	4b05      	ldr	r3, [pc, #20]	; (bb80 <smp_pairing_req+0x34c>)
    bb6a:	681b      	ldr	r3, [r3, #0]
    bb6c:	685b      	ldr	r3, [r3, #4]
    bb6e:	4630      	mov	r0, r6
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    bb70:	4798      	blx	r3
		return 0;
    bb72:	e668      	b.n	b846 <smp_pairing_req+0x12>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    bb74:	2702      	movs	r7, #2
	return legacy_request_tk(smp);
    bb76:	e666      	b.n	b846 <smp_pairing_req+0x12>
    bb78:	2000914d 	.word	0x2000914d
    bb7c:	00033418 	.word	0x00033418
    bb80:	200021f4 	.word	0x200021f4
    bb84:	00033431 	.word	0x00033431
    bb88:	000f4240 	.word	0x000f4240
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    bb8c:	7ab2      	ldrb	r2, [r6, #10]
    bb8e:	2a04      	cmp	r2, #4
    bb90:	461f      	mov	r7, r3
    bb92:	d116      	bne.n	bbc2 <smp_pairing_req+0x38e>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    bb94:	2b00      	cmp	r3, #0
    bb96:	f43f af60 	beq.w	ba5a <smp_pairing_req+0x226>
	return MIN(req->max_key_size, rsp->max_key_size);
    bb9a:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    bb9e:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
	     conn->required_sec_level == BT_SECURITY_L4) &&
    bba2:	4293      	cmp	r3, r2
    bba4:	bf28      	it	cs
    bba6:	4613      	movcs	r3, r2
    bba8:	2b10      	cmp	r3, #16
    bbaa:	f47f ae4b 	bne.w	b844 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bbae:	210c      	movs	r1, #12
    bbb0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    bbb4:	f01d f93a 	bl	28e2c <atomic_set_bit>
	return send_pairing_rsp(smp);
    bbb8:	4620      	mov	r0, r4
    bbba:	f01d fa4f 	bl	2905c <send_pairing_rsp>
    bbbe:	4607      	mov	r7, r0
    bbc0:	e641      	b.n	b846 <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	d1f3      	bne.n	bbae <smp_pairing_req+0x37a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bbc6:	210e      	movs	r1, #14
    bbc8:	4628      	mov	r0, r5
    bbca:	f01d fa05 	bl	28fd8 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    bbce:	2800      	cmp	r0, #0
    bbd0:	d1ed      	bne.n	bbae <smp_pairing_req+0x37a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    bbd2:	4e04      	ldr	r6, [pc, #16]	; (bbe4 <smp_pairing_req+0x3b0>)
    bbd4:	6833      	ldr	r3, [r6, #0]
    bbd6:	2b00      	cmp	r3, #0
    bbd8:	d0e9      	beq.n	bbae <smp_pairing_req+0x37a>
	    bt_auth && bt_auth->pairing_confirm) {
    bbda:	695b      	ldr	r3, [r3, #20]
    bbdc:	2b00      	cmp	r3, #0
    bbde:	d0e6      	beq.n	bbae <smp_pairing_req+0x37a>
    bbe0:	e702      	b.n	b9e8 <smp_pairing_req+0x1b4>
    bbe2:	bf00      	nop
    bbe4:	200021f4 	.word	0x200021f4

0000bbe8 <smp_pairing_complete>:
{
    bbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bbec:	4f26      	ldr	r7, [pc, #152]	; (bc88 <smp_pairing_complete+0xa0>)
    bbee:	4604      	mov	r4, r0
    bbf0:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
	if (!status) {
    bbf4:	460d      	mov	r5, r1
    bbf6:	b9b1      	cbnz	r1, bc26 <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    bbf8:	210c      	movs	r1, #12
    bbfa:	4640      	mov	r0, r8
    bbfc:	f01d f9ec 	bl	28fd8 <atomic_test_bit>
		if (bond_flag) {
    bc00:	4605      	mov	r5, r0
    bc02:	b120      	cbz	r0, bc0e <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    bc04:	6823      	ldr	r3, [r4, #0]
    bc06:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    bc0a:	f000 fcbd 	bl	c588 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    bc0e:	683b      	ldr	r3, [r7, #0]
    bc10:	b123      	cbz	r3, bc1c <smp_pairing_complete+0x34>
    bc12:	699b      	ldr	r3, [r3, #24]
    bc14:	b113      	cbz	r3, bc1c <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
    bc16:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    bc18:	6820      	ldr	r0, [r4, #0]
    bc1a:	4798      	blx	r3
	smp_reset(smp);
    bc1c:	4620      	mov	r0, r4
}
    bc1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    bc22:	f01d bab3 	b.w	2918c <smp_reset>
	switch (smp_err) {
    bc26:	1e4b      	subs	r3, r1, #1
    bc28:	b2db      	uxtb	r3, r3
    bc2a:	2b0d      	cmp	r3, #13
    bc2c:	bf9c      	itt	ls
    bc2e:	4a17      	ldrls	r2, [pc, #92]	; (bc8c <smp_pairing_complete+0xa4>)
    bc30:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    bc32:	6803      	ldr	r3, [r0, #0]
    bc34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    bc38:	bf88      	it	hi
    bc3a:	2608      	movhi	r6, #8
		if (smp->chan.chan.conn->le.keys &&
    bc3c:	b153      	cbz	r3, bc54 <smp_pairing_complete+0x6c>
    bc3e:	7b1b      	ldrb	r3, [r3, #12]
    bc40:	b9d3      	cbnz	r3, bc78 <smp_pairing_complete+0x90>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    bc42:	6823      	ldr	r3, [r4, #0]
    bc44:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    bc48:	f000 fc78 	bl	c53c <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    bc4c:	6823      	ldr	r3, [r4, #0]
    bc4e:	2200      	movs	r2, #0
    bc50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    bc54:	2102      	movs	r1, #2
    bc56:	4640      	mov	r0, r8
    bc58:	f01d f9be 	bl	28fd8 <atomic_test_bit>
    bc5c:	b920      	cbnz	r0, bc68 <smp_pairing_complete+0x80>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    bc5e:	6820      	ldr	r0, [r4, #0]
    bc60:	4632      	mov	r2, r6
    bc62:	4629      	mov	r1, r5
    bc64:	f7fd fae0 	bl	9228 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    bc68:	683b      	ldr	r3, [r7, #0]
    bc6a:	2b00      	cmp	r3, #0
    bc6c:	d0d6      	beq.n	bc1c <smp_pairing_complete+0x34>
    bc6e:	69db      	ldr	r3, [r3, #28]
    bc70:	2b00      	cmp	r3, #0
    bc72:	d0d3      	beq.n	bc1c <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    bc74:	4631      	mov	r1, r6
    bc76:	e7cf      	b.n	bc18 <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    bc78:	2102      	movs	r1, #2
    bc7a:	4640      	mov	r0, r8
    bc7c:	f01d f9ac 	bl	28fd8 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    bc80:	2800      	cmp	r0, #0
    bc82:	d1de      	bne.n	bc42 <smp_pairing_complete+0x5a>
    bc84:	e7e6      	b.n	bc54 <smp_pairing_complete+0x6c>
    bc86:	bf00      	nop
    bc88:	200021f4 	.word	0x200021f4
    bc8c:	0003340a 	.word	0x0003340a

0000bc90 <bt_smp_dhkey_ready>:
{
    bc90:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    bc92:	2107      	movs	r1, #7
{
    bc94:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    bc96:	4816      	ldr	r0, [pc, #88]	; (bcf0 <bt_smp_dhkey_ready+0x60>)
    bc98:	f01d fa60 	bl	2915c <atomic_test_and_clear_bit>
    bc9c:	b338      	cbz	r0, bcee <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
    bc9e:	b92c      	cbnz	r4, bcac <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    bca0:	210b      	movs	r1, #11
}
    bca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    bca6:	4813      	ldr	r0, [pc, #76]	; (bcf4 <bt_smp_dhkey_ready+0x64>)
    bca8:	f01d ba9b 	b.w	291e2 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    bcac:	4621      	mov	r1, r4
    bcae:	4812      	ldr	r0, [pc, #72]	; (bcf8 <bt_smp_dhkey_ready+0x68>)
    bcb0:	2220      	movs	r2, #32
    bcb2:	f01a fe76 	bl	269a2 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bcb6:	480e      	ldr	r0, [pc, #56]	; (bcf0 <bt_smp_dhkey_ready+0x60>)
    bcb8:	2109      	movs	r1, #9
    bcba:	f01d f98d 	bl	28fd8 <atomic_test_bit>
    bcbe:	b128      	cbz	r0, bccc <bt_smp_dhkey_ready+0x3c>
}
    bcc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    bcc4:	480a      	ldr	r0, [pc, #40]	; (bcf0 <bt_smp_dhkey_ready+0x60>)
    bcc6:	2108      	movs	r1, #8
    bcc8:	f01d b8b0 	b.w	28e2c <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    bccc:	4808      	ldr	r0, [pc, #32]	; (bcf0 <bt_smp_dhkey_ready+0x60>)
    bcce:	210f      	movs	r1, #15
    bcd0:	f01d f982 	bl	28fd8 <atomic_test_bit>
    bcd4:	2800      	cmp	r0, #0
    bcd6:	d1f3      	bne.n	bcc0 <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    bcd8:	4805      	ldr	r0, [pc, #20]	; (bcf0 <bt_smp_dhkey_ready+0x60>)
    bcda:	2108      	movs	r1, #8
    bcdc:	f01d f97c 	bl	28fd8 <atomic_test_bit>
    bce0:	b128      	cbz	r0, bcee <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    bce2:	4804      	ldr	r0, [pc, #16]	; (bcf4 <bt_smp_dhkey_ready+0x64>)
    bce4:	f7ff fbb0 	bl	b448 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    bce8:	4601      	mov	r1, r0
    bcea:	2800      	cmp	r0, #0
    bcec:	d1d9      	bne.n	bca2 <bt_smp_dhkey_ready+0x12>
}
    bcee:	bd10      	pop	{r4, pc}
    bcf0:	200013dc 	.word	0x200013dc
    bcf4:	20001320 	.word	0x20001320
    bcf8:	2000146f 	.word	0x2000146f

0000bcfc <bt_smp_recv>:
{
    bcfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    bcfe:	898b      	ldrh	r3, [r1, #12]
{
    bd00:	4604      	mov	r4, r0
    bd02:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    bd04:	b38b      	cbz	r3, bd6a <bt_smp_recv+0x6e>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bd06:	2101      	movs	r1, #1
    bd08:	f105 0008 	add.w	r0, r5, #8
    bd0c:	f020 fa41 	bl	2c192 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    bd10:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    bd12:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    bd14:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    bd18:	f01d f95e 	bl	28fd8 <atomic_test_bit>
    bd1c:	bb28      	cbnz	r0, bd6a <bt_smp_recv+0x6e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    bd1e:	7831      	ldrb	r1, [r6, #0]
    bd20:	290d      	cmp	r1, #13
    bd22:	d803      	bhi.n	bd2c <bt_smp_recv+0x30>
    bd24:	4f12      	ldr	r7, [pc, #72]	; (bd70 <bt_smp_recv+0x74>)
    bd26:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    bd2a:	b923      	cbnz	r3, bd36 <bt_smp_recv+0x3a>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    bd2c:	2107      	movs	r1, #7
		smp_error(smp, err);
    bd2e:	4620      	mov	r0, r4
    bd30:	f01d fa57 	bl	291e2 <smp_error>
    bd34:	e019      	b.n	bd6a <bt_smp_recv+0x6e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    bd36:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    bd3a:	f01d fa0f 	bl	2915c <atomic_test_and_clear_bit>
    bd3e:	7833      	ldrb	r3, [r6, #0]
    bd40:	b918      	cbnz	r0, bd4a <bt_smp_recv+0x4e>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    bd42:	2b05      	cmp	r3, #5
    bd44:	d011      	beq.n	bd6a <bt_smp_recv+0x6e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    bd46:	2108      	movs	r1, #8
    bd48:	e7f1      	b.n	bd2e <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
    bd4a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    bd4e:	89a9      	ldrh	r1, [r5, #12]
    bd50:	7912      	ldrb	r2, [r2, #4]
    bd52:	4291      	cmp	r1, r2
    bd54:	d001      	beq.n	bd5a <bt_smp_recv+0x5e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    bd56:	210a      	movs	r1, #10
    bd58:	e7e9      	b.n	bd2e <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
    bd5a:	4629      	mov	r1, r5
    bd5c:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    bd60:	4620      	mov	r0, r4
    bd62:	4798      	blx	r3
	if (err) {
    bd64:	4601      	mov	r1, r0
    bd66:	2800      	cmp	r0, #0
    bd68:	d1e1      	bne.n	bd2e <bt_smp_recv+0x32>
}
    bd6a:	2000      	movs	r0, #0
    bd6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd6e:	bf00      	nop
    bd70:	0002e2c0 	.word	0x0002e2c0

0000bd74 <smp_pairing_failed>:
{
    bd74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    bd76:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    bd78:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    bd7a:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    bd7e:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    bd80:	2109      	movs	r1, #9
    bd82:	4628      	mov	r0, r5
    bd84:	f01d f9ea 	bl	2915c <atomic_test_and_clear_bit>
    bd88:	b140      	cbz	r0, bd9c <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
    bd8a:	4b0b      	ldr	r3, [pc, #44]	; (bdb8 <smp_pairing_failed+0x44>)
    bd8c:	681b      	ldr	r3, [r3, #0]
    bd8e:	b963      	cbnz	r3, bdaa <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
    bd90:	4620      	mov	r0, r4
    bd92:	7831      	ldrb	r1, [r6, #0]
    bd94:	f7ff ff28 	bl	bbe8 <smp_pairing_complete>
}
    bd98:	2000      	movs	r0, #0
    bd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    bd9c:	210a      	movs	r1, #10
    bd9e:	4628      	mov	r0, r5
    bda0:	f01d f9dc 	bl	2915c <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    bda4:	2800      	cmp	r0, #0
    bda6:	d1f0      	bne.n	bd8a <smp_pairing_failed+0x16>
    bda8:	e7f2      	b.n	bd90 <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
    bdaa:	691b      	ldr	r3, [r3, #16]
    bdac:	2b00      	cmp	r3, #0
    bdae:	d0ef      	beq.n	bd90 <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
    bdb0:	4638      	mov	r0, r7
    bdb2:	4798      	blx	r3
    bdb4:	e7ec      	b.n	bd90 <smp_pairing_failed+0x1c>
    bdb6:	bf00      	nop
    bdb8:	200021f4 	.word	0x200021f4

0000bdbc <bt_smp_connected>:
{
    bdbc:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    bdbe:	4905      	ldr	r1, [pc, #20]	; (bdd4 <bt_smp_connected+0x18>)
{
    bdc0:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    bdc2:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    bdc6:	f021 fbed 	bl	2d5a4 <k_delayed_work_init>
	smp_reset(smp);
    bdca:	4620      	mov	r0, r4
}
    bdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    bdd0:	f01d b9dc 	b.w	2918c <smp_reset>
    bdd4:	0002921f 	.word	0x0002921f

0000bdd8 <bt_smp_encrypt_change>:
{
    bdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = chan->conn;
    bddc:	4605      	mov	r5, r0
{
    bdde:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
    bde0:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    bde4:	b088      	sub	sp, #32
    bde6:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bde8:	2101      	movs	r1, #1
    bdea:	4628      	mov	r0, r5
    bdec:	f01d f82c 	bl	28e48 <atomic_clear_bit>
	if (hci_status) {
    bdf0:	b946      	cbnz	r6, be04 <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
    bdf2:	7afb      	ldrb	r3, [r7, #11]
    bdf4:	b133      	cbz	r3, be04 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    bdf6:	2103      	movs	r1, #3
    bdf8:	f01d f8ee 	bl	28fd8 <atomic_test_bit>
    bdfc:	b928      	cbnz	r0, be0a <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
    bdfe:	4620      	mov	r0, r4
    be00:	f01d f9c4 	bl	2918c <smp_reset>
}
    be04:	b008      	add	sp, #32
    be06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    be0a:	2105      	movs	r1, #5
    be0c:	4628      	mov	r0, r5
    be0e:	f01d f8e3 	bl	28fd8 <atomic_test_bit>
    be12:	b198      	cbz	r0, be3c <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    be14:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    be18:	071b      	lsls	r3, r3, #28
    be1a:	d507      	bpl.n	be2c <bt_smp_encrypt_change+0x54>
    be1c:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    be20:	071f      	lsls	r7, r3, #28
    be22:	d503      	bpl.n	be2c <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    be24:	2110      	movs	r1, #16
    be26:	4628      	mov	r0, r5
    be28:	f01d f800 	bl	28e2c <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    be2c:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    be30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    be34:	f023 0308 	bic.w	r3, r3, #8
    be38:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    be3c:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    be40:	07de      	lsls	r6, r3, #31
    be42:	f140 80b2 	bpl.w	bfaa <bt_smp_encrypt_change+0x1d2>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    be46:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    be48:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    be4c:	f01c ffee 	bl	28e2c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    be50:	2102      	movs	r1, #2
    be52:	4628      	mov	r0, r5
    be54:	f01c ffea 	bl	28e2c <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    be58:	6827      	ldr	r7, [r4, #0]
	if (!keys) {
    be5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    be5e:	2b00      	cmp	r3, #0
    be60:	d0d0      	beq.n	be04 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    be62:	2105      	movs	r1, #5
    be64:	f01d f8b8 	bl	28fd8 <atomic_test_bit>
    be68:	4681      	mov	r9, r0
    be6a:	2800      	cmp	r0, #0
    be6c:	d15d      	bne.n	bf2a <bt_smp_encrypt_change+0x152>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    be6e:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    be72:	07da      	lsls	r2, r3, #31
    be74:	d559      	bpl.n	bf2a <bt_smp_encrypt_change+0x152>
	struct bt_keys *keys = conn->le.keys;
    be76:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    be78:	211a      	movs	r1, #26
    be7a:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    be7c:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    be80:	f00a f848 	bl	15f14 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    be84:	2106      	movs	r1, #6
    be86:	4620      	mov	r0, r4
    be88:	f01d f8af 	bl	28fea <smp_create_pdu.isra.0>
		if (!buf) {
    be8c:	4680      	mov	r8, r0
    be8e:	2800      	cmp	r0, #0
    be90:	d04b      	beq.n	bf2a <bt_smp_encrypt_change+0x152>
		info = net_buf_add(buf, sizeof(*info));
    be92:	2110      	movs	r1, #16
    be94:	3008      	adds	r0, #8
    be96:	f020 f900 	bl	2c09a <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    be9a:	7b32      	ldrb	r2, [r6, #12]
    be9c:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    be9e:	4682      	mov	sl, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    bea0:	f01a fd7f 	bl	269a2 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    bea4:	7b30      	ldrb	r0, [r6, #12]
    bea6:	280f      	cmp	r0, #15
    bea8:	d805      	bhi.n	beb6 <bt_smp_encrypt_change+0xde>
			(void)memset(info->ltk + keys->enc_size, 0,
    beaa:	f1c0 0210 	rsb	r2, r0, #16
    beae:	4649      	mov	r1, r9
    beb0:	4450      	add	r0, sl
    beb2:	f01a fda1 	bl	269f8 <memset>
		smp_send(smp, buf, NULL, NULL);
    beb6:	4641      	mov	r1, r8
    beb8:	2200      	movs	r2, #0
    beba:	4620      	mov	r0, r4
    bebc:	f7ff faac 	bl	b418 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    bec0:	2107      	movs	r1, #7
    bec2:	4620      	mov	r0, r4
    bec4:	f01d f891 	bl	28fea <smp_create_pdu.isra.0>
		if (!buf) {
    bec8:	4680      	mov	r8, r0
    beca:	b370      	cbz	r0, bf2a <bt_smp_encrypt_change+0x152>
		ident = net_buf_add(buf, sizeof(*ident));
    becc:	210a      	movs	r1, #10
    bece:	3008      	adds	r0, #8
    bed0:	f020 f8e3 	bl	2c09a <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    bed4:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    bed6:	4681      	mov	r9, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    bed8:	a905      	add	r1, sp, #20
    beda:	3002      	adds	r0, #2
    bedc:	f01a fd61 	bl	269a2 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    bee0:	2202      	movs	r2, #2
    bee2:	a907      	add	r1, sp, #28
    bee4:	4648      	mov	r0, r9
    bee6:	f01a fd5c 	bl	269a2 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    beea:	4641      	mov	r1, r8
    beec:	4620      	mov	r0, r4
    beee:	4a33      	ldr	r2, [pc, #204]	; (bfbc <bt_smp_encrypt_change+0x1e4>)
    bef0:	f7ff fa92 	bl	b418 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bef4:	210c      	movs	r1, #12
    bef6:	4628      	mov	r0, r5
    bef8:	f01d f86e 	bl	28fd8 <atomic_test_bit>
    befc:	b1a8      	cbz	r0, bf2a <bt_smp_encrypt_change+0x152>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    befe:	2101      	movs	r1, #1
    bf00:	4630      	mov	r0, r6
    bf02:	f01d fc87 	bl	29814 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    bf06:	2210      	movs	r2, #16
    bf08:	a901      	add	r1, sp, #4
    bf0a:	f106 004a 	add.w	r0, r6, #74	; 0x4a
    bf0e:	f01a fd48 	bl	269a2 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    bf12:	2208      	movs	r2, #8
    bf14:	a905      	add	r1, sp, #20
    bf16:	f106 0040 	add.w	r0, r6, #64	; 0x40
    bf1a:	f01a fd42 	bl	269a2 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    bf1e:	2202      	movs	r2, #2
    bf20:	a907      	add	r1, sp, #28
    bf22:	f106 0048 	add.w	r0, r6, #72	; 0x48
    bf26:	f01a fd3c 	bl	269a2 <memcpy>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    bf2a:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    bf2e:	079b      	lsls	r3, r3, #30
    bf30:	d532      	bpl.n	bf98 <bt_smp_encrypt_change+0x1c0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    bf32:	2108      	movs	r1, #8
    bf34:	4620      	mov	r0, r4
    bf36:	f01d f858 	bl	28fea <smp_create_pdu.isra.0>
		if (!buf) {
    bf3a:	4605      	mov	r5, r0
    bf3c:	2800      	cmp	r0, #0
    bf3e:	f43f af61 	beq.w	be04 <bt_smp_encrypt_change+0x2c>
		id_info = net_buf_add(buf, sizeof(*id_info));
    bf42:	2110      	movs	r1, #16
    bf44:	3008      	adds	r0, #8
    bf46:	f020 f8a8 	bl	2c09a <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
    bf4a:	7a39      	ldrb	r1, [r7, #8]
    bf4c:	4e1c      	ldr	r6, [pc, #112]	; (bfc0 <bt_smp_encrypt_change+0x1e8>)
    bf4e:	f44f 7394 	mov.w	r3, #296	; 0x128
    bf52:	2210      	movs	r2, #16
    bf54:	fb12 3101 	smlabb	r1, r2, r1, r3
    bf58:	4431      	add	r1, r6
    bf5a:	f01a fd22 	bl	269a2 <memcpy>
		smp_send(smp, buf, NULL, NULL);
    bf5e:	4629      	mov	r1, r5
    bf60:	2200      	movs	r2, #0
    bf62:	4620      	mov	r0, r4
    bf64:	f7ff fa58 	bl	b418 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
    bf68:	2109      	movs	r1, #9
    bf6a:	4620      	mov	r0, r4
    bf6c:	f01d f83d 	bl	28fea <smp_create_pdu.isra.0>
		if (!buf) {
    bf70:	4605      	mov	r5, r0
    bf72:	2800      	cmp	r0, #0
    bf74:	f43f af46 	beq.w	be04 <bt_smp_encrypt_change+0x2c>
		id_addr_info = net_buf_add(buf, sizeof(*id_addr_info));
    bf78:	2107      	movs	r1, #7
    bf7a:	3008      	adds	r0, #8
    bf7c:	f020 f88d 	bl	2c09a <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
    bf80:	7a39      	ldrb	r1, [r7, #8]
    bf82:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
    bf86:	2207      	movs	r2, #7
    bf88:	4431      	add	r1, r6
    bf8a:	f01a fd0a 	bl	269a2 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
    bf8e:	4a0d      	ldr	r2, [pc, #52]	; (bfc4 <bt_smp_encrypt_change+0x1ec>)
    bf90:	4629      	mov	r1, r5
    bf92:	4620      	mov	r0, r4
    bf94:	f7ff fa40 	bl	b418 <smp_send.isra.0>
	if (!smp->local_dist && !smp->remote_dist) {
    bf98:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    bf9c:	2900      	cmp	r1, #0
    bf9e:	f47f af31 	bne.w	be04 <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
    bfa2:	4620      	mov	r0, r4
    bfa4:	f7ff fe20 	bl	bbe8 <smp_pairing_complete>
    bfa8:	e72c      	b.n	be04 <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    bfaa:	0798      	lsls	r0, r3, #30
    bfac:	d501      	bpl.n	bfb2 <bt_smp_encrypt_change+0x1da>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    bfae:	2108      	movs	r1, #8
    bfb0:	e74a      	b.n	be48 <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    bfb2:	0759      	lsls	r1, r3, #29
    bfb4:	f57f af4c 	bpl.w	be50 <bt_smp_encrypt_change+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    bfb8:	210a      	movs	r1, #10
    bfba:	e745      	b.n	be48 <bt_smp_encrypt_change+0x70>
    bfbc:	000292d7 	.word	0x000292d7
    bfc0:	20000068 	.word	0x20000068
    bfc4:	000292e3 	.word	0x000292e3

0000bfc8 <smp_pairing_random>:
{
    bfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfcc:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    bfce:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    bfd2:	6889      	ldr	r1, [r1, #8]
{
    bfd4:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    bfd6:	2210      	movs	r2, #16
    bfd8:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bfda:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    bfde:	f01a fce0 	bl	269a2 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bfe2:	2105      	movs	r1, #5
    bfe4:	4630      	mov	r0, r6
    bfe6:	f01c fff7 	bl	28fd8 <atomic_test_bit>
    bfea:	2800      	cmp	r0, #0
    bfec:	d13d      	bne.n	c06a <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
    bfee:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bff0:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    bff2:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bff6:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    bff8:	f103 0296 	add.w	r2, r3, #150	; 0x96
    bffc:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    bffe:	9201      	str	r2, [sp, #4]
    c000:	9300      	str	r3, [sp, #0]
    c002:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    c006:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    c00a:	4639      	mov	r1, r7
    c00c:	4640      	mov	r0, r8
    c00e:	f01d f96f 	bl	292f0 <smp_c1>
	if (err) {
    c012:	b108      	cbz	r0, c018 <smp_pairing_random+0x50>
	switch (smp->method) {
    c014:	2508      	movs	r5, #8
    c016:	e096      	b.n	c146 <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    c018:	2210      	movs	r2, #16
    c01a:	4629      	mov	r1, r5
    c01c:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    c020:	f01a fcaf 	bl	26982 <memcmp>
    c024:	2800      	cmp	r0, #0
    c026:	f040 808d 	bne.w	c144 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
    c02a:	2208      	movs	r2, #8
    c02c:	4639      	mov	r1, r7
    c02e:	4628      	mov	r0, r5
    c030:	f01a fcb7 	bl	269a2 <memcpy>
	memcpy(out + 8, r1, 8);
    c034:	2208      	movs	r2, #8
    c036:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    c03a:	a80c      	add	r0, sp, #48	; 0x30
    c03c:	f01a fcb1 	bl	269a2 <memcpy>
	return bt_encrypt_le(k, out, out);
    c040:	462a      	mov	r2, r5
    c042:	4629      	mov	r1, r5
    c044:	4640      	mov	r0, r8
    c046:	f009 ff67 	bl	15f18 <bt_encrypt_le>
		if (err) {
    c04a:	2800      	cmp	r0, #0
    c04c:	d1e2      	bne.n	c014 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    c04e:	4629      	mov	r1, r5
    c050:	2210      	movs	r2, #16
    c052:	4640      	mov	r0, r8
    c054:	f01a fca5 	bl	269a2 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c058:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c05a:	4630      	mov	r0, r6
    c05c:	f01c fee6 	bl	28e2c <atomic_set_bit>
	return smp_send_pairing_random(smp);
    c060:	4620      	mov	r0, r4
    c062:	f01c ffe2 	bl	2902a <smp_send_pairing_random>
    c066:	4605      	mov	r5, r0
    c068:	e06d      	b.n	c146 <smp_pairing_random+0x17e>
	switch (smp->method) {
    c06a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    c06e:	2b05      	cmp	r3, #5
    c070:	d8d0      	bhi.n	c014 <smp_pairing_random+0x4c>
    c072:	a201      	add	r2, pc, #4	; (adr r2, c078 <smp_pairing_random+0xb0>)
    c074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c078:	0000c0ff 	.word	0x0000c0ff
    c07c:	0000c10d 	.word	0x0000c10d
    c080:	0000c10d 	.word	0x0000c10d
    c084:	0000c091 	.word	0x0000c091
    c088:	0000c015 	.word	0x0000c015
    c08c:	0000c199 	.word	0x0000c199
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    c090:	4b5a      	ldr	r3, [pc, #360]	; (c1fc <smp_pairing_random+0x234>)
    c092:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    c094:	2220      	movs	r2, #32
    c096:	f204 110f 	addw	r1, r4, #271	; 0x10f
    c09a:	a80a      	add	r0, sp, #40	; 0x28
    c09c:	f01c feb7 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    c0a0:	2220      	movs	r2, #32
    c0a2:	4629      	mov	r1, r5
    c0a4:	a812      	add	r0, sp, #72	; 0x48
    c0a6:	f01c feb2 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    c0aa:	2210      	movs	r2, #16
    c0ac:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    c0b0:	a81a      	add	r0, sp, #104	; 0x68
    c0b2:	f01c feac 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    c0b6:	2210      	movs	r2, #16
    c0b8:	4639      	mov	r1, r7
    c0ba:	a806      	add	r0, sp, #24
    c0bc:	f01c fea7 	bl	28e0e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    c0c0:	ab06      	add	r3, sp, #24
    c0c2:	2250      	movs	r2, #80	; 0x50
    c0c4:	a90a      	add	r1, sp, #40	; 0x28
    c0c6:	4618      	mov	r0, r3
    c0c8:	f01c fecd 	bl	28e66 <bt_smp_aes_cmac>
	if (err) {
    c0cc:	2800      	cmp	r0, #0
    c0ce:	d1a1      	bne.n	c014 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    c0d0:	2204      	movs	r2, #4
    c0d2:	a909      	add	r1, sp, #36	; 0x24
    c0d4:	a805      	add	r0, sp, #20
    c0d6:	f01a fc64 	bl	269a2 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c0da:	9b05      	ldr	r3, [sp, #20]
    c0dc:	4948      	ldr	r1, [pc, #288]	; (c200 <smp_pairing_random+0x238>)
    c0de:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c0e0:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c0e2:	fbb3 f2f1 	udiv	r2, r3, r1
    c0e6:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c0ea:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    c0ec:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c0ee:	f01c fe9d 	bl	28e2c <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c0f2:	4b44      	ldr	r3, [pc, #272]	; (c204 <smp_pairing_random+0x23c>)
    c0f4:	9905      	ldr	r1, [sp, #20]
    c0f6:	681b      	ldr	r3, [r3, #0]
    c0f8:	6820      	ldr	r0, [r4, #0]
    c0fa:	689b      	ldr	r3, [r3, #8]
    c0fc:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c0fe:	210d      	movs	r1, #13
    c100:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    c104:	f01c fe92 	bl	28e2c <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c108:	210f      	movs	r1, #15
    c10a:	e7a6      	b.n	c05a <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c10c:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    c110:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c114:	4939      	ldr	r1, [pc, #228]	; (c1fc <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c116:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c118:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    c11a:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    c11e:	9500      	str	r5, [sp, #0]
    c120:	6809      	ldr	r1, [r1, #0]
    c122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c126:	463a      	mov	r2, r7
    c128:	f204 100f 	addw	r0, r4, #271	; 0x10f
    c12c:	f01c ff2d 	bl	28f8a <smp_f4>
    c130:	2800      	cmp	r0, #0
    c132:	f47f af6f 	bne.w	c014 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    c136:	2210      	movs	r2, #16
    c138:	4629      	mov	r1, r5
    c13a:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    c13e:	f01a fc20 	bl	26982 <memcmp>
    c142:	b120      	cbz	r0, c14e <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
    c144:	2504      	movs	r5, #4
}
    c146:	4628      	mov	r0, r5
    c148:	b01e      	add	sp, #120	; 0x78
    c14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    c14e:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    c152:	2103      	movs	r1, #3
    c154:	4638      	mov	r0, r7
    c156:	f01c fe69 	bl	28e2c <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    c15a:	4620      	mov	r0, r4
    c15c:	f01c ff65 	bl	2902a <smp_send_pairing_random>
		if (err) {
    c160:	4605      	mov	r5, r0
    c162:	2800      	cmp	r0, #0
    c164:	d1ef      	bne.n	c146 <smp_pairing_random+0x17e>
		smp->passkey_round++;
    c166:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    c16a:	3301      	adds	r3, #1
    c16c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    c16e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    c170:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    c174:	d108      	bne.n	c188 <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c176:	4638      	mov	r0, r7
    c178:	210d      	movs	r1, #13
    c17a:	f01c fe57 	bl	28e2c <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    c17e:	210f      	movs	r1, #15
    c180:	4630      	mov	r0, r6
    c182:	f01c fe53 	bl	28e2c <atomic_set_bit>
			return 0;
    c186:	e7de      	b.n	c146 <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
    c188:	2110      	movs	r1, #16
    c18a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    c18e:	f009 fec1 	bl	15f14 <bt_rand>
    c192:	2800      	cmp	r0, #0
    c194:	d0d7      	beq.n	c146 <smp_pairing_random+0x17e>
    c196:	e73d      	b.n	c014 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    c198:	2110      	movs	r1, #16
    c19a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    c19e:	f009 feb9 	bl	15f14 <bt_rand>
    c1a2:	2800      	cmp	r0, #0
    c1a4:	f47f af36 	bne.w	c014 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
    c1a8:	4f16      	ldr	r7, [pc, #88]	; (c204 <smp_pairing_random+0x23c>)
    c1aa:	683b      	ldr	r3, [r7, #0]
    c1ac:	b193      	cbz	r3, c1d4 <smp_pairing_random+0x20c>
    c1ae:	68db      	ldr	r3, [r3, #12]
    c1b0:	b183      	cbz	r3, c1d4 <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
    c1b2:	4b15      	ldr	r3, [pc, #84]	; (c208 <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c1b4:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    c1b8:	881b      	ldrh	r3, [r3, #0]
    c1ba:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c1be:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    c1c2:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    c1c4:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    c1c8:	d406      	bmi.n	c1d8 <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
    c1ca:	2b00      	cmp	r3, #0
    c1cc:	bf0c      	ite	eq
    c1ce:	2003      	moveq	r0, #3
    c1d0:	2001      	movne	r0, #1
    c1d2:	e004      	b.n	c1de <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    c1d4:	2502      	movs	r5, #2
    c1d6:	e7b6      	b.n	c146 <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
    c1d8:	2b00      	cmp	r3, #0
    c1da:	bf18      	it	ne
    c1dc:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    c1de:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    c1e0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    c1e4:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    c1e8:	4630      	mov	r0, r6
    c1ea:	210b      	movs	r1, #11
    c1ec:	f01c fe1e 	bl	28e2c <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    c1f0:	683b      	ldr	r3, [r7, #0]
    c1f2:	6820      	ldr	r0, [r4, #0]
    c1f4:	68db      	ldr	r3, [r3, #12]
    c1f6:	a90a      	add	r1, sp, #40	; 0x28
    c1f8:	4798      	blx	r3
			return 0;
    c1fa:	e7a4      	b.n	c146 <smp_pairing_random+0x17e>
    c1fc:	200022d4 	.word	0x200022d4
    c200:	000f4240 	.word	0x000f4240
    c204:	200021f4 	.word	0x200021f4
    c208:	0002dd2e 	.word	0x0002dd2e

0000c20c <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    c20c:	4b0f      	ldr	r3, [pc, #60]	; (c24c <bt_smp_pkey_ready+0x40>)
{
    c20e:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    c210:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    c212:	b1d0      	cbz	r0, c24a <bt_smp_pkey_ready+0x3e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c214:	4c0e      	ldr	r4, [pc, #56]	; (c250 <bt_smp_pkey_ready+0x44>)
	z_impl_k_sem_give(sem);
    c216:	480f      	ldr	r0, [pc, #60]	; (c254 <bt_smp_pkey_ready+0x48>)
    c218:	f017 fc4c 	bl	23ab4 <z_impl_k_sem_give>
    c21c:	f3bf 8f5b 	dmb	ish
    c220:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    c224:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c228:	065b      	lsls	r3, r3, #25
    c22a:	d50e      	bpl.n	c24a <bt_smp_pkey_ready+0x3e>
	err = sc_send_public_key(smp);
    c22c:	4620      	mov	r0, r4
    c22e:	f7ff f9ef 	bl	b610 <sc_send_public_key>
	if (err) {
    c232:	4601      	mov	r1, r0
    c234:	b920      	cbnz	r0, c240 <bt_smp_pkey_ready+0x34>
    c236:	4620      	mov	r0, r4
    c238:	f7ff fa4c 	bl	b6d4 <smp_public_key_slave.part.0>
		if (err) {
    c23c:	4601      	mov	r1, r0
    c23e:	b120      	cbz	r0, c24a <bt_smp_pkey_ready+0x3e>
}
    c240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    c244:	4802      	ldr	r0, [pc, #8]	; (c250 <bt_smp_pkey_ready+0x44>)
    c246:	f01c bfcc 	b.w	291e2 <smp_error>
}
    c24a:	bd10      	pop	{r4, pc}
    c24c:	200022d4 	.word	0x200022d4
    c250:	20001320 	.word	0x20001320
    c254:	20000db4 	.word	0x20000db4

0000c258 <bt_smp_start_security>:
{
    c258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    c25c:	78c4      	ldrb	r4, [r0, #3]
    c25e:	2c01      	cmp	r4, #1
{
    c260:	4605      	mov	r5, r0
	switch (conn->role) {
    c262:	d005      	beq.n	c270 <bt_smp_start_security+0x18>
		return -EINVAL;
    c264:	f06f 0415 	mvn.w	r4, #21
}
    c268:	4620      	mov	r0, r4
    c26a:	b003      	add	sp, #12
    c26c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    c270:	f01c fdd9 	bl	28e26 <smp_chan_get>
	if (!smp) {
    c274:	4606      	mov	r6, r0
    c276:	2800      	cmp	r0, #0
    c278:	f000 80a0 	beq.w	c3bc <bt_smp_start_security+0x164>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c27c:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    c280:	2104      	movs	r1, #4
    c282:	4638      	mov	r0, r7
    c284:	f01c fea8 	bl	28fd8 <atomic_test_bit>
    c288:	2800      	cmp	r0, #0
    c28a:	f040 809a 	bne.w	c3c2 <bt_smp_start_security+0x16a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c28e:	2103      	movs	r1, #3
    c290:	4638      	mov	r0, r7
    c292:	f01c fea1 	bl	28fd8 <atomic_test_bit>
    c296:	b110      	cbz	r0, c29e <bt_smp_start_security+0x46>
		return -EBUSY;
    c298:	f06f 040f 	mvn.w	r4, #15
    c29c:	e7e4      	b.n	c268 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    c29e:	4621      	mov	r1, r4
    c2a0:	4638      	mov	r0, r7
    c2a2:	f01c fe99 	bl	28fd8 <atomic_test_bit>
    c2a6:	2800      	cmp	r0, #0
    c2a8:	d1f6      	bne.n	c298 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    c2aa:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    c2ac:	2b03      	cmp	r3, #3
    c2ae:	d03d      	beq.n	c32c <bt_smp_start_security+0xd4>
    c2b0:	d82c      	bhi.n	c30c <bt_smp_start_security+0xb4>
    c2b2:	3b01      	subs	r3, #1
    c2b4:	2b01      	cmp	r3, #1
    c2b6:	d946      	bls.n	c346 <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    c2b8:	210b      	movs	r1, #11
    c2ba:	1d28      	adds	r0, r5, #4
    c2bc:	f01c fe8c 	bl	28fd8 <atomic_test_bit>
    c2c0:	2800      	cmp	r0, #0
    c2c2:	d1cf      	bne.n	c264 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    c2c4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c2c8:	b983      	cbnz	r3, c2ec <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    c2ca:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    c2ce:	7a29      	ldrb	r1, [r5, #8]
    c2d0:	4622      	mov	r2, r4
    c2d2:	2020      	movs	r0, #32
    c2d4:	f000 f8d2 	bl	c47c <bt_keys_find>
    c2d8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    c2dc:	b930      	cbnz	r0, c2ec <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    c2de:	7a29      	ldrb	r1, [r5, #8]
    c2e0:	4622      	mov	r2, r4
    c2e2:	2004      	movs	r0, #4
    c2e4:	f000 f8ca 	bl	c47c <bt_keys_find>
    c2e8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    c2ec:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c2f0:	2b00      	cmp	r3, #0
    c2f2:	d0b7      	beq.n	c264 <bt_smp_start_security+0xc>
    c2f4:	89da      	ldrh	r2, [r3, #14]
    c2f6:	f002 0224 	and.w	r2, r2, #36	; 0x24
    c2fa:	2a00      	cmp	r2, #0
    c2fc:	d0b2      	beq.n	c264 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    c2fe:	7aaa      	ldrb	r2, [r5, #10]
    c300:	2a02      	cmp	r2, #2
    c302:	d920      	bls.n	c346 <bt_smp_start_security+0xee>
    c304:	7b5b      	ldrb	r3, [r3, #13]
    c306:	07db      	lsls	r3, r3, #31
    c308:	d5ac      	bpl.n	c264 <bt_smp_start_security+0xc>
    c30a:	e01c      	b.n	c346 <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
    c30c:	2b04      	cmp	r3, #4
    c30e:	d1d3      	bne.n	c2b8 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c310:	f7ff f812 	bl	b338 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c314:	2803      	cmp	r0, #3
    c316:	d104      	bne.n	c322 <bt_smp_start_security+0xca>
    c318:	4b2b      	ldr	r3, [pc, #172]	; (c3c8 <bt_smp_start_security+0x170>)
    c31a:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c31c:	b1f3      	cbz	r3, c35c <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c31e:	68dc      	ldr	r4, [r3, #12]
    c320:	b10c      	cbz	r4, c326 <bt_smp_start_security+0xce>
    c322:	4b2a      	ldr	r3, [pc, #168]	; (c3cc <bt_smp_start_security+0x174>)
    c324:	781c      	ldrb	r4, [r3, #0]
    c326:	f004 0401 	and.w	r4, r4, #1
    c32a:	e00a      	b.n	c342 <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c32c:	f7ff f804 	bl	b338 <get_io_capa>
    c330:	2803      	cmp	r0, #3
    c332:	d106      	bne.n	c342 <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    c334:	4b24      	ldr	r3, [pc, #144]	; (c3c8 <bt_smp_start_security+0x170>)
    c336:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    c338:	b11c      	cbz	r4, c342 <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    c33a:	68e4      	ldr	r4, [r4, #12]
    c33c:	3c00      	subs	r4, #0
    c33e:	bf18      	it	ne
    c340:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    c342:	2c00      	cmp	r4, #0
    c344:	d0b8      	beq.n	c2b8 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    c346:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    c34a:	b14b      	cbz	r3, c360 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
    c34c:	4630      	mov	r0, r6
    c34e:	f7ff f845 	bl	b3dc <smp_init>
    c352:	4604      	mov	r4, r0
    c354:	b180      	cbz	r0, c378 <bt_smp_start_security+0x120>
		return -ENOBUFS;
    c356:	f06f 0436 	mvn.w	r4, #54	; 0x36
    c35a:	e785      	b.n	c268 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    c35c:	2400      	movs	r4, #0
    c35e:	e7e2      	b.n	c326 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    c360:	7a28      	ldrb	r0, [r5, #8]
    c362:	f105 0188 	add.w	r1, r5, #136	; 0x88
    c366:	f000 f849 	bl	c3fc <bt_keys_get_addr>
    c36a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    c36e:	2800      	cmp	r0, #0
    c370:	d1ec      	bne.n	c34c <bt_smp_start_security+0xf4>
			return -ENOMEM;
    c372:	f06f 040b 	mvn.w	r4, #11
    c376:	e777      	b.n	c268 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    c378:	210b      	movs	r1, #11
    c37a:	4630      	mov	r0, r6
    c37c:	f01c fe35 	bl	28fea <smp_create_pdu.isra.0>
	if (!req_buf) {
    c380:	4680      	mov	r8, r0
    c382:	2800      	cmp	r0, #0
    c384:	d0e7      	beq.n	c356 <bt_smp_start_security+0xfe>
	req = net_buf_add(req_buf, sizeof(*req));
    c386:	2101      	movs	r1, #1
    c388:	3008      	adds	r0, #8
    c38a:	f01f fe86 	bl	2c09a <net_buf_simple_add>
    c38e:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    c390:	2009      	movs	r0, #9
    c392:	f7ff f805 	bl	b3a0 <get_auth.isra.0>
    c396:	4623      	mov	r3, r4
    c398:	f889 0000 	strb.w	r0, [r9]
    c39c:	4642      	mov	r2, r8
    c39e:	9400      	str	r4, [sp, #0]
    c3a0:	2106      	movs	r1, #6
    c3a2:	4628      	mov	r0, r5
    c3a4:	f01b fbea 	bl	27b7c <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    c3a8:	4638      	mov	r0, r7
    c3aa:	210e      	movs	r1, #14
    c3ac:	f01c fd3e 	bl	28e2c <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    c3b0:	2101      	movs	r1, #1
    c3b2:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    c3b6:	f01c fd39 	bl	28e2c <atomic_set_bit>
	return 0;
    c3ba:	e755      	b.n	c268 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    c3bc:	f06f 0438 	mvn.w	r4, #56	; 0x38
    c3c0:	e752      	b.n	c268 <bt_smp_start_security+0x10>
		return -EIO;
    c3c2:	f06f 0404 	mvn.w	r4, #4
    c3c6:	e74f      	b.n	c268 <bt_smp_start_security+0x10>
    c3c8:	200021f4 	.word	0x200021f4
    c3cc:	2000914e 	.word	0x2000914e

0000c3d0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    c3d0:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    c3d2:	4b07      	ldr	r3, [pc, #28]	; (c3f0 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    c3d4:	4807      	ldr	r0, [pc, #28]	; (c3f4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    c3d6:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    c3da:	f003 0306 	and.w	r3, r3, #6
    c3de:	1f9a      	subs	r2, r3, #6
    c3e0:	4253      	negs	r3, r2
    c3e2:	4153      	adcs	r3, r2
    c3e4:	4a04      	ldr	r2, [pc, #16]	; (c3f8 <bt_smp_init+0x28>)
    c3e6:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    c3e8:	f7fc fd86 	bl	8ef8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    c3ec:	2000      	movs	r0, #0
    c3ee:	bd08      	pop	{r3, pc}
    c3f0:	20000068 	.word	0x20000068
    c3f4:	2000043c 	.word	0x2000043c
    c3f8:	2000914e 	.word	0x2000914e

0000c3fc <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    c3fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    c3fe:	4c11      	ldr	r4, [pc, #68]	; (c444 <bt_keys_get_addr+0x48>)
    c400:	7823      	ldrb	r3, [r4, #0]
    c402:	4283      	cmp	r3, r0
{
    c404:	4605      	mov	r5, r0
    c406:	460e      	mov	r6, r1
    c408:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    c40a:	d00b      	beq.n	c424 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    c40c:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    c40e:	480e      	ldr	r0, [pc, #56]	; (c448 <bt_keys_get_addr+0x4c>)
    c410:	9400      	str	r4, [sp, #0]
    c412:	2207      	movs	r2, #7
    c414:	4669      	mov	r1, sp
    c416:	f8cd 4003 	str.w	r4, [sp, #3]
    c41a:	f01a fab2 	bl	26982 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    c41e:	b140      	cbz	r0, c432 <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    c420:	4620      	mov	r0, r4
    c422:	e00d      	b.n	c440 <bt_keys_get_addr+0x44>
    c424:	2207      	movs	r2, #7
    c426:	1c60      	adds	r0, r4, #1
    c428:	f01a faab 	bl	26982 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    c42c:	2800      	cmp	r0, #0
    c42e:	d1ed      	bne.n	c40c <bt_keys_get_addr+0x10>
    c430:	e7f6      	b.n	c420 <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    c432:	4805      	ldr	r0, [pc, #20]	; (c448 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    c434:	703d      	strb	r5, [r7, #0]
    c436:	2207      	movs	r2, #7
    c438:	4631      	mov	r1, r6
    c43a:	f01a fab2 	bl	269a2 <memcpy>
		return keys;
    c43e:	4801      	ldr	r0, [pc, #4]	; (c444 <bt_keys_get_addr+0x48>)
}
    c440:	b003      	add	sp, #12
    c442:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c444:	200022d8 	.word	0x200022d8
    c448:	200022d9 	.word	0x200022d9

0000c44c <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    c44c:	460b      	mov	r3, r1
    c44e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    c450:	4a04      	ldr	r2, [pc, #16]	; (c464 <bt_keys_foreach+0x18>)
{
    c452:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    c454:	89d4      	ldrh	r4, [r2, #14]
    c456:	4204      	tst	r4, r0
    c458:	d002      	beq.n	c460 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    c45a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    c45c:	4610      	mov	r0, r2
    c45e:	4718      	bx	r3
}
    c460:	bc10      	pop	{r4}
    c462:	4770      	bx	lr
    c464:	200022d8 	.word	0x200022d8

0000c468 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    c468:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    c46a:	4903      	ldr	r1, [pc, #12]	; (c478 <keys_commit+0x10>)
    c46c:	2200      	movs	r2, #0
    c46e:	2002      	movs	r0, #2
    c470:	f7ff ffec 	bl	c44c <bt_keys_foreach>
	}

	return 0;
}
    c474:	2000      	movs	r0, #0
    c476:	bd08      	pop	{r3, pc}
    c478:	000297f1 	.word	0x000297f1

0000c47c <bt_keys_find>:
{
    c47c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    c47e:	4c09      	ldr	r4, [pc, #36]	; (c4a4 <bt_keys_find+0x28>)
{
    c480:	460b      	mov	r3, r1
    c482:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    c484:	89e2      	ldrh	r2, [r4, #14]
    c486:	4202      	tst	r2, r0
    c488:	d007      	beq.n	c49a <bt_keys_find+0x1e>
    c48a:	7822      	ldrb	r2, [r4, #0]
    c48c:	429a      	cmp	r2, r3
    c48e:	d104      	bne.n	c49a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    c490:	2207      	movs	r2, #7
    c492:	1c60      	adds	r0, r4, #1
    c494:	f01a fa75 	bl	26982 <memcmp>
    c498:	b108      	cbz	r0, c49e <bt_keys_find+0x22>
	return NULL;
    c49a:	2000      	movs	r0, #0
}
    c49c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    c49e:	4620      	mov	r0, r4
    c4a0:	e7fc      	b.n	c49c <bt_keys_find+0x20>
    c4a2:	bf00      	nop
    c4a4:	200022d8 	.word	0x200022d8

0000c4a8 <bt_keys_find_irk>:
{
    c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c4aa:	780b      	ldrb	r3, [r1, #0]
    c4ac:	2b01      	cmp	r3, #1
    c4ae:	4607      	mov	r7, r0
    c4b0:	460c      	mov	r4, r1
    c4b2:	d001      	beq.n	c4b8 <bt_keys_find_irk+0x10>
		return NULL;
    c4b4:	2000      	movs	r0, #0
}
    c4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    c4b8:	798b      	ldrb	r3, [r1, #6]
    c4ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c4be:	2b40      	cmp	r3, #64	; 0x40
    c4c0:	d1f8      	bne.n	c4b4 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c4c2:	4d13      	ldr	r5, [pc, #76]	; (c510 <bt_keys_find_irk+0x68>)
    c4c4:	89eb      	ldrh	r3, [r5, #14]
    c4c6:	f013 0f02 	tst.w	r3, #2
    c4ca:	462e      	mov	r6, r5
    c4cc:	d0f2      	beq.n	c4b4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    c4ce:	7833      	ldrb	r3, [r6, #0]
    c4d0:	42bb      	cmp	r3, r7
    c4d2:	d10b      	bne.n	c4ec <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    c4d4:	2206      	movs	r2, #6
    c4d6:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    c4da:	1c60      	adds	r0, r4, #1
    c4dc:	f01a fa51 	bl	26982 <memcmp>
    c4e0:	b908      	cbnz	r0, c4e6 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    c4e2:	4628      	mov	r0, r5
    c4e4:	e7e7      	b.n	c4b6 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c4e6:	89f3      	ldrh	r3, [r6, #14]
    c4e8:	079b      	lsls	r3, r3, #30
    c4ea:	d5e3      	bpl.n	c4b4 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    c4ec:	7833      	ldrb	r3, [r6, #0]
    c4ee:	42bb      	cmp	r3, r7
    c4f0:	d1e0      	bne.n	c4b4 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    c4f2:	3401      	adds	r4, #1
    c4f4:	4807      	ldr	r0, [pc, #28]	; (c514 <bt_keys_find_irk+0x6c>)
    c4f6:	4621      	mov	r1, r4
    c4f8:	f01a fad0 	bl	26a9c <bt_rpa_irk_matches>
    c4fc:	2800      	cmp	r0, #0
    c4fe:	d0d9      	beq.n	c4b4 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    c500:	4805      	ldr	r0, [pc, #20]	; (c518 <bt_keys_find_irk+0x70>)
    c502:	2206      	movs	r2, #6
    c504:	4621      	mov	r1, r4
    c506:	f01a fa4c 	bl	269a2 <memcpy>
			return &key_pool[i];
    c50a:	4801      	ldr	r0, [pc, #4]	; (c510 <bt_keys_find_irk+0x68>)
}
    c50c:	e7d3      	b.n	c4b6 <bt_keys_find_irk+0xe>
    c50e:	bf00      	nop
    c510:	200022d8 	.word	0x200022d8
    c514:	20002302 	.word	0x20002302
    c518:	20002312 	.word	0x20002312

0000c51c <bt_keys_find_addr>:
{
    c51c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    c51e:	4c06      	ldr	r4, [pc, #24]	; (c538 <bt_keys_find_addr+0x1c>)
    c520:	7823      	ldrb	r3, [r4, #0]
    c522:	4283      	cmp	r3, r0
    c524:	d104      	bne.n	c530 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    c526:	2207      	movs	r2, #7
    c528:	1c60      	adds	r0, r4, #1
    c52a:	f01a fa2a 	bl	26982 <memcmp>
    c52e:	b108      	cbz	r0, c534 <bt_keys_find_addr+0x18>
	return NULL;
    c530:	2000      	movs	r0, #0
}
    c532:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    c534:	4620      	mov	r0, r4
    c536:	e7fc      	b.n	c532 <bt_keys_find_addr+0x16>
    c538:	200022d8 	.word	0x200022d8

0000c53c <bt_keys_clear>:
{
    c53c:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
    c53e:	7a03      	ldrb	r3, [r0, #8]
    c540:	075b      	lsls	r3, r3, #29
{
    c542:	b08c      	sub	sp, #48	; 0x30
    c544:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
    c546:	d501      	bpl.n	c54c <bt_keys_clear+0x10>
		bt_id_del(keys);
    c548:	f7fb fd24 	bl	7f94 <bt_id_del>
		if (keys->id) {
    c54c:	4625      	mov	r5, r4
    c54e:	f815 2b01 	ldrb.w	r2, [r5], #1
    c552:	b1aa      	cbz	r2, c580 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    c554:	ae02      	add	r6, sp, #8
    c556:	2104      	movs	r1, #4
    c558:	4630      	mov	r0, r6
    c55a:	f017 febe 	bl	242da <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    c55e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    c560:	462b      	mov	r3, r5
    c562:	4a08      	ldr	r2, [pc, #32]	; (c584 <bt_keys_clear+0x48>)
    c564:	2124      	movs	r1, #36	; 0x24
    c566:	a803      	add	r0, sp, #12
    c568:	f7fa fcdc 	bl	6f24 <bt_settings_encode_key>
		settings_delete(key);
    c56c:	a803      	add	r0, sp, #12
    c56e:	f018 fd16 	bl	24f9e <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    c572:	225c      	movs	r2, #92	; 0x5c
    c574:	2100      	movs	r1, #0
    c576:	4620      	mov	r0, r4
    c578:	f01a fa3e 	bl	269f8 <memset>
}
    c57c:	b00c      	add	sp, #48	; 0x30
    c57e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    c580:	9200      	str	r2, [sp, #0]
    c582:	e7ed      	b.n	c560 <bt_keys_clear+0x24>
    c584:	0003349d 	.word	0x0003349d

0000c588 <bt_keys_store>:
{
    c588:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    c58a:	4605      	mov	r5, r0
{
    c58c:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    c58e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    c592:	4604      	mov	r4, r0
	if (keys->id) {
    c594:	b19a      	cbz	r2, c5be <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
    c596:	ae02      	add	r6, sp, #8
    c598:	2104      	movs	r1, #4
    c59a:	4630      	mov	r0, r6
    c59c:	f017 fe9d 	bl	242da <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    c5a0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    c5a2:	462b      	mov	r3, r5
    c5a4:	a803      	add	r0, sp, #12
    c5a6:	4a07      	ldr	r2, [pc, #28]	; (c5c4 <bt_keys_store+0x3c>)
    c5a8:	2124      	movs	r1, #36	; 0x24
    c5aa:	f7fa fcbb 	bl	6f24 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    c5ae:	2250      	movs	r2, #80	; 0x50
    c5b0:	f104 010c 	add.w	r1, r4, #12
    c5b4:	a803      	add	r0, sp, #12
    c5b6:	f7f8 feb3 	bl	5320 <settings_save_one>
}
    c5ba:	b00c      	add	sp, #48	; 0x30
    c5bc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    c5be:	9200      	str	r2, [sp, #0]
    c5c0:	e7ef      	b.n	c5a2 <bt_keys_store+0x1a>
    c5c2:	bf00      	nop
    c5c4:	0003349d 	.word	0x0003349d

0000c5c8 <bt_mesh_provision_adv>:
	return 0;
}

int bt_mesh_provision_adv(const uint8_t uuid[16], uint16_t net_idx, uint16_t addr,
			  uint8_t attention_duration)
{
    c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5cc:	461f      	mov	r7, r3
    c5ce:	4b0d      	ldr	r3, [pc, #52]	; (c604 <bt_mesh_provision_adv+0x3c>)
    c5d0:	f3bf 8f5b 	dmb	ish
    c5d4:	681b      	ldr	r3, [r3, #0]
    c5d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    c5da:	07db      	lsls	r3, r3, #31
{
    c5dc:	4605      	mov	r5, r0
    c5de:	460c      	mov	r4, r1
    c5e0:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    c5e2:	d50b      	bpl.n	c5fc <bt_mesh_provision_adv+0x34>
		return -EINVAL;
	}

	if (bt_mesh_subnet_get(net_idx) == NULL) {
    c5e4:	4608      	mov	r0, r1
    c5e6:	f001 f96b 	bl	d8c0 <bt_mesh_subnet_get>
    c5ea:	b138      	cbz	r0, c5fc <bt_mesh_provision_adv+0x34>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROVISIONER) &&
	    IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		return bt_mesh_pb_adv_open(uuid, net_idx, addr,
    c5ec:	463b      	mov	r3, r7
    c5ee:	4632      	mov	r2, r6
    c5f0:	4621      	mov	r1, r4
    c5f2:	4628      	mov	r0, r5
					   attention_duration);
	}

	return -ENOTSUP;
}
    c5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return bt_mesh_pb_adv_open(uuid, net_idx, addr,
    c5f8:	f005 b9b6 	b.w	11968 <bt_mesh_pb_adv_open>
}
    c5fc:	f06f 0015 	mvn.w	r0, #21
    c600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c604:	200015b0 	.word	0x200015b0

0000c608 <bt_mesh_reset>:

void bt_mesh_reset(void)
{
    c608:	b538      	push	{r3, r4, r5, lr}
    c60a:	481a      	ldr	r0, [pc, #104]	; (c674 <bt_mesh_reset+0x6c>)
    c60c:	f3bf 8f5b 	dmb	ish
    c610:	6803      	ldr	r3, [r0, #0]
    c612:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
    c616:	07db      	lsls	r3, r3, #31
    c618:	d52a      	bpl.n	c670 <bt_mesh_reset+0x68>
		return;
	}

	bt_mesh.iv_index = 0U;
    c61a:	2400      	movs	r4, #0
	bt_mesh.seq = 0U;

	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    c61c:	4621      	mov	r1, r4
    c61e:	2204      	movs	r2, #4
	bt_mesh.iv_index = 0U;
    c620:	f1a0 0508 	sub.w	r5, r0, #8
	bt_mesh.seq = 0U;
    c624:	e940 4402 	strd	r4, r4, [r0, #-8]
	memset(bt_mesh.flags, 0, sizeof(bt_mesh.flags));
    c628:	f01a f9e6 	bl	269f8 <memset>

	k_delayed_work_cancel(&bt_mesh.ivu_timer);
    c62c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    c630:	f020 ffc0 	bl	2d5b4 <k_delayed_work_cancel>

	bt_mesh_cfg_reset();
    c634:	f003 fb24 	bl	fc80 <bt_mesh_cfg_reset>
	bt_mesh_trans_reset();
    c638:	f002 fb0c 	bl	ec54 <bt_mesh_trans_reset>
	bt_mesh_app_keys_reset();
    c63c:	f001 fc26 	bl	de8c <bt_mesh_app_keys_reset>
	bt_mesh_net_keys_reset();
    c640:	f001 f9de 	bl	da00 <bt_mesh_net_keys_reset>

	bt_mesh_net_loopback_clear(BT_MESH_KEY_ANY);
    c644:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c648:	f000 fef2 	bl	d430 <bt_mesh_net_loopback_clear>
	if (IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		bt_mesh_proxy_gatt_disable();
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_clear_net();
    c64c:	f01f fb5e 	bl	2bd0c <bt_mesh_clear_net>
	}

	(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
    c650:	4621      	mov	r1, r4
    c652:	2210      	movs	r2, #16
    c654:	f105 0058 	add.w	r0, r5, #88	; 0x58
    c658:	f01a f9ce 	bl	269f8 <memset>

	bt_mesh_scan_disable();
    c65c:	f01d f989 	bl	29972 <bt_mesh_scan_disable>
	bt_mesh_beacon_disable();
    c660:	f000 fbfa 	bl	ce58 <bt_mesh_beacon_disable>

	bt_mesh_comp_unprovision();
    c664:	f002 fe08 	bl	f278 <bt_mesh_comp_unprovision>

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		bt_mesh_prov_reset();
	}
}
    c668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_prov_reset();
    c66c:	f004 bdcc 	b.w	11208 <bt_mesh_prov_reset>
}
    c670:	bd38      	pop	{r3, r4, r5, pc}
    c672:	bf00      	nop
    c674:	200015b0 	.word	0x200015b0

0000c678 <bt_mesh_is_provisioned>:
    c678:	4b04      	ldr	r3, [pc, #16]	; (c68c <bt_mesh_is_provisioned+0x14>)
    c67a:	f3bf 8f5b 	dmb	ish
    c67e:	6818      	ldr	r0, [r3, #0]
    c680:	f3bf 8f5b 	dmb	ish

bool bt_mesh_is_provisioned(void)
{
	return atomic_test_bit(bt_mesh.flags, BT_MESH_VALID);
}
    c684:	f000 0001 	and.w	r0, r0, #1
    c688:	4770      	bx	lr
    c68a:	bf00      	nop
    c68c:	200015b0 	.word	0x200015b0

0000c690 <bt_mesh_start>:
		mod->cb->start(mod);
	}
}

int bt_mesh_start(const uint8_t net_key[16])
{
    c690:	b538      	push	{r3, r4, r5, lr}
    c692:	4605      	mov	r5, r0
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED) {
    c694:	f003 fb70 	bl	fd78 <bt_mesh_beacon_get>
    c698:	2801      	cmp	r0, #1
    c69a:	d114      	bne.n	c6c6 <bt_mesh_start+0x36>
		bt_mesh_beacon_enable();
    c69c:	f000 fbce 	bl	ce3c <bt_mesh_beacon_enable>
	}

	if (IS_ENABLED(CONFIG_BT_MESH_LOW_POWER)) {
		bt_mesh_lpn_init();
	} else {
		bt_mesh_scan_enable();
    c6a0:	f000 f9a4 	bl	c9ec <bt_mesh_scan_enable>
	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		bt_mesh_friend_init();
	}

	if (IS_ENABLED(CONFIG_BT_MESH_PROV)) {
		struct bt_mesh_subnet *sub = bt_mesh_subnet_next(NULL);
    c6a4:	2000      	movs	r0, #0
    c6a6:	f001 f993 	bl	d9d0 <bt_mesh_subnet_next>
    c6aa:	4604      	mov	r4, r0
		uint16_t addr = bt_mesh_primary_addr();
    c6ac:	f002 fdea 	bl	f284 <bt_mesh_primary_addr>

		bt_mesh_prov_complete(sub->net_idx, addr,net_key);
    c6b0:	462a      	mov	r2, r5
		uint16_t addr = bt_mesh_primary_addr();
    c6b2:	4601      	mov	r1, r0
		bt_mesh_prov_complete(sub->net_idx, addr,net_key);
    c6b4:	8ba0      	ldrh	r0, [r4, #28]
    c6b6:	f004 fd9f 	bl	111f8 <bt_mesh_prov_complete>
	}

	bt_mesh_model_foreach(model_start, NULL);
    c6ba:	4804      	ldr	r0, [pc, #16]	; (c6cc <bt_mesh_start+0x3c>)
    c6bc:	2100      	movs	r1, #0
    c6be:	f002 fcef 	bl	f0a0 <bt_mesh_model_foreach>

	return 0;
}
    c6c2:	2000      	movs	r0, #0
    c6c4:	bd38      	pop	{r3, r4, r5, pc}
		bt_mesh_beacon_disable();
    c6c6:	f000 fbc7 	bl	ce58 <bt_mesh_beacon_disable>
    c6ca:	e7e9      	b.n	c6a0 <bt_mesh_start+0x10>
    c6cc:	0002989f 	.word	0x0002989f

0000c6d0 <bt_mesh_provision>:
{
    c6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6d4:	4c3b      	ldr	r4, [pc, #236]	; (c7c4 <bt_mesh_provision+0xf4>)
    c6d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c6d8:	f3bf 8f5b 	dmb	ish
    c6dc:	4606      	mov	r6, r0
    c6de:	4689      	mov	r9, r1
    c6e0:	4692      	mov	sl, r2
    c6e2:	e854 3f00 	ldrex	r3, [r4]
    c6e6:	f043 0201 	orr.w	r2, r3, #1
    c6ea:	e844 2100 	strex	r1, r2, [r4]
    c6ee:	2900      	cmp	r1, #0
    c6f0:	d1f7      	bne.n	c6e2 <bt_mesh_provision+0x12>
    c6f2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh.flags, BT_MESH_VALID)) {
    c6f6:	07da      	lsls	r2, r3, #31
    c6f8:	d460      	bmi.n	c7bc <bt_mesh_provision+0xec>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c6fa:	f3bf 8f5b 	dmb	ish
    c6fe:	f8df b0c8 	ldr.w	fp, [pc, #200]	; c7c8 <bt_mesh_provision+0xf8>
    c702:	f8db 3000 	ldr.w	r3, [fp]
    c706:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(bt_mesh_cdb.flags,
    c70a:	07db      	lsls	r3, r3, #31
    c70c:	d409      	bmi.n	c722 <bt_mesh_provision+0x52>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c70e:	482d      	ldr	r0, [pc, #180]	; (c7c4 <bt_mesh_provision+0xf4>)
    c710:	f06f 0101 	mvn.w	r1, #1
    c714:	f01d f8c9 	bl	298aa <atomic_and>
			return -EINVAL;
    c718:	f06f 0515 	mvn.w	r5, #21
}
    c71c:	4628      	mov	r0, r5
    c71e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		comp = bt_mesh_comp_get();
    c722:	f002 ff9b 	bl	f65c <bt_mesh_comp_get>
		if (comp == NULL) {
    c726:	4605      	mov	r5, r0
    c728:	2800      	cmp	r0, #0
    c72a:	d0f0      	beq.n	c70e <bt_mesh_provision+0x3e>
		if (!bt_mesh_cdb_subnet_get(net_idx)) {
    c72c:	4648      	mov	r0, r9
    c72e:	f006 fa97 	bl	12c60 <bt_mesh_cdb_subnet_get>
    c732:	b938      	cbnz	r0, c744 <bt_mesh_provision+0x74>
    c734:	f06f 0101 	mvn.w	r1, #1
    c738:	4620      	mov	r0, r4
    c73a:	f01d f8b6 	bl	298aa <atomic_and>
			return -ENOENT;
    c73e:	f06f 0501 	mvn.w	r5, #1
    c742:	e7eb      	b.n	c71c <bt_mesh_provision+0x4c>
		prov = bt_mesh_prov_get();
    c744:	f004 fd42 	bl	111cc <bt_mesh_prov_get>
		node = bt_mesh_cdb_node_alloc(prov->uuid, addr,
    c748:	7a2a      	ldrb	r2, [r5, #8]
    c74a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
    c74e:	6800      	ldr	r0, [r0, #0]
    c750:	464b      	mov	r3, r9
    c752:	f006 fb0b 	bl	12d6c <bt_mesh_cdb_node_alloc>
		if (node == NULL) {
    c756:	4605      	mov	r5, r0
    c758:	b938      	cbnz	r0, c76a <bt_mesh_provision+0x9a>
    c75a:	f06f 0101 	mvn.w	r1, #1
    c75e:	4620      	mov	r0, r4
    c760:	f01d f8a3 	bl	298aa <atomic_and>
			return -ENOMEM;
    c764:	f06f 050b 	mvn.w	r5, #11
    c768:	e7d8      	b.n	c71c <bt_mesh_provision+0x4c>
		memcpy(node->dev_key, dev_key, 16);
    c76a:	2210      	movs	r2, #16
    c76c:	4639      	mov	r1, r7
		addr = node->addr;
    c76e:	f8b0 8010 	ldrh.w	r8, [r0, #16]
		iv_index = bt_mesh_cdb.iv_index;
    c772:	f85b bc04 	ldr.w	fp, [fp, #-4]
		memcpy(node->dev_key, dev_key, 16);
    c776:	3015      	adds	r0, #21
    c778:	f01a f913 	bl	269a2 <memcpy>
			bt_mesh_store_cdb_node(node);
    c77c:	4628      	mov	r0, r5
    c77e:	f004 fb01 	bl	10d84 <bt_mesh_store_cdb_node>
	err = bt_mesh_net_create(net_idx, flags, net_key, iv_index);
    c782:	465b      	mov	r3, fp
    c784:	4632      	mov	r2, r6
    c786:	4651      	mov	r1, sl
    c788:	4648      	mov	r0, r9
    c78a:	f000 fc69 	bl	d060 <bt_mesh_net_create>
	if (err) {
    c78e:	4605      	mov	r5, r0
    c790:	b128      	cbz	r0, c79e <bt_mesh_provision+0xce>
    c792:	f06f 0101 	mvn.w	r1, #1
    c796:	4620      	mov	r0, r4
    c798:	f01d f887 	bl	298aa <atomic_and>
		return err;
    c79c:	e7be      	b.n	c71c <bt_mesh_provision+0x4c>
	bt_mesh.seq = 0U;
    c79e:	f844 0c04 	str.w	r0, [r4, #-4]
	bt_mesh_comp_provision(addr);
    c7a2:	4640      	mov	r0, r8
    c7a4:	f002 fd52 	bl	f24c <bt_mesh_comp_provision>
	memcpy(bt_mesh.dev_key, dev_key, 16);
    c7a8:	2210      	movs	r2, #16
    c7aa:	4639      	mov	r1, r7
    c7ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
    c7b0:	f01a f8f7 	bl	269a2 <memcpy>
	bt_mesh_start(net_key);
    c7b4:	4630      	mov	r0, r6
    c7b6:	f7ff ff6b 	bl	c690 <bt_mesh_start>
	return 0;
    c7ba:	e7af      	b.n	c71c <bt_mesh_provision+0x4c>
		return -EALREADY;
    c7bc:	f06f 0544 	mvn.w	r5, #68	; 0x44
    c7c0:	e7ac      	b.n	c71c <bt_mesh_provision+0x4c>
    c7c2:	bf00      	nop
    c7c4:	200015b0 	.word	0x200015b0
    c7c8:	20000534 	.word	0x20000534

0000c7cc <adv_alloc>:
static struct bt_mesh_adv adv_pool[CONFIG_BT_MESH_ADV_BUF_COUNT];

static struct bt_mesh_adv *adv_alloc(int id)
{
	return &adv_pool[id];
}
    c7cc:	4b02      	ldr	r3, [pc, #8]	; (c7d8 <adv_alloc+0xc>)
    c7ce:	220c      	movs	r2, #12
    c7d0:	fb02 3000 	mla	r0, r2, r0, r3
    c7d4:	4770      	bx	lr
    c7d6:	bf00      	nop
    c7d8:	20002334 	.word	0x20002334

0000c7dc <adv_thread>:

	BT_DBG("Advertising stopped");
}

static void adv_thread(void *p1, void *p2, void *p3)
{
    c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

				buf = net_buf_get(&adv_queue, timeout);
				bt_mesh_proxy_adv_stop();
			}
		} else {
			buf = net_buf_get(&adv_queue, K_FOREVER);
    c7e0:	f8df 8118 	ldr.w	r8, [pc, #280]	; c8fc <adv_thread+0x120>
	const int32_t adv_int_min = ((bt_dev.hci_version >= BT_HCI_VERSION_5_0) ?
    c7e4:	f8df 9118 	ldr.w	r9, [pc, #280]	; c900 <adv_thread+0x124>
{
    c7e8:	b08b      	sub	sp, #44	; 0x2c
			buf = net_buf_get(&adv_queue, K_FOREVER);
    c7ea:	f04f 32ff 	mov.w	r2, #4294967295
    c7ee:	f04f 33ff 	mov.w	r3, #4294967295
    c7f2:	4640      	mov	r0, r8
    c7f4:	f01f fba4 	bl	2bf40 <net_buf_get>
		}

		if (!buf) {
    c7f8:	4605      	mov	r5, r0
    c7fa:	2800      	cmp	r0, #0
    c7fc:	d0f5      	beq.n	c7ea <adv_thread+0xe>
			continue;
		}

		/* busy == 0 means this was canceled */
		if (BT_MESH_ADV(buf)->busy) {
    c7fe:	6942      	ldr	r2, [r0, #20]
    c800:	7a13      	ldrb	r3, [r2, #8]
    c802:	0759      	lsls	r1, r3, #29
    c804:	d575      	bpl.n	c8f2 <adv_thread+0x116>
			BT_MESH_ADV(buf)->busy = 0U;
    c806:	f36f 0382 	bfc	r3, #2, #1
    c80a:	7213      	strb	r3, [r2, #8]
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    c80c:	f899 3038 	ldrb.w	r3, [r9, #56]	; 0x38
	const struct bt_mesh_send_cb *cb = BT_MESH_ADV(buf)->cb;
    c810:	f8d0 a014 	ldr.w	sl, [r0, #20]
	struct bt_le_adv_param param = {};
    c814:	2214      	movs	r2, #20
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    c816:	2b08      	cmp	r3, #8
	struct bt_le_adv_param param = {};
    c818:	f04f 0100 	mov.w	r1, #0
    c81c:	eb0d 0002 	add.w	r0, sp, r2
				   ADV_INT_FAST_MS : ADV_INT_DEFAULT_MS);
    c820:	bf8c      	ite	hi
    c822:	f04f 0b14 	movhi.w	fp, #20
    c826:	f04f 0b64 	movls.w	fp, #100	; 0x64
	void *cb_data = BT_MESH_ADV(buf)->cb_data;
    c82a:	e9da 6700 	ldrd	r6, r7, [sl]
	struct bt_le_adv_param param = {};
    c82e:	f01a f8e3 	bl	269f8 <memset>
	adv_int = MAX(adv_int_min,
    c832:	f89a 4009 	ldrb.w	r4, [sl, #9]
    c836:	230a      	movs	r3, #10
    c838:	08e1      	lsrs	r1, r4, #3
    c83a:	fb01 3303 	mla	r3, r1, r3, r3
    c83e:	1c4a      	adds	r2, r1, #1
    c840:	455b      	cmp	r3, fp
    c842:	bfa6      	itte	ge
    c844:	eb02 0282 	addge.w	r2, r2, r2, lsl #2
    c848:	0052      	lslge	r2, r2, #1
    c84a:	fa1f f28b 	uxthlt.w	r2, fp
		    ((BT_MESH_TRANSMIT_COUNT(BT_MESH_ADV(buf)->xmit) + 1) *
    c84e:	f004 0307 	and.w	r3, r4, #7
		     (adv_int + 10)));
    c852:	f102 040a 	add.w	r4, r2, #10
	duration = (MESH_SCAN_WINDOW_MS +
    c856:	fb03 4404 	mla	r4, r3, r4, r4
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    c85a:	f89a 3008 	ldrb.w	r3, [sl, #8]
    c85e:	4926      	ldr	r1, [pc, #152]	; (c8f8 <adv_thread+0x11c>)
    c860:	f003 0303 	and.w	r3, r3, #3
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    c864:	00d2      	lsls	r2, r2, #3
	ad.type = adv_type[BT_MESH_ADV(buf)->type];
    c866:	5ccb      	ldrb	r3, [r1, r3]
    c868:	f88d 300c 	strb.w	r3, [sp, #12]
	ad.data_len = buf->len;
    c86c:	89ab      	ldrh	r3, [r5, #12]
    c86e:	f88d 300d 	strb.w	r3, [sp, #13]
	ad.data = buf->data;
    c872:	68ab      	ldr	r3, [r5, #8]
    c874:	9304      	str	r3, [sp, #16]
		param.options = 0U;
    c876:	2300      	movs	r3, #0
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    c878:	2105      	movs	r1, #5
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    c87a:	9300      	str	r3, [sp, #0]
	param.interval_min = ADV_SCAN_UNIT(adv_int);
    c87c:	fbb2 f2f1 	udiv	r2, r2, r1
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    c880:	a805      	add	r0, sp, #20
	param.interval_max = param.interval_min;
    c882:	e9cd 2207 	strd	r2, r2, [sp, #28]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    c886:	a903      	add	r1, sp, #12
    c888:	2201      	movs	r2, #1
		param.options = 0U;
    c88a:	9306      	str	r3, [sp, #24]
	param.id = BT_ID_DEFAULT;
    c88c:	f88d 3014 	strb.w	r3, [sp, #20]
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    c890:	f7fc f866 	bl	8960 <bt_le_adv_start>
	duration = (MESH_SCAN_WINDOW_MS +
    c894:	341e      	adds	r4, #30
	err = bt_le_adv_start(&param, &ad, 1, NULL, 0);
    c896:	4682      	mov	sl, r0
	net_buf_unref(buf);
    c898:	4628      	mov	r0, r5
	duration = (MESH_SCAN_WINDOW_MS +
    c89a:	b224      	sxth	r4, r4
	net_buf_unref(buf);
    c89c:	f013 fa76 	bl	1fd8c <net_buf_unref>
	if (cb && cb->start) {
    c8a0:	b12e      	cbz	r6, c8ae <adv_thread+0xd2>
    c8a2:	6833      	ldr	r3, [r6, #0]
    c8a4:	b11b      	cbz	r3, c8ae <adv_thread+0xd2>
		cb->start(duration, err, cb_data);
    c8a6:	b2a0      	uxth	r0, r4
    c8a8:	463a      	mov	r2, r7
    c8aa:	4651      	mov	r1, sl
    c8ac:	4798      	blx	r3
	if (err) {
    c8ae:	f1ba 0f00 	cmp.w	sl, #0
    c8b2:	d11b      	bne.n	c8ec <adv_thread+0x110>
	k_sleep(K_MSEC(duration));
    c8b4:	b224      	sxth	r4, r4
    c8b6:	17e5      	asrs	r5, r4, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    c8b8:	03e9      	lsls	r1, r5, #15
    c8ba:	ea41 4154 	orr.w	r1, r1, r4, lsr #17
    c8be:	03e0      	lsls	r0, r4, #15
    c8c0:	f240 34e7 	movw	r4, #999	; 0x3e7
    c8c4:	1900      	adds	r0, r0, r4
    c8c6:	f04f 0400 	mov.w	r4, #0
    c8ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c8ce:	f04f 0300 	mov.w	r3, #0
    c8d2:	eb44 0101 	adc.w	r1, r4, r1
    c8d6:	f7f3 fc63 	bl	1a0 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    c8da:	f017 f8c5 	bl	23a68 <z_impl_k_sleep>
	err = bt_le_adv_stop();
    c8de:	f7fc f84d 	bl	897c <bt_le_adv_stop>
	if (cb && cb->end) {
    c8e2:	b11e      	cbz	r6, c8ec <adv_thread+0x110>
    c8e4:	6873      	ldr	r3, [r6, #4]
    c8e6:	b10b      	cbz	r3, c8ec <adv_thread+0x110>
		cb->end(err, cb_data);
    c8e8:	4639      	mov	r1, r7
    c8ea:	4798      	blx	r3
	z_impl_k_yield();
    c8ec:	f017 f870 	bl	239d0 <z_impl_k_yield>
}
    c8f0:	e77b      	b.n	c7ea <adv_thread+0xe>
			adv_send(buf);
		} else {
			net_buf_unref(buf);
    c8f2:	f013 fa4b 	bl	1fd8c <net_buf_unref>
    c8f6:	e7f9      	b.n	c8ec <adv_thread+0x110>
    c8f8:	000334ae 	.word	0x000334ae
    c8fc:	20000e14 	.word	0x20000e14
    c900:	20000068 	.word	0x20000068

0000c904 <bt_mesh_adv_create_from_pool>:

struct net_buf *bt_mesh_adv_create_from_pool(struct net_buf_pool *pool,
					     bt_mesh_adv_alloc_t get_id,
					     enum bt_mesh_adv_type type,
					     uint8_t xmit, k_timeout_t timeout)
{
    c904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c908:	461e      	mov	r6, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c90a:	4b12      	ldr	r3, [pc, #72]	; (c954 <bt_mesh_adv_create_from_pool+0x50>)
    c90c:	f3bf 8f5b 	dmb	ish
    c910:	681b      	ldr	r3, [r3, #0]
    c912:	f3bf 8f5b 	dmb	ish
	struct bt_mesh_adv *adv;
	struct net_buf *buf;

	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    c916:	f3c3 0840 	ubfx	r8, r3, #1, #1
    c91a:	079b      	lsls	r3, r3, #30
{
    c91c:	460d      	mov	r5, r1
    c91e:	4617      	mov	r7, r2
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_SUSPENDED)) {
    c920:	d416      	bmi.n	c950 <bt_mesh_adv_create_from_pool+0x4c>
		BT_WARN("Refusing to allocate buffer while suspended");
		return NULL;
	}

	buf = net_buf_alloc(pool, timeout);
    c922:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    c926:	f01f fb06 	bl	2bf36 <net_buf_alloc_fixed>
	if (!buf) {
    c92a:	4604      	mov	r4, r0
    c92c:	b168      	cbz	r0, c94a <bt_mesh_adv_create_from_pool+0x46>
		return NULL;
	}

	adv = get_id(net_buf_id(buf));
    c92e:	f013 f979 	bl	1fc24 <net_buf_id>
    c932:	47a8      	blx	r5
    c934:	4605      	mov	r5, r0
	BT_MESH_ADV(buf) = adv;
    c936:	6160      	str	r0, [r4, #20]

	(void)memset(adv, 0, sizeof(*adv));
    c938:	220c      	movs	r2, #12
    c93a:	4641      	mov	r1, r8
    c93c:	f01a f85c 	bl	269f8 <memset>

	adv->type         = type;
    c940:	7a2b      	ldrb	r3, [r5, #8]
	adv->xmit         = xmit;
    c942:	726e      	strb	r6, [r5, #9]
	adv->type         = type;
    c944:	f367 0301 	bfi	r3, r7, #0, #2
    c948:	722b      	strb	r3, [r5, #8]

	return buf;
}
    c94a:	4620      	mov	r0, r4
    c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
    c950:	2400      	movs	r4, #0
    c952:	e7fa      	b.n	c94a <bt_mesh_adv_create_from_pool+0x46>
    c954:	200015b0 	.word	0x200015b0

0000c958 <bt_mesh_adv_create>:

struct net_buf *bt_mesh_adv_create(enum bt_mesh_adv_type type, uint8_t xmit,
				   k_timeout_t timeout)
{
    c958:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_adv_create_from_pool(&adv_buf_pool, adv_alloc, type,
    c95a:	e9cd 2300 	strd	r2, r3, [sp]
    c95e:	460b      	mov	r3, r1
    c960:	4602      	mov	r2, r0
    c962:	4903      	ldr	r1, [pc, #12]	; (c970 <bt_mesh_adv_create+0x18>)
    c964:	4803      	ldr	r0, [pc, #12]	; (c974 <bt_mesh_adv_create+0x1c>)
    c966:	f7ff ffcd 	bl	c904 <bt_mesh_adv_create_from_pool>
					    xmit, timeout);
}
    c96a:	b003      	add	sp, #12
    c96c:	f85d fb04 	ldr.w	pc, [sp], #4
    c970:	0000c7cd 	.word	0x0000c7cd
    c974:	20000e84 	.word	0x20000e84

0000c978 <bt_mesh_adv_send>:

void bt_mesh_adv_send(struct net_buf *buf, const struct bt_mesh_send_cb *cb,
		      void *cb_data)
{
    c978:	b510      	push	{r4, lr}
	BT_DBG("type 0x%02x len %u: %s", BT_MESH_ADV(buf)->type, buf->len,
	       bt_hex(buf->data, buf->len));

	BT_MESH_ADV(buf)->cb = cb;
    c97a:	6944      	ldr	r4, [r0, #20]
	BT_MESH_ADV(buf)->cb_data = cb_data;
    c97c:	e9c4 1200 	strd	r1, r2, [r4]
	BT_MESH_ADV(buf)->busy = 1U;
    c980:	6942      	ldr	r2, [r0, #20]
    c982:	7a13      	ldrb	r3, [r2, #8]
    c984:	f043 0304 	orr.w	r3, r3, #4
    c988:	7213      	strb	r3, [r2, #8]

	net_buf_put(&adv_queue, net_buf_ref(buf));
    c98a:	f01f fb60 	bl	2c04e <net_buf_ref>
}
    c98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	net_buf_put(&adv_queue, net_buf_ref(buf));
    c992:	4601      	mov	r1, r0
    c994:	4801      	ldr	r0, [pc, #4]	; (c99c <bt_mesh_adv_send+0x24>)
    c996:	f01f bb4d 	b.w	2c034 <net_buf_put>
    c99a:	bf00      	nop
    c99c:	20000e14 	.word	0x20000e14

0000c9a0 <bt_mesh_adv_init>:
		net_buf_simple_pull(buf, len);
	}
}

void bt_mesh_adv_init(void)
{
    c9a0:	b510      	push	{r4, lr}
    c9a2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    c9a4:	4c0d      	ldr	r4, [pc, #52]	; (c9dc <bt_mesh_adv_init+0x3c>)
    c9a6:	490e      	ldr	r1, [pc, #56]	; (c9e0 <bt_mesh_adv_init+0x40>)
    c9a8:	2200      	movs	r2, #0
    c9aa:	2300      	movs	r3, #0
    c9ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c9b0:	2300      	movs	r3, #0
    c9b2:	f06f 0208 	mvn.w	r2, #8
    c9b6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    c9ba:	e9cd 3301 	strd	r3, r3, [sp, #4]
    c9be:	9300      	str	r3, [sp, #0]
    c9c0:	f44f 7240 	mov.w	r2, #768	; 0x300
    c9c4:	4b07      	ldr	r3, [pc, #28]	; (c9e4 <bt_mesh_adv_init+0x44>)
    c9c6:	4620      	mov	r0, r4
    c9c8:	f017 f90c 	bl	23be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    c9cc:	4906      	ldr	r1, [pc, #24]	; (c9e8 <bt_mesh_adv_init+0x48>)
    c9ce:	4620      	mov	r0, r4
	k_thread_create(&adv_thread_data, adv_thread_stack,
			K_KERNEL_STACK_SIZEOF(adv_thread_stack), adv_thread,
			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
	k_thread_name_set(&adv_thread_data, "BT Mesh adv");
}
    c9d0:	b008      	add	sp, #32
    c9d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9d6:	f020 bd7f 	b.w	2d4d8 <z_impl_k_thread_name_set>
    c9da:	bf00      	nop
    c9dc:	200014f8 	.word	0x200014f8
    c9e0:	20009a80 	.word	0x20009a80
    c9e4:	0000c7dd 	.word	0x0000c7dd
    c9e8:	000334a2 	.word	0x000334a2

0000c9ec <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(void)
{
    c9ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_le_scan_param scan_param = {
    c9ee:	2100      	movs	r1, #0
    c9f0:	2214      	movs	r2, #20
    c9f2:	a801      	add	r0, sp, #4
    c9f4:	f01a f800 	bl	269f8 <memset>
    c9f8:	f04f 1330 	mov.w	r3, #3145776	; 0x300030
			.window     = MESH_SCAN_WINDOW };
	int err;

	BT_DBG("");

	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    c9fc:	4906      	ldr	r1, [pc, #24]	; (ca18 <bt_mesh_scan_enable+0x2c>)
	struct bt_le_scan_param scan_param = {
    c9fe:	9303      	str	r3, [sp, #12]
	err = bt_le_scan_start(&scan_param, bt_mesh_scan_cb);
    ca00:	a801      	add	r0, sp, #4
    ca02:	f7fc f953 	bl	8cac <bt_le_scan_start>
	if (err && err != -EALREADY) {
    ca06:	b118      	cbz	r0, ca10 <bt_mesh_scan_enable+0x24>
		BT_ERR("starting scan failed (err %d)", err);
		return err;
	}

	return 0;
    ca08:	f110 0f45 	cmn.w	r0, #69	; 0x45
    ca0c:	bf08      	it	eq
    ca0e:	2000      	moveq	r0, #0
}
    ca10:	b007      	add	sp, #28
    ca12:	f85d fb04 	ldr.w	pc, [sp], #4
    ca16:	bf00      	nop
    ca18:	000298f9 	.word	0x000298f9

0000ca1c <k_work_submit_to_queue.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca1c:	4909      	ldr	r1, [pc, #36]	; (ca44 <k_work_submit_to_queue.constprop.0+0x28>)
    ca1e:	f3bf 8f5b 	dmb	ish
    ca22:	e851 3f00 	ldrex	r3, [r1]
    ca26:	f043 0201 	orr.w	r2, r3, #1
    ca2a:	e841 2000 	strex	r0, r2, [r1]
    ca2e:	2800      	cmp	r0, #0
    ca30:	d1f7      	bne.n	ca22 <k_work_submit_to_queue.constprop.0+0x6>
    ca32:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ca36:	07db      	lsls	r3, r3, #31
    ca38:	d403      	bmi.n	ca42 <k_work_submit_to_queue.constprop.0+0x26>
		k_queue_append(&work_q->queue, work);
    ca3a:	4803      	ldr	r0, [pc, #12]	; (ca48 <k_work_submit_to_queue.constprop.0+0x2c>)
    ca3c:	3908      	subs	r1, #8
    ca3e:	f020 bc0c 	b.w	2d25a <k_queue_append>
}
    ca42:	4770      	bx	lr
    ca44:	20001580 	.word	0x20001580
    ca48:	20001fd8 	.word	0x20001fd8

0000ca4c <beacon_send>:

	bt_mesh_subnet_foreach(sub_update_beacon_observation);
}

static void beacon_send(struct k_work *work)
{
    ca4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca50:	b08a      	sub	sp, #40	; 0x28
	/* Don't send anything if we have an active provisioning link */
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV) && bt_mesh_prov_active()) {
    ca52:	f004 fbc1 	bl	111d8 <bt_mesh_prov_active>
    ca56:	b110      	cbz	r0, ca5e <beacon_send+0x12>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    ca58:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    ca5c:	e016      	b.n	ca8c <beacon_send+0x40>
		return;
	}

	BT_DBG("");

	if (bt_mesh_is_provisioned()) {
    ca5e:	f7ff fe0b 	bl	c678 <bt_mesh_is_provisioned>
    ca62:	4604      	mov	r4, r0
    ca64:	b318      	cbz	r0, caae <beacon_send+0x62>
	first_half = !first_half;
    ca66:	4a47      	ldr	r2, [pc, #284]	; (cb84 <beacon_send+0x138>)
    ca68:	7813      	ldrb	r3, [r2, #0]
    ca6a:	f083 0301 	eor.w	r3, r3, #1
    ca6e:	7013      	strb	r3, [r2, #0]
	if (first_half) {
    ca70:	b913      	cbnz	r3, ca78 <beacon_send+0x2c>
	bt_mesh_subnet_foreach(sub_update_beacon_observation);
    ca72:	4845      	ldr	r0, [pc, #276]	; (cb88 <beacon_send+0x13c>)
    ca74:	f000 ff9c 	bl	d9b0 <bt_mesh_subnet_foreach>
		update_beacon_observation();
		(void)bt_mesh_subnet_find(secure_beacon_send, NULL);
    ca78:	2100      	movs	r1, #0
    ca7a:	4844      	ldr	r0, [pc, #272]	; (cb8c <beacon_send+0x140>)
    ca7c:	f000 ff86 	bl	d98c <bt_mesh_subnet_find>

		/* Only resubmit if beaconing is still enabled */
		if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED ||
    ca80:	f003 f97a 	bl	fd78 <bt_mesh_beacon_get>
    ca84:	2801      	cmp	r0, #1
    ca86:	d107      	bne.n	ca98 <beacon_send+0x4c>
    ca88:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ca8c:	4940      	ldr	r1, [pc, #256]	; (cb90 <beacon_send+0x144>)
    ca8e:	4841      	ldr	r0, [pc, #260]	; (cb94 <beacon_send+0x148>)
    ca90:	2300      	movs	r3, #0
    ca92:	f017 f96b 	bl	23d6c <k_delayed_work_submit_to_queue>
    ca96:	e007      	b.n	caa8 <beacon_send+0x5c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ca98:	4b3f      	ldr	r3, [pc, #252]	; (cb98 <beacon_send+0x14c>)
    ca9a:	f3bf 8f5b 	dmb	ish
    ca9e:	681b      	ldr	r3, [r3, #0]
    caa0:	f3bf 8f5b 	dmb	ish
    caa4:	071b      	lsls	r3, r3, #28
    caa6:	d4ef      	bmi.n	ca88 <beacon_send+0x3c>

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		unprovisioned_beacon_send();
		k_delayed_work_submit(&beacon_timer, K_SECONDS(CONFIG_BT_MESH_UNPROV_BEACON_INT));
	}
}
    caa8:	b00a      	add	sp, #40	; 0x28
    caaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t uri_hash[16] = { 0 };
    caae:	e9cd 0002 	strd	r0, r0, [sp, #8]
    cab2:	e9cd 0004 	strd	r0, r0, [sp, #16]
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, UNPROV_XMIT, K_NO_WAIT);
    cab6:	2200      	movs	r2, #0
    cab8:	2300      	movs	r3, #0
    caba:	210a      	movs	r1, #10
    cabc:	2002      	movs	r0, #2
    cabe:	f7ff ff4b 	bl	c958 <bt_mesh_adv_create>
	if (!buf) {
    cac2:	4606      	mov	r6, r0
    cac4:	2800      	cmp	r0, #0
    cac6:	d0c7      	beq.n	ca58 <beacon_send+0xc>
	prov = bt_mesh_prov_get();
    cac8:	f004 fb80 	bl	111cc <bt_mesh_prov_get>
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    cacc:	f106 0708 	add.w	r7, r6, #8
	prov = bt_mesh_prov_get();
    cad0:	4605      	mov	r5, r0
	net_buf_add_u8(buf, BEACON_TYPE_UNPROVISIONED);
    cad2:	4621      	mov	r1, r4
    cad4:	4638      	mov	r0, r7
    cad6:	f01f faef 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, prov->uuid, 16);
    cada:	6829      	ldr	r1, [r5, #0]
    cadc:	2210      	movs	r2, #16
    cade:	4638      	mov	r0, r7
    cae0:	f01f fae1 	bl	2c0a6 <net_buf_simple_add_mem>
	if (prov->uri && bt_mesh_s1(prov->uri, uri_hash) == 0) {
    cae4:	f8d5 8004 	ldr.w	r8, [r5, #4]
    cae8:	f1b8 0f00 	cmp.w	r8, #0
    caec:	d048      	beq.n	cb80 <beacon_send+0x134>

static inline bool bt_mesh_s1(const char *m, uint8_t salt[16])
{
	const uint8_t zero[16] = { 0 };

	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    caee:	4640      	mov	r0, r8
	const uint8_t zero[16] = { 0 };
    caf0:	e9cd 4406 	strd	r4, r4, [sp, #24]
    caf4:	e9cd 4408 	strd	r4, r4, [sp, #32]
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
    caf8:	f019 ff18 	bl	2692c <strlen>
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    cafc:	ab02      	add	r3, sp, #8
	struct bt_mesh_sg sg = { m, len };
    cafe:	e9cd 8000 	strd	r8, r0, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
    cb02:	2201      	movs	r2, #1
    cb04:	4669      	mov	r1, sp
    cb06:	a806      	add	r0, sp, #24
    cb08:	f01d fabb 	bl	2a082 <bt_mesh_aes_cmac>
    cb0c:	2800      	cmp	r0, #0
    cb0e:	d137      	bne.n	cb80 <beacon_send+0x134>
		oob_info = prov->oob_info | BT_MESH_PROV_OOB_URI;
    cb10:	8929      	ldrh	r1, [r5, #8]
    cb12:	f041 0102 	orr.w	r1, r1, #2
	net_buf_add_be16(buf, oob_info);
    cb16:	4638      	mov	r0, r7
    cb18:	f01f fae0 	bl	2c0dc <net_buf_simple_add_be16>
	net_buf_add_mem(buf, uri_hash, 4);
    cb1c:	2204      	movs	r2, #4
    cb1e:	a902      	add	r1, sp, #8
    cb20:	4638      	mov	r0, r7
    cb22:	f01f fac0 	bl	2c0a6 <net_buf_simple_add_mem>
	bt_mesh_adv_send(buf, NULL, NULL);
    cb26:	2200      	movs	r2, #0
    cb28:	4611      	mov	r1, r2
    cb2a:	4630      	mov	r0, r6
    cb2c:	f7ff ff24 	bl	c978 <bt_mesh_adv_send>
	net_buf_unref(buf);
    cb30:	4630      	mov	r0, r6
    cb32:	f013 f92b 	bl	1fd8c <net_buf_unref>
	if (prov->uri) {
    cb36:	686b      	ldr	r3, [r5, #4]
    cb38:	2b00      	cmp	r3, #0
    cb3a:	d08d      	beq.n	ca58 <beacon_send+0xc>
		buf = bt_mesh_adv_create(BT_MESH_ADV_URI, UNPROV_XMIT,
    cb3c:	2200      	movs	r2, #0
    cb3e:	2300      	movs	r3, #0
    cb40:	210a      	movs	r1, #10
    cb42:	2003      	movs	r0, #3
    cb44:	f7ff ff08 	bl	c958 <bt_mesh_adv_create>
		if (!buf) {
    cb48:	4604      	mov	r4, r0
    cb4a:	2800      	cmp	r0, #0
    cb4c:	d084      	beq.n	ca58 <beacon_send+0xc>
		len = strlen(prov->uri);
    cb4e:	6868      	ldr	r0, [r5, #4]
    cb50:	f019 feec 	bl	2692c <strlen>
		if (net_buf_tailroom(buf) < len) {
    cb54:	f104 0708 	add.w	r7, r4, #8
		len = strlen(prov->uri);
    cb58:	4606      	mov	r6, r0
		if (net_buf_tailroom(buf) < len) {
    cb5a:	4638      	mov	r0, r7
    cb5c:	f01f fb49 	bl	2c1f2 <net_buf_simple_tailroom>
    cb60:	4286      	cmp	r6, r0
    cb62:	d809      	bhi.n	cb78 <beacon_send+0x12c>
			net_buf_add_mem(buf, prov->uri, len);
    cb64:	6869      	ldr	r1, [r5, #4]
    cb66:	4632      	mov	r2, r6
    cb68:	4638      	mov	r0, r7
    cb6a:	f01f fa9c 	bl	2c0a6 <net_buf_simple_add_mem>
			bt_mesh_adv_send(buf, NULL, NULL);
    cb6e:	2200      	movs	r2, #0
    cb70:	4611      	mov	r1, r2
    cb72:	4620      	mov	r0, r4
    cb74:	f7ff ff00 	bl	c978 <bt_mesh_adv_send>
		net_buf_unref(buf);
    cb78:	4620      	mov	r0, r4
    cb7a:	f013 f907 	bl	1fd8c <net_buf_unref>
    cb7e:	e76b      	b.n	ca58 <beacon_send+0xc>
		oob_info = prov->oob_info;
    cb80:	8929      	ldrh	r1, [r5, #8]
    cb82:	e7c8      	b.n	cb16 <beacon_send+0xca>
    cb84:	2000914f 	.word	0x2000914f
    cb88:	00029985 	.word	0x00029985
    cb8c:	0000cbf1 	.word	0x0000cbf1
    cb90:	20001578 	.word	0x20001578
    cb94:	20001fd8 	.word	0x20001fd8
    cb98:	200015b0 	.word	0x200015b0

0000cb9c <bt_mesh_beacon_create>:
{
    cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cb9e:	460c      	mov	r4, r1
    cba0:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    cba2:	f000 fe31 	bl	d808 <bt_mesh_net_flags>
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    cba6:	2101      	movs	r1, #1
	uint8_t flags = bt_mesh_net_flags(sub);
    cba8:	4607      	mov	r7, r0
	net_buf_simple_add_u8(buf, BEACON_TYPE_SECURE);
    cbaa:	4620      	mov	r0, r4
    cbac:	f01f fa84 	bl	2c0b8 <net_buf_simple_add_u8>
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    cbb0:	7fae      	ldrb	r6, [r5, #30]
    cbb2:	1eb3      	subs	r3, r6, #2
    cbb4:	425e      	negs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    cbb6:	4639      	mov	r1, r7
    cbb8:	4620      	mov	r0, r4
	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    cbba:	415e      	adcs	r6, r3
	net_buf_simple_add_u8(buf, flags);
    cbbc:	f01f fa7c 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, keys->net_id, 8);
    cbc0:	214a      	movs	r1, #74	; 0x4a
    cbc2:	fb01 5106 	mla	r1, r1, r6, r5
    cbc6:	2208      	movs	r2, #8
    cbc8:	315e      	adds	r1, #94	; 0x5e
    cbca:	4620      	mov	r0, r4
    cbcc:	f01f fa6b 	bl	2c0a6 <net_buf_simple_add_mem>
	net_buf_simple_add_be32(buf, bt_mesh.iv_index);
    cbd0:	4b06      	ldr	r3, [pc, #24]	; (cbec <bt_mesh_beacon_create+0x50>)
    cbd2:	4620      	mov	r0, r4
    cbd4:	6819      	ldr	r1, [r3, #0]
    cbd6:	f01f fa98 	bl	2c10a <net_buf_simple_add_be32>
	net_buf_simple_add_mem(buf, sub->auth, 8);
    cbda:	f105 0124 	add.w	r1, r5, #36	; 0x24
    cbde:	4620      	mov	r0, r4
    cbe0:	2208      	movs	r2, #8
}
    cbe2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	net_buf_simple_add_mem(buf, sub->auth, 8);
    cbe6:	f01f ba5e 	b.w	2c0a6 <net_buf_simple_add_mem>
    cbea:	bf00      	nop
    cbec:	200015a8 	.word	0x200015a8

0000cbf0 <secure_beacon_send>:
{
    cbf0:	b538      	push	{r3, r4, r5, lr}
    cbf2:	4605      	mov	r5, r0
	return z_impl_k_uptime_ticks();
    cbf4:	f020 fd47 	bl	2d686 <z_impl_k_uptime_ticks>
    cbf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    cbfc:	460a      	mov	r2, r1
    cbfe:	fba0 0103 	umull	r0, r1, r0, r3
    cc02:	fb03 1102 	mla	r1, r3, r2, r1
	time_diff = now - sub->beacon_sent;
    cc06:	682a      	ldr	r2, [r5, #0]
    cc08:	0bc3      	lsrs	r3, r0, #15
    cc0a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    cc0e:	1a9a      	subs	r2, r3, r2
	if (time_diff < (600 * MSEC_PER_SEC) &&
    cc10:	4b13      	ldr	r3, [pc, #76]	; (cc60 <secure_beacon_send+0x70>)
    cc12:	429a      	cmp	r2, r3
    cc14:	d809      	bhi.n	cc2a <secure_beacon_send+0x3a>
		time_diff < BEACON_THRESHOLD(sub)) {
    cc16:	7929      	ldrb	r1, [r5, #4]
    cc18:	f242 7310 	movw	r3, #10000	; 0x2710
    cc1c:	fb01 3303 	mla	r3, r1, r3, r3
    cc20:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
    cc24:	3b08      	subs	r3, #8
	if (time_diff < (600 * MSEC_PER_SEC) &&
    cc26:	4293      	cmp	r3, r2
    cc28:	d814      	bhi.n	cc54 <secure_beacon_send+0x64>
	buf = bt_mesh_adv_create(BT_MESH_ADV_BEACON, PROV_XMIT, K_NO_WAIT);
    cc2a:	2200      	movs	r2, #0
    cc2c:	2300      	movs	r3, #0
    cc2e:	2108      	movs	r1, #8
    cc30:	2002      	movs	r0, #2
    cc32:	f7ff fe91 	bl	c958 <bt_mesh_adv_create>
	if (!buf) {
    cc36:	4604      	mov	r4, r0
    cc38:	b170      	cbz	r0, cc58 <secure_beacon_send+0x68>
	bt_mesh_beacon_create(sub, &buf->b);
    cc3a:	f100 0108 	add.w	r1, r0, #8
    cc3e:	4628      	mov	r0, r5
    cc40:	f7ff ffac 	bl	cb9c <bt_mesh_beacon_create>
	bt_mesh_adv_send(buf, &send_cb, sub);
    cc44:	4620      	mov	r0, r4
    cc46:	4907      	ldr	r1, [pc, #28]	; (cc64 <secure_beacon_send+0x74>)
    cc48:	462a      	mov	r2, r5
    cc4a:	f7ff fe95 	bl	c978 <bt_mesh_adv_send>
	net_buf_unref(buf);
    cc4e:	4620      	mov	r0, r4
    cc50:	f013 f89c 	bl	1fd8c <net_buf_unref>
		return 0;
    cc54:	2000      	movs	r0, #0
}
    cc56:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
    cc58:	f06f 000b 	mvn.w	r0, #11
    cc5c:	e7fb      	b.n	cc56 <secure_beacon_send+0x66>
    cc5e:	bf00      	nop
    cc60:	000927bf 	.word	0x000927bf
    cc64:	0002e360 	.word	0x0002e360

0000cc68 <bt_mesh_beacon_update>:
		break;
	}
}

void bt_mesh_beacon_update(struct bt_mesh_subnet *sub)
{
    cc68:	b523      	push	{r0, r1, r5, lr}
    cc6a:	4605      	mov	r5, r0
	uint8_t flags = bt_mesh_net_flags(sub);
    cc6c:	f000 fdcc 	bl	d808 <bt_mesh_net_flags>
	struct bt_mesh_subnet_keys *keys;
	int err;

	keys = &sub->keys[SUBNET_KEY_TX_IDX(sub)];
    cc70:	7fab      	ldrb	r3, [r5, #30]
    cc72:	3b02      	subs	r3, #2
    cc74:	425a      	negs	r2, r3
    cc76:	415a      	adcs	r2, r3
    cc78:	234a      	movs	r3, #74	; 0x4a
    cc7a:	4353      	muls	r3, r2
	uint8_t flags = bt_mesh_net_flags(sub);
    cc7c:	4601      	mov	r1, r0

	BT_DBG("NetIndex 0x%03x Using %s key", sub->net_idx,
	       SUBNET_KEY_TX_IDX(sub) ? "new" : "current");
	BT_DBG("flags 0x%02x, IVI 0x%08x", flags, bt_mesh.iv_index);

	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    cc7e:	f103 025e 	add.w	r2, r3, #94	; 0x5e
    cc82:	f103 0066 	add.w	r0, r3, #102	; 0x66
				   bt_mesh.iv_index, sub->auth);
    cc86:	f105 0324 	add.w	r3, r5, #36	; 0x24
	err = bt_mesh_beacon_auth(keys->beacon, flags, keys->net_id,
    cc8a:	9300      	str	r3, [sp, #0]
    cc8c:	4b03      	ldr	r3, [pc, #12]	; (cc9c <bt_mesh_beacon_update+0x34>)
    cc8e:	442a      	add	r2, r5
    cc90:	681b      	ldr	r3, [r3, #0]
    cc92:	4428      	add	r0, r5
    cc94:	f01d fb49 	bl	2a32a <bt_mesh_beacon_auth>
	if (err) {
		BT_ERR("Failed updating net beacon for 0x%03x", sub->net_idx);
	}
}
    cc98:	b002      	add	sp, #8
    cc9a:	bd20      	pop	{r5, pc}
    cc9c:	200015a8 	.word	0x200015a8

0000cca0 <bt_mesh_beacon_init>:

BT_MESH_SUBNET_CB_DEFINE(subnet_evt);

void bt_mesh_beacon_init(void)
{
	k_delayed_work_init(&beacon_timer, beacon_send);
    cca0:	4901      	ldr	r1, [pc, #4]	; (cca8 <bt_mesh_beacon_init+0x8>)
    cca2:	4802      	ldr	r0, [pc, #8]	; (ccac <bt_mesh_beacon_init+0xc>)
    cca4:	f020 bc7e 	b.w	2d5a4 <k_delayed_work_init>
    cca8:	0000ca4d 	.word	0x0000ca4d
    ccac:	20001578 	.word	0x20001578

0000ccb0 <bt_mesh_beacon_ivu_initiator>:
}

void bt_mesh_beacon_ivu_initiator(bool enable)
{
    ccb0:	b508      	push	{r3, lr}
    ccb2:	4b12      	ldr	r3, [pc, #72]	; (ccfc <bt_mesh_beacon_ivu_initiator+0x4c>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ccb4:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    ccb8:	b168      	cbz	r0, ccd6 <bt_mesh_beacon_ivu_initiator+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ccba:	e853 2f00 	ldrex	r2, [r3]
    ccbe:	f042 0208 	orr.w	r2, r2, #8
    ccc2:	e843 2100 	strex	r1, r2, [r3]
    ccc6:	2900      	cmp	r1, #0
    ccc8:	d1f7      	bne.n	ccba <bt_mesh_beacon_ivu_initiator+0xa>
    ccca:	f3bf 8f5b 	dmb	ish
	if (enable) {
		k_work_submit(&beacon_timer.work);
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
		k_delayed_work_cancel(&beacon_timer);
	}
}
    ccce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_work_submit_to_queue(&k_sys_work_q, work);
    ccd2:	f7ff bea3 	b.w	ca1c <k_work_submit_to_queue.constprop.0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ccd6:	e853 2f00 	ldrex	r2, [r3]
    ccda:	f022 0208 	bic.w	r2, r2, #8
    ccde:	e843 2100 	strex	r1, r2, [r3]
    cce2:	2900      	cmp	r1, #0
    cce4:	d1f7      	bne.n	ccd6 <bt_mesh_beacon_ivu_initiator+0x26>
    cce6:	f3bf 8f5b 	dmb	ish
	} else if (bt_mesh_beacon_get() == BT_MESH_BEACON_DISABLED) {
    ccea:	f003 f845 	bl	fd78 <bt_mesh_beacon_get>
    ccee:	b920      	cbnz	r0, ccfa <bt_mesh_beacon_ivu_initiator+0x4a>
}
    ccf0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&beacon_timer);
    ccf4:	4802      	ldr	r0, [pc, #8]	; (cd00 <bt_mesh_beacon_ivu_initiator+0x50>)
    ccf6:	f020 bc5d 	b.w	2d5b4 <k_delayed_work_cancel>
}
    ccfa:	bd08      	pop	{r3, pc}
    ccfc:	200015b0 	.word	0x200015b0
    cd00:	20001578 	.word	0x20001578

0000cd04 <bt_mesh_beacon_recv>:
{
    cd04:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < 1) {
    cd06:	8883      	ldrh	r3, [r0, #4]
{
    cd08:	b085      	sub	sp, #20
    cd0a:	4604      	mov	r4, r0
	if (buf->len < 1) {
    cd0c:	b12b      	cbz	r3, cd1a <bt_mesh_beacon_recv+0x16>
	type = net_buf_simple_pull_u8(buf);
    cd0e:	f01f fa48 	bl	2c1a2 <net_buf_simple_pull_u8>
	switch (type) {
    cd12:	4605      	mov	r5, r0
    cd14:	b118      	cbz	r0, cd1e <bt_mesh_beacon_recv+0x1a>
    cd16:	2801      	cmp	r0, #1
    cd18:	d022      	beq.n	cd60 <bt_mesh_beacon_recv+0x5c>
}
    cd1a:	b005      	add	sp, #20
    cd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (buf->len != 18 && buf->len != 22) {
    cd1e:	88a3      	ldrh	r3, [r4, #4]
    cd20:	f023 0304 	bic.w	r3, r3, #4
    cd24:	b29b      	uxth	r3, r3
    cd26:	2b12      	cmp	r3, #18
    cd28:	d1f7      	bne.n	cd1a <bt_mesh_beacon_recv+0x16>
	uuid = net_buf_simple_pull_mem(buf, 16);
    cd2a:	2110      	movs	r1, #16
    cd2c:	4620      	mov	r0, r4
    cd2e:	f01f fa30 	bl	2c192 <net_buf_simple_pull_mem>
    cd32:	4606      	mov	r6, r0
	oob_info = net_buf_simple_pull_be16(buf);
    cd34:	4620      	mov	r0, r4
    cd36:	f01f fa44 	bl	2c1c2 <net_buf_simple_pull_be16>
	if (buf->len == 4) {
    cd3a:	88a3      	ldrh	r3, [r4, #4]
    cd3c:	2b04      	cmp	r3, #4
	oob_info = net_buf_simple_pull_be16(buf);
    cd3e:	4607      	mov	r7, r0
	if (buf->len == 4) {
    cd40:	d104      	bne.n	cd4c <bt_mesh_beacon_recv+0x48>
		uri_hash_val = net_buf_simple_pull_be32(buf);
    cd42:	4620      	mov	r0, r4
    cd44:	f01f fa48 	bl	2c1d8 <net_buf_simple_pull_be32>
		uri_hash = &uri_hash_val;
    cd48:	466d      	mov	r5, sp
		uri_hash_val = net_buf_simple_pull_be32(buf);
    cd4a:	9000      	str	r0, [sp, #0]
	prov = bt_mesh_prov_get();
    cd4c:	f004 fa3e 	bl	111cc <bt_mesh_prov_get>
	if (prov->unprovisioned_beacon) {
    cd50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    cd52:	2b00      	cmp	r3, #0
    cd54:	d0e1      	beq.n	cd1a <bt_mesh_beacon_recv+0x16>
		prov->unprovisioned_beacon(uuid,
    cd56:	462a      	mov	r2, r5
    cd58:	4639      	mov	r1, r7
    cd5a:	4630      	mov	r0, r6
    cd5c:	4798      	blx	r3
    cd5e:	e7dc      	b.n	cd1a <bt_mesh_beacon_recv+0x16>
	if (buf->len < 21) {
    cd60:	88a3      	ldrh	r3, [r4, #4]
    cd62:	2b14      	cmp	r3, #20
    cd64:	d9d9      	bls.n	cd1a <bt_mesh_beacon_recv+0x16>
	sub = bt_mesh_subnet_find(cache_check, buf->data);
    cd66:	6821      	ldr	r1, [r4, #0]
    cd68:	4831      	ldr	r0, [pc, #196]	; (ce30 <bt_mesh_beacon_recv+0x12c>)
    cd6a:	f000 fe0f 	bl	d98c <bt_mesh_subnet_find>
	if (sub) {
    cd6e:	4605      	mov	r5, r0
    cd70:	2800      	cmp	r0, #0
    cd72:	d151      	bne.n	ce18 <bt_mesh_beacon_recv+0x114>
	params.flags = net_buf_simple_pull_u8(buf);
    cd74:	4620      	mov	r0, r4
	data = buf->data;
    cd76:	6826      	ldr	r6, [r4, #0]
	params.flags = net_buf_simple_pull_u8(buf);
    cd78:	f01f fa13 	bl	2c1a2 <net_buf_simple_pull_u8>
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    cd7c:	2108      	movs	r1, #8
	params.flags = net_buf_simple_pull_u8(buf);
    cd7e:	f88d 000c 	strb.w	r0, [sp, #12]
	params.net_id = net_buf_simple_pull_mem(buf, 8);
    cd82:	4620      	mov	r0, r4
    cd84:	f01f fa05 	bl	2c192 <net_buf_simple_pull_mem>
    cd88:	9000      	str	r0, [sp, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    cd8a:	4620      	mov	r0, r4
    cd8c:	f01f fa24 	bl	2c1d8 <net_buf_simple_pull_be32>
	params.auth = buf->data;
    cd90:	6823      	ldr	r3, [r4, #0]
	params.iv_index = net_buf_simple_pull_be32(buf);
    cd92:	9002      	str	r0, [sp, #8]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    cd94:	4669      	mov	r1, sp
    cd96:	4827      	ldr	r0, [pc, #156]	; (ce34 <bt_mesh_beacon_recv+0x130>)
	params.auth = buf->data;
    cd98:	9301      	str	r3, [sp, #4]
	sub = bt_mesh_subnet_find(subnet_by_id, &params);
    cd9a:	f000 fdf7 	bl	d98c <bt_mesh_subnet_find>
	if (!sub) {
    cd9e:	4605      	mov	r5, r0
    cda0:	2800      	cmp	r0, #0
    cda2:	d0ba      	beq.n	cd1a <bt_mesh_beacon_recv+0x16>
	if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !params.new_key) {
    cda4:	7f83      	ldrb	r3, [r0, #30]
    cda6:	2b02      	cmp	r3, #2
    cda8:	d103      	bne.n	cdb2 <bt_mesh_beacon_recv+0xae>
    cdaa:	f89d 300d 	ldrb.w	r3, [sp, #13]
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d0b3      	beq.n	cd1a <bt_mesh_beacon_recv+0x16>
	memcpy(sub->beacon_cache, data, 21);
    cdb2:	2215      	movs	r2, #21
    cdb4:	4631      	mov	r1, r6
    cdb6:	1da8      	adds	r0, r5, #6
    cdb8:	f019 fdf3 	bl	269a2 <memcpy>
	bt_mesh_kr_update(sub, BT_MESH_KEY_REFRESH(params.flags),
    cdbc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    cdc0:	f89d 200d 	ldrb.w	r2, [sp, #13]
    cdc4:	4628      	mov	r0, r5
    cdc6:	f001 0101 	and.w	r1, r1, #1
    cdca:	f01c fe7e 	bl	29aca <bt_mesh_kr_update>
	if (bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY) &&
    cdce:	2000      	movs	r0, #0
    cdd0:	f000 fd76 	bl	d8c0 <bt_mesh_subnet_get>
    cdd4:	b108      	cbz	r0, cdda <bt_mesh_beacon_recv+0xd6>
    cdd6:	8bab      	ldrh	r3, [r5, #28]
    cdd8:	b9f3      	cbnz	r3, ce18 <bt_mesh_beacon_recv+0x114>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cdda:	f3bf 8f5b 	dmb	ish
    cdde:	4b16      	ldr	r3, [pc, #88]	; (ce38 <bt_mesh_beacon_recv+0x134>)
    cde0:	681a      	ldr	r2, [r3, #0]
    cde2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    cde6:	0712      	lsls	r2, r2, #28
    cde8:	d50f      	bpl.n	ce0a <bt_mesh_beacon_recv+0x106>
    cdea:	f3bf 8f5b 	dmb	ish
    cdee:	681a      	ldr	r2, [r3, #0]
    cdf0:	f3bf 8f5b 	dmb	ish
	     BT_MESH_IV_UPDATE(params.flags))) {
    cdf4:	f89d 300c 	ldrb.w	r3, [sp, #12]
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    cdf8:	f3c2 0280 	ubfx	r2, r2, #2, #1
	     BT_MESH_IV_UPDATE(params.flags))) {
    cdfc:	f3c3 0340 	ubfx	r3, r3, #1, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR) &&
    ce00:	429a      	cmp	r2, r3
    ce02:	d102      	bne.n	ce0a <bt_mesh_beacon_recv+0x106>
		bt_mesh_beacon_ivu_initiator(false);
    ce04:	2000      	movs	r0, #0
    ce06:	f7ff ff53 	bl	ccb0 <bt_mesh_beacon_ivu_initiator>
	bt_mesh_net_iv_update(params.iv_index, BT_MESH_IV_UPDATE(params.flags));
    ce0a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    ce0e:	9802      	ldr	r0, [sp, #8]
    ce10:	f3c1 0140 	ubfx	r1, r1, #1, #1
    ce14:	f000 f958 	bl	d0c8 <bt_mesh_net_iv_update>
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    ce18:	f002 ffae 	bl	fd78 <bt_mesh_beacon_get>
    ce1c:	2801      	cmp	r0, #1
    ce1e:	f47f af7c 	bne.w	cd1a <bt_mesh_beacon_recv+0x16>
	    sub->beacons_cur < 0xff) {
    ce22:	796b      	ldrb	r3, [r5, #5]
	if (bt_mesh_beacon_get() == BT_MESH_BEACON_ENABLED &&
    ce24:	2bff      	cmp	r3, #255	; 0xff
		sub->beacons_cur++;
    ce26:	bf1c      	itt	ne
    ce28:	3301      	addne	r3, #1
    ce2a:	716b      	strbne	r3, [r5, #5]
    ce2c:	e775      	b.n	cd1a <bt_mesh_beacon_recv+0x16>
    ce2e:	bf00      	nop
    ce30:	0002998f 	.word	0x0002998f
    ce34:	000299a1 	.word	0x000299a1
    ce38:	200015b0 	.word	0x200015b0

0000ce3c <bt_mesh_beacon_enable>:

	bt_mesh_beacon_update(sub);
}

void bt_mesh_beacon_enable(void)
{
    ce3c:	b508      	push	{r3, lr}
	if (!bt_mesh_is_provisioned()) {
    ce3e:	f7ff fc1b 	bl	c678 <bt_mesh_is_provisioned>
    ce42:	b918      	cbnz	r0, ce4c <bt_mesh_beacon_enable+0x10>
	}

	bt_mesh_subnet_foreach(subnet_beacon_enable);

	k_work_submit(&beacon_timer.work);
}
    ce44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ce48:	f7ff bde8 	b.w	ca1c <k_work_submit_to_queue.constprop.0>
	bt_mesh_subnet_foreach(subnet_beacon_enable);
    ce4c:	4801      	ldr	r0, [pc, #4]	; (ce54 <bt_mesh_beacon_enable+0x18>)
    ce4e:	f000 fdaf 	bl	d9b0 <bt_mesh_subnet_foreach>
    ce52:	e7f7      	b.n	ce44 <bt_mesh_beacon_enable+0x8>
    ce54:	00029a1f 	.word	0x00029a1f

0000ce58 <bt_mesh_beacon_disable>:
    ce58:	4b05      	ldr	r3, [pc, #20]	; (ce70 <bt_mesh_beacon_disable+0x18>)
    ce5a:	f3bf 8f5b 	dmb	ish
    ce5e:	681b      	ldr	r3, [r3, #0]
    ce60:	f3bf 8f5b 	dmb	ish

void bt_mesh_beacon_disable(void)
{
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_INITIATOR)) {
    ce64:	071b      	lsls	r3, r3, #28
    ce66:	d402      	bmi.n	ce6e <bt_mesh_beacon_disable+0x16>
		k_delayed_work_cancel(&beacon_timer);
    ce68:	4802      	ldr	r0, [pc, #8]	; (ce74 <bt_mesh_beacon_disable+0x1c>)
    ce6a:	f020 bba3 	b.w	2d5b4 <k_delayed_work_cancel>
	}
}
    ce6e:	4770      	bx	lr
    ce70:	200015b0 	.word	0x200015b0
    ce74:	20001578 	.word	0x20001578

0000ce78 <bt_mesh_net_local>:

	return seq;
}

static void bt_mesh_net_local(struct k_work *work)
{
    ce78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct net_buf *buf;

	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    ce7c:	4d30      	ldr	r5, [pc, #192]	; (cf40 <bt_mesh_net_local+0xc8>)
{
    ce7e:	b086      	sub	sp, #24
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    ce80:	f105 0618 	add.w	r6, r5, #24
    ce84:	4630      	mov	r0, r6
    ce86:	f01f f89c 	bl	2bfc2 <net_buf_slist_get>
    ce8a:	4604      	mov	r4, r0
    ce8c:	b910      	cbnz	r0, ce94 <bt_mesh_net_local+0x1c>
		       rx.ctx.addr, rx.seq, sub);

		(void) bt_mesh_trans_recv(&buf->b, &rx, rx.ctx.recv_rssi);
		net_buf_unref(buf);
	}
}
    ce8e:	b006      	add	sp, #24
    ce90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_mesh_subnet *sub = LOOPBACK_BUF_SUB(buf);
    ce94:	f8d4 8014 	ldr.w	r8, [r4, #20]
				.addr = SRC(buf->data),
    ce98:	4627      	mov	r7, r4
		struct bt_mesh_net_rx rx = {
    ce9a:	2210      	movs	r2, #16
    ce9c:	2100      	movs	r1, #0
    ce9e:	a802      	add	r0, sp, #8
    cea0:	f019 fdaa 	bl	269f8 <memset>
    cea4:	f8b8 301c 	ldrh.w	r3, [r8, #28]
				.addr = SRC(buf->data),
    cea8:	f857 1f08 	ldr.w	r1, [r7, #8]!
		struct bt_mesh_net_rx rx = {
    ceac:	f8ad 3004 	strh.w	r3, [sp, #4]
    ceb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ceb4:	f8ad 3006 	strh.w	r3, [sp, #6]
	return ((uint16_t)src[0] << 8) | src[1];
    ceb8:	794a      	ldrb	r2, [r1, #5]
    ceba:	798b      	ldrb	r3, [r1, #6]
    cebc:	f8cd 8000 	str.w	r8, [sp]
    cec0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    cec4:	f8ad 3008 	strh.w	r3, [sp, #8]
    cec8:	79ca      	ldrb	r2, [r1, #7]
    ceca:	7a0b      	ldrb	r3, [r1, #8]
    cecc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ced0:	f8ad 300a 	strh.w	r3, [sp, #10]
				.recv_ttl = TTL(buf->data),
    ced4:	784b      	ldrb	r3, [r1, #1]
    ced6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		struct bt_mesh_net_rx rx = {
    ceda:	f88d 300d 	strb.w	r3, [sp, #13]
			.seq = SEQ(buf->data),
    cede:	1c88      	adds	r0, r1, #2
		struct bt_mesh_net_rx rx = {
    cee0:	2301      	movs	r3, #1
    cee2:	f88d 300f 	strb.w	r3, [sp, #15]
			.seq = SEQ(buf->data),
    cee6:	f01c fd9e 	bl	29a26 <sys_get_be24>
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    ceea:	682b      	ldr	r3, [r5, #0]
		struct bt_mesh_net_rx rx = {
    ceec:	9004      	str	r0, [sp, #16]
			.old_iv = (IVI(buf->data) != (bt_mesh.iv_index & 0x01)),
    ceee:	780a      	ldrb	r2, [r1, #0]
    cef0:	f003 0301 	and.w	r3, r3, #1
		struct bt_mesh_net_rx rx = {
    cef4:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
			.new_key = SUBNET_KEY_TX_IDX(sub),
    cef8:	f898 201e 	ldrb.w	r2, [r8, #30]
    cefc:	1e90      	subs	r0, r2, #2
    cefe:	4242      	negs	r2, r0
    cf00:	4142      	adcs	r2, r0
		struct bt_mesh_net_rx rx = {
    cf02:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
    cf06:	f89d 2014 	ldrb.w	r2, [sp, #20]
    cf0a:	f022 0203 	bic.w	r2, r2, #3
    cf0e:	4313      	orrs	r3, r2
    cf10:	f88d 3014 	strb.w	r3, [sp, #20]
			.ctl = CTL(buf->data),
    cf14:	784b      	ldrb	r3, [r1, #1]
		struct bt_mesh_net_rx rx = {
    cf16:	f89d 2014 	ldrb.w	r2, [sp, #20]
			.ctl = CTL(buf->data),
    cf1a:	09db      	lsrs	r3, r3, #7
		struct bt_mesh_net_rx rx = {
    cf1c:	00db      	lsls	r3, r3, #3
    cf1e:	f022 0278 	bic.w	r2, r2, #120	; 0x78
    cf22:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    cf26:	4313      	orrs	r3, r2
		(void) bt_mesh_trans_recv(&buf->b, &rx, rx.ctx.recv_rssi);
    cf28:	4669      	mov	r1, sp
    cf2a:	2200      	movs	r2, #0
    cf2c:	4638      	mov	r0, r7
		struct bt_mesh_net_rx rx = {
    cf2e:	f88d 3014 	strb.w	r3, [sp, #20]
		(void) bt_mesh_trans_recv(&buf->b, &rx, rx.ctx.recv_rssi);
    cf32:	f001 fc1d 	bl	e770 <bt_mesh_trans_recv>
		net_buf_unref(buf);
    cf36:	4620      	mov	r0, r4
    cf38:	f012 ff28 	bl	1fd8c <net_buf_unref>
    cf3c:	e7a2      	b.n	ce84 <bt_mesh_net_local+0xc>
    cf3e:	bf00      	nop
    cf40:	200015a8 	.word	0x200015a8

0000cf44 <net_decrypt>:
}

static bool net_decrypt(struct bt_mesh_net_rx *rx, struct net_buf_simple *in,
			struct net_buf_simple *out,
			const struct bt_mesh_net_cred *cred)
{
    cf44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf48:	461e      	mov	r6, r3
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);

	if (NID(in->data) != cred->nid) {
    cf4a:	680b      	ldr	r3, [r1, #0]
{
    cf4c:	4614      	mov	r4, r2
	if (NID(in->data) != cred->nid) {
    cf4e:	781a      	ldrb	r2, [r3, #0]
{
    cf50:	4605      	mov	r5, r0
	if (NID(in->data) != cred->nid) {
    cf52:	7830      	ldrb	r0, [r6, #0]
    cf54:	f002 037f 	and.w	r3, r2, #127	; 0x7f
    cf58:	4298      	cmp	r0, r3
    cf5a:	d002      	beq.n	cf62 <net_decrypt+0x1e>
		return false;
    cf5c:	2000      	movs	r0, #0

	BT_DBG("src 0x%04x", rx->ctx.addr);

	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
				   proxy) == 0;
}
    cf5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    cf62:	4f30      	ldr	r7, [pc, #192]	; (d024 <net_decrypt+0xe0>)
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    cf64:	f895 8014 	ldrb.w	r8, [r5, #20]
	rx->old_iv = (IVI(in->data) != (bt_mesh.iv_index & 0x01));
    cf68:	683b      	ldr	r3, [r7, #0]
    cf6a:	f003 0301 	and.w	r3, r3, #1
    cf6e:	ea83 13d2 	eor.w	r3, r3, r2, lsr #7
    cf72:	4642      	mov	r2, r8
    cf74:	f363 0200 	bfi	r2, r3, #0, #1
	buf->len  = 0U;
    cf78:	2300      	movs	r3, #0
    cf7a:	752a      	strb	r2, [r5, #20]
    cf7c:	80a3      	strh	r3, [r4, #4]
	buf->data = buf->__buf;
    cf7e:	68a3      	ldr	r3, [r4, #8]
    cf80:	6023      	str	r3, [r4, #0]
	net_buf_simple_add_mem(out, in->data, in->len);
    cf82:	888a      	ldrh	r2, [r1, #4]
    cf84:	6809      	ldr	r1, [r1, #0]
    cf86:	4620      	mov	r0, r4
    cf88:	f01f f88d 	bl	2c0a6 <net_buf_simple_add_mem>
	if (bt_mesh_net_obfuscate(out->data, BT_MESH_NET_IVI_RX(rx),
    cf8c:	7d2b      	ldrb	r3, [r5, #20]
    cf8e:	6839      	ldr	r1, [r7, #0]
    cf90:	6820      	ldr	r0, [r4, #0]
    cf92:	f003 0301 	and.w	r3, r3, #1
    cf96:	f106 0211 	add.w	r2, r6, #17
    cf9a:	1ac9      	subs	r1, r1, r3
    cf9c:	f001 ffe4 	bl	ef68 <bt_mesh_net_obfuscate>
    cfa0:	2800      	cmp	r0, #0
    cfa2:	d1db      	bne.n	cf5c <net_decrypt+0x18>
	rx->ctx.addr = SRC(out->data);
    cfa4:	6823      	ldr	r3, [r4, #0]
    cfa6:	795a      	ldrb	r2, [r3, #5]
    cfa8:	7998      	ldrb	r0, [r3, #6]
    cfaa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
    cfae:	b203      	sxth	r3, r0
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    cfb0:	2b00      	cmp	r3, #0
	rx->ctx.addr = SRC(out->data);
    cfb2:	8128      	strh	r0, [r5, #8]
	if (!BT_MESH_ADDR_IS_UNICAST(rx->ctx.addr)) {
    cfb4:	ddd2      	ble.n	cf5c <net_decrypt+0x18>
	if (bt_mesh_elem_find(rx->ctx.addr)) {
    cfb6:	f002 f96b 	bl	f290 <bt_mesh_elem_find>
    cfba:	2800      	cmp	r0, #0
    cfbc:	d1ce      	bne.n	cf5c <net_decrypt+0x18>
	if (rx->net_if == BT_MESH_NET_IF_ADV && msg_cache_match(out)) {
    cfbe:	7d2d      	ldrb	r5, [r5, #20]
    cfc0:	f015 0130 	ands.w	r1, r5, #48	; 0x30
    cfc4:	d11c      	bne.n	d000 <net_decrypt+0xbc>
		if (msg_cache[i].src == SRC(pdu->data) &&
    cfc6:	6823      	ldr	r3, [r4, #0]
    cfc8:	f8df b05c 	ldr.w	fp, [pc, #92]	; d028 <net_decrypt+0xe4>
    cfcc:	795a      	ldrb	r2, [r3, #5]
    cfce:	f893 a006 	ldrb.w	sl, [r3, #6]
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    cfd2:	f103 0902 	add.w	r9, r3, #2
		if (msg_cache[i].src == SRC(pdu->data) &&
    cfd6:	ea4a 2a02 	orr.w	sl, sl, r2, lsl #8
    cfda:	f83b 3021 	ldrh.w	r3, [fp, r1, lsl #2]
    cfde:	f3c3 030e 	ubfx	r3, r3, #0, #15
    cfe2:	4553      	cmp	r3, sl
    cfe4:	d109      	bne.n	cffa <net_decrypt+0xb6>
		    msg_cache[i].seq == (SEQ(pdu->data) & BIT_MASK(17))) {
    cfe6:	4648      	mov	r0, r9
    cfe8:	f01c fd1d 	bl	29a26 <sys_get_be24>
    cfec:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
    cff0:	f3c0 0010 	ubfx	r0, r0, #0, #17
		if (msg_cache[i].src == SRC(pdu->data) &&
    cff4:	ebb0 3fd3 	cmp.w	r0, r3, lsr #15
    cff8:	d0b0      	beq.n	cf5c <net_decrypt+0x18>
	for (i = 0U; i < ARRAY_SIZE(msg_cache); i++) {
    cffa:	3101      	adds	r1, #1
    cffc:	291e      	cmp	r1, #30
    cffe:	d1ec      	bne.n	cfda <net_decrypt+0x96>
	bool proxy = (rx->net_if == BT_MESH_NET_IF_PROXY_CFG);
    d000:	f008 0330 	and.w	r3, r8, #48	; 0x30
	return bt_mesh_net_decrypt(cred->enc, out, BT_MESH_NET_IVI_RX(rx),
    d004:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    d008:	683a      	ldr	r2, [r7, #0]
    d00a:	424b      	negs	r3, r1
    d00c:	f005 0501 	and.w	r5, r5, #1
    d010:	414b      	adcs	r3, r1
    d012:	1b52      	subs	r2, r2, r5
    d014:	4621      	mov	r1, r4
    d016:	1c70      	adds	r0, r6, #1
    d018:	f01d f8d2 	bl	2a1c0 <bt_mesh_net_decrypt>
				   proxy) == 0;
    d01c:	fab0 f080 	clz	r0, r0
    d020:	0940      	lsrs	r0, r0, #5
    d022:	e79c      	b.n	cf5e <net_decrypt+0x1a>
    d024:	200015a8 	.word	0x200015a8
    d028:	20002518 	.word	0x20002518

0000d02c <atomic_set_bit_to.constprop.0>:
	if (val) {
    d02c:	4b0b      	ldr	r3, [pc, #44]	; (d05c <atomic_set_bit_to.constprop.0+0x30>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d02e:	f3bf 8f5b 	dmb	ish
	if (val) {
    d032:	b150      	cbz	r0, d04a <atomic_set_bit_to.constprop.0+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d034:	e853 2f00 	ldrex	r2, [r3]
    d038:	f042 0204 	orr.w	r2, r2, #4
    d03c:	e843 2100 	strex	r1, r2, [r3]
    d040:	2900      	cmp	r1, #0
    d042:	d1f7      	bne.n	d034 <atomic_set_bit_to.constprop.0+0x8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d044:	f3bf 8f5b 	dmb	ish
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
    d048:	4770      	bx	lr
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d04a:	e853 2f00 	ldrex	r2, [r3]
    d04e:	f022 0204 	bic.w	r2, r2, #4
    d052:	e843 2100 	strex	r1, r2, [r3]
    d056:	2900      	cmp	r1, #0
    d058:	d0f4      	beq.n	d044 <atomic_set_bit_to.constprop.0+0x18>
    d05a:	e7f6      	b.n	d04a <atomic_set_bit_to.constprop.0+0x1e>
    d05c:	200015b0 	.word	0x200015b0

0000d060 <bt_mesh_net_create>:
{
    d060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d064:	460d      	mov	r5, r1
    d066:	461f      	mov	r7, r3
	if (BT_MESH_KEY_REFRESH(flags)) {
    d068:	f015 0301 	ands.w	r3, r5, #1
{
    d06c:	4611      	mov	r1, r2
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_PHASE_2, NULL, key);
    d06e:	bf1d      	ittte	ne
    d070:	4613      	movne	r3, r2
    d072:	2102      	movne	r1, #2
    d074:	2200      	movne	r2, #0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    d076:	4619      	moveq	r1, r3
{
    d078:	4606      	mov	r6, r0
		err = bt_mesh_subnet_set(idx, BT_MESH_KR_NORMAL, key, NULL);
    d07a:	f000 fc55 	bl	d928 <bt_mesh_subnet_set>
    d07e:	4604      	mov	r4, r0
	if (err) {
    d080:	b9c8      	cbnz	r0, d0b6 <bt_mesh_net_create+0x56>
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    d082:	4601      	mov	r1, r0
    d084:	2278      	movs	r2, #120	; 0x78
    d086:	480d      	ldr	r0, [pc, #52]	; (d0bc <bt_mesh_net_create+0x5c>)
	bt_mesh.iv_index = iv_index;
    d088:	f8df 8038 	ldr.w	r8, [pc, #56]	; d0c4 <bt_mesh_net_create+0x64>
	(void)memset(msg_cache, 0, sizeof(msg_cache));
    d08c:	f019 fcb4 	bl	269f8 <memset>
	msg_cache_next = 0U;
    d090:	4b0b      	ldr	r3, [pc, #44]	; (d0c0 <bt_mesh_net_create+0x60>)
	bt_mesh.iv_index = iv_index;
    d092:	f8c8 7000 	str.w	r7, [r8]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    d096:	f3c5 0040 	ubfx	r0, r5, #1, #1
	msg_cache_next = 0U;
    d09a:	801c      	strh	r4, [r3, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS,
    d09c:	f7ff ffc6 	bl	d02c <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = BT_MESH_IVU_MIN_HOURS;
    d0a0:	2360      	movs	r3, #96	; 0x60
    d0a2:	f888 3020 	strb.w	r3, [r8, #32]
		bt_mesh_store_net();
    d0a6:	f01e fdd1 	bl	2bc4c <bt_mesh_store_net>
		bt_mesh_store_subnet(idx);
    d0aa:	4630      	mov	r0, r6
    d0ac:	f01e fde2 	bl	2bc74 <bt_mesh_store_subnet>
		bt_mesh_store_iv(false);
    d0b0:	4620      	mov	r0, r4
    d0b2:	f01e fdce 	bl	2bc52 <bt_mesh_store_iv>
}
    d0b6:	4620      	mov	r0, r4
    d0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0bc:	20002518 	.word	0x20002518
    d0c0:	2000903e 	.word	0x2000903e
    d0c4:	200015a8 	.word	0x200015a8

0000d0c8 <bt_mesh_net_iv_update>:
{
    d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d0ca:	4b2d      	ldr	r3, [pc, #180]	; (d180 <bt_mesh_net_iv_update+0xb8>)
    d0cc:	f3bf 8f5b 	dmb	ish
    d0d0:	689a      	ldr	r2, [r3, #8]
    d0d2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    d0d6:	f012 0f04 	tst.w	r2, #4
{
    d0da:	4605      	mov	r5, r0
    d0dc:	460c      	mov	r4, r1
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d0de:	f3c2 0680 	ubfx	r6, r2, #2, #1
    d0e2:	461f      	mov	r7, r3
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    d0e4:	d005      	beq.n	d0f2 <bt_mesh_net_iv_update+0x2a>
		if (iv_index != bt_mesh.iv_index) {
    d0e6:	681b      	ldr	r3, [r3, #0]
    d0e8:	4283      	cmp	r3, r0
    d0ea:	d100      	bne.n	d0ee <bt_mesh_net_iv_update+0x26>
		if (iv_update) {
    d0ec:	b371      	cbz	r1, d14c <bt_mesh_net_iv_update+0x84>
			return false;
    d0ee:	2600      	movs	r6, #0
    d0f0:	e028      	b.n	d144 <bt_mesh_net_iv_update+0x7c>
		if (iv_index == bt_mesh.iv_index) {
    d0f2:	681b      	ldr	r3, [r3, #0]
		if (iv_index < bt_mesh.iv_index ||
    d0f4:	4283      	cmp	r3, r0
    d0f6:	d225      	bcs.n	d144 <bt_mesh_net_iv_update+0x7c>
		    iv_index > bt_mesh.iv_index + 42) {
    d0f8:	f103 022a 	add.w	r2, r3, #42	; 0x2a
		if (iv_index < bt_mesh.iv_index ||
    d0fc:	4282      	cmp	r2, r0
    d0fe:	d321      	bcc.n	d144 <bt_mesh_net_iv_update+0x7c>
		if (iv_index > bt_mesh.iv_index + 1) {
    d100:	3301      	adds	r3, #1
    d102:	4283      	cmp	r3, r0
    d104:	d220      	bcs.n	d148 <bt_mesh_net_iv_update+0x80>
			bt_mesh_rpl_clear();
    d106:	f01c ff95 	bl	2a034 <bt_mesh_rpl_clear>
			bt_mesh.seq = 0U;
    d10a:	e9c7 5600 	strd	r5, r6, [r7]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv_update);
    d10e:	4620      	mov	r0, r4
    d110:	f7ff ff8c 	bl	d02c <atomic_set_bit_to.constprop.0>
	bt_mesh.ivu_duration = 0U;
    d114:	2300      	movs	r3, #0
    d116:	f887 3020 	strb.w	r3, [r7, #32]
	if (iv_update) {
    d11a:	b37c      	cbz	r4, d17c <bt_mesh_net_iv_update+0xb4>
		bt_mesh.iv_index = iv_index;
    d11c:	603d      	str	r5, [r7, #0]
		bt_mesh_rpl_reset();
    d11e:	f001 fe45 	bl	edac <bt_mesh_rpl_reset>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d122:	4a18      	ldr	r2, [pc, #96]	; (d184 <bt_mesh_net_iv_update+0xbc>)
    d124:	4918      	ldr	r1, [pc, #96]	; (d188 <bt_mesh_net_iv_update+0xc0>)
    d126:	4819      	ldr	r0, [pc, #100]	; (d18c <bt_mesh_net_iv_update+0xc4>)
    d128:	2300      	movs	r3, #0
    d12a:	f016 fe1f 	bl	23d6c <k_delayed_work_submit_to_queue>
	bt_mesh_subnet_foreach(bt_mesh_beacon_update);
    d12e:	4818      	ldr	r0, [pc, #96]	; (d190 <bt_mesh_net_iv_update+0xc8>)
    d130:	f000 fc3e 	bl	d9b0 <bt_mesh_subnet_foreach>
		bt_mesh_cdb_iv_update(iv_index, iv_update);
    d134:	4621      	mov	r1, r4
    d136:	4628      	mov	r0, r5
    d138:	f005 fd74 	bl	12c24 <bt_mesh_cdb_iv_update>
		bt_mesh_store_iv(false);
    d13c:	2000      	movs	r0, #0
    d13e:	f01e fd88 	bl	2bc52 <bt_mesh_store_iv>
	return true;
    d142:	2601      	movs	r6, #1
}
    d144:	4630      	mov	r0, r6
    d146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (iv_index == bt_mesh.iv_index + 1 && !iv_update) {
    d148:	2900      	cmp	r1, #0
    d14a:	d0fb      	beq.n	d144 <bt_mesh_net_iv_update+0x7c>
		if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    d14c:	f897 3020 	ldrb.w	r3, [r7, #32]
    d150:	2b5f      	cmp	r3, #95	; 0x5f
    d152:	d9cc      	bls.n	d0ee <bt_mesh_net_iv_update+0x26>
	if (!iv_update && bt_mesh_tx_in_progress()) {
    d154:	2c00      	cmp	r4, #0
    d156:	d1da      	bne.n	d10e <bt_mesh_net_iv_update+0x46>
    d158:	f001 fa72 	bl	e640 <bt_mesh_tx_in_progress>
    d15c:	2800      	cmp	r0, #0
    d15e:	d0d6      	beq.n	d10e <bt_mesh_net_iv_update+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d160:	f3bf 8f5b 	dmb	ish
    d164:	4b0b      	ldr	r3, [pc, #44]	; (d194 <bt_mesh_net_iv_update+0xcc>)
    d166:	e853 2f00 	ldrex	r2, [r3]
    d16a:	f042 0220 	orr.w	r2, r2, #32
    d16e:	e843 2100 	strex	r1, r2, [r3]
    d172:	2900      	cmp	r1, #0
    d174:	d1f7      	bne.n	d166 <bt_mesh_net_iv_update+0x9e>
    d176:	f3bf 8f5b 	dmb	ish
    d17a:	e7b8      	b.n	d0ee <bt_mesh_net_iv_update+0x26>
		bt_mesh.seq = 0U;
    d17c:	607c      	str	r4, [r7, #4]
    d17e:	e7d0      	b.n	d122 <bt_mesh_net_iv_update+0x5a>
    d180:	200015a8 	.word	0x200015a8
    d184:	a8c00000 	.word	0xa8c00000
    d188:	200015d0 	.word	0x200015d0
    d18c:	20001fd8 	.word	0x20001fd8
    d190:	0000cc69 	.word	0x0000cc69
    d194:	200015b0 	.word	0x200015b0

0000d198 <ivu_refresh>:
		bt_mesh_net_relay(&buf, &rx);
	}
}

static void ivu_refresh(struct k_work *work)
{
    d198:	b510      	push	{r4, lr}
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    d19a:	4c15      	ldr	r4, [pc, #84]	; (d1f0 <ivu_refresh+0x58>)
    d19c:	f894 3020 	ldrb.w	r3, [r4, #32]
    d1a0:	3318      	adds	r3, #24
    d1a2:	b2db      	uxtb	r3, r3
	BT_DBG("%s for %u hour%s",
	       atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) ?
	       "IVU in Progress" : "IVU Normal mode",
	       bt_mesh.ivu_duration, bt_mesh.ivu_duration == 1U ? "" : "s");

	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    d1a4:	2b5f      	cmp	r3, #95	; 0x5f
	bt_mesh.ivu_duration += BT_MESH_IVU_HOURS;
    d1a6:	f884 3020 	strb.w	r3, [r4, #32]
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
    d1aa:	d80b      	bhi.n	d1c4 <ivu_refresh+0x2c>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			bt_mesh_store_iv(true);
    d1ac:	2001      	movs	r0, #1
    d1ae:	f01e fd50 	bl	2bc52 <bt_mesh_store_iv>
    d1b2:	f104 0128 	add.w	r1, r4, #40	; 0x28
    d1b6:	4a0f      	ldr	r2, [pc, #60]	; (d1f4 <ivu_refresh+0x5c>)
    d1b8:	480f      	ldr	r0, [pc, #60]	; (d1f8 <ivu_refresh+0x60>)
		bt_mesh_beacon_ivu_initiator(true);
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_store_iv(true);
	}
}
    d1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d1be:	2300      	movs	r3, #0
    d1c0:	f016 bdd4 	b.w	23d6c <k_delayed_work_submit_to_queue>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d1c4:	f3bf 8f5b 	dmb	ish
    d1c8:	68a3      	ldr	r3, [r4, #8]
    d1ca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    d1ce:	075b      	lsls	r3, r3, #29
		bt_mesh_beacon_ivu_initiator(true);
    d1d0:	f04f 0001 	mov.w	r0, #1
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    d1d4:	d507      	bpl.n	d1e6 <ivu_refresh+0x4e>
		bt_mesh_beacon_ivu_initiator(true);
    d1d6:	f7ff fd6b 	bl	ccb0 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    d1da:	6820      	ldr	r0, [r4, #0]
    d1dc:	2100      	movs	r1, #0
}
    d1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    d1e2:	f7ff bf71 	b.w	d0c8 <bt_mesh_net_iv_update>
}
    d1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_store_iv(true);
    d1ea:	f01e bd32 	b.w	2bc52 <bt_mesh_store_iv>
    d1ee:	bf00      	nop
    d1f0:	200015a8 	.word	0x200015a8
    d1f4:	a8c00000 	.word	0xa8c00000
    d1f8:	20001fd8 	.word	0x20001fd8

0000d1fc <bt_mesh_next_seq>:
{
    d1fc:	b538      	push	{r3, r4, r5, lr}
	uint32_t seq = bt_mesh.seq++;
    d1fe:	4c10      	ldr	r4, [pc, #64]	; (d240 <bt_mesh_next_seq+0x44>)
    d200:	6865      	ldr	r5, [r4, #4]
    d202:	1c6b      	adds	r3, r5, #1
    d204:	6063      	str	r3, [r4, #4]
		bt_mesh_store_seq();
    d206:	f003 fd5b 	bl	10cc0 <bt_mesh_store_seq>
    d20a:	f3bf 8f5b 	dmb	ish
    d20e:	68a3      	ldr	r3, [r4, #8]
    d210:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS) &&
    d214:	f3c3 0080 	ubfx	r0, r3, #2, #1
    d218:	075b      	lsls	r3, r3, #29
    d21a:	d40e      	bmi.n	d23a <bt_mesh_next_seq+0x3e>
    d21c:	6862      	ldr	r2, [r4, #4]
    d21e:	4b09      	ldr	r3, [pc, #36]	; (d244 <bt_mesh_next_seq+0x48>)
    d220:	429a      	cmp	r2, r3
    d222:	d90a      	bls.n	d23a <bt_mesh_next_seq+0x3e>
	    bt_mesh_subnet_get(BT_MESH_KEY_PRIMARY)) {
    d224:	f000 fb4c 	bl	d8c0 <bt_mesh_subnet_get>
	    bt_mesh.seq > IV_UPDATE_SEQ_LIMIT &&
    d228:	b138      	cbz	r0, d23a <bt_mesh_next_seq+0x3e>
		bt_mesh_beacon_ivu_initiator(true);
    d22a:	2001      	movs	r0, #1
    d22c:	f7ff fd40 	bl	ccb0 <bt_mesh_beacon_ivu_initiator>
		bt_mesh_net_iv_update(bt_mesh.iv_index + 1, true);
    d230:	6820      	ldr	r0, [r4, #0]
    d232:	2101      	movs	r1, #1
    d234:	4408      	add	r0, r1
    d236:	f7ff ff47 	bl	d0c8 <bt_mesh_net_iv_update>
}
    d23a:	4628      	mov	r0, r5
    d23c:	bd38      	pop	{r3, r4, r5, pc}
    d23e:	bf00      	nop
    d240:	200015a8 	.word	0x200015a8
    d244:	007a1200 	.word	0x007a1200

0000d248 <net_header_encode>:
{
    d248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bool ctl = (tx->ctx->app_idx == BT_MESH_KEY_UNUSED);
    d24a:	6843      	ldr	r3, [r0, #4]
    d24c:	885f      	ldrh	r7, [r3, #2]
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    d24e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d252:	429f      	cmp	r7, r3
{
    d254:	4605      	mov	r5, r0
    d256:	460e      	mov	r6, r1
    d258:	4614      	mov	r4, r2
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    d25a:	d007      	beq.n	d26c <net_header_encode+0x24>
	} else if (net_buf_simple_tailroom(buf) < 4) {
    d25c:	4620      	mov	r0, r4
    d25e:	f01e ffc8 	bl	2c1f2 <net_buf_simple_tailroom>
    d262:	2803      	cmp	r0, #3
    d264:	d808      	bhi.n	d278 <net_header_encode+0x30>
		return -EINVAL;
    d266:	f06f 0015 	mvn.w	r0, #21
}
    d26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ctl && net_buf_simple_tailroom(buf) < 8) {
    d26c:	4610      	mov	r0, r2
    d26e:	f01e ffc0 	bl	2c1f2 <net_buf_simple_tailroom>
    d272:	2807      	cmp	r0, #7
    d274:	d8f2      	bhi.n	d25c <net_header_encode+0x14>
    d276:	e7f6      	b.n	d266 <net_header_encode+0x1e>
	net_buf_simple_push_be16(buf, tx->ctx->addr);
    d278:	686b      	ldr	r3, [r5, #4]
    d27a:	4620      	mov	r0, r4
    d27c:	8899      	ldrh	r1, [r3, #4]
    d27e:	f01e ff5b 	bl	2c138 <net_buf_simple_push_be16>
	net_buf_simple_push_be16(buf, tx->src);
    d282:	8929      	ldrh	r1, [r5, #8]
    d284:	4620      	mov	r0, r4
    d286:	f01e ff57 	bl	2c138 <net_buf_simple_push_be16>
	net_buf_simple_push_be24(buf, bt_mesh_next_seq());
    d28a:	f7ff ffb7 	bl	d1fc <bt_mesh_next_seq>
    d28e:	4601      	mov	r1, r0
    d290:	4620      	mov	r0, r4
    d292:	f01e ff66 	bl	2c162 <net_buf_simple_push_be24>
	if (ctl) {
    d296:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d29a:	429f      	cmp	r7, r3
    d29c:	686b      	ldr	r3, [r5, #4]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    d29e:	7ad9      	ldrb	r1, [r3, #11]
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    d2a0:	4620      	mov	r0, r4
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl | 0x80);
    d2a2:	bf08      	it	eq
    d2a4:	f041 0180 	orreq.w	r1, r1, #128	; 0x80
		net_buf_simple_push_u8(buf, tx->ctx->send_ttl);
    d2a8:	f01e ff52 	bl	2c150 <net_buf_simple_push_u8>
	net_buf_simple_push_u8(buf, (nid | (BT_MESH_NET_IVI_TX & 1) << 7));
    d2ac:	4b08      	ldr	r3, [pc, #32]	; (d2d0 <net_header_encode+0x88>)
    d2ae:	7819      	ldrb	r1, [r3, #0]
    d2b0:	f3bf 8f5b 	dmb	ish
    d2b4:	689b      	ldr	r3, [r3, #8]
    d2b6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    d2ba:	f3c3 0380 	ubfx	r3, r3, #2, #1
    d2be:	1ac9      	subs	r1, r1, r3
    d2c0:	ea46 11c1 	orr.w	r1, r6, r1, lsl #7
    d2c4:	4620      	mov	r0, r4
    d2c6:	b2c9      	uxtb	r1, r1
    d2c8:	f01e ff42 	bl	2c150 <net_buf_simple_push_u8>
	return 0;
    d2cc:	2000      	movs	r0, #0
    d2ce:	e7cc      	b.n	d26a <net_header_encode+0x22>
    d2d0:	200015a8 	.word	0x200015a8

0000d2d4 <bt_mesh_net_send>:
{
    d2d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d2d8:	6844      	ldr	r4, [r0, #4]
{
    d2da:	4698      	mov	r8, r3
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d2dc:	7ae3      	ldrb	r3, [r4, #11]
    d2de:	2bff      	cmp	r3, #255	; 0xff
{
    d2e0:	4605      	mov	r5, r0
    d2e2:	460e      	mov	r6, r1
    d2e4:	4617      	mov	r7, r2
	if (tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    d2e6:	d102      	bne.n	d2ee <bt_mesh_net_send+0x1a>
		tx->ctx->send_ttl = bt_mesh_default_ttl_get();
    d2e8:	f002 fd58 	bl	fd9c <bt_mesh_default_ttl_get>
    d2ec:	72e0      	strb	r0, [r4, #11]
	tx->friend_cred = 0U;
    d2ee:	7aeb      	ldrb	r3, [r5, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    d2f0:	f8d5 a000 	ldr.w	sl, [r5]
	tx->friend_cred = 0U;
    d2f4:	f36f 0300 	bfc	r3, #0, #1
    d2f8:	72eb      	strb	r3, [r5, #11]
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    d2fa:	f89a 901e 	ldrb.w	r9, [sl, #30]
    d2fe:	f1a9 0302 	sub.w	r3, r9, #2
    d302:	f1d3 0900 	rsbs	r9, r3, #0
    d306:	eb49 0903 	adc.w	r9, r9, r3
	err = net_header_encode(tx, cred->nid, &buf->b);
    d30a:	234a      	movs	r3, #74	; 0x4a
    d30c:	fb03 a309 	mla	r3, r3, r9, sl
    d310:	f106 0b08 	add.w	fp, r6, #8
    d314:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
    d318:	465a      	mov	r2, fp
    d31a:	4628      	mov	r0, r5
    d31c:	f7ff ff94 	bl	d248 <net_header_encode>
	if (err) {
    d320:	4604      	mov	r4, r0
    d322:	2800      	cmp	r0, #0
    d324:	d172      	bne.n	d40c <bt_mesh_net_send+0x138>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    d326:	686b      	ldr	r3, [r5, #4]
    d328:	8898      	ldrh	r0, [r3, #4]
    d32a:	f01d f849 	bl	2a3c0 <bt_mesh_fixed_group_match>
    d32e:	b170      	cbz	r0, d34e <bt_mesh_net_send+0x7a>
		err = loopback(tx, buf->data, buf->len);
    d330:	89b3      	ldrh	r3, [r6, #12]
    d332:	68b1      	ldr	r1, [r6, #8]
    d334:	9300      	str	r3, [sp, #0]
	buf = net_buf_alloc(&loopback_buf_pool, K_NO_WAIT);
    d336:	4839      	ldr	r0, [pc, #228]	; (d41c <bt_mesh_net_send+0x148>)
		err = loopback(tx, buf->data, buf->len);
    d338:	9101      	str	r1, [sp, #4]
	buf = net_buf_alloc(&loopback_buf_pool, K_NO_WAIT);
    d33a:	2300      	movs	r3, #0
    d33c:	2200      	movs	r2, #0
    d33e:	f01e fdfa 	bl	2bf36 <net_buf_alloc_fixed>
	if (!buf) {
    d342:	9901      	ldr	r1, [sp, #4]
    d344:	4603      	mov	r3, r0
    d346:	b978      	cbnz	r0, d368 <bt_mesh_net_send+0x94>
		return -ENOMEM;
    d348:	f06f 040b 	mvn.w	r4, #11
    d34c:	e02f      	b.n	d3ae <bt_mesh_net_send+0xda>
	    bt_mesh_elem_find(tx->ctx->addr)) {
    d34e:	686b      	ldr	r3, [r5, #4]
    d350:	8898      	ldrh	r0, [r3, #4]
    d352:	f001 ff9d 	bl	f290 <bt_mesh_elem_find>
	if (bt_mesh_fixed_group_match(tx->ctx->addr) ||
    d356:	2800      	cmp	r0, #0
    d358:	d1ea      	bne.n	d330 <bt_mesh_net_send+0x5c>
	if (tx->ctx->send_ttl == 1U) {
    d35a:	686b      	ldr	r3, [r5, #4]
    d35c:	7adb      	ldrb	r3, [r3, #11]
    d35e:	2b01      	cmp	r3, #1
    d360:	d12d      	bne.n	d3be <bt_mesh_net_send+0xea>
		err = -EINVAL;
    d362:	f06f 0415 	mvn.w	r4, #21
    d366:	e051      	b.n	d40c <bt_mesh_net_send+0x138>
	LOOPBACK_BUF_SUB(buf) = tx->sub;
    d368:	682a      	ldr	r2, [r5, #0]
    d36a:	6142      	str	r2, [r0, #20]
	net_buf_add_mem(buf, data, len);
    d36c:	9a00      	ldr	r2, [sp, #0]
    d36e:	9300      	str	r3, [sp, #0]
    d370:	3008      	adds	r0, #8
    d372:	f01e fe98 	bl	2c0a6 <net_buf_simple_add_mem>
	net_buf_slist_put(&bt_mesh.local_queue, buf);
    d376:	9b00      	ldr	r3, [sp, #0]
    d378:	4829      	ldr	r0, [pc, #164]	; (d420 <bt_mesh_net_send+0x14c>)
    d37a:	4619      	mov	r1, r3
    d37c:	f01e fe04 	bl	2bf88 <net_buf_slist_put>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d380:	f3bf 8f5b 	dmb	ish
    d384:	4927      	ldr	r1, [pc, #156]	; (d424 <bt_mesh_net_send+0x150>)
    d386:	e851 3f00 	ldrex	r3, [r1]
    d38a:	f043 0201 	orr.w	r2, r3, #1
    d38e:	e841 2000 	strex	r0, r2, [r1]
    d392:	2800      	cmp	r0, #0
    d394:	d1f7      	bne.n	d386 <bt_mesh_net_send+0xb2>
    d396:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d39a:	f013 0301 	ands.w	r3, r3, #1
    d39e:	d106      	bne.n	d3ae <bt_mesh_net_send+0xda>
		k_queue_append(&work_q->queue, work);
    d3a0:	4821      	ldr	r0, [pc, #132]	; (d428 <bt_mesh_net_send+0x154>)
    d3a2:	9300      	str	r3, [sp, #0]
    d3a4:	3908      	subs	r1, #8
    d3a6:	f01f ff58 	bl	2d25a <k_queue_append>
	return 0;
    d3aa:	9b00      	ldr	r3, [sp, #0]
    d3ac:	461c      	mov	r4, r3
		if (BT_MESH_ADDR_IS_UNICAST(tx->ctx->addr) ||
    d3ae:	686b      	ldr	r3, [r5, #4]
    d3b0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
    d3b4:	2a00      	cmp	r2, #0
    d3b6:	dc1c      	bgt.n	d3f2 <bt_mesh_net_send+0x11e>
    d3b8:	7adb      	ldrb	r3, [r3, #11]
    d3ba:	2b01      	cmp	r3, #1
    d3bc:	d019      	beq.n	d3f2 <bt_mesh_net_send+0x11e>
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    d3be:	4b1b      	ldr	r3, [pc, #108]	; (d42c <bt_mesh_net_send+0x158>)
    d3c0:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d3c2:	f3bf 8f5b 	dmb	ish
    d3c6:	689a      	ldr	r2, [r3, #8]
    d3c8:	f3bf 8f5b 	dmb	ish
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    d3cc:	214a      	movs	r1, #74	; 0x4a
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    d3ce:	f3c2 0280 	ubfx	r2, r2, #2, #1
	return &tx->sub->keys[SUBNET_KEY_TX_IDX(tx->sub)].msg;
    d3d2:	fb01 a109 	mla	r1, r1, r9, sl
	err = net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_TX, false);
    d3d6:	1a82      	subs	r2, r0, r2
    d3d8:	2300      	movs	r3, #0
    d3da:	313d      	adds	r1, #61	; 0x3d
    d3dc:	4658      	mov	r0, fp
    d3de:	f01c fb2a 	bl	29a36 <net_encrypt>
	if (err) {
    d3e2:	4604      	mov	r4, r0
    d3e4:	b990      	cbnz	r0, d40c <bt_mesh_net_send+0x138>
	bt_mesh_adv_send(buf, cb, cb_data);
    d3e6:	4642      	mov	r2, r8
    d3e8:	4639      	mov	r1, r7
    d3ea:	4630      	mov	r0, r6
    d3ec:	f7ff fac4 	bl	c978 <bt_mesh_adv_send>
    d3f0:	e00c      	b.n	d40c <bt_mesh_net_send+0x138>
			if (!err) {
    d3f2:	b95c      	cbnz	r4, d40c <bt_mesh_net_send+0x138>
			      struct bt_mesh_net_rx *rx);

static inline void send_cb_finalize(const struct bt_mesh_send_cb *cb,
				    void *cb_data)
{
	if (!cb) {
    d3f4:	b157      	cbz	r7, d40c <bt_mesh_net_send+0x138>
		return;
	}

	if (cb->start) {
    d3f6:	683b      	ldr	r3, [r7, #0]
    d3f8:	b11b      	cbz	r3, d402 <bt_mesh_net_send+0x12e>
		cb->start(0, 0, cb_data);
    d3fa:	4642      	mov	r2, r8
    d3fc:	4621      	mov	r1, r4
    d3fe:	4620      	mov	r0, r4
    d400:	4798      	blx	r3
	}

	if (cb->end) {
    d402:	687b      	ldr	r3, [r7, #4]
    d404:	b113      	cbz	r3, d40c <bt_mesh_net_send+0x138>
		cb->end(0, cb_data);
    d406:	4641      	mov	r1, r8
    d408:	2000      	movs	r0, #0
    d40a:	4798      	blx	r3
	net_buf_unref(buf);
    d40c:	4630      	mov	r0, r6
    d40e:	f012 fcbd 	bl	1fd8c <net_buf_unref>
}
    d412:	4620      	mov	r0, r4
    d414:	b003      	add	sp, #12
    d416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d41a:	bf00      	nop
    d41c:	20000f4c 	.word	0x20000f4c
    d420:	200015c0 	.word	0x200015c0
    d424:	200015bc 	.word	0x200015bc
    d428:	20001fd8 	.word	0x20001fd8
    d42c:	200015a8 	.word	0x200015a8

0000d430 <bt_mesh_net_loopback_clear>:
{
    d430:	b573      	push	{r0, r1, r4, r5, r6, lr}
	list->head = NULL;
    d432:	2300      	movs	r3, #0
	list->tail = NULL;
    d434:	e9cd 3300 	strd	r3, r3, [sp]
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    d438:	4d0e      	ldr	r5, [pc, #56]	; (d474 <bt_mesh_net_loopback_clear+0x44>)
{
    d43a:	4604      	mov	r4, r0
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    d43c:	f64f 76ff 	movw	r6, #65535	; 0xffff
	while ((buf = net_buf_slist_get(&bt_mesh.local_queue))) {
    d440:	480c      	ldr	r0, [pc, #48]	; (d474 <bt_mesh_net_loopback_clear+0x44>)
    d442:	f01e fdbe 	bl	2bfc2 <net_buf_slist_get>
    d446:	b930      	cbnz	r0, d456 <bt_mesh_net_loopback_clear+0x26>
	bt_mesh.local_queue = new_list;
    d448:	ab02      	add	r3, sp, #8
    d44a:	e913 0003 	ldmdb	r3, {r0, r1}
    d44e:	e885 0003 	stmia.w	r5, {r0, r1}
}
    d452:	b002      	add	sp, #8
    d454:	bd70      	pop	{r4, r5, r6, pc}
		if (net_idx == BT_MESH_KEY_ANY || net_idx == sub->net_idx) {
    d456:	42b4      	cmp	r4, r6
    d458:	d003      	beq.n	d462 <bt_mesh_net_loopback_clear+0x32>
    d45a:	6943      	ldr	r3, [r0, #20]
    d45c:	8b9b      	ldrh	r3, [r3, #28]
    d45e:	42a3      	cmp	r3, r4
    d460:	d102      	bne.n	d468 <bt_mesh_net_loopback_clear+0x38>
			net_buf_unref(buf);
    d462:	f012 fc93 	bl	1fd8c <net_buf_unref>
    d466:	e7eb      	b.n	d440 <bt_mesh_net_loopback_clear+0x10>
			net_buf_slist_put(&new_list, buf);
    d468:	4601      	mov	r1, r0
    d46a:	4668      	mov	r0, sp
    d46c:	f01e fd8c 	bl	2bf88 <net_buf_slist_put>
    d470:	e7e6      	b.n	d440 <bt_mesh_net_loopback_clear+0x10>
    d472:	bf00      	nop
    d474:	200015c0 	.word	0x200015c0

0000d478 <bt_mesh_net_decode>:
{
    d478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d47a:	461f      	mov	r7, r3
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    d47c:	8883      	ldrh	r3, [r0, #4]
    d47e:	2b11      	cmp	r3, #17
{
    d480:	460e      	mov	r6, r1
    d482:	4614      	mov	r4, r2
	if (in->len < BT_MESH_NET_MIN_PDU_LEN) {
    d484:	d976      	bls.n	d574 <bt_mesh_net_decode+0xfc>
	if (net_if == BT_MESH_NET_IF_ADV && check_dup(in)) {
    d486:	bba9      	cbnz	r1, d4f4 <bt_mesh_net_decode+0x7c>
	return buf->data + buf->len;
    d488:	6805      	ldr	r5, [r0, #0]
    d48a:	441d      	add	r5, r3
    d48c:	f815 1c07 	ldrb.w	r1, [r5, #-7]
    d490:	f815 3c08 	ldrb.w	r3, [r5, #-8]
    d494:	f815 2c06 	ldrb.w	r2, [r5, #-6]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    d498:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    d49c:	f815 1c05 	ldrb.w	r1, [r5, #-5]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    d4a0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    d4a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
	return ((uint16_t)src[0] << 8) | src[1];
    d4a8:	f815 2c04 	ldrb.w	r2, [r5, #-4]
    d4ac:	f815 3c03 	ldrb.w	r3, [r5, #-3]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    d4b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return ((uint16_t)src[0] << 8) | src[1];
    d4b4:	f815 2c02 	ldrb.w	r2, [r5, #-2]
    d4b8:	f815 5c01 	ldrb.w	r5, [r5, #-1]
	return ((uint32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
    d4bc:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    d4c0:	4a31      	ldr	r2, [pc, #196]	; (d588 <bt_mesh_net_decode+0x110>)
    d4c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
	val = sys_get_be32(tail - 4) ^ sys_get_be32(tail - 8);
    d4c6:	404d      	eors	r5, r1
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    d4c8:	4633      	mov	r3, r6
    d4ca:	4611      	mov	r1, r2
		if (dup_cache[i] == val) {
    d4cc:	f852 cb04 	ldr.w	ip, [r2], #4
    d4d0:	4565      	cmp	r5, ip
    d4d2:	d04f      	beq.n	d574 <bt_mesh_net_decode+0xfc>
	for (i = 0; i < ARRAY_SIZE(dup_cache); i++) {
    d4d4:	3301      	adds	r3, #1
    d4d6:	2b1e      	cmp	r3, #30
    d4d8:	d1f8      	bne.n	d4cc <bt_mesh_net_decode+0x54>
	dup_cache[dup_cache_next++] = val;
    d4da:	f8df c0bc 	ldr.w	ip, [pc, #188]	; d598 <bt_mesh_net_decode+0x120>
    d4de:	f8dc 2000 	ldr.w	r2, [ip]
    d4e2:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
    d4e6:	3201      	adds	r2, #1
	dup_cache_next %= ARRAY_SIZE(dup_cache);
    d4e8:	fb92 f1f3 	sdiv	r1, r2, r3
    d4ec:	fb03 2311 	mls	r3, r3, r1, r2
    d4f0:	f8cc 3000 	str.w	r3, [ip]
	rx->net_if = net_if;
    d4f4:	7d23      	ldrb	r3, [r4, #20]
    d4f6:	f366 1305 	bfi	r3, r6, #4, #2
    d4fa:	7523      	strb	r3, [r4, #20]
	if (!bt_mesh_net_cred_find(rx, in, out, net_decrypt)) {
    d4fc:	4601      	mov	r1, r0
    d4fe:	4b23      	ldr	r3, [pc, #140]	; (d58c <bt_mesh_net_decode+0x114>)
    d500:	463a      	mov	r2, r7
    d502:	4620      	mov	r0, r4
    d504:	f000 fa88 	bl	da18 <bt_mesh_net_cred_find>
    d508:	2800      	cmp	r0, #0
    d50a:	d036      	beq.n	d57a <bt_mesh_net_decode+0x102>
	rx->ctx.recv_ttl = TTL(out->data);
    d50c:	6839      	ldr	r1, [r7, #0]
	rx->ctl = CTL(out->data);
    d50e:	7d22      	ldrb	r2, [r4, #20]
	rx->ctx.app_idx = BT_MESH_KEY_UNUSED;
    d510:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d514:	80e3      	strh	r3, [r4, #6]
	rx->ctx.recv_ttl = TTL(out->data);
    d516:	784b      	ldrb	r3, [r1, #1]
    d518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d51c:	7363      	strb	r3, [r4, #13]
	if (rx->ctx.recv_ttl == 0U) {
    d51e:	3b00      	subs	r3, #0
    d520:	bf18      	it	ne
    d522:	2301      	movne	r3, #1
    d524:	425b      	negs	r3, r3
    d526:	73e3      	strb	r3, [r4, #15]
	rx->ctl = CTL(out->data);
    d528:	784b      	ldrb	r3, [r1, #1]
    d52a:	09db      	lsrs	r3, r3, #7
    d52c:	f363 02c3 	bfi	r2, r3, #3, #1
    d530:	7522      	strb	r2, [r4, #20]
	rx->seq = SEQ(out->data);
    d532:	1c88      	adds	r0, r1, #2
    d534:	f01c fa77 	bl	29a26 <sys_get_be24>
    d538:	6120      	str	r0, [r4, #16]
	return ((uint16_t)src[0] << 8) | src[1];
    d53a:	79ca      	ldrb	r2, [r1, #7]
    d53c:	7a0b      	ldrb	r3, [r1, #8]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    d53e:	2e03      	cmp	r6, #3
    d540:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rx->ctx.recv_dst = DST(out->data);
    d544:	8163      	strh	r3, [r4, #10]
	if (net_if != BT_MESH_NET_IF_PROXY_CFG &&
    d546:	d000      	beq.n	d54a <bt_mesh_net_decode+0xd2>
    d548:	b1d3      	cbz	r3, d580 <bt_mesh_net_decode+0x108>
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    d54a:	8922      	ldrh	r2, [r4, #8]
	rx->msg_cache_idx = msg_cache_next++;
    d54c:	4910      	ldr	r1, [pc, #64]	; (d590 <bt_mesh_net_decode+0x118>)
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    d54e:	f3c2 020e 	ubfx	r2, r2, #0, #15
	rx->msg_cache_idx = msg_cache_next++;
    d552:	880b      	ldrh	r3, [r1, #0]
    d554:	82e3      	strh	r3, [r4, #22]
	msg_cache[rx->msg_cache_idx].src = rx->ctx.addr;
    d556:	ea42 30c0 	orr.w	r0, r2, r0, lsl #15
    d55a:	4a0e      	ldr	r2, [pc, #56]	; (d594 <bt_mesh_net_decode+0x11c>)
    d55c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	rx->msg_cache_idx = msg_cache_next++;
    d560:	3301      	adds	r3, #1
	msg_cache_next %= ARRAY_SIZE(msg_cache);
    d562:	201e      	movs	r0, #30
    d564:	b29b      	uxth	r3, r3
    d566:	fbb3 f2f0 	udiv	r2, r3, r0
    d56a:	fb00 3312 	mls	r3, r0, r2, r3
    d56e:	800b      	strh	r3, [r1, #0]
	return 0;
    d570:	2000      	movs	r0, #0
}
    d572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    d574:	f06f 0015 	mvn.w	r0, #21
    d578:	e7fb      	b.n	d572 <bt_mesh_net_decode+0xfa>
		return -ENOENT;
    d57a:	f06f 0001 	mvn.w	r0, #1
    d57e:	e7f8      	b.n	d572 <bt_mesh_net_decode+0xfa>
		return -EBADMSG;
    d580:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    d584:	e7f5      	b.n	d572 <bt_mesh_net_decode+0xfa>
    d586:	bf00      	nop
    d588:	2000249c 	.word	0x2000249c
    d58c:	0000cf45 	.word	0x0000cf45
    d590:	2000903e 	.word	0x2000903e
    d594:	20002518 	.word	0x20002518
    d598:	20002514 	.word	0x20002514

0000d59c <bt_mesh_net_recv>:
{
    d59c:	b570      	push	{r4, r5, r6, lr}
    d59e:	b092      	sub	sp, #72	; 0x48
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d5a0:	ab0a      	add	r3, sp, #40	; 0x28
{
    d5a2:	4616      	mov	r6, r2
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d5a4:	f44f 12e8 	mov.w	r2, #1900544	; 0x1d0000
    d5a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
{
    d5ac:	460d      	mov	r5, r1
    d5ae:	4604      	mov	r4, r0
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    d5b0:	2218      	movs	r2, #24
    d5b2:	2100      	movs	r1, #0
    d5b4:	a804      	add	r0, sp, #16
	NET_BUF_SIMPLE_DEFINE(buf, 29);
    d5b6:	9301      	str	r3, [sp, #4]
	struct bt_mesh_net_rx rx = { .ctx.recv_rssi = rssi };
    d5b8:	f019 fa1e 	bl	269f8 <memset>
    d5bc:	f88d 501c 	strb.w	r5, [sp, #28]
	if (!bt_mesh_is_provisioned()) {
    d5c0:	f7ff f85a 	bl	c678 <bt_mesh_is_provisioned>
    d5c4:	2800      	cmp	r0, #0
    d5c6:	d05c      	beq.n	d682 <bt_mesh_net_recv+0xe6>
	if (bt_mesh_net_decode(data, net_if, &rx, &buf)) {
    d5c8:	ab01      	add	r3, sp, #4
    d5ca:	aa04      	add	r2, sp, #16
    d5cc:	4631      	mov	r1, r6
    d5ce:	4620      	mov	r0, r4
    d5d0:	f7ff ff52 	bl	d478 <bt_mesh_net_decode>
    d5d4:	2800      	cmp	r0, #0
    d5d6:	d154      	bne.n	d682 <bt_mesh_net_recv+0xe6>
	state->offset = net_buf_simple_headroom(buf);
    d5d8:	a801      	add	r0, sp, #4
    d5da:	f01e fe06 	bl	2c1ea <net_buf_simple_headroom>
    d5de:	4604      	mov	r4, r0
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d5e0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
	state->len = buf->len;
    d5e4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
    d5e8:	f01c feea 	bl	2a3c0 <bt_mesh_fixed_group_match>
    d5ec:	2800      	cmp	r0, #0
    d5ee:	d142      	bne.n	d676 <bt_mesh_net_recv+0xda>
			  bt_mesh_elem_find(rx.ctx.recv_dst));
    d5f0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
    d5f4:	f001 fe4c 	bl	f290 <bt_mesh_elem_find>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d5f8:	3800      	subs	r0, #0
    d5fa:	bf18      	it	ne
    d5fc:	2001      	movne	r0, #1
    d5fe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (bt_mesh_trans_recv(&buf, &rx, rssi) == -EAGAIN) {
    d602:	462a      	mov	r2, r5
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d604:	f360 1386 	bfi	r3, r0, #6, #1
	if (bt_mesh_trans_recv(&buf, &rx, rssi) == -EAGAIN) {
    d608:	a904      	add	r1, sp, #16
    d60a:	a801      	add	r0, sp, #4
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d60c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	if (bt_mesh_trans_recv(&buf, &rx, rssi) == -EAGAIN) {
    d610:	f001 f8ae 	bl	e770 <bt_mesh_trans_recv>
    d614:	300b      	adds	r0, #11
    d616:	d10a      	bne.n	d62e <bt_mesh_net_recv+0x92>
		msg_cache[rx.msg_cache_idx].src = BT_MESH_ADDR_UNASSIGNED;
    d618:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
    d61c:	4a4d      	ldr	r2, [pc, #308]	; (d754 <bt_mesh_net_recv+0x1b8>)
    d61e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
    d622:	f36f 010e 	bfc	r1, #0, #15
    d626:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		msg_cache_next = rx.msg_cache_idx;
    d62a:	4a4b      	ldr	r2, [pc, #300]	; (d758 <bt_mesh_net_recv+0x1bc>)
    d62c:	8013      	strh	r3, [r2, #0]
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    d62e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
    d632:	2b00      	cmp	r3, #0
    d634:	dd04      	ble.n	d640 <bt_mesh_net_recv+0xa4>
	    (!rx.local_match && !rx.friend_match)) {
    d636:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	if (!BT_MESH_ADDR_IS_UNICAST(rx.ctx.recv_dst) ||
    d63a:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    d63e:	d120      	bne.n	d682 <bt_mesh_net_recv+0xe6>
	buf->data = buf->__buf + state->offset;
    d640:	9803      	ldr	r0, [sp, #12]
	if (rx->ctx.recv_ttl <= 1U) {
    d642:	f89d 301d 	ldrb.w	r3, [sp, #29]
	buf->len = state->len;
    d646:	f8ad 6008 	strh.w	r6, [sp, #8]
	buf->data = buf->__buf + state->offset;
    d64a:	fa10 f484 	uxtah	r4, r0, r4
    d64e:	2b01      	cmp	r3, #1
    d650:	9401      	str	r4, [sp, #4]
    d652:	d916      	bls.n	d682 <bt_mesh_net_recv+0xe6>
	if (rx->net_if == BT_MESH_NET_IF_ADV &&
    d654:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d658:	f013 0f34 	tst.w	r3, #52	; 0x34
    d65c:	d108      	bne.n	d670 <bt_mesh_net_recv+0xd4>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    d65e:	f002 fb6f 	bl	fd40 <bt_mesh_relay_get>
	    !rx->friend_cred &&
    d662:	2801      	cmp	r0, #1
    d664:	d109      	bne.n	d67a <bt_mesh_net_recv+0xde>
	if (rx->net_if == BT_MESH_NET_IF_ADV && !rx->friend_cred) {
    d666:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d66a:	f013 0f34 	tst.w	r3, #52	; 0x34
    d66e:	d00a      	beq.n	d686 <bt_mesh_net_recv+0xea>
		transmit = bt_mesh_net_transmit_get();
    d670:	f002 fb5e 	bl	fd30 <bt_mesh_net_transmit_get>
    d674:	e009      	b.n	d68a <bt_mesh_net_recv+0xee>
	rx.local_match = (bt_mesh_fixed_group_match(rx.ctx.recv_dst) ||
    d676:	2001      	movs	r0, #1
    d678:	e7c1      	b.n	d5fe <bt_mesh_net_recv+0x62>
	    bt_mesh_gatt_proxy_get() != BT_MESH_GATT_PROXY_ENABLED) {
    d67a:	f002 fb85 	bl	fd88 <bt_mesh_gatt_proxy_get>
	    bt_mesh_relay_get() != BT_MESH_RELAY_ENABLED &&
    d67e:	2801      	cmp	r0, #1
    d680:	d0f1      	beq.n	d666 <bt_mesh_net_recv+0xca>
}
    d682:	b012      	add	sp, #72	; 0x48
    d684:	bd70      	pop	{r4, r5, r6, pc}
		transmit = bt_mesh_relay_retransmit_get();
    d686:	f002 fb6f 	bl	fd68 <bt_mesh_relay_retransmit_get>
		transmit = bt_mesh_net_transmit_get();
    d68a:	4601      	mov	r1, r0
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, transmit, K_NO_WAIT);
    d68c:	2200      	movs	r2, #0
    d68e:	2300      	movs	r3, #0
    d690:	2001      	movs	r0, #1
    d692:	f7ff f961 	bl	c958 <bt_mesh_adv_create>
	if (!buf) {
    d696:	4604      	mov	r4, r0
    d698:	2800      	cmp	r0, #0
    d69a:	d0f2      	beq.n	d682 <bt_mesh_net_recv+0xe6>
	sbuf->data[1] &= 0x80;
    d69c:	9a01      	ldr	r2, [sp, #4]
    d69e:	7853      	ldrb	r3, [r2, #1]
    d6a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    d6a4:	7053      	strb	r3, [r2, #1]
	sbuf->data[1] |= rx->ctx.recv_ttl - 1U;
    d6a6:	9a01      	ldr	r2, [sp, #4]
    d6a8:	f89d 301d 	ldrb.w	r3, [sp, #29]
    d6ac:	7851      	ldrb	r1, [r2, #1]
    d6ae:	3b01      	subs	r3, #1
    d6b0:	430b      	orrs	r3, r1
    d6b2:	7053      	strb	r3, [r2, #1]
	net_buf_add_mem(buf, sbuf->data, sbuf->len);
    d6b4:	f100 0508 	add.w	r5, r0, #8
    d6b8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    d6bc:	9901      	ldr	r1, [sp, #4]
    d6be:	4628      	mov	r0, r5
    d6c0:	f01e fcf1 	bl	2c0a6 <net_buf_simple_add_mem>
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    d6c4:	9b04      	ldr	r3, [sp, #16]
    d6c6:	7f9a      	ldrb	r2, [r3, #30]
    d6c8:	1e90      	subs	r0, r2, #2
    d6ca:	4241      	negs	r1, r0
    d6cc:	4141      	adcs	r1, r0
    d6ce:	224a      	movs	r2, #74	; 0x4a
	if (rx->friend_cred) {
    d6d0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    d6d4:	434a      	muls	r2, r1
    d6d6:	f102 013d 	add.w	r1, r2, #61	; 0x3d
	if (rx->friend_cred) {
    d6da:	0746      	lsls	r6, r0, #29
	cred = &rx->sub->keys[SUBNET_KEY_TX_IDX(rx->sub)].msg;
    d6dc:	4419      	add	r1, r3
	if (rx->friend_cred) {
    d6de:	d50b      	bpl.n	d6f8 <bt_mesh_net_recv+0x15c>
		buf->data[0] &= 0x80; /* Clear everything except IVI */
    d6e0:	68a6      	ldr	r6, [r4, #8]
    d6e2:	7830      	ldrb	r0, [r6, #0]
    d6e4:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
    d6e8:	7030      	strb	r0, [r6, #0]
		buf->data[0] |= cred->nid;
    d6ea:	68a0      	ldr	r0, [r4, #8]
    d6ec:	4413      	add	r3, r2
    d6ee:	7802      	ldrb	r2, [r0, #0]
    d6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
    d6f4:	4313      	orrs	r3, r2
    d6f6:	7003      	strb	r3, [r0, #0]
	if (net_encrypt(&buf->b, cred, BT_MESH_NET_IVI_RX(rx), false)) {
    d6f8:	4b18      	ldr	r3, [pc, #96]	; (d75c <bt_mesh_net_recv+0x1c0>)
    d6fa:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    d6fe:	6818      	ldr	r0, [r3, #0]
    d700:	f002 0201 	and.w	r2, r2, #1
    d704:	1a82      	subs	r2, r0, r2
    d706:	2300      	movs	r3, #0
    d708:	4628      	mov	r0, r5
    d70a:	f01c f994 	bl	29a36 <net_encrypt>
    d70e:	b9c8      	cbnz	r0, d744 <bt_mesh_net_recv+0x1a8>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    d710:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
	switch (net_if) {
    d714:	f013 0f30 	tst.w	r3, #48	; 0x30
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    d718:	f3c3 1201 	ubfx	r2, r3, #4, #2
	switch (net_if) {
    d71c:	d006      	beq.n	d72c <bt_mesh_net_recv+0x190>
    d71e:	2a02      	cmp	r2, #2
    d720:	d014      	beq.n	d74c <bt_mesh_net_recv+0x1b0>
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    d722:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    d726:	075b      	lsls	r3, r3, #29
    d728:	d407      	bmi.n	d73a <bt_mesh_net_recv+0x19e>
done:
    d72a:	e00b      	b.n	d744 <bt_mesh_net_recv+0x1a8>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
    d72c:	f002 fb08 	bl	fd40 <bt_mesh_relay_get>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    d730:	1e42      	subs	r2, r0, #1
    d732:	4250      	negs	r0, r2
    d734:	4150      	adcs	r0, r2
	if (relay_to_adv(rx->net_if) || rx->friend_cred) {
    d736:	2800      	cmp	r0, #0
    d738:	d0f3      	beq.n	d722 <bt_mesh_net_recv+0x186>
		bt_mesh_adv_send(buf, NULL, NULL);
    d73a:	2200      	movs	r2, #0
    d73c:	4611      	mov	r1, r2
    d73e:	4620      	mov	r0, r4
    d740:	f7ff f91a 	bl	c978 <bt_mesh_adv_send>
	net_buf_unref(buf);
    d744:	4620      	mov	r0, r4
    d746:	f012 fb21 	bl	1fd8c <net_buf_unref>
    d74a:	e79a      	b.n	d682 <bt_mesh_net_recv+0xe6>
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
    d74c:	f002 fb1c 	bl	fd88 <bt_mesh_gatt_proxy_get>
    d750:	e7ee      	b.n	d730 <bt_mesh_net_recv+0x194>
    d752:	bf00      	nop
    d754:	20002518 	.word	0x20002518
    d758:	2000903e 	.word	0x2000903e
    d75c:	200015a8 	.word	0x200015a8

0000d760 <bt_mesh_net_init>:

void bt_mesh_net_init(void)
{
    d760:	b510      	push	{r4, lr}
	k_delayed_work_init(&bt_mesh.ivu_timer, ivu_refresh);
    d762:	4c06      	ldr	r4, [pc, #24]	; (d77c <bt_mesh_net_init+0x1c>)
    d764:	4906      	ldr	r1, [pc, #24]	; (d780 <bt_mesh_net_init+0x20>)
    d766:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d76a:	f01f ff1b 	bl	2d5a4 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d76e:	4a05      	ldr	r2, [pc, #20]	; (d784 <bt_mesh_net_init+0x24>)
    d770:	2300      	movs	r3, #0
    d772:	e9c4 2304 	strd	r2, r3, [r4, #16]
    d776:	60e3      	str	r3, [r4, #12]

	k_work_init(&bt_mesh.local_work, bt_mesh_net_local);
}
    d778:	bd10      	pop	{r4, pc}
    d77a:	bf00      	nop
    d77c:	200015a8 	.word	0x200015a8
    d780:	0000d199 	.word	0x0000d199
    d784:	0000ce79 	.word	0x0000ce79

0000d788 <subnet_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	},
};

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
    d788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    d78a:	4c06      	ldr	r4, [pc, #24]	; (d7a4 <subnet_evt+0x1c>)
    d78c:	4f06      	ldr	r7, [pc, #24]	; (d7a8 <subnet_evt+0x20>)
{
    d78e:	4605      	mov	r5, r0
    d790:	460e      	mov	r6, r1
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    d792:	42bc      	cmp	r4, r7
    d794:	d300      	bcc.n	d798 <subnet_evt+0x10>
		cb->evt_handler(sub, evt);
	}
}
    d796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(sub, evt);
    d798:	f854 3b04 	ldr.w	r3, [r4], #4
    d79c:	4631      	mov	r1, r6
    d79e:	4628      	mov	r0, r5
    d7a0:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_subnet_cb, cb) {
    d7a2:	e7f6      	b.n	d792 <subnet_evt+0xa>
    d7a4:	0002dbc4 	.word	0x0002dbc4
    d7a8:	0002dbcc 	.word	0x0002dbcc

0000d7ac <net_keys_create>:
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
}

static int net_keys_create(struct bt_mesh_subnet_keys *keys,
			   const uint8_t key[16])
{
    d7ac:	b530      	push	{r4, r5, lr}
    d7ae:	b085      	sub	sp, #20
	uint8_t p = 0;
    d7b0:	2300      	movs	r3, #0
    d7b2:	f88d 300f 	strb.w	r3, [sp, #15]
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    d7b6:	f100 0322 	add.w	r3, r0, #34	; 0x22
{
    d7ba:	460d      	mov	r5, r1
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    d7bc:	9301      	str	r3, [sp, #4]
    d7be:	f100 0312 	add.w	r3, r0, #18
{
    d7c2:	4604      	mov	r4, r0
	return bt_mesh_k2(key, p, p_len, &cred->nid, cred->enc, cred->privacy);
    d7c4:	9300      	str	r3, [sp, #0]
    d7c6:	2201      	movs	r2, #1
    d7c8:	f100 0311 	add.w	r3, r0, #17
    d7cc:	f10d 010f 	add.w	r1, sp, #15
    d7d0:	4628      	mov	r0, r5
    d7d2:	f001 fb05 	bl	ede0 <bt_mesh_k2>
	int err;

	err = msg_cred_create(&keys->msg, &p, 1, key);
	if (err) {
    d7d6:	b998      	cbnz	r0, d800 <net_keys_create+0x54>
		BT_ERR("Unable to generate NID, EncKey & PrivacyKey");
		return err;
	}

	memcpy(keys->net, key, 16);
    d7d8:	4629      	mov	r1, r5
    d7da:	2210      	movs	r2, #16
    d7dc:	1c60      	adds	r0, r4, #1
    d7de:	f019 f8e0 	bl	269a2 <memcpy>

	BT_DBG("NID 0x%02x EncKey %s", keys->msg.nid,
	       bt_hex(keys->msg.enc, 16));
	BT_DBG("PrivacyKey %s", bt_hex(keys->msg.privacy, 16));

	err = bt_mesh_k3(key, keys->net_id);
    d7e2:	f104 0132 	add.w	r1, r4, #50	; 0x32
    d7e6:	4628      	mov	r0, r5
    d7e8:	f001 fb52 	bl	ee90 <bt_mesh_k3>
	if (err) {
    d7ec:	b940      	cbnz	r0, d800 <net_keys_create+0x54>
}

static inline int bt_mesh_beacon_key(const uint8_t net_key[16],
				     uint8_t beacon_key[16])
{
	return bt_mesh_id128(net_key, "nkbk", beacon_key);
    d7ee:	4905      	ldr	r1, [pc, #20]	; (d804 <net_keys_create+0x58>)
    d7f0:	f104 023a 	add.w	r2, r4, #58	; 0x3a
    d7f4:	4628      	mov	r0, r5
    d7f6:	f001 fba1 	bl	ef3c <bt_mesh_id128>

	BT_DBG("IdentityKey %s", bt_hex(keys->identity, 16));
#endif /* GATT_PROXY */

	err = bt_mesh_beacon_key(key, keys->beacon);
	if (err) {
    d7fa:	b908      	cbnz	r0, d800 <net_keys_create+0x54>
		return err;
	}

	BT_DBG("BeaconKey %s", bt_hex(keys->beacon, 16));

	keys->valid = 1U;
    d7fc:	2301      	movs	r3, #1
    d7fe:	7023      	strb	r3, [r4, #0]

	return 0;
}
    d800:	b005      	add	sp, #20
    d802:	bd30      	pop	{r4, r5, pc}
    d804:	000334b2 	.word	0x000334b2

0000d808 <bt_mesh_net_flags>:
	if (sub && (sub->kr_phase == BT_MESH_KR_PHASE_2)) {
    d808:	b118      	cbz	r0, d812 <bt_mesh_net_flags+0xa>
    d80a:	7f80      	ldrb	r0, [r0, #30]
	uint8_t flags = 0x00;
    d80c:	1e82      	subs	r2, r0, #2
    d80e:	4250      	negs	r0, r2
    d810:	4150      	adcs	r0, r2
    d812:	4b05      	ldr	r3, [pc, #20]	; (d828 <bt_mesh_net_flags+0x20>)
    d814:	f3bf 8f5b 	dmb	ish
    d818:	681b      	ldr	r3, [r3, #0]
    d81a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS)) {
    d81e:	075b      	lsls	r3, r3, #29
		flags |= BT_MESH_NET_FLAG_IVU;
    d820:	bf48      	it	mi
    d822:	f040 0002 	orrmi.w	r0, r0, #2
}
    d826:	4770      	bx	lr
    d828:	200015b0 	.word	0x200015b0

0000d82c <bt_mesh_subnet_add>:

uint8_t bt_mesh_subnet_add(uint16_t net_idx, const uint8_t key[16])
{
    d82c:	b570      	push	{r4, r5, r6, lr}
		if (subnets[i].net_idx == net_idx) {
    d82e:	4d15      	ldr	r5, [pc, #84]	; (d884 <bt_mesh_subnet_add+0x58>)
    d830:	8bab      	ldrh	r3, [r5, #28]
{
    d832:	4606      	mov	r6, r0
		if (subnets[i].net_idx == net_idx) {
    d834:	429e      	cmp	r6, r3
{
    d836:	4608      	mov	r0, r1
		if (subnets[i].net_idx == net_idx) {
    d838:	d00b      	beq.n	d852 <bt_mesh_subnet_add+0x26>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d83a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d83e:	4293      	cmp	r3, r2
    d840:	d11e      	bne.n	d880 <bt_mesh_subnet_add+0x54>
		}

		return STATUS_SUCCESS;
	}

	err = net_keys_create(&sub->keys[0], key);
    d842:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    d846:	f7ff ffb1 	bl	d7ac <net_keys_create>
	if (err) {
    d84a:	4604      	mov	r4, r0
    d84c:	b158      	cbz	r0, d866 <bt_mesh_subnet_add+0x3a>
		return STATUS_UNSPECIFIED;
    d84e:	2010      	movs	r0, #16
    d850:	e008      	b.n	d864 <bt_mesh_subnet_add+0x38>
		if (memcmp(key, sub->keys[0].net, 16)) {
    d852:	2210      	movs	r2, #16
    d854:	f105 012d 	add.w	r1, r5, #45	; 0x2d
    d858:	f019 f893 	bl	26982 <memcmp>
    d85c:	2800      	cmp	r0, #0
		return STATUS_SUCCESS;
    d85e:	bf14      	ite	ne
    d860:	2006      	movne	r0, #6
    d862:	2000      	moveq	r0, #0
		BT_DBG("Storing NetKey persistently");
		bt_mesh_store_subnet(sub->net_idx);
	}

	return STATUS_SUCCESS;
}
    d864:	bd70      	pop	{r4, r5, r6, pc}
	sub->kr_phase = BT_MESH_KR_NORMAL;
    d866:	f44f 7300 	mov.w	r3, #512	; 0x200
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    d86a:	4601      	mov	r1, r0
    d86c:	4628      	mov	r0, r5
	sub->kr_phase = BT_MESH_KR_NORMAL;
    d86e:	83eb      	strh	r3, [r5, #30]
	sub->net_idx = net_idx;
    d870:	83ae      	strh	r6, [r5, #28]
	subnet_evt(sub, BT_MESH_KEY_ADDED);
    d872:	f7ff ff89 	bl	d788 <subnet_evt>
		bt_mesh_store_subnet(sub->net_idx);
    d876:	8ba8      	ldrh	r0, [r5, #28]
    d878:	f01e f9fc 	bl	2bc74 <bt_mesh_store_subnet>
	return STATUS_SUCCESS;
    d87c:	4620      	mov	r0, r4
    d87e:	e7f1      	b.n	d864 <bt_mesh_subnet_add+0x38>
		return STATUS_INSUFF_RESOURCES;
    d880:	2005      	movs	r0, #5
    d882:	e7ef      	b.n	d864 <bt_mesh_subnet_add+0x38>
    d884:	20000444 	.word	0x20000444

0000d888 <bt_mesh_subnets_get>:

	return STATUS_SUCCESS;
}

ssize_t bt_mesh_subnets_get(uint16_t net_idxs[], size_t max, off_t skip)
{
    d888:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    d88a:	2300      	movs	r3, #0
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d88c:	4e0b      	ldr	r6, [pc, #44]	; (d8bc <bt_mesh_subnets_get+0x34>)
{
    d88e:	4604      	mov	r4, r0
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d890:	f64f 77ff 	movw	r7, #65535	; 0xffff
	size_t count = 0;
    d894:	4618      	mov	r0, r3
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d896:	8bb5      	ldrh	r5, [r6, #28]
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
    d898:	b103      	cbz	r3, d89c <bt_mesh_subnets_get+0x14>

		net_idxs[count++] = sub->net_idx;
	}

	return count;
}
    d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (sub->net_idx == BT_MESH_KEY_UNUSED) {
    d89c:	42bd      	cmp	r5, r7
    d89e:	d0fc      	beq.n	d89a <bt_mesh_subnets_get+0x12>
		if (skip) {
    d8a0:	b112      	cbz	r2, d8a8 <bt_mesh_subnets_get+0x20>
			skip--;
    d8a2:	3a01      	subs	r2, #1
		net_idxs[count++] = sub->net_idx;
    d8a4:	2301      	movs	r3, #1
    d8a6:	e7f6      	b.n	d896 <bt_mesh_subnets_get+0xe>
		if (count >= max) {
    d8a8:	4288      	cmp	r0, r1
    d8aa:	d203      	bcs.n	d8b4 <bt_mesh_subnets_get+0x2c>
		net_idxs[count++] = sub->net_idx;
    d8ac:	f824 5010 	strh.w	r5, [r4, r0, lsl #1]
    d8b0:	3001      	adds	r0, #1
    d8b2:	e7f7      	b.n	d8a4 <bt_mesh_subnets_get+0x1c>
			return -ENOMEM;
    d8b4:	f06f 000b 	mvn.w	r0, #11
    d8b8:	e7ef      	b.n	d89a <bt_mesh_subnets_get+0x12>
    d8ba:	bf00      	nop
    d8bc:	20000444 	.word	0x20000444

0000d8c0 <bt_mesh_subnet_get>:
struct bt_mesh_subnet *bt_mesh_subnet_get(uint16_t net_idx)
{
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx == net_idx) {
    d8c0:	4b03      	ldr	r3, [pc, #12]	; (d8d0 <bt_mesh_subnet_get+0x10>)
    d8c2:	8b9a      	ldrh	r2, [r3, #28]
			return sub;
		}
	}

	return NULL;
}
    d8c4:	4282      	cmp	r2, r0
    d8c6:	bf0c      	ite	eq
    d8c8:	4618      	moveq	r0, r3
    d8ca:	2000      	movne	r0, #0
    d8cc:	4770      	bx	lr
    d8ce:	bf00      	nop
    d8d0:	20000444 	.word	0x20000444

0000d8d4 <bt_mesh_subnet_kr_phase_set>:
{
    d8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const uint8_t valid_transitions[] = {
    d8d6:	4b13      	ldr	r3, [pc, #76]	; (d924 <bt_mesh_subnet_kr_phase_set+0x50>)
    d8d8:	881a      	ldrh	r2, [r3, #0]
    d8da:	789b      	ldrb	r3, [r3, #2]
    d8dc:	f8ad 2004 	strh.w	r2, [sp, #4]
{
    d8e0:	460c      	mov	r4, r1
	const uint8_t valid_transitions[] = {
    d8e2:	f88d 3006 	strb.w	r3, [sp, #6]
	sub = bt_mesh_subnet_get(net_idx);
    d8e6:	f7ff ffeb 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
    d8ea:	4605      	mov	r5, r0
    d8ec:	b918      	cbnz	r0, d8f6 <bt_mesh_subnet_kr_phase_set+0x22>
		*phase = 0x00;
    d8ee:	7008      	strb	r0, [r1, #0]
		return STATUS_INVALID_NETKEY;
    d8f0:	2004      	movs	r0, #4
}
    d8f2:	b003      	add	sp, #12
    d8f4:	bd30      	pop	{r4, r5, pc}
	if (*phase == sub->kr_phase) {
    d8f6:	7809      	ldrb	r1, [r1, #0]
    d8f8:	7f83      	ldrb	r3, [r0, #30]
    d8fa:	4299      	cmp	r1, r3
    d8fc:	d00c      	beq.n	d918 <bt_mesh_subnet_kr_phase_set+0x44>
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    d8fe:	2b02      	cmp	r3, #2
    d900:	d80c      	bhi.n	d91c <bt_mesh_subnet_kr_phase_set+0x48>
	    valid_transitions[sub->kr_phase] & BIT(*phase)) {
    d902:	aa02      	add	r2, sp, #8
    d904:	441a      	add	r2, r3
    d906:	f812 2c04 	ldrb.w	r2, [r2, #-4]
	if (sub->kr_phase < ARRAY_SIZE(valid_transitions) &&
    d90a:	40ca      	lsrs	r2, r1
    d90c:	07d2      	lsls	r2, r2, #31
    d90e:	d505      	bpl.n	d91c <bt_mesh_subnet_kr_phase_set+0x48>
		key_refresh(sub, *phase);
    d910:	f01c f8a3 	bl	29a5a <key_refresh>
		*phase = sub->kr_phase;
    d914:	7fab      	ldrb	r3, [r5, #30]
    d916:	7023      	strb	r3, [r4, #0]
		return STATUS_SUCCESS;
    d918:	2000      	movs	r0, #0
    d91a:	e7ea      	b.n	d8f2 <bt_mesh_subnet_kr_phase_set+0x1e>
	*phase = sub->kr_phase;
    d91c:	7023      	strb	r3, [r4, #0]
	return STATUS_CANNOT_UPDATE;
    d91e:	200b      	movs	r0, #11
    d920:	e7e7      	b.n	d8f2 <bt_mesh_subnet_kr_phase_set+0x1e>
    d922:	bf00      	nop
    d924:	0002dd30 	.word	0x0002dd30

0000d928 <bt_mesh_subnet_set>:

int bt_mesh_subnet_set(uint16_t net_idx, uint8_t kr_phase,
		       const uint8_t old_key[16], const uint8_t new_key[16])
{
    d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (subnets[i].net_idx == net_idx) {
    d92a:	4c16      	ldr	r4, [pc, #88]	; (d984 <bt_mesh_subnet_set+0x5c>)
{
    d92c:	461d      	mov	r5, r3
		if (subnets[i].net_idx == net_idx) {
    d92e:	8ba3      	ldrh	r3, [r4, #28]
    d930:	4298      	cmp	r0, r3
{
    d932:	460f      	mov	r7, r1
    d934:	4606      	mov	r6, r0
    d936:	4611      	mov	r1, r2
		if (subnets[i].net_idx == net_idx) {
    d938:	d01e      	beq.n	d978 <bt_mesh_subnet_set+0x50>
		if (!sub && subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d93a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d93e:	4293      	cmp	r3, r2
    d940:	d11d      	bne.n	d97e <bt_mesh_subnet_set+0x56>
	if (sub->net_idx == net_idx) {
		return -EALREADY;
	}

	for (int i = 0; i < ARRAY_SIZE(keys); i++) {
		if (!keys[i]) {
    d942:	b949      	cbnz	r1, d958 <bt_mesh_subnet_set+0x30>
    d944:	b98d      	cbnz	r5, d96a <bt_mesh_subnet_set+0x42>
	} else {
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
	}

	/* Make sure we have valid beacon data to be sent */
	bt_mesh_beacon_update(sub);
    d946:	480f      	ldr	r0, [pc, #60]	; (d984 <bt_mesh_subnet_set+0x5c>)
	sub->net_idx = net_idx;
    d948:	83a6      	strh	r6, [r4, #28]
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
    d94a:	2302      	movs	r3, #2
	sub->kr_phase = kr_phase;
    d94c:	77a7      	strb	r7, [r4, #30]
		sub->node_id = BT_MESH_NODE_IDENTITY_NOT_SUPPORTED;
    d94e:	77e3      	strb	r3, [r4, #31]
	bt_mesh_beacon_update(sub);
    d950:	f7ff f98a 	bl	cc68 <bt_mesh_beacon_update>

	return 0;
    d954:	2000      	movs	r0, #0
    d956:	e007      	b.n	d968 <bt_mesh_subnet_set+0x40>
		if (net_keys_create(&sub->keys[i], keys[i])) {
    d958:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d95c:	f7ff ff26 	bl	d7ac <net_keys_create>
    d960:	2800      	cmp	r0, #0
    d962:	d0ef      	beq.n	d944 <bt_mesh_subnet_set+0x1c>
			return -EIO;
    d964:	f06f 0004 	mvn.w	r0, #4
}
    d968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (net_keys_create(&sub->keys[i], keys[i])) {
    d96a:	4807      	ldr	r0, [pc, #28]	; (d988 <bt_mesh_subnet_set+0x60>)
    d96c:	4629      	mov	r1, r5
    d96e:	f7ff ff1d 	bl	d7ac <net_keys_create>
    d972:	2800      	cmp	r0, #0
    d974:	d0e7      	beq.n	d946 <bt_mesh_subnet_set+0x1e>
    d976:	e7f5      	b.n	d964 <bt_mesh_subnet_set+0x3c>
		return -EALREADY;
    d978:	f06f 0044 	mvn.w	r0, #68	; 0x44
    d97c:	e7f4      	b.n	d968 <bt_mesh_subnet_set+0x40>
		return -ENOMEM;
    d97e:	f06f 000b 	mvn.w	r0, #11
    d982:	e7f1      	b.n	d968 <bt_mesh_subnet_set+0x40>
    d984:	20000444 	.word	0x20000444
    d988:	200004ba 	.word	0x200004ba

0000d98c <bt_mesh_subnet_find>:

struct bt_mesh_subnet *bt_mesh_subnet_find(int (*cb)(struct bt_mesh_subnet *sub,
						     void *cb_data),
					   void *cb_data)
{
    d98c:	4603      	mov	r3, r0
	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d98e:	4807      	ldr	r0, [pc, #28]	; (d9ac <bt_mesh_subnet_find+0x20>)
{
    d990:	b510      	push	{r4, lr}
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d992:	8b84      	ldrh	r4, [r0, #28]
    d994:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d998:	4294      	cmp	r4, r2
    d99a:	d005      	beq.n	d9a8 <bt_mesh_subnet_find+0x1c>
			continue;
		}

		if (!cb || cb(&subnets[i], cb_data)) {
    d99c:	b90b      	cbnz	r3, d9a2 <bt_mesh_subnet_find+0x16>
			return &subnets[i];
    d99e:	4803      	ldr	r0, [pc, #12]	; (d9ac <bt_mesh_subnet_find+0x20>)
		}
	}

	return NULL;
}
    d9a0:	bd10      	pop	{r4, pc}
		if (!cb || cb(&subnets[i], cb_data)) {
    d9a2:	4798      	blx	r3
    d9a4:	2800      	cmp	r0, #0
    d9a6:	d1fa      	bne.n	d99e <bt_mesh_subnet_find+0x12>
	return NULL;
    d9a8:	2000      	movs	r0, #0
    d9aa:	e7f9      	b.n	d9a0 <bt_mesh_subnet_find+0x14>
    d9ac:	20000444 	.word	0x20000444

0000d9b0 <bt_mesh_subnet_foreach>:

size_t bt_mesh_subnet_foreach(void (*cb)(struct bt_mesh_subnet *sub))
{
    d9b0:	b508      	push	{r3, lr}
    d9b2:	4603      	mov	r3, r0
	size_t count = 0;

	for (int i = 0; i < ARRAY_SIZE(subnets); i++) {
		if (subnets[i].net_idx == BT_MESH_KEY_UNUSED) {
    d9b4:	4805      	ldr	r0, [pc, #20]	; (d9cc <bt_mesh_subnet_foreach+0x1c>)
    d9b6:	8b81      	ldrh	r1, [r0, #28]
    d9b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d9bc:	4291      	cmp	r1, r2
    d9be:	d002      	beq.n	d9c6 <bt_mesh_subnet_foreach+0x16>
			continue;
		}

		cb(&subnets[i]);
    d9c0:	4798      	blx	r3
		count++;
    d9c2:	2001      	movs	r0, #1
	}

	return count;
}
    d9c4:	bd08      	pop	{r3, pc}
    d9c6:	2000      	movs	r0, #0
	return count;
    d9c8:	e7fc      	b.n	d9c4 <bt_mesh_subnet_foreach+0x14>
    d9ca:	bf00      	nop
    d9cc:	20000444 	.word	0x20000444

0000d9d0 <bt_mesh_subnet_next>:

struct bt_mesh_subnet *bt_mesh_subnet_next(struct bt_mesh_subnet *sub)
{
	if (sub) {
    d9d0:	b178      	cbz	r0, d9f2 <bt_mesh_subnet_next+0x22>
		sub = &subnets[0];
	}

	for (int i = 0; i < ARRAY_SIZE(subnets); i++, sub++) {
		/* Roll over once we reach the end */
		if (sub == &subnets[ARRAY_SIZE(subnets)]) {
    d9d2:	4a09      	ldr	r2, [pc, #36]	; (d9f8 <bt_mesh_subnet_next+0x28>)
		sub++;
    d9d4:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
		sub = &subnets[0];
    d9d8:	f1a2 01c0 	sub.w	r1, r2, #192	; 0xc0
    d9dc:	4293      	cmp	r3, r2
    d9de:	bf08      	it	eq
    d9e0:	460b      	moveq	r3, r1
			sub = &subnets[0];
		}

		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    d9e2:	8b98      	ldrh	r0, [r3, #28]
			return sub;
		}
	}

	return NULL;
}
    d9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d9e8:	4290      	cmp	r0, r2
    d9ea:	bf14      	ite	ne
    d9ec:	4618      	movne	r0, r3
    d9ee:	2000      	moveq	r0, #0
    d9f0:	4770      	bx	lr
		sub = &subnets[0];
    d9f2:	4b02      	ldr	r3, [pc, #8]	; (d9fc <bt_mesh_subnet_next+0x2c>)
    d9f4:	e7f5      	b.n	d9e2 <bt_mesh_subnet_next+0x12>
    d9f6:	bf00      	nop
    d9f8:	20000504 	.word	0x20000504
    d9fc:	20000444 	.word	0x20000444

0000da00 <bt_mesh_net_keys_reset>:
	 * are associated with each net key.
	 */
	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
		struct bt_mesh_subnet *sub = &subnets[i];

		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
    da00:	4804      	ldr	r0, [pc, #16]	; (da14 <bt_mesh_net_keys_reset+0x14>)
    da02:	8b82      	ldrh	r2, [r0, #28]
    da04:	f64f 73ff 	movw	r3, #65535	; 0xffff
    da08:	429a      	cmp	r2, r3
    da0a:	d001      	beq.n	da10 <bt_mesh_net_keys_reset+0x10>
			subnet_del(sub);
    da0c:	f01c b848 	b.w	29aa0 <subnet_del>
		}
	}
}
    da10:	4770      	bx	lr
    da12:	bf00      	nop
    da14:	20000444 	.word	0x20000444

0000da18 <bt_mesh_net_cred_find>:
			   struct net_buf_simple *out,
			   bool (*cb)(struct bt_mesh_net_rx *rx,
				      struct net_buf_simple *in,
				      struct net_buf_simple *out,
				      const struct bt_mesh_net_cred *cred))
{
    da18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da1a:	461d      	mov	r5, r3
	int i, j;

	BT_DBG("");

	rx->friend_cred = 1U;
    da1c:	7d03      	ldrb	r3, [r0, #20]
    da1e:	f043 0304 	orr.w	r3, r3, #4
    da22:	7503      	strb	r3, [r0, #20]
		}
	}
#endif

	for (i = 0; i < ARRAY_SIZE(subnets); i++) {
		rx->sub = &subnets[i];
    da24:	4b13      	ldr	r3, [pc, #76]	; (da74 <bt_mesh_net_cred_find+0x5c>)
    da26:	6003      	str	r3, [r0, #0]
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    da28:	f8b3 e01c 	ldrh.w	lr, [r3, #28]
    da2c:	f64f 7cff 	movw	ip, #65535	; 0xffff
    da30:	45e6      	cmp	lr, ip
{
    da32:	4604      	mov	r4, r0
    da34:	460e      	mov	r6, r1
    da36:	4617      	mov	r7, r2
		if (rx->sub->net_idx == BT_MESH_KEY_UNUSED) {
    da38:	d01a      	beq.n	da70 <bt_mesh_net_cred_find+0x58>
			continue;
		}

		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
			if (!rx->sub->keys[j].valid) {
    da3a:	f893 c02c 	ldrb.w	ip, [r3, #44]	; 0x2c
    da3e:	f1bc 0f00 	cmp.w	ip, #0
    da42:	d002      	beq.n	da4a <bt_mesh_net_cred_find+0x32>
				continue;
			}

			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    da44:	333d      	adds	r3, #61	; 0x3d
    da46:	47a8      	blx	r5
    da48:	b980      	cbnz	r0, da6c <bt_mesh_net_cred_find+0x54>
			if (!rx->sub->keys[j].valid) {
    da4a:	6823      	ldr	r3, [r4, #0]
    da4c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
    da50:	b172      	cbz	r2, da70 <bt_mesh_net_cred_find+0x58>
			if (cb(rx, in, out, &rx->sub->keys[j].msg)) {
    da52:	3387      	adds	r3, #135	; 0x87
    da54:	463a      	mov	r2, r7
    da56:	4631      	mov	r1, r6
    da58:	4620      	mov	r0, r4
    da5a:	47a8      	blx	r5
    da5c:	b140      	cbz	r0, da70 <bt_mesh_net_cred_find+0x58>
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    da5e:	2201      	movs	r2, #1
				rx->new_key = (j > 0);
    da60:	7d23      	ldrb	r3, [r4, #20]
    da62:	f362 0341 	bfi	r3, r2, #1, #1
    da66:	7523      	strb	r3, [r4, #20]
				return true;
    da68:	2001      	movs	r0, #1
			}
		}
	}

	return false;
}
    da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (j = 0; j < ARRAY_SIZE(rx->sub->keys); j++) {
    da6c:	2200      	movs	r2, #0
    da6e:	e7f7      	b.n	da60 <bt_mesh_net_cred_find+0x48>
	return false;
    da70:	2000      	movs	r0, #0
    da72:	e7fa      	b.n	da6a <bt_mesh_net_cred_find+0x52>
    da74:	20000444 	.word	0x20000444

0000da78 <app_key_evt>:
		.net_idx = BT_MESH_KEY_UNUSED,
	}
};

static void app_key_evt(struct bt_mesh_app_key *app, enum bt_mesh_key_evt evt)
{
    da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    da7a:	4d07      	ldr	r5, [pc, #28]	; (da98 <app_key_evt+0x20>)
    da7c:	4f07      	ldr	r7, [pc, #28]	; (da9c <app_key_evt+0x24>)
{
    da7e:	4604      	mov	r4, r0
    da80:	460e      	mov	r6, r1
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    da82:	42bd      	cmp	r5, r7
    da84:	d300      	bcc.n	da88 <app_key_evt+0x10>
		cb->evt_handler(app->app_idx, app->net_idx, evt);
	}
}
    da86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->evt_handler(app->app_idx, app->net_idx, evt);
    da88:	f855 3b04 	ldr.w	r3, [r5], #4
    da8c:	8821      	ldrh	r1, [r4, #0]
    da8e:	8860      	ldrh	r0, [r4, #2]
    da90:	4632      	mov	r2, r6
    da92:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_mesh_app_key_cb, cb) {
    da94:	e7f5      	b.n	da82 <app_key_evt+0xa>
    da96:	bf00      	nop
    da98:	0002dbcc 	.word	0x0002dbcc
    da9c:	0002dbd0 	.word	0x0002dbd0

0000daa0 <subnet_evt>:
	return BT_MESH_KEY_UNUSED;
}

static void subnet_evt(struct bt_mesh_subnet *sub, enum bt_mesh_key_evt evt)
{
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    daa0:	f011 0ffd 	tst.w	r1, #253	; 0xfd
{
    daa4:	b538      	push	{r3, r4, r5, lr}
    daa6:	460d      	mov	r5, r1
	if (evt == BT_MESH_KEY_UPDATED || evt == BT_MESH_KEY_ADDED) {
    daa8:	d122      	bne.n	daf0 <subnet_evt+0x50>
			app_key_revoke(app);
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
		}
	}
}
    daaa:	bd38      	pop	{r3, r4, r5, pc}
		} else if (evt == BT_MESH_KEY_REVOKED) {
    daac:	2d04      	cmp	r5, #4
    daae:	d119      	bne.n	dae4 <subnet_evt+0x44>
	if (!app->updated) {
    dab0:	7923      	ldrb	r3, [r4, #4]
    dab2:	2b00      	cmp	r3, #0
    dab4:	d0f9      	beq.n	daaa <subnet_evt+0xa>
	memcpy(&app->keys[0], &app->keys[1], sizeof(app->keys[0]));
    dab6:	2211      	movs	r2, #17
    dab8:	f104 0116 	add.w	r1, r4, #22
    dabc:	1d60      	adds	r0, r4, #5
    dabe:	f018 ff70 	bl	269a2 <memcpy>
	memset(&app->keys[1], 0, sizeof(app->keys[1]));
    dac2:	2100      	movs	r1, #0
    dac4:	2211      	movs	r2, #17
    dac6:	f104 0016 	add.w	r0, r4, #22
    daca:	f018 ff95 	bl	269f8 <memset>
	app->updated = false;
    dace:	2300      	movs	r3, #0
		bt_mesh_store_app_key(app->app_idx);
    dad0:	8860      	ldrh	r0, [r4, #2]
	app->updated = false;
    dad2:	7123      	strb	r3, [r4, #4]
		bt_mesh_store_app_key(app->app_idx);
    dad4:	f01e f8f1 	bl	2bcba <bt_mesh_store_app_key>
	app_key_evt(app, BT_MESH_KEY_REVOKED);
    dad8:	4629      	mov	r1, r5
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    dada:	4620      	mov	r0, r4
}
    dadc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_evt(app, BT_MESH_KEY_SWAPPED);
    dae0:	f7ff bfca 	b.w	da78 <app_key_evt>
		} else if (evt == BT_MESH_KEY_SWAPPED && app->updated) {
    dae4:	2d03      	cmp	r5, #3
    dae6:	d1e0      	bne.n	daaa <subnet_evt+0xa>
    dae8:	7923      	ldrb	r3, [r4, #4]
    daea:	2b00      	cmp	r3, #0
    daec:	d0dd      	beq.n	daaa <subnet_evt+0xa>
    daee:	e7f4      	b.n	dada <subnet_evt+0x3a>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    daf0:	4c08      	ldr	r4, [pc, #32]	; (db14 <subnet_evt+0x74>)
    daf2:	8862      	ldrh	r2, [r4, #2]
    daf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    daf8:	429a      	cmp	r2, r3
    dafa:	d0d6      	beq.n	daaa <subnet_evt+0xa>
		if (app->net_idx != sub->net_idx) {
    dafc:	8822      	ldrh	r2, [r4, #0]
    dafe:	8b83      	ldrh	r3, [r0, #28]
    db00:	429a      	cmp	r2, r3
    db02:	d1d2      	bne.n	daaa <subnet_evt+0xa>
		if (evt == BT_MESH_KEY_DELETED) {
    db04:	2d01      	cmp	r5, #1
    db06:	d1d1      	bne.n	daac <subnet_evt+0xc>
			app_key_del(app);
    db08:	4620      	mov	r0, r4
}
    db0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			app_key_del(app);
    db0e:	f01c b850 	b.w	29bb2 <app_key_del>
    db12:	bf00      	nop
    db14:	20000b50 	.word	0x20000b50

0000db18 <bt_mesh_app_key_add>:
{
    db18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db1c:	4680      	mov	r8, r0
	if (!bt_mesh_subnet_get(net_idx)) {
    db1e:	4608      	mov	r0, r1
{
    db20:	460f      	mov	r7, r1
    db22:	4616      	mov	r6, r2
	if (!bt_mesh_subnet_get(net_idx)) {
    db24:	f7ff fecc 	bl	d8c0 <bt_mesh_subnet_get>
    db28:	b378      	cbz	r0, db8a <bt_mesh_app_key_add+0x72>
		if (apps[i].app_idx == app_idx) {
    db2a:	4d1b      	ldr	r5, [pc, #108]	; (db98 <bt_mesh_app_key_add+0x80>)
    db2c:	886b      	ldrh	r3, [r5, #2]
    db2e:	4598      	cmp	r8, r3
    db30:	d00b      	beq.n	db4a <bt_mesh_app_key_add+0x32>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    db32:	f64f 72ff 	movw	r2, #65535	; 0xffff
    db36:	4293      	cmp	r3, r2
    db38:	d129      	bne.n	db8e <bt_mesh_app_key_add+0x76>
			const uint8_t net_id[16], uint32_t iv_index,
			uint8_t auth[8]);

static inline int bt_mesh_app_id(const uint8_t app_key[16], uint8_t app_id[1])
{
	return bt_mesh_k4(app_key, app_id);
    db3a:	1d69      	adds	r1, r5, #5
    db3c:	4630      	mov	r0, r6
    db3e:	f001 f9d5 	bl	eeec <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[0].id)) {
    db42:	4604      	mov	r4, r0
    db44:	b178      	cbz	r0, db66 <bt_mesh_app_key_add+0x4e>
		return STATUS_CANNOT_SET;
    db46:	200f      	movs	r0, #15
    db48:	e00b      	b.n	db62 <bt_mesh_app_key_add+0x4a>
		if (app->net_idx != net_idx) {
    db4a:	882b      	ldrh	r3, [r5, #0]
    db4c:	42bb      	cmp	r3, r7
    db4e:	d120      	bne.n	db92 <bt_mesh_app_key_add+0x7a>
		if (memcmp(key, app->keys[0].val, 16)) {
    db50:	2210      	movs	r2, #16
    db52:	1da9      	adds	r1, r5, #6
    db54:	4630      	mov	r0, r6
    db56:	f018 ff14 	bl	26982 <memcmp>
		return STATUS_SUCCESS;
    db5a:	2800      	cmp	r0, #0
    db5c:	bf14      	ite	ne
    db5e:	2006      	movne	r0, #6
    db60:	2000      	moveq	r0, #0
}
    db62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(app->keys[0].val, key, 16);
    db66:	2210      	movs	r2, #16
    db68:	4631      	mov	r1, r6
	app->updated = false;
    db6a:	7128      	strb	r0, [r5, #4]
	memcpy(app->keys[0].val, key, 16);
    db6c:	1da8      	adds	r0, r5, #6
	app->net_idx = net_idx;
    db6e:	802f      	strh	r7, [r5, #0]
	app->app_idx = app_idx;
    db70:	f8a5 8002 	strh.w	r8, [r5, #2]
	memcpy(app->keys[0].val, key, 16);
    db74:	f018 ff15 	bl	269a2 <memcpy>
		bt_mesh_store_app_key(app->app_idx);
    db78:	8868      	ldrh	r0, [r5, #2]
    db7a:	f01e f89e 	bl	2bcba <bt_mesh_store_app_key>
	app_key_evt(app, BT_MESH_KEY_ADDED);
    db7e:	4628      	mov	r0, r5
    db80:	4621      	mov	r1, r4
    db82:	f7ff ff79 	bl	da78 <app_key_evt>
	return STATUS_SUCCESS;
    db86:	4620      	mov	r0, r4
    db88:	e7eb      	b.n	db62 <bt_mesh_app_key_add+0x4a>
		return STATUS_INVALID_NETKEY;
    db8a:	2004      	movs	r0, #4
    db8c:	e7e9      	b.n	db62 <bt_mesh_app_key_add+0x4a>
		return STATUS_INSUFF_RESOURCES;
    db8e:	2005      	movs	r0, #5
    db90:	e7e7      	b.n	db62 <bt_mesh_app_key_add+0x4a>
			return STATUS_INVALID_BINDING;
    db92:	2011      	movs	r0, #17
    db94:	e7e5      	b.n	db62 <bt_mesh_app_key_add+0x4a>
    db96:	bf00      	nop
    db98:	20000b50 	.word	0x20000b50

0000db9c <bt_mesh_app_key_get>:
		if (apps[i].app_idx == app_idx) {
    db9c:	4b03      	ldr	r3, [pc, #12]	; (dbac <bt_mesh_app_key_get+0x10>)
    db9e:	885a      	ldrh	r2, [r3, #2]
}
    dba0:	4282      	cmp	r2, r0
    dba2:	bf0c      	ite	eq
    dba4:	4618      	moveq	r0, r3
    dba6:	2000      	movne	r0, #0
    dba8:	4770      	bx	lr
    dbaa:	bf00      	nop
    dbac:	20000b50 	.word	0x20000b50

0000dbb0 <bt_mesh_app_key_update>:
{
    dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (apps[i].app_idx == app_idx) {
    dbb2:	4b1e      	ldr	r3, [pc, #120]	; (dc2c <bt_mesh_app_key_update+0x7c>)
{
    dbb4:	4615      	mov	r5, r2
		if (apps[i].app_idx == app_idx) {
    dbb6:	885a      	ldrh	r2, [r3, #2]
    dbb8:	4282      	cmp	r2, r0
    dbba:	461e      	mov	r6, r3
    dbbc:	d130      	bne.n	dc20 <bt_mesh_app_key_update+0x70>
	if (net_idx != BT_MESH_KEY_UNUSED && app->net_idx != net_idx) {
    dbbe:	8818      	ldrh	r0, [r3, #0]
    dbc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dbc4:	4299      	cmp	r1, r3
    dbc6:	d001      	beq.n	dbcc <bt_mesh_app_key_update+0x1c>
    dbc8:	4288      	cmp	r0, r1
    dbca:	d12b      	bne.n	dc24 <bt_mesh_app_key_update+0x74>
	sub = bt_mesh_subnet_get(app->net_idx);
    dbcc:	f7ff fe78 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
    dbd0:	b350      	cbz	r0, dc28 <bt_mesh_app_key_update+0x78>
	if (sub->kr_phase != BT_MESH_KR_PHASE_1) {
    dbd2:	7f87      	ldrb	r7, [r0, #30]
    dbd4:	2f01      	cmp	r7, #1
    dbd6:	d001      	beq.n	dbdc <bt_mesh_app_key_update+0x2c>
		return STATUS_CANNOT_UPDATE;
    dbd8:	200b      	movs	r0, #11
}
    dbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (app->updated) {
    dbdc:	7933      	ldrb	r3, [r6, #4]
    dbde:	b14b      	cbz	r3, dbf4 <bt_mesh_app_key_update+0x44>
		if (memcmp(app->keys[1].val, key, 16)) {
    dbe0:	4813      	ldr	r0, [pc, #76]	; (dc30 <bt_mesh_app_key_update+0x80>)
    dbe2:	2210      	movs	r2, #16
    dbe4:	4629      	mov	r1, r5
    dbe6:	f018 fecc 	bl	26982 <memcmp>
		return STATUS_SUCCESS;
    dbea:	2800      	cmp	r0, #0
    dbec:	bf14      	ite	ne
    dbee:	2006      	movne	r0, #6
    dbf0:	2000      	moveq	r0, #0
    dbf2:	e7f2      	b.n	dbda <bt_mesh_app_key_update+0x2a>
    dbf4:	490f      	ldr	r1, [pc, #60]	; (dc34 <bt_mesh_app_key_update+0x84>)
    dbf6:	4628      	mov	r0, r5
    dbf8:	f001 f978 	bl	eeec <bt_mesh_k4>
	if (bt_mesh_app_id(key, &app->keys[1].id)) {
    dbfc:	4604      	mov	r4, r0
    dbfe:	2800      	cmp	r0, #0
    dc00:	d1ea      	bne.n	dbd8 <bt_mesh_app_key_update+0x28>
	memcpy(app->keys[1].val, key, 16);
    dc02:	2210      	movs	r2, #16
    dc04:	4629      	mov	r1, r5
    dc06:	480a      	ldr	r0, [pc, #40]	; (dc30 <bt_mesh_app_key_update+0x80>)
	app->updated = true;
    dc08:	7137      	strb	r7, [r6, #4]
	memcpy(app->keys[1].val, key, 16);
    dc0a:	f018 feca 	bl	269a2 <memcpy>
		bt_mesh_store_app_key(app->app_idx);
    dc0e:	8870      	ldrh	r0, [r6, #2]
    dc10:	f01e f853 	bl	2bcba <bt_mesh_store_app_key>
	app_key_evt(app, BT_MESH_KEY_UPDATED);
    dc14:	4805      	ldr	r0, [pc, #20]	; (dc2c <bt_mesh_app_key_update+0x7c>)
    dc16:	2102      	movs	r1, #2
    dc18:	f7ff ff2e 	bl	da78 <app_key_evt>
	return STATUS_SUCCESS;
    dc1c:	4620      	mov	r0, r4
    dc1e:	e7dc      	b.n	dbda <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_APPKEY;
    dc20:	2003      	movs	r0, #3
    dc22:	e7da      	b.n	dbda <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_BINDING;
    dc24:	2011      	movs	r0, #17
    dc26:	e7d8      	b.n	dbda <bt_mesh_app_key_update+0x2a>
		return STATUS_INVALID_NETKEY;
    dc28:	2004      	movs	r0, #4
    dc2a:	e7d6      	b.n	dbda <bt_mesh_app_key_update+0x2a>
    dc2c:	20000b50 	.word	0x20000b50
    dc30:	20000b67 	.word	0x20000b67
    dc34:	20000b66 	.word	0x20000b66

0000dc38 <bt_mesh_app_key_del>:
{
    dc38:	b538      	push	{r3, r4, r5, lr}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    dc3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dc3e:	4299      	cmp	r1, r3
{
    dc40:	4605      	mov	r5, r0
    dc42:	460c      	mov	r4, r1
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    dc44:	d105      	bne.n	dc52 <bt_mesh_app_key_del+0x1a>
		if (apps[i].app_idx == app_idx) {
    dc46:	4b0d      	ldr	r3, [pc, #52]	; (dc7c <bt_mesh_app_key_del+0x44>)
    dc48:	885a      	ldrh	r2, [r3, #2]
    dc4a:	42aa      	cmp	r2, r5
    dc4c:	d008      	beq.n	dc60 <bt_mesh_app_key_del+0x28>
	return STATUS_SUCCESS;
    dc4e:	2000      	movs	r0, #0
}
    dc50:	bd38      	pop	{r3, r4, r5, pc}
	if (net_idx != BT_MESH_KEY_UNUSED && !bt_mesh_subnet_get(net_idx)) {
    dc52:	4608      	mov	r0, r1
    dc54:	f7ff fe34 	bl	d8c0 <bt_mesh_subnet_get>
    dc58:	2800      	cmp	r0, #0
    dc5a:	d1f4      	bne.n	dc46 <bt_mesh_app_key_del+0xe>
		return STATUS_INVALID_NETKEY;
    dc5c:	2004      	movs	r0, #4
    dc5e:	e7f7      	b.n	dc50 <bt_mesh_app_key_del+0x18>
	if (net_idx != BT_MESH_KEY_UNUSED && net_idx != app->net_idx) {
    dc60:	f64f 72ff 	movw	r2, #65535	; 0xffff
    dc64:	4294      	cmp	r4, r2
    dc66:	d002      	beq.n	dc6e <bt_mesh_app_key_del+0x36>
    dc68:	881b      	ldrh	r3, [r3, #0]
    dc6a:	42a3      	cmp	r3, r4
    dc6c:	d103      	bne.n	dc76 <bt_mesh_app_key_del+0x3e>
	app_key_del(app);
    dc6e:	4803      	ldr	r0, [pc, #12]	; (dc7c <bt_mesh_app_key_del+0x44>)
    dc70:	f01b ff9f 	bl	29bb2 <app_key_del>
    dc74:	e7eb      	b.n	dc4e <bt_mesh_app_key_del+0x16>
		return STATUS_INVALID_BINDING;
    dc76:	2011      	movs	r0, #17
    dc78:	e7ea      	b.n	dc50 <bt_mesh_app_key_del+0x18>
    dc7a:	bf00      	nop
    dc7c:	20000b50 	.word	0x20000b50

0000dc80 <bt_mesh_app_key_set>:
{
    dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (apps[i].app_idx == app_idx) {
    dc84:	4c1d      	ldr	r4, [pc, #116]	; (dcfc <bt_mesh_app_key_set+0x7c>)
{
    dc86:	4615      	mov	r5, r2
		if (apps[i].app_idx == app_idx) {
    dc88:	8862      	ldrh	r2, [r4, #2]
    dc8a:	4290      	cmp	r0, r2
{
    dc8c:	4606      	mov	r6, r0
    dc8e:	460f      	mov	r7, r1
    dc90:	4698      	mov	r8, r3
		if (apps[i].app_idx == app_idx) {
    dc92:	d02e      	beq.n	dcf2 <bt_mesh_app_key_set+0x72>
		if (!app && apps[i].app_idx == BT_MESH_KEY_UNUSED) {
    dc94:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dc98:	429a      	cmp	r2, r3
    dc9a:	d12c      	bne.n	dcf6 <bt_mesh_app_key_set+0x76>
	memcpy(app->keys[0].val, old_key, 16);
    dc9c:	4629      	mov	r1, r5
    dc9e:	2210      	movs	r2, #16
    dca0:	1da0      	adds	r0, r4, #6
    dca2:	f018 fe7e 	bl	269a2 <memcpy>
    dca6:	4628      	mov	r0, r5
    dca8:	1d61      	adds	r1, r4, #5
    dcaa:	f001 f91f 	bl	eeec <bt_mesh_k4>
	if (bt_mesh_app_id(old_key, &app->keys[0].id)) {
    dcae:	4605      	mov	r5, r0
    dcb0:	b120      	cbz	r0, dcbc <bt_mesh_app_key_set+0x3c>
		return -EIO;
    dcb2:	f06f 0504 	mvn.w	r5, #4
}
    dcb6:	4628      	mov	r0, r5
    dcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (new_key) {
    dcbc:	f1b8 0f00 	cmp.w	r8, #0
    dcc0:	d109      	bne.n	dcd6 <bt_mesh_app_key_set+0x56>
	app->updated = !!new_key;
    dcc2:	f1b8 0800 	subs.w	r8, r8, #0
    dcc6:	bf18      	it	ne
    dcc8:	f04f 0801 	movne.w	r8, #1
	app->net_idx = net_idx;
    dccc:	8027      	strh	r7, [r4, #0]
	app->app_idx = app_idx;
    dcce:	8066      	strh	r6, [r4, #2]
	app->updated = !!new_key;
    dcd0:	f884 8004 	strb.w	r8, [r4, #4]
	return 0;
    dcd4:	e7ef      	b.n	dcb6 <bt_mesh_app_key_set+0x36>
		memcpy(app->keys[1].val, new_key, 16);
    dcd6:	4641      	mov	r1, r8
    dcd8:	2210      	movs	r2, #16
    dcda:	f104 0017 	add.w	r0, r4, #23
    dcde:	f018 fe60 	bl	269a2 <memcpy>
    dce2:	f104 0116 	add.w	r1, r4, #22
    dce6:	4640      	mov	r0, r8
    dce8:	f001 f900 	bl	eeec <bt_mesh_k4>
		if (bt_mesh_app_id(new_key, &app->keys[1].id)) {
    dcec:	2800      	cmp	r0, #0
    dcee:	d0e8      	beq.n	dcc2 <bt_mesh_app_key_set+0x42>
    dcf0:	e7df      	b.n	dcb2 <bt_mesh_app_key_set+0x32>
		return 0;
    dcf2:	2500      	movs	r5, #0
    dcf4:	e7df      	b.n	dcb6 <bt_mesh_app_key_set+0x36>
		return -ENOMEM;
    dcf6:	f06f 050b 	mvn.w	r5, #11
    dcfa:	e7dc      	b.n	dcb6 <bt_mesh_app_key_set+0x36>
    dcfc:	20000b50 	.word	0x20000b50

0000dd00 <bt_mesh_app_key_exists>:
		if (apps[i].app_idx == app_idx) {
    dd00:	4b02      	ldr	r3, [pc, #8]	; (dd0c <bt_mesh_app_key_exists+0xc>)
    dd02:	885b      	ldrh	r3, [r3, #2]
}
    dd04:	1a1b      	subs	r3, r3, r0
    dd06:	4258      	negs	r0, r3
    dd08:	4158      	adcs	r0, r3
    dd0a:	4770      	bx	lr
    dd0c:	20000b50 	.word	0x20000b50

0000dd10 <bt_mesh_app_keys_get>:
{
    dd10:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    dd12:	2500      	movs	r5, #0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    dd14:	4f0d      	ldr	r7, [pc, #52]	; (dd4c <bt_mesh_app_keys_get+0x3c>)
{
    dd16:	4604      	mov	r4, r0
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    dd18:	f64f 7cff 	movw	ip, #65535	; 0xffff
	size_t count = 0;
    dd1c:	4628      	mov	r0, r5
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    dd1e:	887e      	ldrh	r6, [r7, #2]
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
    dd20:	b105      	cbz	r5, dd24 <bt_mesh_app_keys_get+0x14>
}
    dd22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    dd24:	4566      	cmp	r6, ip
    dd26:	d0fc      	beq.n	dd22 <bt_mesh_app_keys_get+0x12>
		if (net_idx != BT_MESH_KEY_ANY && app->net_idx != net_idx) {
    dd28:	4564      	cmp	r4, ip
    dd2a:	d002      	beq.n	dd32 <bt_mesh_app_keys_get+0x22>
    dd2c:	883d      	ldrh	r5, [r7, #0]
    dd2e:	42a5      	cmp	r5, r4
    dd30:	d101      	bne.n	dd36 <bt_mesh_app_keys_get+0x26>
		if (skip) {
    dd32:	b113      	cbz	r3, dd3a <bt_mesh_app_keys_get+0x2a>
			skip--;
    dd34:	3b01      	subs	r3, #1
		app_idxs[count++] = app->app_idx;
    dd36:	2501      	movs	r5, #1
    dd38:	e7f1      	b.n	dd1e <bt_mesh_app_keys_get+0xe>
		if (count >= max) {
    dd3a:	4290      	cmp	r0, r2
    dd3c:	d203      	bcs.n	dd46 <bt_mesh_app_keys_get+0x36>
		app_idxs[count++] = app->app_idx;
    dd3e:	f821 6010 	strh.w	r6, [r1, r0, lsl #1]
    dd42:	3001      	adds	r0, #1
    dd44:	e7f7      	b.n	dd36 <bt_mesh_app_keys_get+0x26>
			return -ENOMEM;
    dd46:	f06f 000b 	mvn.w	r0, #11
    dd4a:	e7ea      	b.n	dd22 <bt_mesh_app_keys_get+0x12>
    dd4c:	20000b50 	.word	0x20000b50

0000dd50 <bt_mesh_keys_resolve>:
{
    dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd54:	4615      	mov	r5, r2
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    dd56:	8842      	ldrh	r2, [r0, #2]
{
    dd58:	461e      	mov	r6, r3
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    dd5a:	1cd3      	adds	r3, r2, #3
    dd5c:	b29b      	uxth	r3, r3
    dd5e:	2b01      	cmp	r3, #1
{
    dd60:	4604      	mov	r4, r0
    dd62:	460f      	mov	r7, r1
	if (BT_MESH_IS_DEV_KEY(ctx->app_idx)) {
    dd64:	d908      	bls.n	dd78 <bt_mesh_keys_resolve+0x28>
		if (apps[i].app_idx == app_idx) {
    dd66:	4c1e      	ldr	r4, [pc, #120]	; (dde0 <bt_mesh_keys_resolve+0x90>)
    dd68:	8863      	ldrh	r3, [r4, #2]
    dd6a:	4293      	cmp	r3, r2
    dd6c:	46a0      	mov	r8, r4
    dd6e:	d01f      	beq.n	ddb0 <bt_mesh_keys_resolve+0x60>
		return -EINVAL;
    dd70:	f06f 0015 	mvn.w	r0, #21
}
    dd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*sub = bt_mesh_subnet_get(ctx->net_idx);
    dd78:	8800      	ldrh	r0, [r0, #0]
    dd7a:	f7ff fda1 	bl	d8c0 <bt_mesh_subnet_get>
    dd7e:	6038      	str	r0, [r7, #0]
		if (!*sub) {
    dd80:	2800      	cmp	r0, #0
    dd82:	d0f5      	beq.n	dd70 <bt_mesh_keys_resolve+0x20>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    dd84:	8862      	ldrh	r2, [r4, #2]
    dd86:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    dd8a:	429a      	cmp	r2, r3
    dd8c:	d10d      	bne.n	ddaa <bt_mesh_keys_resolve+0x5a>
		    !bt_mesh_elem_find(ctx->addr)) {
    dd8e:	88a0      	ldrh	r0, [r4, #4]
    dd90:	f001 fa7e 	bl	f290 <bt_mesh_elem_find>
		if (ctx->app_idx == BT_MESH_KEY_DEV_REMOTE &&
    dd94:	b948      	cbnz	r0, ddaa <bt_mesh_keys_resolve+0x5a>
			node = bt_mesh_cdb_node_get(ctx->addr);
    dd96:	88a0      	ldrh	r0, [r4, #4]
    dd98:	f005 f840 	bl	12e1c <bt_mesh_cdb_node_get>
			if (!node) {
    dd9c:	2800      	cmp	r0, #0
    dd9e:	d0e7      	beq.n	dd70 <bt_mesh_keys_resolve+0x20>
			*app_key = node->dev_key;
    dda0:	3015      	adds	r0, #21
    dda2:	6028      	str	r0, [r5, #0]
		*aid = 0;
    dda4:	2000      	movs	r0, #0
    dda6:	7030      	strb	r0, [r6, #0]
		return 0;
    dda8:	e7e4      	b.n	dd74 <bt_mesh_keys_resolve+0x24>
			*app_key = bt_mesh.dev_key;
    ddaa:	4b0e      	ldr	r3, [pc, #56]	; (dde4 <bt_mesh_keys_resolve+0x94>)
    ddac:	602b      	str	r3, [r5, #0]
    ddae:	e7f9      	b.n	dda4 <bt_mesh_keys_resolve+0x54>
	*sub = bt_mesh_subnet_get(app->net_idx);
    ddb0:	8820      	ldrh	r0, [r4, #0]
    ddb2:	f7ff fd85 	bl	d8c0 <bt_mesh_subnet_get>
    ddb6:	6038      	str	r0, [r7, #0]
	if (!*sub) {
    ddb8:	2800      	cmp	r0, #0
    ddba:	d0d9      	beq.n	dd70 <bt_mesh_keys_resolve+0x20>
	if ((*sub)->kr_phase == BT_MESH_KR_PHASE_2 && app->updated) {
    ddbc:	7f83      	ldrb	r3, [r0, #30]
    ddbe:	2b02      	cmp	r3, #2
    ddc0:	d107      	bne.n	ddd2 <bt_mesh_keys_resolve+0x82>
    ddc2:	7923      	ldrb	r3, [r4, #4]
    ddc4:	b12b      	cbz	r3, ddd2 <bt_mesh_keys_resolve+0x82>
		*aid = app->keys[1].id;
    ddc6:	7da3      	ldrb	r3, [r4, #22]
    ddc8:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[1].val;
    ddca:	3417      	adds	r4, #23
    ddcc:	602c      	str	r4, [r5, #0]
	return 0;
    ddce:	2000      	movs	r0, #0
    ddd0:	e7d0      	b.n	dd74 <bt_mesh_keys_resolve+0x24>
		*aid = app->keys[0].id;
    ddd2:	f898 3005 	ldrb.w	r3, [r8, #5]
    ddd6:	7033      	strb	r3, [r6, #0]
		*app_key = app->keys[0].val;
    ddd8:	4b03      	ldr	r3, [pc, #12]	; (dde8 <bt_mesh_keys_resolve+0x98>)
    ddda:	602b      	str	r3, [r5, #0]
    dddc:	e7f7      	b.n	ddce <bt_mesh_keys_resolve+0x7e>
    ddde:	bf00      	nop
    dde0:	20000b50 	.word	0x20000b50
    dde4:	20001600 	.word	0x20001600
    dde8:	20000b56 	.word	0x20000b56

0000ddec <bt_mesh_app_key_find>:
{
    ddec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ddee:	9f06      	ldr	r7, [sp, #24]
    ddf0:	4614      	mov	r4, r2
    ddf2:	461e      	mov	r6, r3
	if (dev_key) {
    ddf4:	b328      	cbz	r0, de42 <bt_mesh_app_key_find+0x56>
		if (IS_ENABLED(CONFIG_BT_MESH_CDB) &&
    ddf6:	7d13      	ldrb	r3, [r2, #20]
    ddf8:	f003 0330 	and.w	r3, r3, #48	; 0x30
    ddfc:	2b10      	cmp	r3, #16
    ddfe:	d106      	bne.n	de0e <bt_mesh_app_key_find+0x22>
		if (BT_MESH_ADDR_IS_UNICAST(rx->ctx.recv_dst)) {
    de00:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
    de04:	2b00      	cmp	r3, #0
    de06:	dc11      	bgt.n	de2c <bt_mesh_app_key_find+0x40>
		return BT_MESH_KEY_UNUSED;
    de08:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    de0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			node = bt_mesh_cdb_node_get(rx->ctx.addr);
    de0e:	8910      	ldrh	r0, [r2, #8]
    de10:	f005 f804 	bl	12e1c <bt_mesh_cdb_node_get>
			if (node && !cb(rx, node->dev_key, cb_data)) {
    de14:	2800      	cmp	r0, #0
    de16:	d0f3      	beq.n	de00 <bt_mesh_app_key_find+0x14>
    de18:	f100 0115 	add.w	r1, r0, #21
    de1c:	463a      	mov	r2, r7
    de1e:	4620      	mov	r0, r4
    de20:	47b0      	blx	r6
    de22:	2800      	cmp	r0, #0
    de24:	d1ec      	bne.n	de00 <bt_mesh_app_key_find+0x14>
				return BT_MESH_KEY_DEV_REMOTE;
    de26:	f64f 70fd 	movw	r0, #65533	; 0xfffd
    de2a:	e7ef      	b.n	de0c <bt_mesh_app_key_find+0x20>
			err = cb(rx, bt_mesh.dev_key, cb_data);
    de2c:	4915      	ldr	r1, [pc, #84]	; (de84 <bt_mesh_app_key_find+0x98>)
    de2e:	463a      	mov	r2, r7
    de30:	4620      	mov	r0, r4
    de32:	47b0      	blx	r6
			if (!err) {
    de34:	2800      	cmp	r0, #0
    de36:	d1e7      	bne.n	de08 <bt_mesh_app_key_find+0x1c>
				return BT_MESH_KEY_DEV_LOCAL;
    de38:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    de3c:	e7e6      	b.n	de0c <bt_mesh_app_key_find+0x20>
			cred = &app->keys[0];
    de3e:	1d6b      	adds	r3, r5, #5
    de40:	e014      	b.n	de6c <bt_mesh_app_key_find+0x80>
		if (app->app_idx == BT_MESH_KEY_UNUSED) {
    de42:	4d11      	ldr	r5, [pc, #68]	; (de88 <bt_mesh_app_key_find+0x9c>)
    de44:	886a      	ldrh	r2, [r5, #2]
    de46:	f64f 73ff 	movw	r3, #65535	; 0xffff
    de4a:	429a      	cmp	r2, r3
    de4c:	d0dc      	beq.n	de08 <bt_mesh_app_key_find+0x1c>
		if (app->net_idx != rx->sub->net_idx) {
    de4e:	6823      	ldr	r3, [r4, #0]
    de50:	882a      	ldrh	r2, [r5, #0]
    de52:	8b9b      	ldrh	r3, [r3, #28]
    de54:	429a      	cmp	r2, r3
    de56:	d1d7      	bne.n	de08 <bt_mesh_app_key_find+0x1c>
		if (rx->new_key && app->updated) {
    de58:	7d23      	ldrb	r3, [r4, #20]
    de5a:	079b      	lsls	r3, r3, #30
    de5c:	d5ef      	bpl.n	de3e <bt_mesh_app_key_find+0x52>
    de5e:	7928      	ldrb	r0, [r5, #4]
			cred = &app->keys[1];
    de60:	1d6b      	adds	r3, r5, #5
    de62:	f105 0216 	add.w	r2, r5, #22
    de66:	2800      	cmp	r0, #0
    de68:	bf18      	it	ne
    de6a:	4613      	movne	r3, r2
		if (cred->id != aid) {
    de6c:	781a      	ldrb	r2, [r3, #0]
    de6e:	428a      	cmp	r2, r1
    de70:	d1ca      	bne.n	de08 <bt_mesh_app_key_find+0x1c>
		err = cb(rx, cred->val, cb_data);
    de72:	463a      	mov	r2, r7
    de74:	1c59      	adds	r1, r3, #1
    de76:	4620      	mov	r0, r4
    de78:	47b0      	blx	r6
		if (err) {
    de7a:	2800      	cmp	r0, #0
    de7c:	d1c4      	bne.n	de08 <bt_mesh_app_key_find+0x1c>
		return app->app_idx;
    de7e:	8868      	ldrh	r0, [r5, #2]
    de80:	e7c4      	b.n	de0c <bt_mesh_app_key_find+0x20>
    de82:	bf00      	nop
    de84:	20001600 	.word	0x20001600
    de88:	20000b50 	.word	0x20000b50

0000de8c <bt_mesh_app_keys_reset>:
void bt_mesh_app_keys_reset(void)
{
	for (int i = 0; i < ARRAY_SIZE(apps); i++) {
		struct bt_mesh_app_key *app = &apps[i];

		if (app->app_idx != BT_MESH_KEY_UNUSED) {
    de8c:	4804      	ldr	r0, [pc, #16]	; (dea0 <bt_mesh_app_keys_reset+0x14>)
    de8e:	8842      	ldrh	r2, [r0, #2]
    de90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    de94:	429a      	cmp	r2, r3
    de96:	d001      	beq.n	de9c <bt_mesh_app_keys_reset+0x10>
			app_key_del(app);
    de98:	f01b be8b 	b.w	29bb2 <app_key_del>
		}
	}
}
    de9c:	4770      	bx	lr
    de9e:	bf00      	nop
    dea0:	20000b50 	.word	0x20000b50

0000dea4 <k_delayed_work_submit>:
{
    dea4:	4601      	mov	r1, r0
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dea6:	4801      	ldr	r0, [pc, #4]	; (deac <k_delayed_work_submit+0x8>)
    dea8:	f015 bf60 	b.w	23d6c <k_delayed_work_submit_to_queue>
    deac:	20001fd8 	.word	0x20001fd8

0000deb0 <sdu_recv>:
}

static int sdu_recv(struct bt_mesh_net_rx *rx, uint8_t hdr, uint8_t aszmic,
		    struct net_buf_simple *buf, struct net_buf_simple *sdu,
		    struct seg_rx *seg ,int8_t rssi)
{
    deb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    deb4:	4604      	mov	r4, r0
    deb6:	b08a      	sub	sp, #40	; 0x28
    deb8:	460d      	mov	r5, r1
    deba:	4690      	mov	r8, r2
	struct decrypt_ctx ctx = {
    debc:	2100      	movs	r1, #0
    debe:	2210      	movs	r2, #16
    dec0:	a803      	add	r0, sp, #12
{
    dec2:	461f      	mov	r7, r3
    dec4:	9e10      	ldr	r6, [sp, #64]	; 0x40
	struct decrypt_ctx ctx = {
    dec6:	f018 fd97 	bl	269f8 <memset>
    deca:	8923      	ldrh	r3, [r4, #8]
    decc:	f8ad 300a 	strh.w	r3, [sp, #10]
    ded0:	6923      	ldr	r3, [r4, #16]
    ded2:	9304      	str	r3, [sp, #16]
			.dev_key = !AKF(&hdr),
			.aszmic = aszmic,
			.src = rx->ctx.addr,
			.dst = rx->ctx.recv_dst,
			.seq_num = rx->seq,
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    ded4:	7d23      	ldrb	r3, [r4, #20]
			.dst = rx->ctx.recv_dst,
    ded6:	8962      	ldrh	r2, [r4, #10]
	struct decrypt_ctx ctx = {
    ded8:	f8ad 200c 	strh.w	r2, [sp, #12]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    dedc:	f003 0101 	and.w	r1, r3, #1
    dee0:	4b16      	ldr	r3, [pc, #88]	; (df3c <sdu_recv+0x8c>)
	struct decrypt_ctx ctx = {
    dee2:	f88d 8009 	strb.w	r8, [sp, #9]
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    dee6:	681b      	ldr	r3, [r3, #0]
		BT_DBG("Ignoring PDU for LPN 0x%04x of this Friend",
		       rx->ctx.recv_dst);
		return 0;
	}

	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    dee8:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
			.iv_index = BT_MESH_NET_IVI_RX(rx),
    deec:	1a5b      	subs	r3, r3, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(rx->ctx.recv_dst)) {
    deee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	struct decrypt_ctx ctx = {
    def2:	9305      	str	r3, [sp, #20]
    def4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    def6:	9309      	str	r3, [sp, #36]	; 0x24
		ctx.crypto.ad = bt_mesh_va_label_get(rx->ctx.recv_dst);
    def8:	bf3c      	itt	cc
    defa:	2300      	movcc	r3, #0
    defc:	9306      	strcc	r3, [sp, #24]
			.dev_key = !AKF(&hdr),
    defe:	ea6f 1095 	mvn.w	r0, r5, lsr #6
	}

	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    df02:	ab02      	add	r3, sp, #8
			.dev_key = !AKF(&hdr),
    df04:	f000 0001 	and.w	r0, r0, #1
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    df08:	9300      	str	r3, [sp, #0]
    df0a:	4622      	mov	r2, r4
    df0c:	4b0c      	ldr	r3, [pc, #48]	; (df40 <sdu_recv+0x90>)
	struct decrypt_ctx ctx = {
    df0e:	f88d 0008 	strb.w	r0, [sp, #8]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    df12:	f005 013f 	and.w	r1, r5, #63	; 0x3f
	struct decrypt_ctx ctx = {
    df16:	e9cd 7607 	strd	r7, r6, [sp, #28]
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    df1a:	f7ff ff67 	bl	ddec <bt_mesh_app_key_find>
					       rx, sdu_try_decrypt, &ctx);
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    df1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df22:	4298      	cmp	r0, r3
	rx->ctx.app_idx = bt_mesh_app_key_find(ctx.crypto.dev_key, AID(&hdr),
    df24:	80e0      	strh	r0, [r4, #6]
	if (rx->ctx.app_idx == BT_MESH_KEY_UNUSED) {
    df26:	d005      	beq.n	df34 <sdu_recv+0x84>
		return 0;
	}

	BT_DBG("Decrypted (AppIdx: 0x%03x)", rx->ctx.app_idx);

	bt_mesh_model_recv(rx, sdu,rssi);
    df28:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    df2c:	4631      	mov	r1, r6
    df2e:	4620      	mov	r0, r4
    df30:	f001 f9ee 	bl	f310 <bt_mesh_model_recv>

	return 0;
}
    df34:	2000      	movs	r0, #0
    df36:	b00a      	add	sp, #40	; 0x28
    df38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df3c:	200015a8 	.word	0x200015a8
    df40:	00029cef 	.word	0x00029cef

0000df44 <seg_rx_reset>:
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
				NULL, NULL);
}

static void seg_rx_reset(struct seg_rx *rx, bool full_reset)
{
    df44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    df48:	4604      	mov	r4, r0
	int i;

	BT_DBG("rx %p", rx);

	k_delayed_work_cancel(&rx->ack);
    df4a:	3030      	adds	r0, #48	; 0x30
{
    df4c:	460f      	mov	r7, r1
	k_delayed_work_cancel(&rx->ack);
    df4e:	f01f fb31 	bl	2d5b4 <k_delayed_work_cancel>
		BT_WARN("Clearing incomplete buffers from Friend queue");
		bt_mesh_friend_clear_incomplete(rx->sub, rx->src, rx->dst,
						&rx->seq_auth);
	}

	for (i = 0; i <= rx->seg_n; i++) {
    df52:	2600      	movs	r6, #0
		if (!rx->seg[i]) {
			continue;
		}

		k_mem_slab_free(&segs, &rx->seg[i]);
    df54:	f8df 803c 	ldr.w	r8, [pc, #60]	; df94 <seg_rx_reset+0x50>
    df58:	1d25      	adds	r5, r4, #4
		rx->seg[i] = NULL;
    df5a:	46b1      	mov	r9, r6
		if (!rx->seg[i]) {
    df5c:	682b      	ldr	r3, [r5, #0]
    df5e:	4629      	mov	r1, r5
    df60:	3504      	adds	r5, #4
    df62:	b123      	cbz	r3, df6e <seg_rx_reset+0x2a>
		k_mem_slab_free(&segs, &rx->seg[i]);
    df64:	4640      	mov	r0, r8
    df66:	f015 f905 	bl	23174 <k_mem_slab_free>
		rx->seg[i] = NULL;
    df6a:	f845 9c04 	str.w	r9, [r5, #-4]
	for (i = 0; i <= rx->seg_n; i++) {
    df6e:	7fe3      	ldrb	r3, [r4, #31]
    df70:	3601      	adds	r6, #1
    df72:	f003 021f 	and.w	r2, r3, #31
    df76:	42b2      	cmp	r2, r6
    df78:	daf0      	bge.n	df5c <seg_rx_reset+0x18>
	}

	rx->in_use = 0U;
    df7a:	f36f 1386 	bfc	r3, #6, #1
    df7e:	77e3      	strb	r3, [r4, #31]

	/* We don't always reset these values since we need to be able to
	 * send an ack if we receive a segment after we've already received
	 * the full SDU.
	 */
	if (full_reset) {
    df80:	b137      	cbz	r7, df90 <seg_rx_reset+0x4c>
		rx->seq_auth = 0U;
    df82:	2000      	movs	r0, #0
    df84:	2100      	movs	r1, #0
    df86:	e9c4 0104 	strd	r0, r1, [r4, #16]
		rx->sub = NULL;
    df8a:	2300      	movs	r3, #0
    df8c:	6023      	str	r3, [r4, #0]
		rx->src = BT_MESH_ADDR_UNASSIGNED;
    df8e:	61a3      	str	r3, [r4, #24]
		rx->dst = BT_MESH_ADDR_UNASSIGNED;
	}
}
    df90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df94:	20000d58 	.word	0x20000d58

0000df98 <seg_tx_reset>:
{
    df98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df9c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&tx->retransmit);
    df9e:	3040      	adds	r0, #64	; 0x40
    dfa0:	f01f fb08 	bl	2d5b4 <k_delayed_work_cancel>
	tx->cb = NULL;
    dfa4:	2500      	movs	r5, #0
	tx->blocked = false;
    dfa6:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    dfaa:	4f20      	ldr	r7, [pc, #128]	; (e02c <seg_tx_reset+0x94>)
	tx->sub = NULL;
    dfac:	6025      	str	r5, [r4, #0]
	tx->seq_auth = 0U;
    dfae:	2000      	movs	r0, #0
    dfb0:	2100      	movs	r1, #0
	tx->cb_data = NULL;
    dfb2:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
	tx->seq_auth = 0U;
    dfb6:	e9c4 0108 	strd	r0, r1, [r4, #32]
	tx->blocked = false;
    dfba:	f365 0200 	bfi	r2, r5, #0, #1
	tx->src = BT_MESH_ADDR_UNASSIGNED;
    dfbe:	62a5      	str	r5, [r4, #40]	; 0x28
	tx->blocked = false;
    dfc0:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    dfc4:	1d26      	adds	r6, r4, #4
	tx->seg[seg_idx] = NULL;
    dfc6:	46a8      	mov	r8, r5
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    dfc8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    dfcc:	b19b      	cbz	r3, dff6 <seg_tx_reset+0x5e>
		if (!tx->seg[i]) {
    dfce:	6833      	ldr	r3, [r6, #0]
    dfd0:	b153      	cbz	r3, dfe8 <seg_tx_reset+0x50>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    dfd2:	4631      	mov	r1, r6
    dfd4:	4638      	mov	r0, r7
    dfd6:	f015 f8cd 	bl	23174 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    dfda:	f8c6 8000 	str.w	r8, [r6]
	tx->nack_count--;
    dfde:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    dfe2:	3b01      	subs	r3, #1
    dfe4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	for (i = 0; i <= tx->seg_n && tx->nack_count; i++) {
    dfe8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    dfec:	3501      	adds	r5, #1
    dfee:	42ab      	cmp	r3, r5
    dff0:	f106 0604 	add.w	r6, r6, #4
    dff4:	dae8      	bge.n	dfc8 <seg_tx_reset+0x30>
	tx->nack_count = 0;
    dff6:	2100      	movs	r1, #0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dff8:	4b0d      	ldr	r3, [pc, #52]	; (e030 <seg_tx_reset+0x98>)
    dffa:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    dffe:	f3bf 8f5b 	dmb	ish
    e002:	e853 2f00 	ldrex	r2, [r3]
    e006:	f022 0020 	bic.w	r0, r2, #32
    e00a:	e843 0400 	strex	r4, r0, [r3]
    e00e:	2c00      	cmp	r4, #0
    e010:	d1f7      	bne.n	e002 <seg_tx_reset+0x6a>
    e012:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IVU_PENDING)) {
    e016:	0692      	lsls	r2, r2, #26
    e018:	d505      	bpl.n	e026 <seg_tx_reset+0x8e>
}
    e01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_mesh_net_iv_update(bt_mesh.iv_index, false);
    e01e:	f853 0c08 	ldr.w	r0, [r3, #-8]
    e022:	f7ff b851 	b.w	d0c8 <bt_mesh_net_iv_update>
}
    e026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e02a:	bf00      	nop
    e02c:	20000d58 	.word	0x20000d58
    e030:	200015b0 	.word	0x200015b0

0000e034 <seg_tx_complete>:
{
    e034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e038:	460d      	mov	r5, r1
    e03a:	4922      	ldr	r1, [pc, #136]	; (e0c4 <seg_tx_complete+0x90>)
	void *cb_data = tx->cb_data;
    e03c:	e9d0 760e 	ldrd	r7, r6, [r0, #56]	; 0x38
{
    e040:	4604      	mov	r4, r0
	struct seg_tx *blocked = NULL;
    e042:	2000      	movs	r0, #0
	for (i = 0; i < ARRAY_SIZE(seg_tx); ++i) {
    e044:	4684      	mov	ip, r0
    e046:	468e      	mov	lr, r1
		    seg_tx[i].blocked &&
    e048:	f04f 0a70 	mov.w	sl, #112	; 0x70
		if (&seg_tx[i] != tx &&
    e04c:	428c      	cmp	r4, r1
    e04e:	d017      	beq.n	e080 <seg_tx_complete+0x4c>
		    seg_tx[i].blocked &&
    e050:	fb0a e30c 	mla	r3, sl, ip, lr
    e054:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
		if (&seg_tx[i] != tx &&
    e058:	07db      	lsls	r3, r3, #31
    e05a:	d511      	bpl.n	e080 <seg_tx_complete+0x4c>
	return (tx->src == src) && (tx->dst == dst);
    e05c:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    e05e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e060:	429a      	cmp	r2, r3
    e062:	d10d      	bne.n	e080 <seg_tx_complete+0x4c>
    e064:	8d4a      	ldrh	r2, [r1, #42]	; 0x2a
    e066:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    e068:	429a      	cmp	r2, r3
    e06a:	d109      	bne.n	e080 <seg_tx_complete+0x4c>
		    seg_tx_blocks(tx, seg_tx[i].src, seg_tx[i].dst) &&
    e06c:	b330      	cbz	r0, e0bc <seg_tx_complete+0x88>
		    (!blocked || seg_tx[i].seq_auth < blocked->seq_auth)) {
    e06e:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
    e072:	e9d1 8908 	ldrd	r8, r9, [r1, #32]
    e076:	4599      	cmp	r9, r3
    e078:	bf08      	it	eq
    e07a:	4590      	cmpeq	r8, r2
    e07c:	bf38      	it	cc
    e07e:	4608      	movcc	r0, r1
	for (i = 0; i < ARRAY_SIZE(seg_tx); ++i) {
    e080:	f10c 0c01 	add.w	ip, ip, #1
    e084:	f1bc 0f03 	cmp.w	ip, #3
    e088:	f101 0170 	add.w	r1, r1, #112	; 0x70
    e08c:	d1de      	bne.n	e04c <seg_tx_complete+0x18>
	if (blocked) {
    e08e:	b150      	cbz	r0, e0a6 <seg_tx_complete+0x72>
		blocked->blocked = false;
    e090:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
    e094:	f36f 0300 	bfc	r3, #0, #1
    e098:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
		k_delayed_work_submit(&blocked->retransmit, K_NO_WAIT);
    e09c:	2200      	movs	r2, #0
    e09e:	2300      	movs	r3, #0
    e0a0:	3040      	adds	r0, #64	; 0x40
    e0a2:	f7ff feff 	bl	dea4 <k_delayed_work_submit>
	seg_tx_reset(tx);
    e0a6:	4620      	mov	r0, r4
    e0a8:	f7ff ff76 	bl	df98 <seg_tx_reset>
	if (cb && cb->end) {
    e0ac:	b147      	cbz	r7, e0c0 <seg_tx_complete+0x8c>
    e0ae:	687b      	ldr	r3, [r7, #4]
    e0b0:	b133      	cbz	r3, e0c0 <seg_tx_complete+0x8c>
		cb->end(err, cb_data);
    e0b2:	4631      	mov	r1, r6
    e0b4:	4628      	mov	r0, r5
}
    e0b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		cb->end(err, cb_data);
    e0ba:	4718      	bx	r3
    e0bc:	4608      	mov	r0, r1
    e0be:	e7df      	b.n	e080 <seg_tx_complete+0x4c>
}
    e0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0c4:	20001730 	.word	0x20001730

0000e0c8 <seg_tx_send_unacked>:
{
    e0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!tx->nack_count) {
    e0cc:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
    e0d0:	b086      	sub	sp, #24
    e0d2:	4604      	mov	r4, r0
	if (!tx->nack_count) {
    e0d4:	b393      	cbz	r3, e13c <seg_tx_send_unacked+0x74>
		.net_idx = tx->sub->net_idx,
    e0d6:	6801      	ldr	r1, [r0, #0]
	struct bt_mesh_net_tx net_tx = {
    e0d8:	9103      	str	r1, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
    e0da:	2300      	movs	r3, #0
    e0dc:	2501      	movs	r5, #1
    e0de:	f8cd 3006 	str.w	r3, [sp, #6]
    e0e2:	8b8b      	ldrh	r3, [r1, #28]
    e0e4:	f8ad 3000 	strh.w	r3, [sp]
	struct bt_mesh_net_tx net_tx = {
    e0e8:	8d01      	ldrh	r1, [r0, #40]	; 0x28
	struct bt_mesh_msg_ctx ctx = {
    e0ea:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
    e0ee:	f88d 500a 	strb.w	r5, [sp, #10]
    e0f2:	f890 5034 	ldrb.w	r5, [r0, #52]	; 0x34
    e0f6:	f88d 500b 	strb.w	r5, [sp, #11]
	struct bt_mesh_net_tx net_tx = {
    e0fa:	f8ad 1014 	strh.w	r1, [sp, #20]
    e0fe:	f890 502e 	ldrb.w	r5, [r0, #46]	; 0x2e
    e102:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    e106:	f88d 1016 	strb.w	r1, [sp, #22]
		.friend_cred = tx->friend_cred,
    e10a:	f3c3 1140 	ubfx	r1, r3, #5, #1
	struct bt_mesh_net_tx net_tx = {
    e10e:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
	struct bt_mesh_msg_ctx ctx = {
    e112:	f343 0240 	sbfx	r2, r3, #1, #1
	struct bt_mesh_net_tx net_tx = {
    e116:	f88d 1017 	strb.w	r1, [sp, #23]
	if (!tx->attempts) {
    e11a:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
	struct bt_mesh_msg_ctx ctx = {
    e11e:	f8ad 2002 	strh.w	r2, [sp, #2]
		.addr = tx->dst,
    e122:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
	struct bt_mesh_msg_ctx ctx = {
    e124:	f8ad 2004 	strh.w	r2, [sp, #4]
	struct bt_mesh_net_tx net_tx = {
    e128:	f8cd d010 	str.w	sp, [sp, #16]
	if (!tx->attempts) {
    e12c:	b949      	cbnz	r1, e142 <seg_tx_send_unacked+0x7a>
		if (BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    e12e:	b212      	sxth	r2, r2
    e130:	2a00      	cmp	r2, #0
			seg_tx_complete(tx, -ETIMEDOUT);
    e132:	bfc8      	it	gt
    e134:	f06f 013b 	mvngt.w	r1, #59	; 0x3b
			seg_tx_complete(tx, 0);
    e138:	f7ff ff7c 	bl	e034 <seg_tx_complete>
}
    e13c:	b006      	add	sp, #24
    e13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	tx->sending = 1U;
    e142:	f043 0310 	orr.w	r3, r3, #16
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    e146:	f8df 8158 	ldr.w	r8, [pc, #344]	; e2a0 <seg_tx_send_unacked+0x1d8>
	tx->sending = 1U;
    e14a:	f880 3036 	strb.w	r3, [r0, #54]	; 0x36
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    e14e:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    e152:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    e156:	429a      	cmp	r2, r3
    e158:	d208      	bcs.n	e16c <seg_tx_send_unacked+0xa4>
	tx->seg_o = 0U;
    e15a:	2300      	movs	r3, #0
    e15c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	tx->attempts--;
    e160:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e164:	3b01      	subs	r3, #1
    e166:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    e16a:	e067      	b.n	e23c <seg_tx_send_unacked+0x174>
		if (!tx->seg[tx->seg_o]) {
    e16c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    e170:	685b      	ldr	r3, [r3, #4]
    e172:	b92b      	cbnz	r3, e180 <seg_tx_send_unacked+0xb8>
	for (; tx->seg_o <= tx->seg_n; tx->seg_o++) {
    e174:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    e178:	3301      	adds	r3, #1
    e17a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    e17e:	e7e6      	b.n	e14e <seg_tx_send_unacked+0x86>
		seg = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit,
    e180:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    e184:	2200      	movs	r2, #0
    e186:	2300      	movs	r3, #0
    e188:	2001      	movs	r0, #1
    e18a:	f7fe fbe5 	bl	c958 <bt_mesh_adv_create>
		if (!seg) {
    e18e:	4607      	mov	r7, r0
    e190:	2800      	cmp	r0, #0
    e192:	d053      	beq.n	e23c <seg_tx_send_unacked+0x174>
		net_buf_reserve(seg, BT_MESH_NET_HDR_LEN);
    e194:	f100 0508 	add.w	r5, r0, #8
    e198:	2109      	movs	r1, #9
    e19a:	4628      	mov	r0, r5
    e19c:	f01d fef0 	bl	2bf80 <net_buf_simple_reserve>
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    e1a0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
		seg_tx_buf_build(tx, tx->seg_o, &seg->b);
    e1a4:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    e1a8:	f8b4 a020 	ldrh.w	sl, [r4, #32]
	net_buf_simple_add_u8(buf, tx->hdr);
    e1ac:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
		return BT_MESH_APP_SEG_SDU_MAX;
    e1b0:	f013 0f02 	tst.w	r3, #2
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    e1b4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		return BT_MESH_APP_SEG_SDU_MAX;
    e1b6:	bf14      	ite	ne
    e1b8:	f04f 0908 	movne.w	r9, #8
    e1bc:	f04f 090c 	moveq.w	r9, #12
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    e1c0:	fb09 3316 	mls	r3, r9, r6, r3
    e1c4:	4599      	cmp	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    e1c6:	4628      	mov	r0, r5
	uint8_t len = MIN(seg_len(tx->ctl), tx->len - (seg_len(tx->ctl) * seg_o));
    e1c8:	bfa8      	it	ge
    e1ca:	fa5f f983 	uxtbge.w	r9, r3
	net_buf_simple_add_u8(buf, tx->hdr);
    e1ce:	f01d ff73 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    e1d2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
	uint16_t seq_zero = tx->seq_auth & TRANS_SEQ_ZERO_MASK;
    e1d6:	f3ca 0a0c 	ubfx	sl, sl, #0, #13
	net_buf_simple_add_u8(buf, (tx->aszmic << 7) | seq_zero >> 6);
    e1da:	f3c3 0380 	ubfx	r3, r3, #2, #1
    e1de:	ea4f 119a 	mov.w	r1, sl, lsr #6
    e1e2:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
    e1e6:	4628      	mov	r0, r5
    e1e8:	f01d ff66 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, (((seq_zero & 0x3f) << 2) | (seg_o >> 3)));
    e1ec:	08f1      	lsrs	r1, r6, #3
    e1ee:	ea41 018a 	orr.w	r1, r1, sl, lsl #2
    e1f2:	b2c9      	uxtb	r1, r1
    e1f4:	4628      	mov	r0, r5
    e1f6:	f01d ff5f 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    e1fa:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    e1fe:	ea41 1146 	orr.w	r1, r1, r6, lsl #5
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    e202:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	net_buf_simple_add_u8(buf, ((seg_o & 0x07) << 5) | tx->seg_n);
    e206:	b2c9      	uxtb	r1, r1
    e208:	4628      	mov	r0, r5
    e20a:	f01d ff55 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(buf, tx->seg[seg_o], len);
    e20e:	6871      	ldr	r1, [r6, #4]
    e210:	464a      	mov	r2, r9
    e212:	4628      	mov	r0, r5
    e214:	f01d ff47 	bl	2c0a6 <net_buf_simple_add_mem>
		tx->seg_pending++;
    e218:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    e21c:	3301      	adds	r3, #1
    e21e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		err = bt_mesh_net_send(&net_tx, seg, &seg_sent_cb, tx);
    e222:	4642      	mov	r2, r8
    e224:	4623      	mov	r3, r4
    e226:	4639      	mov	r1, r7
    e228:	a803      	add	r0, sp, #12
    e22a:	f7ff f853 	bl	d2d4 <bt_mesh_net_send>
		if (err) {
    e22e:	2800      	cmp	r0, #0
    e230:	d0a0      	beq.n	e174 <seg_tx_send_unacked+0xac>
			tx->seg_pending--;
    e232:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    e236:	3b01      	subs	r3, #1
    e238:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	if (!tx->seg_pending) {
    e23c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    e240:	bb33      	cbnz	r3, e290 <seg_tx_send_unacked+0x1c8>
				      K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
    e242:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
    e246:	2b00      	cmp	r3, #0
    e248:	bfc1      	itttt	gt
    e24a:	f894 1034 	ldrbgt.w	r1, [r4, #52]	; 0x34
    e24e:	2232      	movgt	r2, #50	; 0x32
    e250:	f44f 73c8 	movgt.w	r3, #400	; 0x190
    e254:	fb12 3201 	smlabbgt	r2, r2, r1, r3
    e258:	bfce      	itee	gt
    e25a:	17d3      	asrgt	r3, r2, #31
    e25c:	2232      	movle	r2, #50	; 0x32
    e25e:	2300      	movle	r3, #0
    e260:	03d9      	lsls	r1, r3, #15
    e262:	03d0      	lsls	r0, r2, #15
    e264:	f240 36e7 	movw	r6, #999	; 0x3e7
    e268:	1980      	adds	r0, r0, r6
    e26a:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
    e26e:	f04f 0600 	mov.w	r6, #0
    e272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e276:	f04f 0300 	mov.w	r3, #0
    e27a:	eb46 0101 	adc.w	r1, r6, r1
    e27e:	f7f1 ff8f 	bl	1a0 <__aeabi_uldivmod>
		k_delayed_work_submit(&tx->retransmit,
    e282:	f104 0540 	add.w	r5, r4, #64	; 0x40
    e286:	4602      	mov	r2, r0
    e288:	460b      	mov	r3, r1
    e28a:	4628      	mov	r0, r5
    e28c:	f7ff fe0a 	bl	dea4 <k_delayed_work_submit>
	tx->sending = 0U;
    e290:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
    e294:	f36f 1304 	bfc	r3, #4, #1
    e298:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    e29c:	e74e      	b.n	e13c <seg_tx_send_unacked+0x74>
    e29e:	bf00      	nop
    e2a0:	0002e378 	.word	0x0002e378

0000e2a4 <ctl_recv>:
{
    e2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (ctl_op) {
    e2a8:	f011 047f 	ands.w	r4, r1, #127	; 0x7f
{
    e2ac:	b085      	sub	sp, #20
    e2ae:	4680      	mov	r8, r0
    e2b0:	4615      	mov	r5, r2
    e2b2:	4699      	mov	r9, r3
	switch (ctl_op) {
    e2b4:	d00a      	beq.n	e2cc <ctl_recv+0x28>
    e2b6:	2c0a      	cmp	r4, #10
    e2b8:	f000 80a8 	beq.w	e40c <ctl_recv+0x168>
	if (!rx->local_match) {
    e2bc:	7d03      	ldrb	r3, [r0, #20]
		return 0;
    e2be:	f013 0f40 	tst.w	r3, #64	; 0x40
    e2c2:	bf14      	ite	ne
    e2c4:	f06f 0701 	mvnne.w	r7, #1
    e2c8:	2700      	moveq	r7, #0
    e2ca:	e004      	b.n	e2d6 <ctl_recv+0x32>
	if (buf->len < 6) {
    e2cc:	8893      	ldrh	r3, [r2, #4]
    e2ce:	2b05      	cmp	r3, #5
    e2d0:	d805      	bhi.n	e2de <ctl_recv+0x3a>
		return -EINVAL;
    e2d2:	f06f 0715 	mvn.w	r7, #21
}
    e2d6:	4638      	mov	r0, r7
    e2d8:	b005      	add	sp, #20
    e2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	seq_zero = net_buf_simple_pull_be16(buf);
    e2de:	4610      	mov	r0, r2
    e2e0:	f01d ff6f 	bl	2c1c2 <net_buf_simple_pull_be16>
	obo = seq_zero >> 15;
    e2e4:	f3c0 33cf 	ubfx	r3, r0, #15, #16
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    e2e8:	f3c0 0b8c 	ubfx	fp, r0, #2, #13
	ack = net_buf_simple_pull_be32(buf);
    e2ec:	4628      	mov	r0, r5
	obo = seq_zero >> 15;
    e2ee:	9301      	str	r3, [sp, #4]
	ack = net_buf_simple_pull_be32(buf);
    e2f0:	f01d ff72 	bl	2c1d8 <net_buf_simple_pull_be32>
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    e2f4:	2100      	movs	r1, #0
	ack = net_buf_simple_pull_be32(buf);
    e2f6:	4605      	mov	r5, r0
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    e2f8:	fa1f f08b 	uxth.w	r0, fp
    e2fc:	4a53      	ldr	r2, [pc, #332]	; (e44c <ctl_recv+0x1a8>)
	tx = seg_tx_lookup(seq_zero, obo, rx->ctx.addr);
    e2fe:	f8b8 c008 	ldrh.w	ip, [r8, #8]
		if ((tx->seq_auth & TRANS_SEQ_ZERO_MASK) != seq_zero) {
    e302:	e9cd 0102 	strd	r0, r1, [sp, #8]
    e306:	4690      	mov	r8, r2
    e308:	46a6      	mov	lr, r4
    e30a:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    e30e:	e9d2 1008 	ldrd	r1, r0, [r2, #32]
    e312:	45de      	cmp	lr, fp
    e314:	f3c1 060c 	ubfx	r6, r1, #0, #13
    e318:	bf08      	it	eq
    e31a:	4556      	cmpeq	r6, sl
    e31c:	d122      	bne.n	e364 <ctl_recv+0xc0>
		if (tx->dst == addr) {
    e31e:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
    e320:	4563      	cmp	r3, ip
    e322:	d00d      	beq.n	e340 <ctl_recv+0x9c>
		if (obo && tx->nack_count == tx->seg_n + 1) {
    e324:	9b01      	ldr	r3, [sp, #4]
    e326:	b1eb      	cbz	r3, e364 <ctl_recv+0xc0>
    e328:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
    e32c:	f892 b032 	ldrb.w	fp, [r2, #50]	; 0x32
    e330:	3301      	adds	r3, #1
    e332:	459b      	cmp	fp, r3
    e334:	d116      	bne.n	e364 <ctl_recv+0xc0>
			tx->dst = addr;
    e336:	2370      	movs	r3, #112	; 0x70
    e338:	fb03 8304 	mla	r3, r3, r4, r8
    e33c:	f8a3 c02a 	strh.w	ip, [r3, #42]	; 0x2a
	if (!BT_MESH_ADDR_IS_UNICAST(tx->dst)) {
    e340:	2370      	movs	r3, #112	; 0x70
    e342:	4363      	muls	r3, r4
    e344:	eb08 0a03 	add.w	sl, r8, r3
    e348:	f9ba 202a 	ldrsh.w	r2, [sl, #42]	; 0x2a
    e34c:	2a00      	cmp	r2, #0
    e34e:	ddc0      	ble.n	e2d2 <ctl_recv+0x2e>
	*seq_auth = tx->seq_auth;
    e350:	e9c9 1000 	strd	r1, r0, [r9]
	if (!ack) {
    e354:	b965      	cbnz	r5, e370 <ctl_recv+0xcc>
		seg_tx_complete(tx, -ECANCELED);
    e356:	f06f 0147 	mvn.w	r1, #71	; 0x47
    e35a:	4650      	mov	r0, sl
    e35c:	f7ff fe6a 	bl	e034 <seg_tx_complete>
		return 0;
    e360:	2700      	movs	r7, #0
    e362:	e7b8      	b.n	e2d6 <ctl_recv+0x32>
	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
    e364:	3401      	adds	r4, #1
    e366:	2c03      	cmp	r4, #3
    e368:	f102 0270 	add.w	r2, r2, #112	; 0x70
    e36c:	d1cd      	bne.n	e30a <ctl_recv+0x66>
    e36e:	e7b0      	b.n	e2d2 <ctl_recv+0x2e>
	if (find_msb_set(ack) - 1 > tx->seg_n) {
    e370:	f89a 1030 	ldrb.w	r1, [sl, #48]	; 0x30
{
	if (op == 0) {
		return 0;
	}

	return 32 - __builtin_clz(op);
    e374:	fab5 f285 	clz	r2, r5
    e378:	f1c2 021f 	rsb	r2, r2, #31
    e37c:	428a      	cmp	r2, r1
    e37e:	d8a8      	bhi.n	e2d2 <ctl_recv+0x2e>
	k_delayed_work_cancel(&tx->retransmit);
    e380:	f103 0040 	add.w	r0, r3, #64	; 0x40
    e384:	4440      	add	r0, r8
    e386:	f01f f915 	bl	2d5b4 <k_delayed_work_cancel>
	while ((bit = find_lsb_set(ack))) {
    e38a:	f04f 091c 	mov.w	r9, #28
    e38e:	fb09 f904 	mul.w	r9, r9, r4
	tx->nack_count--;
    e392:	46d3      	mov	fp, sl
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    e394:	2d00      	cmp	r5, #0
    e396:	fa95 f6a5 	rbit	r6, r5
    e39a:	fab6 f686 	clz	r6, r6
    e39e:	bf08      	it	eq
    e3a0:	f04f 36ff 	moveq.w	r6, #4294967295
	while ((bit = find_lsb_set(ack))) {
    e3a4:	1c77      	adds	r7, r6, #1
    e3a6:	d109      	bne.n	e3bc <ctl_recv+0x118>
	if (tx->nack_count) {
    e3a8:	2170      	movs	r1, #112	; 0x70
    e3aa:	fb01 8404 	mla	r4, r1, r4, r8
    e3ae:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    e3b2:	b333      	cbz	r3, e402 <ctl_recv+0x15e>
		seg_tx_send_unacked(tx);
    e3b4:	4650      	mov	r0, sl
    e3b6:	f7ff fe87 	bl	e0c8 <seg_tx_send_unacked>
    e3ba:	e78c      	b.n	e2d6 <ctl_recv+0x32>
		if (tx->seg[bit - 1]) {
    e3bc:	271c      	movs	r7, #28
    e3be:	4367      	muls	r7, r4
    e3c0:	19bb      	adds	r3, r7, r6
    e3c2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    e3c6:	685b      	ldr	r3, [r3, #4]
    e3c8:	b1ab      	cbz	r3, e3f6 <ctl_recv+0x152>
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    e3ca:	f109 0101 	add.w	r1, r9, #1
    e3ce:	fa51 f186 	uxtab	r1, r1, r6
			seg_tx_done(tx, bit - 1);
    e3d2:	b2f3      	uxtb	r3, r6
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    e3d4:	481e      	ldr	r0, [pc, #120]	; (e450 <ctl_recv+0x1ac>)
			seg_tx_done(tx, bit - 1);
    e3d6:	9301      	str	r3, [sp, #4]
	k_mem_slab_free(&segs, (void **)&tx->seg[seg_idx]);
    e3d8:	eb08 0181 	add.w	r1, r8, r1, lsl #2
    e3dc:	f014 feca 	bl	23174 <k_mem_slab_free>
	tx->seg[seg_idx] = NULL;
    e3e0:	9b01      	ldr	r3, [sp, #4]
    e3e2:	441f      	add	r7, r3
    e3e4:	eb08 0787 	add.w	r7, r8, r7, lsl #2
    e3e8:	2300      	movs	r3, #0
    e3ea:	607b      	str	r3, [r7, #4]
	tx->nack_count--;
    e3ec:	f89b 3032 	ldrb.w	r3, [fp, #50]	; 0x32
    e3f0:	3b01      	subs	r3, #1
    e3f2:	f88b 3032 	strb.w	r3, [fp, #50]	; 0x32
		ack &= ~BIT(bit - 1);
    e3f6:	2301      	movs	r3, #1
    e3f8:	fa03 f606 	lsl.w	r6, r3, r6
    e3fc:	ea25 0506 	bic.w	r5, r5, r6
    e400:	e7c8      	b.n	e394 <ctl_recv+0xf0>
		seg_tx_complete(tx, 0);
    e402:	4639      	mov	r1, r7
    e404:	4650      	mov	r0, sl
    e406:	f7ff fe15 	bl	e034 <seg_tx_complete>
    e40a:	e764      	b.n	e2d6 <ctl_recv+0x32>
	if (buf->len < 3) {
    e40c:	8893      	ldrh	r3, [r2, #4]
    e40e:	2b02      	cmp	r3, #2
    e410:	f67f af5f 	bls.w	e2d2 <ctl_recv+0x2e>
	if (rx->ctx.recv_dst != hb_sub_dst) {
    e414:	4b0f      	ldr	r3, [pc, #60]	; (e454 <ctl_recv+0x1b0>)
    e416:	8942      	ldrh	r2, [r0, #10]
    e418:	881b      	ldrh	r3, [r3, #0]
    e41a:	429a      	cmp	r2, r3
    e41c:	d1a0      	bne.n	e360 <ctl_recv+0xbc>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    e41e:	4628      	mov	r0, r5
    e420:	f01d febf 	bl	2c1a2 <net_buf_simple_pull_u8>
    e424:	4604      	mov	r4, r0
	feat = net_buf_simple_pull_be16(buf);
    e426:	4628      	mov	r0, r5
    e428:	f01d fecb 	bl	2c1c2 <net_buf_simple_pull_be16>
	init_ttl = (net_buf_simple_pull_u8(buf) & 0x7f);
    e42c:	f004 027f 	and.w	r2, r4, #127	; 0x7f
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    e430:	f898 400d 	ldrb.w	r4, [r8, #13]
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    e434:	f8b8 100a 	ldrh.w	r1, [r8, #10]
	hops = (init_ttl - rx->ctx.recv_ttl + 1);
    e438:	1b12      	subs	r2, r2, r4
    e43a:	3201      	adds	r2, #1
	feat = net_buf_simple_pull_be16(buf);
    e43c:	4603      	mov	r3, r0
	bt_mesh_heartbeat(rx->ctx.addr, rx->ctx.recv_dst, hops, feat);
    e43e:	b2d2      	uxtb	r2, r2
    e440:	f8b8 0008 	ldrh.w	r0, [r8, #8]
    e444:	f001 fc32 	bl	fcac <bt_mesh_heartbeat>
	return 0;
    e448:	e78a      	b.n	e360 <ctl_recv+0xbc>
    e44a:	bf00      	nop
    e44c:	20001730 	.word	0x20001730
    e450:	20000d58 	.word	0x20000d58
    e454:	20009040 	.word	0x20009040

0000e458 <send_seg>:
{
    e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e45c:	b085      	sub	sp, #20
	bool blocked = false;
    e45e:	2500      	movs	r5, #0
{
    e460:	460e      	mov	r6, r1
    e462:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    e466:	4970      	ldr	r1, [pc, #448]	; (e628 <send_seg+0x1d0>)
	for (tx = NULL, i = 0; i < ARRAY_SIZE(seg_tx); i++) {
    e468:	462c      	mov	r4, r5
    e46a:	46ae      	mov	lr, r5
		if (seg_tx[i].nack_count) {
    e46c:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
    e470:	2f00      	cmp	r7, #0
    e472:	f000 8093 	beq.w	e59c <send_seg+0x144>
	return (tx->src == src) && (tx->dst == dst);
    e476:	f8b0 8008 	ldrh.w	r8, [r0, #8]
    e47a:	8d0f      	ldrh	r7, [r1, #40]	; 0x28
    e47c:	45b8      	cmp	r8, r7
    e47e:	f040 808b 	bne.w	e598 <send_seg+0x140>
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    e482:	6847      	ldr	r7, [r0, #4]
	return (tx->src == src) && (tx->dst == dst);
    e484:	f8b1 802a 	ldrh.w	r8, [r1, #42]	; 0x2a
    e488:	88bf      	ldrh	r7, [r7, #4]
    e48a:	eba7 0808 	sub.w	r8, r7, r8
    e48e:	f1d8 0700 	rsbs	r7, r8, #0
    e492:	eb47 0708 	adc.w	r7, r7, r8
			blocked |= seg_tx_blocks(&seg_tx[i], net_tx->src,
    e496:	433d      	orrs	r5, r7
	for (tx = NULL, i = 0; i < ARRAY_SIZE(seg_tx); i++) {
    e498:	f10e 0e01 	add.w	lr, lr, #1
    e49c:	f1be 0f03 	cmp.w	lr, #3
    e4a0:	f101 0170 	add.w	r1, r1, #112	; 0x70
    e4a4:	d1e2      	bne.n	e46c <send_seg+0x14>
	if (!tx) {
    e4a6:	2c00      	cmp	r4, #0
    e4a8:	f000 80bb 	beq.w	e622 <send_seg+0x1ca>
	if (ctl_op) {
    e4ac:	6847      	ldr	r7, [r0, #4]
    e4ae:	f1bc 0f00 	cmp.w	ip, #0
    e4b2:	d077      	beq.n	e5a4 <send_seg+0x14c>
		tx->hdr = TRANS_CTL_HDR(*ctl_op, 1);
    e4b4:	f89c 1000 	ldrb.w	r1, [ip]
    e4b8:	f061 017f 	orn	r1, r1, #127	; 0x7f
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e4bc:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
	tx->src = net_tx->src;
    e4c0:	8901      	ldrh	r1, [r0, #8]
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e4c2:	f8b6 e004 	ldrh.w	lr, [r6, #4]
	tx->src = net_tx->src;
    e4c6:	8521      	strh	r1, [r4, #40]	; 0x28
		return BT_MESH_APP_SEG_SDU_MAX;
    e4c8:	f1bc 0f00 	cmp.w	ip, #0
	tx->dst = net_tx->ctx->addr;
    e4cc:	88b9      	ldrh	r1, [r7, #4]
    e4ce:	8561      	strh	r1, [r4, #42]	; 0x2a
	tx->len = sdu->len;
    e4d0:	f8a4 e02c 	strh.w	lr, [r4, #44]	; 0x2c
	tx->seg_o = 0;
    e4d4:	f04f 0c00 	mov.w	ip, #0
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e4d8:	f10e 31ff 	add.w	r1, lr, #4294967295
		return BT_MESH_APP_SEG_SDU_MAX;
    e4dc:	bf18      	it	ne
    e4de:	2708      	movne	r7, #8
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    e4e0:	f8df e148 	ldr.w	lr, [pc, #328]	; e62c <send_seg+0x1d4>
	tx->seg_o = 0;
    e4e4:	f884 c031 	strb.w	ip, [r4, #49]	; 0x31
		return BT_MESH_APP_SEG_SDU_MAX;
    e4e8:	bf08      	it	eq
    e4ea:	270c      	moveq	r7, #12
	tx->seg_n = (sdu->len - 1) / seg_len(!!ctl_op);
    e4ec:	fb91 f1f7 	sdiv	r1, r1, r7
    e4f0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
	tx->nack_count = tx->seg_n + 1;
    e4f4:	f101 0101 	add.w	r1, r1, #1
    e4f8:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
	tx->seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_TX, bt_mesh.seq);
    e4fc:	f8de 1000 	ldr.w	r1, [lr]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e500:	f3bf 8f5b 	dmb	ish
    e504:	f8de 8008 	ldr.w	r8, [lr, #8]
    e508:	f3bf 8f5b 	dmb	ish
    e50c:	f3c8 0880 	ubfx	r8, r8, #2, #1
    e510:	f8de e004 	ldr.w	lr, [lr, #4]
    e514:	eba1 0108 	sub.w	r1, r1, r8
    e518:	ea4f 2811 	mov.w	r8, r1, lsr #8
    e51c:	ea4e 6101 	orr.w	r1, lr, r1, lsl #24
    e520:	e9c4 1808 	strd	r1, r8, [r4, #32]
	tx->sub = net_tx->sub;
    e524:	6801      	ldr	r1, [r0, #0]
    e526:	6021      	str	r1, [r4, #0]
	tx->cb_data = cb_data;
    e528:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	tx->attempts = SEG_RETRANSMIT_ATTEMPTS;
    e52c:	f04f 0304 	mov.w	r3, #4
    e530:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	tx->xmit = net_tx->xmit;
    e534:	7a83      	ldrb	r3, [r0, #10]
    e536:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	tx->aszmic = net_tx->aszmic;
    e53a:	7ac2      	ldrb	r2, [r0, #11]
	tx->seg_pending = 0;
    e53c:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
	tx->blocked = blocked;
    e540:	bf14      	ite	ne
    e542:	2302      	movne	r3, #2
    e544:	4663      	moveq	r3, ip
	tx->aszmic = net_tx->aszmic;
    e546:	f3c2 0140 	ubfx	r1, r2, #1, #1
	tx->blocked = blocked;
    e54a:	432b      	orrs	r3, r5
	tx->friend_cred = net_tx->friend_cred;
    e54c:	f002 0201 	and.w	r2, r2, #1
	tx->blocked = blocked;
    e550:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    e554:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    e558:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    e55c:	f003 032f 	and.w	r3, r3, #47	; 0x2f
    e560:	f022 022f 	bic.w	r2, r2, #47	; 0x2f
    e564:	4313      	orrs	r3, r2
    e566:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	if (net_tx->ctx->send_ttl == BT_MESH_TTL_DEFAULT) {
    e56a:	6843      	ldr	r3, [r0, #4]
    e56c:	7adb      	ldrb	r3, [r3, #11]
    e56e:	2bff      	cmp	r3, #255	; 0xff
    e570:	d124      	bne.n	e5bc <send_seg+0x164>
		tx->ttl = bt_mesh_default_ttl_get();
    e572:	f001 fc13 	bl	fd9c <bt_mesh_default_ttl_get>
    e576:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    e57a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; e630 <send_seg+0x1d8>
		return BT_MESH_APP_SEG_SDU_MAX;
    e57e:	f04f 0800 	mov.w	r8, #0
	for (seg_o = 0U; sdu->len; seg_o++) {
    e582:	f8b6 9004 	ldrh.w	r9, [r6, #4]
    e586:	f1b9 0f00 	cmp.w	r9, #0
    e58a:	d11a      	bne.n	e5c2 <send_seg+0x16a>
	if (blocked) {
    e58c:	2d00      	cmp	r5, #0
    e58e:	d043      	beq.n	e618 <send_seg+0x1c0>
		bt_mesh_next_seq();
    e590:	f7fe fe34 	bl	d1fc <bt_mesh_next_seq>
		return 0;
    e594:	4648      	mov	r0, r9
    e596:	e022      	b.n	e5de <send_seg+0x186>
	return (tx->src == src) && (tx->dst == dst);
    e598:	2700      	movs	r7, #0
    e59a:	e77c      	b.n	e496 <send_seg+0x3e>
		} else if (!tx) {
    e59c:	2c00      	cmp	r4, #0
    e59e:	bf08      	it	eq
    e5a0:	460c      	moveq	r4, r1
    e5a2:	e779      	b.n	e498 <send_seg+0x40>
	} else if (BT_MESH_IS_DEV_KEY(net_tx->ctx->app_idx)) {
    e5a4:	8879      	ldrh	r1, [r7, #2]
    e5a6:	3103      	adds	r1, #3
    e5a8:	b289      	uxth	r1, r1
    e5aa:	2901      	cmp	r1, #1
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e5ac:	bf85      	ittet	hi
    e5ae:	7ac1      	ldrbhi	r1, [r0, #11]
    e5b0:	f3c1 0185 	ubfxhi	r1, r1, #2, #6
		tx->hdr = SEG_HDR(0, 0);
    e5b4:	2180      	movls	r1, #128	; 0x80
		tx->hdr = SEG_HDR(1, net_tx->aid);
    e5b6:	f061 013f 	ornhi	r1, r1, #63	; 0x3f
    e5ba:	e77f      	b.n	e4bc <send_seg+0x64>
		tx->ttl = net_tx->ctx->send_ttl;
    e5bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    e5c0:	e7db      	b.n	e57a <send_seg+0x122>
		err = k_mem_slab_alloc(&segs, &buf, BUF_TIMEOUT);
    e5c2:	2200      	movs	r2, #0
    e5c4:	2300      	movs	r3, #0
    e5c6:	a903      	add	r1, sp, #12
    e5c8:	4650      	mov	r0, sl
    e5ca:	f014 fda1 	bl	23110 <k_mem_slab_alloc>
		if (err) {
    e5ce:	f108 0b01 	add.w	fp, r8, #1
    e5d2:	b138      	cbz	r0, e5e4 <send_seg+0x18c>
			seg_tx_reset(tx);
    e5d4:	4620      	mov	r0, r4
    e5d6:	f7ff fcdf 	bl	df98 <seg_tx_reset>
			return -ENOBUFS;
    e5da:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    e5de:	b005      	add	sp, #20
    e5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e5e4:	f8b6 9004 	ldrh.w	r9, [r6, #4]
    e5e8:	9b03      	ldr	r3, [sp, #12]
    e5ea:	9301      	str	r3, [sp, #4]
    e5ec:	45b9      	cmp	r9, r7
    e5ee:	bf28      	it	cs
    e5f0:	46b9      	movcs	r9, r7
    e5f2:	4649      	mov	r1, r9
    e5f4:	4630      	mov	r0, r6
    e5f6:	f01d fdcc 	bl	2c192 <net_buf_simple_pull_mem>
    e5fa:	9b01      	ldr	r3, [sp, #4]
		tx->seg[seg_o] = buf;
    e5fc:	fa5f f888 	uxtb.w	r8, r8
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e600:	4601      	mov	r1, r0
		tx->seg[seg_o] = buf;
    e602:	eb04 0888 	add.w	r8, r4, r8, lsl #2
		memcpy(buf, net_buf_simple_pull_mem(sdu, len), len);
    e606:	4618      	mov	r0, r3
    e608:	464a      	mov	r2, r9
    e60a:	f018 f9ca 	bl	269a2 <memcpy>
		tx->seg[seg_o] = buf;
    e60e:	9b03      	ldr	r3, [sp, #12]
    e610:	f8c8 3004 	str.w	r3, [r8, #4]
	for (seg_o = 0U; sdu->len; seg_o++) {
    e614:	46d8      	mov	r8, fp
    e616:	e7b4      	b.n	e582 <send_seg+0x12a>
	seg_tx_send_unacked(tx);
    e618:	4620      	mov	r0, r4
    e61a:	f7ff fd55 	bl	e0c8 <seg_tx_send_unacked>
	return 0;
    e61e:	4628      	mov	r0, r5
    e620:	e7dd      	b.n	e5de <send_seg+0x186>
		return -EBUSY;
    e622:	f06f 000f 	mvn.w	r0, #15
    e626:	e7da      	b.n	e5de <send_seg+0x186>
    e628:	20001730 	.word	0x20001730
    e62c:	200015a8 	.word	0x200015a8
    e630:	20000d58 	.word	0x20000d58

0000e634 <bt_mesh_set_hb_sub_dst>:
	hb_sub_dst = addr;
    e634:	4b01      	ldr	r3, [pc, #4]	; (e63c <bt_mesh_set_hb_sub_dst+0x8>)
    e636:	8018      	strh	r0, [r3, #0]
}
    e638:	4770      	bx	lr
    e63a:	bf00      	nop
    e63c:	20009040 	.word	0x20009040

0000e640 <bt_mesh_tx_in_progress>:
		if (seg_tx[i].nack_count) {
    e640:	4a06      	ldr	r2, [pc, #24]	; (e65c <bt_mesh_tx_in_progress+0x1c>)
    e642:	f892 3032 	ldrb.w	r3, [r2, #50]	; 0x32
    e646:	f892 10a2 	ldrb.w	r1, [r2, #162]	; 0xa2
    e64a:	f892 2112 	ldrb.w	r2, [r2, #274]	; 0x112
    e64e:	430b      	orrs	r3, r1
    e650:	4313      	orrs	r3, r2
}
    e652:	bf14      	ite	ne
    e654:	2001      	movne	r0, #1
    e656:	2000      	moveq	r0, #0
    e658:	4770      	bx	lr
    e65a:	bf00      	nop
    e65c:	20001730 	.word	0x20001730

0000e660 <bt_mesh_trans_send>:
{
    e660:	b5f0      	push	{r4, r5, r6, r7, lr}
    e662:	4604      	mov	r4, r0
    e664:	b08b      	sub	sp, #44	; 0x2c
    e666:	460d      	mov	r5, r1
    e668:	4616      	mov	r6, r2
	struct bt_mesh_app_crypto_ctx crypto = {
    e66a:	2100      	movs	r1, #0
    e66c:	2210      	movs	r2, #16
    e66e:	a806      	add	r0, sp, #24
{
    e670:	461f      	mov	r7, r3
	struct bt_mesh_app_crypto_ctx crypto = {
    e672:	f018 f9c1 	bl	269f8 <memset>
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e676:	6862      	ldr	r2, [r4, #4]
		.aszmic = tx->aszmic,
    e678:	7ae3      	ldrb	r3, [r4, #11]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e67a:	8851      	ldrh	r1, [r2, #2]
		.aszmic = tx->aszmic,
    e67c:	f3c3 0340 	ubfx	r3, r3, #1, #1
	struct bt_mesh_app_crypto_ctx crypto = {
    e680:	f88d 3015 	strb.w	r3, [sp, #21]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e684:	3103      	adds	r1, #3
	struct bt_mesh_app_crypto_ctx crypto = {
    e686:	8923      	ldrh	r3, [r4, #8]
    e688:	f8ad 3016 	strh.w	r3, [sp, #22]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e68c:	b289      	uxth	r1, r1
	struct bt_mesh_app_crypto_ctx crypto = {
    e68e:	8893      	ldrh	r3, [r2, #4]
		.seq_num = bt_mesh.seq,
    e690:	4a36      	ldr	r2, [pc, #216]	; (e76c <bt_mesh_trans_send+0x10c>)
	struct bt_mesh_app_crypto_ctx crypto = {
    e692:	f8ad 3018 	strh.w	r3, [sp, #24]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e696:	2901      	cmp	r1, #1
	struct bt_mesh_app_crypto_ctx crypto = {
    e698:	6853      	ldr	r3, [r2, #4]
    e69a:	9307      	str	r3, [sp, #28]
		.dev_key = BT_MESH_IS_DEV_KEY(tx->ctx->app_idx),
    e69c:	bf8c      	ite	hi
    e69e:	2100      	movhi	r1, #0
    e6a0:	2101      	movls	r1, #1
    e6a2:	f88d 1014 	strb.w	r1, [sp, #20]
		.iv_index = BT_MESH_NET_IVI_TX,
    e6a6:	6813      	ldr	r3, [r2, #0]
    e6a8:	f3bf 8f5b 	dmb	ish
    e6ac:	6892      	ldr	r2, [r2, #8]
    e6ae:	f3bf 8f5b 	dmb	ish
    e6b2:	f3c2 0280 	ubfx	r2, r2, #2, #1
    e6b6:	1a9b      	subs	r3, r3, r2
	struct bt_mesh_app_crypto_ctx crypto = {
    e6b8:	9308      	str	r3, [sp, #32]
	if (msg->len < 1) {
    e6ba:	88ab      	ldrh	r3, [r5, #4]
    e6bc:	b91b      	cbnz	r3, e6c6 <bt_mesh_trans_send+0x66>
		return -EINVAL;
    e6be:	f06f 0015 	mvn.w	r0, #21
}
    e6c2:	b00b      	add	sp, #44	; 0x2c
    e6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len > BT_MESH_TX_SDU_MAX) {
    e6c6:	2b48      	cmp	r3, #72	; 0x48
    e6c8:	d84c      	bhi.n	e764 <bt_mesh_trans_send+0x104>
	if (net_buf_simple_tailroom(msg) < 4) {
    e6ca:	4628      	mov	r0, r5
    e6cc:	f01d fd91 	bl	2c1f2 <net_buf_simple_tailroom>
    e6d0:	2803      	cmp	r0, #3
    e6d2:	d9f4      	bls.n	e6be <bt_mesh_trans_send+0x5e>
	if (msg->len > BT_MESH_SDU_UNSEG_MAX) {
    e6d4:	88ab      	ldrh	r3, [r5, #4]
    e6d6:	6860      	ldr	r0, [r4, #4]
    e6d8:	2b0b      	cmp	r3, #11
		tx->ctx->send_rel = true;
    e6da:	bf84      	itt	hi
    e6dc:	2301      	movhi	r3, #1
    e6de:	7283      	strbhi	r3, [r0, #10]
	err = bt_mesh_keys_resolve(tx->ctx, &tx->sub, &key, &aid);
    e6e0:	aa04      	add	r2, sp, #16
    e6e2:	f10d 030f 	add.w	r3, sp, #15
    e6e6:	4621      	mov	r1, r4
    e6e8:	f7ff fb32 	bl	dd50 <bt_mesh_keys_resolve>
	if (err) {
    e6ec:	2800      	cmp	r0, #0
    e6ee:	d1e8      	bne.n	e6c2 <bt_mesh_trans_send+0x62>
	tx->xmit = bt_mesh_net_transmit_get();
    e6f0:	f001 fb1e 	bl	fd30 <bt_mesh_net_transmit_get>
	tx->aid = aid;
    e6f4:	7ae3      	ldrb	r3, [r4, #11]
    e6f6:	f89d 200f 	ldrb.w	r2, [sp, #15]
	tx->xmit = bt_mesh_net_transmit_get();
    e6fa:	72a0      	strb	r0, [r4, #10]
	tx->aid = aid;
    e6fc:	f362 0387 	bfi	r3, r2, #2, #6
    e700:	72e3      	strb	r3, [r4, #11]
	if (!tx->ctx->send_rel || net_buf_simple_tailroom(msg) < 8) {
    e702:	6863      	ldr	r3, [r4, #4]
    e704:	7a98      	ldrb	r0, [r3, #10]
    e706:	b130      	cbz	r0, e716 <bt_mesh_trans_send+0xb6>
    e708:	4628      	mov	r0, r5
    e70a:	f01d fd72 	bl	2c1f2 <net_buf_simple_tailroom>
    e70e:	2807      	cmp	r0, #7
    e710:	bf94      	ite	ls
    e712:	2000      	movls	r0, #0
    e714:	2001      	movhi	r0, #1
    e716:	7ae3      	ldrb	r3, [r4, #11]
    e718:	f360 0341 	bfi	r3, r0, #1, #1
    e71c:	72e3      	strb	r3, [r4, #11]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    e71e:	6863      	ldr	r3, [r4, #4]
	err = bt_mesh_app_encrypt(key, &crypto, msg);
    e720:	9804      	ldr	r0, [sp, #16]
	if (BT_MESH_ADDR_IS_VIRTUAL(tx->ctx->addr)) {
    e722:	889b      	ldrh	r3, [r3, #4]
    e724:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
    e728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
    e72c:	bf38      	it	cc
    e72e:	2300      	movcc	r3, #0
	err = bt_mesh_app_encrypt(key, &crypto, msg);
    e730:	462a      	mov	r2, r5
    e732:	a905      	add	r1, sp, #20
		crypto.ad = bt_mesh_va_label_get(tx->ctx->addr);
    e734:	bf38      	it	cc
    e736:	9309      	strcc	r3, [sp, #36]	; 0x24
	err = bt_mesh_app_encrypt(key, &crypto, msg);
    e738:	f01b fd7f 	bl	2a23a <bt_mesh_app_encrypt>
	if (err) {
    e73c:	2800      	cmp	r0, #0
    e73e:	d1c0      	bne.n	e6c2 <bt_mesh_trans_send+0x62>
	if (tx->ctx->send_rel) {
    e740:	6863      	ldr	r3, [r4, #4]
    e742:	7a9b      	ldrb	r3, [r3, #10]
		err = send_seg(tx, msg, cb, cb_data, NULL);
    e744:	9000      	str	r0, [sp, #0]
	if (tx->ctx->send_rel) {
    e746:	b133      	cbz	r3, e756 <bt_mesh_trans_send+0xf6>
		err = send_seg(tx, msg, cb, cb_data, NULL);
    e748:	463b      	mov	r3, r7
    e74a:	4632      	mov	r2, r6
    e74c:	4629      	mov	r1, r5
    e74e:	4620      	mov	r0, r4
    e750:	f7ff fe82 	bl	e458 <send_seg>
    e754:	e7b5      	b.n	e6c2 <bt_mesh_trans_send+0x62>
		err = send_unseg(tx, msg, cb, cb_data, NULL);
    e756:	463b      	mov	r3, r7
    e758:	4632      	mov	r2, r6
    e75a:	4629      	mov	r1, r5
    e75c:	4620      	mov	r0, r4
    e75e:	f01b fa3c 	bl	29bda <send_unseg>
    e762:	e7ae      	b.n	e6c2 <bt_mesh_trans_send+0x62>
		return -EMSGSIZE;
    e764:	f06f 0023 	mvn.w	r0, #35	; 0x23
    e768:	e7ab      	b.n	e6c2 <bt_mesh_trans_send+0x62>
    e76a:	bf00      	nop
    e76c:	200015a8 	.word	0x200015a8

0000e770 <bt_mesh_trans_recv>:

	return err;
}

int bt_mesh_trans_recv(struct net_buf_simple *buf, struct bt_mesh_net_rx *rx, int8_t rssi)
{
    e770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e774:	b099      	sub	sp, #100	; 0x64
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    e776:	f04f 33ff 	mov.w	r3, #4294967295
{
    e77a:	9207      	str	r2, [sp, #28]
	uint64_t seq_auth = TRANS_SEQ_AUTH_NVAL;
    e77c:	f04f 32ff 	mov.w	r2, #4294967295
    e780:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30

	if (IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		rx->friend_match = bt_mesh_friend_match(rx->sub->net_idx,
							rx->ctx.recv_dst);
	} else {
		rx->friend_match = false;
    e784:	7d0b      	ldrb	r3, [r1, #20]
    e786:	f36f 13c7 	bfc	r3, #7, #1
{
    e78a:	4606      	mov	r6, r0
		rx->friend_match = false;
    e78c:	750b      	strb	r3, [r1, #20]
{
    e78e:	460c      	mov	r4, r1

	BT_DBG("src 0x%04x dst 0x%04x seq 0x%08x friend_match %u",
	       rx->ctx.addr, rx->ctx.recv_dst, rx->seq, rx->friend_match);

	/* Remove network headers */
	net_buf_simple_pull(buf, BT_MESH_NET_HDR_LEN);
    e790:	2109      	movs	r1, #9
    e792:	f01d fcf6 	bl	2c182 <net_buf_simple_pull>
	state->offset = net_buf_simple_headroom(buf);
    e796:	4630      	mov	r0, r6
    e798:	f01d fd27 	bl	2c1ea <net_buf_simple_headroom>
	/* Save the app-level state so the buffer can later be placed in
	 * the Friend Queue.
	 */
	net_buf_simple_save(buf, &state);

	if (SEG(buf->data)) {
    e79c:	f8d6 a000 	ldr.w	sl, [r6]
	state->len = buf->len;
    e7a0:	88b3      	ldrh	r3, [r6, #4]
    e7a2:	9306      	str	r3, [sp, #24]
    e7a4:	f99a 3000 	ldrsb.w	r3, [sl]
	state->offset = net_buf_simple_headroom(buf);
    e7a8:	9008      	str	r0, [sp, #32]
    e7aa:	2b00      	cmp	r3, #0
    e7ac:	f280 81c7 	bge.w	eb3e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xde>
		/* Segmented messages must match a local element or an
		 * LPN of this Friend.
		 */
		if (!rx->local_match && !rx->friend_match) {
    e7b0:	f894 b014 	ldrb.w	fp, [r4, #20]
    e7b4:	f01b 00c0 	ands.w	r0, fp, #192	; 0xc0
    e7b8:	f000 81eb 	beq.w	eb92 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x132>
	struct bt_mesh_rpl *rpl = NULL;
    e7bc:	2300      	movs	r3, #0
    e7be:	930b      	str	r3, [sp, #44]	; 0x2c
	if (buf->len < 5) {
    e7c0:	9b06      	ldr	r3, [sp, #24]
    e7c2:	2b04      	cmp	r3, #4
    e7c4:	d802      	bhi.n	e7cc <bt_mesh_trans_recv+0x5c>
		return -EINVAL;
    e7c6:	f06f 0b15 	mvn.w	fp, #21
    e7ca:	e220      	b.n	ec0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ae>
	if (bt_mesh_rpl_check(net_rx, &rpl)) {
    e7cc:	a90b      	add	r1, sp, #44	; 0x2c
    e7ce:	4620      	mov	r0, r4
    e7d0:	f000 fa86 	bl	ece0 <bt_mesh_rpl_check>
    e7d4:	4605      	mov	r5, r0
    e7d6:	2800      	cmp	r0, #0
    e7d8:	d1f5      	bne.n	e7c6 <bt_mesh_trans_recv+0x56>
	net_buf_simple_pull(buf, 1);
    e7da:	2101      	movs	r1, #1
    e7dc:	4630      	mov	r0, r6
    e7de:	f01d fcd0 	bl	2c182 <net_buf_simple_pull>
	seq_zero = net_buf_simple_pull_be16(buf);
    e7e2:	4630      	mov	r0, r6
    e7e4:	f01d fced 	bl	2c1c2 <net_buf_simple_pull_be16>
	seg_o = (seq_zero & 0x03) << 3;
    e7e8:	00c7      	lsls	r7, r0, #3
	seq_zero = (seq_zero >> 2) & TRANS_SEQ_ZERO_MASK;
    e7ea:	f3c0 0b8c 	ubfx	fp, r0, #2, #13
	seg_n = net_buf_simple_pull_u8(buf);
    e7ee:	4630      	mov	r0, r6
    e7f0:	f01d fcd7 	bl	2c1a2 <net_buf_simple_pull_u8>
	seg_o = (seq_zero & 0x03) << 3;
    e7f4:	f007 0718 	and.w	r7, r7, #24
	seg_o |= seg_n >> 5;
    e7f8:	ea47 1750 	orr.w	r7, r7, r0, lsr #5
    e7fc:	b2ff      	uxtb	r7, r7
	seg_n &= 0x1f;
    e7fe:	f000 091f 	and.w	r9, r0, #31
	if (seg_o > seg_n) {
    e802:	454f      	cmp	r7, r9
	seg_n = net_buf_simple_pull_u8(buf);
    e804:	4680      	mov	r8, r0
	if (seg_o > seg_n) {
    e806:	d8de      	bhi.n	e7c6 <bt_mesh_trans_recv+0x56>
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e808:	6922      	ldr	r2, [r4, #16]
    e80a:	49af      	ldr	r1, [pc, #700]	; (eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
    e80c:	7d23      	ldrb	r3, [r4, #20]
    e80e:	6809      	ldr	r1, [r1, #0]
    e810:	eba2 0b0b 	sub.w	fp, r2, fp
    e814:	f003 0301 	and.w	r3, r3, #1
    e818:	f3cb 0b0c 	ubfx	fp, fp, #0, #13
    e81c:	1acb      	subs	r3, r1, r3
    e81e:	eba2 0b0b 	sub.w	fp, r2, fp
    e822:	ea4b 6203 	orr.w	r2, fp, r3, lsl #24
    e826:	0a1b      	lsrs	r3, r3, #8
    e828:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e82c:	4619      	mov	r1, r3
		if (rx->src != net_rx->ctx.addr ||
    e82e:	68a3      	ldr	r3, [r4, #8]
    e830:	9309      	str	r3, [sp, #36]	; 0x24
    e832:	4ba6      	ldr	r3, [pc, #664]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    e834:	e9cd 3504 	strd	r3, r5, [sp, #16]
	*seq_auth = SEQ_AUTH(BT_MESH_NET_IVI_RX(net_rx),
    e838:	4610      	mov	r0, r2
		if (rx->src != net_rx->ctx.addr ||
    e83a:	f04f 0e60 	mov.w	lr, #96	; 0x60
    e83e:	469b      	mov	fp, r3
    e840:	4ba2      	ldr	r3, [pc, #648]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
    e842:	9a05      	ldr	r2, [sp, #20]
    e844:	fb0e 3c02 	mla	ip, lr, r2, r3
    e848:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e84a:	f8dc 3018 	ldr.w	r3, [ip, #24]
    e84e:	4293      	cmp	r3, r2
    e850:	d122      	bne.n	e898 <bt_mesh_trans_recv+0x128>
		struct seg_rx *rx = &seg_rx[i];
    e852:	9d04      	ldr	r5, [sp, #16]
		if (rx->seq_auth >= *seq_auth) {
    e854:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    e858:	428b      	cmp	r3, r1
    e85a:	bf08      	it	eq
    e85c:	4282      	cmpeq	r2, r0
    e85e:	f080 819a 	bcs.w	eb96 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x136>
		if (rx->in_use) {
    e862:	f89c 301f 	ldrb.w	r3, [ip, #31]
    e866:	065b      	lsls	r3, r3, #25
    e868:	d516      	bpl.n	e898 <bt_mesh_trans_recv+0x128>
			seg_rx_reset(rx, true);
    e86a:	2101      	movs	r1, #1
    e86c:	4628      	mov	r0, r5
    e86e:	f7ff fb69 	bl	df44 <seg_rx_reset>
	if (!sdu_len_is_ok(net_rx->ctl, seg_n)) {
    e872:	f1b9 0f02 	cmp.w	r9, #2
    e876:	d91d      	bls.n	e8b4 <bt_mesh_trans_recv+0x144>
			 net_rx->friend_match);
    e878:	7d23      	ldrb	r3, [r4, #20]
		send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    e87a:	8922      	ldrh	r2, [r4, #8]
    e87c:	8961      	ldrh	r1, [r4, #10]
    e87e:	6820      	ldr	r0, [r4, #0]
    e880:	09db      	lsrs	r3, r3, #7
    e882:	9302      	str	r3, [sp, #8]
    e884:	2300      	movs	r3, #0
    e886:	9301      	str	r3, [sp, #4]
    e888:	ab0c      	add	r3, sp, #48	; 0x30
    e88a:	9300      	str	r3, [sp, #0]
    e88c:	7be3      	ldrb	r3, [r4, #15]
    e88e:	f01b facc 	bl	29e2a <send_ack>
			return -EMSGSIZE;
    e892:	f06f 0b23 	mvn.w	fp, #35	; 0x23
    e896:	e1ba      	b.n	ec0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ae>
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    e898:	9b05      	ldr	r3, [sp, #20]
    e89a:	3301      	adds	r3, #1
    e89c:	9305      	str	r3, [sp, #20]
    e89e:	9b04      	ldr	r3, [sp, #16]
    e8a0:	3360      	adds	r3, #96	; 0x60
    e8a2:	9304      	str	r3, [sp, #16]
    e8a4:	9b05      	ldr	r3, [sp, #20]
    e8a6:	2b03      	cmp	r3, #3
    e8a8:	d1ca      	bne.n	e840 <bt_mesh_trans_recv+0xd0>
    e8aa:	e7e2      	b.n	e872 <bt_mesh_trans_recv+0x102>
				bt_mesh_rpl_update(rpl, net_rx);
    e8ac:	4621      	mov	r1, r4
    e8ae:	f01b fbb7 	bl	2a020 <bt_mesh_rpl_update>
    e8b2:	e1aa      	b.n	ec0a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1aa>
	return slab->num_blocks - slab->num_used;
    e8b4:	4b86      	ldr	r3, [pc, #536]	; (ead0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
	if (k_mem_slab_num_free_get(&segs) < 1) {
    e8b6:	689a      	ldr	r2, [r3, #8]
    e8b8:	699b      	ldr	r3, [r3, #24]
    e8ba:	429a      	cmp	r2, r3
    e8bc:	f000 8139 	beq.w	eb32 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2>
		if (rx->in_use) {
    e8c0:	f89b 201f 	ldrb.w	r2, [fp, #31]
    e8c4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
    e8c8:	d00a      	beq.n	e8e0 <bt_mesh_trans_recv+0x170>
    e8ca:	f89b 307f 	ldrb.w	r3, [fp, #127]	; 0x7f
    e8ce:	0659      	lsls	r1, r3, #25
    e8d0:	f140 80e0 	bpl.w	ea94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>
    e8d4:	f89b 30df 	ldrb.w	r3, [fp, #223]	; 0xdf
    e8d8:	065a      	lsls	r2, r3, #25
    e8da:	f100 812a 	bmi.w	eb32 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd2>
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    e8de:	2202      	movs	r2, #2
		struct seg_rx *rx = &seg_rx[i];
    e8e0:	f04f 0c60 	mov.w	ip, #96	; 0x60
    e8e4:	fb0c fc02 	mul.w	ip, ip, r2
    e8e8:	4878      	ldr	r0, [pc, #480]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
		rx->sub = net_rx->sub;
    e8ea:	6823      	ldr	r3, [r4, #0]
    e8ec:	f840 300c 	str.w	r3, [r0, ip]
		rx->seq_auth = *seq_auth;
    e8f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		struct seg_rx *rx = &seg_rx[i];
    e8f4:	eb00 050c 	add.w	r5, r0, ip
		rx->ctl = net_rx->ctl;
    e8f8:	7d21      	ldrb	r1, [r4, #20]
		rx->seq_auth = *seq_auth;
    e8fa:	e9c5 2304 	strd	r2, r3, [r5, #16]
    e8fe:	f10c 0318 	add.w	r3, ip, #24
    e902:	4403      	add	r3, r0
		rx->seg_n = seg_n;
    e904:	f008 081f 	and.w	r8, r8, #31
    e908:	79da      	ldrb	r2, [r3, #7]
		rx->ctl = net_rx->ctl;
    e90a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
		rx->seg_n = seg_n;
    e90e:	f048 0840 	orr.w	r8, r8, #64	; 0x40
    e912:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    e916:	ea48 1841 	orr.w	r8, r8, r1, lsl #5
    e91a:	ea48 0802 	orr.w	r8, r8, r2
    e91e:	f883 8007 	strb.w	r8, [r3, #7]
		rx->hdr = *hdr;
    e922:	f89a 3000 	ldrb.w	r3, [sl]
    e926:	77ab      	strb	r3, [r5, #30]
		rx->ttl = net_rx->ctx.send_ttl;
    e928:	7be3      	ldrb	r3, [r4, #15]
    e92a:	f885 3020 	strb.w	r3, [r5, #32]
		rx->src = net_rx->ctx.addr;
    e92e:	8923      	ldrh	r3, [r4, #8]
    e930:	832b      	strh	r3, [r5, #24]
		rx->dst = net_rx->ctx.recv_dst;
    e932:	8963      	ldrh	r3, [r4, #10]
    e934:	836b      	strh	r3, [r5, #26]
		rx->block = 0U;
    e936:	2300      	movs	r3, #0
    e938:	626b      	str	r3, [r5, #36]	; 0x24
	rx->obo = net_rx->friend_match;
    e93a:	7d23      	ldrb	r3, [r4, #20]
    e93c:	7fea      	ldrb	r2, [r5, #31]
    e93e:	09db      	lsrs	r3, r3, #7
    e940:	f363 12c7 	bfi	r2, r3, #7, #1
    e944:	77ea      	strb	r2, [r5, #31]
	if (BIT(seg_o) & rx->block) {
    e946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e948:	40fb      	lsrs	r3, r7
    e94a:	f013 0201 	ands.w	r2, r3, #1
    e94e:	f040 815c 	bne.w	ec0a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1aa>
	if (seg_o == seg_n) {
    e952:	7fe9      	ldrb	r1, [r5, #31]
    e954:	88b0      	ldrh	r0, [r6, #4]
    e956:	f3c1 1340 	ubfx	r3, r1, #5, #1
		return BT_MESH_APP_SEG_SDU_MAX;
    e95a:	2b00      	cmp	r3, #0
    e95c:	bf14      	ite	ne
    e95e:	2308      	movne	r3, #8
    e960:	230c      	moveq	r3, #12
	if (seg_o == seg_n) {
    e962:	454f      	cmp	r7, r9
    e964:	f040 80a8 	bne.w	eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    e968:	fb03 0307 	mla	r3, r3, r7, r0
    e96c:	b29b      	uxth	r3, r3
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    e96e:	2b24      	cmp	r3, #36	; 0x24
		rx->len = seg_n * seg_len(rx->ctl) + buf->len;
    e970:	83ab      	strh	r3, [r5, #28]
		if (rx->len > BT_MESH_RX_SDU_MAX) {
    e972:	f200 8091 	bhi.w	ea98 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x38>
    e976:	f01e fe86 	bl	2d686 <z_impl_k_uptime_ticks>
    e97a:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
    e97e:	460b      	mov	r3, r1
    e980:	fba0 010b 	umull	r0, r1, r0, fp
    e984:	fb0b 1103 	mla	r1, fp, r3, r1
    e988:	0bc3      	lsrs	r3, r0, #15
    e98a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (uint32_t)k_uptime_get();
    e98e:	62ab      	str	r3, [r5, #40]	; 0x28
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
    e990:	f105 0040 	add.w	r0, r5, #64	; 0x40
    e994:	f01e fe39 	bl	2d60a <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
    e998:	fba0 010b 	umull	r0, r1, r0, fp
    e99c:	0bc3      	lsrs	r3, r0, #15
	if (!k_delayed_work_remaining_get(&rx->ack) &&
    e99e:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
    e9a2:	f105 0830 	add.w	r8, r5, #48	; 0x30
    e9a6:	d121      	bne.n	e9ec <bt_mesh_trans_recv+0x27c>
		k_delayed_work_submit(&rx->ack, K_MSEC(ack_timeout(rx)));
    e9a8:	4628      	mov	r0, r5
    e9aa:	f01b f953 	bl	29c54 <ack_timeout>
    e9ae:	2800      	cmp	r0, #0
    e9b0:	f340 8086 	ble.w	eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>
    e9b4:	4628      	mov	r0, r5
    e9b6:	f01b f94d 	bl	29c54 <ack_timeout>
    e9ba:	4602      	mov	r2, r0
    e9bc:	17c3      	asrs	r3, r0, #31
			return (t * to_hz + off) / from_hz;
    e9be:	03d9      	lsls	r1, r3, #15
    e9c0:	03d0      	lsls	r0, r2, #15
    e9c2:	f240 3ce7 	movw	ip, #999	; 0x3e7
    e9c6:	eb10 000c 	adds.w	r0, r0, ip
    e9ca:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
    e9ce:	f04f 0c00 	mov.w	ip, #0
    e9d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e9d6:	f04f 0300 	mov.w	r3, #0
    e9da:	eb41 010c 	adc.w	r1, r1, ip
    e9de:	f7f1 fbdf 	bl	1a0 <__aeabi_uldivmod>
    e9e2:	4602      	mov	r2, r0
    e9e4:	460b      	mov	r3, r1
    e9e6:	4640      	mov	r0, r8
    e9e8:	f7ff fa5c 	bl	dea4 <k_delayed_work_submit>
	err = k_mem_slab_alloc(&segs, &rx->seg[seg_o], K_NO_WAIT);
    e9ec:	1c79      	adds	r1, r7, #1
    e9ee:	4838      	ldr	r0, [pc, #224]	; (ead0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
    e9f0:	2200      	movs	r2, #0
    e9f2:	2300      	movs	r3, #0
    e9f4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    e9f8:	f014 fb8a 	bl	23110 <k_mem_slab_alloc>
	if (err) {
    e9fc:	4683      	mov	fp, r0
    e9fe:	2800      	cmp	r0, #0
    ea00:	f040 809a 	bne.w	eb38 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd8>
	memcpy(rx->seg[seg_o], buf->data, buf->len);
    ea04:	eb05 0387 	add.w	r3, r5, r7, lsl #2
    ea08:	88b2      	ldrh	r2, [r6, #4]
    ea0a:	6858      	ldr	r0, [r3, #4]
    ea0c:	6831      	ldr	r1, [r6, #0]
    ea0e:	f017 ffc8 	bl	269a2 <memcpy>
	rx->block |= BIT(seg_o);
    ea12:	2301      	movs	r3, #1
    ea14:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ea16:	4499      	add	r9, r3
	rx->block |= BIT(seg_o);
    ea18:	fa03 f707 	lsl.w	r7, r3, r7
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ea1c:	fa03 f309 	lsl.w	r3, r3, r9
	rx->block |= BIT(seg_o);
    ea20:	4317      	orrs	r7, r2
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ea22:	3b01      	subs	r3, #1
    ea24:	429f      	cmp	r7, r3
	rx->block |= BIT(seg_o);
    ea26:	626f      	str	r7, [r5, #36]	; 0x24
	if (rx->block != BLOCK_COMPLETE(seg_n)) {
    ea28:	f040 80f1 	bne.w	ec0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ae>
	if (rpl) {
    ea2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ea2e:	b110      	cbz	r0, ea36 <bt_mesh_trans_recv+0x2c6>
		bt_mesh_rpl_update(rpl, net_rx);
    ea30:	4621      	mov	r1, r4
    ea32:	f01b faf5 	bl	2a020 <bt_mesh_rpl_update>
	k_delayed_work_cancel(&rx->ack);
    ea36:	4640      	mov	r0, r8
    ea38:	f01e fdbc 	bl	2d5b4 <k_delayed_work_cancel>
		 net_rx->ctx.send_ttl, seq_auth, rx->block, rx->obo);
    ea3c:	7feb      	ldrb	r3, [r5, #31]
	send_ack(net_rx->sub, net_rx->ctx.recv_dst, net_rx->ctx.addr,
    ea3e:	8922      	ldrh	r2, [r4, #8]
    ea40:	8961      	ldrh	r1, [r4, #10]
    ea42:	6820      	ldr	r0, [r4, #0]
    ea44:	09db      	lsrs	r3, r3, #7
    ea46:	9302      	str	r3, [sp, #8]
    ea48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ea4a:	9301      	str	r3, [sp, #4]
    ea4c:	af0c      	add	r7, sp, #48	; 0x30
    ea4e:	7be3      	ldrb	r3, [r4, #15]
    ea50:	9700      	str	r7, [sp, #0]
    ea52:	f01b f9ea 	bl	29e2a <send_ack>
	net_rx->seq = (rx->seq_auth & 0xffffff);
    ea56:	692b      	ldr	r3, [r5, #16]
    ea58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ea5c:	6123      	str	r3, [r4, #16]
	if (net_rx->ctl) {
    ea5e:	7d23      	ldrb	r3, [r4, #20]
    ea60:	071b      	lsls	r3, r3, #28
    ea62:	d537      	bpl.n	ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    ea64:	ab12      	add	r3, sp, #72	; 0x48
    ea66:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
    ea6a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		seg_rx_assemble(rx, &sdu, 0U);
    ea6e:	a90f      	add	r1, sp, #60	; 0x3c
    ea70:	2200      	movs	r2, #0
    ea72:	4628      	mov	r0, r5
		NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_RX_CTL_MAX);
    ea74:	930f      	str	r3, [sp, #60]	; 0x3c
		seg_rx_assemble(rx, &sdu, 0U);
    ea76:	f01b f90b 	bl	29c90 <seg_rx_assemble>
		err = ctl_recv(net_rx, *hdr, &sdu, seq_auth);
    ea7a:	f89a 1000 	ldrb.w	r1, [sl]
    ea7e:	463b      	mov	r3, r7
    ea80:	aa0f      	add	r2, sp, #60	; 0x3c
    ea82:	4620      	mov	r0, r4
    ea84:	f7ff fc0e 	bl	e2a4 <ctl_recv>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx,rssi);
    ea88:	4683      	mov	fp, r0
	seg_rx_reset(rx, false);
    ea8a:	2100      	movs	r1, #0
    ea8c:	4628      	mov	r0, r5
    ea8e:	f7ff fa59 	bl	df44 <seg_rx_reset>
	return err;
    ea92:	e0bc      	b.n	ec0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ae>
	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
    ea94:	2201      	movs	r2, #1
    ea96:	e723      	b.n	e8e0 <bt_mesh_trans_recv+0x170>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    ea98:	ab0c      	add	r3, sp, #48	; 0x30
    ea9a:	09c9      	lsrs	r1, r1, #7
    ea9c:	e9cd 2101 	strd	r2, r1, [sp, #4]
    eaa0:	9300      	str	r3, [sp, #0]
    eaa2:	8961      	ldrh	r1, [r4, #10]
    eaa4:	7be3      	ldrb	r3, [r4, #15]
    eaa6:	8922      	ldrh	r2, [r4, #8]
    eaa8:	6820      	ldr	r0, [r4, #0]
    eaaa:	f01b f9be 	bl	29e2a <send_ack>
			seg_rx_reset(rx, true);
    eaae:	2101      	movs	r1, #1
    eab0:	4628      	mov	r0, r5
    eab2:	f7ff fa47 	bl	df44 <seg_rx_reset>
    eab6:	e6ec      	b.n	e892 <bt_mesh_trans_recv+0x122>
		if (buf->len != seg_len(rx->ctl)) {
    eab8:	4283      	cmp	r3, r0
    eaba:	f43f af5c 	beq.w	e976 <bt_mesh_trans_recv+0x206>
    eabe:	e682      	b.n	e7c6 <bt_mesh_trans_recv+0x56>
		k_delayed_work_submit(&rx->ack, K_MSEC(ack_timeout(rx)));
    eac0:	2200      	movs	r2, #0
    eac2:	2300      	movs	r3, #0
    eac4:	e77b      	b.n	e9be <bt_mesh_trans_recv+0x24e>
    eac6:	bf00      	nop
    eac8:	200015a8 	.word	0x200015a8
    eacc:	20001610 	.word	0x20001610
    ead0:	20000d58 	.word	0x20000d58
	} else if (rx->len < 1 + APP_MIC_LEN(ASZMIC(hdr))) {
    ead4:	f89a 3001 	ldrb.w	r3, [sl, #1]
    ead8:	8baa      	ldrh	r2, [r5, #28]
    eada:	09db      	lsrs	r3, r3, #7
    eadc:	bf14      	ite	ne
    eade:	2309      	movne	r3, #9
    eae0:	2305      	moveq	r3, #5
    eae2:	429a      	cmp	r2, r3
    eae4:	db22      	blt.n	eb2c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xcc>
	if (!buf->__buf) {
    eae6:	4b4f      	ldr	r3, [pc, #316]	; (ec24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c4>)
    eae8:	6899      	ldr	r1, [r3, #8]
    eaea:	b911      	cbnz	r1, eaf2 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x92>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
    eaec:	f103 010c 	add.w	r1, r3, #12
    eaf0:	6099      	str	r1, [r3, #8]
	buf->data = buf->__buf + reserve_head;
    eaf2:	6899      	ldr	r1, [r3, #8]
    eaf4:	6019      	str	r1, [r3, #0]
	buf->len = 0U;
    eaf6:	2000      	movs	r0, #0
    eaf8:	8098      	strh	r0, [r3, #4]
			&sdu, seg_buf.data, rx->len - APP_MIC_LEN(ASZMIC(hdr)));
    eafa:	f89a 3001 	ldrb.w	r3, [sl, #1]
    eafe:	09db      	lsrs	r3, r3, #7
    eb00:	bf14      	ite	ne
    eb02:	2308      	movne	r3, #8
    eb04:	2304      	moveq	r3, #4
		net_buf_simple_init_with_data(
    eb06:	af12      	add	r7, sp, #72	; 0x48
    eb08:	1ad2      	subs	r2, r2, r3
    eb0a:	4638      	mov	r0, r7
    eb0c:	f01d fa32 	bl	2bf74 <net_buf_simple_init_with_data>
		err = sdu_recv(net_rx, *hdr, ASZMIC(hdr), &seg_buf, &sdu, rx,rssi);
    eb10:	f89a 2001 	ldrb.w	r2, [sl, #1]
    eb14:	9b07      	ldr	r3, [sp, #28]
    eb16:	f89a 1000 	ldrb.w	r1, [sl]
    eb1a:	9700      	str	r7, [sp, #0]
    eb1c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    eb20:	09d2      	lsrs	r2, r2, #7
    eb22:	4b40      	ldr	r3, [pc, #256]	; (ec24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c4>)
    eb24:	4620      	mov	r0, r4
    eb26:	f7ff f9c3 	bl	deb0 <sdu_recv>
    eb2a:	e7ad      	b.n	ea88 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x28>
		err = -EINVAL;
    eb2c:	f06f 0b15 	mvn.w	fp, #21
    eb30:	e7ab      	b.n	ea8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2a>
		return -ENOMEM;
    eb32:	f06f 0b0b 	mvn.w	fp, #11
    eb36:	e06a      	b.n	ec0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ae>
		return -ENOBUFS;
    eb38:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    eb3c:	e067      	b.n	ec0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ae>
	if (buf->len < 1) {
    eb3e:	9b06      	ldr	r3, [sp, #24]
    eb40:	2b00      	cmp	r3, #0
    eb42:	f43f ae40 	beq.w	e7c6 <bt_mesh_trans_recv+0x56>
	if (bt_mesh_rpl_check(rx, NULL)) {
    eb46:	2100      	movs	r1, #0
    eb48:	4620      	mov	r0, r4
    eb4a:	f000 f8c9 	bl	ece0 <bt_mesh_rpl_check>
    eb4e:	2800      	cmp	r0, #0
    eb50:	f47f ae39 	bne.w	e7c6 <bt_mesh_trans_recv+0x56>
	hdr = net_buf_simple_pull_u8(buf);
    eb54:	4630      	mov	r0, r6
    eb56:	f01d fb24 	bl	2c1a2 <net_buf_simple_pull_u8>
	if (rx->ctl) {
    eb5a:	7d22      	ldrb	r2, [r4, #20]
    eb5c:	f012 0208 	ands.w	r2, r2, #8
	hdr = net_buf_simple_pull_u8(buf);
    eb60:	4601      	mov	r1, r0
	if (rx->ctl) {
    eb62:	d006      	beq.n	eb72 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x112>
		return ctl_recv(rx, hdr, buf, seq_auth);
    eb64:	ab0c      	add	r3, sp, #48	; 0x30
    eb66:	4632      	mov	r2, r6
    eb68:	4620      	mov	r0, r4
    eb6a:	f7ff fb9b 	bl	e2a4 <ctl_recv>
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL,rssi);
    eb6e:	4683      	mov	fp, r0
    eb70:	e04d      	b.n	ec0e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1ae>
	if (buf->len < 1 + APP_MIC_LEN(0)) {
    eb72:	88b3      	ldrh	r3, [r6, #4]
    eb74:	2b04      	cmp	r3, #4
    eb76:	f67f ae26 	bls.w	e7c6 <bt_mesh_trans_recv+0x56>
	buf->len -= APP_MIC_LEN(0);
    eb7a:	3b04      	subs	r3, #4
    eb7c:	80b3      	strh	r3, [r6, #4]
	return sdu_recv(rx, hdr, 0, buf, &sdu, NULL,rssi);
    eb7e:	9b07      	ldr	r3, [sp, #28]
    eb80:	e9cd 2301 	strd	r2, r3, [sp, #4]
    eb84:	4b28      	ldr	r3, [pc, #160]	; (ec28 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1c8>)
    eb86:	9300      	str	r3, [sp, #0]
    eb88:	4620      	mov	r0, r4
    eb8a:	4633      	mov	r3, r6
    eb8c:	f7ff f990 	bl	deb0 <sdu_recv>
    eb90:	e7ed      	b.n	eb6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10e>
			return 0;
    eb92:	4683      	mov	fp, r0
    eb94:	e042      	b.n	ec1c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1bc>
		if (rx->seq_auth > *seq_auth) {
    eb96:	4299      	cmp	r1, r3
    eb98:	bf08      	it	eq
    eb9a:	4290      	cmpeq	r0, r2
    eb9c:	f4ff ae13 	bcc.w	e7c6 <bt_mesh_trans_recv+0x56>
	if (rx->hdr != *hdr || rx->seg_n != seg_n) {
    eba0:	f89a 2000 	ldrb.w	r2, [sl]
    eba4:	f89c 301e 	ldrb.w	r3, [ip, #30]
    eba8:	429a      	cmp	r2, r3
    ebaa:	f47f ae0c 	bne.w	e7c6 <bt_mesh_trans_recv+0x56>
    ebae:	f89c 301f 	ldrb.w	r3, [ip, #31]
    ebb2:	f003 021f 	and.w	r2, r3, #31
    ebb6:	454a      	cmp	r2, r9
    ebb8:	f47f ae05 	bne.w	e7c6 <bt_mesh_trans_recv+0x56>
	if (rx->ctl != net_rx->ctl) {
    ebbc:	7d22      	ldrb	r2, [r4, #20]
    ebbe:	f3c3 1140 	ubfx	r1, r3, #5, #1
    ebc2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    ebc6:	4291      	cmp	r1, r2
    ebc8:	f47f adfd 	bne.w	e7c6 <bt_mesh_trans_recv+0x56>
		if (rx->in_use) {
    ebcc:	0658      	lsls	r0, r3, #25
    ebce:	f53f aeba 	bmi.w	e946 <bt_mesh_trans_recv+0x1d6>
		if (rx->block == BLOCK_COMPLETE(rx->seg_n)) {
    ebd2:	f109 0101 	add.w	r1, r9, #1
    ebd6:	f04f 0901 	mov.w	r9, #1
    ebda:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
    ebde:	fa09 f901 	lsl.w	r9, r9, r1
    ebe2:	f109 39ff 	add.w	r9, r9, #4294967295
    ebe6:	454a      	cmp	r2, r9
    ebe8:	f47f aded 	bne.w	e7c6 <bt_mesh_trans_recv+0x56>
			send_ack(net_rx->sub, net_rx->ctx.recv_dst,
    ebec:	09db      	lsrs	r3, r3, #7
    ebee:	e9cd 2301 	strd	r2, r3, [sp, #4]
    ebf2:	ab0c      	add	r3, sp, #48	; 0x30
    ebf4:	9300      	str	r3, [sp, #0]
    ebf6:	8922      	ldrh	r2, [r4, #8]
    ebf8:	7be3      	ldrb	r3, [r4, #15]
    ebfa:	8961      	ldrh	r1, [r4, #10]
    ebfc:	6820      	ldr	r0, [r4, #0]
    ebfe:	f01b f914 	bl	29e2a <send_ack>
			if (rpl) {
    ec02:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ec04:	2800      	cmp	r0, #0
    ec06:	f47f ae51 	bne.w	e8ac <bt_mesh_trans_recv+0x13c>
			return -EALREADY;
    ec0a:	f06f 0b44 	mvn.w	fp, #68	; 0x44
	buf->data = buf->__buf + state->offset;
    ec0e:	9b08      	ldr	r3, [sp, #32]
    ec10:	68b0      	ldr	r0, [r6, #8]
    ec12:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    ec16:	9b06      	ldr	r3, [sp, #24]
	buf->data = buf->__buf + state->offset;
    ec18:	6030      	str	r0, [r6, #0]
	buf->len = state->len;
    ec1a:	80b3      	strh	r3, [r6, #4]
						  seg_count, buf);
		}
	}

	return err;
}
    ec1c:	4658      	mov	r0, fp
    ec1e:	b019      	add	sp, #100	; 0x64
    ec20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec24:	20000510 	.word	0x20000510
    ec28:	20000504 	.word	0x20000504

0000ec2c <bt_mesh_rx_reset>:

void bt_mesh_rx_reset(void)
{
    ec2c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		seg_rx_reset(&seg_rx[i], true);
    ec2e:	4c08      	ldr	r4, [pc, #32]	; (ec50 <bt_mesh_rx_reset+0x24>)
    ec30:	2101      	movs	r1, #1
    ec32:	4620      	mov	r0, r4
    ec34:	f7ff f986 	bl	df44 <seg_rx_reset>
    ec38:	f104 0060 	add.w	r0, r4, #96	; 0x60
    ec3c:	2101      	movs	r1, #1
    ec3e:	f7ff f981 	bl	df44 <seg_rx_reset>
    ec42:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    ec46:	2101      	movs	r1, #1
	}
}
    ec48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		seg_rx_reset(&seg_rx[i], true);
    ec4c:	f7ff b97a 	b.w	df44 <seg_rx_reset>
    ec50:	20001610 	.word	0x20001610

0000ec54 <bt_mesh_trans_reset>:

void bt_mesh_trans_reset(void)
{
    ec54:	b510      	push	{r4, lr}
	bt_mesh_rx_reset();

	BT_DBG("");

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		seg_tx_reset(&seg_tx[i]);
    ec56:	4c0a      	ldr	r4, [pc, #40]	; (ec80 <bt_mesh_trans_reset+0x2c>)
	bt_mesh_rx_reset();
    ec58:	f7ff ffe8 	bl	ec2c <bt_mesh_rx_reset>
		seg_tx_reset(&seg_tx[i]);
    ec5c:	4620      	mov	r0, r4
    ec5e:	f7ff f99b 	bl	df98 <seg_tx_reset>
    ec62:	f104 0070 	add.w	r0, r4, #112	; 0x70
    ec66:	f7ff f997 	bl	df98 <seg_tx_reset>
    ec6a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
    ec6e:	f7ff f993 	bl	df98 <seg_tx_reset>
			virtual_addrs[i].ref = 0U;
			virtual_addrs[i].changed = 1U;
		}
	}

	bt_mesh_rpl_clear();
    ec72:	f01b f9df 	bl	2a034 <bt_mesh_rpl_clear>

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_store_label();
	}
}
    ec76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_store_label();
    ec7a:	f01d b86b 	b.w	2bd54 <bt_mesh_store_label>
    ec7e:	bf00      	nop
    ec80:	20001730 	.word	0x20001730

0000ec84 <bt_mesh_trans_init>:

void bt_mesh_trans_init(void)
{
    ec84:	b538      	push	{r3, r4, r5, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(seg_tx); i++) {
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    ec86:	4d12      	ldr	r5, [pc, #72]	; (ecd0 <bt_mesh_trans_init+0x4c>)
    ec88:	4c12      	ldr	r4, [pc, #72]	; (ecd4 <bt_mesh_trans_init+0x50>)
    ec8a:	4629      	mov	r1, r5
    ec8c:	f104 0040 	add.w	r0, r4, #64	; 0x40
    ec90:	f01e fc88 	bl	2d5a4 <k_delayed_work_init>
    ec94:	4629      	mov	r1, r5
    ec96:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    ec9a:	f01e fc83 	bl	2d5a4 <k_delayed_work_init>
    ec9e:	4629      	mov	r1, r5
    eca0:	f504 7090 	add.w	r0, r4, #288	; 0x120
	}

	for (i = 0; i < ARRAY_SIZE(seg_rx); i++) {
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    eca4:	4d0c      	ldr	r5, [pc, #48]	; (ecd8 <bt_mesh_trans_init+0x54>)
    eca6:	4c0d      	ldr	r4, [pc, #52]	; (ecdc <bt_mesh_trans_init+0x58>)
		k_delayed_work_init(&seg_tx[i].retransmit, seg_retransmit);
    eca8:	f01e fc7c 	bl	2d5a4 <k_delayed_work_init>
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    ecac:	4629      	mov	r1, r5
    ecae:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ecb2:	f01e fc77 	bl	2d5a4 <k_delayed_work_init>
    ecb6:	4629      	mov	r1, r5
    ecb8:	f104 0090 	add.w	r0, r4, #144	; 0x90
    ecbc:	f01e fc72 	bl	2d5a4 <k_delayed_work_init>
    ecc0:	4629      	mov	r1, r5
    ecc2:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
	}
}
    ecc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_init(&seg_rx[i].ack, seg_ack);
    ecca:	f01e bc6b 	b.w	2d5a4 <k_delayed_work_init>
    ecce:	bf00      	nop
    ecd0:	00029dd3 	.word	0x00029dd3
    ecd4:	20001730 	.word	0x20001730
    ecd8:	00029eb9 	.word	0x00029eb9
    ecdc:	20001610 	.word	0x20001610

0000ece0 <bt_mesh_rpl_check>:
 * updated (needed for segmented messages), whereas if a NULL match is given
 * the RPL is immediately updated (used for unsegmented messages).
 */
bool bt_mesh_rpl_check(struct bt_mesh_net_rx *rx,
		struct bt_mesh_rpl **match)
{
    ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ece2:	460c      	mov	r4, r1
	int i;

	/* Don't bother checking messages from ourselves */
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    ece4:	7d01      	ldrb	r1, [r0, #20]
    ece6:	f001 0330 	and.w	r3, r1, #48	; 0x30
    ecea:	2b10      	cmp	r3, #16
{
    ecec:	4605      	mov	r5, r0
	if (rx->net_if == BT_MESH_NET_IF_LOCAL) {
    ecee:	d009      	beq.n	ed04 <bt_mesh_rpl_check+0x24>
		return false;
	}

	/* The RPL is used only for the local node */
	if (!rx->local_match) {
    ecf0:	f011 0040 	ands.w	r0, r1, #64	; 0x40
    ecf4:	d007      	beq.n	ed06 <bt_mesh_rpl_check+0x26>
    ecf6:	4813      	ldr	r0, [pc, #76]	; (ed44 <bt_mesh_rpl_check+0x64>)
		return false;
	}

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ecf8:	2200      	movs	r2, #0
    ecfa:	4606      	mov	r6, r0
		struct bt_mesh_rpl *rpl = &replay_list[i];

		/* Empty slot */
		if (!rpl->src) {
    ecfc:	8803      	ldrh	r3, [r0, #0]
    ecfe:	b91b      	cbnz	r3, ed08 <bt_mesh_rpl_check+0x28>
				return true;
			}

			if ((!rx->old_iv && rpl->old_iv) ||
			    rpl->seq < rx->seq) {
				if (match) {
    ed00:	b1b4      	cbz	r4, ed30 <bt_mesh_rpl_check+0x50>
					*match = rpl;
    ed02:	6020      	str	r0, [r4, #0]
		return false;
    ed04:	2000      	movs	r0, #0
		}
	}

	BT_ERR("RPL is full!");
	return true;
}
    ed06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (rpl->src == rx->ctx.addr) {
    ed08:	892f      	ldrh	r7, [r5, #8]
    ed0a:	429f      	cmp	r7, r3
    ed0c:	d114      	bne.n	ed38 <bt_mesh_rpl_check+0x58>
			if (rx->old_iv && !rpl->old_iv) {
    ed0e:	00d7      	lsls	r7, r2, #3
    ed10:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
    ed14:	7893      	ldrb	r3, [r2, #2]
    ed16:	07ca      	lsls	r2, r1, #31
    ed18:	d502      	bpl.n	ed20 <bt_mesh_rpl_check+0x40>
    ed1a:	b91b      	cbnz	r3, ed24 <bt_mesh_rpl_check+0x44>
				return true;
    ed1c:	2001      	movs	r0, #1
    ed1e:	e7f2      	b.n	ed06 <bt_mesh_rpl_check+0x26>
			if ((!rx->old_iv && rpl->old_iv) ||
    ed20:	2b00      	cmp	r3, #0
    ed22:	d1ed      	bne.n	ed00 <bt_mesh_rpl_check+0x20>
			    rpl->seq < rx->seq) {
    ed24:	443e      	add	r6, r7
			if ((!rx->old_iv && rpl->old_iv) ||
    ed26:	692b      	ldr	r3, [r5, #16]
    ed28:	6872      	ldr	r2, [r6, #4]
    ed2a:	429a      	cmp	r2, r3
    ed2c:	d2f6      	bcs.n	ed1c <bt_mesh_rpl_check+0x3c>
    ed2e:	e7e7      	b.n	ed00 <bt_mesh_rpl_check+0x20>
					bt_mesh_rpl_update(rpl, rx);
    ed30:	4629      	mov	r1, r5
    ed32:	f01b f975 	bl	2a020 <bt_mesh_rpl_update>
    ed36:	e7e5      	b.n	ed04 <bt_mesh_rpl_check+0x24>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ed38:	3201      	adds	r2, #1
    ed3a:	2a80      	cmp	r2, #128	; 0x80
    ed3c:	f100 0008 	add.w	r0, r0, #8
    ed40:	d1dc      	bne.n	ecfc <bt_mesh_rpl_check+0x1c>
    ed42:	e7eb      	b.n	ed1c <bt_mesh_rpl_check+0x3c>
    ed44:	20002590 	.word	0x20002590

0000ed48 <bt_mesh_rpl_find>:
struct bt_mesh_rpl *bt_mesh_rpl_find(uint16_t src)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
		if (replay_list[i].src == src) {
    ed48:	4b06      	ldr	r3, [pc, #24]	; (ed64 <bt_mesh_rpl_find+0x1c>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ed4a:	2200      	movs	r2, #0
		if (replay_list[i].src == src) {
    ed4c:	f833 1032 	ldrh.w	r1, [r3, r2, lsl #3]
    ed50:	4281      	cmp	r1, r0
    ed52:	d102      	bne.n	ed5a <bt_mesh_rpl_find+0x12>
			return &replay_list[i];
    ed54:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    ed58:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ed5a:	3201      	adds	r2, #1
    ed5c:	2a80      	cmp	r2, #128	; 0x80
    ed5e:	d1f5      	bne.n	ed4c <bt_mesh_rpl_find+0x4>
		}
	}

	return NULL;
    ed60:	2000      	movs	r0, #0
}
    ed62:	4770      	bx	lr
    ed64:	20002590 	.word	0x20002590

0000ed68 <bt_mesh_rpl_alloc>:
struct bt_mesh_rpl *bt_mesh_rpl_alloc(uint16_t src)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
		if (!replay_list[i].src) {
    ed68:	4b07      	ldr	r3, [pc, #28]	; (ed88 <bt_mesh_rpl_alloc+0x20>)
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ed6a:	2200      	movs	r2, #0
		if (!replay_list[i].src) {
    ed6c:	f833 1032 	ldrh.w	r1, [r3, r2, lsl #3]
    ed70:	b921      	cbnz	r1, ed7c <bt_mesh_rpl_alloc+0x14>
			replay_list[i].src = src;
    ed72:	f823 0032 	strh.w	r0, [r3, r2, lsl #3]
			return &replay_list[i];
    ed76:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    ed7a:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ed7c:	3201      	adds	r2, #1
    ed7e:	2a80      	cmp	r2, #128	; 0x80
    ed80:	d1f4      	bne.n	ed6c <bt_mesh_rpl_alloc+0x4>
		}
	}

	return NULL;
    ed82:	2000      	movs	r0, #0
}
    ed84:	4770      	bx	lr
    ed86:	bf00      	nop
    ed88:	20002590 	.word	0x20002590

0000ed8c <bt_mesh_rpl_foreach>:

void bt_mesh_rpl_foreach(bt_mesh_rpl_func_t func, void *user_data)
{
    ed8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed8e:	4d06      	ldr	r5, [pc, #24]	; (eda8 <bt_mesh_rpl_foreach+0x1c>)
    ed90:	4606      	mov	r6, r0
    ed92:	460f      	mov	r7, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ed94:	2400      	movs	r4, #0
		func(&replay_list[i], user_data);
    ed96:	4628      	mov	r0, r5
    ed98:	4639      	mov	r1, r7
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ed9a:	3401      	adds	r4, #1
		func(&replay_list[i], user_data);
    ed9c:	47b0      	blx	r6
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    ed9e:	2c80      	cmp	r4, #128	; 0x80
    eda0:	f105 0508 	add.w	r5, r5, #8
    eda4:	d1f7      	bne.n	ed96 <bt_mesh_rpl_foreach+0xa>
	}
}
    eda6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eda8:	20002590 	.word	0x20002590

0000edac <bt_mesh_rpl_reset>:

void bt_mesh_rpl_reset(void)
{
    edac:	b570      	push	{r4, r5, r6, lr}
    edae:	4c0b      	ldr	r4, [pc, #44]	; (eddc <bt_mesh_rpl_reset+0x30>)
	int i;

	/* Discard "old old" IV Index entries from RPL and flag
	 * any other ones (which are valid) as old.
	 */
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    edb0:	2500      	movs	r5, #0

		if (rpl->src) {
			if (rpl->old_iv) {
				(void)memset(rpl, 0, sizeof(*rpl));
			} else {
				rpl->old_iv = true;
    edb2:	2601      	movs	r6, #1
		if (rpl->src) {
    edb4:	8823      	ldrh	r3, [r4, #0]
    edb6:	b14b      	cbz	r3, edcc <bt_mesh_rpl_reset+0x20>
			if (rpl->old_iv) {
    edb8:	78a3      	ldrb	r3, [r4, #2]
    edba:	b16b      	cbz	r3, edd8 <bt_mesh_rpl_reset+0x2c>
				(void)memset(rpl, 0, sizeof(*rpl));
    edbc:	2208      	movs	r2, #8
    edbe:	2100      	movs	r1, #0
    edc0:	4620      	mov	r0, r4
    edc2:	f017 fe19 	bl	269f8 <memset>
			}

			if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
				bt_mesh_store_rpl(rpl);
    edc6:	4620      	mov	r0, r4
    edc8:	f01c ff4f 	bl	2bc6a <bt_mesh_store_rpl>
	for (i = 0; i < ARRAY_SIZE(replay_list); i++) {
    edcc:	3501      	adds	r5, #1
    edce:	2d80      	cmp	r5, #128	; 0x80
    edd0:	f104 0408 	add.w	r4, r4, #8
    edd4:	d1ee      	bne.n	edb4 <bt_mesh_rpl_reset+0x8>
			}
		}
	}
}
    edd6:	bd70      	pop	{r4, r5, r6, pc}
				rpl->old_iv = true;
    edd8:	70a6      	strb	r6, [r4, #2]
    edda:	e7f4      	b.n	edc6 <bt_mesh_rpl_reset+0x1a>
    eddc:	20002590 	.word	0x20002590

0000ede0 <bt_mesh_k2>:
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
}

int bt_mesh_k2(const uint8_t n[16], const uint8_t *p, size_t p_len,
	       uint8_t net_id[1], uint8_t enc_key[16], uint8_t priv_key[16])
{
    ede0:	b5f0      	push	{r4, r5, r6, r7, lr}
    ede2:	b095      	sub	sp, #84	; 0x54
    ede4:	4604      	mov	r4, r0
    ede6:	460f      	mov	r7, r1
	int err;

	BT_DBG("n %s", bt_hex(n, 16));
	BT_DBG("p %s", bt_hex(p, p_len));

	err = bt_mesh_s1("smk2", salt);
    ede8:	4828      	ldr	r0, [pc, #160]	; (ee8c <bt_mesh_k2+0xac>)
    edea:	a902      	add	r1, sp, #8
{
    edec:	4615      	mov	r5, r2
    edee:	461e      	mov	r6, r3
	err = bt_mesh_s1("smk2", salt);
    edf0:	f01b f973 	bl	2a0da <bt_mesh_s1>
	if (err) {
    edf4:	2800      	cmp	r0, #0
    edf6:	d146      	bne.n	ee86 <bt_mesh_k2+0xa6>
		return err;
	}

	err = bt_mesh_aes_cmac_one(salt, n, 16, t);
    edf8:	4621      	mov	r1, r4
    edfa:	ab0a      	add	r3, sp, #40	; 0x28
    edfc:	2210      	movs	r2, #16
    edfe:	a802      	add	r0, sp, #8
    ee00:	f01b f961 	bl	2a0c6 <bt_mesh_aes_cmac_one>
	if (err) {
    ee04:	4604      	mov	r4, r0
    ee06:	2800      	cmp	r0, #0
    ee08:	d13a      	bne.n	ee80 <bt_mesh_k2+0xa0>
		return err;
	}

	pad = 0x01;
    ee0a:	2301      	movs	r3, #1

	sg[0].data = NULL;
	sg[0].len  = 0;
	sg[1].data = p;
	sg[1].len  = p_len;
    ee0c:	e9cd 7510 	strd	r7, r5, [sp, #64]	; 0x40
	sg[2].data = &pad;
    ee10:	f10d 0207 	add.w	r2, sp, #7
	sg[2].len  = sizeof(pad);

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ee14:	ad06      	add	r5, sp, #24
	sg[2].len  = sizeof(pad);
    ee16:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	sg[0].len  = 0;
    ee1a:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
	pad = 0x01;
    ee1e:	f88d 3007 	strb.w	r3, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ee22:	2203      	movs	r2, #3
    ee24:	462b      	mov	r3, r5
    ee26:	a90e      	add	r1, sp, #56	; 0x38
    ee28:	a80a      	add	r0, sp, #40	; 0x28
    ee2a:	f01b f92a 	bl	2a082 <bt_mesh_aes_cmac>
	if (err) {
    ee2e:	4604      	mov	r4, r0
    ee30:	bb30      	cbnz	r0, ee80 <bt_mesh_k2+0xa0>
		return err;
	}

	net_id[0] = out[15] & 0x7f;
    ee32:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27

	sg[0].data = out;
    ee36:	950e      	str	r5, [sp, #56]	; 0x38
	net_id[0] = out[15] & 0x7f;
    ee38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ee3c:	7033      	strb	r3, [r6, #0]
	sg[0].len  = sizeof(out);
	pad = 0x02;
    ee3e:	2302      	movs	r3, #2
    ee40:	f88d 3007 	strb.w	r3, [sp, #7]
	sg[0].len  = sizeof(out);
    ee44:	2610      	movs	r6, #16

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ee46:	462b      	mov	r3, r5
    ee48:	2203      	movs	r2, #3
    ee4a:	a90e      	add	r1, sp, #56	; 0x38
    ee4c:	a80a      	add	r0, sp, #40	; 0x28
	sg[0].len  = sizeof(out);
    ee4e:	960f      	str	r6, [sp, #60]	; 0x3c
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ee50:	f01b f917 	bl	2a082 <bt_mesh_aes_cmac>
	if (err) {
    ee54:	4604      	mov	r4, r0
    ee56:	b998      	cbnz	r0, ee80 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(enc_key, out, 16);
    ee58:	4632      	mov	r2, r6
    ee5a:	4629      	mov	r1, r5
    ee5c:	981a      	ldr	r0, [sp, #104]	; 0x68
    ee5e:	f017 fda0 	bl	269a2 <memcpy>

	pad = 0x03;
    ee62:	2203      	movs	r2, #3

	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ee64:	462b      	mov	r3, r5
    ee66:	a90e      	add	r1, sp, #56	; 0x38
    ee68:	a80a      	add	r0, sp, #40	; 0x28
	pad = 0x03;
    ee6a:	f88d 2007 	strb.w	r2, [sp, #7]
	err = bt_mesh_aes_cmac(t, sg, ARRAY_SIZE(sg), out);
    ee6e:	f01b f908 	bl	2a082 <bt_mesh_aes_cmac>
	if (err) {
    ee72:	4604      	mov	r4, r0
    ee74:	b920      	cbnz	r0, ee80 <bt_mesh_k2+0xa0>
		return err;
	}

	memcpy(priv_key, out, 16);
    ee76:	981b      	ldr	r0, [sp, #108]	; 0x6c
    ee78:	4632      	mov	r2, r6
    ee7a:	4629      	mov	r1, r5
    ee7c:	f017 fd91 	bl	269a2 <memcpy>

	BT_DBG("NID 0x%02x enc_key %s", net_id[0], bt_hex(enc_key, 16));
	BT_DBG("priv_key %s", bt_hex(priv_key, 16));

	return 0;
}
    ee80:	4620      	mov	r0, r4
    ee82:	b015      	add	sp, #84	; 0x54
    ee84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return err;
    ee86:	2401      	movs	r4, #1
    ee88:	e7fa      	b.n	ee80 <bt_mesh_k2+0xa0>
    ee8a:	bf00      	nop
    ee8c:	000334b7 	.word	0x000334b7

0000ee90 <bt_mesh_k3>:

int bt_mesh_k3(const uint8_t n[16], uint8_t out[8])
{
    ee90:	b530      	push	{r4, r5, lr}
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    ee92:	4b14      	ldr	r3, [pc, #80]	; (eee4 <bt_mesh_k3+0x54>)
{
    ee94:	b08b      	sub	sp, #44	; 0x2c
    ee96:	4604      	mov	r4, r0
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    ee98:	6818      	ldr	r0, [r3, #0]
    ee9a:	9000      	str	r0, [sp, #0]
    ee9c:	791b      	ldrb	r3, [r3, #4]
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk3", tmp);
    ee9e:	4812      	ldr	r0, [pc, #72]	; (eee8 <bt_mesh_k3+0x58>)
	uint8_t id64[] = { 'i', 'd', '6', '4', 0x01 };
    eea0:	f88d 3004 	strb.w	r3, [sp, #4]
{
    eea4:	460d      	mov	r5, r1
	err = bt_mesh_s1("smk3", tmp);
    eea6:	a902      	add	r1, sp, #8
    eea8:	f01b f917 	bl	2a0da <bt_mesh_s1>
	if (err) {
    eeac:	b9b8      	cbnz	r0, eede <bt_mesh_k3+0x4e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    eeae:	4621      	mov	r1, r4
    eeb0:	ab06      	add	r3, sp, #24
    eeb2:	2210      	movs	r2, #16
    eeb4:	a802      	add	r0, sp, #8
    eeb6:	f01b f906 	bl	2a0c6 <bt_mesh_aes_cmac_one>
	if (err) {
    eeba:	4604      	mov	r4, r0
    eebc:	b960      	cbnz	r0, eed8 <bt_mesh_k3+0x48>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id64, sizeof(id64), tmp);
    eebe:	ab02      	add	r3, sp, #8
    eec0:	2205      	movs	r2, #5
    eec2:	4669      	mov	r1, sp
    eec4:	a806      	add	r0, sp, #24
    eec6:	f01b f8fe 	bl	2a0c6 <bt_mesh_aes_cmac_one>
	if (err) {
    eeca:	4604      	mov	r4, r0
    eecc:	b920      	cbnz	r0, eed8 <bt_mesh_k3+0x48>
		return err;
	}

	memcpy(out, tmp + 8, 8);
    eece:	2208      	movs	r2, #8
    eed0:	a904      	add	r1, sp, #16
    eed2:	4628      	mov	r0, r5
    eed4:	f017 fd65 	bl	269a2 <memcpy>

	return 0;
}
    eed8:	4620      	mov	r0, r4
    eeda:	b00b      	add	sp, #44	; 0x2c
    eedc:	bd30      	pop	{r4, r5, pc}
		return err;
    eede:	2401      	movs	r4, #1
    eee0:	e7fa      	b.n	eed8 <bt_mesh_k3+0x48>
    eee2:	bf00      	nop
    eee4:	000334c1 	.word	0x000334c1
    eee8:	000334bc 	.word	0x000334bc

0000eeec <bt_mesh_k4>:

int bt_mesh_k4(const uint8_t n[16], uint8_t out[1])
{
    eeec:	b530      	push	{r4, r5, lr}
    eeee:	b08b      	sub	sp, #44	; 0x2c
	uint8_t id6[] = { 'i', 'd', '6', 0x01 };
    eef0:	4b10      	ldr	r3, [pc, #64]	; (ef34 <bt_mesh_k4+0x48>)
    eef2:	9301      	str	r3, [sp, #4]
{
    eef4:	4605      	mov	r5, r0
    eef6:	460c      	mov	r4, r1
	uint8_t tmp[16];
	uint8_t t[16];
	int err;

	err = bt_mesh_s1("smk4", tmp);
    eef8:	480f      	ldr	r0, [pc, #60]	; (ef38 <bt_mesh_k4+0x4c>)
    eefa:	a902      	add	r1, sp, #8
    eefc:	f01b f8ed 	bl	2a0da <bt_mesh_s1>
	if (err) {
    ef00:	b9a8      	cbnz	r0, ef2e <bt_mesh_k4+0x42>
		return err;
	}

	err = bt_mesh_aes_cmac_one(tmp, n, 16, t);
    ef02:	ab06      	add	r3, sp, #24
    ef04:	2210      	movs	r2, #16
    ef06:	4629      	mov	r1, r5
    ef08:	a802      	add	r0, sp, #8
    ef0a:	f01b f8dc 	bl	2a0c6 <bt_mesh_aes_cmac_one>
	if (err) {
    ef0e:	b960      	cbnz	r0, ef2a <bt_mesh_k4+0x3e>
		return err;
	}

	err = bt_mesh_aes_cmac_one(t, id6, sizeof(id6), tmp);
    ef10:	2204      	movs	r2, #4
    ef12:	ab02      	add	r3, sp, #8
    ef14:	eb0d 0102 	add.w	r1, sp, r2
    ef18:	a806      	add	r0, sp, #24
    ef1a:	f01b f8d4 	bl	2a0c6 <bt_mesh_aes_cmac_one>
	if (err) {
    ef1e:	b920      	cbnz	r0, ef2a <bt_mesh_k4+0x3e>
		return err;
	}

	out[0] = tmp[15] & BIT_MASK(6);
    ef20:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ef24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ef28:	7023      	strb	r3, [r4, #0]

	return 0;
}
    ef2a:	b00b      	add	sp, #44	; 0x2c
    ef2c:	bd30      	pop	{r4, r5, pc}
		return err;
    ef2e:	2001      	movs	r0, #1
    ef30:	e7fb      	b.n	ef2a <bt_mesh_k4+0x3e>
    ef32:	bf00      	nop
    ef34:	01366469 	.word	0x01366469
    ef38:	000334c7 	.word	0x000334c7

0000ef3c <bt_mesh_id128>:

int bt_mesh_id128(const uint8_t n[16], const char *s, uint8_t out[16])
{
    ef3c:	b530      	push	{r4, r5, lr}
    ef3e:	b087      	sub	sp, #28
    ef40:	4604      	mov	r4, r0
    ef42:	4608      	mov	r0, r1
	const char *id128 = "id128\x01";
	uint8_t salt[16];
	int err;

	err = bt_mesh_s1(s, salt);
    ef44:	a902      	add	r1, sp, #8
{
    ef46:	4615      	mov	r5, r2
	err = bt_mesh_s1(s, salt);
    ef48:	f01b f8c7 	bl	2a0da <bt_mesh_s1>
	if (err) {
    ef4c:	b940      	cbnz	r0, ef60 <bt_mesh_id128+0x24>
		return err;
	}

	return bt_mesh_k1(n, 16, salt, id128, out);
    ef4e:	4b05      	ldr	r3, [pc, #20]	; (ef64 <bt_mesh_id128+0x28>)
    ef50:	9500      	str	r5, [sp, #0]
    ef52:	aa02      	add	r2, sp, #8
    ef54:	2110      	movs	r1, #16
    ef56:	4620      	mov	r0, r4
    ef58:	f01b f8d5 	bl	2a106 <bt_mesh_k1>
}
    ef5c:	b007      	add	sp, #28
    ef5e:	bd30      	pop	{r4, r5, pc}
		return err;
    ef60:	2001      	movs	r0, #1
    ef62:	e7fb      	b.n	ef5c <bt_mesh_id128+0x20>
    ef64:	000334cc 	.word	0x000334cc

0000ef68 <bt_mesh_net_obfuscate>:
	sys_put_be32(iv_index, &nonce[9]);
}

int bt_mesh_net_obfuscate(uint8_t *pdu, uint32_t iv_index,
			  const uint8_t privacy_key[16])
{
    ef68:	b530      	push	{r4, r5, lr}
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    ef6a:	4b1b      	ldr	r3, [pc, #108]	; (efd8 <bt_mesh_net_obfuscate+0x70>)
{
    ef6c:	b089      	sub	sp, #36	; 0x24
    ef6e:	4604      	mov	r4, r0
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    ef70:	6818      	ldr	r0, [r3, #0]
    ef72:	889b      	ldrh	r3, [r3, #4]
    ef74:	f8ad 3004 	strh.w	r3, [sp, #4]
{
    ef78:	4615      	mov	r5, r2
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    ef7a:	2300      	movs	r3, #0
	dst[0] = val >> 8;
    ef7c:	0e0a      	lsrs	r2, r1, #24
    ef7e:	f8cd 3006 	str.w	r3, [sp, #6]
    ef82:	f8cd 300a 	str.w	r3, [sp, #10]
    ef86:	f8ad 300e 	strh.w	r3, [sp, #14]
    ef8a:	f88d 2005 	strb.w	r2, [sp, #5]
	sys_put_be16(val >> 16, dst);
    ef8e:	0c0b      	lsrs	r3, r1, #16
	int err, i;

	BT_DBG("IVIndex %u, PrivacyKey %s", iv_index, bt_hex(privacy_key, 16));

	sys_put_be32(iv_index, &priv_rand[5]);
	memcpy(&priv_rand[9], &pdu[7], 7);
    ef90:	2207      	movs	r2, #7
	uint8_t priv_rand[16] = { 0x00, 0x00, 0x00, 0x00, 0x00, };
    ef92:	9000      	str	r0, [sp, #0]
	dst[1] = val;
    ef94:	f88d 3006 	strb.w	r3, [sp, #6]
    ef98:	f88d 1008 	strb.w	r1, [sp, #8]
	dst[0] = val >> 8;
    ef9c:	f3c1 2307 	ubfx	r3, r1, #8, #8
	memcpy(&priv_rand[9], &pdu[7], 7);
    efa0:	f10d 0009 	add.w	r0, sp, #9
    efa4:	18a1      	adds	r1, r4, r2
    efa6:	f88d 3007 	strb.w	r3, [sp, #7]
    efaa:	f017 fcfa 	bl	269a2 <memcpy>

	BT_DBG("PrivacyRandom %s", bt_hex(priv_rand, 16));

	err = bt_encrypt_be(privacy_key, priv_rand, tmp);
    efae:	aa04      	add	r2, sp, #16
    efb0:	4669      	mov	r1, sp
    efb2:	4628      	mov	r0, r5
    efb4:	f006 ffb6 	bl	15f24 <bt_encrypt_be>
	if (err) {
    efb8:	b958      	cbnz	r0, efd2 <bt_mesh_net_obfuscate+0x6a>
    efba:	4623      	mov	r3, r4
    efbc:	aa04      	add	r2, sp, #16
    efbe:	3406      	adds	r4, #6
		return err;
	}

	for (i = 0; i < 6; i++) {
		pdu[1 + i] ^= tmp[i];
    efc0:	f813 5f01 	ldrb.w	r5, [r3, #1]!
    efc4:	f812 1b01 	ldrb.w	r1, [r2], #1
	for (i = 0; i < 6; i++) {
    efc8:	42a3      	cmp	r3, r4
		pdu[1 + i] ^= tmp[i];
    efca:	ea81 0105 	eor.w	r1, r1, r5
    efce:	7019      	strb	r1, [r3, #0]
	for (i = 0; i < 6; i++) {
    efd0:	d1f6      	bne.n	efc0 <bt_mesh_net_obfuscate+0x58>
	}

	return 0;
}
    efd2:	b009      	add	sp, #36	; 0x24
    efd4:	bd30      	pop	{r4, r5, pc}
    efd6:	bf00      	nop
    efd8:	0002dd33 	.word	0x0002dd33

0000efdc <bt_mesh_fcs_calc>:
	0xb4, 0x25, 0x57, 0xc6, 0xb3, 0x22, 0x50, 0xc1,
	0xba, 0x2b, 0x59, 0xc8, 0xbd, 0x2c, 0x5e, 0xcf
};

uint8_t bt_mesh_fcs_calc(const uint8_t *data, uint8_t data_len)
{
    efdc:	b510      	push	{r4, lr}
	uint8_t fcs = 0xff;

	while (data_len--) {
		fcs = crc_table[fcs ^ *data++];
    efde:	4a06      	ldr	r2, [pc, #24]	; (eff8 <bt_mesh_fcs_calc+0x1c>)
    efe0:	4401      	add	r1, r0
	uint8_t fcs = 0xff;
    efe2:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    efe4:	4288      	cmp	r0, r1
    efe6:	d102      	bne.n	efee <bt_mesh_fcs_calc+0x12>
	}

	BT_DBG("fcs 0x%02x", 0xff - fcs);

	return 0xff - fcs;
    efe8:	43d8      	mvns	r0, r3
}
    efea:	b2c0      	uxtb	r0, r0
    efec:	bd10      	pop	{r4, pc}
		fcs = crc_table[fcs ^ *data++];
    efee:	f810 4b01 	ldrb.w	r4, [r0], #1
    eff2:	4063      	eors	r3, r4
    eff4:	5cd3      	ldrb	r3, [r2, r3]
    eff6:	e7f5      	b.n	efe4 <bt_mesh_fcs_calc+0x8>
    eff8:	000334d8 	.word	0x000334d8

0000effc <bt_mesh_fcs_check>:

bool bt_mesh_fcs_check(struct net_buf_simple *buf, uint8_t received_fcs)
{
    effc:	b530      	push	{r4, r5, lr}
	const uint8_t *data = buf->data;
    effe:	6804      	ldr	r4, [r0, #0]
	uint16_t data_len = buf->len;
	uint8_t fcs = 0xff;

	while (data_len--) {
    f000:	8880      	ldrh	r0, [r0, #4]
    f002:	4d08      	ldr	r5, [pc, #32]	; (f024 <bt_mesh_fcs_check+0x28>)
    f004:	4420      	add	r0, r4
	uint8_t fcs = 0xff;
    f006:	23ff      	movs	r3, #255	; 0xff
	while (data_len--) {
    f008:	4284      	cmp	r4, r0
    f00a:	d106      	bne.n	f01a <bt_mesh_fcs_check+0x1e>
		fcs = crc_table[fcs ^ *data++];
	}

	return crc_table[fcs ^ received_fcs] == 0xcf;
    f00c:	404b      	eors	r3, r1
    f00e:	5ce8      	ldrb	r0, [r5, r3]
}
    f010:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
    f014:	4258      	negs	r0, r3
    f016:	4158      	adcs	r0, r3
    f018:	bd30      	pop	{r4, r5, pc}
		fcs = crc_table[fcs ^ *data++];
    f01a:	f814 2b01 	ldrb.w	r2, [r4], #1
    f01e:	405a      	eors	r2, r3
    f020:	5cab      	ldrb	r3, [r5, r2]
    f022:	e7f1      	b.n	f008 <bt_mesh_fcs_check+0xc>
    f024:	000334d8 	.word	0x000334d8

0000f028 <bt_mesh_prov_conf_key>:
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
}

int bt_mesh_prov_conf_key(const uint8_t dhkey[32], const uint8_t conf_salt[16],
			  uint8_t conf_key[16])
{
    f028:	b507      	push	{r0, r1, r2, lr}
	return bt_mesh_k1(dhkey, 32, conf_salt, "prck", conf_key);
    f02a:	4b04      	ldr	r3, [pc, #16]	; (f03c <bt_mesh_prov_conf_key+0x14>)
    f02c:	9200      	str	r2, [sp, #0]
    f02e:	460a      	mov	r2, r1
    f030:	2120      	movs	r1, #32
    f032:	f01b f868 	bl	2a106 <bt_mesh_k1>
}
    f036:	b003      	add	sp, #12
    f038:	f85d fb04 	ldr.w	pc, [sp], #4
    f03c:	000334d3 	.word	0x000334d3

0000f040 <mod_init>:
	}
}

static void mod_init(struct bt_mesh_model *mod, struct bt_mesh_elem *elem,
		     bool vnd, bool primary, void *user_data)
{
    f040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f042:	9d06      	ldr	r5, [sp, #24]
	int i;
	int *err = user_data;

	if (*err) {
    f044:	682b      	ldr	r3, [r5, #0]
{
    f046:	4604      	mov	r4, r0
    f048:	460e      	mov	r6, r1
    f04a:	4617      	mov	r7, r2
	if (*err) {
    f04c:	b9f3      	cbnz	r3, f08c <mod_init+0x4c>
		return;
	}

	if (mod->pub) {
    f04e:	6880      	ldr	r0, [r0, #8]
    f050:	b120      	cbz	r0, f05c <mod_init+0x1c>
		mod->pub->mod = mod;
    f052:	f840 4b18 	str.w	r4, [r0], #24
		k_delayed_work_init(&mod->pub->timer, mod_publish);
    f056:	490f      	ldr	r1, [pc, #60]	; (f094 <mod_init+0x54>)
    f058:	f01e faa4 	bl	2d5a4 <k_delayed_work_init>
	}

	for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
		mod->keys[i] = BT_MESH_KEY_UNUSED;
    f05c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f060:	81a3      	strh	r3, [r4, #12]
	}

	mod->elem_idx = elem - dev_comp->elem;
    f062:	4b0d      	ldr	r3, [pc, #52]	; (f098 <mod_init+0x58>)
    f064:	681b      	ldr	r3, [r3, #0]
    f066:	68db      	ldr	r3, [r3, #12]
    f068:	1af3      	subs	r3, r6, r3
    f06a:	111b      	asrs	r3, r3, #4
    f06c:	7123      	strb	r3, [r4, #4]
	if (vnd) {
    f06e:	4b0b      	ldr	r3, [pc, #44]	; (f09c <mod_init+0x5c>)
    f070:	b16f      	cbz	r7, f08e <mod_init+0x4e>
		mod->mod_idx = mod - elem->vnd_models;
    f072:	68f2      	ldr	r2, [r6, #12]
	} else {
		mod->mod_idx = mod - elem->models;
    f074:	1aa2      	subs	r2, r4, r2
    f076:	1092      	asrs	r2, r2, #2
    f078:	4353      	muls	r3, r2
    f07a:	b2db      	uxtb	r3, r3
    f07c:	7163      	strb	r3, [r4, #5]
	}

	if (mod->cb && mod->cb->init) {
    f07e:	6963      	ldr	r3, [r4, #20]
    f080:	b123      	cbz	r3, f08c <mod_init+0x4c>
    f082:	689b      	ldr	r3, [r3, #8]
    f084:	b113      	cbz	r3, f08c <mod_init+0x4c>
		*err = mod->cb->init(mod);
    f086:	4620      	mov	r0, r4
    f088:	4798      	blx	r3
    f08a:	6028      	str	r0, [r5, #0]
	}
}
    f08c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mod->mod_idx = mod - elem->models;
    f08e:	68b2      	ldr	r2, [r6, #8]
    f090:	e7f0      	b.n	f074 <mod_init+0x34>
    f092:	bf00      	nop
    f094:	0000f549 	.word	0x0000f549
    f098:	20002990 	.word	0x20002990
    f09c:	b6db6db7 	.word	0xb6db6db7

0000f0a0 <bt_mesh_model_foreach>:
{
    f0a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < dev_comp->elem_count; i++) {
    f0a4:	f8df a06c 	ldr.w	sl, [pc, #108]	; f114 <bt_mesh_model_foreach+0x74>
{
    f0a8:	4606      	mov	r6, r0
    f0aa:	460f      	mov	r7, r1
	for (i = 0; i < dev_comp->elem_count; i++) {
    f0ac:	2500      	movs	r5, #0
			struct bt_mesh_model *model = &elem->models[j];
    f0ae:	f04f 091c 	mov.w	r9, #28
	for (i = 0; i < dev_comp->elem_count; i++) {
    f0b2:	f8da 3000 	ldr.w	r3, [sl]
    f0b6:	689a      	ldr	r2, [r3, #8]
    f0b8:	42aa      	cmp	r2, r5
    f0ba:	d802      	bhi.n	f0c2 <bt_mesh_model_foreach+0x22>
}
    f0bc:	b002      	add	sp, #8
    f0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f0c2:	68dc      	ldr	r4, [r3, #12]
		for (j = 0; j < elem->model_count; j++) {
    f0c4:	f04f 0800 	mov.w	r8, #0
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f0c8:	eb04 1405 	add.w	r4, r4, r5, lsl #4
		for (j = 0; j < elem->model_count; j++) {
    f0cc:	7923      	ldrb	r3, [r4, #4]
    f0ce:	4543      	cmp	r3, r8
    f0d0:	dc06      	bgt.n	f0e0 <bt_mesh_model_foreach+0x40>
		for (j = 0; j < elem->vnd_model_count; j++) {
    f0d2:	f04f 0800 	mov.w	r8, #0
    f0d6:	7963      	ldrb	r3, [r4, #5]
    f0d8:	4543      	cmp	r3, r8
    f0da:	dc0e      	bgt.n	f0fa <bt_mesh_model_foreach+0x5a>
	for (i = 0; i < dev_comp->elem_count; i++) {
    f0dc:	3501      	adds	r5, #1
    f0de:	e7e8      	b.n	f0b2 <bt_mesh_model_foreach+0x12>
			struct bt_mesh_model *model = &elem->models[j];
    f0e0:	68a0      	ldr	r0, [r4, #8]
			func(model, elem, false, i == 0, user_data);
    f0e2:	9700      	str	r7, [sp, #0]
    f0e4:	fab5 f385 	clz	r3, r5
    f0e8:	fb09 0008 	mla	r0, r9, r8, r0
    f0ec:	095b      	lsrs	r3, r3, #5
    f0ee:	2200      	movs	r2, #0
    f0f0:	4621      	mov	r1, r4
    f0f2:	47b0      	blx	r6
		for (j = 0; j < elem->model_count; j++) {
    f0f4:	f108 0801 	add.w	r8, r8, #1
    f0f8:	e7e8      	b.n	f0cc <bt_mesh_model_foreach+0x2c>
			struct bt_mesh_model *model = &elem->vnd_models[j];
    f0fa:	68e0      	ldr	r0, [r4, #12]
			func(model, elem, true, i == 0, user_data);
    f0fc:	9700      	str	r7, [sp, #0]
    f0fe:	fab5 f385 	clz	r3, r5
    f102:	fb09 0008 	mla	r0, r9, r8, r0
    f106:	095b      	lsrs	r3, r3, #5
    f108:	2201      	movs	r2, #1
    f10a:	4621      	mov	r1, r4
    f10c:	47b0      	blx	r6
		for (j = 0; j < elem->vnd_model_count; j++) {
    f10e:	f108 0801 	add.w	r8, r8, #1
    f112:	e7e0      	b.n	f0d6 <bt_mesh_model_foreach+0x36>
    f114:	20002990 	.word	0x20002990

0000f118 <bt_mesh_model_pub_period_get>:
	if (!mod->pub) {
    f118:	6883      	ldr	r3, [r0, #8]
    f11a:	b1e3      	cbz	r3, f156 <bt_mesh_model_pub_period_get+0x3e>
	switch (mod->pub->period >> 6) {
    f11c:	7a98      	ldrb	r0, [r3, #10]
    f11e:	0982      	lsrs	r2, r0, #6
    f120:	2a02      	cmp	r2, #2
    f122:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    f126:	d011      	beq.n	f14c <bt_mesh_model_pub_period_get+0x34>
    f128:	2a03      	cmp	r2, #3
    f12a:	d012      	beq.n	f152 <bt_mesh_model_pub_period_get+0x3a>
    f12c:	2a01      	cmp	r2, #1
    f12e:	d009      	beq.n	f144 <bt_mesh_model_pub_period_get+0x2c>
		period = (mod->pub->period & BIT_MASK(6)) * 100U;
    f130:	2264      	movs	r2, #100	; 0x64
    f132:	fb10 f002 	smulbb	r0, r0, r2
	if (mod->pub->fast_period) {
    f136:	7adb      	ldrb	r3, [r3, #11]
    f138:	06da      	lsls	r2, r3, #27
    f13a:	d50d      	bpl.n	f158 <bt_mesh_model_pub_period_get+0x40>
		return period >> mod->pub->period_div;
    f13c:	f003 030f 	and.w	r3, r3, #15
    f140:	4118      	asrs	r0, r3
    f142:	4770      	bx	lr
		period = (mod->pub->period & BIT_MASK(6)) * MSEC_PER_SEC;
    f144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    f148:	4350      	muls	r0, r2
		break;
    f14a:	e7f4      	b.n	f136 <bt_mesh_model_pub_period_get+0x1e>
		period = (mod->pub->period & BIT_MASK(6)) * 10U * MSEC_PER_SEC;
    f14c:	f242 7210 	movw	r2, #10000	; 0x2710
    f150:	e7fa      	b.n	f148 <bt_mesh_model_pub_period_get+0x30>
		period = (mod->pub->period & BIT_MASK(6)) * 600U * MSEC_PER_SEC;
    f152:	4a02      	ldr	r2, [pc, #8]	; (f15c <bt_mesh_model_pub_period_get+0x44>)
    f154:	e7f8      	b.n	f148 <bt_mesh_model_pub_period_get+0x30>
		return 0;
    f156:	4618      	mov	r0, r3
}
    f158:	4770      	bx	lr
    f15a:	bf00      	nop
    f15c:	000927c0 	.word	0x000927c0

0000f160 <publish_sent>:
{
    f160:	b570      	push	{r4, r5, r6, lr}
	if (mod->pub->count) {
    f162:	688e      	ldr	r6, [r1, #8]
    f164:	7af3      	ldrb	r3, [r6, #11]
    f166:	f013 0fe0 	tst.w	r3, #224	; 0xe0
{
    f16a:	460d      	mov	r5, r1
	if (mod->pub->count) {
    f16c:	d01c      	beq.n	f1a8 <publish_sent+0x48>
		delay = BT_MESH_PUB_TRANSMIT_INT(mod->pub->retransmit);
    f16e:	7a74      	ldrb	r4, [r6, #9]
    f170:	08e0      	lsrs	r0, r4, #3
    f172:	2432      	movs	r4, #50	; 0x32
    f174:	fb00 4404 	mla	r4, r0, r4, r4
		k_delayed_work_submit(&mod->pub->timer, K_MSEC(delay));
    f178:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    f17c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f180:	f240 30e7 	movw	r0, #999	; 0x3e7
    f184:	2100      	movs	r1, #0
    f186:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f18a:	2300      	movs	r3, #0
    f18c:	fbc6 0104 	smlal	r0, r1, r6, r4
    f190:	f7f1 f806 	bl	1a0 <__aeabi_uldivmod>
    f194:	68ad      	ldr	r5, [r5, #8]
    f196:	3518      	adds	r5, #24
    f198:	4602      	mov	r2, r0
    f19a:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    f19c:	480b      	ldr	r0, [pc, #44]	; (f1cc <publish_sent+0x6c>)
    f19e:	4629      	mov	r1, r5
}
    f1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f1a4:	f014 bde2 	b.w	23d6c <k_delayed_work_submit_to_queue>
	period = bt_mesh_model_pub_period_get(mod);
    f1a8:	4608      	mov	r0, r1
    f1aa:	f7ff ffb5 	bl	f118 <bt_mesh_model_pub_period_get>
	if (!period) {
    f1ae:	4604      	mov	r4, r0
    f1b0:	b140      	cbz	r0, f1c4 <publish_sent+0x64>
	elapsed = k_uptime_get_32() - pub->period_start;
    f1b2:	f01b f8e3 	bl	2a37c <k_uptime_get_32>
    f1b6:	68f3      	ldr	r3, [r6, #12]
    f1b8:	1ac2      	subs	r2, r0, r3
	if (elapsed >= period) {
    f1ba:	4294      	cmp	r4, r2
    f1bc:	d903      	bls.n	f1c6 <publish_sent+0x66>
	return period - elapsed;
    f1be:	441c      	add	r4, r3
	if (delay) {
    f1c0:	1a24      	subs	r4, r4, r0
    f1c2:	d1d9      	bne.n	f178 <publish_sent+0x18>
}
    f1c4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
    f1c6:	2401      	movs	r4, #1
    f1c8:	e7d6      	b.n	f178 <publish_sent+0x18>
    f1ca:	bf00      	nop
    f1cc:	20001fd8 	.word	0x20001fd8

0000f1d0 <bt_mesh_model_elem>:
	return &dev_comp->elem[mod->elem_idx];
    f1d0:	4b03      	ldr	r3, [pc, #12]	; (f1e0 <bt_mesh_model_elem+0x10>)
    f1d2:	7900      	ldrb	r0, [r0, #4]
    f1d4:	681b      	ldr	r3, [r3, #0]
    f1d6:	68db      	ldr	r3, [r3, #12]
}
    f1d8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    f1dc:	4770      	bx	lr
    f1de:	bf00      	nop
    f1e0:	20002990 	.word	0x20002990

0000f1e4 <bt_mesh_model_get>:
	if (elem_idx >= dev_comp->elem_count) {
    f1e4:	4b0d      	ldr	r3, [pc, #52]	; (f21c <bt_mesh_model_get+0x38>)
    f1e6:	681b      	ldr	r3, [r3, #0]
{
    f1e8:	b510      	push	{r4, lr}
	if (elem_idx >= dev_comp->elem_count) {
    f1ea:	689c      	ldr	r4, [r3, #8]
    f1ec:	42a1      	cmp	r1, r4
    f1ee:	d213      	bcs.n	f218 <bt_mesh_model_get+0x34>
	elem = &dev_comp->elem[elem_idx];
    f1f0:	68db      	ldr	r3, [r3, #12]
    f1f2:	eb03 1101 	add.w	r1, r3, r1, lsl #4
	if (vnd) {
    f1f6:	b140      	cbz	r0, f20a <bt_mesh_model_get+0x26>
		if (mod_idx >= elem->vnd_model_count) {
    f1f8:	794b      	ldrb	r3, [r1, #5]
    f1fa:	4293      	cmp	r3, r2
    f1fc:	d90c      	bls.n	f218 <bt_mesh_model_get+0x34>
		return &elem->vnd_models[mod_idx];
    f1fe:	68c8      	ldr	r0, [r1, #12]
    f200:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
		return &elem->models[mod_idx];
    f204:	eb00 0082 	add.w	r0, r0, r2, lsl #2
}
    f208:	bd10      	pop	{r4, pc}
		if (mod_idx >= elem->model_count) {
    f20a:	790b      	ldrb	r3, [r1, #4]
    f20c:	4293      	cmp	r3, r2
    f20e:	d9fb      	bls.n	f208 <bt_mesh_model_get+0x24>
		return &elem->models[mod_idx];
    f210:	6888      	ldr	r0, [r1, #8]
    f212:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    f216:	e7f5      	b.n	f204 <bt_mesh_model_get+0x20>
		return NULL;
    f218:	2000      	movs	r0, #0
    f21a:	e7f5      	b.n	f208 <bt_mesh_model_get+0x24>
    f21c:	20002990 	.word	0x20002990

0000f220 <bt_mesh_comp_register>:
int bt_mesh_comp_register(const struct bt_mesh_comp *comp)
{
	int err;

	/* There must be at least one element */
	if (!comp->elem_count) {
    f220:	6883      	ldr	r3, [r0, #8]
{
    f222:	b507      	push	{r0, r1, r2, lr}
	if (!comp->elem_count) {
    f224:	b15b      	cbz	r3, f23e <bt_mesh_comp_register+0x1e>
		return -EINVAL;
	}

	dev_comp = comp;
    f226:	4b07      	ldr	r3, [pc, #28]	; (f244 <bt_mesh_comp_register+0x24>)

	err = 0;
	bt_mesh_model_foreach(mod_init, &err);
    f228:	a901      	add	r1, sp, #4
	dev_comp = comp;
    f22a:	6018      	str	r0, [r3, #0]
	bt_mesh_model_foreach(mod_init, &err);
    f22c:	4806      	ldr	r0, [pc, #24]	; (f248 <bt_mesh_comp_register+0x28>)
	err = 0;
    f22e:	2300      	movs	r3, #0
    f230:	9301      	str	r3, [sp, #4]
	bt_mesh_model_foreach(mod_init, &err);
    f232:	f7ff ff35 	bl	f0a0 <bt_mesh_model_foreach>

	return err;
    f236:	9801      	ldr	r0, [sp, #4]
}
    f238:	b003      	add	sp, #12
    f23a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    f23e:	f06f 0015 	mvn.w	r0, #21
    f242:	e7f9      	b.n	f238 <bt_mesh_comp_register+0x18>
    f244:	20002990 	.word	0x20002990
    f248:	0000f041 	.word	0x0000f041

0000f24c <bt_mesh_comp_provision>:

void bt_mesh_comp_provision(uint16_t addr)
{
	int i;

	dev_primary_addr = addr;
    f24c:	4b08      	ldr	r3, [pc, #32]	; (f270 <bt_mesh_comp_provision+0x24>)
{
    f24e:	b570      	push	{r4, r5, r6, lr}
	dev_primary_addr = addr;
    f250:	8018      	strh	r0, [r3, #0]

	BT_DBG("addr 0x%04x elem_count %zu", addr, dev_comp->elem_count);

	for (i = 0; i < dev_comp->elem_count; i++) {
    f252:	4b08      	ldr	r3, [pc, #32]	; (f274 <bt_mesh_comp_provision+0x28>)
    f254:	6819      	ldr	r1, [r3, #0]
    f256:	688c      	ldr	r4, [r1, #8]
    f258:	2300      	movs	r3, #0
    f25a:	18c2      	adds	r2, r0, r3
    f25c:	42a3      	cmp	r3, r4
    f25e:	b292      	uxth	r2, r2
    f260:	d100      	bne.n	f264 <bt_mesh_comp_provision+0x18>
		elem->addr = addr++;

		BT_DBG("addr 0x%04x mod_count %u vnd_mod_count %u",
		       elem->addr, elem->model_count, elem->vnd_model_count);
	}
}
    f262:	bd70      	pop	{r4, r5, r6, pc}
		elem->addr = addr++;
    f264:	011d      	lsls	r5, r3, #4
    f266:	68ce      	ldr	r6, [r1, #12]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f268:	3301      	adds	r3, #1
		elem->addr = addr++;
    f26a:	5372      	strh	r2, [r6, r5]
	for (i = 0; i < dev_comp->elem_count; i++) {
    f26c:	e7f5      	b.n	f25a <bt_mesh_comp_provision+0xe>
    f26e:	bf00      	nop
    f270:	20009042 	.word	0x20009042
    f274:	20002990 	.word	0x20002990

0000f278 <bt_mesh_comp_unprovision>:

void bt_mesh_comp_unprovision(void)
{
	BT_DBG("");

	dev_primary_addr = BT_MESH_ADDR_UNASSIGNED;
    f278:	4b01      	ldr	r3, [pc, #4]	; (f280 <bt_mesh_comp_unprovision+0x8>)
    f27a:	2200      	movs	r2, #0
    f27c:	801a      	strh	r2, [r3, #0]
}
    f27e:	4770      	bx	lr
    f280:	20009042 	.word	0x20009042

0000f284 <bt_mesh_primary_addr>:

uint16_t bt_mesh_primary_addr(void)
{
	return dev_primary_addr;
}
    f284:	4b01      	ldr	r3, [pc, #4]	; (f28c <bt_mesh_primary_addr+0x8>)
    f286:	8818      	ldrh	r0, [r3, #0]
    f288:	4770      	bx	lr
    f28a:	bf00      	nop
    f28c:	20009042 	.word	0x20009042

0000f290 <bt_mesh_elem_find>:

struct bt_mesh_elem *bt_mesh_elem_find(uint16_t addr)
{
	uint16_t index;

	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f290:	4b1e      	ldr	r3, [pc, #120]	; (f30c <bt_mesh_elem_find+0x7c>)
{
    f292:	b5f0      	push	{r4, r5, r6, r7, lr}
    f294:	681e      	ldr	r6, [r3, #0]
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f296:	b203      	sxth	r3, r0
    f298:	2b00      	cmp	r3, #0
    f29a:	68b4      	ldr	r4, [r6, #8]
{
    f29c:	4601      	mov	r1, r0
	if (BT_MESH_ADDR_IS_UNICAST(addr)) {
    f29e:	dd2d      	ble.n	f2fc <bt_mesh_elem_find+0x6c>
		index = (addr - dev_comp->elem[0].addr);
    f2a0:	68f2      	ldr	r2, [r6, #12]
    f2a2:	8813      	ldrh	r3, [r2, #0]
    f2a4:	1ac0      	subs	r0, r0, r3
		if (index < dev_comp->elem_count) {
    f2a6:	b280      	uxth	r0, r0
    f2a8:	42a0      	cmp	r0, r4
    f2aa:	d22c      	bcs.n	f306 <bt_mesh_elem_find+0x76>
			return &dev_comp->elem[index];
    f2ac:	eb02 1000 	add.w	r0, r2, r0, lsl #4
			return elem;
		}
	}

	return NULL;
}
    f2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_mesh_elem *elem = &dev_comp->elem[index];
    f2b2:	68f0      	ldr	r0, [r6, #12]
    f2b4:	eb00 1003 	add.w	r0, r0, r3, lsl #4
	for (i = 0; i < elem->model_count; i++) {
    f2b8:	2300      	movs	r3, #0
    f2ba:	f890 c004 	ldrb.w	ip, [r0, #4]
    f2be:	4563      	cmp	r3, ip
    f2c0:	db06      	blt.n	f2d0 <bt_mesh_elem_find+0x40>
	for (i = 0; i < elem->vnd_model_count; i++) {
    f2c2:	f890 c005 	ldrb.w	ip, [r0, #5]
    f2c6:	2300      	movs	r3, #0
    f2c8:	4563      	cmp	r3, ip
    f2ca:	db0c      	blt.n	f2e6 <bt_mesh_elem_find+0x56>
	for (index = 0; index < dev_comp->elem_count; index++) {
    f2cc:	3501      	adds	r5, #1
    f2ce:	e017      	b.n	f300 <bt_mesh_elem_find+0x70>
		model = &elem->models[i];
    f2d0:	6882      	ldr	r2, [r0, #8]
    f2d2:	fb07 2203 	mla	r2, r7, r3, r2
		if (mod->groups[i] == addr) {
    f2d6:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
    f2da:	458e      	cmp	lr, r1
    f2dc:	d101      	bne.n	f2e2 <bt_mesh_elem_find+0x52>
		if (match) {
    f2de:	320e      	adds	r2, #14
    f2e0:	d1e6      	bne.n	f2b0 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->model_count; i++) {
    f2e2:	3301      	adds	r3, #1
    f2e4:	e7eb      	b.n	f2be <bt_mesh_elem_find+0x2e>
		model = &elem->vnd_models[i];
    f2e6:	68c2      	ldr	r2, [r0, #12]
    f2e8:	fb07 2203 	mla	r2, r7, r3, r2
		if (mod->groups[i] == addr) {
    f2ec:	f8b2 e00e 	ldrh.w	lr, [r2, #14]
    f2f0:	458e      	cmp	lr, r1
    f2f2:	d101      	bne.n	f2f8 <bt_mesh_elem_find+0x68>
		if (match) {
    f2f4:	320e      	adds	r2, #14
    f2f6:	d1db      	bne.n	f2b0 <bt_mesh_elem_find+0x20>
	for (i = 0; i < elem->vnd_model_count; i++) {
    f2f8:	3301      	adds	r3, #1
    f2fa:	e7e5      	b.n	f2c8 <bt_mesh_elem_find+0x38>
    f2fc:	2500      	movs	r5, #0
		model = &elem->models[i];
    f2fe:	271c      	movs	r7, #28
	for (index = 0; index < dev_comp->elem_count; index++) {
    f300:	b2ab      	uxth	r3, r5
    f302:	42a3      	cmp	r3, r4
    f304:	d3d5      	bcc.n	f2b2 <bt_mesh_elem_find+0x22>
			return NULL;
    f306:	2000      	movs	r0, #0
    f308:	e7d2      	b.n	f2b0 <bt_mesh_elem_find+0x20>
    f30a:	bf00      	nop
    f30c:	20002990 	.word	0x20002990

0000f310 <bt_mesh_model_recv>:
		return false;
	}
}

void bt_mesh_model_recv(struct bt_mesh_net_rx *rx, struct net_buf_simple *buf,int8_t rssi)
{
    f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (buf->data[0] >> 6) {
    f314:	680b      	ldr	r3, [r1, #0]
    f316:	781b      	ldrb	r3, [r3, #0]
{
    f318:	4691      	mov	r9, r2
	switch (buf->data[0] >> 6) {
    f31a:	099a      	lsrs	r2, r3, #6
    f31c:	2a02      	cmp	r2, #2
{
    f31e:	b085      	sub	sp, #20
    f320:	4607      	mov	r7, r0
    f322:	460c      	mov	r4, r1
	switch (buf->data[0] >> 6) {
    f324:	d013      	beq.n	f34e <bt_mesh_model_recv+0x3e>
    f326:	2a03      	cmp	r2, #3
    f328:	d018      	beq.n	f35c <bt_mesh_model_recv+0x4c>
		if (buf->data[0] == 0x7f) {
    f32a:	2b7f      	cmp	r3, #127	; 0x7f
    f32c:	d00c      	beq.n	f348 <bt_mesh_model_recv+0x38>
		*opcode = net_buf_simple_pull_u8(buf);
    f32e:	4608      	mov	r0, r1
    f330:	f01c ff37 	bl	2c1a2 <net_buf_simple_pull_u8>
		*opcode = net_buf_simple_pull_be16(buf);
    f334:	4606      	mov	r6, r0
		return;
	}

	BT_DBG("OpCode 0x%08x", opcode);

	for (i = 0; i < dev_comp->elem_count; i++) {
    f336:	f04f 0800 	mov.w	r8, #0
		/* The callback will likely parse the buffer, so
		 * store the parsing state in case multiple models
		 * receive the message.
		 */
		net_buf_simple_save(buf, &state);
		op->func(model, &rx->ctx, buf, rssi);
    f33a:	f107 0a04 	add.w	sl, r7, #4
	for (i = 0; i < dev_comp->elem_count; i++) {
    f33e:	4b43      	ldr	r3, [pc, #268]	; (f44c <bt_mesh_model_recv+0x13c>)
    f340:	681b      	ldr	r3, [r3, #0]
    f342:	689a      	ldr	r2, [r3, #8]
    f344:	4542      	cmp	r2, r8
    f346:	d816      	bhi.n	f376 <bt_mesh_model_recv+0x66>
		net_buf_simple_restore(buf, &state);
	}
}
    f348:	b005      	add	sp, #20
    f34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < 2) {
    f34e:	888b      	ldrh	r3, [r1, #4]
    f350:	2b01      	cmp	r3, #1
    f352:	d9f9      	bls.n	f348 <bt_mesh_model_recv+0x38>
		*opcode = net_buf_simple_pull_be16(buf);
    f354:	4608      	mov	r0, r1
    f356:	f01c ff34 	bl	2c1c2 <net_buf_simple_pull_be16>
    f35a:	e7eb      	b.n	f334 <bt_mesh_model_recv+0x24>
		if (buf->len < 3) {
    f35c:	888b      	ldrh	r3, [r1, #4]
    f35e:	2b02      	cmp	r3, #2
    f360:	d9f2      	bls.n	f348 <bt_mesh_model_recv+0x38>
		*opcode = net_buf_simple_pull_u8(buf) << 16;
    f362:	4608      	mov	r0, r1
    f364:	f01c ff1d 	bl	2c1a2 <net_buf_simple_pull_u8>
    f368:	4606      	mov	r6, r0
		*opcode |= net_buf_simple_pull_le16(buf);
    f36a:	4620      	mov	r0, r4
    f36c:	f01c ff21 	bl	2c1b2 <net_buf_simple_pull_le16>
    f370:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
		return 0;
    f374:	e7df      	b.n	f336 <bt_mesh_model_recv+0x26>
		struct bt_mesh_elem *elem = &dev_comp->elem[i];
    f376:	68da      	ldr	r2, [r3, #12]
    f378:	eb02 1308 	add.w	r3, r2, r8, lsl #4
			models = elem->vnd_models;
    f37c:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
		if (BT_MESH_MODEL_OP_LEN(opcode) < 3) {
    f380:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
			count = elem->model_count;
    f384:	bf36      	itet	cc
    f386:	7918      	ldrbcc	r0, [r3, #4]
			count = elem->vnd_model_count;
    f388:	7958      	ldrbcs	r0, [r3, #5]
			models = elem->models;
    f38a:	460d      	movcc	r5, r1
	for (i = 0U; i < model_count; i++) {
    f38c:	2300      	movs	r3, #0
    f38e:	b2d9      	uxtb	r1, r3
    f390:	4288      	cmp	r0, r1
    f392:	d802      	bhi.n	f39a <bt_mesh_model_recv+0x8a>
	for (i = 0; i < dev_comp->elem_count; i++) {
    f394:	f108 0801 	add.w	r8, r8, #1
    f398:	e7d1      	b.n	f33e <bt_mesh_model_recv+0x2e>
		for (op = (*model)->op; op->func; op++) {
    f39a:	f8d5 b010 	ldr.w	fp, [r5, #16]
    f39e:	f8db 1008 	ldr.w	r1, [fp, #8]
    f3a2:	b911      	cbnz	r1, f3aa <bt_mesh_model_recv+0x9a>
	for (i = 0U; i < model_count; i++) {
    f3a4:	3301      	adds	r3, #1
    f3a6:	351c      	adds	r5, #28
    f3a8:	e7f1      	b.n	f38e <bt_mesh_model_recv+0x7e>
			if (op->opcode == opcode) {
    f3aa:	f8db 1000 	ldr.w	r1, [fp]
    f3ae:	42b1      	cmp	r1, r6
    f3b0:	d018      	beq.n	f3e4 <bt_mesh_model_recv+0xd4>
		for (op = (*model)->op; op->func; op++) {
    f3b2:	f10b 0b0c 	add.w	fp, fp, #12
    f3b6:	e7f2      	b.n	f39e <bt_mesh_model_recv+0x8e>
	} else if (BT_MESH_ADDR_IS_GROUP(dst) || BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    f3b8:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
    f3bc:	f5b3 4ffe 	cmp.w	r3, #32512	; 0x7f00
    f3c0:	d807      	bhi.n	f3d2 <bt_mesh_model_recv+0xc2>
		return !!bt_mesh_model_find_group(&mod, dst);
    f3c2:	4601      	mov	r1, r0
    f3c4:	a803      	add	r0, sp, #12
    f3c6:	f01a fff4 	bl	2a3b2 <bt_mesh_model_find_group>
    f3ca:	3800      	subs	r0, #0
    f3cc:	bf18      	it	ne
    f3ce:	2001      	movne	r0, #1
    f3d0:	e020      	b.n	f414 <bt_mesh_model_recv+0x104>
	return (mod->elem_idx == 0 && bt_mesh_fixed_group_match(dst));
    f3d2:	792b      	ldrb	r3, [r5, #4]
    f3d4:	b923      	cbnz	r3, f3e0 <bt_mesh_model_recv+0xd0>
    f3d6:	f01a fff3 	bl	2a3c0 <bt_mesh_fixed_group_match>
    f3da:	f000 0001 	and.w	r0, r0, #1
    f3de:	e019      	b.n	f414 <bt_mesh_model_recv+0x104>
    f3e0:	2000      	movs	r0, #0
    f3e2:	e7fa      	b.n	f3da <bt_mesh_model_recv+0xca>
		if (!model_has_key(model, rx->ctx.app_idx)) {
    f3e4:	88fb      	ldrh	r3, [r7, #6]
		if (mod->keys[i] == key ||
    f3e6:	89a9      	ldrh	r1, [r5, #12]
    f3e8:	428b      	cmp	r3, r1
    f3ea:	d007      	beq.n	f3fc <bt_mesh_model_recv+0xec>
    f3ec:	f64f 70fc 	movw	r0, #65532	; 0xfffc
    f3f0:	4281      	cmp	r1, r0
    f3f2:	d1cf      	bne.n	f394 <bt_mesh_model_recv+0x84>
		     BT_MESH_IS_DEV_KEY(key))) {
    f3f4:	3303      	adds	r3, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
    f3f6:	b29b      	uxth	r3, r3
    f3f8:	2b01      	cmp	r3, #1
    f3fa:	d8cb      	bhi.n	f394 <bt_mesh_model_recv+0x84>
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    f3fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    f400:	8978      	ldrh	r0, [r7, #10]
    f402:	9503      	str	r5, [sp, #12]
	if (BT_MESH_ADDR_IS_UNICAST(dst)) {
    f404:	2b00      	cmp	r3, #0
    f406:	ddd7      	ble.n	f3b8 <bt_mesh_model_recv+0xa8>
		return (dev_comp->elem[mod->elem_idx].addr == dst);
    f408:	792b      	ldrb	r3, [r5, #4]
    f40a:	011b      	lsls	r3, r3, #4
    f40c:	5ad3      	ldrh	r3, [r2, r3]
    f40e:	1a1b      	subs	r3, r3, r0
    f410:	4258      	negs	r0, r3
    f412:	4158      	adcs	r0, r3
		if (!model_has_dst(model, rx->ctx.recv_dst)) {
    f414:	2800      	cmp	r0, #0
    f416:	d0bd      	beq.n	f394 <bt_mesh_model_recv+0x84>
		if (buf->len < op->min_len) {
    f418:	88a2      	ldrh	r2, [r4, #4]
    f41a:	f8db 3004 	ldr.w	r3, [fp, #4]
    f41e:	429a      	cmp	r2, r3
    f420:	d3b8      	bcc.n	f394 <bt_mesh_model_recv+0x84>
	state->offset = net_buf_simple_headroom(buf);
    f422:	4620      	mov	r0, r4
    f424:	f01c fee1 	bl	2c1ea <net_buf_simple_headroom>
	state->len = buf->len;
    f428:	88a3      	ldrh	r3, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
    f42a:	9000      	str	r0, [sp, #0]
	state->len = buf->len;
    f42c:	9301      	str	r3, [sp, #4]
		op->func(model, &rx->ctx, buf, rssi);
    f42e:	4628      	mov	r0, r5
    f430:	464b      	mov	r3, r9
    f432:	f8db b008 	ldr.w	fp, [fp, #8]
    f436:	4622      	mov	r2, r4
    f438:	4651      	mov	r1, sl
    f43a:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    f43c:	9b00      	ldr	r3, [sp, #0]
    f43e:	68a0      	ldr	r0, [r4, #8]
    f440:	fa10 f083 	uxtah	r0, r0, r3
	buf->len = state->len;
    f444:	9b01      	ldr	r3, [sp, #4]
	buf->data = buf->__buf + state->offset;
    f446:	6020      	str	r0, [r4, #0]
	buf->len = state->len;
    f448:	80a3      	strh	r3, [r4, #4]
    f44a:	e7a3      	b.n	f394 <bt_mesh_model_recv+0x84>
    f44c:	20002990 	.word	0x20002990

0000f450 <bt_mesh_model_publish>:

	return model_send(model, &tx, false, msg, cb, cb_data);
}

int bt_mesh_model_publish(struct bt_mesh_model *model)
{
    f450:	b570      	push	{r4, r5, r6, lr}
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
	struct bt_mesh_model_pub *pub = model->pub;
    f452:	6884      	ldr	r4, [r0, #8]
{
    f454:	b09c      	sub	sp, #112	; 0x70
	struct bt_mesh_msg_ctx ctx = {
		.addr = pub->addr,
		.send_ttl = pub->ttl,
		.send_rel = pub->send_rel,
		.app_idx = pub->key,
    f456:	88e1      	ldrh	r1, [r4, #6]
		.addr = pub->addr,
    f458:	88a6      	ldrh	r6, [r4, #4]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    f45a:	ab0a      	add	r3, sp, #40	; 0x28
    f45c:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
    f460:	e9cd 2302 	strd	r2, r3, [sp, #8]
    f464:	9301      	str	r3, [sp, #4]
		.app_idx = pub->key,
    f466:	f3c1 010b 	ubfx	r1, r1, #0, #12
	struct bt_mesh_msg_ctx ctx = {
    f46a:	2300      	movs	r3, #0
    f46c:	e9cd 3304 	strd	r3, r3, [sp, #16]
    f470:	f8ad 1012 	strh.w	r1, [sp, #18]
		.send_rel = pub->send_rel,
    f474:	79e1      	ldrb	r1, [r4, #7]
	struct bt_mesh_msg_ctx ctx = {
    f476:	f8ad 3018 	strh.w	r3, [sp, #24]
		.send_rel = pub->send_rel,
    f47a:	f3c1 1140 	ubfx	r1, r1, #5, #1
	struct bt_mesh_msg_ctx ctx = {
    f47e:	f88d 101a 	strb.w	r1, [sp, #26]
    f482:	7a21      	ldrb	r1, [r4, #8]
    f484:	f8ad 6014 	strh.w	r6, [sp, #20]
    f488:	aa04      	add	r2, sp, #16
	};
	struct bt_mesh_net_tx tx = {
    f48a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    f48e:	9307      	str	r3, [sp, #28]
{
    f490:	4605      	mov	r5, r0
	struct bt_mesh_msg_ctx ctx = {
    f492:	f88d 101b 	strb.w	r1, [sp, #27]
		.ctx = &ctx,
		.src = bt_mesh_model_elem(model)->addr,
    f496:	f7ff fe9b 	bl	f1d0 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    f49a:	8803      	ldrh	r3, [r0, #0]
    f49c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24

	if (!pub) {
		return -ENOTSUP;
	}

	if (pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    f4a0:	2e00      	cmp	r6, #0
    f4a2:	d048      	beq.n	f536 <bt_mesh_model_publish+0xe6>
		return -EADDRNOTAVAIL;
	}

	if (pub->msg->len + 4 > BT_MESH_TX_SDU_MAX) {
    f4a4:	6923      	ldr	r3, [r4, #16]
    f4a6:	889b      	ldrh	r3, [r3, #4]
    f4a8:	3304      	adds	r3, #4
    f4aa:	2b48      	cmp	r3, #72	; 0x48
    f4ac:	dc46      	bgt.n	f53c <bt_mesh_model_publish+0xec>
		BT_ERR("Message does not fit maximum SDU size");
		return -EMSGSIZE;
	}

	if (pub->count) {
    f4ae:	7ae3      	ldrb	r3, [r4, #11]
    f4b0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
    f4b4:	d003      	beq.n	f4be <bt_mesh_model_publish+0x6e>
		BT_WARN("Clearing publish retransmit timer");
		k_delayed_work_cancel(&pub->timer);
    f4b6:	f104 0018 	add.w	r0, r4, #24
    f4ba:	f01e f87b 	bl	2d5b4 <k_delayed_work_cancel>
	}

	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    f4be:	6923      	ldr	r3, [r4, #16]
    f4c0:	a801      	add	r0, sp, #4
    f4c2:	889a      	ldrh	r2, [r3, #4]
    f4c4:	6819      	ldr	r1, [r3, #0]
    f4c6:	f01c fdee 	bl	2c0a6 <net_buf_simple_add_mem>

	tx.friend_cred = pub->cred;
    f4ca:	79e3      	ldrb	r3, [r4, #7]
    f4cc:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    f4d0:	f3c3 1300 	ubfx	r3, r3, #4, #1
    f4d4:	f363 0200 	bfi	r2, r3, #0, #1
    f4d8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27

	pub->count = BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit);
    f4dc:	7ae3      	ldrb	r3, [r4, #11]
    f4de:	7a62      	ldrb	r2, [r4, #9]
    f4e0:	f362 1347 	bfi	r3, r2, #5, #3
    f4e4:	72e3      	strb	r3, [r4, #11]
	if (!bt_mesh_is_provisioned()) {
    f4e6:	f7fd f8c7 	bl	c678 <bt_mesh_is_provisioned>
    f4ea:	b1d8      	cbz	r0, f524 <bt_mesh_model_publish+0xd4>
	if (net_buf_simple_tailroom(msg) < 4) {
    f4ec:	a801      	add	r0, sp, #4
    f4ee:	f01c fe80 	bl	2c1f2 <net_buf_simple_tailroom>
    f4f2:	2803      	cmp	r0, #3
    f4f4:	d919      	bls.n	f52a <bt_mesh_model_publish+0xda>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
    f4f6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    f4fa:	2b44      	cmp	r3, #68	; 0x44
    f4fc:	d818      	bhi.n	f530 <bt_mesh_model_publish+0xe0>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
    f4fe:	462b      	mov	r3, r5
    f500:	4a10      	ldr	r2, [pc, #64]	; (f544 <bt_mesh_model_publish+0xf4>)
    f502:	a901      	add	r1, sp, #4
    f504:	a807      	add	r0, sp, #28
    f506:	f7ff f8ab 	bl	e660 <bt_mesh_trans_send>

	BT_DBG("Publish Retransmit Count %u Interval %ums", pub->count,
	       BT_MESH_PUB_TRANSMIT_INT(pub->retransmit));

	err = model_send(model, &tx, true, &sdu, &pub_sent_cb, model);
	if (err) {
    f50a:	4605      	mov	r5, r0
    f50c:	b138      	cbz	r0, f51e <bt_mesh_model_publish+0xce>
	pub->count = 0U;
    f50e:	7ae3      	ldrb	r3, [r4, #11]
	publish_sent(err, pub->mod);
    f510:	6821      	ldr	r1, [r4, #0]
	pub->count = 0U;
    f512:	f36f 1347 	bfc	r3, #5, #3
    f516:	72e3      	strb	r3, [r4, #11]
	publish_sent(err, pub->mod);
    f518:	4628      	mov	r0, r5
    f51a:	f7ff fe21 	bl	f160 <publish_sent>
		publish_retransmit_end(err, pub);
		return err;
	}

	return 0;
}
    f51e:	4628      	mov	r0, r5
    f520:	b01c      	add	sp, #112	; 0x70
    f522:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    f524:	f06f 050a 	mvn.w	r5, #10
    f528:	e7f1      	b.n	f50e <bt_mesh_model_publish+0xbe>
		return -EINVAL;
    f52a:	f06f 0515 	mvn.w	r5, #21
    f52e:	e7ee      	b.n	f50e <bt_mesh_model_publish+0xbe>
		return -EMSGSIZE;
    f530:	f06f 0523 	mvn.w	r5, #35	; 0x23
    f534:	e7eb      	b.n	f50e <bt_mesh_model_publish+0xbe>
		return -EADDRNOTAVAIL;
    f536:	f06f 0530 	mvn.w	r5, #48	; 0x30
    f53a:	e7f0      	b.n	f51e <bt_mesh_model_publish+0xce>
		return -EMSGSIZE;
    f53c:	f06f 0523 	mvn.w	r5, #35	; 0x23
    f540:	e7ed      	b.n	f51e <bt_mesh_model_publish+0xce>
    f542:	bf00      	nop
    f544:	0002e380 	.word	0x0002e380

0000f548 <mod_publish>:
{
    f548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    f54c:	f850 8c18 	ldr.w	r8, [r0, #-24]
{
    f550:	4604      	mov	r4, r0
    f552:	b09c      	sub	sp, #112	; 0x70
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    f554:	4640      	mov	r0, r8
    f556:	f7ff fddf 	bl	f118 <bt_mesh_model_pub_period_get>
	if (pub->count) {
    f55a:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    f55e:	f013 06e0 	ands.w	r6, r3, #224	; 0xe0
	period_ms = bt_mesh_model_pub_period_get(pub->mod);
    f562:	4605      	mov	r5, r0
	if (pub->count) {
    f564:	d058      	beq.n	f618 <mod_publish+0xd0>
	struct bt_mesh_model_pub *pub = mod->pub;
    f566:	f8d8 6008 	ldr.w	r6, [r8, #8]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    f56a:	ab0a      	add	r3, sp, #40	; 0x28
    f56c:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
    f570:	e9cd 2302 	strd	r2, r3, [sp, #8]
	struct bt_mesh_msg_ctx ctx = {
    f574:	2700      	movs	r7, #0
		.app_idx = pub->key,
    f576:	88f2      	ldrh	r2, [r6, #6]
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
    f578:	9301      	str	r3, [sp, #4]
	struct bt_mesh_msg_ctx ctx = {
    f57a:	e9cd 7704 	strd	r7, r7, [sp, #16]
		.app_idx = pub->key,
    f57e:	f3c2 020b 	ubfx	r2, r2, #0, #12
	struct bt_mesh_msg_ctx ctx = {
    f582:	f8cd 7017 	str.w	r7, [sp, #23]
    f586:	f8ad 2012 	strh.w	r2, [sp, #18]
    f58a:	88b2      	ldrh	r2, [r6, #4]
    f58c:	f8ad 2014 	strh.w	r2, [sp, #20]
    f590:	ab04      	add	r3, sp, #16
    f592:	7a32      	ldrb	r2, [r6, #8]
    f594:	f88d 201b 	strb.w	r2, [sp, #27]
		.src = bt_mesh_model_elem(mod)->addr,
    f598:	4640      	mov	r0, r8
	struct bt_mesh_net_tx tx = {
    f59a:	e9cd 3708 	strd	r3, r7, [sp, #32]
    f59e:	9707      	str	r7, [sp, #28]
		.src = bt_mesh_model_elem(mod)->addr,
    f5a0:	f7ff fe16 	bl	f1d0 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
    f5a4:	8803      	ldrh	r3, [r0, #0]
    f5a6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.friend_cred = pub->cred,
    f5aa:	79f3      	ldrb	r3, [r6, #7]
	struct bt_mesh_net_tx tx = {
    f5ac:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		.friend_cred = pub->cred,
    f5b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
	struct bt_mesh_net_tx tx = {
    f5b4:	f363 0200 	bfi	r2, r3, #0, #1
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    f5b8:	6933      	ldr	r3, [r6, #16]
	struct bt_mesh_net_tx tx = {
    f5ba:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
	net_buf_simple_add_mem(&sdu, pub->msg->data, pub->msg->len);
    f5be:	889a      	ldrh	r2, [r3, #4]
    f5c0:	6819      	ldr	r1, [r3, #0]
    f5c2:	a801      	add	r0, sp, #4
    f5c4:	f01c fd6f 	bl	2c0a6 <net_buf_simple_add_mem>
	pub->count--;
    f5c8:	7af3      	ldrb	r3, [r6, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    f5ca:	4a22      	ldr	r2, [pc, #136]	; (f654 <mod_publish+0x10c>)
	pub->count--;
    f5cc:	33e0      	adds	r3, #224	; 0xe0
    f5ce:	72f3      	strb	r3, [r6, #11]
	return bt_mesh_trans_send(&tx, &sdu, &pub_sent_cb, mod);
    f5d0:	a901      	add	r1, sp, #4
    f5d2:	4643      	mov	r3, r8
    f5d4:	a807      	add	r0, sp, #28
    f5d6:	f7ff f843 	bl	e660 <bt_mesh_trans_send>
		if (err) {
    f5da:	b1d0      	cbz	r0, f612 <mod_publish+0xca>
			pub->count = 0U;
    f5dc:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
    f5e0:	f367 1347 	bfi	r3, r7, #5, #3
    f5e4:	f804 3c0d 	strb.w	r3, [r4, #-13]
			if (period_ms) {
    f5e8:	b19d      	cbz	r5, f612 <mod_publish+0xca>
						      K_MSEC(period_ms));
    f5ea:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    f5ee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    f5f2:	f240 30e7 	movw	r0, #999	; 0x3e7
    f5f6:	2100      	movs	r1, #0
    f5f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f5fc:	2300      	movs	r3, #0
    f5fe:	fbc6 0105 	smlal	r0, r1, r6, r5
    f602:	f7f0 fdcd 	bl	1a0 <__aeabi_uldivmod>
    f606:	4602      	mov	r2, r0
    f608:	460b      	mov	r3, r1
    f60a:	4813      	ldr	r0, [pc, #76]	; (f658 <mod_publish+0x110>)
    f60c:	4621      	mov	r1, r4
    f60e:	f014 fbad 	bl	23d6c <k_delayed_work_submit_to_queue>
}
    f612:	b01c      	add	sp, #112	; 0x70
    f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!period_ms) {
    f618:	2800      	cmp	r0, #0
    f61a:	d0fa      	beq.n	f612 <mod_publish+0xca>
	err = pub->update(pub->mod);
    f61c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    f620:	4640      	mov	r0, r8
    f622:	4798      	blx	r3
	if (err) {
    f624:	4605      	mov	r5, r0
    f626:	b178      	cbz	r0, f648 <mod_publish+0x100>
		pub->period_start = k_uptime_get_32();
    f628:	f01a fea8 	bl	2a37c <k_uptime_get_32>
	pub->count = 0U;
    f62c:	f814 3c0d 	ldrb.w	r3, [r4, #-13]
		pub->period_start = k_uptime_get_32();
    f630:	f844 0c0c 	str.w	r0, [r4, #-12]
	pub->count = 0U;
    f634:	f366 1347 	bfi	r3, r6, #5, #3
	publish_sent(err, pub->mod);
    f638:	f854 1c18 	ldr.w	r1, [r4, #-24]
	pub->count = 0U;
    f63c:	f804 3c0d 	strb.w	r3, [r4, #-13]
	publish_sent(err, pub->mod);
    f640:	4628      	mov	r0, r5
    f642:	f7ff fd8d 	bl	f160 <publish_sent>
}
    f646:	e7e4      	b.n	f612 <mod_publish+0xca>
	err = bt_mesh_model_publish(pub->mod);
    f648:	f854 0c18 	ldr.w	r0, [r4, #-24]
    f64c:	f7ff ff00 	bl	f450 <bt_mesh_model_publish>
		BT_ERR("Publishing failed (err %d)", err);
    f650:	e7df      	b.n	f612 <mod_publish+0xca>
    f652:	bf00      	nop
    f654:	0002e380 	.word	0x0002e380
    f658:	20001fd8 	.word	0x20001fd8

0000f65c <bt_mesh_comp_get>:
}

const struct bt_mesh_comp *bt_mesh_comp_get(void)
{
	return dev_comp;
}
    f65c:	4b01      	ldr	r3, [pc, #4]	; (f664 <bt_mesh_comp_get+0x8>)
    f65e:	6818      	ldr	r0, [r3, #0]
    f660:	4770      	bx	lr
    f662:	bf00      	nop
    f664:	20002990 	.word	0x20002990

0000f668 <app_key_evt>:
	mod_unbind(mod, *app_idx, true);
}

static void app_key_evt(uint16_t app_idx, uint16_t net_idx,
			enum bt_mesh_key_evt evt)
{
    f668:	b507      	push	{r0, r1, r2, lr}
	if (evt == BT_MESH_KEY_DELETED) {
    f66a:	2a01      	cmp	r2, #1
{
    f66c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (evt == BT_MESH_KEY_DELETED) {
    f670:	d104      	bne.n	f67c <app_key_evt+0x14>
		bt_mesh_model_foreach(&mod_app_key_del, &app_idx);
    f672:	4804      	ldr	r0, [pc, #16]	; (f684 <app_key_evt+0x1c>)
    f674:	f10d 0106 	add.w	r1, sp, #6
    f678:	f7ff fd12 	bl	f0a0 <bt_mesh_model_foreach>
	}
}
    f67c:	b003      	add	sp, #12
    f67e:	f85d fb04 	ldr.w	pc, [sp], #4
    f682:	bf00      	nop
    f684:	0002b5a1 	.word	0x0002b5a1

0000f688 <mod_sub_get_vnd>:
}

static void mod_sub_get_vnd(struct bt_mesh_model *model,
			    struct bt_mesh_msg_ctx *ctx,
			    struct net_buf_simple *buf,int8_t rssi)
{
    f688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f68c:	4614      	mov	r4, r2
    f68e:	b09a      	sub	sp, #104	; 0x68
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    f690:	ab08      	add	r3, sp, #32
    f692:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
{
    f696:	4681      	mov	r9, r0
	struct mod_sub_list_ctx visit_ctx;
	struct bt_mesh_model *mod;
	struct bt_mesh_elem *elem;
	uint16_t company, addr, id;

	addr = net_buf_simple_pull_le16(buf);
    f698:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    f69a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f69e:	9305      	str	r3, [sp, #20]
{
    f6a0:	468a      	mov	sl, r1
	addr = net_buf_simple_pull_le16(buf);
    f6a2:	f01c fd86 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    f6a6:	b203      	sxth	r3, r0
    f6a8:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    f6aa:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    f6ac:	dd28      	ble.n	f700 <mod_sub_get_vnd+0x78>
		BT_WARN("Prohibited element address");
		return;
	}

	company = net_buf_simple_pull_le16(buf);
    f6ae:	4620      	mov	r0, r4
    f6b0:	f01c fd7f 	bl	2c1b2 <net_buf_simple_pull_le16>
    f6b4:	4607      	mov	r7, r0
	id = net_buf_simple_pull_le16(buf);
    f6b6:	4620      	mov	r0, r4
    f6b8:	f01c fd7b 	bl	2c1b2 <net_buf_simple_pull_le16>

	BT_DBG("addr 0x%04x company 0x%04x id 0x%04x", addr, company, id);

	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    f6bc:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
    f6be:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST_VND);
    f6c0:	f248 012c 	movw	r1, #32812	; 0x802c
    f6c4:	4620      	mov	r0, r4
    f6c6:	f01a fe95 	bl	2a3f4 <bt_mesh_model_msg_init>

	elem = bt_mesh_elem_find(addr);
    f6ca:	4628      	mov	r0, r5
    f6cc:	f7ff fde0 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
    f6d0:	b9c8      	cbnz	r0, f706 <mod_sub_get_vnd+0x7e>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    f6d2:	2101      	movs	r1, #1
		goto send_list;
	}

	mod = bt_mesh_model_find_vnd(elem, company, id);
	if (!mod) {
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    f6d4:	4620      	mov	r0, r4
    f6d6:	f01c fcef 	bl	2c0b8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    f6da:	4629      	mov	r1, r5
    f6dc:	4620      	mov	r0, r4
    f6de:	f01c fcf3 	bl	2c0c8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, company);
    f6e2:	4639      	mov	r1, r7
    f6e4:	4620      	mov	r0, r4
    f6e6:	f01c fcef 	bl	2c0c8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    f6ea:	4631      	mov	r1, r6
    f6ec:	4620      	mov	r0, r4
    f6ee:	f01c fceb 	bl	2c0c8 <net_buf_simple_add_le16>
	visit_ctx.elem_idx = mod->elem_idx;
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
				&visit_ctx);

send_list:
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f6f2:	2300      	movs	r3, #0
    f6f4:	9300      	str	r3, [sp, #0]
    f6f6:	4622      	mov	r2, r4
    f6f8:	4651      	mov	r1, sl
    f6fa:	4648      	mov	r0, r9
    f6fc:	f01a fea3 	bl	2a446 <bt_mesh_model_send>
		BT_ERR("Unable to send Vendor Model Subscription List");
	}
}
    f700:	b01a      	add	sp, #104	; 0x68
    f702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = bt_mesh_model_find_vnd(elem, company, id);
    f706:	4632      	mov	r2, r6
    f708:	4639      	mov	r1, r7
    f70a:	f01a fed3 	bl	2a4b4 <bt_mesh_model_find_vnd>
	if (!mod) {
    f70e:	4680      	mov	r8, r0
    f710:	b908      	cbnz	r0, f716 <mod_sub_get_vnd+0x8e>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    f712:	2102      	movs	r1, #2
    f714:	e7de      	b.n	f6d4 <mod_sub_get_vnd+0x4c>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    f716:	2100      	movs	r1, #0
    f718:	4620      	mov	r0, r4
    f71a:	f01c fccd 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    f71e:	4629      	mov	r1, r5
    f720:	4620      	mov	r0, r4
    f722:	f01c fcd1 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, company);
    f726:	4639      	mov	r1, r7
    f728:	4620      	mov	r0, r4
    f72a:	f01c fccd 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    f72e:	4631      	mov	r1, r6
    f730:	4620      	mov	r0, r4
    f732:	f01c fcc9 	bl	2c0c8 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
    f736:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
    f738:	f898 3004 	ldrb.w	r3, [r8, #4]
    f73c:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
    f740:	4640      	mov	r0, r8
    f742:	f01a fee2 	bl	2a50a <bt_mesh_model_root>
    f746:	4902      	ldr	r1, [pc, #8]	; (f750 <mod_sub_get_vnd+0xc8>)
    f748:	aa03      	add	r2, sp, #12
    f74a:	f01a fedf 	bl	2a50c <bt_mesh_model_tree_walk>
    f74e:	e7d0      	b.n	f6f2 <mod_sub_get_vnd+0x6a>
    f750:	0002b037 	.word	0x0002b037

0000f754 <mod_sub_get>:
{
    f754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f758:	4614      	mov	r4, r2
    f75a:	b09b      	sub	sp, #108	; 0x6c
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    f75c:	ab08      	add	r3, sp, #32
    f75e:	f44f 0290 	mov.w	r2, #4718592	; 0x480000
{
    f762:	4680      	mov	r8, r0
	addr = net_buf_simple_pull_le16(buf);
    f764:	4620      	mov	r0, r4
	NET_BUF_SIMPLE_DEFINE(msg, BT_MESH_TX_SDU_MAX);
    f766:	e9cd 2306 	strd	r2, r3, [sp, #24]
    f76a:	9305      	str	r3, [sp, #20]
{
    f76c:	4689      	mov	r9, r1
	addr = net_buf_simple_pull_le16(buf);
    f76e:	f01c fd20 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    f772:	b203      	sxth	r3, r0
    f774:	2b00      	cmp	r3, #0
	addr = net_buf_simple_pull_le16(buf);
    f776:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(addr)) {
    f778:	dd20      	ble.n	f7bc <mod_sub_get+0x68>
	id = net_buf_simple_pull_le16(buf);
    f77a:	4620      	mov	r0, r4
    f77c:	f01c fd19 	bl	2c1b2 <net_buf_simple_pull_le16>
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    f780:	ac05      	add	r4, sp, #20
	id = net_buf_simple_pull_le16(buf);
    f782:	4606      	mov	r6, r0
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_LIST);
    f784:	f248 012a 	movw	r1, #32810	; 0x802a
    f788:	4620      	mov	r0, r4
    f78a:	f01a fe33 	bl	2a3f4 <bt_mesh_model_msg_init>
	elem = bt_mesh_elem_find(addr);
    f78e:	4628      	mov	r0, r5
    f790:	f7ff fd7e 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
    f794:	b9a8      	cbnz	r0, f7c2 <mod_sub_get+0x6e>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_ADDRESS);
    f796:	2101      	movs	r1, #1
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    f798:	4620      	mov	r0, r4
    f79a:	f01c fc8d 	bl	2c0b8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(&msg, addr);
    f79e:	4629      	mov	r1, r5
    f7a0:	4620      	mov	r0, r4
    f7a2:	f01c fc91 	bl	2c0c8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(&msg, id);
    f7a6:	4631      	mov	r1, r6
    f7a8:	4620      	mov	r0, r4
    f7aa:	f01c fc8d 	bl	2c0c8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
    f7ae:	2300      	movs	r3, #0
    f7b0:	9300      	str	r3, [sp, #0]
    f7b2:	4622      	mov	r2, r4
    f7b4:	4649      	mov	r1, r9
    f7b6:	4640      	mov	r0, r8
    f7b8:	f01a fe45 	bl	2a446 <bt_mesh_model_send>
}
    f7bc:	b01b      	add	sp, #108	; 0x6c
    f7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = bt_mesh_model_find(elem, id);
    f7c2:	4631      	mov	r1, r6
    f7c4:	f01a fe8d 	bl	2a4e2 <bt_mesh_model_find>
	if (!mod) {
    f7c8:	4607      	mov	r7, r0
    f7ca:	b908      	cbnz	r0, f7d0 <mod_sub_get+0x7c>
		net_buf_simple_add_u8(&msg, STATUS_INVALID_MODEL);
    f7cc:	2102      	movs	r1, #2
    f7ce:	e7e3      	b.n	f798 <mod_sub_get+0x44>
	net_buf_simple_add_u8(&msg, STATUS_SUCCESS);
    f7d0:	2100      	movs	r1, #0
    f7d2:	4620      	mov	r0, r4
    f7d4:	f01c fc70 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, addr);
    f7d8:	4629      	mov	r1, r5
    f7da:	4620      	mov	r0, r4
    f7dc:	f01c fc74 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, id);
    f7e0:	4631      	mov	r1, r6
    f7e2:	4620      	mov	r0, r4
    f7e4:	f01c fc70 	bl	2c0c8 <net_buf_simple_add_le16>
	visit_ctx.msg = &msg;
    f7e8:	9404      	str	r4, [sp, #16]
	visit_ctx.elem_idx = mod->elem_idx;
    f7ea:	793b      	ldrb	r3, [r7, #4]
    f7ec:	f8ad 300c 	strh.w	r3, [sp, #12]
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_list_visitor,
    f7f0:	4638      	mov	r0, r7
    f7f2:	f01a fe8a 	bl	2a50a <bt_mesh_model_root>
    f7f6:	4902      	ldr	r1, [pc, #8]	; (f800 <mod_sub_get+0xac>)
    f7f8:	aa03      	add	r2, sp, #12
    f7fa:	f01a fe87 	bl	2a50c <bt_mesh_model_tree_walk>
    f7fe:	e7d6      	b.n	f7ae <mod_sub_get+0x5a>
    f800:	0002b037 	.word	0x0002b037

0000f804 <cfg_srv_init>:

	return true;
}

static int cfg_srv_init(struct bt_mesh_model *model)
{
    f804:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;

	if (!bt_mesh_model_in_primary(model)) {
    f806:	7905      	ldrb	r5, [r0, #4]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    f808:	6984      	ldr	r4, [r0, #24]
{
    f80a:	4606      	mov	r6, r0
	if (!bt_mesh_model_in_primary(model)) {
    f80c:	bb45      	cbnz	r5, f860 <cfg_srv_init+0x5c>
		BT_ERR("Configuration Server only allowed in primary element");
		return -EINVAL;
	}

	if (!cfg) {
    f80e:	b33c      	cbz	r4, f860 <cfg_srv_init+0x5c>
	if (cfg->relay > 0x02) {
    f810:	7963      	ldrb	r3, [r4, #5]
    f812:	2b02      	cmp	r3, #2
    f814:	d824      	bhi.n	f860 <cfg_srv_init+0x5c>
	if (cfg->frnd > 0x02) {
    f816:	7a63      	ldrb	r3, [r4, #9]
    f818:	2b02      	cmp	r3, #2
    f81a:	d821      	bhi.n	f860 <cfg_srv_init+0x5c>
	if (cfg->gatt_proxy > 0x02) {
    f81c:	7a23      	ldrb	r3, [r4, #8]
    f81e:	2b02      	cmp	r3, #2
    f820:	d81e      	bhi.n	f860 <cfg_srv_init+0x5c>
	if (cfg->beacon > 0x01) {
    f822:	79e3      	ldrb	r3, [r4, #7]
    f824:	2b01      	cmp	r3, #1
    f826:	d81b      	bhi.n	f860 <cfg_srv_init+0x5c>
	if (cfg->default_ttl > BT_MESH_TTL_MAX) {
    f828:	f994 300a 	ldrsb.w	r3, [r4, #10]
    f82c:	2b00      	cmp	r3, #0
    f82e:	db17      	blt.n	f860 <cfg_srv_init+0x5c>

	/*
	 * Configuration Model security is device-key based and only the local
	 * device-key is allowed to access this model.
	 */
	model->keys[0] = BT_MESH_KEY_DEV_LOCAL;
    f830:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    f834:	8183      	strh	r3, [r0, #12]
	if (!IS_ENABLED(CONFIG_BT_MESH_FRIEND)) {
		cfg->frnd = BT_MESH_FRIEND_NOT_SUPPORTED;
	}

	if (!IS_ENABLED(CONFIG_BT_MESH_GATT_PROXY)) {
		cfg->gatt_proxy = BT_MESH_GATT_PROXY_NOT_SUPPORTED;
    f836:	f240 2302 	movw	r3, #514	; 0x202
    f83a:	8123      	strh	r3, [r4, #8]
	}

	k_delayed_work_init(&cfg->hb_pub.timer, hb_publish);
    f83c:	f104 0010 	add.w	r0, r4, #16
    f840:	4909      	ldr	r1, [pc, #36]	; (f868 <cfg_srv_init+0x64>)
    f842:	f01d feaf 	bl	2d5a4 <k_delayed_work_init>
	cfg->hb_pub.net_idx = BT_MESH_KEY_UNUSED;
    f846:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f84a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	cfg->hb_sub.expiry = 0;
    f84e:	2200      	movs	r2, #0
    f850:	2300      	movs	r3, #0
    f852:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	cfg->model = model;

	conf = cfg;
    f856:	4b05      	ldr	r3, [pc, #20]	; (f86c <cfg_srv_init+0x68>)
	cfg->model = model;
    f858:	6026      	str	r6, [r4, #0]
	conf = cfg;
    f85a:	601c      	str	r4, [r3, #0]

	return 0;
    f85c:	4628      	mov	r0, r5
}
    f85e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    f860:	f06f 0015 	mvn.w	r0, #21
    f864:	e7fb      	b.n	f85e <cfg_srv_init+0x5a>
    f866:	bf00      	nop
    f868:	0000fc4d 	.word	0x0000fc4d
    f86c:	20002994 	.word	0x20002994

0000f870 <mod_sub_del_all>:
{
    f870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f874:	4606      	mov	r6, r0
    f876:	b086      	sub	sp, #24
	elem_addr = net_buf_simple_pull_le16(buf);
    f878:	4610      	mov	r0, r2
{
    f87a:	460f      	mov	r7, r1
    f87c:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
    f87e:	f01c fc98 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    f882:	b203      	sxth	r3, r0
    f884:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    f886:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    f888:	dd16      	ble.n	f8b8 <mod_sub_del_all+0x48>
	mod_id = buf->data;
    f88a:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    f88e:	f7ff fcff 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
    f892:	b9a0      	cbnz	r0, f8be <mod_sub_del_all+0x4e>
		vnd = (buf->len == 4U);
    f894:	88a3      	ldrh	r3, [r4, #4]
    f896:	1f1a      	subs	r2, r3, #4
    f898:	4253      	negs	r3, r2
    f89a:	4153      	adcs	r3, r2
    f89c:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    f8a0:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr,
    f8a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f8a6:	e9cd 8301 	strd	r8, r3, [sp, #4]
    f8aa:	2300      	movs	r3, #0
    f8ac:	9300      	str	r3, [sp, #0]
    f8ae:	4639      	mov	r1, r7
    f8b0:	462b      	mov	r3, r5
    f8b2:	4630      	mov	r0, r6
    f8b4:	f01a ff4b 	bl	2a74e <send_mod_sub_status>
}
    f8b8:	b006      	add	sp, #24
    f8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mod = get_model(elem, buf, &vnd);
    f8be:	4621      	mov	r1, r4
    f8c0:	f10d 0217 	add.w	r2, sp, #23
    f8c4:	f01b f996 	bl	2abf4 <get_model>
	if (!mod) {
    f8c8:	4604      	mov	r4, r0
    f8ca:	b150      	cbz	r0, f8e2 <mod_sub_del_all+0x72>
	bt_mesh_model_tree_walk(bt_mesh_model_root(mod), mod_sub_clear_visitor,
    f8cc:	f01a fe1d 	bl	2a50a <bt_mesh_model_root>
    f8d0:	2200      	movs	r2, #0
    f8d2:	4905      	ldr	r1, [pc, #20]	; (f8e8 <mod_sub_del_all+0x78>)
    f8d4:	f01a fe1a 	bl	2a50c <bt_mesh_model_tree_walk>
		bt_mesh_store_mod_sub(mod);
    f8d8:	4620      	mov	r0, r4
    f8da:	f01c fa2d 	bl	2bd38 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
    f8de:	2200      	movs	r2, #0
    f8e0:	e7df      	b.n	f8a2 <mod_sub_del_all+0x32>
		status = STATUS_INVALID_MODEL;
    f8e2:	2202      	movs	r2, #2
    f8e4:	e7dd      	b.n	f8a2 <mod_sub_del_all+0x32>
    f8e6:	bf00      	nop
    f8e8:	0002b189 	.word	0x0002b189

0000f8ec <mod_sub_overwrite>:
{
    f8ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f8f0:	4607      	mov	r7, r0
    f8f2:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
    f8f4:	4610      	mov	r0, r2
{
    f8f6:	4688      	mov	r8, r1
    f8f8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
    f8fa:	f01c fc5a 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    f8fe:	b203      	sxth	r3, r0
    f900:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    f902:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    f904:	dd33      	ble.n	f96e <mod_sub_overwrite+0x82>
	sub_addr = net_buf_simple_pull_le16(buf);
    f906:	4620      	mov	r0, r4
    f908:	f01c fc53 	bl	2c1b2 <net_buf_simple_pull_le16>
    f90c:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
    f90e:	4628      	mov	r0, r5
	mod_id = buf->data;
    f910:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    f914:	f7ff fcbc 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
    f918:	b938      	cbnz	r0, f92a <mod_sub_overwrite+0x3e>
		vnd = (buf->len == 4U);
    f91a:	88a3      	ldrh	r3, [r4, #4]
    f91c:	1f1a      	subs	r2, r3, #4
    f91e:	4253      	negs	r3, r2
    f920:	4153      	adcs	r3, r2
    f922:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
    f926:	2201      	movs	r2, #1
    f928:	e017      	b.n	f95a <mod_sub_overwrite+0x6e>
	mod = get_model(elem, buf, &vnd);
    f92a:	4621      	mov	r1, r4
    f92c:	f10d 0217 	add.w	r2, sp, #23
    f930:	f01b f960 	bl	2abf4 <get_model>
	if (!mod) {
    f934:	4604      	mov	r4, r0
    f936:	b1e8      	cbz	r0, f974 <mod_sub_overwrite+0x88>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
    f938:	f506 4380 	add.w	r3, r6, #16384	; 0x4000
    f93c:	b29b      	uxth	r3, r3
    f93e:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
    f942:	d8f0      	bhi.n	f926 <mod_sub_overwrite+0x3a>
		bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
    f944:	f01a fde1 	bl	2a50a <bt_mesh_model_root>
    f948:	2200      	movs	r2, #0
    f94a:	490b      	ldr	r1, [pc, #44]	; (f978 <mod_sub_overwrite+0x8c>)
    f94c:	f01a fdde 	bl	2a50c <bt_mesh_model_tree_walk>
		mod->groups[0] = sub_addr;
    f950:	81e6      	strh	r6, [r4, #14]
			bt_mesh_store_mod_sub(mod);
    f952:	4620      	mov	r0, r4
    f954:	f01c f9f0 	bl	2bd38 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
    f958:	2200      	movs	r2, #0
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    f95a:	f89d 3017 	ldrb.w	r3, [sp, #23]
    f95e:	9600      	str	r6, [sp, #0]
    f960:	e9cd 9301 	strd	r9, r3, [sp, #4]
    f964:	4641      	mov	r1, r8
    f966:	462b      	mov	r3, r5
    f968:	4638      	mov	r0, r7
    f96a:	f01a fef0 	bl	2a74e <send_mod_sub_status>
}
    f96e:	b007      	add	sp, #28
    f970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
    f974:	2202      	movs	r2, #2
    f976:	e7f0      	b.n	f95a <mod_sub_overwrite+0x6e>
    f978:	0002b189 	.word	0x0002b189

0000f97c <mod_sub_va_overwrite>:
{
    f97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f980:	b086      	sub	sp, #24
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
    f982:	2300      	movs	r3, #0
{
    f984:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
    f986:	4610      	mov	r0, r2
	uint16_t elem_addr, sub_addr = BT_MESH_ADDR_UNASSIGNED;
    f988:	f8ad 3016 	strh.w	r3, [sp, #22]
{
    f98c:	4688      	mov	r8, r1
    f98e:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
    f990:	f01c fc0f 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    f994:	b203      	sxth	r3, r0
    f996:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
    f998:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
    f99a:	dd1e      	ble.n	f9da <mod_sub_va_overwrite+0x5e>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
    f99c:	2110      	movs	r1, #16
    f99e:	4620      	mov	r0, r4
    f9a0:	f01c fbf7 	bl	2c192 <net_buf_simple_pull_mem>
    f9a4:	4682      	mov	sl, r0
	elem = bt_mesh_elem_find(elem_addr);
    f9a6:	4630      	mov	r0, r6
	mod_id = buf->data;
    f9a8:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
    f9ac:	f7ff fc70 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
    f9b0:	b9b0      	cbnz	r0, f9e0 <mod_sub_va_overwrite+0x64>
		vnd = (buf->len == 4U);
    f9b2:	88a3      	ldrh	r3, [r4, #4]
    f9b4:	1f1a      	subs	r2, r3, #4
    f9b6:	4253      	negs	r3, r2
    f9b8:	4153      	adcs	r3, r2
    f9ba:	f88d 3015 	strb.w	r3, [sp, #21]
		status = STATUS_INVALID_ADDRESS;
    f9be:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
    f9c0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    f9c4:	e9cd 9301 	strd	r9, r3, [sp, #4]
    f9c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    f9cc:	9300      	str	r3, [sp, #0]
    f9ce:	4622      	mov	r2, r4
    f9d0:	4633      	mov	r3, r6
    f9d2:	4641      	mov	r1, r8
    f9d4:	4638      	mov	r0, r7
    f9d6:	f01a feba 	bl	2a74e <send_mod_sub_status>
}
    f9da:	b006      	add	sp, #24
    f9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mod = get_model(elem, buf, &vnd);
    f9e0:	f10d 0215 	add.w	r2, sp, #21
    f9e4:	4621      	mov	r1, r4
    f9e6:	f01b f905 	bl	2abf4 <get_model>
	if (!mod) {
    f9ea:	4605      	mov	r5, r0
    f9ec:	b1a8      	cbz	r0, fa1a <mod_sub_va_overwrite+0x9e>
		status = bt_mesh_va_add(label_uuid, &sub_addr);
    f9ee:	f10d 0116 	add.w	r1, sp, #22
    f9f2:	4650      	mov	r0, sl
    f9f4:	f01a fb0e 	bl	2a014 <bt_mesh_va_add>
		if (status == STATUS_SUCCESS) {
    f9f8:	4604      	mov	r4, r0
    f9fa:	2800      	cmp	r0, #0
    f9fc:	d1e0      	bne.n	f9c0 <mod_sub_va_overwrite+0x44>
			bt_mesh_model_tree_walk(bt_mesh_model_root(mod),
    f9fe:	4628      	mov	r0, r5
    fa00:	f01a fd83 	bl	2a50a <bt_mesh_model_root>
    fa04:	4906      	ldr	r1, [pc, #24]	; (fa20 <mod_sub_va_overwrite+0xa4>)
    fa06:	4622      	mov	r2, r4
    fa08:	f01a fd80 	bl	2a50c <bt_mesh_model_tree_walk>
			mod->groups[0] = sub_addr;
    fa0c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    fa10:	81eb      	strh	r3, [r5, #14]
				bt_mesh_store_mod_sub(mod);
    fa12:	4628      	mov	r0, r5
    fa14:	f01c f990 	bl	2bd38 <bt_mesh_store_mod_sub>
    fa18:	e7d2      	b.n	f9c0 <mod_sub_va_overwrite+0x44>
		status = STATUS_INVALID_MODEL;
    fa1a:	2402      	movs	r4, #2
    fa1c:	e7d0      	b.n	f9c0 <mod_sub_va_overwrite+0x44>
    fa1e:	bf00      	nop
    fa20:	0002b189 	.word	0x0002b189

0000fa24 <_mod_pub_set.constprop.0>:
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
    fa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa28:	4605      	mov	r5, r0
	if (!model->pub) {
    fa2a:	6880      	ldr	r0, [r0, #8]
static uint8_t _mod_pub_set(struct bt_mesh_model *model, uint16_t pub_addr,
    fa2c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
    fa30:	460f      	mov	r7, r1
    fa32:	4616      	mov	r6, r2
    fa34:	461c      	mov	r4, r3
	if (!model->pub) {
    fa36:	2800      	cmp	r0, #0
    fa38:	d056      	beq.n	fae8 <_mod_pub_set.constprop.0+0xc4>
	if (!IS_ENABLED(CONFIG_BT_MESH_LOW_POWER) && cred_flag) {
    fa3a:	2b00      	cmp	r3, #0
    fa3c:	d152      	bne.n	fae4 <_mod_pub_set.constprop.0+0xc0>
	if (!model->pub->update && period) {
    fa3e:	6941      	ldr	r1, [r0, #20]
    fa40:	b911      	cbnz	r1, fa48 <_mod_pub_set.constprop.0+0x24>
    fa42:	f1b8 0f00 	cmp.w	r8, #0
    fa46:	d14f      	bne.n	fae8 <_mod_pub_set.constprop.0+0xc4>
	if (pub_addr == BT_MESH_ADDR_UNASSIGNED) {
    fa48:	b99f      	cbnz	r7, fa72 <_mod_pub_set.constprop.0+0x4e>
		if (model->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
    fa4a:	8882      	ldrh	r2, [r0, #4]
    fa4c:	b172      	cbz	r2, fa6c <_mod_pub_set.constprop.0+0x48>
		model->pub->addr = BT_MESH_ADDR_UNASSIGNED;
    fa4e:	6842      	ldr	r2, [r0, #4]
    fa50:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    fa54:	6042      	str	r2, [r0, #4]
		model->pub->ttl = 0U;
    fa56:	6882      	ldr	r2, [r0, #8]
    fa58:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
    fa5c:	6082      	str	r2, [r0, #8]
		if (model->pub->update) {
    fa5e:	b111      	cbz	r1, fa66 <_mod_pub_set.constprop.0+0x42>
			k_delayed_work_cancel(&model->pub->timer);
    fa60:	3018      	adds	r0, #24
    fa62:	f01d fda7 	bl	2d5b4 <k_delayed_work_cancel>
			bt_mesh_store_mod_pub(model);
    fa66:	4628      	mov	r0, r5
    fa68:	f01c f96d 	bl	2bd46 <bt_mesh_store_mod_pub>
}
    fa6c:	4620      	mov	r0, r4
    fa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!bt_mesh_app_key_exists(app_idx)) {
    fa72:	4630      	mov	r0, r6
    fa74:	f7fe f944 	bl	dd00 <bt_mesh_app_key_exists>
    fa78:	2800      	cmp	r0, #0
    fa7a:	d037      	beq.n	faec <_mod_pub_set.constprop.0+0xc8>
	model->pub->addr = pub_addr;
    fa7c:	68ab      	ldr	r3, [r5, #8]
	model->pub->ttl = ttl;
    fa7e:	f89d 2020 	ldrb.w	r2, [sp, #32]
	model->pub->key = app_idx;
    fa82:	88d9      	ldrh	r1, [r3, #6]
	model->pub->ttl = ttl;
    fa84:	721a      	strb	r2, [r3, #8]
	model->pub->key = app_idx;
    fa86:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
    fa8a:	f021 011f 	bic.w	r1, r1, #31
    fa8e:	f3c6 060c 	ubfx	r6, r6, #0, #13
	model->pub->retransmit = retransmit;
    fa92:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	model->pub->addr = pub_addr;
    fa96:	809f      	strh	r7, [r3, #4]
	model->pub->key = app_idx;
    fa98:	4331      	orrs	r1, r6
    fa9a:	80d9      	strh	r1, [r3, #6]
	model->pub->period = period;
    fa9c:	f883 800a 	strb.w	r8, [r3, #10]
	model->pub->retransmit = retransmit;
    faa0:	725a      	strb	r2, [r3, #9]
	if (model->pub->update) {
    faa2:	695b      	ldr	r3, [r3, #20]
    faa4:	2b00      	cmp	r3, #0
    faa6:	d0de      	beq.n	fa66 <_mod_pub_set.constprop.0+0x42>
		period_ms = bt_mesh_model_pub_period_get(model);
    faa8:	4628      	mov	r0, r5
    faaa:	f7ff fb35 	bl	f118 <bt_mesh_model_pub_period_get>
		if (period_ms > 0) {
    faae:	1e01      	subs	r1, r0, #0
    fab0:	68a8      	ldr	r0, [r5, #8]
    fab2:	ddd5      	ble.n	fa60 <_mod_pub_set.constprop.0+0x3c>
			k_delayed_work_submit(&model->pub->timer,
    fab4:	f100 0618 	add.w	r6, r0, #24
    fab8:	f240 38e7 	movw	r8, #999	; 0x3e7
    fabc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    fac0:	f04f 0900 	mov.w	r9, #0
    fac4:	fbc0 8901 	smlal	r8, r9, r0, r1
    fac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    facc:	2300      	movs	r3, #0
    face:	4640      	mov	r0, r8
    fad0:	4649      	mov	r1, r9
    fad2:	f7f0 fb65 	bl	1a0 <__aeabi_uldivmod>
    fad6:	4602      	mov	r2, r0
    fad8:	460b      	mov	r3, r1
    fada:	4805      	ldr	r0, [pc, #20]	; (faf0 <_mod_pub_set.constprop.0+0xcc>)
    fadc:	4631      	mov	r1, r6
    fade:	f014 f945 	bl	23d6c <k_delayed_work_submit_to_queue>
    fae2:	e7c0      	b.n	fa66 <_mod_pub_set.constprop.0+0x42>
		return STATUS_FEAT_NOT_SUPP;
    fae4:	240a      	movs	r4, #10
    fae6:	e7c1      	b.n	fa6c <_mod_pub_set.constprop.0+0x48>
		return STATUS_NVAL_PUB_PARAM;
    fae8:	2407      	movs	r4, #7
    faea:	e7bf      	b.n	fa6c <_mod_pub_set.constprop.0+0x48>
		return STATUS_INVALID_APPKEY;
    faec:	2403      	movs	r4, #3
    faee:	e7bd      	b.n	fa6c <_mod_pub_set.constprop.0+0x48>
    faf0:	20001fd8 	.word	0x20001fd8

0000faf4 <heartbeat_pub_set>:
{
    faf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct hb_pub_param *param = (void *)buf->data;
    faf8:	6815      	ldr	r5, [r2, #0]
	dst = sys_le16_to_cpu(param->dst);
    fafa:	f8b5 8000 	ldrh.w	r8, [r5]
    fafe:	fa1f f988 	uxth.w	r9, r8
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    fb02:	f489 4300 	eor.w	r3, r9, #32768	; 0x8000
    fb06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
    fb0a:	4606      	mov	r6, r0
    fb0c:	460f      	mov	r7, r1
	if (BT_MESH_ADDR_IS_VIRTUAL(dst)) {
    fb0e:	d35f      	bcc.n	fbd0 <heartbeat_pub_set+0xdc>
	if (param->count_log > 0x11 && param->count_log != 0xff) {
    fb10:	78ab      	ldrb	r3, [r5, #2]
    fb12:	3b12      	subs	r3, #18
    fb14:	b2db      	uxtb	r3, r3
    fb16:	2bec      	cmp	r3, #236	; 0xec
    fb18:	d95d      	bls.n	fbd6 <heartbeat_pub_set+0xe2>
	if (param->period_log > 0x10) {
    fb1a:	78eb      	ldrb	r3, [r5, #3]
    fb1c:	2b10      	cmp	r3, #16
    fb1e:	d85a      	bhi.n	fbd6 <heartbeat_pub_set+0xe2>
	if (param->ttl > BT_MESH_TTL_MAX && param->ttl != BT_MESH_TTL_DEFAULT) {
    fb20:	792b      	ldrb	r3, [r5, #4]
    fb22:	f083 0380 	eor.w	r3, r3, #128	; 0x80
    fb26:	2b7e      	cmp	r3, #126	; 0x7e
    fb28:	d959      	bls.n	fbde <heartbeat_pub_set+0xea>
	idx = sys_le16_to_cpu(param->net_idx);
    fb2a:	f8b5 3007 	ldrh.w	r3, [r5, #7]
    fb2e:	9301      	str	r3, [sp, #4]
    fb30:	b298      	uxth	r0, r3
	if (idx > 0xfff) {
    fb32:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    fb36:	d252      	bcs.n	fbde <heartbeat_pub_set+0xea>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
    fb38:	69b4      	ldr	r4, [r6, #24]
	feat = sys_le16_to_cpu(param->feat);
    fb3a:	f8b5 a005 	ldrh.w	sl, [r5, #5]
	if (!bt_mesh_subnet_get(idx)) {
    fb3e:	f7fd febf 	bl	d8c0 <bt_mesh_subnet_get>
    fb42:	2800      	cmp	r0, #0
    fb44:	d049      	beq.n	fbda <heartbeat_pub_set+0xe6>
	cfg->hb_pub.dst = dst;
    fb46:	f8a4 8040 	strh.w	r8, [r4, #64]	; 0x40
	cfg->hb_pub.period = param->period_log;
    fb4a:	f895 b003 	ldrb.w	fp, [r5, #3]
	cfg->hb_pub.net_idx = idx;
    fb4e:	9b01      	ldr	r3, [sp, #4]
	cfg->hb_pub.period = param->period_log;
    fb50:	f884 b044 	strb.w	fp, [r4, #68]	; 0x44
	cfg->hb_pub.feat = feat & BT_MESH_FEAT_SUPPORTED;
    fb54:	f00a 0a0f 	and.w	sl, sl, #15
    fb58:	f8a4 a046 	strh.w	sl, [r4, #70]	; 0x46
	cfg->hb_pub.net_idx = idx;
    fb5c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	if (dst == BT_MESH_ADDR_UNASSIGNED) {
    fb60:	f104 0110 	add.w	r1, r4, #16
    fb64:	f1b9 0f00 	cmp.w	r9, #0
    fb68:	d107      	bne.n	fb7a <heartbeat_pub_set+0x86>
	cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    fb6a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
	cfg->hb_pub.period = 0U;
    fb6e:	f8a4 8044 	strh.w	r8, [r4, #68]	; 0x44
			k_delayed_work_cancel(&cfg->hb_pub.timer);
    fb72:	4608      	mov	r0, r1
    fb74:	f01d fd1e 	bl	2d5b4 <k_delayed_work_cancel>
    fb78:	e01f      	b.n	fbba <heartbeat_pub_set+0xc6>
		cfg->hb_pub.count = hb_pwr2(param->count_log, 1);
    fb7a:	78aa      	ldrb	r2, [r5, #2]
    fb7c:	4610      	mov	r0, r2
    fb7e:	f01b fbbe 	bl	2b2fe <hb_pwr2.constprop.0>
    fb82:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
		cfg->hb_pub.ttl = param->ttl;
    fb86:	792b      	ldrb	r3, [r5, #4]
    fb88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (param->period_log && param->count_log) {
    fb8c:	f1bb 0f00 	cmp.w	fp, #0
    fb90:	d0ef      	beq.n	fb72 <heartbeat_pub_set+0x7e>
    fb92:	2a00      	cmp	r2, #0
    fb94:	d0ed      	beq.n	fb72 <heartbeat_pub_set+0x7e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    fb96:	f3bf 8f5b 	dmb	ish
    fb9a:	3418      	adds	r4, #24
    fb9c:	e854 3f00 	ldrex	r3, [r4]
    fba0:	f043 0201 	orr.w	r2, r3, #1
    fba4:	e844 2000 	strex	r0, r2, [r4]
    fba8:	2800      	cmp	r0, #0
    fbaa:	d1f7      	bne.n	fb9c <heartbeat_pub_set+0xa8>
    fbac:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    fbb0:	07db      	lsls	r3, r3, #31
    fbb2:	d402      	bmi.n	fbba <heartbeat_pub_set+0xc6>
		k_queue_append(&work_q->queue, work);
    fbb4:	480b      	ldr	r0, [pc, #44]	; (fbe4 <heartbeat_pub_set+0xf0>)
    fbb6:	f01d fb50 	bl	2d25a <k_queue_append>
		bt_mesh_store_hb_pub();
    fbba:	f01c f8a1 	bl	2bd00 <bt_mesh_store_hb_pub>
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
    fbbe:	2300      	movs	r3, #0
    fbc0:	461a      	mov	r2, r3
	hb_pub_send_status(model, ctx, status, param);
    fbc2:	4639      	mov	r1, r7
    fbc4:	4630      	mov	r0, r6
}
    fbc6:	b003      	add	sp, #12
    fbc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hb_pub_send_status(model, ctx, status, param);
    fbcc:	f01a bd63 	b.w	2a696 <hb_pub_send_status>
		status = STATUS_INVALID_ADDRESS;
    fbd0:	2201      	movs	r2, #1
	hb_pub_send_status(model, ctx, status, param);
    fbd2:	462b      	mov	r3, r5
    fbd4:	e7f5      	b.n	fbc2 <heartbeat_pub_set+0xce>
		status = STATUS_CANNOT_SET;
    fbd6:	220f      	movs	r2, #15
    fbd8:	e7fb      	b.n	fbd2 <heartbeat_pub_set+0xde>
		status = STATUS_INVALID_NETKEY;
    fbda:	2204      	movs	r2, #4
    fbdc:	e7f9      	b.n	fbd2 <heartbeat_pub_set+0xde>
}
    fbde:	b003      	add	sp, #12
    fbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fbe4:	20001fd8 	.word	0x20001fd8

0000fbe8 <hb_publish_end_cb>:
{
    fbe8:	b570      	push	{r4, r5, r6, lr}
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000U;
    fbea:	f891 0044 	ldrb.w	r0, [r1, #68]	; 0x44
{
    fbee:	460d      	mov	r5, r1
	period_ms = hb_pwr2(cfg->hb_pub.period, 1) * 1000U;
    fbf0:	f01b fb85 	bl	2b2fe <hb_pwr2.constprop.0>
    fbf4:	ebc0 1440 	rsb	r4, r0, r0, lsl #5
    fbf8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
    fbfc:	00e4      	lsls	r4, r4, #3
    fbfe:	b2a4      	uxth	r4, r4
	if (period_ms && cfg->hb_pub.count > 1) {
    fc00:	b1b4      	cbz	r4, fc30 <hb_publish_end_cb+0x48>
    fc02:	f8b1 3042 	ldrh.w	r3, [r1, #66]	; 0x42
    fc06:	2b01      	cmp	r3, #1
    fc08:	d912      	bls.n	fc30 <hb_publish_end_cb+0x48>
    fc0a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    fc0e:	f240 30e7 	movw	r0, #999	; 0x3e7
    fc12:	2100      	movs	r1, #0
    fc14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc18:	2300      	movs	r3, #0
    fc1a:	fbe4 0106 	umlal	r0, r1, r4, r6
    fc1e:	f7f0 fabf 	bl	1a0 <__aeabi_uldivmod>
    fc22:	4602      	mov	r2, r0
    fc24:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    fc26:	4808      	ldr	r0, [pc, #32]	; (fc48 <hb_publish_end_cb+0x60>)
    fc28:	f105 0110 	add.w	r1, r5, #16
    fc2c:	f014 f89e 	bl	23d6c <k_delayed_work_submit_to_queue>
	if (cfg->hb_pub.count != 0xffff) {
    fc30:	f8b5 3042 	ldrh.w	r3, [r5, #66]	; 0x42
    fc34:	f64f 72ff 	movw	r2, #65535	; 0xffff
    fc38:	4293      	cmp	r3, r2
		cfg->hb_pub.count--;
    fc3a:	bf1c      	itt	ne
    fc3c:	f103 33ff 	addne.w	r3, r3, #4294967295
    fc40:	f8a5 3042 	strhne.w	r3, [r5, #66]	; 0x42
}
    fc44:	bd70      	pop	{r4, r5, r6, pc}
    fc46:	bf00      	nop
    fc48:	20001fd8 	.word	0x20001fd8

0000fc4c <hb_publish>:
{
    fc4c:	b510      	push	{r4, lr}
    fc4e:	4604      	mov	r4, r0
	sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx);
    fc50:	8f00      	ldrh	r0, [r0, #56]	; 0x38
    fc52:	f7fd fe35 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
    fc56:	b908      	cbnz	r0, fc5c <hb_publish+0x10>
		cfg->hb_pub.dst = BT_MESH_ADDR_UNASSIGNED;
    fc58:	8620      	strh	r0, [r4, #48]	; 0x30
}
    fc5a:	bd10      	pop	{r4, pc}
	if (cfg->hb_pub.count == 0U) {
    fc5c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    fc5e:	2b00      	cmp	r3, #0
    fc60:	d0fb      	beq.n	fc5a <hb_publish+0xe>
	struct bt_mesh_cfg_srv *cfg = CONTAINER_OF(work,
    fc62:	3c10      	subs	r4, #16
	err = bt_mesh_heartbeat_send(&publish_cb, cfg);
    fc64:	4805      	ldr	r0, [pc, #20]	; (fc7c <hb_publish+0x30>)
    fc66:	4621      	mov	r1, r4
    fc68:	f01a f97f 	bl	29f6a <bt_mesh_heartbeat_send>
	if (err) {
    fc6c:	2800      	cmp	r0, #0
    fc6e:	d0f4      	beq.n	fc5a <hb_publish+0xe>
		hb_publish_end_cb(err, cfg);
    fc70:	4621      	mov	r1, r4
}
    fc72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		hb_publish_end_cb(err, cfg);
    fc76:	f7ff bfb7 	b.w	fbe8 <hb_publish_end_cb>
    fc7a:	bf00      	nop
    fc7c:	0002e5d8 	.word	0x0002e5d8

0000fc80 <bt_mesh_cfg_reset>:
		mod->cb->reset(mod);
	}
}

void bt_mesh_cfg_reset(void)
{
    fc80:	b510      	push	{r4, lr}
	struct bt_mesh_cfg_srv *cfg = conf;
    fc82:	4b08      	ldr	r3, [pc, #32]	; (fca4 <bt_mesh_cfg_reset+0x24>)

	BT_DBG("");

	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
    fc84:	2000      	movs	r0, #0
	struct bt_mesh_cfg_srv *cfg = conf;
    fc86:	681c      	ldr	r4, [r3, #0]
	bt_mesh_set_hb_sub_dst(BT_MESH_ADDR_UNASSIGNED);
    fc88:	f7fe fcd4 	bl	e634 <bt_mesh_set_hb_sub_dst>

	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
	cfg->hb_sub.dst = BT_MESH_ADDR_UNASSIGNED;
	cfg->hb_sub.expiry = 0;
    fc8c:	2200      	movs	r2, #0
    fc8e:	2300      	movs	r3, #0
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
    fc90:	2100      	movs	r1, #0
	cfg->hb_sub.expiry = 0;
    fc92:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	cfg->hb_sub.src = BT_MESH_ADDR_UNASSIGNED;
    fc96:	65a1      	str	r1, [r4, #88]	; 0x58

	bt_mesh_model_foreach(mod_reset, NULL);
    fc98:	4803      	ldr	r0, [pc, #12]	; (fca8 <bt_mesh_cfg_reset+0x28>)
}
    fc9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_mesh_model_foreach(mod_reset, NULL);
    fc9e:	f7ff b9ff 	b.w	f0a0 <bt_mesh_model_foreach>
    fca2:	bf00      	nop
    fca4:	20002994 	.word	0x20002994
    fca8:	0002b195 	.word	0x0002b195

0000fcac <bt_mesh_heartbeat>:

void bt_mesh_heartbeat(uint16_t src, uint16_t dst, uint8_t hops, uint16_t feat)
{
    fcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fcb0:	4698      	mov	r8, r3
	struct bt_mesh_cfg_srv *cfg = conf;
    fcb2:	4b1e      	ldr	r3, [pc, #120]	; (fd2c <bt_mesh_heartbeat+0x80>)
    fcb4:	681c      	ldr	r4, [r3, #0]

	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
    fcb6:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
    fcba:	4283      	cmp	r3, r0
{
    fcbc:	4615      	mov	r5, r2
	if (src != cfg->hb_sub.src || dst != cfg->hb_sub.dst) {
    fcbe:	d133      	bne.n	fd28 <bt_mesh_heartbeat+0x7c>
    fcc0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    fcc4:	428b      	cmp	r3, r1
    fcc6:	d12f      	bne.n	fd28 <bt_mesh_heartbeat+0x7c>
    fcc8:	f01d fcdd 	bl	2d686 <z_impl_k_uptime_ticks>
    fccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    fcd0:	460a      	mov	r2, r1
    fcd2:	fba0 0103 	umull	r0, r1, r0, r3
    fcd6:	fb03 1102 	mla	r1, r3, r2, r1
		BT_WARN("No subscription for received heartbeat");
		return;
	}

	if (k_uptime_get() > cfg->hb_sub.expiry) {
    fcda:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    fcde:	0bc6      	lsrs	r6, r0, #15
    fce0:	ea46 4641 	orr.w	r6, r6, r1, lsl #17
    fce4:	0bcf      	lsrs	r7, r1, #15
    fce6:	42b2      	cmp	r2, r6
    fce8:	41bb      	sbcs	r3, r7
    fcea:	db1d      	blt.n	fd28 <bt_mesh_heartbeat+0x7c>
		BT_WARN("Heartbeat subscription period expired");
		return;
	}

	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
    fcec:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);

	if (cfg->hb_sub.count < 0xffff) {
    fcf0:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	cfg->hb_sub.min_hops = MIN(cfg->hb_sub.min_hops, hops);
    fcf4:	42ab      	cmp	r3, r5
    fcf6:	bf28      	it	cs
    fcf8:	462b      	movcs	r3, r5
    fcfa:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	cfg->hb_sub.max_hops = MAX(cfg->hb_sub.max_hops, hops);
    fcfe:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    fd02:	42ab      	cmp	r3, r5
    fd04:	bf38      	it	cc
    fd06:	462b      	movcc	r3, r5
    fd08:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
	if (cfg->hb_sub.count < 0xffff) {
    fd0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    fd10:	429a      	cmp	r2, r3

	BT_DBG("src 0x%04x dst 0x%04x hops %u min %u max %u count %u", src,
	       dst, hops, cfg->hb_sub.min_hops, cfg->hb_sub.max_hops,
	       cfg->hb_sub.count);

	if (cfg->hb_sub.func) {
    fd12:	6e23      	ldr	r3, [r4, #96]	; 0x60
		cfg->hb_sub.count++;
    fd14:	bf1c      	itt	ne
    fd16:	3201      	addne	r2, #1
    fd18:	f8a4 205c 	strhne.w	r2, [r4, #92]	; 0x5c
	if (cfg->hb_sub.func) {
    fd1c:	b123      	cbz	r3, fd28 <bt_mesh_heartbeat+0x7c>
		cfg->hb_sub.func(hops, feat);
    fd1e:	4641      	mov	r1, r8
    fd20:	4628      	mov	r0, r5
	}
}
    fd22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cfg->hb_sub.func(hops, feat);
    fd26:	4718      	bx	r3
}
    fd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fd2c:	20002994 	.word	0x20002994

0000fd30 <bt_mesh_net_transmit_get>:

uint8_t bt_mesh_net_transmit_get(void)
{
	if (conf) {
    fd30:	4b02      	ldr	r3, [pc, #8]	; (fd3c <bt_mesh_net_transmit_get+0xc>)
    fd32:	6818      	ldr	r0, [r3, #0]
    fd34:	b100      	cbz	r0, fd38 <bt_mesh_net_transmit_get+0x8>
		return conf->net_transmit;
    fd36:	7900      	ldrb	r0, [r0, #4]
	}

	return 0;
}
    fd38:	4770      	bx	lr
    fd3a:	bf00      	nop
    fd3c:	20002994 	.word	0x20002994

0000fd40 <bt_mesh_relay_get>:

uint8_t bt_mesh_relay_get(void)
{
	if (conf) {
    fd40:	4b03      	ldr	r3, [pc, #12]	; (fd50 <bt_mesh_relay_get+0x10>)
    fd42:	681b      	ldr	r3, [r3, #0]
    fd44:	b10b      	cbz	r3, fd4a <bt_mesh_relay_get+0xa>
		return conf->relay;
    fd46:	7958      	ldrb	r0, [r3, #5]
    fd48:	4770      	bx	lr
	}

	return BT_MESH_RELAY_NOT_SUPPORTED;
    fd4a:	2002      	movs	r0, #2
}
    fd4c:	4770      	bx	lr
    fd4e:	bf00      	nop
    fd50:	20002994 	.word	0x20002994

0000fd54 <bt_mesh_friend_get>:

uint8_t bt_mesh_friend_get(void)
{
	if (conf) {
    fd54:	4b03      	ldr	r3, [pc, #12]	; (fd64 <bt_mesh_friend_get+0x10>)
    fd56:	681b      	ldr	r3, [r3, #0]
    fd58:	b10b      	cbz	r3, fd5e <bt_mesh_friend_get+0xa>
		BT_DBG("conf %p conf->frnd 0x%02x", conf, conf->frnd);
		return conf->frnd;
    fd5a:	7a58      	ldrb	r0, [r3, #9]
    fd5c:	4770      	bx	lr
	}

	return BT_MESH_FRIEND_NOT_SUPPORTED;
    fd5e:	2002      	movs	r0, #2
}
    fd60:	4770      	bx	lr
    fd62:	bf00      	nop
    fd64:	20002994 	.word	0x20002994

0000fd68 <bt_mesh_relay_retransmit_get>:

uint8_t bt_mesh_relay_retransmit_get(void)
{
	if (conf) {
    fd68:	4b02      	ldr	r3, [pc, #8]	; (fd74 <bt_mesh_relay_retransmit_get+0xc>)
    fd6a:	6818      	ldr	r0, [r3, #0]
    fd6c:	b100      	cbz	r0, fd70 <bt_mesh_relay_retransmit_get+0x8>
		return conf->relay_retransmit;
    fd6e:	7980      	ldrb	r0, [r0, #6]
	}

	return 0;
}
    fd70:	4770      	bx	lr
    fd72:	bf00      	nop
    fd74:	20002994 	.word	0x20002994

0000fd78 <bt_mesh_beacon_get>:

uint8_t bt_mesh_beacon_get(void)
{
	if (conf) {
    fd78:	4b02      	ldr	r3, [pc, #8]	; (fd84 <bt_mesh_beacon_get+0xc>)
    fd7a:	6818      	ldr	r0, [r3, #0]
    fd7c:	b100      	cbz	r0, fd80 <bt_mesh_beacon_get+0x8>
		return conf->beacon;
    fd7e:	79c0      	ldrb	r0, [r0, #7]
	}

	return BT_MESH_BEACON_DISABLED;
}
    fd80:	4770      	bx	lr
    fd82:	bf00      	nop
    fd84:	20002994 	.word	0x20002994

0000fd88 <bt_mesh_gatt_proxy_get>:

uint8_t bt_mesh_gatt_proxy_get(void)
{
	if (conf) {
    fd88:	4b03      	ldr	r3, [pc, #12]	; (fd98 <bt_mesh_gatt_proxy_get+0x10>)
    fd8a:	681b      	ldr	r3, [r3, #0]
    fd8c:	b10b      	cbz	r3, fd92 <bt_mesh_gatt_proxy_get+0xa>
		return conf->gatt_proxy;
    fd8e:	7a18      	ldrb	r0, [r3, #8]
    fd90:	4770      	bx	lr
	}

	return BT_MESH_GATT_PROXY_NOT_SUPPORTED;
    fd92:	2002      	movs	r0, #2
}
    fd94:	4770      	bx	lr
    fd96:	bf00      	nop
    fd98:	20002994 	.word	0x20002994

0000fd9c <bt_mesh_default_ttl_get>:

uint8_t bt_mesh_default_ttl_get(void)
{
	if (conf) {
    fd9c:	4b03      	ldr	r3, [pc, #12]	; (fdac <bt_mesh_default_ttl_get+0x10>)
    fd9e:	681b      	ldr	r3, [r3, #0]
    fda0:	b10b      	cbz	r3, fda6 <bt_mesh_default_ttl_get+0xa>
		return conf->default_ttl;
    fda2:	7a98      	ldrb	r0, [r3, #10]
    fda4:	4770      	bx	lr
	}

	return DEFAULT_TTL;
    fda6:	2007      	movs	r0, #7
}
    fda8:	4770      	bx	lr
    fdaa:	bf00      	nop
    fdac:	20002994 	.word	0x20002994

0000fdb0 <bt_mesh_hb_pub_get>:

struct bt_mesh_hb_pub *bt_mesh_hb_pub_get(void)
{
	return &conf->hb_pub;
    fdb0:	4b01      	ldr	r3, [pc, #4]	; (fdb8 <bt_mesh_hb_pub_get+0x8>)
    fdb2:	6818      	ldr	r0, [r3, #0]
}
    fdb4:	3010      	adds	r0, #16
    fdb6:	4770      	bx	lr
    fdb8:	20002994 	.word	0x20002994

0000fdbc <bt_mesh_cfg_get>:
}

struct bt_mesh_cfg_srv *bt_mesh_cfg_get(void)
{
	return conf;
}
    fdbc:	4b01      	ldr	r3, [pc, #4]	; (fdc4 <bt_mesh_cfg_get+0x8>)
    fdbe:	6818      	ldr	r0, [r3, #0]
    fdc0:	4770      	bx	lr
    fdc2:	bf00      	nop
    fdc4:	20002994 	.word	0x20002994

0000fdc8 <bt_mesh_attention>:
const struct bt_mesh_model_cb bt_mesh_health_srv_cb = {
	.init = health_srv_init,
};

void bt_mesh_attention(struct bt_mesh_model *model, uint8_t time)
{
    fdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fdcc:	460e      	mov	r6, r1
	struct bt_mesh_health_srv *srv;

	if (!model) {
    fdce:	4604      	mov	r4, r0
    fdd0:	bb18      	cbnz	r0, fe1a <bt_mesh_attention+0x52>
		srv = health_srv;
    fdd2:	4b19      	ldr	r3, [pc, #100]	; (fe38 <bt_mesh_attention+0x70>)
    fdd4:	681d      	ldr	r5, [r3, #0]
		if (!srv) {
    fdd6:	b36d      	cbz	r5, fe34 <bt_mesh_attention+0x6c>
			BT_WARN("No Health Server available");
			return;
		}

		model = srv->model;
    fdd8:	682c      	ldr	r4, [r5, #0]
	} else {
		srv = model->user_data;
	}

	if (time > 0) {
    fdda:	f105 0708 	add.w	r7, r5, #8
    fdde:	b1f6      	cbz	r6, fe1e <bt_mesh_attention+0x56>
		if (srv->cb && srv->cb->attn_on) {
    fde0:	686b      	ldr	r3, [r5, #4]
    fde2:	b11b      	cbz	r3, fdec <bt_mesh_attention+0x24>
    fde4:	691b      	ldr	r3, [r3, #16]
    fde6:	b10b      	cbz	r3, fdec <bt_mesh_attention+0x24>
			srv->cb->attn_on(model);
    fde8:	4620      	mov	r0, r4
    fdea:	4798      	blx	r3
		}

		k_delayed_work_submit(&srv->attn_timer, K_SECONDS(time));
    fdec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fdf0:	434e      	muls	r6, r1
    fdf2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    fdf6:	f240 30e7 	movw	r0, #999	; 0x3e7
    fdfa:	2100      	movs	r1, #0
    fdfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fe00:	2300      	movs	r3, #0
    fe02:	fbe4 0106 	umlal	r0, r1, r4, r6
    fe06:	f7f0 f9cb 	bl	1a0 <__aeabi_uldivmod>
    fe0a:	4602      	mov	r2, r0
    fe0c:	460b      	mov	r3, r1
    fe0e:	480b      	ldr	r0, [pc, #44]	; (fe3c <bt_mesh_attention+0x74>)
    fe10:	4639      	mov	r1, r7

		if (srv->cb && srv->cb->attn_off) {
			srv->cb->attn_off(model);
		}
	}
}
    fe12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    fe16:	f013 bfa9 	b.w	23d6c <k_delayed_work_submit_to_queue>
		srv = model->user_data;
    fe1a:	6985      	ldr	r5, [r0, #24]
    fe1c:	e7dd      	b.n	fdda <bt_mesh_attention+0x12>
		k_delayed_work_cancel(&srv->attn_timer);
    fe1e:	4638      	mov	r0, r7
    fe20:	f01d fbc8 	bl	2d5b4 <k_delayed_work_cancel>
		if (srv->cb && srv->cb->attn_off) {
    fe24:	686b      	ldr	r3, [r5, #4]
    fe26:	b12b      	cbz	r3, fe34 <bt_mesh_attention+0x6c>
    fe28:	695b      	ldr	r3, [r3, #20]
    fe2a:	b11b      	cbz	r3, fe34 <bt_mesh_attention+0x6c>
			srv->cb->attn_off(model);
    fe2c:	4620      	mov	r0, r4
}
    fe2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			srv->cb->attn_off(model);
    fe32:	4718      	bx	r3
}
    fe34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fe38:	20002998 	.word	0x20002998
    fe3c:	20001fd8 	.word	0x20001fd8

0000fe40 <key_update_find>:
	schedule_store(BT_MESH_RPL_PENDING);
}

static struct key_update *key_update_find(bool app_key, uint16_t key_idx,
					  struct key_update **free_slot)
{
    fe40:	b570      	push	{r4, r5, r6, lr}
	*free_slot = NULL;

	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
		struct key_update *update = &key_updates[i];

		if (!update->valid) {
    fe42:	4c14      	ldr	r4, [pc, #80]	; (fe94 <key_update_find+0x54>)
    fe44:	7863      	ldrb	r3, [r4, #1]
{
    fe46:	4605      	mov	r5, r0
		if (!update->valid) {
    fe48:	f013 0610 	ands.w	r6, r3, #16
	*free_slot = NULL;
    fe4c:	f04f 0000 	mov.w	r0, #0
    fe50:	6010      	str	r0, [r2, #0]
		if (!update->valid) {
    fe52:	d018      	beq.n	fe86 <key_update_find+0x46>
			*free_slot = update;
			continue;
		}

		if (update->app_key != app_key) {
    fe54:	f3c3 1340 	ubfx	r3, r3, #5, #1
    fe58:	42ab      	cmp	r3, r5
    fe5a:	d105      	bne.n	fe68 <key_update_find+0x28>
			continue;
		}

		if (update->key_idx == key_idx) {
    fe5c:	8823      	ldrh	r3, [r4, #0]
    fe5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
		struct key_update *update = &key_updates[i];
    fe62:	428b      	cmp	r3, r1
    fe64:	bf08      	it	eq
    fe66:	4620      	moveq	r0, r4
		if (!update->valid) {
    fe68:	78e3      	ldrb	r3, [r4, #3]
    fe6a:	06de      	lsls	r6, r3, #27
    fe6c:	d50e      	bpl.n	fe8c <key_update_find+0x4c>
		if (update->app_key != app_key) {
    fe6e:	f3c3 1340 	ubfx	r3, r3, #5, #1
    fe72:	42ab      	cmp	r3, r5
    fe74:	d106      	bne.n	fe84 <key_update_find+0x44>
		if (update->key_idx == key_idx) {
    fe76:	8863      	ldrh	r3, [r4, #2]
		struct key_update *update = &key_updates[i];
    fe78:	4a07      	ldr	r2, [pc, #28]	; (fe98 <key_update_find+0x58>)
		if (update->key_idx == key_idx) {
    fe7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
		struct key_update *update = &key_updates[i];
    fe7e:	428b      	cmp	r3, r1
    fe80:	bf08      	it	eq
    fe82:	4610      	moveq	r0, r2
			match = update;
		}
	}

	return match;
}
    fe84:	bd70      	pop	{r4, r5, r6, pc}
			*free_slot = update;
    fe86:	6014      	str	r4, [r2, #0]
	match = NULL;
    fe88:	4630      	mov	r0, r6
    fe8a:	e7ed      	b.n	fe68 <key_update_find+0x28>
			*free_slot = update;
    fe8c:	4b02      	ldr	r3, [pc, #8]	; (fe98 <key_update_find+0x58>)
    fe8e:	6013      	str	r3, [r2, #0]
	return match;
    fe90:	e7f8      	b.n	fe84 <key_update_find+0x44>
    fe92:	bf00      	nop
    fe94:	2000905c 	.word	0x2000905c
    fe98:	2000905e 	.word	0x2000905e

0000fe9c <cdb_key_update_find>:
}

/* TODO: Could be shared with key_update_find? */
static struct key_update *cdb_key_update_find(bool app_key, uint16_t key_idx,
					     struct key_update **free_slot)
{
    fe9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe9e:	4c0f      	ldr	r4, [pc, #60]	; (fedc <cdb_key_update_find+0x40>)
	struct key_update *match;
	int i;

	match = NULL;
	*free_slot = NULL;
    fea0:	2300      	movs	r3, #0
{
    fea2:	4606      	mov	r6, r0
	*free_slot = NULL;
    fea4:	6013      	str	r3, [r2, #0]
	match = NULL;
    fea6:	4618      	mov	r0, r3
    fea8:	4627      	mov	r7, r4

	for (i = 0; i < ARRAY_SIZE(cdb_key_updates); i++) {
		struct key_update *update = &cdb_key_updates[i];

		if (!update->valid) {
    feaa:	eb07 0543 	add.w	r5, r7, r3, lsl #1
    feae:	786d      	ldrb	r5, [r5, #1]
    feb0:	f015 0f10 	tst.w	r5, #16
    feb4:	d106      	bne.n	fec4 <cdb_key_update_find+0x28>
			*free_slot = update;
    feb6:	6014      	str	r4, [r2, #0]
	for (i = 0; i < ARRAY_SIZE(cdb_key_updates); i++) {
    feb8:	3301      	adds	r3, #1
    feba:	2b06      	cmp	r3, #6
    febc:	f104 0402 	add.w	r4, r4, #2
    fec0:	d1f3      	bne.n	feaa <cdb_key_update_find+0xe>
			match = update;
		}
	}

	return match;
}
    fec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (update->app_key != app_key) {
    fec4:	f3c5 1540 	ubfx	r5, r5, #5, #1
    fec8:	42b5      	cmp	r5, r6
    feca:	d1f5      	bne.n	feb8 <cdb_key_update_find+0x1c>
		if (update->key_idx == key_idx) {
    fecc:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
    fed0:	f3c5 050b 	ubfx	r5, r5, #0, #12
			match = update;
    fed4:	428d      	cmp	r5, r1
    fed6:	bf08      	it	eq
    fed8:	4620      	moveq	r0, r4
    feda:	e7ed      	b.n	feb8 <cdb_key_update_find+0x1c>
    fedc:	20009044 	.word	0x20009044

0000fee0 <mesh_set>:
{
    fee0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    fee4:	4688      	mov	r8, r1
    fee6:	4691      	mov	r9, r2
    fee8:	469a      	mov	sl, r3
	if (!name) {
    feea:	4605      	mov	r5, r0
    feec:	b1e8      	cbz	r0, ff2a <mesh_set+0x4a>
	len = settings_name_next(name, &next);
    feee:	a901      	add	r1, sp, #4
    fef0:	f015 f87c 	bl	24fec <settings_name_next>
		if (!strncmp(settings[i].name, name, len)) {
    fef4:	4e0e      	ldr	r6, [pc, #56]	; (ff30 <mesh_set+0x50>)
	len = settings_name_next(name, &next);
    fef6:	4607      	mov	r7, r0
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
    fef8:	2400      	movs	r4, #0
		if (!strncmp(settings[i].name, name, len)) {
    fefa:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
    fefe:	463a      	mov	r2, r7
    ff00:	4629      	mov	r1, r5
    ff02:	f016 fd26 	bl	26952 <strncmp>
    ff06:	b950      	cbnz	r0, ff1e <mesh_set+0x3e>
			return settings[i].func(next, len_rd, read_cb, cb_arg);
    ff08:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
    ff0c:	9801      	ldr	r0, [sp, #4]
    ff0e:	6864      	ldr	r4, [r4, #4]
    ff10:	4653      	mov	r3, sl
    ff12:	464a      	mov	r2, r9
    ff14:	4641      	mov	r1, r8
    ff16:	47a0      	blx	r4
}
    ff18:	b002      	add	sp, #8
    ff1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < ARRAY_SIZE(settings); i++) {
    ff1e:	3401      	adds	r4, #1
    ff20:	2c0b      	cmp	r4, #11
    ff22:	d1ea      	bne.n	fefa <mesh_set+0x1a>
	return -ENOENT;
    ff24:	f06f 0001 	mvn.w	r0, #1
    ff28:	e7f6      	b.n	ff18 <mesh_set+0x38>
		return -EINVAL;
    ff2a:	f06f 0015 	mvn.w	r0, #21
    ff2e:	e7f3      	b.n	ff18 <mesh_set+0x38>
    ff30:	0002e5e0 	.word	0x0002e5e0

0000ff34 <commit_mod>:
	if (mod->pub && mod->pub->update &&
    ff34:	6883      	ldr	r3, [r0, #8]
{
    ff36:	b570      	push	{r4, r5, r6, lr}
    ff38:	4605      	mov	r5, r0
	if (mod->pub && mod->pub->update &&
    ff3a:	b1eb      	cbz	r3, ff78 <commit_mod+0x44>
    ff3c:	695a      	ldr	r2, [r3, #20]
    ff3e:	b1da      	cbz	r2, ff78 <commit_mod+0x44>
    ff40:	889b      	ldrh	r3, [r3, #4]
    ff42:	b1cb      	cbz	r3, ff78 <commit_mod+0x44>
		int32_t ms = bt_mesh_model_pub_period_get(mod);
    ff44:	f7ff f8e8 	bl	f118 <bt_mesh_model_pub_period_get>
		if (ms > 0) {
    ff48:	1e04      	subs	r4, r0, #0
    ff4a:	dd15      	ble.n	ff78 <commit_mod+0x44>
    ff4c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    ff50:	f240 30e7 	movw	r0, #999	; 0x3e7
    ff54:	2100      	movs	r1, #0
    ff56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ff5a:	2300      	movs	r3, #0
    ff5c:	fbc6 0104 	smlal	r0, r1, r6, r4
    ff60:	f7f0 f91e 	bl	1a0 <__aeabi_uldivmod>
			k_delayed_work_submit(&mod->pub->timer, K_MSEC(ms));
    ff64:	68ad      	ldr	r5, [r5, #8]
    ff66:	3518      	adds	r5, #24
    ff68:	4602      	mov	r2, r0
    ff6a:	460b      	mov	r3, r1
    ff6c:	4803      	ldr	r0, [pc, #12]	; (ff7c <commit_mod+0x48>)
    ff6e:	4629      	mov	r1, r5
}
    ff70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ff74:	f013 befa 	b.w	23d6c <k_delayed_work_submit_to_queue>
    ff78:	bd70      	pop	{r4, r5, r6, pc}
    ff7a:	bf00      	nop
    ff7c:	20001fd8 	.word	0x20001fd8

0000ff80 <encode_mod_path>:
{
    ff80:	b470      	push	{r4, r5, r6}
    ff82:	4604      	mov	r4, r0
    ff84:	4618      	mov	r0, r3
	uint16_t mod_key = (((uint16_t)mod->elem_idx << 8) | mod->mod_idx);
    ff86:	7926      	ldrb	r6, [r4, #4]
    ff88:	7963      	ldrb	r3, [r4, #5]
{
    ff8a:	460d      	mov	r5, r1
    ff8c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    ff90:	9903      	ldr	r1, [sp, #12]
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
    ff92:	9203      	str	r2, [sp, #12]
	if (vnd) {
    ff94:	b11d      	cbz	r5, ff9e <encode_mod_path+0x1e>
		snprintk(path, path_len, "bt/mesh/v/%x/%s", mod_key, key);
    ff96:	4a03      	ldr	r2, [pc, #12]	; (ffa4 <encode_mod_path+0x24>)
}
    ff98:	bc70      	pop	{r4, r5, r6}
		snprintk(path, path_len, "bt/mesh/s/%x/%s", mod_key, key);
    ff9a:	f014 ba98 	b.w	244ce <snprintk>
    ff9e:	4a02      	ldr	r2, [pc, #8]	; (ffa8 <encode_mod_path+0x28>)
    ffa0:	e7fa      	b.n	ff98 <encode_mod_path+0x18>
    ffa2:	bf00      	nop
    ffa4:	000335d8 	.word	0x000335d8
    ffa8:	000335e8 	.word	0x000335e8

0000ffac <store_subnet>:
{
    ffac:	b530      	push	{r4, r5, lr}
    ffae:	b08f      	sub	sp, #60	; 0x3c
    ffb0:	4605      	mov	r5, r0
	sub = bt_mesh_subnet_get(net_idx);
    ffb2:	f7fd fc85 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
    ffb6:	4604      	mov	r4, r0
    ffb8:	b1e0      	cbz	r0, fff4 <store_subnet+0x48>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
    ffba:	462b      	mov	r3, r5
    ffbc:	4a0e      	ldr	r2, [pc, #56]	; (fff8 <store_subnet+0x4c>)
    ffbe:	2114      	movs	r1, #20
    ffc0:	4668      	mov	r0, sp
    ffc2:	f014 fa84 	bl	244ce <snprintk>
	memcpy(&key.val[0], sub->keys[0].net, 16);
    ffc6:	2210      	movs	r2, #16
    ffc8:	f104 012d 	add.w	r1, r4, #45	; 0x2d
    ffcc:	f10d 0015 	add.w	r0, sp, #21
    ffd0:	f016 fce7 	bl	269a2 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net, 16);
    ffd4:	2210      	movs	r2, #16
    ffd6:	f104 0177 	add.w	r1, r4, #119	; 0x77
    ffda:	f10d 0025 	add.w	r0, sp, #37	; 0x25
    ffde:	f016 fce0 	bl	269a2 <memcpy>
	key.kr_flag = 0U; /* Deprecated */
    ffe2:	7fa3      	ldrb	r3, [r4, #30]
	err = settings_save_one(path, &key, sizeof(key));
    ffe4:	2221      	movs	r2, #33	; 0x21
	key.kr_flag = 0U; /* Deprecated */
    ffe6:	005b      	lsls	r3, r3, #1
	err = settings_save_one(path, &key, sizeof(key));
    ffe8:	a905      	add	r1, sp, #20
    ffea:	4668      	mov	r0, sp
	key.kr_flag = 0U; /* Deprecated */
    ffec:	f88d 3014 	strb.w	r3, [sp, #20]
	err = settings_save_one(path, &key, sizeof(key));
    fff0:	f7f5 f996 	bl	5320 <settings_save_one>
}
    fff4:	b00f      	add	sp, #60	; 0x3c
    fff6:	bd30      	pop	{r4, r5, pc}
    fff8:	000335f8 	.word	0x000335f8

0000fffc <store_cdb_subnet>:
{
    fffc:	b510      	push	{r4, lr}
    fffe:	b092      	sub	sp, #72	; 0x48
   10000:	4604      	mov	r4, r0
	memcpy(&key.val[0], sub->keys[0].net_key, 16);
   10002:	1d01      	adds	r1, r0, #4
   10004:	2210      	movs	r2, #16
   10006:	f10d 0025 	add.w	r0, sp, #37	; 0x25
   1000a:	f016 fcca 	bl	269a2 <memcpy>
	memcpy(&key.val[1], sub->keys[1].net_key, 16);
   1000e:	f104 0114 	add.w	r1, r4, #20
   10012:	2210      	movs	r2, #16
   10014:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   10018:	f016 fcc3 	bl	269a2 <memcpy>
	key.kr_flag = sub->kr_flag;
   1001c:	78e2      	ldrb	r2, [r4, #3]
   1001e:	78a3      	ldrb	r3, [r4, #2]
   10020:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   10024:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", sub->net_idx);
   10028:	4a06      	ldr	r2, [pc, #24]	; (10044 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x45>)
   1002a:	8823      	ldrh	r3, [r4, #0]
   1002c:	211e      	movs	r1, #30
   1002e:	a801      	add	r0, sp, #4
   10030:	f014 fa4d 	bl	244ce <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   10034:	2221      	movs	r2, #33	; 0x21
   10036:	a909      	add	r1, sp, #36	; 0x24
   10038:	a801      	add	r0, sp, #4
   1003a:	f7f5 f971 	bl	5320 <settings_save_one>
}
   1003e:	b012      	add	sp, #72	; 0x48
   10040:	bd10      	pop	{r4, pc}
   10042:	bf00      	nop
   10044:	0003360a 	.word	0x0003360a

00010048 <store_cdb_app_key>:
{
   10048:	b510      	push	{r4, lr}
	key.net_idx = app->net_idx;
   1004a:	4601      	mov	r1, r0
{
   1004c:	b092      	sub	sp, #72	; 0x48
	key.net_idx = app->net_idx;
   1004e:	f831 3b04 	ldrh.w	r3, [r1], #4
   10052:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
{
   10056:	4604      	mov	r4, r0
	key.updated = false;
   10058:	2300      	movs	r3, #0
	memcpy(key.val[0], app->keys[0].app_key, 16);
   1005a:	2210      	movs	r2, #16
   1005c:	f10d 0027 	add.w	r0, sp, #39	; 0x27
	key.updated = false;
   10060:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	memcpy(key.val[0], app->keys[0].app_key, 16);
   10064:	f016 fc9d 	bl	269a2 <memcpy>
	memcpy(key.val[1], app->keys[1].app_key, 16);
   10068:	f104 0114 	add.w	r1, r4, #20
   1006c:	2210      	movs	r2, #16
   1006e:	f10d 0037 	add.w	r0, sp, #55	; 0x37
   10072:	f016 fc96 	bl	269a2 <memcpy>
	snprintk(path, sizeof(path), "bt/mesh/cdb/AppKey/%x", app->app_idx);
   10076:	8863      	ldrh	r3, [r4, #2]
   10078:	4a05      	ldr	r2, [pc, #20]	; (10090 <store_cdb_app_key+0x48>)
   1007a:	211e      	movs	r1, #30
   1007c:	a801      	add	r0, sp, #4
   1007e:	f014 fa26 	bl	244ce <snprintk>
	err = settings_save_one(path, &key, sizeof(key));
   10082:	2223      	movs	r2, #35	; 0x23
   10084:	a909      	add	r1, sp, #36	; 0x24
   10086:	a801      	add	r0, sp, #4
   10088:	f7f5 f94a 	bl	5320 <settings_save_one>
}
   1008c:	b012      	add	sp, #72	; 0x48
   1008e:	bd10      	pop	{r4, pc}
   10090:	00033620 	.word	0x00033620

00010094 <store_pending_rpl>:
{
   10094:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (rpl->store) {
   10096:	78c3      	ldrb	r3, [r0, #3]
   10098:	b1cb      	cbz	r3, 100ce <store_pending_rpl+0x3a>
		rpl->store = false;
   1009a:	2300      	movs	r3, #0
   1009c:	70c3      	strb	r3, [r0, #3]
	rpl.seq = entry->seq;
   1009e:	6842      	ldr	r2, [r0, #4]
   100a0:	9b00      	ldr	r3, [sp, #0]
   100a2:	f362 0317 	bfi	r3, r2, #0, #24
   100a6:	9300      	str	r3, [sp, #0]
	rpl.old_iv = entry->old_iv;
   100a8:	7882      	ldrb	r2, [r0, #2]
   100aa:	f3c3 6307 	ubfx	r3, r3, #24, #8
   100ae:	f362 0300 	bfi	r3, r2, #0, #1
   100b2:	f88d 3003 	strb.w	r3, [sp, #3]
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", entry->src);
   100b6:	4a07      	ldr	r2, [pc, #28]	; (100d4 <store_pending_rpl+0x40>)
   100b8:	8803      	ldrh	r3, [r0, #0]
   100ba:	2112      	movs	r1, #18
   100bc:	a801      	add	r0, sp, #4
   100be:	f014 fa06 	bl	244ce <snprintk>
	err = settings_save_one(path, &rpl, sizeof(rpl));
   100c2:	2204      	movs	r2, #4
   100c4:	4669      	mov	r1, sp
   100c6:	eb0d 0002 	add.w	r0, sp, r2
   100ca:	f7f5 f929 	bl	5320 <settings_save_one>
}
   100ce:	b007      	add	sp, #28
   100d0:	f85d fb04 	ldr.w	pc, [sp], #4
   100d4:	00033636 	.word	0x00033636

000100d8 <store_app>:
{
   100d8:	b510      	push	{r4, lr}
   100da:	b08e      	sub	sp, #56	; 0x38
   100dc:	4604      	mov	r4, r0
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   100de:	4603      	mov	r3, r0
   100e0:	4a11      	ldr	r2, [pc, #68]	; (10128 <store_app+0x50>)
   100e2:	2114      	movs	r1, #20
   100e4:	4668      	mov	r0, sp
   100e6:	f014 f9f2 	bl	244ce <snprintk>
	app = bt_mesh_app_key_get(app_idx);
   100ea:	4620      	mov	r0, r4
   100ec:	f7fd fd56 	bl	db9c <bt_mesh_app_key_get>
	if (!app) {
   100f0:	4604      	mov	r4, r0
   100f2:	b1b8      	cbz	r0, 10124 <store_app+0x4c>
	key.net_idx = app->net_idx,
   100f4:	8803      	ldrh	r3, [r0, #0]
   100f6:	f8ad 3014 	strh.w	r3, [sp, #20]
	memcpy(key.val[0], app->keys[0].val, 16);
   100fa:	1d81      	adds	r1, r0, #6
	key.updated = app->updated,
   100fc:	7903      	ldrb	r3, [r0, #4]
   100fe:	f88d 3016 	strb.w	r3, [sp, #22]
	memcpy(key.val[0], app->keys[0].val, 16);
   10102:	2210      	movs	r2, #16
   10104:	f10d 0017 	add.w	r0, sp, #23
   10108:	f016 fc4b 	bl	269a2 <memcpy>
	memcpy(key.val[1], app->keys[1].val, 16);
   1010c:	2210      	movs	r2, #16
   1010e:	f104 0117 	add.w	r1, r4, #23
   10112:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   10116:	f016 fc44 	bl	269a2 <memcpy>
	err = settings_save_one(path, &key, sizeof(key));
   1011a:	2223      	movs	r2, #35	; 0x23
   1011c:	a905      	add	r1, sp, #20
   1011e:	4668      	mov	r0, sp
   10120:	f7f5 f8fe 	bl	5320 <settings_save_one>
}
   10124:	b00e      	add	sp, #56	; 0x38
   10126:	bd10      	pop	{r4, pc}
   10128:	00033645 	.word	0x00033645

0001012c <clear_rpl>:
{
   1012c:	b510      	push	{r4, lr}
	if (!rpl->src) {
   1012e:	8803      	ldrh	r3, [r0, #0]
{
   10130:	b086      	sub	sp, #24
   10132:	4604      	mov	r4, r0
	if (!rpl->src) {
   10134:	b163      	cbz	r3, 10150 <clear_rpl+0x24>
	snprintk(path, sizeof(path), "bt/mesh/RPL/%x", rpl->src);
   10136:	4a07      	ldr	r2, [pc, #28]	; (10154 <clear_rpl+0x28>)
   10138:	2112      	movs	r1, #18
   1013a:	a801      	add	r0, sp, #4
   1013c:	f014 f9c7 	bl	244ce <snprintk>
	err = settings_delete(path);
   10140:	a801      	add	r0, sp, #4
   10142:	f014 ff2c 	bl	24f9e <settings_delete>
	(void)memset(rpl, 0, sizeof(*rpl));
   10146:	2208      	movs	r2, #8
   10148:	2100      	movs	r1, #0
   1014a:	4620      	mov	r0, r4
   1014c:	f016 fc54 	bl	269f8 <memset>
}
   10150:	b006      	add	sp, #24
   10152:	bd10      	pop	{r4, pc}
   10154:	00033636 	.word	0x00033636

00010158 <seq_set>:
{
   10158:	b513      	push	{r0, r1, r4, lr}
   1015a:	460c      	mov	r4, r1
   1015c:	4610      	mov	r0, r2
   1015e:	4619      	mov	r1, r3
	if (len_rd == 0) {
   10160:	b924      	cbnz	r4, 1016c <seq_set+0x14>
		bt_mesh.seq = 0U;
   10162:	4b0d      	ldr	r3, [pc, #52]	; (10198 <seq_set+0x40>)
		return 0;
   10164:	4620      	mov	r0, r4
		bt_mesh.seq = 0U;
   10166:	605c      	str	r4, [r3, #4]
}
   10168:	b002      	add	sp, #8
   1016a:	bd10      	pop	{r4, pc}
	err = mesh_x_set(read_cb, cb_arg, &seq, sizeof(seq));
   1016c:	2303      	movs	r3, #3
   1016e:	aa01      	add	r2, sp, #4
   10170:	f01b fc67 	bl	2ba42 <mesh_x_set>
	if (err) {
   10174:	2800      	cmp	r0, #0
   10176:	d1f7      	bne.n	10168 <seq_set+0x10>
	return ((uint16_t)src[1] << 8) | src[0];
   10178:	f89d 2005 	ldrb.w	r2, [sp, #5]
   1017c:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   10180:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10184:	f89d 2006 	ldrb.w	r2, [sp, #6]
   10188:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
		bt_mesh.seq += (CONFIG_BT_MESH_SEQ_STORE_RATE -
   1018c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		bt_mesh.seq--;
   10190:	4a01      	ldr	r2, [pc, #4]	; (10198 <seq_set+0x40>)
   10192:	337f      	adds	r3, #127	; 0x7f
   10194:	6053      	str	r3, [r2, #4]
	return 0;
   10196:	e7e7      	b.n	10168 <seq_set+0x10>
   10198:	200015a8 	.word	0x200015a8

0001019c <mod_set>:
{
   1019c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   101a0:	b087      	sub	sp, #28
   101a2:	4605      	mov	r5, r0
   101a4:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   101a8:	4616      	mov	r6, r2
   101aa:	461f      	mov	r7, r3
	if (!name) {
   101ac:	460c      	mov	r4, r1
   101ae:	b929      	cbnz	r1, 101bc <mod_set+0x20>
		return -ENOENT;
   101b0:	f06f 0401 	mvn.w	r4, #1
}
   101b4:	4620      	mov	r0, r4
   101b6:	b007      	add	sp, #28
   101b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod_key = strtol(name, NULL, 16);
   101bc:	2210      	movs	r2, #16
   101be:	2100      	movs	r1, #0
   101c0:	4620      	mov	r0, r4
   101c2:	f016 fb12 	bl	267ea <strtol>
	mod = bt_mesh_model_get(vnd, elem_idx, mod_idx);
   101c6:	b2c2      	uxtb	r2, r0
   101c8:	f3c0 2107 	ubfx	r1, r0, #8, #8
   101cc:	4628      	mov	r0, r5
   101ce:	f7ff f809 	bl	f1e4 <bt_mesh_model_get>
	if (!mod) {
   101d2:	4605      	mov	r5, r0
   101d4:	2800      	cmp	r0, #0
   101d6:	d0eb      	beq.n	101b0 <mod_set+0x14>
	len = settings_name_next(name, &next);
   101d8:	a903      	add	r1, sp, #12
   101da:	4620      	mov	r0, r4
   101dc:	f014 ff06 	bl	24fec <settings_name_next>
   101e0:	4680      	mov	r8, r0
	if (!next) {
   101e2:	9803      	ldr	r0, [sp, #12]
   101e4:	2800      	cmp	r0, #0
   101e6:	d0e3      	beq.n	101b0 <mod_set+0x14>
	if (!strncmp(next, "bind", len)) {
   101e8:	4941      	ldr	r1, [pc, #260]	; (102f0 <mod_set+0x154>)
   101ea:	4642      	mov	r2, r8
   101ec:	f016 fbb1 	bl	26952 <strncmp>
   101f0:	b968      	cbnz	r0, 1020e <mod_set+0x72>
		mod->keys[i] = BT_MESH_KEY_UNUSED;
   101f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   101f6:	81ab      	strh	r3, [r5, #12]
	if (len_rd == 0) {
   101f8:	b90e      	cbnz	r6, 101fe <mod_set+0x62>
		return 0;
   101fa:	2400      	movs	r4, #0
   101fc:	e7da      	b.n	101b4 <mod_set+0x18>
	len = read_cb(cb_arg, mod->keys, sizeof(mod->keys));
   101fe:	2202      	movs	r2, #2
   10200:	f105 010c 	add.w	r1, r5, #12
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   10204:	4648      	mov	r0, r9
   10206:	47b8      	blx	r7
	if (len < 0) {
   10208:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   1020c:	e7d2      	b.n	101b4 <mod_set+0x18>
	if (!strncmp(next, "sub", len)) {
   1020e:	4939      	ldr	r1, [pc, #228]	; (102f4 <mod_set+0x158>)
   10210:	9803      	ldr	r0, [sp, #12]
   10212:	4642      	mov	r2, r8
   10214:	f016 fb9d 	bl	26952 <strncmp>
   10218:	4601      	mov	r1, r0
   1021a:	b948      	cbnz	r0, 10230 <mod_set+0x94>
	(void)memset(mod->groups, 0, sizeof(mod->groups));
   1021c:	350e      	adds	r5, #14
   1021e:	2202      	movs	r2, #2
   10220:	4628      	mov	r0, r5
   10222:	f016 fbe9 	bl	269f8 <memset>
	if (len_rd == 0) {
   10226:	2e00      	cmp	r6, #0
   10228:	d0e7      	beq.n	101fa <mod_set+0x5e>
	len = read_cb(cb_arg, mod->groups, sizeof(mod->groups));
   1022a:	2202      	movs	r2, #2
   1022c:	4629      	mov	r1, r5
   1022e:	e7e9      	b.n	10204 <mod_set+0x68>
	if (!strncmp(next, "pub", len)) {
   10230:	4931      	ldr	r1, [pc, #196]	; (102f8 <mod_set+0x15c>)
   10232:	9803      	ldr	r0, [sp, #12]
   10234:	4642      	mov	r2, r8
   10236:	f016 fb8c 	bl	26952 <strncmp>
   1023a:	4604      	mov	r4, r0
   1023c:	2800      	cmp	r0, #0
   1023e:	d137      	bne.n	102b0 <mod_set+0x114>
	if (!mod->pub) {
   10240:	68ab      	ldr	r3, [r5, #8]
   10242:	b393      	cbz	r3, 102aa <mod_set+0x10e>
	if (len_rd == 0) {
   10244:	b946      	cbnz	r6, 10258 <mod_set+0xbc>
		mod->pub->addr = BT_MESH_ADDR_UNASSIGNED;
   10246:	685a      	ldr	r2, [r3, #4]
   10248:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   1024c:	605a      	str	r2, [r3, #4]
		mod->pub->ttl = 0U;
   1024e:	689a      	ldr	r2, [r3, #8]
   10250:	f002 52f8 	and.w	r2, r2, #520093696	; 0x1f000000
   10254:	609a      	str	r2, [r3, #8]
		return 0;
   10256:	e7ad      	b.n	101b4 <mod_set+0x18>
	err = mesh_x_set(read_cb, cb_arg, &pub, sizeof(pub));
   10258:	2308      	movs	r3, #8
   1025a:	aa04      	add	r2, sp, #16
   1025c:	4649      	mov	r1, r9
   1025e:	4638      	mov	r0, r7
   10260:	f01b fbef 	bl	2ba42 <mesh_x_set>
	if (err) {
   10264:	4604      	mov	r4, r0
   10266:	2800      	cmp	r0, #0
   10268:	d1a4      	bne.n	101b4 <mod_set+0x18>
	mod->pub->addr = pub.addr;
   1026a:	68ab      	ldr	r3, [r5, #8]
   1026c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   10270:	809a      	strh	r2, [r3, #4]
	mod->pub->cred = pub.cred;
   10272:	f89d 2017 	ldrb.w	r2, [sp, #23]
	mod->pub->key = pub.key;
   10276:	f3c2 1100 	ubfx	r1, r2, #4, #1
   1027a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1027e:	f3c2 020b 	ubfx	r2, r2, #0, #12
   10282:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   10286:	88d9      	ldrh	r1, [r3, #6]
   10288:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
   1028c:	f021 011f 	bic.w	r1, r1, #31
   10290:	430a      	orrs	r2, r1
   10292:	80da      	strh	r2, [r3, #6]
	mod->pub->period = pub.period;
   10294:	f89d 2016 	ldrb.w	r2, [sp, #22]
	mod->pub->ttl = pub.ttl;
   10298:	f8bd 1014 	ldrh.w	r1, [sp, #20]
	mod->pub->period = pub.period;
   1029c:	729a      	strb	r2, [r3, #10]
	mod->pub->count = 0U;
   1029e:	7ada      	ldrb	r2, [r3, #11]
	mod->pub->ttl = pub.ttl;
   102a0:	8119      	strh	r1, [r3, #8]
	mod->pub->count = 0U;
   102a2:	f360 1247 	bfi	r2, r0, #5, #3
   102a6:	72da      	strb	r2, [r3, #11]
	return 0;
   102a8:	e784      	b.n	101b4 <mod_set+0x18>
		return -EINVAL;
   102aa:	f06f 0415 	mvn.w	r4, #21
		return mod_set_pub(mod, len_rd, read_cb, cb_arg);
   102ae:	e781      	b.n	101b4 <mod_set+0x18>
	if (!strncmp(next, "data", len)) {
   102b0:	4912      	ldr	r1, [pc, #72]	; (102fc <mod_set+0x160>)
   102b2:	9803      	ldr	r0, [sp, #12]
   102b4:	4642      	mov	r2, r8
   102b6:	f016 fb4c 	bl	26952 <strncmp>
   102ba:	4604      	mov	r4, r0
   102bc:	2800      	cmp	r0, #0
   102be:	f47f af77 	bne.w	101b0 <mod_set+0x14>
	settings_name_next(name, &next);
   102c2:	9803      	ldr	r0, [sp, #12]
   102c4:	a904      	add	r1, sp, #16
   102c6:	f014 fe91 	bl	24fec <settings_name_next>
	if (mod->cb && mod->cb->settings_set) {
   102ca:	696b      	ldr	r3, [r5, #20]
   102cc:	2b00      	cmp	r3, #0
   102ce:	f43f af71 	beq.w	101b4 <mod_set+0x18>
   102d2:	f8d3 8000 	ldr.w	r8, [r3]
   102d6:	f1b8 0f00 	cmp.w	r8, #0
   102da:	f43f af6b 	beq.w	101b4 <mod_set+0x18>
		return mod->cb->settings_set(mod, next, len_rd,
   102de:	9904      	ldr	r1, [sp, #16]
   102e0:	f8cd 9000 	str.w	r9, [sp]
   102e4:	463b      	mov	r3, r7
   102e6:	4632      	mov	r2, r6
   102e8:	4628      	mov	r0, r5
   102ea:	47c0      	blx	r8
   102ec:	4604      	mov	r4, r0
		return mod_data_set(mod, next, len_rd, read_cb, cb_arg);
   102ee:	e761      	b.n	101b4 <mod_set+0x18>
   102f0:	00033657 	.word	0x00033657
   102f4:	0003365c 	.word	0x0003365c
   102f8:	00033660 	.word	0x00033660
   102fc:	00033664 	.word	0x00033664

00010300 <cdb_set>:
{
   10300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10304:	4688      	mov	r8, r1
   10306:	b08b      	sub	sp, #44	; 0x2c
   10308:	4616      	mov	r6, r2
   1030a:	461f      	mov	r7, r3
	if (!name) {
   1030c:	4605      	mov	r5, r0
   1030e:	b340      	cbz	r0, 10362 <cdb_set+0x62>
	if (!strcmp(name, "Net")) {
   10310:	497f      	ldr	r1, [pc, #508]	; (10510 <cdb_set+0x210>)
   10312:	f016 fb12 	bl	2693a <strcmp>
   10316:	4604      	mov	r4, r0
   10318:	b9e0      	cbnz	r0, 10354 <cdb_set+0x54>
	if (len_rd == 0) {
   1031a:	f1b8 0f00 	cmp.w	r8, #0
   1031e:	d015      	beq.n	1034c <cdb_set+0x4c>
	err = mesh_x_set(read_cb, cb_arg, &net, sizeof(net));
   10320:	2305      	movs	r3, #5
   10322:	aa01      	add	r2, sp, #4
   10324:	4639      	mov	r1, r7
   10326:	4630      	mov	r0, r6
   10328:	f01b fb8b 	bl	2ba42 <mesh_x_set>
	if (err) {
   1032c:	4604      	mov	r4, r0
   1032e:	b968      	cbnz	r0, 1034c <cdb_set+0x4c>
	bt_mesh_cdb.iv_index = net.iv_index;
   10330:	4878      	ldr	r0, [pc, #480]	; (10514 <cdb_set+0x214>)
   10332:	9b01      	ldr	r3, [sp, #4]
   10334:	6003      	str	r3, [r0, #0]
	if (net.iv_update) {
   10336:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1033a:	b11b      	cbz	r3, 10344 <cdb_set+0x44>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1033c:	2110      	movs	r1, #16
   1033e:	3004      	adds	r0, #4
   10340:	f01b fb8e 	bl	2ba60 <atomic_or>
   10344:	4874      	ldr	r0, [pc, #464]	; (10518 <cdb_set+0x218>)
   10346:	2101      	movs	r1, #1
   10348:	f01b fb8a 	bl	2ba60 <atomic_or>
}
   1034c:	4620      	mov	r0, r4
   1034e:	b00b      	add	sp, #44	; 0x2c
   10350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	len = settings_name_next(name, &next);
   10354:	4669      	mov	r1, sp
   10356:	4628      	mov	r0, r5
   10358:	f014 fe48 	bl	24fec <settings_name_next>
	if (!next) {
   1035c:	9b00      	ldr	r3, [sp, #0]
	len = settings_name_next(name, &next);
   1035e:	4681      	mov	r9, r0
	if (!next) {
   10360:	b913      	cbnz	r3, 10368 <cdb_set+0x68>
		return -ENOENT;
   10362:	f06f 0401 	mvn.w	r4, #1
   10366:	e7f1      	b.n	1034c <cdb_set+0x4c>
	if (!strncmp(name, "Node", len)) {
   10368:	4602      	mov	r2, r0
   1036a:	496c      	ldr	r1, [pc, #432]	; (1051c <cdb_set+0x21c>)
   1036c:	4628      	mov	r0, r5
   1036e:	f016 faf0 	bl	26952 <strncmp>
   10372:	4604      	mov	r4, r0
   10374:	2800      	cmp	r0, #0
   10376:	d142      	bne.n	103fe <cdb_set+0xfe>
		return cdb_node_set(next, len_rd, read_cb, cb_arg);
   10378:	9800      	ldr	r0, [sp, #0]
	if (!name) {
   1037a:	2800      	cmp	r0, #0
   1037c:	d0f1      	beq.n	10362 <cdb_set+0x62>
	addr = strtol(name, NULL, 16);
   1037e:	2210      	movs	r2, #16
   10380:	4621      	mov	r1, r4
   10382:	f016 fa32 	bl	267ea <strtol>
   10386:	fa1f f980 	uxth.w	r9, r0
	if (len_rd == 0) {
   1038a:	f1b8 0f00 	cmp.w	r8, #0
   1038e:	d108      	bne.n	103a2 <cdb_set+0xa2>
		node = bt_mesh_cdb_node_get(addr);
   10390:	4648      	mov	r0, r9
   10392:	f002 fd43 	bl	12e1c <bt_mesh_cdb_node_get>
		if (node) {
   10396:	2800      	cmp	r0, #0
   10398:	d0d8      	beq.n	1034c <cdb_set+0x4c>
			bt_mesh_cdb_node_del(node, false);
   1039a:	4621      	mov	r1, r4
   1039c:	f01b fdaa 	bl	2bef4 <bt_mesh_cdb_node_del>
   103a0:	e7d4      	b.n	1034c <cdb_set+0x4c>
	err = mesh_x_set(read_cb, cb_arg, &val, sizeof(val));
   103a2:	2324      	movs	r3, #36	; 0x24
   103a4:	aa01      	add	r2, sp, #4
   103a6:	4639      	mov	r1, r7
   103a8:	4630      	mov	r0, r6
   103aa:	f01b fb4a 	bl	2ba42 <mesh_x_set>
	if (err) {
   103ae:	4604      	mov	r4, r0
   103b0:	2800      	cmp	r0, #0
   103b2:	d1cb      	bne.n	1034c <cdb_set+0x4c>
	node = bt_mesh_cdb_node_get(addr);
   103b4:	4648      	mov	r0, r9
   103b6:	f002 fd31 	bl	12e1c <bt_mesh_cdb_node_get>
	if (!node) {
   103ba:	4605      	mov	r5, r0
   103bc:	b950      	cbnz	r0, 103d4 <cdb_set+0xd4>
		node = bt_mesh_cdb_node_alloc(val.uuid, addr, val.num_elem,
   103be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   103c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
   103c6:	4649      	mov	r1, r9
   103c8:	a802      	add	r0, sp, #8
   103ca:	f002 fccf 	bl	12d6c <bt_mesh_cdb_node_alloc>
	if (!node) {
   103ce:	4605      	mov	r5, r0
   103d0:	2800      	cmp	r0, #0
   103d2:	d059      	beq.n	10488 <cdb_set+0x188>
	if (val.flags & F_NODE_CONFIGURED) {
   103d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   103d8:	07db      	lsls	r3, r3, #31
   103da:	d504      	bpl.n	103e6 <cdb_set+0xe6>
   103dc:	2101      	movs	r1, #1
   103de:	f105 0028 	add.w	r0, r5, #40	; 0x28
   103e2:	f01b fb3d 	bl	2ba60 <atomic_or>
	memcpy(node->uuid, val.uuid, 16);
   103e6:	2210      	movs	r2, #16
   103e8:	a902      	add	r1, sp, #8
   103ea:	4628      	mov	r0, r5
   103ec:	f016 fad9 	bl	269a2 <memcpy>
	memcpy(node->dev_key, val.dev_key, 16);
   103f0:	2210      	movs	r2, #16
   103f2:	a906      	add	r1, sp, #24
   103f4:	f105 0015 	add.w	r0, r5, #21
	memcpy(app->keys[1].app_key, key.val[1], 16);
   103f8:	f016 fad3 	bl	269a2 <memcpy>
	return 0;
   103fc:	e7a6      	b.n	1034c <cdb_set+0x4c>
	if (!strncmp(name, "Subnet", len)) {
   103fe:	4948      	ldr	r1, [pc, #288]	; (10520 <cdb_set+0x220>)
   10400:	464a      	mov	r2, r9
   10402:	4628      	mov	r0, r5
   10404:	f016 faa5 	bl	26952 <strncmp>
   10408:	4604      	mov	r4, r0
   1040a:	2800      	cmp	r0, #0
   1040c:	d13f      	bne.n	1048e <cdb_set+0x18e>
		return cdb_subnet_set(next, len_rd, read_cb, cb_arg);
   1040e:	9800      	ldr	r0, [sp, #0]
	if (!name) {
   10410:	2800      	cmp	r0, #0
   10412:	d0a6      	beq.n	10362 <cdb_set+0x62>
	net_idx = strtol(name, NULL, 16);
   10414:	2210      	movs	r2, #16
   10416:	4621      	mov	r1, r4
   10418:	f016 f9e7 	bl	267ea <strtol>
   1041c:	fa1f f980 	uxth.w	r9, r0
	sub = bt_mesh_cdb_subnet_get(net_idx);
   10420:	4648      	mov	r0, r9
   10422:	f002 fc1d 	bl	12c60 <bt_mesh_cdb_subnet_get>
   10426:	4605      	mov	r5, r0
	if (len_rd == 0) {
   10428:	f1b8 0f00 	cmp.w	r8, #0
   1042c:	d105      	bne.n	1043a <cdb_set+0x13a>
		if (!sub) {
   1042e:	2800      	cmp	r0, #0
   10430:	d097      	beq.n	10362 <cdb_set+0x62>
		bt_mesh_cdb_subnet_del(sub, false);
   10432:	4621      	mov	r1, r4
   10434:	f01b fd4e 	bl	2bed4 <bt_mesh_cdb_subnet_del>
		return 0;
   10438:	e788      	b.n	1034c <cdb_set+0x4c>
	err = mesh_x_set(read_cb, cb_arg, &key, sizeof(key));
   1043a:	2321      	movs	r3, #33	; 0x21
   1043c:	aa01      	add	r2, sp, #4
   1043e:	4639      	mov	r1, r7
   10440:	4630      	mov	r0, r6
   10442:	f01b fafe 	bl	2ba42 <mesh_x_set>
	if (err) {
   10446:	4604      	mov	r4, r0
   10448:	2800      	cmp	r0, #0
   1044a:	f47f af7f 	bne.w	1034c <cdb_set+0x4c>
	if (sub) {
   1044e:	b1ad      	cbz	r5, 1047c <cdb_set+0x17c>
	sub->kr_flag = key.kr_flag;
   10450:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10454:	f3c3 0300 	ubfx	r3, r3, #0, #1
   10458:	70ab      	strb	r3, [r5, #2]
	sub->kr_phase = key.kr_phase;
   1045a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1045e:	f3c3 0346 	ubfx	r3, r3, #1, #7
	memcpy(sub->keys[0].net_key, &key.val[0], 16);
   10462:	2210      	movs	r2, #16
   10464:	f10d 0105 	add.w	r1, sp, #5
	sub->kr_phase = key.kr_phase;
   10468:	70eb      	strb	r3, [r5, #3]
	memcpy(sub->keys[0].net_key, &key.val[0], 16);
   1046a:	1d28      	adds	r0, r5, #4
   1046c:	f016 fa99 	bl	269a2 <memcpy>
	memcpy(sub->keys[1].net_key, &key.val[1], 16);
   10470:	2210      	movs	r2, #16
   10472:	f10d 0115 	add.w	r1, sp, #21
	memcpy(app->keys[1].app_key, key.val[1], 16);
   10476:	f105 0014 	add.w	r0, r5, #20
   1047a:	e7bd      	b.n	103f8 <cdb_set+0xf8>
	sub = bt_mesh_cdb_subnet_alloc(net_idx);
   1047c:	4648      	mov	r0, r9
   1047e:	f002 fc0d 	bl	12c9c <bt_mesh_cdb_subnet_alloc>
	if (!sub) {
   10482:	4605      	mov	r5, r0
   10484:	2800      	cmp	r0, #0
   10486:	d1e3      	bne.n	10450 <cdb_set+0x150>
		return -ENOMEM;
   10488:	f06f 040b 	mvn.w	r4, #11
		return cdb_app_key_set(next, len_rd, read_cb, cb_arg);
   1048c:	e75e      	b.n	1034c <cdb_set+0x4c>
	if (!strncmp(name, "AppKey", len)) {
   1048e:	4925      	ldr	r1, [pc, #148]	; (10524 <cdb_set+0x224>)
   10490:	464a      	mov	r2, r9
   10492:	4628      	mov	r0, r5
   10494:	f016 fa5d 	bl	26952 <strncmp>
   10498:	4604      	mov	r4, r0
   1049a:	2800      	cmp	r0, #0
   1049c:	f47f af61 	bne.w	10362 <cdb_set+0x62>
		return cdb_app_key_set(next, len_rd, read_cb, cb_arg);
   104a0:	9800      	ldr	r0, [sp, #0]
	if (!name) {
   104a2:	2800      	cmp	r0, #0
   104a4:	f43f af5d 	beq.w	10362 <cdb_set+0x62>
	app_idx = strtol(name, NULL, 16);
   104a8:	2210      	movs	r2, #16
   104aa:	4621      	mov	r1, r4
   104ac:	f016 f99d 	bl	267ea <strtol>
   104b0:	fa1f f980 	uxth.w	r9, r0
	if (len_rd == 0) {
   104b4:	f1b8 0f00 	cmp.w	r8, #0
   104b8:	d109      	bne.n	104ce <cdb_set+0x1ce>
		app = bt_mesh_cdb_app_key_get(app_idx);
   104ba:	4648      	mov	r0, r9
   104bc:	f002 fd06 	bl	12ecc <bt_mesh_cdb_app_key_get>
		if (app) {
   104c0:	2800      	cmp	r0, #0
   104c2:	f43f af43 	beq.w	1034c <cdb_set+0x4c>
			bt_mesh_cdb_app_key_del(app, false);
   104c6:	4621      	mov	r1, r4
   104c8:	f01b fd24 	bl	2bf14 <bt_mesh_cdb_app_key_del>
   104cc:	e73e      	b.n	1034c <cdb_set+0x4c>
	err = mesh_x_set(read_cb, cb_arg, &key, sizeof(key));
   104ce:	2323      	movs	r3, #35	; 0x23
   104d0:	aa01      	add	r2, sp, #4
   104d2:	4639      	mov	r1, r7
   104d4:	4630      	mov	r0, r6
   104d6:	f01b fab4 	bl	2ba42 <mesh_x_set>
	if (err) {
   104da:	4604      	mov	r4, r0
   104dc:	2800      	cmp	r0, #0
   104de:	f47f af35 	bne.w	1034c <cdb_set+0x4c>
	app = bt_mesh_cdb_app_key_get(app_idx);
   104e2:	4648      	mov	r0, r9
   104e4:	f002 fcf2 	bl	12ecc <bt_mesh_cdb_app_key_get>
	if (!app) {
   104e8:	4605      	mov	r5, r0
   104ea:	b938      	cbnz	r0, 104fc <cdb_set+0x1fc>
		app = bt_mesh_cdb_app_key_alloc(key.net_idx, app_idx);
   104ec:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   104f0:	4649      	mov	r1, r9
   104f2:	f002 fcc3 	bl	12e7c <bt_mesh_cdb_app_key_alloc>
	if (!app) {
   104f6:	4605      	mov	r5, r0
   104f8:	2800      	cmp	r0, #0
   104fa:	d0c5      	beq.n	10488 <cdb_set+0x188>
	memcpy(app->keys[0].app_key, key.val[0], 16);
   104fc:	2210      	movs	r2, #16
   104fe:	f10d 0107 	add.w	r1, sp, #7
   10502:	1d28      	adds	r0, r5, #4
   10504:	f016 fa4d 	bl	269a2 <memcpy>
	memcpy(app->keys[1].app_key, key.val[1], 16);
   10508:	2210      	movs	r2, #16
   1050a:	f10d 0117 	add.w	r1, sp, #23
   1050e:	e7b2      	b.n	10476 <cdb_set+0x176>
   10510:	000336e7 	.word	0x000336e7
   10514:	20000530 	.word	0x20000530
   10518:	20000534 	.word	0x20000534
   1051c:	00033669 	.word	0x00033669
   10520:	0003366e 	.word	0x0003366e
   10524:	00033675 	.word	0x00033675

00010528 <cfg_set>:
{
   10528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1052a:	460c      	mov	r4, r1
   1052c:	4616      	mov	r6, r2
   1052e:	461f      	mov	r7, r3
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   10530:	f7ff fc44 	bl	fdbc <bt_mesh_cfg_get>
	if (!cfg) {
   10534:	b178      	cbz	r0, 10556 <cfg_set+0x2e>
	if (len_rd == 0) {
   10536:	4d09      	ldr	r5, [pc, #36]	; (1055c <cfg_set+0x34>)
   10538:	b914      	cbnz	r4, 10540 <cfg_set+0x18>
		stored_cfg.valid = false;
   1053a:	702c      	strb	r4, [r5, #0]
		return 0;
   1053c:	4620      	mov	r0, r4
}
   1053e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	err = mesh_x_set(read_cb, cb_arg, &stored_cfg.cfg,
   10540:	2307      	movs	r3, #7
   10542:	1c6a      	adds	r2, r5, #1
   10544:	4639      	mov	r1, r7
   10546:	4630      	mov	r0, r6
   10548:	f01b fa7b 	bl	2ba42 <mesh_x_set>
	if (err) {
   1054c:	2800      	cmp	r0, #0
   1054e:	d1f6      	bne.n	1053e <cfg_set+0x16>
	stored_cfg.valid = true;
   10550:	2301      	movs	r3, #1
   10552:	702b      	strb	r3, [r5, #0]
	return 0;
   10554:	e7f3      	b.n	1053e <cfg_set+0x16>
		return -ENOENT;
   10556:	f06f 0001 	mvn.w	r0, #1
   1055a:	e7f0      	b.n	1053e <cfg_set+0x16>
   1055c:	20009150 	.word	0x20009150

00010560 <net_set>:
{
   10560:	b510      	push	{r4, lr}
   10562:	460c      	mov	r4, r1
   10564:	b086      	sub	sp, #24
   10566:	4610      	mov	r0, r2
   10568:	4619      	mov	r1, r3
	if (len_rd == 0) {
   1056a:	b94c      	cbnz	r4, 10580 <net_set+0x20>
		bt_mesh_comp_unprovision();
   1056c:	f7fe fe84 	bl	f278 <bt_mesh_comp_unprovision>
		(void)memset(bt_mesh.dev_key, 0, sizeof(bt_mesh.dev_key));
   10570:	480c      	ldr	r0, [pc, #48]	; (105a4 <net_set+0x44>)
   10572:	2210      	movs	r2, #16
   10574:	4621      	mov	r1, r4
   10576:	f016 fa3f 	bl	269f8 <memset>
}
   1057a:	4620      	mov	r0, r4
   1057c:	b006      	add	sp, #24
   1057e:	bd10      	pop	{r4, pc}
	err = mesh_x_set(read_cb, cb_arg, &net, sizeof(net));
   10580:	2312      	movs	r3, #18
   10582:	aa01      	add	r2, sp, #4
   10584:	f01b fa5d 	bl	2ba42 <mesh_x_set>
	if (err) {
   10588:	4604      	mov	r4, r0
   1058a:	2800      	cmp	r0, #0
   1058c:	d1f5      	bne.n	1057a <net_set+0x1a>
	memcpy(bt_mesh.dev_key, net.dev_key, sizeof(bt_mesh.dev_key));
   1058e:	2210      	movs	r2, #16
   10590:	f10d 0106 	add.w	r1, sp, #6
   10594:	4803      	ldr	r0, [pc, #12]	; (105a4 <net_set+0x44>)
   10596:	f016 fa04 	bl	269a2 <memcpy>
	bt_mesh_comp_provision(net.primary_addr);
   1059a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1059e:	f7fe fe55 	bl	f24c <bt_mesh_comp_provision>
	return 0;
   105a2:	e7ea      	b.n	1057a <net_set+0x1a>
   105a4:	20001600 	.word	0x20001600

000105a8 <store_pending_mod>:
{
   105a8:	b570      	push	{r4, r5, r6, lr}
	if (!mod->flags) {
   105aa:	88c3      	ldrh	r3, [r0, #6]
{
   105ac:	b08a      	sub	sp, #40	; 0x28
   105ae:	4604      	mov	r4, r0
   105b0:	4616      	mov	r6, r2
	if (!mod->flags) {
   105b2:	2b00      	cmp	r3, #0
   105b4:	d04c      	beq.n	10650 <store_pending_mod+0xa8>
	if (mod->flags & BT_MESH_MOD_BIND_PENDING) {
   105b6:	07d8      	lsls	r0, r3, #31
   105b8:	d51c      	bpl.n	105f4 <store_pending_mod+0x4c>
		mod->flags &= ~BT_MESH_MOD_BIND_PENDING;
   105ba:	f023 0301 	bic.w	r3, r3, #1
   105be:	80e3      	strh	r3, [r4, #6]
		if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   105c0:	89a3      	ldrh	r3, [r4, #12]
   105c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   105c6:	4293      	cmp	r3, r2
			keys[count++] = mod->keys[i];
   105c8:	bf18      	it	ne
   105ca:	f8ad 300c 	strhne.w	r3, [sp, #12]
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   105ce:	f04f 0314 	mov.w	r3, #20
			keys[count++] = mod->keys[i];
   105d2:	bf14      	ite	ne
   105d4:	2501      	movne	r5, #1
   105d6:	2500      	moveq	r5, #0
	encode_mod_path(mod, vnd, "bind", path, sizeof(path));
   105d8:	9300      	str	r3, [sp, #0]
   105da:	4a31      	ldr	r2, [pc, #196]	; (106a0 <store_pending_mod+0xf8>)
   105dc:	446b      	add	r3, sp
   105de:	4631      	mov	r1, r6
   105e0:	4620      	mov	r0, r4
   105e2:	f7ff fccd 	bl	ff80 <encode_mod_path>
	if (count) {
   105e6:	2d00      	cmp	r5, #0
   105e8:	d034      	beq.n	10654 <store_pending_mod+0xac>
		err = settings_save_one(path, keys, count * sizeof(keys[0]));
   105ea:	2202      	movs	r2, #2
   105ec:	a903      	add	r1, sp, #12
   105ee:	a805      	add	r0, sp, #20
   105f0:	f7f4 fe96 	bl	5320 <settings_save_one>
	if (mod->flags & BT_MESH_MOD_SUB_PENDING) {
   105f4:	88e3      	ldrh	r3, [r4, #6]
   105f6:	0799      	lsls	r1, r3, #30
   105f8:	d515      	bpl.n	10626 <store_pending_mod+0x7e>
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   105fa:	89e5      	ldrh	r5, [r4, #14]
		mod->flags &= ~BT_MESH_MOD_SUB_PENDING;
   105fc:	f023 0302 	bic.w	r3, r3, #2
   10600:	80e3      	strh	r3, [r4, #6]
		if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   10602:	b115      	cbz	r5, 1060a <store_pending_mod+0x62>
			groups[count++] = mod->groups[i];
   10604:	f8ad 500c 	strh.w	r5, [sp, #12]
   10608:	2501      	movs	r5, #1
	encode_mod_path(mod, vnd, "sub", path, sizeof(path));
   1060a:	2314      	movs	r3, #20
   1060c:	9300      	str	r3, [sp, #0]
   1060e:	4a25      	ldr	r2, [pc, #148]	; (106a4 <store_pending_mod+0xfc>)
   10610:	446b      	add	r3, sp
   10612:	4631      	mov	r1, r6
   10614:	4620      	mov	r0, r4
   10616:	f7ff fcb3 	bl	ff80 <encode_mod_path>
	if (count) {
   1061a:	b1fd      	cbz	r5, 1065c <store_pending_mod+0xb4>
		err = settings_save_one(path, groups,
   1061c:	2202      	movs	r2, #2
   1061e:	a903      	add	r1, sp, #12
   10620:	a805      	add	r0, sp, #20
   10622:	f7f4 fe7d 	bl	5320 <settings_save_one>
	if (mod->flags & BT_MESH_MOD_PUB_PENDING) {
   10626:	88e3      	ldrh	r3, [r4, #6]
   10628:	075a      	lsls	r2, r3, #29
   1062a:	d511      	bpl.n	10650 <store_pending_mod+0xa8>
		mod->flags &= ~BT_MESH_MOD_PUB_PENDING;
   1062c:	f023 0304 	bic.w	r3, r3, #4
   10630:	80e3      	strh	r3, [r4, #6]
	encode_mod_path(mod, vnd, "pub", path, sizeof(path));
   10632:	2314      	movs	r3, #20
   10634:	9300      	str	r3, [sp, #0]
   10636:	4a1c      	ldr	r2, [pc, #112]	; (106a8 <store_pending_mod+0x100>)
   10638:	446b      	add	r3, sp
   1063a:	4631      	mov	r1, r6
   1063c:	4620      	mov	r0, r4
   1063e:	f7ff fc9f 	bl	ff80 <encode_mod_path>
	if (!mod->pub || mod->pub->addr == BT_MESH_ADDR_UNASSIGNED) {
   10642:	68a3      	ldr	r3, [r4, #8]
   10644:	b10b      	cbz	r3, 1064a <store_pending_mod+0xa2>
   10646:	889a      	ldrh	r2, [r3, #4]
   10648:	b962      	cbnz	r2, 10664 <store_pending_mod+0xbc>
		err = settings_delete(path);
   1064a:	a805      	add	r0, sp, #20
   1064c:	f014 fca7 	bl	24f9e <settings_delete>
}
   10650:	b00a      	add	sp, #40	; 0x28
   10652:	bd70      	pop	{r4, r5, r6, pc}
		err = settings_delete(path);
   10654:	a805      	add	r0, sp, #20
   10656:	f014 fca2 	bl	24f9e <settings_delete>
}
   1065a:	e7cb      	b.n	105f4 <store_pending_mod+0x4c>
		err = settings_delete(path);
   1065c:	a805      	add	r0, sp, #20
   1065e:	f014 fc9e 	bl	24f9e <settings_delete>
}
   10662:	e7e0      	b.n	10626 <store_pending_mod+0x7e>
		pub.addr = mod->pub->addr;
   10664:	f8ad 200c 	strh.w	r2, [sp, #12]
		pub.key = mod->pub->key;
   10668:	88da      	ldrh	r2, [r3, #6]
   1066a:	f3c2 020b 	ubfx	r2, r2, #0, #12
   1066e:	f8ad 200e 	strh.w	r2, [sp, #14]
		pub.ttl = mod->pub->ttl;
   10672:	6899      	ldr	r1, [r3, #8]
   10674:	9a04      	ldr	r2, [sp, #16]
   10676:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
   1067a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
   1067e:	430a      	orrs	r2, r1
   10680:	9204      	str	r2, [sp, #16]
		pub.cred = mod->pub->cred;
   10682:	79db      	ldrb	r3, [r3, #7]
   10684:	f89d 2013 	ldrb.w	r2, [sp, #19]
   10688:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1068c:	f363 1204 	bfi	r2, r3, #4, #1
   10690:	f88d 2013 	strb.w	r2, [sp, #19]
		err = settings_save_one(path, &pub, sizeof(pub));
   10694:	a903      	add	r1, sp, #12
   10696:	2208      	movs	r2, #8
   10698:	a805      	add	r0, sp, #20
   1069a:	f7f4 fe41 	bl	5320 <settings_save_one>
}
   1069e:	e7d7      	b.n	10650 <store_pending_mod+0xa8>
   106a0:	00033657 	.word	0x00033657
   106a4:	0003365c 	.word	0x0003365c
   106a8:	00033660 	.word	0x00033660

000106ac <store_cdb_node>:
{
   106ac:	b510      	push	{r4, lr}
   106ae:	b092      	sub	sp, #72	; 0x48
	val.net_idx = node->net_idx;
   106b0:	8a43      	ldrh	r3, [r0, #18]
   106b2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	val.num_elem = node->num_elem;
   106b6:	7d03      	ldrb	r3, [r0, #20]
   106b8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
{
   106bc:	4604      	mov	r4, r0
	val.flags = 0;
   106be:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   106c0:	3028      	adds	r0, #40	; 0x28
   106c2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   106c6:	f01b fa8d 	bl	2bbe4 <atomic_get>
	if (atomic_test_bit(node->flags, BT_MESH_CDB_NODE_CONFIGURED)) {
   106ca:	07c3      	lsls	r3, r0, #31
		val.flags |= F_NODE_CONFIGURED;
   106cc:	bf48      	it	mi
   106ce:	f89d 3027 	ldrbmi.w	r3, [sp, #39]	; 0x27
	memcpy(val.uuid, node->uuid, 16);
   106d2:	4621      	mov	r1, r4
		val.flags |= F_NODE_CONFIGURED;
   106d4:	bf48      	it	mi
   106d6:	f043 0301 	orrmi.w	r3, r3, #1
	memcpy(val.uuid, node->uuid, 16);
   106da:	f04f 0210 	mov.w	r2, #16
   106de:	a80a      	add	r0, sp, #40	; 0x28
		val.flags |= F_NODE_CONFIGURED;
   106e0:	bf48      	it	mi
   106e2:	f88d 3027 	strbmi.w	r3, [sp, #39]	; 0x27
	memcpy(val.uuid, node->uuid, 16);
   106e6:	f016 f95c 	bl	269a2 <memcpy>
	memcpy(val.dev_key, node->dev_key, 16);
   106ea:	f104 0115 	add.w	r1, r4, #21
   106ee:	2210      	movs	r2, #16
   106f0:	a80e      	add	r0, sp, #56	; 0x38
   106f2:	f016 f956 	bl	269a2 <memcpy>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Node/%x", node->addr);
   106f6:	8a23      	ldrh	r3, [r4, #16]
   106f8:	4a06      	ldr	r2, [pc, #24]	; (10714 <store_cdb_node+0x68>)
   106fa:	211e      	movs	r1, #30
   106fc:	a801      	add	r0, sp, #4
   106fe:	f013 fee6 	bl	244ce <snprintk>
	err = settings_save_one(path, &val, sizeof(val));
   10702:	2224      	movs	r2, #36	; 0x24
   10704:	eb0d 0102 	add.w	r1, sp, r2
   10708:	a801      	add	r0, sp, #4
   1070a:	f7f4 fe09 	bl	5320 <settings_save_one>
}
   1070e:	b012      	add	sp, #72	; 0x48
   10710:	bd10      	pop	{r4, pc}
   10712:	bf00      	nop
   10714:	0003367c 	.word	0x0003367c

00010718 <iv_set>:
{
   10718:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1071a:	460c      	mov	r4, r1
   1071c:	4610      	mov	r0, r2
   1071e:	4619      	mov	r1, r3
	if (len_rd == 0) {
   10720:	b98c      	cbnz	r4, 10746 <iv_set+0x2e>
		bt_mesh.iv_index = 0U;
   10722:	4b1d      	ldr	r3, [pc, #116]	; (10798 <iv_set+0x80>)
   10724:	f843 4b08 	str.w	r4, [r3], #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10728:	f3bf 8f5b 	dmb	ish
   1072c:	e853 2f00 	ldrex	r2, [r3]
   10730:	f022 0204 	bic.w	r2, r2, #4
   10734:	e843 2100 	strex	r1, r2, [r3]
   10738:	2900      	cmp	r1, #0
   1073a:	d1f7      	bne.n	1072c <iv_set+0x14>
   1073c:	f3bf 8f5b 	dmb	ish
}
   10740:	4620      	mov	r0, r4
   10742:	b003      	add	sp, #12
   10744:	bd30      	pop	{r4, r5, pc}
	err = mesh_x_set(read_cb, cb_arg, &iv, sizeof(iv));
   10746:	2305      	movs	r3, #5
   10748:	466a      	mov	r2, sp
   1074a:	f01b f97a 	bl	2ba42 <mesh_x_set>
	if (err) {
   1074e:	4604      	mov	r4, r0
   10750:	2800      	cmp	r0, #0
   10752:	d1f5      	bne.n	10740 <iv_set+0x28>
	bt_mesh.iv_index = iv.iv_index;
   10754:	4d10      	ldr	r5, [pc, #64]	; (10798 <iv_set+0x80>)
   10756:	9b00      	ldr	r3, [sp, #0]
   10758:	602b      	str	r3, [r5, #0]
	atomic_set_bit_to(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS, iv.iv_update);
   1075a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	if (val) {
   1075e:	f013 0f01 	tst.w	r3, #1
   10762:	f105 0008 	add.w	r0, r5, #8
   10766:	d009      	beq.n	1077c <iv_set+0x64>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10768:	2104      	movs	r1, #4
   1076a:	f01b f979 	bl	2ba60 <atomic_or>
	bt_mesh.ivu_duration = iv.iv_duration;
   1076e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   10772:	f3c3 0346 	ubfx	r3, r3, #1, #7
   10776:	f885 3020 	strb.w	r3, [r5, #32]
	return 0;
   1077a:	e7e1      	b.n	10740 <iv_set+0x28>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1077c:	f3bf 8f5b 	dmb	ish
   10780:	e850 3f00 	ldrex	r3, [r0]
   10784:	f023 0304 	bic.w	r3, r3, #4
   10788:	e840 3200 	strex	r2, r3, [r0]
   1078c:	2a00      	cmp	r2, #0
   1078e:	d1f7      	bne.n	10780 <iv_set+0x68>
   10790:	f3bf 8f5b 	dmb	ish
   10794:	e7eb      	b.n	1076e <iv_set+0x56>
   10796:	bf00      	nop
   10798:	200015a8 	.word	0x200015a8

0001079c <schedule_cdb_store>:
{
   1079c:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1079e:	2101      	movs	r1, #1
   107a0:	4081      	lsls	r1, r0
   107a2:	4805      	ldr	r0, [pc, #20]	; (107b8 <schedule_cdb_store+0x1c>)
   107a4:	f01b f95c 	bl	2ba60 <atomic_or>
}
   107a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107ac:	4903      	ldr	r1, [pc, #12]	; (107bc <schedule_cdb_store+0x20>)
   107ae:	4804      	ldr	r0, [pc, #16]	; (107c0 <schedule_cdb_store+0x24>)
   107b0:	2200      	movs	r2, #0
   107b2:	2300      	movs	r3, #0
   107b4:	f013 bada 	b.w	23d6c <k_delayed_work_submit_to_queue>
   107b8:	20000534 	.word	0x20000534
   107bc:	20001880 	.word	0x20001880
   107c0:	20001fd8 	.word	0x20001fd8

000107c4 <schedule_store>:
   107c4:	2101      	movs	r1, #1
   107c6:	4081      	lsls	r1, r0
{
   107c8:	b570      	push	{r4, r5, r6, lr}
   107ca:	481e      	ldr	r0, [pc, #120]	; (10844 <schedule_store+0x80>)
   107cc:	f01b f948 	bl	2ba60 <atomic_or>
	if (atomic_get(bt_mesh.flags) & NO_WAIT_PENDING_BITS) {
   107d0:	481c      	ldr	r0, [pc, #112]	; (10844 <schedule_store+0x80>)
   107d2:	f01b fa07 	bl	2bbe4 <atomic_get>
   107d6:	f410 6fe0 	tst.w	r0, #1792	; 0x700
   107da:	d12d      	bne.n	10838 <schedule_store+0x74>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   107dc:	4819      	ldr	r0, [pc, #100]	; (10844 <schedule_store+0x80>)
   107de:	f01b fa01 	bl	2bbe4 <atomic_get>
	} else if (atomic_test_bit(bt_mesh.flags, BT_MESH_RPL_PENDING) &&
   107e2:	0643      	lsls	r3, r0, #25
   107e4:	d505      	bpl.n	107f2 <schedule_store+0x2e>
		   (!(atomic_get(bt_mesh.flags) & GENERIC_PENDING_BITS) ||
   107e6:	4817      	ldr	r0, [pc, #92]	; (10844 <schedule_store+0x80>)
   107e8:	f01b f9fc 	bl	2bbe4 <atomic_get>
	} else if (atomic_test_bit(bt_mesh.flags, BT_MESH_RPL_PENDING) &&
   107ec:	f410 5f62 	tst.w	r0, #14464	; 0x3880
   107f0:	d024      	beq.n	1083c <schedule_store+0x78>
		timeout_ms = CONFIG_BT_MESH_STORE_TIMEOUT * MSEC_PER_SEC;
   107f2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   107f6:	4814      	ldr	r0, [pc, #80]	; (10848 <schedule_store+0x84>)
   107f8:	f01c ff07 	bl	2d60a <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   107fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10800:	fba0 0103 	umull	r0, r1, r0, r3
   10804:	0bc3      	lsrs	r3, r0, #15
	if ((remaining > 0) && remaining < timeout_ms) {
   10806:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   1080a:	d001      	beq.n	10810 <schedule_store+0x4c>
   1080c:	429c      	cmp	r4, r3
   1080e:	dc17      	bgt.n	10840 <schedule_store+0x7c>
			return (t * to_hz + off) / from_hz;
   10810:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   10814:	f240 30e7 	movw	r0, #999	; 0x3e7
   10818:	2100      	movs	r1, #0
   1081a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1081e:	2300      	movs	r3, #0
   10820:	fbc5 0104 	smlal	r0, r1, r5, r4
   10824:	f7ef fcbc 	bl	1a0 <__aeabi_uldivmod>
}
   10828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1082c:	4602      	mov	r2, r0
   1082e:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10830:	4806      	ldr	r0, [pc, #24]	; (1084c <schedule_store+0x88>)
   10832:	4907      	ldr	r1, [pc, #28]	; (10850 <schedule_store+0x8c>)
   10834:	f013 ba9a 	b.w	23d6c <k_delayed_work_submit_to_queue>
		timeout_ms = 0;
   10838:	2400      	movs	r4, #0
   1083a:	e7dc      	b.n	107f6 <schedule_store+0x32>
		timeout_ms = CONFIG_BT_MESH_RPL_STORE_TIMEOUT * MSEC_PER_SEC;
   1083c:	4c05      	ldr	r4, [pc, #20]	; (10854 <schedule_store+0x90>)
   1083e:	e7da      	b.n	107f6 <schedule_store+0x32>
}
   10840:	bd70      	pop	{r4, r5, r6, pc}
   10842:	bf00      	nop
   10844:	200015b0 	.word	0x200015b0
   10848:	20001890 	.word	0x20001890
   1084c:	20001fd8 	.word	0x20001fd8
   10850:	20001880 	.word	0x20001880
   10854:	0001d4c0 	.word	0x0001d4c0

00010858 <mesh_commit>:
{
   10858:	b510      	push	{r4, lr}
	if (!bt_mesh_subnet_next(NULL)) {
   1085a:	2000      	movs	r0, #0
   1085c:	f7fd f8b8 	bl	d9d0 <bt_mesh_subnet_next>
   10860:	2800      	cmp	r0, #0
   10862:	d03e      	beq.n	108e2 <mesh_commit+0x8a>
	if (bt_mesh.ivu_duration < BT_MESH_IVU_MIN_HOURS) {
   10864:	4920      	ldr	r1, [pc, #128]	; (108e8 <mesh_commit+0x90>)
   10866:	f891 3020 	ldrb.w	r3, [r1, #32]
   1086a:	2b5f      	cmp	r3, #95	; 0x5f
   1086c:	d805      	bhi.n	1087a <mesh_commit+0x22>
   1086e:	4a1f      	ldr	r2, [pc, #124]	; (108ec <mesh_commit+0x94>)
   10870:	481f      	ldr	r0, [pc, #124]	; (108f0 <mesh_commit+0x98>)
   10872:	2300      	movs	r3, #0
   10874:	3128      	adds	r1, #40	; 0x28
   10876:	f013 fa79 	bl	23d6c <k_delayed_work_submit_to_queue>
	bt_mesh_model_foreach(commit_mod, NULL);
   1087a:	481e      	ldr	r0, [pc, #120]	; (108f4 <mesh_commit+0x9c>)
   1087c:	2100      	movs	r1, #0
   1087e:	f7fe fc0f 	bl	f0a0 <bt_mesh_model_foreach>
	hb_pub = bt_mesh_hb_pub_get();
   10882:	f7ff fa95 	bl	fdb0 <bt_mesh_hb_pub_get>
	if (hb_pub && hb_pub->dst != BT_MESH_ADDR_UNASSIGNED &&
   10886:	4604      	mov	r4, r0
   10888:	b180      	cbz	r0, 108ac <mesh_commit+0x54>
   1088a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1088c:	b173      	cbz	r3, 108ac <mesh_commit+0x54>
   1088e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   10890:	b163      	cbz	r3, 108ac <mesh_commit+0x54>
	    hb_pub->count && hb_pub->period) {
   10892:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
   10896:	b14b      	cbz	r3, 108ac <mesh_commit+0x54>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10898:	2101      	movs	r1, #1
   1089a:	3008      	adds	r0, #8
   1089c:	f01b f8e0 	bl	2ba60 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   108a0:	07c3      	lsls	r3, r0, #31
   108a2:	d403      	bmi.n	108ac <mesh_commit+0x54>
		k_queue_append(&work_q->queue, work);
   108a4:	4812      	ldr	r0, [pc, #72]	; (108f0 <mesh_commit+0x98>)
   108a6:	4621      	mov	r1, r4
   108a8:	f01c fcd7 	bl	2d25a <k_queue_append>
	cfg = bt_mesh_cfg_get();
   108ac:	f7ff fa86 	bl	fdbc <bt_mesh_cfg_get>
	if (cfg && stored_cfg.valid) {
   108b0:	b180      	cbz	r0, 108d4 <mesh_commit+0x7c>
   108b2:	4b11      	ldr	r3, [pc, #68]	; (108f8 <mesh_commit+0xa0>)
   108b4:	781a      	ldrb	r2, [r3, #0]
   108b6:	b16a      	cbz	r2, 108d4 <mesh_commit+0x7c>
		cfg->net_transmit = stored_cfg.cfg.net_transmit;
   108b8:	785a      	ldrb	r2, [r3, #1]
   108ba:	7102      	strb	r2, [r0, #4]
		cfg->relay = stored_cfg.cfg.relay;
   108bc:	789a      	ldrb	r2, [r3, #2]
   108be:	7142      	strb	r2, [r0, #5]
		cfg->relay_retransmit = stored_cfg.cfg.relay_retransmit;
   108c0:	78da      	ldrb	r2, [r3, #3]
   108c2:	7182      	strb	r2, [r0, #6]
		cfg->beacon = stored_cfg.cfg.beacon;
   108c4:	791a      	ldrb	r2, [r3, #4]
   108c6:	71c2      	strb	r2, [r0, #7]
		cfg->gatt_proxy = stored_cfg.cfg.gatt_proxy;
   108c8:	795a      	ldrb	r2, [r3, #5]
   108ca:	7202      	strb	r2, [r0, #8]
		cfg->frnd = stored_cfg.cfg.frnd;
   108cc:	799a      	ldrb	r2, [r3, #6]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
   108ce:	79db      	ldrb	r3, [r3, #7]
		cfg->frnd = stored_cfg.cfg.frnd;
   108d0:	7242      	strb	r2, [r0, #9]
		cfg->default_ttl = stored_cfg.cfg.default_ttl;
   108d2:	7283      	strb	r3, [r0, #10]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   108d4:	4809      	ldr	r0, [pc, #36]	; (108fc <mesh_commit+0xa4>)
   108d6:	2101      	movs	r1, #1
   108d8:	f01b f8c2 	bl	2ba60 <atomic_or>
	bt_mesh_start(NULL);
   108dc:	2000      	movs	r0, #0
   108de:	f7fb fed7 	bl	c690 <bt_mesh_start>
}
   108e2:	2000      	movs	r0, #0
   108e4:	bd10      	pop	{r4, pc}
   108e6:	bf00      	nop
   108e8:	200015a8 	.word	0x200015a8
   108ec:	a8c00000 	.word	0xa8c00000
   108f0:	20001fd8 	.word	0x20001fd8
   108f4:	0000ff35 	.word	0x0000ff35
   108f8:	20009150 	.word	0x20009150
   108fc:	200015b0 	.word	0x200015b0

00010900 <store_pending>:
{
   10900:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
   10904:	487f      	ldr	r0, [pc, #508]	; (10b04 <store_pending+0x204>)
   10906:	4e7f      	ldr	r6, [pc, #508]	; (10b04 <store_pending+0x204>)
{
   10908:	b08f      	sub	sp, #60	; 0x3c
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_RPL_PENDING)) {
   1090a:	2106      	movs	r1, #6
   1090c:	f01b f986 	bl	2bc1c <atomic_test_and_clear_bit>
   10910:	b150      	cbz	r0, 10928 <store_pending+0x28>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10912:	4630      	mov	r0, r6
   10914:	f01b f966 	bl	2bbe4 <atomic_get>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   10918:	f010 0101 	ands.w	r1, r0, #1
			bt_mesh_rpl_foreach(store_pending_rpl, NULL);
   1091c:	bf16      	itet	ne
   1091e:	487a      	ldrne	r0, [pc, #488]	; (10b08 <store_pending+0x208>)
			bt_mesh_rpl_foreach(clear_rpl, NULL);
   10920:	487a      	ldreq	r0, [pc, #488]	; (10b0c <store_pending+0x20c>)
			bt_mesh_rpl_foreach(store_pending_rpl, NULL);
   10922:	2100      	movne	r1, #0
			bt_mesh_rpl_foreach(clear_rpl, NULL);
   10924:	f7fe fa32 	bl	ed8c <bt_mesh_rpl_foreach>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_KEYS_PENDING)) {
   10928:	4876      	ldr	r0, [pc, #472]	; (10b04 <store_pending+0x204>)
   1092a:	2107      	movs	r1, #7
   1092c:	f01b f976 	bl	2bc1c <atomic_test_and_clear_bit>
   10930:	2800      	cmp	r0, #0
   10932:	f040 8086 	bne.w	10a42 <store_pending+0x142>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_NET_PENDING)) {
   10936:	4873      	ldr	r0, [pc, #460]	; (10b04 <store_pending+0x204>)
   10938:	2108      	movs	r1, #8
   1093a:	f01b f96f 	bl	2bc1c <atomic_test_and_clear_bit>
   1093e:	b1a0      	cbz	r0, 1096a <store_pending+0x6a>
   10940:	4870      	ldr	r0, [pc, #448]	; (10b04 <store_pending+0x204>)
   10942:	f01b f94f 	bl	2bbe4 <atomic_get>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   10946:	07c3      	lsls	r3, r0, #31
   10948:	f140 80ad 	bpl.w	10aa6 <store_pending+0x1a6>
	net.primary_addr = bt_mesh_primary_addr();
   1094c:	f7fe fc9a 	bl	f284 <bt_mesh_primary_addr>
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   10950:	496f      	ldr	r1, [pc, #444]	; (10b10 <store_pending+0x210>)
	net.primary_addr = bt_mesh_primary_addr();
   10952:	f8ad 0018 	strh.w	r0, [sp, #24]
	memcpy(net.dev_key, bt_mesh.dev_key, 16);
   10956:	2210      	movs	r2, #16
   10958:	f10d 001a 	add.w	r0, sp, #26
   1095c:	f016 f821 	bl	269a2 <memcpy>
	err = settings_save_one("bt/mesh/Net", &net, sizeof(net));
   10960:	486c      	ldr	r0, [pc, #432]	; (10b14 <store_pending+0x214>)
   10962:	2212      	movs	r2, #18
   10964:	a906      	add	r1, sp, #24
   10966:	f7f4 fcdb 	bl	5320 <settings_save_one>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_IV_PENDING)) {
   1096a:	4866      	ldr	r0, [pc, #408]	; (10b04 <store_pending+0x204>)
   1096c:	2109      	movs	r1, #9
   1096e:	f01b f955 	bl	2bc1c <atomic_test_and_clear_bit>
   10972:	b1d0      	cbz	r0, 109aa <store_pending+0xaa>
   10974:	4863      	ldr	r0, [pc, #396]	; (10b04 <store_pending+0x204>)
   10976:	f01b f935 	bl	2bbe4 <atomic_get>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   1097a:	07c7      	lsls	r7, r0, #31
   1097c:	f140 8097 	bpl.w	10aae <store_pending+0x1ae>
	iv.iv_index = bt_mesh.iv_index;
   10980:	4b65      	ldr	r3, [pc, #404]	; (10b18 <store_pending+0x218>)
   10982:	f856 2c08 	ldr.w	r2, [r6, #-8]
   10986:	9206      	str	r2, [sp, #24]
   10988:	f103 0008 	add.w	r0, r3, #8
   1098c:	f01b f92a 	bl	2bbe4 <atomic_get>
	iv.iv_update = atomic_test_bit(bt_mesh.flags, BT_MESH_IVU_IN_PROGRESS);
   10990:	f893 3020 	ldrb.w	r3, [r3, #32]
   10994:	f3c0 0080 	ubfx	r0, r0, #2, #1
   10998:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
   1099c:	f88d 001c 	strb.w	r0, [sp, #28]
	err = settings_save_one("bt/mesh/IV", &iv, sizeof(iv));
   109a0:	2205      	movs	r2, #5
   109a2:	485e      	ldr	r0, [pc, #376]	; (10b1c <store_pending+0x21c>)
   109a4:	a906      	add	r1, sp, #24
   109a6:	f7f4 fcbb 	bl	5320 <settings_save_one>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_SEQ_PENDING)) {
   109aa:	4856      	ldr	r0, [pc, #344]	; (10b04 <store_pending+0x204>)
   109ac:	210a      	movs	r1, #10
   109ae:	f01b f935 	bl	2bc1c <atomic_test_and_clear_bit>
   109b2:	b158      	cbz	r0, 109cc <store_pending+0xcc>
	sys_put_le24(bt_mesh.seq, seq.val);
   109b4:	4b58      	ldr	r3, [pc, #352]	; (10b18 <store_pending+0x218>)
	err = settings_save_one("bt/mesh/Seq", &seq, sizeof(seq));
   109b6:	485a      	ldr	r0, [pc, #360]	; (10b20 <store_pending+0x220>)
	dst[0] = val;
   109b8:	889a      	ldrh	r2, [r3, #4]
   109ba:	f8ad 2018 	strh.w	r2, [sp, #24]
	dst[2] = val >> 16;
   109be:	88db      	ldrh	r3, [r3, #6]
   109c0:	f88d 301a 	strb.w	r3, [sp, #26]
   109c4:	2203      	movs	r2, #3
   109c6:	a906      	add	r1, sp, #24
   109c8:	f7f4 fcaa 	bl	5320 <settings_save_one>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_HB_PUB_PENDING)) {
   109cc:	484d      	ldr	r0, [pc, #308]	; (10b04 <store_pending+0x204>)
   109ce:	210b      	movs	r1, #11
   109d0:	f01b f924 	bl	2bc1c <atomic_test_and_clear_bit>
   109d4:	b140      	cbz	r0, 109e8 <store_pending+0xe8>
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   109d6:	f7ff f9eb 	bl	fdb0 <bt_mesh_hb_pub_get>
	if (!pub) {
   109da:	b128      	cbz	r0, 109e8 <store_pending+0xe8>
	if (pub->dst == BT_MESH_ADDR_UNASSIGNED) {
   109dc:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   109de:	2900      	cmp	r1, #0
   109e0:	d169      	bne.n	10ab6 <store_pending+0x1b6>
		err = settings_delete("bt/mesh/HBPub");
   109e2:	4850      	ldr	r0, [pc, #320]	; (10b24 <store_pending+0x224>)
   109e4:	f014 fadb 	bl	24f9e <settings_delete>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_CFG_PENDING)) {
   109e8:	4846      	ldr	r0, [pc, #280]	; (10b04 <store_pending+0x204>)
   109ea:	210c      	movs	r1, #12
   109ec:	f01b f916 	bl	2bc1c <atomic_test_and_clear_bit>
   109f0:	b1a0      	cbz	r0, 10a1c <store_pending+0x11c>
   109f2:	4844      	ldr	r0, [pc, #272]	; (10b04 <store_pending+0x204>)
   109f4:	f01b f8f6 	bl	2bbe4 <atomic_get>
		if (atomic_test_bit(bt_mesh.flags, BT_MESH_VALID)) {
   109f8:	07c4      	lsls	r4, r0, #31
   109fa:	d57e      	bpl.n	10afa <store_pending+0x1fa>
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   109fc:	f7ff f9de 	bl	fdbc <bt_mesh_cfg_get>
	if (!cfg) {
   10a00:	b160      	cbz	r0, 10a1c <store_pending+0x11c>
	val.net_transmit = cfg->net_transmit;
   10a02:	6843      	ldr	r3, [r0, #4]
   10a04:	9306      	str	r3, [sp, #24]
	val.gatt_proxy = cfg->gatt_proxy;
   10a06:	8902      	ldrh	r2, [r0, #8]
	val.default_ttl = cfg->default_ttl;
   10a08:	7a83      	ldrb	r3, [r0, #10]
	val.gatt_proxy = cfg->gatt_proxy;
   10a0a:	f8ad 201c 	strh.w	r2, [sp, #28]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   10a0e:	4846      	ldr	r0, [pc, #280]	; (10b28 <store_pending+0x228>)
	val.default_ttl = cfg->default_ttl;
   10a10:	f88d 301e 	strb.w	r3, [sp, #30]
	err = settings_save_one("bt/mesh/Cfg", &val, sizeof(val));
   10a14:	2207      	movs	r2, #7
   10a16:	a906      	add	r1, sp, #24
   10a18:	f7f4 fc82 	bl	5320 <settings_save_one>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_MOD_PENDING)) {
   10a1c:	4839      	ldr	r0, [pc, #228]	; (10b04 <store_pending+0x204>)
   10a1e:	210d      	movs	r1, #13
   10a20:	f01b f8fc 	bl	2bc1c <atomic_test_and_clear_bit>
   10a24:	b118      	cbz	r0, 10a2e <store_pending+0x12e>
		bt_mesh_model_foreach(store_pending_mod, NULL);
   10a26:	4841      	ldr	r0, [pc, #260]	; (10b2c <store_pending+0x22c>)
   10a28:	2100      	movs	r1, #0
   10a2a:	f7fe fb39 	bl	f0a0 <bt_mesh_model_foreach>
	if (atomic_test_and_clear_bit(bt_mesh.flags, BT_MESH_VA_PENDING)) {
   10a2e:	4835      	ldr	r0, [pc, #212]	; (10b04 <store_pending+0x204>)
   10a30:	210e      	movs	r1, #14
   10a32:	f01b f8f3 	bl	2bc1c <atomic_test_and_clear_bit>
   10a36:	2800      	cmp	r0, #0
   10a38:	f000 809f 	beq.w	10b7a <store_pending+0x27a>
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   10a3c:	4e3c      	ldr	r6, [pc, #240]	; (10b30 <store_pending+0x230>)
   10a3e:	2500      	movs	r5, #0
   10a40:	e095      	b.n	10b6e <store_pending+0x26e>
		if (!update->valid) {
   10a42:	4d3c      	ldr	r5, [pc, #240]	; (10b34 <store_pending+0x234>)
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   10a44:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 10b3c <store_pending+0x23c>
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   10a48:	2400      	movs	r4, #0
   10a4a:	462f      	mov	r7, r5
		if (!update->valid) {
   10a4c:	eb05 0344 	add.w	r3, r5, r4, lsl #1
   10a50:	ea4f 0944 	mov.w	r9, r4, lsl #1
   10a54:	785a      	ldrb	r2, [r3, #1]
   10a56:	06d1      	lsls	r1, r2, #27
   10a58:	d516      	bpl.n	10a88 <store_pending+0x188>
		if (update->clear) {
   10a5a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   10a5e:	f002 0120 	and.w	r1, r2, #32
   10a62:	0652      	lsls	r2, r2, #25
   10a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10a68:	d515      	bpl.n	10a96 <store_pending+0x196>
			if (update->app_key) {
   10a6a:	b191      	cbz	r1, 10a92 <store_pending+0x192>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   10a6c:	4a32      	ldr	r2, [pc, #200]	; (10b38 <store_pending+0x238>)
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   10a6e:	2114      	movs	r1, #20
   10a70:	a806      	add	r0, sp, #24
   10a72:	f013 fd2c 	bl	244ce <snprintk>
	err = settings_delete(path);
   10a76:	a806      	add	r0, sp, #24
   10a78:	f014 fa91 	bl	24f9e <settings_delete>
		update->valid = 0U;
   10a7c:	eb07 0309 	add.w	r3, r7, r9
   10a80:	785a      	ldrb	r2, [r3, #1]
   10a82:	f36f 1204 	bfc	r2, #4, #1
   10a86:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < ARRAY_SIZE(key_updates); i++) {
   10a88:	2c00      	cmp	r4, #0
   10a8a:	f47f af54 	bne.w	10936 <store_pending+0x36>
   10a8e:	2401      	movs	r4, #1
   10a90:	e7dc      	b.n	10a4c <store_pending+0x14c>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   10a92:	4642      	mov	r2, r8
   10a94:	e7eb      	b.n	10a6e <store_pending+0x16e>
				store_app(update->key_idx);
   10a96:	4618      	mov	r0, r3
			if (update->app_key) {
   10a98:	b111      	cbz	r1, 10aa0 <store_pending+0x1a0>
				store_app(update->key_idx);
   10a9a:	f7ff fb1d 	bl	100d8 <store_app>
   10a9e:	e7ed      	b.n	10a7c <store_pending+0x17c>
				store_subnet(update->key_idx);
   10aa0:	f7ff fa84 	bl	ffac <store_subnet>
   10aa4:	e7ea      	b.n	10a7c <store_pending+0x17c>
	err = settings_delete("bt/mesh/Net");
   10aa6:	481b      	ldr	r0, [pc, #108]	; (10b14 <store_pending+0x214>)
   10aa8:	f014 fa79 	bl	24f9e <settings_delete>
}
   10aac:	e75d      	b.n	1096a <store_pending+0x6a>
	err = settings_delete("bt/mesh/IV");
   10aae:	481b      	ldr	r0, [pc, #108]	; (10b1c <store_pending+0x21c>)
   10ab0:	f014 fa75 	bl	24f9e <settings_delete>
}
   10ab4:	e779      	b.n	109aa <store_pending+0xaa>
		val.indefinite = (pub->count == 0xffff);
   10ab6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
		val.dst = pub->dst;
   10ab8:	f8ad 1018 	strh.w	r1, [sp, #24]
		val.period = pub->period;
   10abc:	8e81      	ldrh	r1, [r0, #52]	; 0x34
		val.indefinite = (pub->count == 0xffff);
   10abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10ac2:	1a9d      	subs	r5, r3, r2
		val.feat = pub->feat;
   10ac4:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
		val.period = pub->period;
   10ac6:	f8ad 101a 	strh.w	r1, [sp, #26]
		val.feat = pub->feat;
   10aca:	f8ad 301c 	strh.w	r3, [sp, #28]
		val.net_idx = pub->net_idx;
   10ace:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   10ad0:	4814      	ldr	r0, [pc, #80]	; (10b24 <store_pending+0x224>)
		val.indefinite = (pub->count == 0xffff);
   10ad2:	426a      	negs	r2, r5
   10ad4:	416a      	adcs	r2, r5
		val.net_idx = pub->net_idx;
   10ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10ada:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
   10ade:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   10ae2:	f422 52ff 	bic.w	r2, r2, #8160	; 0x1fe0
   10ae6:	f022 021f 	bic.w	r2, r2, #31
   10aea:	4313      	orrs	r3, r2
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   10aec:	a906      	add	r1, sp, #24
   10aee:	2208      	movs	r2, #8
		val.net_idx = pub->net_idx;
   10af0:	f8ad 301e 	strh.w	r3, [sp, #30]
		err = settings_save_one("bt/mesh/HBPub", &val, sizeof(val));
   10af4:	f7f4 fc14 	bl	5320 <settings_save_one>
   10af8:	e776      	b.n	109e8 <store_pending+0xe8>
	err = settings_delete("bt/mesh/Cfg");
   10afa:	480b      	ldr	r0, [pc, #44]	; (10b28 <store_pending+0x228>)
   10afc:	f014 fa4f 	bl	24f9e <settings_delete>
}
   10b00:	e78c      	b.n	10a1c <store_pending+0x11c>
   10b02:	bf00      	nop
   10b04:	200015b0 	.word	0x200015b0
   10b08:	00010095 	.word	0x00010095
   10b0c:	0001012d 	.word	0x0001012d
   10b10:	20001600 	.word	0x20001600
   10b14:	00033690 	.word	0x00033690
   10b18:	200015a8 	.word	0x200015a8
   10b1c:	0003369c 	.word	0x0003369c
   10b20:	000336a7 	.word	0x000336a7
   10b24:	000336b3 	.word	0x000336b3
   10b28:	000336c1 	.word	0x000336c1
   10b2c:	000105a9 	.word	0x000105a9
   10b30:	000336cd 	.word	0x000336cd
   10b34:	2000905c 	.word	0x2000905c
   10b38:	00033645 	.word	0x00033645
   10b3c:	000335f8 	.word	0x000335f8
		if (!lab->changed) {
   10b40:	f994 3001 	ldrsb.w	r3, [r4, #1]
   10b44:	2b00      	cmp	r3, #0
   10b46:	da11      	bge.n	10b6c <store_pending+0x26c>
		lab->changed = 0U;
   10b48:	7863      	ldrb	r3, [r4, #1]
   10b4a:	f36f 13c7 	bfc	r3, #7, #1
   10b4e:	7063      	strb	r3, [r4, #1]
		snprintk(path, sizeof(path), "bt/mesh/Va/%x", i);
   10b50:	4632      	mov	r2, r6
   10b52:	b2ab      	uxth	r3, r5
   10b54:	2112      	movs	r1, #18
   10b56:	a801      	add	r0, sp, #4
   10b58:	f013 fcb9 	bl	244ce <snprintk>
		if (IS_VA_DEL(lab)) {
   10b5c:	8823      	ldrh	r3, [r4, #0]
   10b5e:	f3c3 020e 	ubfx	r2, r3, #0, #15
   10b62:	2a00      	cmp	r2, #0
   10b64:	d156      	bne.n	10c14 <store_pending+0x314>
			err = settings_delete(path);
   10b66:	a801      	add	r0, sp, #4
   10b68:	f014 fa19 	bl	24f9e <settings_delete>
	for (i = 0; (lab = bt_mesh_va_get(i)) != NULL; i++) {
   10b6c:	3501      	adds	r5, #1
   10b6e:	b2a8      	uxth	r0, r5
   10b70:	f019 fa4e 	bl	2a010 <bt_mesh_va_get>
   10b74:	4604      	mov	r4, r0
   10b76:	2800      	cmp	r0, #0
   10b78:	d1e2      	bne.n	10b40 <store_pending+0x240>
		if (atomic_test_and_clear_bit(bt_mesh_cdb.flags,
   10b7a:	4c4a      	ldr	r4, [pc, #296]	; (10ca4 <store_pending+0x3a4>)
   10b7c:	2101      	movs	r1, #1
   10b7e:	4620      	mov	r0, r4
   10b80:	f01b f84c 	bl	2bc1c <atomic_test_and_clear_bit>
   10b84:	b198      	cbz	r0, 10bae <store_pending+0x2ae>
   10b86:	4620      	mov	r0, r4
   10b88:	f01b f82c 	bl	2bbe4 <atomic_get>
			if (atomic_test_bit(bt_mesh_cdb.flags,
   10b8c:	07c0      	lsls	r0, r0, #31
   10b8e:	d553      	bpl.n	10c38 <store_pending+0x338>
	net.iv_index = bt_mesh_cdb.iv_index;
   10b90:	f854 3c04 	ldr.w	r3, [r4, #-4]
   10b94:	9306      	str	r3, [sp, #24]
   10b96:	4620      	mov	r0, r4
   10b98:	f01b f824 	bl	2bbe4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10b9c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   10ba0:	f88d 001c 	strb.w	r0, [sp, #28]
	err = settings_save_one("bt/mesh/cdb/Net", &net, sizeof(net));
   10ba4:	2205      	movs	r2, #5
   10ba6:	4840      	ldr	r0, [pc, #256]	; (10ca8 <store_pending+0x3a8>)
   10ba8:	a906      	add	r1, sp, #24
   10baa:	f7f4 fbb9 	bl	5320 <settings_save_one>
		if (atomic_test_and_clear_bit(bt_mesh_cdb.flags,
   10bae:	483d      	ldr	r0, [pc, #244]	; (10ca4 <store_pending+0x3a4>)
   10bb0:	2103      	movs	r1, #3
   10bb2:	f01b f833 	bl	2bc1c <atomic_test_and_clear_bit>
   10bb6:	2800      	cmp	r0, #0
   10bb8:	d142      	bne.n	10c40 <store_pending+0x340>
		if (atomic_test_and_clear_bit(bt_mesh_cdb.flags,
   10bba:	483a      	ldr	r0, [pc, #232]	; (10ca4 <store_pending+0x3a4>)
   10bbc:	2102      	movs	r1, #2
   10bbe:	f01b f82d 	bl	2bc1c <atomic_test_and_clear_bit>
   10bc2:	b320      	cbz	r0, 10c0e <store_pending+0x30e>
		if (!update->valid) {
   10bc4:	4e39      	ldr	r6, [pc, #228]	; (10cac <store_pending+0x3ac>)
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", net_idx);
   10bc6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 10cbc <store_pending+0x3bc>
	for (i = 0; i < ARRAY_SIZE(cdb_key_updates); i++) {
   10bca:	2400      	movs	r4, #0
   10bcc:	4637      	mov	r7, r6
		if (!update->valid) {
   10bce:	eb06 0344 	add.w	r3, r6, r4, lsl #1
   10bd2:	0065      	lsls	r5, r4, #1
   10bd4:	785a      	ldrb	r2, [r3, #1]
   10bd6:	06d1      	lsls	r1, r2, #27
   10bd8:	d516      	bpl.n	10c08 <store_pending+0x308>
		if (update->clear) {
   10bda:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
   10bde:	f002 0120 	and.w	r1, r2, #32
   10be2:	0652      	lsls	r2, r2, #25
   10be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10be8:	d54b      	bpl.n	10c82 <store_pending+0x382>
			if (update->app_key) {
   10bea:	2900      	cmp	r1, #0
   10bec:	d047      	beq.n	10c7e <store_pending+0x37e>
	snprintk(path, sizeof(path), "bt/mesh/cdb/AppKey/%x", app_idx);
   10bee:	4a30      	ldr	r2, [pc, #192]	; (10cb0 <store_pending+0x3b0>)
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", net_idx);
   10bf0:	211e      	movs	r1, #30
   10bf2:	a806      	add	r0, sp, #24
   10bf4:	f013 fc6b 	bl	244ce <snprintk>
	err = settings_delete(path);
   10bf8:	a806      	add	r0, sp, #24
   10bfa:	f014 f9d0 	bl	24f9e <settings_delete>
		update->valid = 0U;
   10bfe:	197b      	adds	r3, r7, r5
   10c00:	785a      	ldrb	r2, [r3, #1]
   10c02:	f36f 1204 	bfc	r2, #4, #1
   10c06:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < ARRAY_SIZE(cdb_key_updates); i++) {
   10c08:	3401      	adds	r4, #1
   10c0a:	2c06      	cmp	r4, #6
   10c0c:	d1df      	bne.n	10bce <store_pending+0x2ce>
}
   10c0e:	b00f      	add	sp, #60	; 0x3c
   10c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			va.ref = lab->ref;
   10c14:	f3c3 030e 	ubfx	r3, r3, #0, #15
   10c18:	f8ad 3018 	strh.w	r3, [sp, #24]
			memcpy(va.uuid, lab->uuid, 16);
   10c1c:	1d21      	adds	r1, r4, #4
			va.addr = lab->addr;
   10c1e:	8863      	ldrh	r3, [r4, #2]
   10c20:	f8ad 301a 	strh.w	r3, [sp, #26]
			memcpy(va.uuid, lab->uuid, 16);
   10c24:	2210      	movs	r2, #16
   10c26:	a807      	add	r0, sp, #28
   10c28:	f015 febb 	bl	269a2 <memcpy>
			err = settings_save_one(path, &va, sizeof(va));
   10c2c:	2214      	movs	r2, #20
   10c2e:	a906      	add	r1, sp, #24
   10c30:	a801      	add	r0, sp, #4
   10c32:	f7f4 fb75 	bl	5320 <settings_save_one>
   10c36:	e799      	b.n	10b6c <store_pending+0x26c>
	err = settings_delete("bt/mesh/cdb/Net");
   10c38:	481b      	ldr	r0, [pc, #108]	; (10ca8 <store_pending+0x3a8>)
   10c3a:	f014 f9b0 	bl	24f9e <settings_delete>
}
   10c3e:	e7b6      	b.n	10bae <store_pending+0x2ae>
	for (i = 0; i < ARRAY_SIZE(cdb_node_updates); ++i) {
   10c40:	2500      	movs	r5, #0
   10c42:	4c1c      	ldr	r4, [pc, #112]	; (10cb4 <store_pending+0x3b4>)
	snprintk(path, sizeof(path), "bt/mesh/cdb/Node/%x", addr);
   10c44:	4f1c      	ldr	r7, [pc, #112]	; (10cb8 <store_pending+0x3b8>)
		update->addr = BT_MESH_ADDR_UNASSIGNED;
   10c46:	462e      	mov	r6, r5
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10c48:	8823      	ldrh	r3, [r4, #0]
   10c4a:	b153      	cbz	r3, 10c62 <store_pending+0x362>
		if (update->clear) {
   10c4c:	78a2      	ldrb	r2, [r4, #2]
   10c4e:	b172      	cbz	r2, 10c6e <store_pending+0x36e>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Node/%x", addr);
   10c50:	463a      	mov	r2, r7
   10c52:	211e      	movs	r1, #30
   10c54:	a806      	add	r0, sp, #24
   10c56:	f013 fc3a 	bl	244ce <snprintk>
	err = settings_delete(path);
   10c5a:	a806      	add	r0, sp, #24
   10c5c:	f014 f99f 	bl	24f9e <settings_delete>
		update->addr = BT_MESH_ADDR_UNASSIGNED;
   10c60:	8026      	strh	r6, [r4, #0]
	for (i = 0; i < ARRAY_SIZE(cdb_node_updates); ++i) {
   10c62:	3501      	adds	r5, #1
   10c64:	2d03      	cmp	r5, #3
   10c66:	f104 0404 	add.w	r4, r4, #4
   10c6a:	d1ed      	bne.n	10c48 <store_pending+0x348>
   10c6c:	e7a5      	b.n	10bba <store_pending+0x2ba>
			node = bt_mesh_cdb_node_get(update->addr);
   10c6e:	4618      	mov	r0, r3
   10c70:	f002 f8d4 	bl	12e1c <bt_mesh_cdb_node_get>
			if (node) {
   10c74:	2800      	cmp	r0, #0
   10c76:	d0f3      	beq.n	10c60 <store_pending+0x360>
				store_cdb_node(node);
   10c78:	f7ff fd18 	bl	106ac <store_cdb_node>
   10c7c:	e7f0      	b.n	10c60 <store_pending+0x360>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", net_idx);
   10c7e:	4642      	mov	r2, r8
   10c80:	e7b6      	b.n	10bf0 <store_pending+0x2f0>
				key = bt_mesh_cdb_app_key_get(update->key_idx);
   10c82:	4618      	mov	r0, r3
			if (update->app_key) {
   10c84:	b131      	cbz	r1, 10c94 <store_pending+0x394>
				key = bt_mesh_cdb_app_key_get(update->key_idx);
   10c86:	f002 f921 	bl	12ecc <bt_mesh_cdb_app_key_get>
				if (key) {
   10c8a:	2800      	cmp	r0, #0
   10c8c:	d0b7      	beq.n	10bfe <store_pending+0x2fe>
					store_cdb_app_key(key);
   10c8e:	f7ff f9db 	bl	10048 <store_cdb_app_key>
   10c92:	e7b4      	b.n	10bfe <store_pending+0x2fe>
				sub = bt_mesh_cdb_subnet_get(update->key_idx);
   10c94:	f001 ffe4 	bl	12c60 <bt_mesh_cdb_subnet_get>
				if (sub) {
   10c98:	2800      	cmp	r0, #0
   10c9a:	d0b0      	beq.n	10bfe <store_pending+0x2fe>
					store_cdb_subnet(sub);
   10c9c:	f7ff f9ae 	bl	fffc <store_cdb_subnet>
   10ca0:	e7ad      	b.n	10bfe <store_pending+0x2fe>
   10ca2:	bf00      	nop
   10ca4:	20000534 	.word	0x20000534
   10ca8:	000336db 	.word	0x000336db
   10cac:	20009044 	.word	0x20009044
   10cb0:	00033620 	.word	0x00033620
   10cb4:	20009050 	.word	0x20009050
   10cb8:	0003367c 	.word	0x0003367c
   10cbc:	0003360a 	.word	0x0003360a

00010cc0 <bt_mesh_store_seq>:
	    (bt_mesh.seq % CONFIG_BT_MESH_SEQ_STORE_RATE)) {
   10cc0:	4b03      	ldr	r3, [pc, #12]	; (10cd0 <bt_mesh_store_seq+0x10>)
   10cc2:	685b      	ldr	r3, [r3, #4]
	if (CONFIG_BT_MESH_SEQ_STORE_RATE &&
   10cc4:	065b      	lsls	r3, r3, #25
   10cc6:	d102      	bne.n	10cce <bt_mesh_store_seq+0xe>
	schedule_store(BT_MESH_SEQ_PENDING);
   10cc8:	200a      	movs	r0, #10
   10cca:	f7ff bd7b 	b.w	107c4 <schedule_store>
}
   10cce:	4770      	bx	lr
   10cd0:	200015a8 	.word	0x200015a8

00010cd4 <bt_mesh_clear_subnet>:
{
   10cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10cd6:	4601      	mov	r1, r0
	update = key_update_find(false, net_idx, &free_slot);
   10cd8:	466a      	mov	r2, sp
   10cda:	2000      	movs	r0, #0
   10cdc:	f7ff f8b0 	bl	fe40 <key_update_find>
	if (update) {
   10ce0:	b138      	cbz	r0, 10cf2 <bt_mesh_clear_subnet+0x1e>
		update->clear = 1U;
   10ce2:	7843      	ldrb	r3, [r0, #1]
   10ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10ce8:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   10cea:	2007      	movs	r0, #7
   10cec:	f7ff fd6a 	bl	107c4 <schedule_store>
   10cf0:	e00a      	b.n	10d08 <bt_mesh_clear_subnet+0x34>
	if (!free_slot) {
   10cf2:	9a00      	ldr	r2, [sp, #0]
   10cf4:	b95a      	cbnz	r2, 10d0e <bt_mesh_clear_subnet+0x3a>
	snprintk(path, sizeof(path), "bt/mesh/NetKey/%x", net_idx);
   10cf6:	460b      	mov	r3, r1
   10cf8:	4a0b      	ldr	r2, [pc, #44]	; (10d28 <bt_mesh_clear_subnet+0x54>)
   10cfa:	2114      	movs	r1, #20
   10cfc:	a801      	add	r0, sp, #4
   10cfe:	f013 fbe6 	bl	244ce <snprintk>
	err = settings_delete(path);
   10d02:	a801      	add	r0, sp, #4
   10d04:	f014 f94b 	bl	24f9e <settings_delete>
}
   10d08:	b007      	add	sp, #28
   10d0a:	f85d fb04 	ldr.w	pc, [sp], #4
	free_slot->key_idx = net_idx;
   10d0e:	8813      	ldrh	r3, [r2, #0]
   10d10:	f3c1 010b 	ubfx	r1, r1, #0, #12
   10d14:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   10d18:	f441 41a0 	orr.w	r1, r1, #20480	; 0x5000
   10d1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   10d20:	4319      	orrs	r1, r3
   10d22:	8011      	strh	r1, [r2, #0]
   10d24:	e7e1      	b.n	10cea <bt_mesh_clear_subnet+0x16>
   10d26:	bf00      	nop
   10d28:	000335f8 	.word	0x000335f8

00010d2c <bt_mesh_clear_app_key>:
{
   10d2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10d2e:	4601      	mov	r1, r0
	update = key_update_find(true, app_idx, &free_slot);
   10d30:	466a      	mov	r2, sp
   10d32:	2001      	movs	r0, #1
   10d34:	f7ff f884 	bl	fe40 <key_update_find>
	if (update) {
   10d38:	b138      	cbz	r0, 10d4a <bt_mesh_clear_app_key+0x1e>
		update->clear = 1U;
   10d3a:	7843      	ldrb	r3, [r0, #1]
   10d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d40:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   10d42:	2007      	movs	r0, #7
   10d44:	f7ff fd3e 	bl	107c4 <schedule_store>
   10d48:	e00a      	b.n	10d60 <bt_mesh_clear_app_key+0x34>
	if (!free_slot) {
   10d4a:	9a00      	ldr	r2, [sp, #0]
   10d4c:	b95a      	cbnz	r2, 10d66 <bt_mesh_clear_app_key+0x3a>
	snprintk(path, sizeof(path), "bt/mesh/AppKey/%x", app_idx);
   10d4e:	460b      	mov	r3, r1
   10d50:	4a0b      	ldr	r2, [pc, #44]	; (10d80 <bt_mesh_clear_app_key+0x54>)
   10d52:	2114      	movs	r1, #20
   10d54:	a801      	add	r0, sp, #4
   10d56:	f013 fbba 	bl	244ce <snprintk>
	err = settings_delete(path);
   10d5a:	a801      	add	r0, sp, #4
   10d5c:	f014 f91f 	bl	24f9e <settings_delete>
}
   10d60:	b007      	add	sp, #28
   10d62:	f85d fb04 	ldr.w	pc, [sp], #4
	free_slot->key_idx = app_idx;
   10d66:	8813      	ldrh	r3, [r2, #0]
   10d68:	f3c1 010b 	ubfx	r1, r1, #0, #12
   10d6c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   10d70:	f441 41e0 	orr.w	r1, r1, #28672	; 0x7000
   10d74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   10d78:	4319      	orrs	r1, r3
   10d7a:	8011      	strh	r1, [r2, #0]
   10d7c:	e7e1      	b.n	10d42 <bt_mesh_clear_app_key+0x16>
   10d7e:	bf00      	nop
   10d80:	00033645 	.word	0x00033645

00010d84 <bt_mesh_store_cdb_node>:
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10d84:	4916      	ldr	r1, [pc, #88]	; (10de0 <bt_mesh_store_cdb_node+0x5c>)
   10d86:	880b      	ldrh	r3, [r1, #0]
{
   10d88:	b470      	push	{r4, r5, r6}
	update = cdb_node_update_find(node->addr, &free_slot);
   10d8a:	8a04      	ldrh	r4, [r0, #16]
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10d8c:	b1ab      	cbz	r3, 10dba <bt_mesh_store_cdb_node+0x36>
		if (update->addr == addr) {
   10d8e:	42a3      	cmp	r3, r4
	*free_slot = NULL;
   10d90:	f04f 0200 	mov.w	r2, #0
		if (update->addr == addr) {
   10d94:	d113      	bne.n	10dbe <bt_mesh_store_cdb_node+0x3a>
		struct node_update *update = &cdb_node_updates[i];
   10d96:	460b      	mov	r3, r1
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10d98:	888d      	ldrh	r5, [r1, #4]
   10d9a:	b195      	cbz	r5, 10dc2 <bt_mesh_store_cdb_node+0x3e>
		struct node_update *update = &cdb_node_updates[i];
   10d9c:	4e11      	ldr	r6, [pc, #68]	; (10de4 <bt_mesh_store_cdb_node+0x60>)
   10d9e:	42ac      	cmp	r4, r5
   10da0:	bf08      	it	eq
   10da2:	4633      	moveq	r3, r6
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10da4:	8909      	ldrh	r1, [r1, #8]
   10da6:	b1a1      	cbz	r1, 10dd2 <bt_mesh_store_cdb_node+0x4e>
		if (update->addr == addr) {
   10da8:	428c      	cmp	r4, r1
   10daa:	d00c      	beq.n	10dc6 <bt_mesh_store_cdb_node+0x42>
	if (update) {
   10dac:	b16b      	cbz	r3, 10dca <bt_mesh_store_cdb_node+0x46>
		update->clear = false;
   10dae:	2200      	movs	r2, #0
   10db0:	709a      	strb	r2, [r3, #2]
}
   10db2:	bc70      	pop	{r4, r5, r6}
	schedule_cdb_store(BT_MESH_CDB_NODES_PENDING);
   10db4:	2003      	movs	r0, #3
   10db6:	f7ff bcf1 	b.w	1079c <schedule_cdb_store>
		struct node_update *update = &cdb_node_updates[i];
   10dba:	460a      	mov	r2, r1
   10dbc:	e7ec      	b.n	10d98 <bt_mesh_store_cdb_node+0x14>
	match = NULL;
   10dbe:	4613      	mov	r3, r2
   10dc0:	e7ea      	b.n	10d98 <bt_mesh_store_cdb_node+0x14>
		struct node_update *update = &cdb_node_updates[i];
   10dc2:	4a08      	ldr	r2, [pc, #32]	; (10de4 <bt_mesh_store_cdb_node+0x60>)
   10dc4:	e7ee      	b.n	10da4 <bt_mesh_store_cdb_node+0x20>
   10dc6:	4b08      	ldr	r3, [pc, #32]	; (10de8 <bt_mesh_store_cdb_node+0x64>)
   10dc8:	e7f1      	b.n	10dae <bt_mesh_store_cdb_node+0x2a>
	if (!free_slot) {
   10dca:	b92a      	cbnz	r2, 10dd8 <bt_mesh_store_cdb_node+0x54>
}
   10dcc:	bc70      	pop	{r4, r5, r6}
		store_cdb_node(node);
   10dce:	f7ff bc6d 	b.w	106ac <store_cdb_node>
	if (update) {
   10dd2:	2b00      	cmp	r3, #0
   10dd4:	d1eb      	bne.n	10dae <bt_mesh_store_cdb_node+0x2a>
		struct node_update *update = &cdb_node_updates[i];
   10dd6:	4a04      	ldr	r2, [pc, #16]	; (10de8 <bt_mesh_store_cdb_node+0x64>)
	free_slot->addr = node->addr;
   10dd8:	8014      	strh	r4, [r2, #0]
	free_slot->clear = false;
   10dda:	2300      	movs	r3, #0
   10ddc:	7093      	strb	r3, [r2, #2]
   10dde:	e7e8      	b.n	10db2 <bt_mesh_store_cdb_node+0x2e>
   10de0:	20009050 	.word	0x20009050
   10de4:	20009054 	.word	0x20009054
   10de8:	20009058 	.word	0x20009058

00010dec <bt_mesh_clear_cdb_node>:
{
   10dec:	b530      	push	{r4, r5, lr}
	update = cdb_node_update_find(node->addr, &free_slot);
   10dee:	8a03      	ldrh	r3, [r0, #16]
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10df0:	4819      	ldr	r0, [pc, #100]	; (10e58 <bt_mesh_clear_cdb_node+0x6c>)
   10df2:	8802      	ldrh	r2, [r0, #0]
{
   10df4:	b089      	sub	sp, #36	; 0x24
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10df6:	b1aa      	cbz	r2, 10e24 <bt_mesh_clear_cdb_node+0x38>
		if (update->addr == addr) {
   10df8:	4293      	cmp	r3, r2
	*free_slot = NULL;
   10dfa:	f04f 0100 	mov.w	r1, #0
		if (update->addr == addr) {
   10dfe:	d113      	bne.n	10e28 <bt_mesh_clear_cdb_node+0x3c>
		struct node_update *update = &cdb_node_updates[i];
   10e00:	4602      	mov	r2, r0
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10e02:	8884      	ldrh	r4, [r0, #4]
   10e04:	b194      	cbz	r4, 10e2c <bt_mesh_clear_cdb_node+0x40>
		struct node_update *update = &cdb_node_updates[i];
   10e06:	4d15      	ldr	r5, [pc, #84]	; (10e5c <bt_mesh_clear_cdb_node+0x70>)
   10e08:	42a3      	cmp	r3, r4
   10e0a:	bf08      	it	eq
   10e0c:	462a      	moveq	r2, r5
		if (update->addr == BT_MESH_ADDR_UNASSIGNED) {
   10e0e:	8900      	ldrh	r0, [r0, #8]
   10e10:	b1d8      	cbz	r0, 10e4a <bt_mesh_clear_cdb_node+0x5e>
		if (update->addr == addr) {
   10e12:	4283      	cmp	r3, r0
   10e14:	d00c      	beq.n	10e30 <bt_mesh_clear_cdb_node+0x44>
	if (update) {
   10e16:	b16a      	cbz	r2, 10e34 <bt_mesh_clear_cdb_node+0x48>
		update->clear = true;
   10e18:	2301      	movs	r3, #1
   10e1a:	7093      	strb	r3, [r2, #2]
	schedule_cdb_store(BT_MESH_CDB_NODES_PENDING);
   10e1c:	2003      	movs	r0, #3
   10e1e:	f7ff fcbd 	bl	1079c <schedule_cdb_store>
   10e22:	e010      	b.n	10e46 <bt_mesh_clear_cdb_node+0x5a>
		struct node_update *update = &cdb_node_updates[i];
   10e24:	4601      	mov	r1, r0
   10e26:	e7ec      	b.n	10e02 <bt_mesh_clear_cdb_node+0x16>
	match = NULL;
   10e28:	460a      	mov	r2, r1
   10e2a:	e7ea      	b.n	10e02 <bt_mesh_clear_cdb_node+0x16>
		struct node_update *update = &cdb_node_updates[i];
   10e2c:	490b      	ldr	r1, [pc, #44]	; (10e5c <bt_mesh_clear_cdb_node+0x70>)
   10e2e:	e7ee      	b.n	10e0e <bt_mesh_clear_cdb_node+0x22>
   10e30:	4a0b      	ldr	r2, [pc, #44]	; (10e60 <bt_mesh_clear_cdb_node+0x74>)
   10e32:	e7f1      	b.n	10e18 <bt_mesh_clear_cdb_node+0x2c>
	if (!free_slot) {
   10e34:	b961      	cbnz	r1, 10e50 <bt_mesh_clear_cdb_node+0x64>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Node/%x", addr);
   10e36:	4a0b      	ldr	r2, [pc, #44]	; (10e64 <bt_mesh_clear_cdb_node+0x78>)
   10e38:	211e      	movs	r1, #30
   10e3a:	4668      	mov	r0, sp
   10e3c:	f013 fb47 	bl	244ce <snprintk>
	err = settings_delete(path);
   10e40:	4668      	mov	r0, sp
   10e42:	f014 f8ac 	bl	24f9e <settings_delete>
}
   10e46:	b009      	add	sp, #36	; 0x24
   10e48:	bd30      	pop	{r4, r5, pc}
	if (update) {
   10e4a:	2a00      	cmp	r2, #0
   10e4c:	d1e4      	bne.n	10e18 <bt_mesh_clear_cdb_node+0x2c>
		struct node_update *update = &cdb_node_updates[i];
   10e4e:	4904      	ldr	r1, [pc, #16]	; (10e60 <bt_mesh_clear_cdb_node+0x74>)
	free_slot->addr = node->addr;
   10e50:	800b      	strh	r3, [r1, #0]
	free_slot->clear = true;
   10e52:	2301      	movs	r3, #1
   10e54:	708b      	strb	r3, [r1, #2]
   10e56:	e7e1      	b.n	10e1c <bt_mesh_clear_cdb_node+0x30>
   10e58:	20009050 	.word	0x20009050
   10e5c:	20009054 	.word	0x20009054
   10e60:	20009058 	.word	0x20009058
   10e64:	0003367c 	.word	0x0003367c

00010e68 <bt_mesh_clear_cdb_subnet>:

	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
}

void bt_mesh_clear_cdb_subnet(struct bt_mesh_cdb_subnet *sub)
{
   10e68:	b510      	push	{r4, lr}
   10e6a:	b08a      	sub	sp, #40	; 0x28
	struct key_update *update, *free_slot;

	BT_DBG("NetKeyIndex 0x%03x", sub->net_idx);

	update = cdb_key_update_find(false, sub->net_idx, &free_slot);
   10e6c:	8801      	ldrh	r1, [r0, #0]
{
   10e6e:	4604      	mov	r4, r0
	update = cdb_key_update_find(false, sub->net_idx, &free_slot);
   10e70:	aa01      	add	r2, sp, #4
   10e72:	2000      	movs	r0, #0
   10e74:	f7ff f812 	bl	fe9c <cdb_key_update_find>
	if (update) {
   10e78:	b138      	cbz	r0, 10e8a <bt_mesh_clear_cdb_subnet+0x22>
		update->clear = 1U;
   10e7a:	7843      	ldrb	r3, [r0, #1]
   10e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10e80:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = sub->net_idx;
	free_slot->app_key = 0U;
	free_slot->clear = 1U;

	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
   10e82:	2002      	movs	r0, #2
   10e84:	f7ff fc8a 	bl	1079c <schedule_cdb_store>
   10e88:	e00a      	b.n	10ea0 <bt_mesh_clear_cdb_subnet+0x38>
	if (!free_slot) {
   10e8a:	9901      	ldr	r1, [sp, #4]
   10e8c:	8823      	ldrh	r3, [r4, #0]
   10e8e:	b949      	cbnz	r1, 10ea4 <bt_mesh_clear_cdb_subnet+0x3c>
	snprintk(path, sizeof(path), "bt/mesh/cdb/Subnet/%x", net_idx);
   10e90:	4a0a      	ldr	r2, [pc, #40]	; (10ebc <bt_mesh_clear_cdb_subnet+0x54>)
   10e92:	211e      	movs	r1, #30
   10e94:	a802      	add	r0, sp, #8
   10e96:	f013 fb1a 	bl	244ce <snprintk>
	err = settings_delete(path);
   10e9a:	a802      	add	r0, sp, #8
   10e9c:	f014 f87f 	bl	24f9e <settings_delete>
}
   10ea0:	b00a      	add	sp, #40	; 0x28
   10ea2:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   10ea4:	880a      	ldrh	r2, [r1, #0]
   10ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10eaa:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   10eae:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
   10eb2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10eb6:	4313      	orrs	r3, r2
   10eb8:	800b      	strh	r3, [r1, #0]
   10eba:	e7e2      	b.n	10e82 <bt_mesh_clear_cdb_subnet+0x1a>
   10ebc:	0003360a 	.word	0x0003360a

00010ec0 <bt_mesh_clear_cdb_app_key>:

	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
}

void bt_mesh_clear_cdb_app_key(struct bt_mesh_cdb_app_key *key)
{
   10ec0:	b510      	push	{r4, lr}
   10ec2:	b08a      	sub	sp, #40	; 0x28
	struct key_update *update, *free_slot;

	BT_DBG("AppKeyIndex 0x%03x", key->app_idx);

	update = cdb_key_update_find(true, key->app_idx, &free_slot);
   10ec4:	8841      	ldrh	r1, [r0, #2]
{
   10ec6:	4604      	mov	r4, r0
	update = cdb_key_update_find(true, key->app_idx, &free_slot);
   10ec8:	aa01      	add	r2, sp, #4
   10eca:	2001      	movs	r0, #1
   10ecc:	f7fe ffe6 	bl	fe9c <cdb_key_update_find>
	if (update) {
   10ed0:	b138      	cbz	r0, 10ee2 <bt_mesh_clear_cdb_app_key+0x22>
		update->clear = 1U;
   10ed2:	7843      	ldrb	r3, [r0, #1]
   10ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10ed8:	7043      	strb	r3, [r0, #1]
	free_slot->valid = 1U;
	free_slot->key_idx = key->app_idx;
	free_slot->app_key = 1U;
	free_slot->clear = 1U;

	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
   10eda:	2002      	movs	r0, #2
   10edc:	f7ff fc5e 	bl	1079c <schedule_cdb_store>
   10ee0:	e00a      	b.n	10ef8 <bt_mesh_clear_cdb_app_key+0x38>
	if (!free_slot) {
   10ee2:	9901      	ldr	r1, [sp, #4]
   10ee4:	8863      	ldrh	r3, [r4, #2]
   10ee6:	b949      	cbnz	r1, 10efc <bt_mesh_clear_cdb_app_key+0x3c>
	snprintk(path, sizeof(path), "bt/mesh/cdb/AppKey/%x", app_idx);
   10ee8:	4a0a      	ldr	r2, [pc, #40]	; (10f14 <bt_mesh_clear_cdb_app_key+0x54>)
   10eea:	211e      	movs	r1, #30
   10eec:	a802      	add	r0, sp, #8
   10eee:	f013 faee 	bl	244ce <snprintk>
	err = settings_delete(path);
   10ef2:	a802      	add	r0, sp, #8
   10ef4:	f014 f853 	bl	24f9e <settings_delete>
}
   10ef8:	b00a      	add	sp, #40	; 0x28
   10efa:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   10efc:	880a      	ldrh	r2, [r1, #0]
   10efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
   10f02:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   10f06:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
   10f0a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   10f0e:	4313      	orrs	r3, r2
   10f10:	800b      	strh	r3, [r1, #0]
   10f12:	e7e2      	b.n	10eda <bt_mesh_clear_cdb_app_key+0x1a>
   10f14:	00033620 	.word	0x00033620

00010f18 <bt_mesh_settings_init>:
	return err;
}

void bt_mesh_settings_init(void)
{
	k_delayed_work_init(&pending_store, store_pending);
   10f18:	4901      	ldr	r1, [pc, #4]	; (10f20 <bt_mesh_settings_init+0x8>)
   10f1a:	4802      	ldr	r0, [pc, #8]	; (10f24 <bt_mesh_settings_init+0xc>)
   10f1c:	f01c bb42 	b.w	2d5a4 <k_delayed_work_init>
   10f20:	00010901 	.word	0x00010901
   10f24:	20001880 	.word	0x20001880

00010f28 <prov_link_closed>:
static void prov_link_closed(const struct prov_bearer *bearer, void *cb_data,
			     enum prov_bearer_link_status reason)
{
	BT_DBG("%u", reason);

	if (bt_mesh_prov_link.role->link_closed) {
   10f28:	4b08      	ldr	r3, [pc, #32]	; (10f4c <prov_link_closed+0x24>)
   10f2a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   10f2e:	685b      	ldr	r3, [r3, #4]
{
   10f30:	b510      	push	{r4, lr}
   10f32:	4604      	mov	r4, r0
	if (bt_mesh_prov_link.role->link_closed) {
   10f34:	b103      	cbz	r3, 10f38 <prov_link_closed+0x10>
		bt_mesh_prov_link.role->link_closed();
   10f36:	4798      	blx	r3
	}

	if (bt_mesh_prov->link_close) {
   10f38:	4b05      	ldr	r3, [pc, #20]	; (10f50 <prov_link_closed+0x28>)
   10f3a:	681b      	ldr	r3, [r3, #0]
   10f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10f3e:	b11b      	cbz	r3, 10f48 <prov_link_closed+0x20>
		bt_mesh_prov->link_close(bearer->type);
   10f40:	7820      	ldrb	r0, [r4, #0]
	}
}
   10f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->link_close(bearer->type);
   10f46:	4718      	bx	r3
}
   10f48:	bd10      	pop	{r4, pc}
   10f4a:	bf00      	nop
   10f4c:	200029a0 	.word	0x200029a0
   10f50:	2000299c 	.word	0x2000299c

00010f54 <prov_bearer_error>:

static void prov_bearer_error(const struct prov_bearer *bearer, void *cb_data,
			      uint8_t err)
{
	if (bt_mesh_prov_link.role->error) {
   10f54:	4b03      	ldr	r3, [pc, #12]	; (10f64 <prov_bearer_error+0x10>)
   10f56:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   10f5a:	689b      	ldr	r3, [r3, #8]
{
   10f5c:	4610      	mov	r0, r2
	if (bt_mesh_prov_link.role->error) {
   10f5e:	b103      	cbz	r3, 10f62 <prov_bearer_error+0xe>
		bt_mesh_prov_link.role->error(err);
   10f60:	4718      	bx	r3
	}
}
   10f62:	4770      	bx	lr
   10f64:	200029a0 	.word	0x200029a0

00010f68 <prov_recv>:
{
   10f68:	b430      	push	{r4, r5}
	uint8_t type = buf->data[0];
   10f6a:	6810      	ldr	r0, [r2, #0]
   10f6c:	4c0f      	ldr	r4, [pc, #60]	; (10fac <prov_recv+0x44>)
   10f6e:	7801      	ldrb	r1, [r0, #0]
	if (type >= ARRAY_SIZE(bt_mesh_prov_link.role->op)) {
   10f70:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   10f74:	2909      	cmp	r1, #9
   10f76:	d902      	bls.n	10f7e <prov_recv+0x16>
		bt_mesh_prov_link.role->error(PROV_ERR_NVAL_FMT);
   10f78:	689b      	ldr	r3, [r3, #8]
   10f7a:	2002      	movs	r0, #2
   10f7c:	e00a      	b.n	10f94 <prov_recv+0x2c>
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   10f7e:	d003      	beq.n	10f88 <prov_recv+0x20>
   10f80:	f894 4033 	ldrb.w	r4, [r4, #51]	; 0x33
   10f84:	428c      	cmp	r4, r1
   10f86:	d103      	bne.n	10f90 <prov_recv+0x28>
	    !bt_mesh_prov_link.role->op[type]) {
   10f88:	1d0c      	adds	r4, r1, #4
   10f8a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
	if ((type != PROV_FAILED && type != bt_mesh_prov_link.expect) ||
   10f8e:	b91c      	cbnz	r4, 10f98 <prov_recv+0x30>
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   10f90:	689b      	ldr	r3, [r3, #8]
   10f92:	2003      	movs	r0, #3
}
   10f94:	bc30      	pop	{r4, r5}
		bt_mesh_prov_link.role->error(PROV_ERR_UNEXP_PDU);
   10f96:	4718      	bx	r3
	if (1 + op_len[type] != buf->len) {
   10f98:	4d05      	ldr	r5, [pc, #20]	; (10fb0 <prov_recv+0x48>)
   10f9a:	8892      	ldrh	r2, [r2, #4]
   10f9c:	5c69      	ldrb	r1, [r5, r1]
   10f9e:	3101      	adds	r1, #1
   10fa0:	4291      	cmp	r1, r2
   10fa2:	d1e9      	bne.n	10f78 <prov_recv+0x10>
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   10fa4:	4623      	mov	r3, r4
   10fa6:	3001      	adds	r0, #1
}
   10fa8:	bc30      	pop	{r4, r5}
	bt_mesh_prov_link.role->op[type](&buf->data[1]);
   10faa:	4718      	bx	r3
   10fac:	200029a0 	.word	0x200029a0
   10fb0:	0003370b 	.word	0x0003370b

00010fb4 <atomic_or.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10fb4:	4b07      	ldr	r3, [pc, #28]	; (10fd4 <atomic_or.constprop.0+0x20>)
}
   10fb6:	f3bf 8f5b 	dmb	ish
   10fba:	4602      	mov	r2, r0
   10fbc:	e853 0f00 	ldrex	r0, [r3]
   10fc0:	ea40 0102 	orr.w	r1, r0, r2
   10fc4:	e843 1c00 	strex	ip, r1, [r3]
   10fc8:	f1bc 0f00 	cmp.w	ip, #0
   10fcc:	d1f6      	bne.n	10fbc <atomic_or.constprop.0+0x8>
   10fce:	f3bf 8f5b 	dmb	ish
   10fd2:	4770      	bx	lr
   10fd4:	20002ac0 	.word	0x20002ac0

00010fd8 <prov_link_opened>:
{
   10fd8:	b510      	push	{r4, lr}
   10fda:	4604      	mov	r4, r0
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10fdc:	2002      	movs	r0, #2
   10fde:	f7ff ffe9 	bl	10fb4 <atomic_or.constprop.0>
	if (bt_mesh_prov->link_open) {
   10fe2:	4b08      	ldr	r3, [pc, #32]	; (11004 <prov_link_opened+0x2c>)
   10fe4:	681b      	ldr	r3, [r3, #0]
   10fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   10fe8:	b10b      	cbz	r3, 10fee <prov_link_opened+0x16>
		bt_mesh_prov->link_open(bearer->type);
   10fea:	7820      	ldrb	r0, [r4, #0]
   10fec:	4798      	blx	r3
	bt_mesh_prov_link.bearer = bearer;
   10fee:	4b06      	ldr	r3, [pc, #24]	; (11008 <prov_link_opened+0x30>)
   10ff0:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	if (bt_mesh_prov_link.role->link_opened) {
   10ff4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   10ff8:	681b      	ldr	r3, [r3, #0]
   10ffa:	b113      	cbz	r3, 11002 <prov_link_opened+0x2a>
}
   10ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov_link.role->link_opened();
   11000:	4718      	bx	r3
}
   11002:	bd10      	pop	{r4, pc}
   11004:	2000299c 	.word	0x2000299c
   11008:	200029a0 	.word	0x200029a0

0001100c <bt_mesh_prov_reset_state>:
{
   1100c:	b508      	push	{r3, lr}
	pub_key_cb.func = func ? func : pub_key_ready;
   1100e:	4b0c      	ldr	r3, [pc, #48]	; (11040 <bt_mesh_prov_reset_state+0x34>)
   11010:	2800      	cmp	r0, #0
   11012:	bf08      	it	eq
   11014:	4618      	moveq	r0, r3
   11016:	4b0b      	ldr	r3, [pc, #44]	; (11044 <bt_mesh_prov_reset_state+0x38>)
   11018:	6018      	str	r0, [r3, #0]
	if (bt_mesh_prov_link.conf_inputs[0]) {
   1101a:	4b0b      	ldr	r3, [pc, #44]	; (11048 <bt_mesh_prov_reset_state+0x3c>)
   1101c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   11020:	b11b      	cbz	r3, 1102a <bt_mesh_prov_reset_state+0x1e>
		bt_mesh_attention(NULL, 0);
   11022:	2100      	movs	r1, #0
   11024:	4608      	mov	r0, r1
   11026:	f7fe fecf 	bl	fdc8 <bt_mesh_attention>
	(void)memset((uint8_t *)&bt_mesh_prov_link + offset, 0,
   1102a:	4808      	ldr	r0, [pc, #32]	; (1104c <bt_mesh_prov_reset_state+0x40>)
   1102c:	f240 1211 	movw	r2, #273	; 0x111
   11030:	2100      	movs	r1, #0
   11032:	f015 fce1 	bl	269f8 <memset>
}
   11036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = bt_pub_key_gen(&pub_key_cb);
   1103a:	4802      	ldr	r0, [pc, #8]	; (11044 <bt_mesh_prov_reset_state+0x38>)
   1103c:	f7f7 bf5c 	b.w	8ef8 <bt_pub_key_gen>
   11040:	0002bdf1 	.word	0x0002bdf1
   11044:	20002ac4 	.word	0x20002ac4
   11048:	200029a0 	.word	0x200029a0
   1104c:	200029b3 	.word	0x200029b3

00011050 <bt_mesh_prov_auth>:
{
   11050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11054:	4614      	mov	r4, r2
   11056:	b08a      	sub	sp, #40	; 0x28
   11058:	2803      	cmp	r0, #3
   1105a:	f200 80a8 	bhi.w	111ae <bt_mesh_prov_auth+0x15e>
   1105e:	e8df f000 	tbb	[pc, r0]
   11062:	0f02      	.short	0x0f02
   11064:	8d18      	.short	0x8d18
		if (action || size) {
   11066:	ea51 0402 	orrs.w	r4, r1, r2
   1106a:	f040 80a0 	bne.w	111ae <bt_mesh_prov_auth+0x15e>
		(void)memset(bt_mesh_prov_link.auth, 0, sizeof(bt_mesh_prov_link.auth));
   1106e:	4851      	ldr	r0, [pc, #324]	; (111b4 <bt_mesh_prov_auth+0x164>)
   11070:	2210      	movs	r2, #16
   11072:	4621      	mov	r1, r4
   11074:	f015 fcc0 	bl	269f8 <memset>
		return 0;
   11078:	4620      	mov	r0, r4
}
   1107a:	b00a      	add	sp, #40	; 0x28
   1107c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (action || size) {
   11080:	ea51 0402 	orrs.w	r4, r1, r2
   11084:	f040 8093 	bne.w	111ae <bt_mesh_prov_auth+0x15e>
   11088:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   1108c:	f7ff ff92 	bl	10fb4 <atomic_or.constprop.0>
   11090:	e7f2      	b.n	11078 <bt_mesh_prov_auth+0x28>
	switch (action) {
   11092:	2904      	cmp	r1, #4
   11094:	f200 808b 	bhi.w	111ae <bt_mesh_prov_auth+0x15e>
   11098:	4b47      	ldr	r3, [pc, #284]	; (111b8 <bt_mesh_prov_auth+0x168>)
   1109a:	5c5f      	ldrb	r7, [r3, r1]
		if (!output) {
   1109c:	2f00      	cmp	r7, #0
   1109e:	f000 8086 	beq.w	111ae <bt_mesh_prov_auth+0x15e>
		if (!(bt_mesh_prov->output_actions & output)) {
   110a2:	f8df 8124 	ldr.w	r8, [pc, #292]	; 111c8 <bt_mesh_prov_auth+0x178>
   110a6:	f8d8 3000 	ldr.w	r3, [r8]
   110aa:	8a5a      	ldrh	r2, [r3, #18]
   110ac:	423a      	tst	r2, r7
   110ae:	4645      	mov	r5, r8
   110b0:	d07d      	beq.n	111ae <bt_mesh_prov_auth+0x15e>
		if (size > bt_mesh_prov->output_size) {
   110b2:	7c5b      	ldrb	r3, [r3, #17]
   110b4:	42a3      	cmp	r3, r4
   110b6:	d37a      	bcc.n	111ae <bt_mesh_prov_auth+0x15e>
   110b8:	2010      	movs	r0, #16
   110ba:	f7ff ff7b 	bl	10fb4 <atomic_or.constprop.0>
		if (output == BT_MESH_DISPLAY_STRING) {
   110be:	2f10      	cmp	r7, #16
   110c0:	d12f      	bne.n	11122 <bt_mesh_prov_auth+0xd2>
			bt_rand(str, size);
   110c2:	4621      	mov	r1, r4
   110c4:	a802      	add	r0, sp, #8
   110c6:	f004 ff25 	bl	15f14 <bt_rand>
			for (i = 0U; i < size; i++) {
   110ca:	a902      	add	r1, sp, #8
   110cc:	2200      	movs	r2, #0
				str[i] %= 36;
   110ce:	2024      	movs	r0, #36	; 0x24
			for (i = 0U; i < size; i++) {
   110d0:	b2d3      	uxtb	r3, r2
   110d2:	42a3      	cmp	r3, r4
   110d4:	d315      	bcc.n	11102 <bt_mesh_prov_auth+0xb2>
			memcpy(bt_mesh_prov_link.auth, str, size);
   110d6:	4e37      	ldr	r6, [pc, #220]	; (111b4 <bt_mesh_prov_auth+0x164>)
			str[size] = '\0';
   110d8:	ab0a      	add	r3, sp, #40	; 0x28
   110da:	4423      	add	r3, r4
   110dc:	2700      	movs	r7, #0
			memcpy(bt_mesh_prov_link.auth, str, size);
   110de:	4622      	mov	r2, r4
   110e0:	a902      	add	r1, sp, #8
   110e2:	4630      	mov	r0, r6
			str[size] = '\0';
   110e4:	f803 7c20 	strb.w	r7, [r3, #-32]
			memcpy(bt_mesh_prov_link.auth, str, size);
   110e8:	f015 fc5b 	bl	269a2 <memcpy>
			(void)memset(bt_mesh_prov_link.auth + size, 0,
   110ec:	f1c4 0210 	rsb	r2, r4, #16
   110f0:	4639      	mov	r1, r7
   110f2:	1930      	adds	r0, r6, r4
   110f4:	f015 fc80 	bl	269f8 <memset>
			return bt_mesh_prov->output_string((char *)str);
   110f8:	682b      	ldr	r3, [r5, #0]
   110fa:	a802      	add	r0, sp, #8
   110fc:	6a1b      	ldr	r3, [r3, #32]
   110fe:	4798      	blx	r3
   11100:	e7bb      	b.n	1107a <bt_mesh_prov_auth+0x2a>
				str[i] %= 36;
   11102:	780e      	ldrb	r6, [r1, #0]
   11104:	fbb6 f3f0 	udiv	r3, r6, r0
   11108:	fb00 6313 	mls	r3, r0, r3, r6
   1110c:	b2de      	uxtb	r6, r3
				if (str[i] < 10) {
   1110e:	2e09      	cmp	r6, #9
					str[i] += '0';
   11110:	b25b      	sxtb	r3, r3
   11112:	bf94      	ite	ls
   11114:	3330      	addls	r3, #48	; 0x30
					str[i] += 'A' - 10;
   11116:	3337      	addhi	r3, #55	; 0x37
   11118:	b2db      	uxtb	r3, r3
   1111a:	f801 3b01 	strb.w	r3, [r1], #1
			for (i = 0U; i < size; i++) {
   1111e:	3201      	adds	r2, #1
   11120:	e7d6      	b.n	110d0 <bt_mesh_prov_auth+0x80>
			uint32_t div[8] = { 10, 100, 1000, 10000, 100000,
   11122:	4e26      	ldr	r6, [pc, #152]	; (111bc <bt_mesh_prov_auth+0x16c>)
   11124:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11126:	ad02      	add	r5, sp, #8
   11128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1112a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1112e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			bt_rand(&num, sizeof(num));
   11132:	2104      	movs	r1, #4
   11134:	eb0d 0001 	add.w	r0, sp, r1
   11138:	f004 feec 	bl	15f14 <bt_rand>
			num %= div[size - 1];
   1113c:	ab0a      	add	r3, sp, #40	; 0x28
   1113e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   11142:	9d01      	ldr	r5, [sp, #4]
   11144:	f854 2c24 	ldr.w	r2, [r4, #-36]
	dst[0] = val >> 8;
   11148:	481d      	ldr	r0, [pc, #116]	; (111c0 <bt_mesh_prov_auth+0x170>)
   1114a:	fbb5 f3f2 	udiv	r3, r5, r2
   1114e:	fb02 5313 	mls	r3, r2, r3, r5
	sys_put_be16(val >> 16, dst);
   11152:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   11154:	0e19      	lsrs	r1, r3, #24
	dst[1] = val;
   11156:	7402      	strb	r2, [r0, #16]
	dst[0] = val >> 8;
   11158:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1115c:	73c1      	strb	r1, [r0, #15]
   1115e:	7442      	strb	r2, [r0, #17]
	dst[1] = val;
   11160:	7483      	strb	r3, [r0, #18]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   11162:	220c      	movs	r2, #12
   11164:	2100      	movs	r1, #0
   11166:	3003      	adds	r0, #3
			num %= div[size - 1];
   11168:	9301      	str	r3, [sp, #4]
			(void)memset(bt_mesh_prov_link.auth, 0, 12);
   1116a:	f015 fc45 	bl	269f8 <memset>
			return bt_mesh_prov->output_number(output, num);
   1116e:	f8d8 3000 	ldr.w	r3, [r8]
   11172:	9901      	ldr	r1, [sp, #4]
   11174:	69db      	ldr	r3, [r3, #28]
   11176:	4638      	mov	r0, r7
   11178:	4798      	blx	r3
   1117a:	e77e      	b.n	1107a <bt_mesh_prov_auth+0x2a>
	switch (action) {
   1117c:	2903      	cmp	r1, #3
   1117e:	d816      	bhi.n	111ae <bt_mesh_prov_auth+0x15e>
   11180:	4b10      	ldr	r3, [pc, #64]	; (111c4 <bt_mesh_prov_auth+0x174>)
   11182:	5c5d      	ldrb	r5, [r3, r1]
		if (!input) {
   11184:	b19d      	cbz	r5, 111ae <bt_mesh_prov_auth+0x15e>
		if (!(bt_mesh_prov->input_actions & input)) {
   11186:	4e10      	ldr	r6, [pc, #64]	; (111c8 <bt_mesh_prov_auth+0x178>)
   11188:	6832      	ldr	r2, [r6, #0]
   1118a:	8ad1      	ldrh	r1, [r2, #22]
   1118c:	4229      	tst	r1, r5
   1118e:	d00e      	beq.n	111ae <bt_mesh_prov_auth+0x15e>
		if (size > bt_mesh_prov->input_size) {
   11190:	7d13      	ldrb	r3, [r2, #20]
   11192:	42a3      	cmp	r3, r4
   11194:	d30b      	bcc.n	111ae <bt_mesh_prov_auth+0x15e>
		if (input == BT_MESH_ENTER_STRING) {
   11196:	2d08      	cmp	r5, #8
   11198:	bf0c      	ite	eq
   1119a:	4628      	moveq	r0, r5
   1119c:	2004      	movne	r0, #4
   1119e:	f7ff ff09 	bl	10fb4 <atomic_or.constprop.0>
		return bt_mesh_prov->input(input, size);
   111a2:	6833      	ldr	r3, [r6, #0]
   111a4:	4621      	mov	r1, r4
   111a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   111a8:	4628      	mov	r0, r5
   111aa:	4798      	blx	r3
   111ac:	e765      	b.n	1107a <bt_mesh_prov_auth+0x2a>
			return -EINVAL;
   111ae:	f06f 0015 	mvn.w	r0, #21
   111b2:	e762      	b.n	1107a <bt_mesh_prov_auth+0x2a>
   111b4:	200029a3 	.word	0x200029a3
   111b8:	00033702 	.word	0x00033702
   111bc:	0002dcac 	.word	0x0002dcac
   111c0:	200029a0 	.word	0x200029a0
   111c4:	00033707 	.word	0x00033707
   111c8:	2000299c 	.word	0x2000299c

000111cc <bt_mesh_prov_get>:
}
   111cc:	4b01      	ldr	r3, [pc, #4]	; (111d4 <bt_mesh_prov_get+0x8>)
   111ce:	6818      	ldr	r0, [r3, #0]
   111d0:	4770      	bx	lr
   111d2:	bf00      	nop
   111d4:	2000299c 	.word	0x2000299c

000111d8 <bt_mesh_prov_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   111d8:	4b04      	ldr	r3, [pc, #16]	; (111ec <bt_mesh_prov_active+0x14>)
   111da:	f3bf 8f5b 	dmb	ish
   111de:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   111e2:	f3bf 8f5b 	dmb	ish
}
   111e6:	f3c0 0040 	ubfx	r0, r0, #1, #1
   111ea:	4770      	bx	lr
   111ec:	200029a0 	.word	0x200029a0

000111f0 <bt_mesh_prov_bearer_cb_get>:
};

const struct prov_bearer_cb *bt_mesh_prov_bearer_cb_get(void)
{
	return &prov_bearer_cb;
}
   111f0:	4800      	ldr	r0, [pc, #0]	; (111f4 <bt_mesh_prov_bearer_cb_get+0x4>)
   111f2:	4770      	bx	lr
   111f4:	0002e638 	.word	0x0002e638

000111f8 <bt_mesh_prov_complete>:

void bt_mesh_prov_complete(uint16_t net_idx, uint16_t addr,const uint8_t net_key[16])
{
	if (bt_mesh_prov->complete) {
   111f8:	4b02      	ldr	r3, [pc, #8]	; (11204 <bt_mesh_prov_complete+0xc>)
   111fa:	681b      	ldr	r3, [r3, #0]
   111fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   111fe:	b103      	cbz	r3, 11202 <bt_mesh_prov_complete+0xa>
		bt_mesh_prov->complete(net_idx, addr,net_key);
   11200:	4718      	bx	r3
	}
}
   11202:	4770      	bx	lr
   11204:	2000299c 	.word	0x2000299c

00011208 <bt_mesh_prov_reset>:

void bt_mesh_prov_reset(void)
{
   11208:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_reset();
   1120a:	f01a fe26 	bl	2be5a <pb_adv_reset>

	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_reset();
	}

	bt_mesh_prov_reset_state(NULL);
   1120e:	2000      	movs	r0, #0
   11210:	f7ff fefc 	bl	1100c <bt_mesh_prov_reset_state>

	if (bt_mesh_prov->reset) {
   11214:	4b03      	ldr	r3, [pc, #12]	; (11224 <bt_mesh_prov_reset+0x1c>)
   11216:	681b      	ldr	r3, [r3, #0]
   11218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1121a:	b113      	cbz	r3, 11222 <bt_mesh_prov_reset+0x1a>
		bt_mesh_prov->reset();
	}
}
   1121c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_mesh_prov->reset();
   11220:	4718      	bx	r3
}
   11222:	bd10      	pop	{r4, pc}
   11224:	2000299c 	.word	0x2000299c

00011228 <bt_mesh_prov_init>:

int bt_mesh_prov_init(const struct bt_mesh_prov *prov_info)
{
   11228:	b508      	push	{r3, lr}
	if (!prov_info) {
   1122a:	b140      	cbz	r0, 1123e <bt_mesh_prov_init+0x16>
		BT_ERR("No provisioning context provided");
		return -EINVAL;
	}

	bt_mesh_prov = prov_info;
   1122c:	4b05      	ldr	r3, [pc, #20]	; (11244 <bt_mesh_prov_init+0x1c>)
   1122e:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_BT_MESH_PB_ADV)) {
		pb_adv_init();
   11230:	f001 f8a6 	bl	12380 <pb_adv_init>
	if (IS_ENABLED(CONFIG_BT_MESH_PB_GATT)) {
		pb_gatt_init();
	}

	return bt_mesh_prov_reset_state(NULL);
}
   11234:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(NULL);
   11238:	2000      	movs	r0, #0
   1123a:	f7ff bee7 	b.w	1100c <bt_mesh_prov_reset_state>
}
   1123e:	f06f 0015 	mvn.w	r0, #21
   11242:	bd08      	pop	{r3, pc}
   11244:	2000299c 	.word	0x2000299c

00011248 <bt_mesh_prov_send>:
extern const struct bt_mesh_prov *bt_mesh_prov;

static inline int bt_mesh_prov_send(struct net_buf_simple *buf,
				    prov_bearer_send_complete_t cb)
{
	return bt_mesh_prov_link.bearer->send(buf, cb, NULL);
   11248:	4b02      	ldr	r3, [pc, #8]	; (11254 <bt_mesh_prov_send+0xc>)
   1124a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   1124e:	2200      	movs	r2, #0
   11250:	689b      	ldr	r3, [r3, #8]
   11252:	4718      	bx	r3
   11254:	200029a0 	.word	0x200029a0

00011258 <prov_link_close>:
}

static void prov_link_close(enum prov_bearer_link_status status)
{
	BT_DBG("%u", status);
	bt_mesh_prov_link.expect = PROV_NO_PDU;
   11258:	4b03      	ldr	r3, [pc, #12]	; (11268 <prov_link_close+0x10>)
   1125a:	22ff      	movs	r2, #255	; 0xff
   1125c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	bt_mesh_prov_link.bearer->link_close(status);
   11260:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   11264:	695b      	ldr	r3, [r3, #20]
   11266:	4718      	bx	r3
   11268:	200029a0 	.word	0x200029a0

0001126c <reset_state>:
{
   1126c:	b508      	push	{r3, lr}
	if (prov_device.node != NULL) {
   1126e:	4b05      	ldr	r3, [pc, #20]	; (11284 <reset_state+0x18>)
   11270:	6818      	ldr	r0, [r3, #0]
   11272:	b110      	cbz	r0, 1127a <reset_state+0xe>
		bt_mesh_cdb_node_del(prov_device.node, false);
   11274:	2100      	movs	r1, #0
   11276:	f01a fe3d 	bl	2bef4 <bt_mesh_cdb_node_del>
}
   1127a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_mesh_prov_reset_state(pub_key_ready);
   1127e:	4802      	ldr	r0, [pc, #8]	; (11288 <reset_state+0x1c>)
   11280:	f7ff bec4 	b.w	1100c <bt_mesh_prov_reset_state>
   11284:	20002acc 	.word	0x20002acc
   11288:	000115f1 	.word	0x000115f1

0001128c <send_confirm>:

	send_start();
}

static void send_confirm(void)
{
   1128c:	b500      	push	{lr}

	BT_DBG("ConfInputs[0]   %s", bt_hex(bt_mesh_prov_link.conf_inputs, 64));
	BT_DBG("ConfInputs[64]  %s", bt_hex(&bt_mesh_prov_link.conf_inputs[64], 64));
	BT_DBG("ConfInputs[128] %s", bt_hex(&bt_mesh_prov_link.conf_inputs[128], 17));

	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   1128e:	491f      	ldr	r1, [pc, #124]	; (1130c <send_confirm+0x80>)
{
   11290:	b089      	sub	sp, #36	; 0x24
	PROV_BUF(cfm, 17);
   11292:	ab03      	add	r3, sp, #12
   11294:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   11298:	f101 0020 	add.w	r0, r1, #32
	PROV_BUF(cfm, 17);
   1129c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   112a0:	9300      	str	r3, [sp, #0]
	if (bt_mesh_prov_conf_salt(bt_mesh_prov_link.conf_inputs,
   112a2:	f019 f81a 	bl	2a2da <bt_mesh_prov_conf_salt>
   112a6:	b128      	cbz	r0, 112b4 <send_confirm+0x28>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   112a8:	2002      	movs	r0, #2
   112aa:	f7ff ffd5 	bl	11258 <prov_link_close>
		BT_ERR("Failed to send Provisioning Confirm");
		return;
	}

	bt_mesh_prov_link.expect = PROV_CONFIRM;
}
   112ae:	b009      	add	sp, #36	; 0x24
   112b0:	f85d fb04 	ldr.w	pc, [sp], #4
	if (bt_mesh_prov_conf_key(bt_mesh_prov_link.dhkey,
   112b4:	4a16      	ldr	r2, [pc, #88]	; (11310 <send_confirm+0x84>)
   112b6:	f1a2 0110 	sub.w	r1, r2, #16
   112ba:	f1a2 0051 	sub.w	r0, r2, #81	; 0x51
   112be:	f7fd feb3 	bl	f028 <bt_mesh_prov_conf_key>
   112c2:	2800      	cmp	r0, #0
   112c4:	d1f0      	bne.n	112a8 <send_confirm+0x1c>
	if (bt_rand(bt_mesh_prov_link.rand, 16)) {
   112c6:	4813      	ldr	r0, [pc, #76]	; (11314 <send_confirm+0x88>)
   112c8:	2110      	movs	r1, #16
   112ca:	f004 fe23 	bl	15f14 <bt_rand>
   112ce:	2800      	cmp	r0, #0
   112d0:	d1ea      	bne.n	112a8 <send_confirm+0x1c>
	bt_mesh_prov_buf_init(&cfm, PROV_CONFIRM);
   112d2:	2105      	movs	r1, #5
   112d4:	4668      	mov	r0, sp
   112d6:	f01a fda2 	bl	2be1e <bt_mesh_prov_buf_init>
			      net_buf_simple_add(&cfm, 16))) {
   112da:	2110      	movs	r1, #16
   112dc:	4668      	mov	r0, sp
   112de:	f01a fedc 	bl	2c09a <net_buf_simple_add>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key,
   112e2:	4a0d      	ldr	r2, [pc, #52]	; (11318 <send_confirm+0x8c>)
			      net_buf_simple_add(&cfm, 16))) {
   112e4:	4603      	mov	r3, r0
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key,
   112e6:	f102 0141 	add.w	r1, r2, #65	; 0x41
   112ea:	f102 0061 	add.w	r0, r2, #97	; 0x61
   112ee:	f019 f803 	bl	2a2f8 <bt_mesh_prov_conf>
   112f2:	4601      	mov	r1, r0
   112f4:	2800      	cmp	r0, #0
   112f6:	d1d7      	bne.n	112a8 <send_confirm+0x1c>
	if (bt_mesh_prov_send(&cfm, NULL)) {
   112f8:	4668      	mov	r0, sp
   112fa:	f7ff ffa5 	bl	11248 <bt_mesh_prov_send>
   112fe:	2800      	cmp	r0, #0
   11300:	d1d5      	bne.n	112ae <send_confirm+0x22>
	bt_mesh_prov_link.expect = PROV_CONFIRM;
   11302:	4b06      	ldr	r3, [pc, #24]	; (1131c <send_confirm+0x90>)
   11304:	2205      	movs	r2, #5
   11306:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   1130a:	e7d0      	b.n	112ae <send_confirm+0x22>
   1130c:	200029f4 	.word	0x200029f4
   11310:	20002a04 	.word	0x20002a04
   11314:	200029e4 	.word	0x200029e4
   11318:	200029a3 	.word	0x200029a3
   1131c:	200029a0 	.word	0x200029a0

00011320 <prov_link_opened>:
{
	reset_state();
}

static void prov_link_opened(void)
{
   11320:	b530      	push	{r4, r5, lr}
	net_buf_simple_add_u8(&inv, prov_device.attention_duration);
   11322:	4d0f      	ldr	r5, [pc, #60]	; (11360 <prov_link_opened+0x40>)
	bt_mesh_prov_link.conf_inputs[0] = prov_device.attention_duration;
   11324:	4c0f      	ldr	r4, [pc, #60]	; (11364 <prov_link_opened+0x44>)
{
   11326:	b085      	sub	sp, #20
	PROV_BUF(inv, 2);
   11328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	bt_mesh_prov_buf_init(&inv, PROV_INVITE);
   1132c:	2100      	movs	r1, #0
   1132e:	a801      	add	r0, sp, #4
	PROV_BUF(inv, 2);
   11330:	9302      	str	r3, [sp, #8]
   11332:	f8cd d004 	str.w	sp, [sp, #4]
   11336:	f8cd d00c 	str.w	sp, [sp, #12]
	bt_mesh_prov_buf_init(&inv, PROV_INVITE);
   1133a:	f01a fd70 	bl	2be1e <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&inv, prov_device.attention_duration);
   1133e:	7a29      	ldrb	r1, [r5, #8]
   11340:	a801      	add	r0, sp, #4
   11342:	f01a feb9 	bl	2c0b8 <net_buf_simple_add_u8>
	bt_mesh_prov_link.conf_inputs[0] = prov_device.attention_duration;
   11346:	7a2b      	ldrb	r3, [r5, #8]
   11348:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
	if (bt_mesh_prov_send(&inv, NULL)) {
   1134c:	2100      	movs	r1, #0
   1134e:	a801      	add	r0, sp, #4
   11350:	f7ff ff7a 	bl	11248 <bt_mesh_prov_send>
   11354:	b910      	cbnz	r0, 1135c <prov_link_opened+0x3c>
	bt_mesh_prov_link.expect = PROV_CAPABILITIES;
   11356:	2301      	movs	r3, #1
   11358:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	send_invite();
}
   1135c:	b005      	add	sp, #20
   1135e:	bd30      	pop	{r4, r5, pc}
   11360:	20002acc 	.word	0x20002acc
   11364:	200029a0 	.word	0x200029a0

00011368 <prov_complete>:
{
   11368:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cdb_node *node = prov_device.node;
   1136a:	4d0b      	ldr	r5, [pc, #44]	; (11398 <prov_complete+0x30>)
   1136c:	682c      	ldr	r4, [r5, #0]
		bt_mesh_store_cdb_node(node);
   1136e:	4620      	mov	r0, r4
   11370:	f7ff fd08 	bl	10d84 <bt_mesh_store_cdb_node>
	prov_device.node = NULL;
   11374:	2000      	movs	r0, #0
   11376:	6028      	str	r0, [r5, #0]
	prov_link_close(PROV_BEARER_LINK_STATUS_SUCCESS);
   11378:	f7ff ff6e 	bl	11258 <prov_link_close>
	if (bt_mesh_prov->node_added) {
   1137c:	4b07      	ldr	r3, [pc, #28]	; (1139c <prov_complete+0x34>)
   1137e:	681b      	ldr	r3, [r3, #0]
   11380:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   11382:	b13d      	cbz	r5, 11394 <prov_complete+0x2c>
		bt_mesh_prov->node_added(node->net_idx, node->uuid, node->addr,
   11384:	7d23      	ldrb	r3, [r4, #20]
   11386:	8a22      	ldrh	r2, [r4, #16]
   11388:	8a60      	ldrh	r0, [r4, #18]
   1138a:	4621      	mov	r1, r4
   1138c:	46ac      	mov	ip, r5
}
   1138e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_mesh_prov->node_added(node->net_idx, node->uuid, node->addr,
   11392:	4760      	bx	ip
}
   11394:	bd70      	pop	{r4, r5, r6, pc}
   11396:	bf00      	nop
   11398:	20002acc 	.word	0x20002acc
   1139c:	2000299c 	.word	0x2000299c

000113a0 <prov_confirm>:
{
   113a0:	b500      	push	{lr}
   113a2:	4601      	mov	r1, r0
   113a4:	b089      	sub	sp, #36	; 0x24
	memcpy(bt_mesh_prov_link.conf, data, 16);
   113a6:	2210      	movs	r2, #16
   113a8:	480e      	ldr	r0, [pc, #56]	; (113e4 <prov_confirm+0x44>)
   113aa:	f015 fafa 	bl	269a2 <memcpy>
	PROV_BUF(rnd, 17);
   113ae:	ab03      	add	r3, sp, #12
   113b0:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   113b4:	2106      	movs	r1, #6
   113b6:	4668      	mov	r0, sp
	PROV_BUF(rnd, 17);
   113b8:	e9cd 2301 	strd	r2, r3, [sp, #4]
   113bc:	9300      	str	r3, [sp, #0]
	bt_mesh_prov_buf_init(&rnd, PROV_RANDOM);
   113be:	f01a fd2e 	bl	2be1e <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&rnd, bt_mesh_prov_link.rand, 16);
   113c2:	4909      	ldr	r1, [pc, #36]	; (113e8 <prov_confirm+0x48>)
   113c4:	2210      	movs	r2, #16
   113c6:	4668      	mov	r0, sp
   113c8:	f01a fe6d 	bl	2c0a6 <net_buf_simple_add_mem>
	if (bt_mesh_prov_send(&rnd, NULL)) {
   113cc:	2100      	movs	r1, #0
   113ce:	4668      	mov	r0, sp
   113d0:	f7ff ff3a 	bl	11248 <bt_mesh_prov_send>
   113d4:	b918      	cbnz	r0, 113de <prov_confirm+0x3e>
	bt_mesh_prov_link.expect = PROV_RANDOM;
   113d6:	4b05      	ldr	r3, [pc, #20]	; (113ec <prov_confirm+0x4c>)
   113d8:	2206      	movs	r2, #6
   113da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
   113de:	b009      	add	sp, #36	; 0x24
   113e0:	f85d fb04 	ldr.w	pc, [sp], #4
   113e4:	200029d4 	.word	0x200029d4
   113e8:	200029e4 	.word	0x200029e4
   113ec:	200029a0 	.word	0x200029a0

000113f0 <prov_random>:
{
   113f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   113f4:	4c55      	ldr	r4, [pc, #340]	; (1154c <prov_random+0x15c>)
{
   113f6:	b09e      	sub	sp, #120	; 0x78
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   113f8:	2210      	movs	r2, #16
   113fa:	4621      	mov	r1, r4
{
   113fc:	4605      	mov	r5, r0
	if (!memcmp(data, bt_mesh_prov_link.rand, 16)) {
   113fe:	f015 fac0 	bl	26982 <memcmp>
   11402:	b918      	cbnz	r0, 1140c <prov_random+0x1c>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   11404:	2002      	movs	r0, #2
   11406:	f7ff ff27 	bl	11258 <prov_link_close>
		return;
   1140a:	e09c      	b.n	11546 <prov_random+0x156>
	if (bt_mesh_prov_conf(bt_mesh_prov_link.conf_key,
   1140c:	ab09      	add	r3, sp, #36	; 0x24
   1140e:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
   11412:	4629      	mov	r1, r5
   11414:	f104 0020 	add.w	r0, r4, #32
   11418:	f018 ff6e 	bl	2a2f8 <bt_mesh_prov_conf>
   1141c:	2800      	cmp	r0, #0
   1141e:	d1f1      	bne.n	11404 <prov_random+0x14>
	if (memcmp(conf_verify, bt_mesh_prov_link.conf, 16)) {
   11420:	2210      	movs	r2, #16
   11422:	f1a4 0110 	sub.w	r1, r4, #16
   11426:	a809      	add	r0, sp, #36	; 0x24
   11428:	f015 faab 	bl	26982 <memcmp>
   1142c:	2800      	cmp	r0, #0
   1142e:	d1e9      	bne.n	11404 <prov_random+0x14>
				    const uint8_t prov_rand[16],
				    const uint8_t dev_rand[16],
				    uint8_t prov_salt[16])
{
	const uint8_t prov_salt_key[16] = { 0 };
	struct bt_mesh_sg sg[] = {
   11430:	2610      	movs	r6, #16
   11432:	f104 0310 	add.w	r3, r4, #16
   11436:	e9cd 6518 	strd	r6, r5, [sp, #96]	; 0x60
		{ conf_salt, 16 },
		{ prov_rand, 16 },
		{ dev_rand, 16 },
	};

	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   1143a:	f10d 0844 	add.w	r8, sp, #68	; 0x44
   1143e:	ad15      	add	r5, sp, #84	; 0x54
	const uint8_t prov_salt_key[16] = { 0 };
   11440:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
   11444:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	struct bt_mesh_sg sg[] = {
   11448:	9315      	str	r3, [sp, #84]	; 0x54
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   1144a:	2203      	movs	r2, #3
   1144c:	f104 03c1 	add.w	r3, r4, #193	; 0xc1
   11450:	4629      	mov	r1, r5
   11452:	4640      	mov	r0, r8
	struct bt_mesh_sg sg[] = {
   11454:	e9cd 6416 	strd	r6, r4, [sp, #88]	; 0x58
   11458:	961a      	str	r6, [sp, #104]	; 0x68
	return bt_mesh_aes_cmac(prov_salt_key, sg, ARRAY_SIZE(sg), prov_salt);
   1145a:	f018 fe12 	bl	2a082 <bt_mesh_aes_cmac>
	if (bt_mesh_prov_salt(bt_mesh_prov_link.conf_salt,
   1145e:	2800      	cmp	r0, #0
   11460:	d1d0      	bne.n	11404 <prov_random+0x14>
	PROV_BUF(pdu, 34);
   11462:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
	return bt_mesh_k1(dhkey, 32, prov_salt, "prsk", session_key);
   11466:	af0d      	add	r7, sp, #52	; 0x34
   11468:	e9cd 3503 	strd	r3, r5, [sp, #12]
   1146c:	9700      	str	r7, [sp, #0]
   1146e:	4b38      	ldr	r3, [pc, #224]	; (11550 <prov_random+0x160>)
   11470:	9502      	str	r5, [sp, #8]
   11472:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
   11476:	2120      	movs	r1, #32
   11478:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   1147c:	f018 fe43 	bl	2a106 <bt_mesh_k1>
	if (err) {
   11480:	2800      	cmp	r0, #0
   11482:	d1bf      	bne.n	11404 <prov_random+0x14>
	err = bt_mesh_k1(dhkey, 32, prov_salt, "prsn", tmp);
   11484:	4b33      	ldr	r3, [pc, #204]	; (11554 <prov_random+0x164>)
   11486:	f8cd 8000 	str.w	r8, [sp]
   1148a:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
   1148e:	2120      	movs	r1, #32
   11490:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   11494:	f018 fe37 	bl	2a106 <bt_mesh_k1>
	if (!err) {
   11498:	2800      	cmp	r0, #0
   1149a:	d1b3      	bne.n	11404 <prov_random+0x14>
			      bt_mesh_prov_link.prov_salt, prov_device.node->dev_key);
   1149c:	4d2e      	ldr	r5, [pc, #184]	; (11558 <prov_random+0x168>)
		memcpy(nonce, tmp + 3, 13);
   1149e:	220d      	movs	r2, #13
   114a0:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   114a4:	a805      	add	r0, sp, #20
   114a6:	f015 fa7c 	bl	269a2 <memcpy>
   114aa:	682b      	ldr	r3, [r5, #0]
   114ac:	3315      	adds	r3, #21
	return bt_mesh_k1(dhkey, 32, prov_salt, "prdk", dev_key);
   114ae:	9300      	str	r3, [sp, #0]
   114b0:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
   114b4:	4b29      	ldr	r3, [pc, #164]	; (1155c <prov_random+0x16c>)
   114b6:	2120      	movs	r1, #32
   114b8:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
   114bc:	f018 fe23 	bl	2a106 <bt_mesh_k1>
	if (err) {
   114c0:	2800      	cmp	r0, #0
   114c2:	d19f      	bne.n	11404 <prov_random+0x14>
	sub = bt_mesh_cdb_subnet_get(prov_device.node->net_idx);
   114c4:	682b      	ldr	r3, [r5, #0]
   114c6:	8a58      	ldrh	r0, [r3, #18]
   114c8:	f001 fbca 	bl	12c60 <bt_mesh_cdb_subnet_get>
	if (sub == NULL) {
   114cc:	4604      	mov	r4, r0
   114ce:	2800      	cmp	r0, #0
   114d0:	d098      	beq.n	11404 <prov_random+0x14>
	bt_mesh_prov_buf_init(&pdu, PROV_DATA);
   114d2:	2107      	movs	r1, #7
   114d4:	a802      	add	r0, sp, #8
   114d6:	f01a fca2 	bl	2be1e <bt_mesh_prov_buf_init>
	net_buf_simple_add_mem(&pdu, sub->keys[sub->kr_flag].net_key, 16);
   114da:	78a1      	ldrb	r1, [r4, #2]
   114dc:	eb04 1101 	add.w	r1, r4, r1, lsl #4
   114e0:	4632      	mov	r2, r6
   114e2:	3104      	adds	r1, #4
   114e4:	a802      	add	r0, sp, #8
   114e6:	f01a fdde 	bl	2c0a6 <net_buf_simple_add_mem>
	net_buf_simple_add_be16(&pdu, prov_device.node->net_idx);
   114ea:	682b      	ldr	r3, [r5, #0]
   114ec:	a802      	add	r0, sp, #8
   114ee:	8a59      	ldrh	r1, [r3, #18]
   114f0:	f01a fdf4 	bl	2c0dc <net_buf_simple_add_be16>
	net_buf_simple_add_u8(&pdu, bt_mesh_cdb_subnet_flags(sub));
   114f4:	4620      	mov	r0, r4
   114f6:	f001 fc29 	bl	12d4c <bt_mesh_cdb_subnet_flags>
   114fa:	4601      	mov	r1, r0
   114fc:	a802      	add	r0, sp, #8
   114fe:	f01a fddb 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_be32(&pdu, bt_mesh_cdb.iv_index);
   11502:	4b17      	ldr	r3, [pc, #92]	; (11560 <prov_random+0x170>)
   11504:	a802      	add	r0, sp, #8
   11506:	6819      	ldr	r1, [r3, #0]
   11508:	f01a fdff 	bl	2c10a <net_buf_simple_add_be32>
	net_buf_simple_add_be16(&pdu, prov_device.node->addr);
   1150c:	682b      	ldr	r3, [r5, #0]
   1150e:	a802      	add	r0, sp, #8
   11510:	8a19      	ldrh	r1, [r3, #16]
   11512:	f01a fde3 	bl	2c0dc <net_buf_simple_add_be16>
	net_buf_simple_add(&pdu, 8); /* For MIC */
   11516:	2108      	movs	r1, #8
   11518:	eb0d 0001 	add.w	r0, sp, r1
   1151c:	f01a fdbd 	bl	2c09a <net_buf_simple_add>
	err = bt_mesh_prov_encrypt(session_key, nonce, &pdu.data[1],
   11520:	9b02      	ldr	r3, [sp, #8]
   11522:	3301      	adds	r3, #1
   11524:	a905      	add	r1, sp, #20
   11526:	461a      	mov	r2, r3
   11528:	4638      	mov	r0, r7
   1152a:	f018 fef2 	bl	2a312 <bt_mesh_prov_encrypt>
	if (err) {
   1152e:	4601      	mov	r1, r0
   11530:	2800      	cmp	r0, #0
   11532:	f47f af67 	bne.w	11404 <prov_random+0x14>
	if (bt_mesh_prov_send(&pdu, NULL)) {
   11536:	a802      	add	r0, sp, #8
   11538:	f7ff fe86 	bl	11248 <bt_mesh_prov_send>
   1153c:	b918      	cbnz	r0, 11546 <prov_random+0x156>
	bt_mesh_prov_link.expect = PROV_COMPLETE;
   1153e:	4b09      	ldr	r3, [pc, #36]	; (11564 <prov_random+0x174>)
   11540:	2208      	movs	r2, #8
   11542:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
   11546:	b01e      	add	sp, #120	; 0x78
   11548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1154c:	200029e4 	.word	0x200029e4
   11550:	00033715 	.word	0x00033715
   11554:	0003371a 	.word	0x0003371a
   11558:	20002acc 	.word	0x20002acc
   1155c:	0003371f 	.word	0x0003371f
   11560:	20000530 	.word	0x20000530
   11564:	200029a0 	.word	0x200029a0

00011568 <send_pub_key>:
{
   11568:	b510      	push	{r4, lr}
   1156a:	b094      	sub	sp, #80	; 0x50
	PROV_BUF(buf, 65);
   1156c:	ab03      	add	r3, sp, #12
   1156e:	f44f 0282 	mov.w	r2, #4259840	; 0x410000
   11572:	e9cd 2301 	strd	r2, r3, [sp, #4]
   11576:	9300      	str	r3, [sp, #0]
	key = bt_pub_key_get();
   11578:	f7f7 fcf2 	bl	8f60 <bt_pub_key_get>
	if (!key) {
   1157c:	4604      	mov	r4, r0
   1157e:	b920      	cbnz	r0, 1158a <send_pub_key+0x22>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   11580:	2002      	movs	r0, #2
   11582:	f7ff fe69 	bl	11258 <prov_link_close>
}
   11586:	b014      	add	sp, #80	; 0x50
   11588:	bd10      	pop	{r4, pc}
	bt_mesh_prov_buf_init(&buf, PROV_PUB_KEY);
   1158a:	4668      	mov	r0, sp
   1158c:	2103      	movs	r1, #3
   1158e:	f01a fc46 	bl	2be1e <bt_mesh_prov_buf_init>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), key, 32);
   11592:	2120      	movs	r1, #32
   11594:	4668      	mov	r0, sp
   11596:	f01a fd80 	bl	2c09a <net_buf_simple_add>
   1159a:	4621      	mov	r1, r4
   1159c:	f01a fc4b 	bl	2be36 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(net_buf_simple_add(&buf, 32), &key[32], 32);
   115a0:	2120      	movs	r1, #32
   115a2:	4668      	mov	r0, sp
   115a4:	f01a fd79 	bl	2c09a <net_buf_simple_add>
   115a8:	f104 0120 	add.w	r1, r4, #32
   115ac:	f01a fc43 	bl	2be36 <sys_memcpy_swap.constprop.0>
	memcpy(&bt_mesh_prov_link.conf_inputs[17], &buf.data[1], 64);
   115b0:	9900      	ldr	r1, [sp, #0]
   115b2:	4805      	ldr	r0, [pc, #20]	; (115c8 <send_pub_key+0x60>)
   115b4:	2240      	movs	r2, #64	; 0x40
   115b6:	3101      	adds	r1, #1
   115b8:	f015 f9f3 	bl	269a2 <memcpy>
	if (bt_mesh_prov_send(&buf, public_key_sent)) {
   115bc:	4903      	ldr	r1, [pc, #12]	; (115cc <send_pub_key+0x64>)
   115be:	4668      	mov	r0, sp
   115c0:	f7ff fe42 	bl	11248 <bt_mesh_prov_send>
		return;
   115c4:	e7df      	b.n	11586 <send_pub_key+0x1e>
   115c6:	bf00      	nop
   115c8:	20002a25 	.word	0x20002a25
   115cc:	00011785 	.word	0x00011785

000115d0 <start_sent>:
{
   115d0:	b508      	push	{r3, lr}
	if (!bt_pub_key_get()) {
   115d2:	f7f7 fcc5 	bl	8f60 <bt_pub_key_get>
   115d6:	b928      	cbnz	r0, 115e4 <start_sent+0x14>
}
   115d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   115dc:	4803      	ldr	r0, [pc, #12]	; (115ec <start_sent+0x1c>)
   115de:	2101      	movs	r1, #1
   115e0:	f01a bc0a 	b.w	2bdf8 <atomic_or>
   115e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		send_pub_key();
   115e8:	f7ff bfbe 	b.w	11568 <send_pub_key>
   115ec:	20002ac0 	.word	0x20002ac0

000115f0 <pub_key_ready>:
	if (!pkey) {
   115f0:	b180      	cbz	r0, 11614 <pub_key_ready+0x24>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   115f2:	f3bf 8f5b 	dmb	ish
   115f6:	4b08      	ldr	r3, [pc, #32]	; (11618 <pub_key_ready+0x28>)
   115f8:	e853 2f00 	ldrex	r2, [r3]
   115fc:	f022 0101 	bic.w	r1, r2, #1
   11600:	e843 1000 	strex	r0, r1, [r3]
   11604:	2800      	cmp	r0, #0
   11606:	d1f7      	bne.n	115f8 <pub_key_ready+0x8>
   11608:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_PUB_KEY)) {
   1160c:	07d3      	lsls	r3, r2, #31
   1160e:	d501      	bpl.n	11614 <pub_key_ready+0x24>
		send_pub_key();
   11610:	f7ff bfaa 	b.w	11568 <send_pub_key>
}
   11614:	4770      	bx	lr
   11616:	bf00      	nop
   11618:	20002ac0 	.word	0x20002ac0

0001161c <local_input_complete>:
   1161c:	4b08      	ldr	r3, [pc, #32]	; (11640 <local_input_complete+0x24>)
   1161e:	f3bf 8f5b 	dmb	ish
   11622:	e853 2f00 	ldrex	r2, [r3]
   11626:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
   1162a:	e843 1000 	strex	r0, r1, [r3]
   1162e:	2800      	cmp	r0, #0
   11630:	d1f7      	bne.n	11622 <local_input_complete+0x6>
   11632:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_CONFIRM)) {
   11636:	0553      	lsls	r3, r2, #21
   11638:	d501      	bpl.n	1163e <local_input_complete+0x22>
		send_confirm();
   1163a:	f7ff be27 	b.w	1128c <send_confirm>
}
   1163e:	4770      	bx	lr
   11640:	20002ac0 	.word	0x20002ac0

00011644 <prov_dh_key_gen>:
{
   11644:	b500      	push	{lr}
   11646:	b091      	sub	sp, #68	; 0x44
	sys_memcpy_swap(remote_pk_le, remote_pk, 32);
   11648:	490e      	ldr	r1, [pc, #56]	; (11684 <prov_dh_key_gen+0x40>)
   1164a:	4668      	mov	r0, sp
   1164c:	f01a fbf3 	bl	2be36 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&remote_pk_le[32], &remote_pk[32], 32);
   11650:	490d      	ldr	r1, [pc, #52]	; (11688 <prov_dh_key_gen+0x44>)
   11652:	a808      	add	r0, sp, #32
   11654:	f01a fbef 	bl	2be36 <sys_memcpy_swap.constprop.0>
	if (bt_dh_key_gen(remote_pk_le, prov_dh_key_cb)) {
   11658:	490c      	ldr	r1, [pc, #48]	; (1168c <prov_dh_key_gen+0x48>)
   1165a:	4668      	mov	r0, sp
   1165c:	f7f7 fc8e 	bl	8f7c <bt_dh_key_gen>
   11660:	b110      	cbz	r0, 11668 <prov_dh_key_gen+0x24>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   11662:	2002      	movs	r0, #2
   11664:	f7ff fdf8 	bl	11258 <prov_link_close>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11668:	f3bf 8f5b 	dmb	ish
   1166c:	4b08      	ldr	r3, [pc, #32]	; (11690 <prov_dh_key_gen+0x4c>)
   1166e:	681a      	ldr	r2, [r3, #0]
   11670:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, NOTIFY_INPUT_COMPLETE)) {
   11674:	06d2      	lsls	r2, r2, #27
		bt_mesh_prov_link.expect = PROV_INPUT_COMPLETE;
   11676:	bf44      	itt	mi
   11678:	2204      	movmi	r2, #4
   1167a:	f803 2ced 	strbmi.w	r2, [r3, #-237]
}
   1167e:	b011      	add	sp, #68	; 0x44
   11680:	f85d fb04 	ldr.w	pc, [sp], #4
   11684:	20002a65 	.word	0x20002a65
   11688:	20002a85 	.word	0x20002a85
   1168c:	0001171d 	.word	0x0001171d
   11690:	20002ac0 	.word	0x20002ac0

00011694 <prov_pub_key>:
{
   11694:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11696:	4c0a      	ldr	r4, [pc, #40]	; (116c0 <prov_pub_key+0x2c>)
   11698:	4605      	mov	r5, r0
   1169a:	f44f 7180 	mov.w	r1, #256	; 0x100
   1169e:	4620      	mov	r0, r4
   116a0:	f01a fbaa 	bl	2bdf8 <atomic_or>
	memcpy(&bt_mesh_prov_link.conf_inputs[81], data, 64);
   116a4:	4629      	mov	r1, r5
   116a6:	2240      	movs	r2, #64	; 0x40
   116a8:	f1a4 005b 	sub.w	r0, r4, #91	; 0x5b
   116ac:	f015 f979 	bl	269a2 <memcpy>
	bt_mesh_prov_link.bearer->clear_tx();
   116b0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   116b4:	68db      	ldr	r3, [r3, #12]
   116b6:	4798      	blx	r3
}
   116b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	prov_dh_key_gen();
   116bc:	f7ff bfc2 	b.w	11644 <prov_dh_key_gen>
   116c0:	20002ac0 	.word	0x20002ac0

000116c4 <prov_input_complete>:
{
   116c4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   116c6:	4c13      	ldr	r4, [pc, #76]	; (11714 <prov_input_complete+0x50>)
   116c8:	f3bf 8f5b 	dmb	ish
   116cc:	e854 2f00 	ldrex	r2, [r4]
   116d0:	f022 0310 	bic.w	r3, r2, #16
   116d4:	e844 3100 	strex	r1, r3, [r4]
   116d8:	2900      	cmp	r1, #0
   116da:	d1f7      	bne.n	116cc <prov_input_complete+0x8>
   116dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags,
   116e0:	06d2      	lsls	r2, r2, #27
   116e2:	d504      	bpl.n	116ee <prov_input_complete+0x2a>
	    bt_mesh_prov->input_complete) {
   116e4:	4b0c      	ldr	r3, [pc, #48]	; (11718 <prov_input_complete+0x54>)
   116e6:	681b      	ldr	r3, [r3, #0]
   116e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				      NOTIFY_INPUT_COMPLETE) &&
   116ea:	b103      	cbz	r3, 116ee <prov_input_complete+0x2a>
		bt_mesh_prov->input_complete();
   116ec:	4798      	blx	r3
   116ee:	f3bf 8f5b 	dmb	ish
   116f2:	e854 3f00 	ldrex	r3, [r4]
   116f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
   116fa:	e844 2100 	strex	r1, r2, [r4]
   116fe:	2900      	cmp	r1, #0
   11700:	d1f7      	bne.n	116f2 <prov_input_complete+0x2e>
   11702:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_mesh_prov_link.flags, WAIT_CONFIRM)) {
   11706:	055b      	lsls	r3, r3, #21
   11708:	d503      	bpl.n	11712 <prov_input_complete+0x4e>
}
   1170a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		send_confirm();
   1170e:	f7ff bdbd 	b.w	1128c <send_confirm>
}
   11712:	bd10      	pop	{r4, pc}
   11714:	20002ac0 	.word	0x20002ac0
   11718:	2000299c 	.word	0x2000299c

0001171c <prov_dh_key_cb>:
{
   1171c:	b510      	push	{r4, lr}
	if (!dhkey) {
   1171e:	4601      	mov	r1, r0
   11720:	b920      	cbnz	r0, 1172c <prov_dh_key_cb+0x10>
}
   11722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   11726:	2002      	movs	r0, #2
   11728:	f7ff bd96 	b.w	11258 <prov_link_close>
	sys_memcpy_swap(bt_mesh_prov_link.dhkey, dhkey, 32);
   1172c:	4c13      	ldr	r4, [pc, #76]	; (1177c <prov_dh_key_cb+0x60>)
   1172e:	4620      	mov	r0, r4
   11730:	f01a fb81 	bl	2be36 <sys_memcpy_swap.constprop.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11734:	f3bf 8f5b 	dmb	ish
   11738:	f8d4 310d 	ldr.w	r3, [r4, #269]	; 0x10d
   1173c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_STRING) ||
   11740:	0719      	lsls	r1, r3, #28
   11742:	d506      	bpl.n	11752 <prov_dh_key_cb+0x36>
}
   11744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11748:	480d      	ldr	r0, [pc, #52]	; (11780 <prov_dh_key_cb+0x64>)
   1174a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1174e:	f01a bb53 	b.w	2bdf8 <atomic_or>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11752:	f3bf 8f5b 	dmb	ish
   11756:	f8d4 310d 	ldr.w	r3, [r4, #269]	; 0x10d
   1175a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, WAIT_STRING) ||
   1175e:	075a      	lsls	r2, r3, #29
   11760:	d4f0      	bmi.n	11744 <prov_dh_key_cb+0x28>
   11762:	f3bf 8f5b 	dmb	ish
   11766:	f8d4 310d 	ldr.w	r3, [r4, #269]	; 0x10d
   1176a:	f3bf 8f5b 	dmb	ish
	    atomic_test_bit(bt_mesh_prov_link.flags, WAIT_NUMBER) ||
   1176e:	06db      	lsls	r3, r3, #27
   11770:	d4e8      	bmi.n	11744 <prov_dh_key_cb+0x28>
}
   11772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	send_confirm();
   11776:	f7ff bd89 	b.w	1128c <send_confirm>
   1177a:	bf00      	nop
   1177c:	200029b3 	.word	0x200029b3
   11780:	20002ac0 	.word	0x20002ac0

00011784 <public_key_sent>:
{
   11784:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11786:	4c0e      	ldr	r4, [pc, #56]	; (117c0 <public_key_sent+0x3c>)
   11788:	2180      	movs	r1, #128	; 0x80
   1178a:	4620      	mov	r0, r4
   1178c:	f01a fb34 	bl	2bdf8 <atomic_or>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11790:	f3bf 8f5b 	dmb	ish
   11794:	6823      	ldr	r3, [r4, #0]
   11796:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, OOB_PUB_KEY) &&
   1179a:	065a      	lsls	r2, r3, #25
   1179c:	d50a      	bpl.n	117b4 <public_key_sent+0x30>
   1179e:	f3bf 8f5b 	dmb	ish
   117a2:	6823      	ldr	r3, [r4, #0]
   117a4:	f3bf 8f5b 	dmb	ish
   117a8:	05db      	lsls	r3, r3, #23
   117aa:	d503      	bpl.n	117b4 <public_key_sent+0x30>
}
   117ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_dh_key_gen();
   117b0:	f7ff bf48 	b.w	11644 <prov_dh_key_gen>
	bt_mesh_prov_link.expect = PROV_PUB_KEY;
   117b4:	4b03      	ldr	r3, [pc, #12]	; (117c4 <public_key_sent+0x40>)
   117b6:	2203      	movs	r2, #3
   117b8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
   117bc:	bd10      	pop	{r4, pc}
   117be:	bf00      	nop
   117c0:	20002ac0 	.word	0x20002ac0
   117c4:	200029a0 	.word	0x200029a0

000117c8 <prov_capabilities>:
{
   117c8:	b570      	push	{r4, r5, r6, lr}
	return ((uint16_t)src[0] << 8) | src[1];
   117ca:	7841      	ldrb	r1, [r0, #1]
   117cc:	7883      	ldrb	r3, [r0, #2]
	caps.elem_count = data[0];
   117ce:	7802      	ldrb	r2, [r0, #0]
{
   117d0:	b088      	sub	sp, #32
   117d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	caps.algorithms = sys_get_be16(&data[1]);
   117d6:	f8ad 300a 	strh.w	r3, [sp, #10]
	caps.pub_key_type = data[3];
   117da:	78c3      	ldrb	r3, [r0, #3]
   117dc:	f88d 300c 	strb.w	r3, [sp, #12]
	caps.static_oob = data[4];
   117e0:	7903      	ldrb	r3, [r0, #4]
   117e2:	f88d 300d 	strb.w	r3, [sp, #13]
	caps.output_size = data[5];
   117e6:	7943      	ldrb	r3, [r0, #5]
   117e8:	f88d 3010 	strb.w	r3, [sp, #16]
	caps.output_actions = (bt_mesh_output_action_t)data[6];
   117ec:	7983      	ldrb	r3, [r0, #6]
   117ee:	f88d 300e 	strb.w	r3, [sp, #14]
	caps.input_size = data[8];
   117f2:	7a03      	ldrb	r3, [r0, #8]
   117f4:	f88d 3011 	strb.w	r3, [sp, #17]
	caps.input_actions = (bt_mesh_input_action_t)data[9];
   117f8:	7a43      	ldrb	r3, [r0, #9]
	caps.elem_count = data[0];
   117fa:	f88d 2008 	strb.w	r2, [sp, #8]
{
   117fe:	4604      	mov	r4, r0
	caps.input_actions = (bt_mesh_input_action_t)data[9];
   11800:	f88d 300f 	strb.w	r3, [sp, #15]
	if (data[0] == 0) {
   11804:	b922      	cbnz	r2, 11810 <prov_capabilities+0x48>
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   11806:	2002      	movs	r0, #2
   11808:	f7ff fd26 	bl	11258 <prov_link_close>
}
   1180c:	b008      	add	sp, #32
   1180e:	bd70      	pop	{r4, r5, r6, pc}
		bt_mesh_cdb_node_alloc(prov_device.uuid,
   11810:	4d4e      	ldr	r5, [pc, #312]	; (1194c <prov_capabilities+0x184>)
   11812:	88eb      	ldrh	r3, [r5, #6]
   11814:	88a9      	ldrh	r1, [r5, #4]
   11816:	f105 0009 	add.w	r0, r5, #9
   1181a:	f001 faa7 	bl	12d6c <bt_mesh_cdb_node_alloc>
	prov_device.node =
   1181e:	6028      	str	r0, [r5, #0]
	if (prov_device.node == NULL) {
   11820:	2800      	cmp	r0, #0
   11822:	d0f0      	beq.n	11806 <prov_capabilities+0x3e>
	if (bt_mesh_prov->capabilities) {
   11824:	4d4a      	ldr	r5, [pc, #296]	; (11950 <prov_capabilities+0x188>)
	memcpy(&bt_mesh_prov_link.conf_inputs[1], data, 11);
   11826:	484b      	ldr	r0, [pc, #300]	; (11954 <prov_capabilities+0x18c>)
   11828:	220b      	movs	r2, #11
   1182a:	4621      	mov	r1, r4
   1182c:	f015 f8b9 	bl	269a2 <memcpy>
	if (bt_mesh_prov->capabilities) {
   11830:	682b      	ldr	r3, [r5, #0]
   11832:	699b      	ldr	r3, [r3, #24]
   11834:	b10b      	cbz	r3, 1183a <prov_capabilities+0x72>
		bt_mesh_prov->capabilities(&caps);
   11836:	a802      	add	r0, sp, #8
   11838:	4798      	blx	r3
	if (bt_mesh_prov_link.oob_method == AUTH_METHOD_STATIC) {
   1183a:	4c47      	ldr	r4, [pc, #284]	; (11958 <prov_capabilities+0x190>)
   1183c:	7823      	ldrb	r3, [r4, #0]
   1183e:	2b01      	cmp	r3, #1
   11840:	d14b      	bne.n	118da <prov_capabilities+0x112>
		if (!caps->static_oob) {
   11842:	f89d 300d 	ldrb.w	r3, [sp, #13]
		if (!bt_mesh_prov->input) {
   11846:	2b00      	cmp	r3, #0
   11848:	d0dd      	beq.n	11806 <prov_capabilities+0x3e>
	PROV_BUF(start, 6);
   1184a:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
	bt_mesh_prov_buf_init(&start, PROV_START);
   1184e:	2102      	movs	r1, #2
   11850:	a805      	add	r0, sp, #20
   11852:	4d42      	ldr	r5, [pc, #264]	; (1195c <prov_capabilities+0x194>)
	PROV_BUF(start, 6);
   11854:	9306      	str	r3, [sp, #24]
   11856:	f8cd d014 	str.w	sp, [sp, #20]
   1185a:	f8cd d01c 	str.w	sp, [sp, #28]
	bt_mesh_prov_buf_init(&start, PROV_START);
   1185e:	f01a fade 	bl	2be1e <bt_mesh_prov_buf_init>
	net_buf_simple_add_u8(&start, PROV_ALG_P256);
   11862:	2100      	movs	r1, #0
   11864:	a805      	add	r0, sp, #20
   11866:	f01a fc27 	bl	2c0b8 <net_buf_simple_add_u8>
   1186a:	f3bf 8f5b 	dmb	ish
   1186e:	682b      	ldr	r3, [r5, #0]
   11870:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_mesh_prov_link.flags, REMOTE_PUB_KEY) &&
   11874:	05db      	lsls	r3, r3, #23
   11876:	d555      	bpl.n	11924 <prov_capabilities+0x15c>
   11878:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1187c:	2901      	cmp	r1, #1
   1187e:	d151      	bne.n	11924 <prov_capabilities+0x15c>
		net_buf_simple_add_u8(&start, PUB_KEY_OOB);
   11880:	a805      	add	r0, sp, #20
   11882:	f01a fc19 	bl	2c0b8 <net_buf_simple_add_u8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   11886:	2140      	movs	r1, #64	; 0x40
   11888:	4628      	mov	r0, r5
   1188a:	f01a fab5 	bl	2bdf8 <atomic_or>
	if (bt_mesh_prov_link.oob_method == AUTH_METHOD_INPUT) {
   1188e:	7821      	ldrb	r1, [r4, #0]
   11890:	2903      	cmp	r1, #3
   11892:	d14c      	bne.n	1192e <prov_capabilities+0x166>
		if (bt_mesh_prov_link.oob_action == INPUT_OOB_STRING) {
   11894:	7863      	ldrb	r3, [r4, #1]
			action = OUTPUT_OOB_NUMBER;
   11896:	2b03      	cmp	r3, #3
   11898:	bf0c      	ite	eq
   1189a:	2504      	moveq	r5, #4
   1189c:	2503      	movne	r5, #3
   1189e:	2602      	movs	r6, #2
	net_buf_simple_add_u8(&start, bt_mesh_prov_link.oob_method);
   118a0:	a805      	add	r0, sp, #20
   118a2:	f01a fc09 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&start, bt_mesh_prov_link.oob_action);
   118a6:	7861      	ldrb	r1, [r4, #1]
   118a8:	a805      	add	r0, sp, #20
   118aa:	f01a fc05 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&start, bt_mesh_prov_link.oob_size);
   118ae:	78a1      	ldrb	r1, [r4, #2]
   118b0:	a805      	add	r0, sp, #20
   118b2:	f01a fc01 	bl	2c0b8 <net_buf_simple_add_u8>
	memcpy(&bt_mesh_prov_link.conf_inputs[12], &start.data[1], 5);
   118b6:	9905      	ldr	r1, [sp, #20]
   118b8:	4829      	ldr	r0, [pc, #164]	; (11960 <prov_capabilities+0x198>)
   118ba:	2205      	movs	r2, #5
   118bc:	3101      	adds	r1, #1
   118be:	f015 f870 	bl	269a2 <memcpy>
	if (bt_mesh_prov_auth(method, action, bt_mesh_prov_link.oob_size) < 0) {
   118c2:	78a2      	ldrb	r2, [r4, #2]
   118c4:	4629      	mov	r1, r5
   118c6:	4630      	mov	r0, r6
   118c8:	f7ff fbc2 	bl	11050 <bt_mesh_prov_auth>
   118cc:	2800      	cmp	r0, #0
   118ce:	db9d      	blt.n	1180c <prov_capabilities+0x44>
	if (bt_mesh_prov_send(&start, start_sent)) {
   118d0:	4924      	ldr	r1, [pc, #144]	; (11964 <prov_capabilities+0x19c>)
   118d2:	a805      	add	r0, sp, #20
   118d4:	f7ff fcb8 	bl	11248 <bt_mesh_prov_send>
		return;
   118d8:	e798      	b.n	1180c <prov_capabilities+0x44>
	} else if (bt_mesh_prov_link.oob_method == AUTH_METHOD_INPUT) {
   118da:	2b03      	cmp	r3, #3
   118dc:	d110      	bne.n	11900 <prov_capabilities+0x138>
		if (bt_mesh_prov_link.oob_size > caps->input_size) {
   118de:	78a2      	ldrb	r2, [r4, #2]
   118e0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   118e4:	429a      	cmp	r2, r3
   118e6:	d88e      	bhi.n	11806 <prov_capabilities+0x3e>
		if (!(BIT(bt_mesh_prov_link.oob_action) & caps->input_actions)) {
   118e8:	7862      	ldrb	r2, [r4, #1]
   118ea:	f89d 300f 	ldrb.w	r3, [sp, #15]
   118ee:	40d3      	lsrs	r3, r2
   118f0:	07d9      	lsls	r1, r3, #31
   118f2:	d588      	bpl.n	11806 <prov_capabilities+0x3e>
		if (bt_mesh_prov_link.oob_action == INPUT_OOB_STRING) {
   118f4:	682b      	ldr	r3, [r5, #0]
   118f6:	2a03      	cmp	r2, #3
			if (!bt_mesh_prov->output_string) {
   118f8:	bf0c      	ite	eq
   118fa:	6a1b      	ldreq	r3, [r3, #32]
			if (!bt_mesh_prov->output_number) {
   118fc:	69db      	ldrne	r3, [r3, #28]
   118fe:	e7a2      	b.n	11846 <prov_capabilities+0x7e>
	} else if (bt_mesh_prov_link.oob_method == AUTH_METHOD_OUTPUT) {
   11900:	2b02      	cmp	r3, #2
   11902:	d1a2      	bne.n	1184a <prov_capabilities+0x82>
		if (bt_mesh_prov_link.oob_size > caps->output_size) {
   11904:	78a2      	ldrb	r2, [r4, #2]
   11906:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1190a:	429a      	cmp	r2, r3
   1190c:	f63f af7b 	bhi.w	11806 <prov_capabilities+0x3e>
		if (!(BIT(bt_mesh_prov_link.oob_action) & caps->output_actions)) {
   11910:	7862      	ldrb	r2, [r4, #1]
   11912:	f89d 300e 	ldrb.w	r3, [sp, #14]
   11916:	40d3      	lsrs	r3, r2
   11918:	07da      	lsls	r2, r3, #31
   1191a:	f57f af74 	bpl.w	11806 <prov_capabilities+0x3e>
		if (!bt_mesh_prov->input) {
   1191e:	682b      	ldr	r3, [r5, #0]
   11920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11922:	e790      	b.n	11846 <prov_capabilities+0x7e>
		net_buf_simple_add_u8(&start, PUB_KEY_NO_OOB);
   11924:	2100      	movs	r1, #0
   11926:	a805      	add	r0, sp, #20
   11928:	f01a fbc6 	bl	2c0b8 <net_buf_simple_add_u8>
   1192c:	e7af      	b.n	1188e <prov_capabilities+0xc6>
	} else if (bt_mesh_prov_link.oob_method == AUTH_METHOD_OUTPUT) {
   1192e:	2902      	cmp	r1, #2
   11930:	d105      	bne.n	1193e <prov_capabilities+0x176>
		if (bt_mesh_prov_link.oob_action == OUTPUT_OOB_STRING) {
   11932:	7863      	ldrb	r3, [r4, #1]
   11934:	2b04      	cmp	r3, #4
   11936:	d005      	beq.n	11944 <prov_capabilities+0x17c>
			action = INPUT_OOB_NUMBER;
   11938:	460d      	mov	r5, r1
		method = AUTH_METHOD_INPUT;
   1193a:	2603      	movs	r6, #3
   1193c:	e7b0      	b.n	118a0 <prov_capabilities+0xd8>
   1193e:	460e      	mov	r6, r1
		action = 0x00;
   11940:	2500      	movs	r5, #0
   11942:	e7ad      	b.n	118a0 <prov_capabilities+0xd8>
			action = INPUT_OOB_STRING;
   11944:	2503      	movs	r5, #3
		method = AUTH_METHOD_INPUT;
   11946:	462e      	mov	r6, r5
   11948:	e7aa      	b.n	118a0 <prov_capabilities+0xd8>
   1194a:	bf00      	nop
   1194c:	20002acc 	.word	0x20002acc
   11950:	2000299c 	.word	0x2000299c
   11954:	20002a15 	.word	0x20002a15
   11958:	200029a0 	.word	0x200029a0
   1195c:	20002ac0 	.word	0x20002ac0
   11960:	20002a20 	.word	0x20002a20
   11964:	000115d1 	.word	0x000115d1

00011968 <bt_mesh_pb_adv_open>:
}

#if defined(CONFIG_BT_MESH_PB_ADV)
int bt_mesh_pb_adv_open(const uint8_t uuid[16], uint16_t net_idx, uint16_t addr,
			uint8_t attention_duration)
{
   11968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1196c:	4c27      	ldr	r4, [pc, #156]	; (11a0c <bt_mesh_pb_adv_open+0xa4>)
   1196e:	b088      	sub	sp, #32
   11970:	4607      	mov	r7, r0
   11972:	4689      	mov	r9, r1
   11974:	4620      	mov	r0, r4
   11976:	2102      	movs	r1, #2
   11978:	4692      	mov	sl, r2
   1197a:	4698      	mov	r8, r3
   1197c:	f01a fa3c 	bl	2bdf8 <atomic_or>
	int err;

	if (atomic_test_and_set_bit(bt_mesh_prov_link.flags, LINK_ACTIVE)) {
   11980:	f010 0602 	ands.w	r6, r0, #2
   11984:	d13f      	bne.n	11a06 <bt_mesh_pb_adv_open+0x9e>
		return -EBUSY;
	}

	struct bt_uuid_128 uuid_repr = { .uuid = { BT_UUID_TYPE_128 } };
   11986:	2211      	movs	r2, #17
   11988:	4631      	mov	r1, r6
   1198a:	a803      	add	r0, sp, #12
   1198c:	f015 f834 	bl	269f8 <memset>

	memcpy(uuid_repr.val, uuid, 16);
	BT_DBG("Provisioning %s", bt_uuid_str(&uuid_repr.uuid));

	atomic_set_bit(bt_mesh_prov_link.flags, PROVISIONER);
	memcpy(prov_device.uuid, uuid, 16);
   11990:	4d1f      	ldr	r5, [pc, #124]	; (11a10 <bt_mesh_pb_adv_open+0xa8>)
	struct bt_uuid_128 uuid_repr = { .uuid = { BT_UUID_TYPE_128 } };
   11992:	2302      	movs	r3, #2
	memcpy(uuid_repr.val, uuid, 16);
   11994:	2210      	movs	r2, #16
   11996:	4639      	mov	r1, r7
   11998:	f10d 000d 	add.w	r0, sp, #13
	struct bt_uuid_128 uuid_repr = { .uuid = { BT_UUID_TYPE_128 } };
   1199c:	f88d 300c 	strb.w	r3, [sp, #12]
	memcpy(uuid_repr.val, uuid, 16);
   119a0:	f014 ffff 	bl	269a2 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   119a4:	2120      	movs	r1, #32
   119a6:	4620      	mov	r0, r4
   119a8:	f01a fa26 	bl	2bdf8 <atomic_or>
	memcpy(prov_device.uuid, uuid, 16);
   119ac:	2210      	movs	r2, #16
   119ae:	4639      	mov	r1, r7
   119b0:	f105 0009 	add.w	r0, r5, #9
   119b4:	f014 fff5 	bl	269a2 <memcpy>
	prov_device.addr = addr;
	prov_device.net_idx = net_idx;
	prov_device.attention_duration = attention_duration;
	bt_mesh_prov_link.bearer = &pb_adv;
   119b8:	4b16      	ldr	r3, [pc, #88]	; (11a14 <bt_mesh_pb_adv_open+0xac>)
	bt_mesh_prov_link.role = &role_provisioner;
   119ba:	4917      	ldr	r1, [pc, #92]	; (11a18 <bt_mesh_pb_adv_open+0xb0>)

	err = bt_mesh_prov_link.bearer->link_open(prov_device.uuid, PROTOCOL_TIMEOUT,
   119bc:	691f      	ldr	r7, [r3, #16]
	bt_mesh_prov_link.bearer = &pb_adv;
   119be:	f844 3c08 	str.w	r3, [r4, #-8]
	prov_device.addr = addr;
   119c2:	f8a5 a004 	strh.w	sl, [r5, #4]
	prov_device.net_idx = net_idx;
   119c6:	f8a5 9006 	strh.w	r9, [r5, #6]
	prov_device.attention_duration = attention_duration;
   119ca:	f885 8008 	strb.w	r8, [r5, #8]
	bt_mesh_prov_link.role = &role_provisioner;
   119ce:	f844 1c04 	str.w	r1, [r4, #-4]
	err = bt_mesh_prov_link.bearer->link_open(prov_device.uuid, PROTOCOL_TIMEOUT,
   119d2:	f7ff fc0d 	bl	111f0 <bt_mesh_prov_bearer_cb_get>
   119d6:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   119da:	e9cd 0600 	strd	r0, r6, [sp]
   119de:	2300      	movs	r3, #0
   119e0:	f105 0009 	add.w	r0, r5, #9
   119e4:	47b8      	blx	r7
						  bt_mesh_prov_bearer_cb_get(), NULL);
	if (err) {
   119e6:	b158      	cbz	r0, 11a00 <bt_mesh_pb_adv_open+0x98>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   119e8:	f3bf 8f5b 	dmb	ish
   119ec:	e854 3f00 	ldrex	r3, [r4]
   119f0:	f023 0302 	bic.w	r3, r3, #2
   119f4:	e844 3200 	strex	r2, r3, [r4]
   119f8:	2a00      	cmp	r2, #0
   119fa:	d1f7      	bne.n	119ec <bt_mesh_pb_adv_open+0x84>
   119fc:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_mesh_prov_link.flags, LINK_ACTIVE);
	}

	return err;
}
   11a00:	b008      	add	sp, #32
   11a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EBUSY;
   11a06:	f06f 000f 	mvn.w	r0, #15
   11a0a:	e7f9      	b.n	11a00 <bt_mesh_pb_adv_open+0x98>
   11a0c:	20002ac0 	.word	0x20002ac0
   11a10:	20002acc 	.word	0x20002acc
   11a14:	0002e6a8 	.word	0x0002e6a8
   11a18:	0002e648 	.word	0x0002e648

00011a1c <free_segments>:

	return 1 + (len / CONT_PAYLOAD_MAX);
}

static void free_segments(void)
{
   11a1c:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11a1e:	2400      	movs	r4, #0
   11a20:	4d08      	ldr	r5, [pc, #32]	; (11a44 <free_segments+0x28>)

		if (!buf) {
			break;
		}

		link.tx.buf[i] = NULL;
   11a22:	4626      	mov	r6, r4
		struct net_buf *buf = link.tx.buf[i];
   11a24:	f855 0b04 	ldr.w	r0, [r5], #4
		if (!buf) {
   11a28:	b158      	cbz	r0, 11a42 <free_segments+0x26>
		/* Mark as canceled */
		BT_MESH_ADV(buf)->busy = 0U;
   11a2a:	6943      	ldr	r3, [r0, #20]
		link.tx.buf[i] = NULL;
   11a2c:	f845 6c04 	str.w	r6, [r5, #-4]
		BT_MESH_ADV(buf)->busy = 0U;
   11a30:	7a1a      	ldrb	r2, [r3, #8]
   11a32:	f366 0282 	bfi	r2, r6, #2, #1
   11a36:	721a      	strb	r2, [r3, #8]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11a38:	3401      	adds	r4, #1
		net_buf_unref(buf);
   11a3a:	f00e f9a7 	bl	1fd8c <net_buf_unref>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11a3e:	2c03      	cmp	r4, #3
   11a40:	d1f0      	bne.n	11a24 <free_segments+0x8>
	}
}
   11a42:	bd70      	pop	{r4, r5, r6, pc}
   11a44:	2000021c 	.word	0x2000021c

00011a48 <prov_clear_tx>:
{
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
}

static void prov_clear_tx(void)
{
   11a48:	b508      	push	{r3, lr}
	BT_DBG("");

	k_delayed_work_cancel(&link.tx.retransmit);
   11a4a:	4803      	ldr	r0, [pc, #12]	; (11a58 <prov_clear_tx+0x10>)
   11a4c:	f01b fdb2 	bl	2d5b4 <k_delayed_work_cancel>

	free_segments();
}
   11a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	free_segments();
   11a54:	f7ff bfe2 	b.w	11a1c <free_segments>
   11a58:	20000230 	.word	0x20000230

00011a5c <ack_complete>:
   11a5c:	4b06      	ldr	r3, [pc, #24]	; (11a78 <ack_complete+0x1c>)
   11a5e:	f3bf 8f5b 	dmb	ish
   11a62:	e853 2f00 	ldrex	r2, [r3]
   11a66:	f022 0210 	bic.w	r2, r2, #16
   11a6a:	e843 2100 	strex	r1, r2, [r3]
   11a6e:	2900      	cmp	r1, #0
   11a70:	d1f7      	bne.n	11a62 <ack_complete+0x6>
   11a72:	f3bf 8f5b 	dmb	ish

static void ack_complete(uint16_t duration, int err, void *user_data)
{
	BT_DBG("xact 0x%x complete", (uint8_t)link.tx.pending_ack);
	atomic_clear_bit(link.flags, ADV_ACK_PENDING);
}
   11a76:	4770      	bx	lr
   11a78:	200001fc 	.word	0x200001fc

00011a7c <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11a7c:	4b03      	ldr	r3, [pc, #12]	; (11a8c <atomic_get.constprop.0+0x10>)
   11a7e:	f3bf 8f5b 	dmb	ish
   11a82:	6858      	ldr	r0, [r3, #4]
   11a84:	f3bf 8f5b 	dmb	ish
}
   11a88:	4770      	bx	lr
   11a8a:	bf00      	nop
   11a8c:	200001f8 	.word	0x200001f8

00011a90 <prov_link_accept>:

	return 0;
}

static int prov_link_accept(const struct prov_bearer_cb *cb, void *cb_data)
{
   11a90:	b510      	push	{r4, lr}
   11a92:	4602      	mov	r2, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11a94:	f7ff fff2 	bl	11a7c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   11a98:	f010 0401 	ands.w	r4, r0, #1
   11a9c:	d10d      	bne.n	11aba <prov_link_accept+0x2a>
		return -EBUSY;
	}

	link.rx.id = XACT_ID_MAX;
   11a9e:	4b08      	ldr	r3, [pc, #32]	; (11ac0 <prov_link_accept+0x30>)
   11aa0:	207f      	movs	r0, #127	; 0x7f
   11aa2:	7418      	strb	r0, [r3, #16]
	link.tx.id = XACT_ID_NVAL;
   11aa4:	20ff      	movs	r0, #255	; 0xff
	link.cb = cb;
	link.cb_data = cb_data;
   11aa6:	e9c3 2102 	strd	r2, r1, [r3, #8]
	link.tx.id = XACT_ID_NVAL;
   11aaa:	f883 0020 	strb.w	r0, [r3, #32]

	/* Make sure we're scanning for provisioning inviations */
	bt_mesh_scan_enable();
   11aae:	f7fa ff9d 	bl	c9ec <bt_mesh_scan_enable>
	/* Enable unprovisioned beacon sending */
	bt_mesh_beacon_enable();
   11ab2:	f7fb f9c3 	bl	ce3c <bt_mesh_beacon_enable>

	return 0;
   11ab6:	4620      	mov	r0, r4
}
   11ab8:	bd10      	pop	{r4, pc}
		return -EBUSY;
   11aba:	f06f 000f 	mvn.w	r0, #15
   11abe:	e7fb      	b.n	11ab8 <prov_link_accept+0x28>
   11ac0:	200001f8 	.word	0x200001f8

00011ac4 <reset_adv_link>:
{
   11ac4:	b510      	push	{r4, lr}
	k_delayed_work_cancel(&link.prot_timer);
   11ac6:	4c18      	ldr	r4, [pc, #96]	; (11b28 <reset_adv_link+0x64>)
	prov_clear_tx();
   11ac8:	f7ff ffbe 	bl	11a48 <prov_clear_tx>
	k_delayed_work_cancel(&link.prot_timer);
   11acc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   11ad0:	f01b fd70 	bl	2d5b4 <k_delayed_work_cancel>
   11ad4:	f7ff ffd2 	bl	11a7c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   11ad8:	0683      	lsls	r3, r0, #26
   11ada:	f3c0 1240 	ubfx	r2, r0, #5, #1
   11ade:	d510      	bpl.n	11b02 <reset_adv_link+0x3e>
		(void)memset(&link, 0, offsetof(struct pb_adv, tx.retransmit));
   11ae0:	2238      	movs	r2, #56	; 0x38
   11ae2:	2100      	movs	r1, #0
   11ae4:	4620      	mov	r0, r4
   11ae6:	f014 ff87 	bl	269f8 <memset>
		link.rx.id = XACT_ID_NVAL;
   11aea:	23ff      	movs	r3, #255	; 0xff
   11aec:	7423      	strb	r3, [r4, #16]
	link.tx.pending_ack = XACT_ID_NVAL;
   11aee:	23ff      	movs	r3, #255	; 0xff
   11af0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	link.rx.buf = &rx_buf;
   11af4:	4b0d      	ldr	r3, [pc, #52]	; (11b2c <reset_adv_link+0x68>)
   11af6:	6163      	str	r3, [r4, #20]
	buf->len  = 0U;
   11af8:	2200      	movs	r2, #0
   11afa:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   11afc:	689a      	ldr	r2, [r3, #8]
   11afe:	601a      	str	r2, [r3, #0]
}
   11b00:	bd10      	pop	{r4, pc}
		link.id = 0;
   11b02:	4623      	mov	r3, r4
   11b04:	f843 2b04 	str.w	r2, [r3], #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11b08:	f3bf 8f5b 	dmb	ish
   11b0c:	e853 1f00 	ldrex	r1, [r3]
   11b10:	e843 2000 	strex	r0, r2, [r3]
   11b14:	2800      	cmp	r0, #0
   11b16:	d1f9      	bne.n	11b0c <reset_adv_link+0x48>
   11b18:	f3bf 8f5b 	dmb	ish
		link.rx.id = XACT_ID_MAX;
   11b1c:	237f      	movs	r3, #127	; 0x7f
   11b1e:	7423      	strb	r3, [r4, #16]
		link.tx.id = XACT_ID_NVAL;
   11b20:	23ff      	movs	r3, #255	; 0xff
   11b22:	f884 3020 	strb.w	r3, [r4, #32]
   11b26:	e7e2      	b.n	11aee <reset_adv_link+0x2a>
   11b28:	200001f8 	.word	0x200001f8
   11b2c:	20000524 	.word	0x20000524

00011b30 <close_link>:
{
   11b30:	b570      	push	{r4, r5, r6, lr}
	const struct prov_bearer_cb *cb = link.cb;
   11b32:	4b06      	ldr	r3, [pc, #24]	; (11b4c <close_link+0x1c>)
	void *cb_data = link.cb_data;
   11b34:	e9d3 6502 	ldrd	r6, r5, [r3, #8]
{
   11b38:	4604      	mov	r4, r0
	reset_adv_link();
   11b3a:	f7ff ffc3 	bl	11ac4 <reset_adv_link>
	cb->link_closed(&pb_adv, cb_data, reason);
   11b3e:	6873      	ldr	r3, [r6, #4]
   11b40:	4803      	ldr	r0, [pc, #12]	; (11b50 <close_link+0x20>)
   11b42:	4622      	mov	r2, r4
   11b44:	4629      	mov	r1, r5
}
   11b46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb->link_closed(&pb_adv, cb_data, reason);
   11b4a:	4718      	bx	r3
   11b4c:	200001f8 	.word	0x200001f8
   11b50:	0002e6a8 	.word	0x0002e6a8

00011b54 <prov_retransmit>:
{
   11b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11b56:	f7ff ff91 	bl	11a7c <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   11b5a:	07c2      	lsls	r2, r0, #31
   11b5c:	d547      	bpl.n	11bee <prov_retransmit+0x9a>
   11b5e:	f7ff ff8d 	bl	11a7c <atomic_get.constprop.0>
		timeout_ms = TRANSACTION_TIMEOUT;
   11b62:	f640 32b8 	movw	r2, #3000	; 0xbb8
   11b66:	f010 0f04 	tst.w	r0, #4
   11b6a:	f247 5330 	movw	r3, #30000	; 0x7530
   11b6e:	bf14      	ite	ne
   11b70:	4615      	movne	r5, r2
   11b72:	461d      	moveq	r5, r3
   11b74:	f01b fd87 	bl	2d686 <z_impl_k_uptime_ticks>
   11b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11b7c:	460a      	mov	r2, r1
	if (k_uptime_get() - link.tx.start > timeout_ms) {
   11b7e:	4c1c      	ldr	r4, [pc, #112]	; (11bf0 <prov_retransmit+0x9c>)
   11b80:	fba0 0103 	umull	r0, r1, r0, r3
   11b84:	fb03 1102 	mla	r1, r3, r2, r1
   11b88:	0bc3      	lsrs	r3, r0, #15
   11b8a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11b8e:	0bca      	lsrs	r2, r1, #15
   11b90:	e9d4 1006 	ldrd	r1, r0, [r4, #24]
   11b94:	1a5e      	subs	r6, r3, r1
   11b96:	eb62 0700 	sbc.w	r7, r2, r0
   11b9a:	17eb      	asrs	r3, r5, #31
   11b9c:	42b5      	cmp	r5, r6
   11b9e:	41bb      	sbcs	r3, r7
   11ba0:	da0a      	bge.n	11bb8 <prov_retransmit+0x64>
   11ba2:	f7ff ff6b 	bl	11a7c <atomic_get.constprop.0>
		if (atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   11ba6:	0743      	lsls	r3, r0, #29
			close_link(PROV_BEARER_LINK_STATUS_SUCCESS);
   11ba8:	bf48      	it	mi
   11baa:	2000      	movmi	r0, #0
}
   11bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   11bb0:	bf58      	it	pl
   11bb2:	2001      	movpl	r0, #1
   11bb4:	f7ff bfbc 	b.w	11b30 <close_link>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   11bb8:	4e0e      	ldr	r6, [pc, #56]	; (11bf4 <prov_retransmit+0xa0>)
   11bba:	3424      	adds	r4, #36	; 0x24
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11bbc:	2500      	movs	r5, #0
		struct net_buf *buf = link.tx.buf[i];
   11bbe:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   11bc2:	b1a0      	cbz	r0, 11bee <prov_retransmit+0x9a>
		if (BT_MESH_ADV(buf)->busy) {
   11bc4:	6943      	ldr	r3, [r0, #20]
   11bc6:	7a1a      	ldrb	r2, [r3, #8]
   11bc8:	f012 0204 	ands.w	r2, r2, #4
   11bcc:	f105 0501 	add.w	r5, r5, #1
   11bd0:	d10b      	bne.n	11bea <prov_retransmit+0x96>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   11bd2:	2d03      	cmp	r5, #3
   11bd4:	d005      	beq.n	11be2 <prov_retransmit+0x8e>
   11bd6:	6823      	ldr	r3, [r4, #0]
   11bd8:	b11b      	cbz	r3, 11be2 <prov_retransmit+0x8e>
			bt_mesh_adv_send(buf, NULL, NULL);
   11bda:	4611      	mov	r1, r2
   11bdc:	f7fa fecc 	bl	c978 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11be0:	e7ed      	b.n	11bbe <prov_retransmit+0x6a>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   11be2:	2200      	movs	r2, #0
   11be4:	4631      	mov	r1, r6
   11be6:	f7fa fec7 	bl	c978 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11bea:	2d03      	cmp	r5, #3
   11bec:	d1e7      	bne.n	11bbe <prov_retransmit+0x6a>
}
   11bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11bf0:	200001f8 	.word	0x200001f8
   11bf4:	2000051c 	.word	0x2000051c

00011bf8 <protocol_timeout>:
	link.rx.seg = 0U;
   11bf8:	4b02      	ldr	r3, [pc, #8]	; (11c04 <protocol_timeout+0xc>)
   11bfa:	2200      	movs	r2, #0
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   11bfc:	2001      	movs	r0, #1
	link.rx.seg = 0U;
   11bfe:	745a      	strb	r2, [r3, #17]
	close_link(PROV_BEARER_LINK_STATUS_TIMEOUT);
   11c00:	f7ff bf96 	b.w	11b30 <close_link>
   11c04:	200001f8 	.word	0x200001f8

00011c08 <gen_prov_ack>:
{
   11c08:	b510      	push	{r4, lr}
	if (!link.tx.buf[0]) {
   11c0a:	4c0b      	ldr	r4, [pc, #44]	; (11c38 <gen_prov_ack+0x30>)
   11c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11c0e:	b18b      	cbz	r3, 11c34 <gen_prov_ack+0x2c>
	if (rx->xact_id == link.tx.id) {
   11c10:	7902      	ldrb	r2, [r0, #4]
   11c12:	f894 3020 	ldrb.w	r3, [r4, #32]
   11c16:	429a      	cmp	r2, r3
   11c18:	d10c      	bne.n	11c34 <gen_prov_ack+0x2c>
   11c1a:	f7ff ff2f 	bl	11a7c <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_CLOSING)) {
   11c1e:	0743      	lsls	r3, r0, #29
   11c20:	d401      	bmi.n	11c26 <gen_prov_ack+0x1e>
			prov_clear_tx();
   11c22:	f7ff ff11 	bl	11a48 <prov_clear_tx>
		if (link.tx.cb) {
   11c26:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11c28:	b123      	cbz	r3, 11c34 <gen_prov_ack+0x2c>
			link.tx.cb(0, link.tx.cb_data);
   11c2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11c2c:	2000      	movs	r0, #0
}
   11c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			link.tx.cb(0, link.tx.cb_data);
   11c32:	4718      	bx	r3
}
   11c34:	bd10      	pop	{r4, pc}
   11c36:	bf00      	nop
   11c38:	200001f8 	.word	0x200001f8

00011c3c <buf_sent>:
	if (!link.tx.buf[0]) {
   11c3c:	4905      	ldr	r1, [pc, #20]	; (11c54 <buf_sent+0x18>)
   11c3e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   11c40:	b133      	cbz	r3, 11c50 <buf_sent+0x14>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11c42:	4805      	ldr	r0, [pc, #20]	; (11c58 <buf_sent+0x1c>)
   11c44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   11c48:	2300      	movs	r3, #0
   11c4a:	3138      	adds	r1, #56	; 0x38
   11c4c:	f012 b88e 	b.w	23d6c <k_delayed_work_submit_to_queue>
}
   11c50:	4770      	bx	lr
   11c52:	bf00      	nop
   11c54:	200001f8 	.word	0x200001f8
   11c58:	20001fd8 	.word	0x20001fd8

00011c5c <prov_failed>:
{
   11c5c:	b510      	push	{r4, lr}
	link.cb->error(&pb_adv, link.cb_data, err);
   11c5e:	4c0a      	ldr	r4, [pc, #40]	; (11c88 <prov_failed+0x2c>)
   11c60:	68a3      	ldr	r3, [r4, #8]
   11c62:	68e1      	ldr	r1, [r4, #12]
   11c64:	689b      	ldr	r3, [r3, #8]
{
   11c66:	4602      	mov	r2, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11c68:	3404      	adds	r4, #4
	link.cb->error(&pb_adv, link.cb_data, err);
   11c6a:	4808      	ldr	r0, [pc, #32]	; (11c8c <prov_failed+0x30>)
   11c6c:	4798      	blx	r3
   11c6e:	f3bf 8f5b 	dmb	ish
   11c72:	e854 3f00 	ldrex	r3, [r4]
   11c76:	f043 0308 	orr.w	r3, r3, #8
   11c7a:	e844 3200 	strex	r2, r3, [r4]
   11c7e:	2a00      	cmp	r2, #0
   11c80:	d1f7      	bne.n	11c72 <prov_failed+0x16>
   11c82:	f3bf 8f5b 	dmb	ish
}
   11c86:	bd10      	pop	{r4, pc}
   11c88:	200001f8 	.word	0x200001f8
   11c8c:	0002e6a8 	.word	0x0002e6a8

00011c90 <gen_prov_ack_send>:
{
   11c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c94:	4e25      	ldr	r6, [pc, #148]	; (11d2c <gen_prov_ack_send+0x9c>)
   11c96:	f3bf 8f5b 	dmb	ish
   11c9a:	4607      	mov	r7, r0
   11c9c:	1d33      	adds	r3, r6, #4
   11c9e:	e853 2f00 	ldrex	r2, [r3]
   11ca2:	f042 0110 	orr.w	r1, r2, #16
   11ca6:	e843 1000 	strex	r0, r1, [r3]
   11caa:	2800      	cmp	r0, #0
   11cac:	d1f7      	bne.n	11c9e <gen_prov_ack_send+0xe>
   11cae:	f3bf 8f5b 	dmb	ish
	if (pending && link.tx.pending_ack == xact_id) {
   11cb2:	f012 0810 	ands.w	r8, r2, #16
   11cb6:	461c      	mov	r4, r3
   11cb8:	d003      	beq.n	11cc2 <gen_prov_ack_send+0x32>
   11cba:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   11cbe:	42bb      	cmp	r3, r7
   11cc0:	d010      	beq.n	11ce4 <gen_prov_ack_send+0x54>
	buf = adv_buf_create(RETRANSMITS_ACK);
   11cc2:	2002      	movs	r0, #2
   11cc4:	f01a f8c1 	bl	2be4a <adv_buf_create>
	if (!buf) {
   11cc8:	4605      	mov	r5, r0
   11cca:	b968      	cbnz	r0, 11ce8 <gen_prov_ack_send+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11ccc:	f3bf 8f5b 	dmb	ish
   11cd0:	e854 3f00 	ldrex	r3, [r4]
   11cd4:	f023 0310 	bic.w	r3, r3, #16
   11cd8:	e844 3200 	strex	r2, r3, [r4]
   11cdc:	2a00      	cmp	r2, #0
   11cde:	d1f7      	bne.n	11cd0 <gen_prov_ack_send+0x40>
   11ce0:	f3bf 8f5b 	dmb	ish
}
   11ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (pending) {
   11ce8:	f1b8 0f00 	cmp.w	r8, #0
   11cec:	d11b      	bne.n	11d26 <gen_prov_ack_send+0x96>
		complete = &cb;
   11cee:	f8df 8040 	ldr.w	r8, [pc, #64]	; 11d30 <gen_prov_ack_send+0xa0>
		link.tx.pending_ack = xact_id;
   11cf2:	f886 7021 	strb.w	r7, [r6, #33]	; 0x21
	net_buf_add_be32(buf, link.id);
   11cf6:	f105 0408 	add.w	r4, r5, #8
   11cfa:	6831      	ldr	r1, [r6, #0]
   11cfc:	4620      	mov	r0, r4
   11cfe:	f01a fa04 	bl	2c10a <net_buf_simple_add_be32>
	net_buf_add_u8(buf, xact_id);
   11d02:	4639      	mov	r1, r7
   11d04:	4620      	mov	r0, r4
   11d06:	f01a f9d7 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_ACK);
   11d0a:	2101      	movs	r1, #1
   11d0c:	4620      	mov	r0, r4
   11d0e:	f01a f9d3 	bl	2c0b8 <net_buf_simple_add_u8>
	bt_mesh_adv_send(buf, complete, NULL);
   11d12:	4628      	mov	r0, r5
   11d14:	4641      	mov	r1, r8
   11d16:	2200      	movs	r2, #0
   11d18:	f7fa fe2e 	bl	c978 <bt_mesh_adv_send>
	net_buf_unref(buf);
   11d1c:	4628      	mov	r0, r5
}
   11d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	net_buf_unref(buf);
   11d22:	f00e b833 	b.w	1fd8c <net_buf_unref>
		complete = NULL;
   11d26:	f04f 0800 	mov.w	r8, #0
   11d2a:	e7e4      	b.n	11cf6 <gen_prov_ack_send+0x66>
   11d2c:	200001f8 	.word	0x200001f8
   11d30:	0002e680 	.word	0x0002e680

00011d34 <prov_msg_recv>:
{
   11d34:	b510      	push	{r4, lr}
   11d36:	4c11      	ldr	r4, [pc, #68]	; (11d7c <prov_msg_recv+0x48>)
   11d38:	4811      	ldr	r0, [pc, #68]	; (11d80 <prov_msg_recv+0x4c>)
   11d3a:	f104 0168 	add.w	r1, r4, #104	; 0x68
   11d3e:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   11d42:	2300      	movs	r3, #0
   11d44:	f012 f812 	bl	23d6c <k_delayed_work_submit_to_queue>
	if (!bt_mesh_fcs_check(link.rx.buf, link.rx.fcs)) {
   11d48:	7ce1      	ldrb	r1, [r4, #19]
   11d4a:	6960      	ldr	r0, [r4, #20]
   11d4c:	f7fd f956 	bl	effc <bt_mesh_fcs_check>
   11d50:	b198      	cbz	r0, 11d7a <prov_msg_recv+0x46>
	gen_prov_ack_send(link.rx.id);
   11d52:	7c20      	ldrb	r0, [r4, #16]
   11d54:	f7ff ff9c 	bl	11c90 <gen_prov_ack_send>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11d58:	f7ff fe90 	bl	11a7c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_INVALID)) {
   11d5c:	0703      	lsls	r3, r0, #28
   11d5e:	d504      	bpl.n	11d6a <prov_msg_recv+0x36>
}
   11d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		prov_failed(PROV_ERR_UNEXP_PDU);
   11d64:	2003      	movs	r0, #3
   11d66:	f7ff bf79 	b.w	11c5c <prov_failed>
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   11d6a:	68a3      	ldr	r3, [r4, #8]
   11d6c:	6962      	ldr	r2, [r4, #20]
   11d6e:	68e1      	ldr	r1, [r4, #12]
   11d70:	68db      	ldr	r3, [r3, #12]
   11d72:	4804      	ldr	r0, [pc, #16]	; (11d84 <prov_msg_recv+0x50>)
}
   11d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	link.cb->recv(&pb_adv, link.cb_data, link.rx.buf);
   11d78:	4718      	bx	r3
}
   11d7a:	bd10      	pop	{r4, pc}
   11d7c:	200001f8 	.word	0x200001f8
   11d80:	20001fd8 	.word	0x20001fd8
   11d84:	0002e6a8 	.word	0x0002e6a8

00011d88 <gen_prov_cont>:
{
   11d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11d8a:	4c31      	ldr	r4, [pc, #196]	; (11e50 <gen_prov_cont+0xc8>)
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   11d8c:	7947      	ldrb	r7, [r0, #5]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   11d8e:	7c23      	ldrb	r3, [r4, #16]
{
   11d90:	4602      	mov	r2, r0
   11d92:	460d      	mov	r5, r1
   11d94:	7901      	ldrb	r1, [r0, #4]
	if (!link.rx.seg && link.rx.id == rx->xact_id) {
   11d96:	7c60      	ldrb	r0, [r4, #17]
   11d98:	bb40      	cbnz	r0, 11dec <gen_prov_cont+0x64>
   11d9a:	428b      	cmp	r3, r1
   11d9c:	d108      	bne.n	11db0 <gen_prov_cont+0x28>
   11d9e:	f7ff fe6d 	bl	11a7c <atomic_get.constprop.0>
		if (!ack_pending()) {
   11da2:	06c4      	lsls	r4, r0, #27
   11da4:	d424      	bmi.n	11df0 <gen_prov_cont+0x68>
}
   11da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			gen_prov_ack_send(rx->xact_id);
   11daa:	7910      	ldrb	r0, [r2, #4]
   11dac:	f7ff bf70 	b.w	11c90 <gen_prov_ack_send>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   11db0:	b25b      	sxtb	r3, r3
   11db2:	1c5a      	adds	r2, r3, #1
   11db4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   11db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
	if (!link.rx.seg &&
   11dbc:	4313      	orrs	r3, r2
   11dbe:	428b      	cmp	r3, r1
   11dc0:	d116      	bne.n	11df0 <gen_prov_cont+0x68>
		link.rx.id = rx->xact_id;
   11dc2:	7423      	strb	r3, [r4, #16]
		net_buf_simple_reset(link.rx.buf);
   11dc4:	6963      	ldr	r3, [r4, #20]
   11dc6:	689a      	ldr	r2, [r3, #8]
	buf->len  = 0U;
   11dc8:	8098      	strh	r0, [r3, #4]
	buf->data = buf->__buf;
   11dca:	601a      	str	r2, [r3, #0]
		link.rx.seg = SEG_NVAL;
   11dcc:	23ff      	movs	r3, #255	; 0xff
   11dce:	7463      	strb	r3, [r4, #17]
		link.rx.last_seg = SEG_NVAL;
   11dd0:	74a3      	strb	r3, [r4, #18]
		prov_clear_tx();
   11dd2:	f7ff fe39 	bl	11a48 <prov_clear_tx>
	if (seg > link.rx.last_seg) {
   11dd6:	7ca3      	ldrb	r3, [r4, #18]
   11dd8:	ebb3 0f97 	cmp.w	r3, r7, lsr #2
	uint8_t seg = CONT_SEG_INDEX(rx->gpc);
   11ddc:	ea4f 0697 	mov.w	r6, r7, lsr #2
	if (seg > link.rx.last_seg) {
   11de0:	d207      	bcs.n	11df2 <gen_prov_cont+0x6a>
}
   11de2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   11de6:	2002      	movs	r0, #2
   11de8:	f7ff bf38 	b.w	11c5c <prov_failed>
	} else if (rx->xact_id != link.rx.id) {
   11dec:	428b      	cmp	r3, r1
   11dee:	d0f2      	beq.n	11dd6 <gen_prov_cont+0x4e>
}
   11df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(link.rx.seg & BIT(seg))) {
   11df2:	7c63      	ldrb	r3, [r4, #17]
   11df4:	40f3      	lsrs	r3, r6
   11df6:	07d8      	lsls	r0, r3, #31
   11df8:	d5fa      	bpl.n	11df0 <gen_prov_cont+0x68>
	memcpy(XACT_SEG_DATA(seg), buf->data, buf->len);
   11dfa:	6962      	ldr	r2, [r4, #20]
   11dfc:	6829      	ldr	r1, [r5, #0]
   11dfe:	1e70      	subs	r0, r6, #1
   11e00:	2317      	movs	r3, #23
   11e02:	4343      	muls	r3, r0
   11e04:	6810      	ldr	r0, [r2, #0]
   11e06:	88aa      	ldrh	r2, [r5, #4]
   11e08:	3314      	adds	r3, #20
   11e0a:	4418      	add	r0, r3
   11e0c:	f014 fdc9 	bl	269a2 <memcpy>
	XACT_SEG_RECV(seg);
   11e10:	2201      	movs	r2, #1
   11e12:	fa02 f306 	lsl.w	r3, r2, r6
   11e16:	7c62      	ldrb	r2, [r4, #17]
   11e18:	ea22 0203 	bic.w	r2, r2, r3
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   11e1c:	7ca3      	ldrb	r3, [r4, #18]
	XACT_SEG_RECV(seg);
   11e1e:	7462      	strb	r2, [r4, #17]
	if (seg == link.rx.last_seg && !(link.rx.seg & BIT(0))) {
   11e20:	42b3      	cmp	r3, r6
   11e22:	d10f      	bne.n	11e44 <gen_prov_cont+0xbc>
   11e24:	07d1      	lsls	r1, r2, #31
   11e26:	d4e3      	bmi.n	11df0 <gen_prov_cont+0x68>
		expect_len = (link.rx.buf->len - 20U -
   11e28:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
   11e2c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   11e30:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   11e34:	6961      	ldr	r1, [r4, #20]
   11e36:	7909      	ldrb	r1, [r1, #4]
   11e38:	3303      	adds	r3, #3
   11e3a:	440b      	add	r3, r1
		if (expect_len != buf->len) {
   11e3c:	88a9      	ldrh	r1, [r5, #4]
   11e3e:	b2db      	uxtb	r3, r3
   11e40:	428b      	cmp	r3, r1
   11e42:	d1ce      	bne.n	11de2 <gen_prov_cont+0x5a>
	if (!link.rx.seg) {
   11e44:	2a00      	cmp	r2, #0
   11e46:	d1d3      	bne.n	11df0 <gen_prov_cont+0x68>
}
   11e48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
   11e4c:	f7ff bf72 	b.w	11d34 <prov_msg_recv>
   11e50:	200001f8 	.word	0x200001f8

00011e54 <send_reliable>:
{
   11e54:	b570      	push	{r4, r5, r6, lr}
   11e56:	f01b fc16 	bl	2d686 <z_impl_k_uptime_ticks>
   11e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11e5e:	460a      	mov	r2, r1
   11e60:	fba0 0103 	umull	r0, r1, r0, r3
   11e64:	fb03 1102 	mla	r1, r3, r2, r1
	link.tx.start = k_uptime_get();
   11e68:	4c0e      	ldr	r4, [pc, #56]	; (11ea4 <send_reliable+0x50>)
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   11e6a:	4e0f      	ldr	r6, [pc, #60]	; (11ea8 <send_reliable+0x54>)
   11e6c:	0bc3      	lsrs	r3, r0, #15
   11e6e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   11e72:	0bca      	lsrs	r2, r1, #15
	link.tx.start = k_uptime_get();
   11e74:	e9c4 3206 	strd	r3, r2, [r4, #24]
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11e78:	2500      	movs	r5, #0
   11e7a:	3424      	adds	r4, #36	; 0x24
		struct net_buf *buf = link.tx.buf[i];
   11e7c:	f854 0b04 	ldr.w	r0, [r4], #4
		if (!buf) {
   11e80:	b178      	cbz	r0, 11ea2 <send_reliable+0x4e>
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   11e82:	3501      	adds	r5, #1
   11e84:	2d03      	cmp	r5, #3
			bt_mesh_adv_send(buf, NULL, NULL);
   11e86:	f04f 0200 	mov.w	r2, #0
		if (i + 1 < ARRAY_SIZE(link.tx.buf) && link.tx.buf[i + 1]) {
   11e8a:	d005      	beq.n	11e98 <send_reliable+0x44>
   11e8c:	6823      	ldr	r3, [r4, #0]
   11e8e:	b11b      	cbz	r3, 11e98 <send_reliable+0x44>
			bt_mesh_adv_send(buf, NULL, NULL);
   11e90:	4611      	mov	r1, r2
   11e92:	f7fa fd71 	bl	c978 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11e96:	e7f1      	b.n	11e7c <send_reliable+0x28>
			bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   11e98:	4631      	mov	r1, r6
   11e9a:	f7fa fd6d 	bl	c978 <bt_mesh_adv_send>
	for (i = 0; i < ARRAY_SIZE(link.tx.buf); i++) {
   11e9e:	2d03      	cmp	r5, #3
   11ea0:	d1ec      	bne.n	11e7c <send_reliable+0x28>
}
   11ea2:	bd70      	pop	{r4, r5, r6, pc}
   11ea4:	200001f8 	.word	0x200001f8
   11ea8:	2000051c 	.word	0x2000051c

00011eac <bearer_ctl_send>:
{
   11eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11eb0:	461c      	mov	r4, r3
   11eb2:	4606      	mov	r6, r0
   11eb4:	4688      	mov	r8, r1
   11eb6:	4691      	mov	r9, r2
	prov_clear_tx();
   11eb8:	f7ff fdc6 	bl	11a48 <prov_clear_tx>
   11ebc:	491d      	ldr	r1, [pc, #116]	; (11f34 <bearer_ctl_send+0x88>)
   11ebe:	481e      	ldr	r0, [pc, #120]	; (11f38 <bearer_ctl_send+0x8c>)
   11ec0:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   11ec4:	2300      	movs	r3, #0
   11ec6:	f011 ff51 	bl	23d6c <k_delayed_work_submit_to_queue>
	buf = adv_buf_create(reliable ? RETRANSMITS_RELIABLE :
   11eca:	2c00      	cmp	r4, #0
   11ecc:	bf0c      	ite	eq
   11ece:	2002      	moveq	r0, #2
   11ed0:	2000      	movne	r0, #0
   11ed2:	f019 ffba 	bl	2be4a <adv_buf_create>
	if (!buf) {
   11ed6:	4605      	mov	r5, r0
   11ed8:	b348      	cbz	r0, 11f2e <bearer_ctl_send+0x82>
	net_buf_add_be32(buf, link.id);
   11eda:	f8df a064 	ldr.w	sl, [pc, #100]	; 11f40 <bearer_ctl_send+0x94>
   11ede:	f100 0708 	add.w	r7, r0, #8
   11ee2:	f8da 1000 	ldr.w	r1, [sl]
   11ee6:	4638      	mov	r0, r7
	net_buf_add_u8(buf, GPC_CTL(op));
   11ee8:	00b6      	lsls	r6, r6, #2
	net_buf_add_be32(buf, link.id);
   11eea:	f01a f90e 	bl	2c10a <net_buf_simple_add_be32>
	net_buf_add_u8(buf, GPC_CTL(op));
   11eee:	f046 0603 	orr.w	r6, r6, #3
	net_buf_add_u8(buf, 0x00);
   11ef2:	2100      	movs	r1, #0
   11ef4:	4638      	mov	r0, r7
   11ef6:	f01a f8df 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_add_u8(buf, GPC_CTL(op));
   11efa:	b2f1      	uxtb	r1, r6
   11efc:	4638      	mov	r0, r7
   11efe:	f01a f8db 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, data, data_len);
   11f02:	464a      	mov	r2, r9
   11f04:	4641      	mov	r1, r8
   11f06:	4638      	mov	r0, r7
   11f08:	f01a f8cd 	bl	2c0a6 <net_buf_simple_add_mem>
	if (reliable) {
   11f0c:	b134      	cbz	r4, 11f1c <bearer_ctl_send+0x70>
		link.tx.buf[0] = buf;
   11f0e:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
		send_reliable();
   11f12:	f7ff ff9f 	bl	11e54 <send_reliable>
	return 0;
   11f16:	2000      	movs	r0, #0
}
   11f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bt_mesh_adv_send(buf, &buf_sent_cb, NULL);
   11f1c:	4628      	mov	r0, r5
   11f1e:	4907      	ldr	r1, [pc, #28]	; (11f3c <bearer_ctl_send+0x90>)
   11f20:	4622      	mov	r2, r4
   11f22:	f7fa fd29 	bl	c978 <bt_mesh_adv_send>
		net_buf_unref(buf);
   11f26:	4628      	mov	r0, r5
   11f28:	f00d ff30 	bl	1fd8c <net_buf_unref>
   11f2c:	e7f3      	b.n	11f16 <bearer_ctl_send+0x6a>
		return -ENOBUFS;
   11f2e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11f32:	e7f1      	b.n	11f18 <bearer_ctl_send+0x6c>
   11f34:	20000260 	.word	0x20000260
   11f38:	20001fd8 	.word	0x20001fd8
   11f3c:	2000051c 	.word	0x2000051c
   11f40:	200001f8 	.word	0x200001f8

00011f44 <gen_prov_ctl>:
{
   11f44:	b570      	push	{r4, r5, r6, lr}
	switch (BEARER_CTL(rx->gpc)) {
   11f46:	7942      	ldrb	r2, [r0, #5]
   11f48:	0892      	lsrs	r2, r2, #2
   11f4a:	2a01      	cmp	r2, #1
{
   11f4c:	4604      	mov	r4, r0
	switch (BEARER_CTL(rx->gpc)) {
   11f4e:	d042      	beq.n	11fd6 <gen_prov_ctl+0x92>
   11f50:	2a02      	cmp	r2, #2
   11f52:	d05b      	beq.n	1200c <gen_prov_ctl+0xc8>
   11f54:	2a00      	cmp	r2, #0
   11f56:	d167      	bne.n	12028 <gen_prov_ctl+0xe4>
	if (buf->len < 16) {
   11f58:	888b      	ldrh	r3, [r1, #4]
   11f5a:	2b0f      	cmp	r3, #15
   11f5c:	d964      	bls.n	12028 <gen_prov_ctl+0xe4>
   11f5e:	f7ff fd8d 	bl	11a7c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   11f62:	07c5      	lsls	r5, r0, #31
   11f64:	d50b      	bpl.n	11f7e <gen_prov_ctl+0x3a>
		if (link.id == rx->link_id) {
   11f66:	4b31      	ldr	r3, [pc, #196]	; (1202c <gen_prov_ctl+0xe8>)
   11f68:	6819      	ldr	r1, [r3, #0]
   11f6a:	6823      	ldr	r3, [r4, #0]
   11f6c:	4299      	cmp	r1, r3
   11f6e:	d15b      	bne.n	12028 <gen_prov_ctl+0xe4>
}
   11f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bearer_ctl_send(LINK_ACK, NULL, 0, false);
   11f74:	4613      	mov	r3, r2
   11f76:	4611      	mov	r1, r2
   11f78:	2001      	movs	r0, #1
   11f7a:	f7ff bf97 	b.w	11eac <bearer_ctl_send>
	if (memcmp(buf->data, bt_mesh_prov_get()->uuid, 16)) {
   11f7e:	680d      	ldr	r5, [r1, #0]
   11f80:	f7ff f924 	bl	111cc <bt_mesh_prov_get>
   11f84:	2210      	movs	r2, #16
   11f86:	6801      	ldr	r1, [r0, #0]
   11f88:	4628      	mov	r0, r5
   11f8a:	f014 fcfa 	bl	26982 <memcmp>
   11f8e:	4603      	mov	r3, r0
   11f90:	2800      	cmp	r0, #0
   11f92:	d149      	bne.n	12028 <gen_prov_ctl+0xe4>
	link.id = rx->link_id;
   11f94:	6821      	ldr	r1, [r4, #0]
   11f96:	4c25      	ldr	r4, [pc, #148]	; (1202c <gen_prov_ctl+0xe8>)
   11f98:	4622      	mov	r2, r4
   11f9a:	f842 1b04 	str.w	r1, [r2], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11f9e:	f3bf 8f5b 	dmb	ish
   11fa2:	e852 1f00 	ldrex	r1, [r2]
   11fa6:	f041 0101 	orr.w	r1, r1, #1
   11faa:	e842 1000 	strex	r0, r1, [r2]
   11fae:	2800      	cmp	r0, #0
   11fb0:	d1f7      	bne.n	11fa2 <gen_prov_ctl+0x5e>
   11fb2:	f3bf 8f5b 	dmb	ish
	net_buf_simple_reset(link.rx.buf);
   11fb6:	6962      	ldr	r2, [r4, #20]
   11fb8:	6891      	ldr	r1, [r2, #8]
   11fba:	6011      	str	r1, [r2, #0]
	buf->len  = 0U;
   11fbc:	8093      	strh	r3, [r2, #4]
	bearer_ctl_send(LINK_ACK, NULL, 0, false);
   11fbe:	4619      	mov	r1, r3
   11fc0:	461a      	mov	r2, r3
   11fc2:	2001      	movs	r0, #1
   11fc4:	f7ff ff72 	bl	11eac <bearer_ctl_send>
		link.cb->link_opened(&pb_adv, link.cb_data);
   11fc8:	68a3      	ldr	r3, [r4, #8]
   11fca:	68e1      	ldr	r1, [r4, #12]
   11fcc:	681b      	ldr	r3, [r3, #0]
   11fce:	4818      	ldr	r0, [pc, #96]	; (12030 <gen_prov_ctl+0xec>)
}
   11fd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		link.cb->link_opened(&pb_adv, link.cb_data);
   11fd4:	4718      	bx	r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11fd6:	f7ff fd51 	bl	11a7c <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   11fda:	07c0      	lsls	r0, r0, #31
   11fdc:	d524      	bpl.n	12028 <gen_prov_ctl+0xe4>
   11fde:	f7ff fd4d 	bl	11a7c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_PROVISIONER)) {
   11fe2:	0681      	lsls	r1, r0, #26
   11fe4:	d520      	bpl.n	12028 <gen_prov_ctl+0xe4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11fe6:	f3bf 8f5b 	dmb	ish
   11fea:	4c10      	ldr	r4, [pc, #64]	; (1202c <gen_prov_ctl+0xe8>)
   11fec:	1d23      	adds	r3, r4, #4
   11fee:	e853 2f00 	ldrex	r2, [r3]
   11ff2:	f042 0102 	orr.w	r1, r2, #2
   11ff6:	e843 1000 	strex	r0, r1, [r3]
   11ffa:	2800      	cmp	r0, #0
   11ffc:	d1f7      	bne.n	11fee <gen_prov_ctl+0xaa>
   11ffe:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACK_RECVD)) {
   12002:	0792      	lsls	r2, r2, #30
   12004:	d410      	bmi.n	12028 <gen_prov_ctl+0xe4>
		prov_clear_tx();
   12006:	f7ff fd1f 	bl	11a48 <prov_clear_tx>
   1200a:	e7dd      	b.n	11fc8 <gen_prov_ctl+0x84>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1200c:	f7ff fd36 	bl	11a7c <atomic_get.constprop.0>
		if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE)) {
   12010:	07c3      	lsls	r3, r0, #31
   12012:	d509      	bpl.n	12028 <gen_prov_ctl+0xe4>
	if (buf->len != 1) {
   12014:	888b      	ldrh	r3, [r1, #4]
   12016:	2b01      	cmp	r3, #1
   12018:	d106      	bne.n	12028 <gen_prov_ctl+0xe4>
	close_link(net_buf_simple_pull_u8(buf));
   1201a:	4608      	mov	r0, r1
   1201c:	f01a f8c1 	bl	2c1a2 <net_buf_simple_pull_u8>
}
   12020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	close_link(net_buf_simple_pull_u8(buf));
   12024:	f7ff bd84 	b.w	11b30 <close_link>
}
   12028:	bd70      	pop	{r4, r5, r6, pc}
   1202a:	bf00      	nop
   1202c:	200001f8 	.word	0x200001f8
   12030:	0002e6a8 	.word	0x0002e6a8

00012034 <prov_link_close>:

static void prov_link_close(enum prov_bearer_link_status status)
{
   12034:	b507      	push	{r0, r1, r2, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12036:	4b0d      	ldr	r3, [pc, #52]	; (1206c <prov_link_close+0x38>)
   12038:	f88d 0007 	strb.w	r0, [sp, #7]
   1203c:	f3bf 8f5b 	dmb	ish
   12040:	e853 2f00 	ldrex	r2, [r3]
   12044:	f042 0104 	orr.w	r1, r2, #4
   12048:	e843 1000 	strex	r0, r1, [r3]
   1204c:	2800      	cmp	r0, #0
   1204e:	d1f7      	bne.n	12040 <prov_link_close+0xc>
   12050:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_CLOSING)) {
   12054:	0753      	lsls	r3, r2, #29
   12056:	d406      	bmi.n	12066 <prov_link_close+0x32>
		return;
	}

	bearer_ctl_send(LINK_CLOSE, &status, 1, true);
   12058:	2301      	movs	r3, #1
   1205a:	461a      	mov	r2, r3
   1205c:	f10d 0107 	add.w	r1, sp, #7
   12060:	2002      	movs	r0, #2
   12062:	f7ff ff23 	bl	11eac <bearer_ctl_send>
}
   12066:	b003      	add	sp, #12
   12068:	f85d fb04 	ldr.w	pc, [sp], #4
   1206c:	200001fc 	.word	0x200001fc

00012070 <prov_link_open>:
{
   12070:	b570      	push	{r4, r5, r6, lr}
   12072:	4d1d      	ldr	r5, [pc, #116]	; (120e8 <prov_link_open+0x78>)
   12074:	f3bf 8f5b 	dmb	ish
   12078:	4606      	mov	r6, r0
   1207a:	1d2b      	adds	r3, r5, #4
   1207c:	e853 4f00 	ldrex	r4, [r3]
   12080:	f044 0201 	orr.w	r2, r4, #1
   12084:	e843 2100 	strex	r1, r2, [r3]
   12088:	2900      	cmp	r1, #0
   1208a:	d1f7      	bne.n	1207c <prov_link_open+0xc>
   1208c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(link.flags, ADV_LINK_ACTIVE)) {
   12090:	f014 0401 	ands.w	r4, r4, #1
   12094:	d124      	bne.n	120e0 <prov_link_open+0x70>
   12096:	f3bf 8f5b 	dmb	ish
   1209a:	e853 2f00 	ldrex	r2, [r3]
   1209e:	f042 0220 	orr.w	r2, r2, #32
   120a2:	e843 2100 	strex	r1, r2, [r3]
   120a6:	2900      	cmp	r1, #0
   120a8:	d1f7      	bne.n	1209a <prov_link_open+0x2a>
   120aa:	f3bf 8f5b 	dmb	ish
	bt_rand(&link.id, sizeof(link.id));
   120ae:	2104      	movs	r1, #4
   120b0:	4628      	mov	r0, r5
   120b2:	f003 ff2f 	bl	15f14 <bt_rand>
	link.tx.id = XACT_ID_MAX;
   120b6:	237f      	movs	r3, #127	; 0x7f
   120b8:	f885 3020 	strb.w	r3, [r5, #32]
	link.rx.id = XACT_ID_NVAL;
   120bc:	23ff      	movs	r3, #255	; 0xff
   120be:	742b      	strb	r3, [r5, #16]
	link.cb = cb;
   120c0:	9b04      	ldr	r3, [sp, #16]
   120c2:	60ab      	str	r3, [r5, #8]
	link.cb_data = cb_data;
   120c4:	9b05      	ldr	r3, [sp, #20]
   120c6:	60eb      	str	r3, [r5, #12]
	net_buf_simple_reset(link.rx.buf);
   120c8:	696b      	ldr	r3, [r5, #20]
	buf->data = buf->__buf;
   120ca:	689a      	ldr	r2, [r3, #8]
   120cc:	601a      	str	r2, [r3, #0]
	buf->len  = 0U;
   120ce:	809c      	strh	r4, [r3, #4]
	bearer_ctl_send(LINK_OPEN, uuid, 16, true);
   120d0:	2210      	movs	r2, #16
   120d2:	2301      	movs	r3, #1
   120d4:	4631      	mov	r1, r6
   120d6:	4620      	mov	r0, r4
   120d8:	f7ff fee8 	bl	11eac <bearer_ctl_send>
}
   120dc:	4620      	mov	r0, r4
   120de:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
   120e0:	f06f 040f 	mvn.w	r4, #15
   120e4:	e7fa      	b.n	120dc <prov_link_open+0x6c>
   120e6:	bf00      	nop
   120e8:	200001f8 	.word	0x200001f8

000120ec <prov_send_adv>:
{
   120ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   120f0:	4d4b      	ldr	r5, [pc, #300]	; (12220 <prov_send_adv+0x134>)
   120f2:	4604      	mov	r4, r0
   120f4:	460f      	mov	r7, r1
   120f6:	4616      	mov	r6, r2
	prov_clear_tx();
   120f8:	f7ff fca6 	bl	11a48 <prov_clear_tx>
   120fc:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   12100:	2300      	movs	r3, #0
   12102:	f105 0168 	add.w	r1, r5, #104	; 0x68
   12106:	4847      	ldr	r0, [pc, #284]	; (12224 <prov_send_adv+0x138>)
   12108:	f011 fe30 	bl	23d6c <k_delayed_work_submit_to_queue>
	start = adv_buf_create(RETRANSMITS_RELIABLE);
   1210c:	2000      	movs	r0, #0
   1210e:	f019 fe9c 	bl	2be4a <adv_buf_create>
	if (!start) {
   12112:	4681      	mov	r9, r0
   12114:	2800      	cmp	r0, #0
   12116:	d05c      	beq.n	121d2 <prov_send_adv+0xe6>
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   12118:	f995 2020 	ldrsb.w	r2, [r5, #32]
	net_buf_add_be32(start, link.id);
   1211c:	6829      	ldr	r1, [r5, #0]
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   1211e:	1c53      	adds	r3, r2, #1
	net_buf_add_be32(start, link.id);
   12120:	f100 0808 	add.w	r8, r0, #8
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   12124:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12128:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1212c:	4313      	orrs	r3, r2
	net_buf_add_be32(start, link.id);
   1212e:	4640      	mov	r0, r8
	link.tx.id = next_transaction_id(link.tx.id);
   12130:	f885 3020 	strb.w	r3, [r5, #32]
	net_buf_add_be32(start, link.id);
   12134:	f019 ffe9 	bl	2c10a <net_buf_simple_add_be32>
	net_buf_add_u8(start, link.tx.id);
   12138:	f895 1020 	ldrb.w	r1, [r5, #32]
   1213c:	4640      	mov	r0, r8
   1213e:	f019 ffbb 	bl	2c0b8 <net_buf_simple_add_u8>
	if (len <= START_PAYLOAD_MAX) {
   12142:	7922      	ldrb	r2, [r4, #4]
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   12144:	88a3      	ldrh	r3, [r4, #4]
	if (len <= START_PAYLOAD_MAX) {
   12146:	2a14      	cmp	r2, #20
	len -= START_PAYLOAD_MAX;
   12148:	bf81      	itttt	hi
   1214a:	3b14      	subhi	r3, #20
	return 1 + (len / CONT_PAYLOAD_MAX);
   1214c:	b2db      	uxtbhi	r3, r3
   1214e:	2117      	movhi	r1, #23
   12150:	fbb3 f3f1 	udivhi	r3, r3, r1
   12154:	bf86      	itte	hi
   12156:	3301      	addhi	r3, #1
   12158:	b2db      	uxtbhi	r3, r3
		return 0;
   1215a:	2300      	movls	r3, #0
	net_buf_add_u8(start, GPC_START(last_seg(msg->len)));
   1215c:	009b      	lsls	r3, r3, #2
   1215e:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
   12162:	4640      	mov	r0, r8
   12164:	f019 ffa8 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_add_be16(start, msg->len);
   12168:	4640      	mov	r0, r8
   1216a:	88a1      	ldrh	r1, [r4, #4]
   1216c:	f019 ffb6 	bl	2c0dc <net_buf_simple_add_be16>
	net_buf_add_u8(start, bt_mesh_fcs_calc(msg->data, msg->len));
   12170:	7921      	ldrb	r1, [r4, #4]
   12172:	6820      	ldr	r0, [r4, #0]
   12174:	f7fc ff32 	bl	efdc <bt_mesh_fcs_calc>
   12178:	4601      	mov	r1, r0
   1217a:	4640      	mov	r0, r8
   1217c:	f019 ff9c 	bl	2c0b8 <net_buf_simple_add_u8>
	link.tx.cb_data = cb_data;
   12180:	e9c5 760c 	strd	r7, r6, [r5, #48]	; 0x30
	seg_len = MIN(msg->len, START_PAYLOAD_MAX);
   12184:	88a6      	ldrh	r6, [r4, #4]
	net_buf_add_mem(start, msg->data, seg_len);
   12186:	6821      	ldr	r1, [r4, #0]
	link.tx.buf[0] = start;
   12188:	f8c5 9024 	str.w	r9, [r5, #36]	; 0x24
	net_buf_add_mem(start, msg->data, seg_len);
   1218c:	2e14      	cmp	r6, #20
   1218e:	bf28      	it	cs
   12190:	2614      	movcs	r6, #20
   12192:	4632      	mov	r2, r6
   12194:	4640      	mov	r0, r8
   12196:	f019 ff86 	bl	2c0a6 <net_buf_simple_add_mem>
	net_buf_simple_pull(msg, seg_len);
   1219a:	4631      	mov	r1, r6
   1219c:	4620      	mov	r0, r4
   1219e:	f019 fff0 	bl	2c182 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   121a2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 12228 <prov_send_adv+0x13c>
   121a6:	2700      	movs	r7, #0
   121a8:	88a6      	ldrh	r6, [r4, #4]
   121aa:	b91e      	cbnz	r6, 121b4 <prov_send_adv+0xc8>
	send_reliable();
   121ac:	f7ff fe52 	bl	11e54 <send_reliable>
	return 0;
   121b0:	4630      	mov	r0, r6
   121b2:	e005      	b.n	121c0 <prov_send_adv+0xd4>
		if (seg_id >= ARRAY_SIZE(link.tx.buf)) {
   121b4:	2f08      	cmp	r7, #8
   121b6:	d105      	bne.n	121c4 <prov_send_adv+0xd8>
			free_segments();
   121b8:	f7ff fc30 	bl	11a1c <free_segments>
			return -E2BIG;
   121bc:	f06f 0006 	mvn.w	r0, #6
}
   121c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		buf = adv_buf_create(RETRANSMITS_RELIABLE);
   121c4:	2000      	movs	r0, #0
   121c6:	f019 fe40 	bl	2be4a <adv_buf_create>
		if (!buf) {
   121ca:	3704      	adds	r7, #4
   121cc:	b920      	cbnz	r0, 121d8 <prov_send_adv+0xec>
			free_segments();
   121ce:	f7ff fc25 	bl	11a1c <free_segments>
		return -ENOBUFS;
   121d2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   121d6:	e7f3      	b.n	121c0 <prov_send_adv+0xd4>
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   121d8:	f8b4 9004 	ldrh.w	r9, [r4, #4]
		link.tx.buf[seg_id] = buf;
   121dc:	f848 0b04 	str.w	r0, [r8], #4
		net_buf_add_be32(buf, link.id);
   121e0:	f100 0608 	add.w	r6, r0, #8
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   121e4:	f1b9 0f17 	cmp.w	r9, #23
		net_buf_add_be32(buf, link.id);
   121e8:	6829      	ldr	r1, [r5, #0]
   121ea:	4630      	mov	r0, r6
		seg_len = MIN(msg->len, CONT_PAYLOAD_MAX);
   121ec:	bf28      	it	cs
   121ee:	f04f 0917 	movcs.w	r9, #23
		net_buf_add_be32(buf, link.id);
   121f2:	f019 ff8a 	bl	2c10a <net_buf_simple_add_be32>
		net_buf_add_u8(buf, link.tx.id);
   121f6:	f895 1020 	ldrb.w	r1, [r5, #32]
   121fa:	4630      	mov	r0, r6
   121fc:	f019 ff5c 	bl	2c0b8 <net_buf_simple_add_u8>
		net_buf_add_u8(buf, GPC_CONT(seg_id));
   12200:	f047 0102 	orr.w	r1, r7, #2
   12204:	b2c9      	uxtb	r1, r1
   12206:	4630      	mov	r0, r6
   12208:	f019 ff56 	bl	2c0b8 <net_buf_simple_add_u8>
		net_buf_add_mem(buf, msg->data, seg_len);
   1220c:	6821      	ldr	r1, [r4, #0]
   1220e:	464a      	mov	r2, r9
   12210:	4630      	mov	r0, r6
   12212:	f019 ff48 	bl	2c0a6 <net_buf_simple_add_mem>
		net_buf_simple_pull(msg, seg_len);
   12216:	4649      	mov	r1, r9
   12218:	4620      	mov	r0, r4
   1221a:	f019 ffb2 	bl	2c182 <net_buf_simple_pull>
	for (seg_id = 1U; msg->len > 0; seg_id++) {
   1221e:	e7c3      	b.n	121a8 <prov_send_adv+0xbc>
   12220:	200001f8 	.word	0x200001f8
   12224:	20001fd8 	.word	0x20001fd8
   12228:	20000220 	.word	0x20000220

0001222c <gen_prov_start>:
{
   1222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (rx->xact_id == link.rx.id) {
   1222e:	4a31      	ldr	r2, [pc, #196]	; (122f4 <gen_prov_start+0xc8>)
{
   12230:	460d      	mov	r5, r1
	if (rx->xact_id == link.rx.id) {
   12232:	7c13      	ldrb	r3, [r2, #16]
   12234:	7901      	ldrb	r1, [r0, #4]
   12236:	4299      	cmp	r1, r3
{
   12238:	4606      	mov	r6, r0
   1223a:	4614      	mov	r4, r2
	if (rx->xact_id == link.rx.id) {
   1223c:	d10d      	bne.n	1225a <gen_prov_start+0x2e>
		if (!link.rx.seg) {
   1223e:	7c53      	ldrb	r3, [r2, #17]
   12240:	b943      	cbnz	r3, 12254 <gen_prov_start+0x28>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12242:	f7ff fc1b 	bl	11a7c <atomic_get.constprop.0>
			if (!ack_pending()) {
   12246:	06c0      	lsls	r0, r0, #27
   12248:	d406      	bmi.n	12258 <gen_prov_start+0x2c>
				gen_prov_ack_send(rx->xact_id);
   1224a:	7930      	ldrb	r0, [r6, #4]
}
   1224c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				gen_prov_ack_send(rx->xact_id);
   12250:	f7ff bd1e 	b.w	11c90 <gen_prov_ack_send>
		if (!(link.rx.seg & BIT(0))) {
   12254:	07d9      	lsls	r1, r3, #31
   12256:	d409      	bmi.n	1226c <gen_prov_start+0x40>
}
   12258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (((id + 1) & XACT_ID_MAX) | (id & (XACT_ID_MAX+1)));
   1225a:	b25b      	sxtb	r3, r3
   1225c:	1c5a      	adds	r2, r3, #1
   1225e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   12262:	f003 0380 	and.w	r3, r3, #128	; 0x80
	} else if (rx->xact_id != next_transaction_id(link.rx.id)) {
   12266:	4313      	orrs	r3, r2
   12268:	4299      	cmp	r1, r3
   1226a:	d1f5      	bne.n	12258 <gen_prov_start+0x2c>
	net_buf_simple_reset(link.rx.buf);
   1226c:	6967      	ldr	r7, [r4, #20]
   1226e:	2300      	movs	r3, #0
   12270:	80bb      	strh	r3, [r7, #4]
	buf->data = buf->__buf;
   12272:	68bb      	ldr	r3, [r7, #8]
   12274:	603b      	str	r3, [r7, #0]
	link.rx.buf->len = net_buf_simple_pull_be16(buf);
   12276:	4628      	mov	r0, r5
   12278:	f019 ffa3 	bl	2c1c2 <net_buf_simple_pull_be16>
   1227c:	80b8      	strh	r0, [r7, #4]
	link.rx.id = rx->xact_id;
   1227e:	7933      	ldrb	r3, [r6, #4]
   12280:	7423      	strb	r3, [r4, #16]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   12282:	4628      	mov	r0, r5
   12284:	f019 ff8d 	bl	2c1a2 <net_buf_simple_pull_u8>
	if (link.rx.buf->len < 1) {
   12288:	6962      	ldr	r2, [r4, #20]
	link.rx.fcs = net_buf_simple_pull_u8(buf);
   1228a:	74e0      	strb	r0, [r4, #19]
	if (link.rx.buf->len < 1) {
   1228c:	8893      	ldrh	r3, [r2, #4]
   1228e:	b923      	cbnz	r3, 1229a <gen_prov_start+0x6e>
}
   12290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_failed(PROV_ERR_NVAL_FMT);
   12294:	2002      	movs	r0, #2
   12296:	f7ff bce1 	b.w	11c5c <prov_failed>
	if (link.rx.buf->len > link.rx.buf->size) {
   1229a:	88d2      	ldrh	r2, [r2, #6]
   1229c:	429a      	cmp	r2, r3
   1229e:	d3f7      	bcc.n	12290 <gen_prov_start+0x64>
	if (START_LAST_SEG(rx->gpc) > 0 && link.rx.buf->len <= 20U) {
   122a0:	7972      	ldrb	r2, [r6, #5]
   122a2:	0892      	lsrs	r2, r2, #2
   122a4:	d001      	beq.n	122aa <gen_prov_start+0x7e>
   122a6:	2b14      	cmp	r3, #20
   122a8:	d9f2      	bls.n	12290 <gen_prov_start+0x64>
	prov_clear_tx();
   122aa:	f7ff fbcd 	bl	11a48 <prov_clear_tx>
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   122ae:	7973      	ldrb	r3, [r6, #5]
	if ((link.rx.seg & BIT(0)) &&
   122b0:	7c61      	ldrb	r1, [r4, #17]
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   122b2:	089b      	lsrs	r3, r3, #2
	if ((link.rx.seg & BIT(0)) &&
   122b4:	07ca      	lsls	r2, r1, #31
	link.rx.last_seg = START_LAST_SEG(rx->gpc);
   122b6:	74a3      	strb	r3, [r4, #18]
	if ((link.rx.seg & BIT(0)) &&
   122b8:	d517      	bpl.n	122ea <gen_prov_start+0xbe>
   122ba:	2b20      	cmp	r3, #32
   122bc:	d9e8      	bls.n	12290 <gen_prov_start+0x64>
	link.rx.seg = seg & ((1 << (START_LAST_SEG(rx->gpc) + 1)) - 1);
   122be:	1c5a      	adds	r2, r3, #1
   122c0:	2301      	movs	r3, #1
   122c2:	4093      	lsls	r3, r2
   122c4:	3b01      	subs	r3, #1
   122c6:	400b      	ands	r3, r1
   122c8:	7463      	strb	r3, [r4, #17]
	memcpy(link.rx.buf->data, buf->data, buf->len);
   122ca:	6963      	ldr	r3, [r4, #20]
   122cc:	88aa      	ldrh	r2, [r5, #4]
   122ce:	6818      	ldr	r0, [r3, #0]
   122d0:	6829      	ldr	r1, [r5, #0]
   122d2:	f014 fb66 	bl	269a2 <memcpy>
	XACT_SEG_RECV(0);
   122d6:	7c63      	ldrb	r3, [r4, #17]
   122d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   122dc:	7463      	strb	r3, [r4, #17]
	if (!link.rx.seg) {
   122de:	2b00      	cmp	r3, #0
   122e0:	d1ba      	bne.n	12258 <gen_prov_start+0x2c>
}
   122e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		prov_msg_recv();
   122e6:	f7ff bd25 	b.w	11d34 <prov_msg_recv>
	uint8_t seg = SEG_NVAL;
   122ea:	2900      	cmp	r1, #0
   122ec:	bf08      	it	eq
   122ee:	21ff      	moveq	r1, #255	; 0xff
   122f0:	e7e5      	b.n	122be <gen_prov_start+0x92>
   122f2:	bf00      	nop
   122f4:	200001f8 	.word	0x200001f8

000122f8 <bt_mesh_pb_adv_recv>:
{
   122f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!link.cb) {
   122fa:	4d1f      	ldr	r5, [pc, #124]	; (12378 <bt_mesh_pb_adv_recv+0x80>)
   122fc:	68ab      	ldr	r3, [r5, #8]
{
   122fe:	4604      	mov	r4, r0
	if (!link.cb) {
   12300:	2b00      	cmp	r3, #0
   12302:	d036      	beq.n	12372 <bt_mesh_pb_adv_recv+0x7a>
	if (buf->len < 6) {
   12304:	8883      	ldrh	r3, [r0, #4]
   12306:	2b05      	cmp	r3, #5
   12308:	d933      	bls.n	12372 <bt_mesh_pb_adv_recv+0x7a>
	rx.link_id = net_buf_simple_pull_be32(buf);
   1230a:	f019 ff65 	bl	2c1d8 <net_buf_simple_pull_be32>
   1230e:	9000      	str	r0, [sp, #0]
	rx.xact_id = net_buf_simple_pull_u8(buf);
   12310:	4620      	mov	r0, r4
   12312:	f019 ff46 	bl	2c1a2 <net_buf_simple_pull_u8>
   12316:	f88d 0004 	strb.w	r0, [sp, #4]
	rx.gpc = net_buf_simple_pull_u8(buf);
   1231a:	4620      	mov	r0, r4
   1231c:	f019 ff41 	bl	2c1a2 <net_buf_simple_pull_u8>
   12320:	f88d 0005 	strb.w	r0, [sp, #5]
   12324:	f7ff fbaa 	bl	11a7c <atomic_get.constprop.0>
	if (atomic_test_bit(link.flags, ADV_LINK_ACTIVE) && link.id != rx.link_id) {
   12328:	07c3      	lsls	r3, r0, #31
   1232a:	d503      	bpl.n	12334 <bt_mesh_pb_adv_recv+0x3c>
   1232c:	682a      	ldr	r2, [r5, #0]
   1232e:	9b00      	ldr	r3, [sp, #0]
   12330:	429a      	cmp	r2, r3
   12332:	d11e      	bne.n	12372 <bt_mesh_pb_adv_recv+0x7a>
	if (buf->len < gen_prov[GPCF(rx->gpc)].min_len) {
   12334:	f89d 3005 	ldrb.w	r3, [sp, #5]
   12338:	4a10      	ldr	r2, [pc, #64]	; (1237c <bt_mesh_pb_adv_recv+0x84>)
   1233a:	88a1      	ldrh	r1, [r4, #4]
   1233c:	f003 0303 	and.w	r3, r3, #3
   12340:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   12344:	795b      	ldrb	r3, [r3, #5]
   12346:	4299      	cmp	r1, r3
   12348:	d313      	bcc.n	12372 <bt_mesh_pb_adv_recv+0x7a>
   1234a:	f7ff fb97 	bl	11a7c <atomic_get.constprop.0>
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   1234e:	f010 0f01 	tst.w	r0, #1
   12352:	f89d 3005 	ldrb.w	r3, [sp, #5]
   12356:	d105      	bne.n	12364 <bt_mesh_pb_adv_recv+0x6c>
	    gen_prov[GPCF(rx->gpc)].require_link) {
   12358:	f003 0103 	and.w	r1, r3, #3
   1235c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
	if (!atomic_test_bit(link.flags, ADV_LINK_ACTIVE) &&
   12360:	7909      	ldrb	r1, [r1, #4]
   12362:	b931      	cbnz	r1, 12372 <bt_mesh_pb_adv_recv+0x7a>
	gen_prov[GPCF(rx->gpc)].func(rx, buf);
   12364:	f003 0303 	and.w	r3, r3, #3
   12368:	4621      	mov	r1, r4
   1236a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   1236e:	4668      	mov	r0, sp
   12370:	4798      	blx	r3
}
   12372:	b003      	add	sp, #12
   12374:	bd30      	pop	{r4, r5, pc}
   12376:	bf00      	nop
   12378:	200001f8 	.word	0x200001f8
   1237c:	0002e688 	.word	0x0002e688

00012380 <pb_adv_init>:

void pb_adv_init(void)
{
   12380:	b510      	push	{r4, lr}
	k_delayed_work_init(&link.prot_timer, protocol_timeout);
   12382:	4c06      	ldr	r4, [pc, #24]	; (1239c <pb_adv_init+0x1c>)
   12384:	4906      	ldr	r1, [pc, #24]	; (123a0 <pb_adv_init+0x20>)
   12386:	f104 0068 	add.w	r0, r4, #104	; 0x68
   1238a:	f01b f90b 	bl	2d5a4 <k_delayed_work_init>
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   1238e:	f104 0038 	add.w	r0, r4, #56	; 0x38
   12392:	4904      	ldr	r1, [pc, #16]	; (123a4 <pb_adv_init+0x24>)
}
   12394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_delayed_work_init(&link.tx.retransmit, prov_retransmit);
   12398:	f01b b904 	b.w	2d5a4 <k_delayed_work_init>
   1239c:	200001f8 	.word	0x200001f8
   123a0:	00011bf9 	.word	0x00011bf9
   123a4:	00011b55 	.word	0x00011b55

000123a8 <cli_prepare>:
	.init = cfg_cli_init,
};

static int cli_prepare(void *param, uint32_t op)
{
	if (!cli) {
   123a8:	4b07      	ldr	r3, [pc, #28]	; (123c8 <cli_prepare+0x20>)
   123aa:	681b      	ldr	r3, [r3, #0]
{
   123ac:	4602      	mov	r2, r0
	if (!cli) {
   123ae:	b123      	cbz	r3, 123ba <cli_prepare+0x12>
		BT_ERR("No available Configuration Client context!");
		return -EINVAL;
	}

	if (cli->op_pending) {
   123b0:	69d8      	ldr	r0, [r3, #28]
   123b2:	b928      	cbnz	r0, 123c0 <cli_prepare+0x18>
		BT_WARN("Another synchronous operation pending");
		return -EBUSY;
	}

	cli->op_param = param;
	cli->op_pending = op;
   123b4:	e9c3 1207 	strd	r1, r2, [r3, #28]

	return 0;
   123b8:	4770      	bx	lr
		return -EINVAL;
   123ba:	f06f 0015 	mvn.w	r0, #21
   123be:	4770      	bx	lr
		return -EBUSY;
   123c0:	f06f 000f 	mvn.w	r0, #15
}
   123c4:	4770      	bx	lr
   123c6:	bf00      	nop
   123c8:	20002ae8 	.word	0x20002ae8

000123cc <cli_reset>:

static void cli_reset(void)
{
	cli->op_pending = 0U;
   123cc:	4b02      	ldr	r3, [pc, #8]	; (123d8 <cli_reset+0xc>)
   123ce:	681b      	ldr	r3, [r3, #0]
   123d0:	2200      	movs	r2, #0
	cli->op_param = NULL;
   123d2:	e9c3 2207 	strd	r2, r2, [r3, #28]
}
   123d6:	4770      	bx	lr
   123d8:	20002ae8 	.word	0x20002ae8

000123dc <node_reset_status>:
	if (cli->op_pending != OP_NODE_RESET_STATUS) {
   123dc:	4b07      	ldr	r3, [pc, #28]	; (123fc <node_reset_status+0x20>)
   123de:	6818      	ldr	r0, [r3, #0]
   123e0:	69c2      	ldr	r2, [r0, #28]
   123e2:	f248 034a 	movw	r3, #32842	; 0x804a
   123e6:	429a      	cmp	r2, r3
   123e8:	d106      	bne.n	123f8 <node_reset_status+0x1c>
	param = cli->op_param;
   123ea:	6a03      	ldr	r3, [r0, #32]
	if (param) {
   123ec:	b10b      	cbz	r3, 123f2 <node_reset_status+0x16>
		*param = true;
   123ee:	2201      	movs	r2, #1
   123f0:	701a      	strb	r2, [r3, #0]
	k_sem_give(&cli->op_sync);
   123f2:	3004      	adds	r0, #4
   123f4:	f019 bd33 	b.w	2be5e <k_sem_give>
}
   123f8:	4770      	bx	lr
   123fa:	bf00      	nop
   123fc:	20002ae8 	.word	0x20002ae8

00012400 <relay_status>:
{
   12400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_RELAY_STATUS) {
   12402:	4d0d      	ldr	r5, [pc, #52]	; (12438 <relay_status+0x38>)
   12404:	682b      	ldr	r3, [r5, #0]
   12406:	69d9      	ldr	r1, [r3, #28]
{
   12408:	4614      	mov	r4, r2
	if (cli->op_pending != OP_RELAY_STATUS) {
   1240a:	f248 0228 	movw	r2, #32808	; 0x8028
   1240e:	4291      	cmp	r1, r2
   12410:	d110      	bne.n	12434 <relay_status+0x34>
	param = cli->op_param;
   12412:	6a1e      	ldr	r6, [r3, #32]
	*param->status = net_buf_simple_pull_u8(buf);
   12414:	4620      	mov	r0, r4
   12416:	6837      	ldr	r7, [r6, #0]
   12418:	f019 fec3 	bl	2c1a2 <net_buf_simple_pull_u8>
   1241c:	7038      	strb	r0, [r7, #0]
	*param->transmit = net_buf_simple_pull_u8(buf);
   1241e:	4620      	mov	r0, r4
   12420:	6876      	ldr	r6, [r6, #4]
   12422:	f019 febe 	bl	2c1a2 <net_buf_simple_pull_u8>
   12426:	7030      	strb	r0, [r6, #0]
	k_sem_give(&cli->op_sync);
   12428:	6828      	ldr	r0, [r5, #0]
}
   1242a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_sem_give(&cli->op_sync);
   1242e:	3004      	adds	r0, #4
   12430:	f019 bd15 	b.w	2be5e <k_sem_give>
}
   12434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12436:	bf00      	nop
   12438:	20002ae8 	.word	0x20002ae8

0001243c <hb_pub_status>:
{
   1243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_HEARTBEAT_PUB_STATUS) {
   1243e:	4f19      	ldr	r7, [pc, #100]	; (124a4 <hb_pub_status+0x68>)
   12440:	683b      	ldr	r3, [r7, #0]
   12442:	69d9      	ldr	r1, [r3, #28]
   12444:	2906      	cmp	r1, #6
{
   12446:	4614      	mov	r4, r2
	if (cli->op_pending != OP_HEARTBEAT_PUB_STATUS) {
   12448:	d12a      	bne.n	124a0 <hb_pub_status+0x64>
	param = cli->op_param;
   1244a:	6a1d      	ldr	r5, [r3, #32]
	*param->status = net_buf_simple_pull_u8(buf);
   1244c:	4610      	mov	r0, r2
   1244e:	682e      	ldr	r6, [r5, #0]
   12450:	f019 fea7 	bl	2c1a2 <net_buf_simple_pull_u8>
   12454:	7030      	strb	r0, [r6, #0]
	if (param->pub) {
   12456:	686e      	ldr	r6, [r5, #4]
   12458:	b1e6      	cbz	r6, 12494 <hb_pub_status+0x58>
		param->pub->dst = net_buf_simple_pull_le16(buf);
   1245a:	4620      	mov	r0, r4
   1245c:	f019 fea9 	bl	2c1b2 <net_buf_simple_pull_le16>
   12460:	8030      	strh	r0, [r6, #0]
		param->pub->count = net_buf_simple_pull_u8(buf);
   12462:	4620      	mov	r0, r4
   12464:	686e      	ldr	r6, [r5, #4]
   12466:	f019 fe9c 	bl	2c1a2 <net_buf_simple_pull_u8>
   1246a:	70b0      	strb	r0, [r6, #2]
		param->pub->period = net_buf_simple_pull_u8(buf);
   1246c:	4620      	mov	r0, r4
   1246e:	686e      	ldr	r6, [r5, #4]
   12470:	f019 fe97 	bl	2c1a2 <net_buf_simple_pull_u8>
   12474:	70f0      	strb	r0, [r6, #3]
		param->pub->ttl = net_buf_simple_pull_u8(buf);
   12476:	4620      	mov	r0, r4
   12478:	686e      	ldr	r6, [r5, #4]
   1247a:	f019 fe92 	bl	2c1a2 <net_buf_simple_pull_u8>
   1247e:	7130      	strb	r0, [r6, #4]
		param->pub->feat = net_buf_simple_pull_u8(buf);
   12480:	4620      	mov	r0, r4
   12482:	f019 fe8e 	bl	2c1a2 <net_buf_simple_pull_u8>
   12486:	686b      	ldr	r3, [r5, #4]
   12488:	80d8      	strh	r0, [r3, #6]
		param->pub->net_idx = net_buf_simple_pull_u8(buf);
   1248a:	4620      	mov	r0, r4
   1248c:	f019 fe89 	bl	2c1a2 <net_buf_simple_pull_u8>
   12490:	686b      	ldr	r3, [r5, #4]
   12492:	8118      	strh	r0, [r3, #8]
	k_sem_give(&cli->op_sync);
   12494:	6838      	ldr	r0, [r7, #0]
}
   12496:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_sem_give(&cli->op_sync);
   1249a:	3004      	adds	r0, #4
   1249c:	f019 bcdf 	b.w	2be5e <k_sem_give>
}
   124a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   124a2:	bf00      	nop
   124a4:	20002ae8 	.word	0x20002ae8

000124a8 <hb_sub_status>:
{
   124a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_HEARTBEAT_SUB_STATUS) {
   124aa:	4e19      	ldr	r6, [pc, #100]	; (12510 <hb_sub_status+0x68>)
   124ac:	6833      	ldr	r3, [r6, #0]
   124ae:	69d9      	ldr	r1, [r3, #28]
{
   124b0:	4614      	mov	r4, r2
	if (cli->op_pending != OP_HEARTBEAT_SUB_STATUS) {
   124b2:	f248 023c 	movw	r2, #32828	; 0x803c
   124b6:	4291      	cmp	r1, r2
   124b8:	d129      	bne.n	1250e <hb_sub_status+0x66>
	param = cli->op_param;
   124ba:	6a1d      	ldr	r5, [r3, #32]
	*param->status = net_buf_simple_pull_u8(buf);
   124bc:	4620      	mov	r0, r4
   124be:	682f      	ldr	r7, [r5, #0]
   124c0:	f019 fe6f 	bl	2c1a2 <net_buf_simple_pull_u8>
   124c4:	7038      	strb	r0, [r7, #0]
	param->sub->src = net_buf_simple_pull_le16(buf);
   124c6:	4620      	mov	r0, r4
   124c8:	686f      	ldr	r7, [r5, #4]
   124ca:	f019 fe72 	bl	2c1b2 <net_buf_simple_pull_le16>
   124ce:	8038      	strh	r0, [r7, #0]
	param->sub->dst = net_buf_simple_pull_le16(buf);
   124d0:	4620      	mov	r0, r4
   124d2:	686f      	ldr	r7, [r5, #4]
   124d4:	f019 fe6d 	bl	2c1b2 <net_buf_simple_pull_le16>
   124d8:	8078      	strh	r0, [r7, #2]
	param->sub->period = net_buf_simple_pull_u8(buf);
   124da:	4620      	mov	r0, r4
   124dc:	686f      	ldr	r7, [r5, #4]
   124de:	f019 fe60 	bl	2c1a2 <net_buf_simple_pull_u8>
   124e2:	7138      	strb	r0, [r7, #4]
	param->sub->count = net_buf_simple_pull_u8(buf);
   124e4:	4620      	mov	r0, r4
   124e6:	686f      	ldr	r7, [r5, #4]
   124e8:	f019 fe5b 	bl	2c1a2 <net_buf_simple_pull_u8>
   124ec:	7178      	strb	r0, [r7, #5]
	param->sub->min = net_buf_simple_pull_u8(buf);
   124ee:	4620      	mov	r0, r4
   124f0:	686f      	ldr	r7, [r5, #4]
   124f2:	f019 fe56 	bl	2c1a2 <net_buf_simple_pull_u8>
   124f6:	71b8      	strb	r0, [r7, #6]
	param->sub->max = net_buf_simple_pull_u8(buf);
   124f8:	4620      	mov	r0, r4
   124fa:	686d      	ldr	r5, [r5, #4]
   124fc:	f019 fe51 	bl	2c1a2 <net_buf_simple_pull_u8>
   12500:	71e8      	strb	r0, [r5, #7]
	k_sem_give(&cli->op_sync);
   12502:	6830      	ldr	r0, [r6, #0]
}
   12504:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_sem_give(&cli->op_sync);
   12508:	3004      	adds	r0, #4
   1250a:	f019 bca8 	b.w	2be5e <k_sem_give>
}
   1250e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12510:	20002ae8 	.word	0x20002ae8

00012514 <mod_pub_status>:
{
   12514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_MOD_PUB_STATUS) {
   12516:	4e2e      	ldr	r6, [pc, #184]	; (125d0 <mod_pub_status+0xbc>)
   12518:	6833      	ldr	r3, [r6, #0]
   1251a:	69d9      	ldr	r1, [r3, #28]
{
   1251c:	4614      	mov	r4, r2
	if (cli->op_pending != OP_MOD_PUB_STATUS) {
   1251e:	f248 0219 	movw	r2, #32793	; 0x8019
   12522:	4291      	cmp	r1, r2
   12524:	d153      	bne.n	125ce <mod_pub_status+0xba>
	param = cli->op_param;
   12526:	6a1d      	ldr	r5, [r3, #32]
	if (param->cid != CID_NVAL) {
   12528:	88a3      	ldrh	r3, [r4, #4]
   1252a:	8868      	ldrh	r0, [r5, #2]
   1252c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12530:	4290      	cmp	r0, r2
   12532:	d043      	beq.n	125bc <mod_pub_status+0xa8>
		if (buf->len < 14) {
   12534:	2b0d      	cmp	r3, #13
   12536:	d94a      	bls.n	125ce <mod_pub_status+0xba>
		cid = sys_get_le16(&buf->data[10]);
   12538:	6821      	ldr	r1, [r4, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1253a:	7acb      	ldrb	r3, [r1, #11]
   1253c:	7a8a      	ldrb	r2, [r1, #10]
   1253e:	7b4f      	ldrb	r7, [r1, #13]
   12540:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12544:	7b0b      	ldrb	r3, [r1, #12]
   12546:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
	if (mod_id != param->mod_id || cid != param->cid) {
   1254a:	8829      	ldrh	r1, [r5, #0]
   1254c:	4299      	cmp	r1, r3
   1254e:	d13e      	bne.n	125ce <mod_pub_status+0xba>
   12550:	4290      	cmp	r0, r2
   12552:	d13c      	bne.n	125ce <mod_pub_status+0xba>
	status = net_buf_simple_pull_u8(buf);
   12554:	4620      	mov	r0, r4
   12556:	f019 fe24 	bl	2c1a2 <net_buf_simple_pull_u8>
   1255a:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1255c:	4620      	mov	r0, r4
   1255e:	f019 fe28 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (elem_addr != param->elem_addr) {
   12562:	88ab      	ldrh	r3, [r5, #4]
   12564:	4283      	cmp	r3, r0
   12566:	d132      	bne.n	125ce <mod_pub_status+0xba>
	if (param->status) {
   12568:	68ab      	ldr	r3, [r5, #8]
   1256a:	b103      	cbz	r3, 1256e <mod_pub_status+0x5a>
		*param->status = status;
   1256c:	701f      	strb	r7, [r3, #0]
	if (param->pub) {
   1256e:	68ef      	ldr	r7, [r5, #12]
   12570:	b1f7      	cbz	r7, 125b0 <mod_pub_status+0x9c>
		param->pub->addr = net_buf_simple_pull_le16(buf);
   12572:	4620      	mov	r0, r4
   12574:	f019 fe1d 	bl	2c1b2 <net_buf_simple_pull_le16>
   12578:	8038      	strh	r0, [r7, #0]
		param->pub->app_idx = net_buf_simple_pull_le16(buf);
   1257a:	4620      	mov	r0, r4
   1257c:	68ef      	ldr	r7, [r5, #12]
   1257e:	f019 fe18 	bl	2c1b2 <net_buf_simple_pull_le16>
   12582:	8078      	strh	r0, [r7, #2]
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
   12584:	68ef      	ldr	r7, [r5, #12]
   12586:	887b      	ldrh	r3, [r7, #2]
   12588:	f3c3 3200 	ubfx	r2, r3, #12, #1
		param->pub->app_idx &= BIT_MASK(12);
   1258c:	f3c3 030b 	ubfx	r3, r3, #0, #12
		param->pub->cred_flag = (param->pub->app_idx & BIT(12));
   12590:	713a      	strb	r2, [r7, #4]
		param->pub->app_idx &= BIT_MASK(12);
   12592:	807b      	strh	r3, [r7, #2]
		param->pub->ttl = net_buf_simple_pull_u8(buf);
   12594:	4620      	mov	r0, r4
   12596:	f019 fe04 	bl	2c1a2 <net_buf_simple_pull_u8>
   1259a:	7178      	strb	r0, [r7, #5]
		param->pub->period = net_buf_simple_pull_u8(buf);
   1259c:	4620      	mov	r0, r4
   1259e:	68ef      	ldr	r7, [r5, #12]
   125a0:	f019 fdff 	bl	2c1a2 <net_buf_simple_pull_u8>
   125a4:	71b8      	strb	r0, [r7, #6]
		param->pub->transmit = net_buf_simple_pull_u8(buf);
   125a6:	4620      	mov	r0, r4
   125a8:	68ed      	ldr	r5, [r5, #12]
   125aa:	f019 fdfa 	bl	2c1a2 <net_buf_simple_pull_u8>
   125ae:	71e8      	strb	r0, [r5, #7]
	k_sem_give(&cli->op_sync);
   125b0:	6830      	ldr	r0, [r6, #0]
}
   125b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_sem_give(&cli->op_sync);
   125b6:	3004      	adds	r0, #4
   125b8:	f019 bc51 	b.w	2be5e <k_sem_give>
		if (buf->len > 12) {
   125bc:	2b0c      	cmp	r3, #12
   125be:	d806      	bhi.n	125ce <mod_pub_status+0xba>
		mod_id = sys_get_le16(&buf->data[10]);
   125c0:	6822      	ldr	r2, [r4, #0]
   125c2:	7ad1      	ldrb	r1, [r2, #11]
   125c4:	7a93      	ldrb	r3, [r2, #10]
		cid = CID_NVAL;
   125c6:	4602      	mov	r2, r0
   125c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   125cc:	e7bd      	b.n	1254a <mod_pub_status+0x36>
}
   125ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   125d0:	20002ae8 	.word	0x20002ae8

000125d4 <app_key_status>:
{
   125d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (cli->op_pending != OP_APP_KEY_STATUS) {
   125d6:	4e13      	ldr	r6, [pc, #76]	; (12624 <app_key_status+0x50>)
   125d8:	6833      	ldr	r3, [r6, #0]
{
   125da:	4614      	mov	r4, r2
	if (cli->op_pending != OP_APP_KEY_STATUS) {
   125dc:	69da      	ldr	r2, [r3, #28]
   125de:	f248 0303 	movw	r3, #32771	; 0x8003
   125e2:	429a      	cmp	r2, r3
   125e4:	d11b      	bne.n	1261e <app_key_status+0x4a>
	status = net_buf_simple_pull_u8(buf);
   125e6:	4620      	mov	r0, r4
   125e8:	f019 fddb 	bl	2c1a2 <net_buf_simple_pull_u8>
	key_idx_unpack(buf, &net_idx, &app_idx);
   125ec:	f10d 0206 	add.w	r2, sp, #6
   125f0:	a901      	add	r1, sp, #4
	status = net_buf_simple_pull_u8(buf);
   125f2:	4605      	mov	r5, r0
	key_idx_unpack(buf, &net_idx, &app_idx);
   125f4:	4620      	mov	r0, r4
   125f6:	f019 fc34 	bl	2be62 <key_idx_unpack>
	param = cli->op_param;
   125fa:	6830      	ldr	r0, [r6, #0]
	if (param->net_idx != net_idx || param->app_idx != app_idx) {
   125fc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	param = cli->op_param;
   12600:	6a03      	ldr	r3, [r0, #32]
	if (param->net_idx != net_idx || param->app_idx != app_idx) {
   12602:	8899      	ldrh	r1, [r3, #4]
   12604:	4291      	cmp	r1, r2
   12606:	d10a      	bne.n	1261e <app_key_status+0x4a>
   12608:	88d9      	ldrh	r1, [r3, #6]
   1260a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1260e:	4291      	cmp	r1, r2
   12610:	d105      	bne.n	1261e <app_key_status+0x4a>
	if (param->status) {
   12612:	681b      	ldr	r3, [r3, #0]
   12614:	b103      	cbz	r3, 12618 <app_key_status+0x44>
		*param->status = status;
   12616:	701d      	strb	r5, [r3, #0]
	k_sem_give(&cli->op_sync);
   12618:	3004      	adds	r0, #4
   1261a:	f019 fc20 	bl	2be5e <k_sem_give>
}
   1261e:	b002      	add	sp, #8
   12620:	bd70      	pop	{r4, r5, r6, pc}
   12622:	bf00      	nop
   12624:	20002ae8 	.word	0x20002ae8

00012628 <net_key_list>:
{
   12628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cli->op_pending != OP_NET_KEY_LIST) {
   1262c:	4f17      	ldr	r7, [pc, #92]	; (1268c <net_key_list+0x64>)
   1262e:	683b      	ldr	r3, [r7, #0]
   12630:	69d9      	ldr	r1, [r3, #28]
{
   12632:	4615      	mov	r5, r2
	if (cli->op_pending != OP_NET_KEY_LIST) {
   12634:	f248 0243 	movw	r2, #32835	; 0x8043
   12638:	4291      	cmp	r1, r2
   1263a:	d125      	bne.n	12688 <net_key_list+0x60>
	param = cli->op_param;
   1263c:	6a1e      	ldr	r6, [r3, #32]
	for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   1263e:	2400      	movs	r4, #0
   12640:	6873      	ldr	r3, [r6, #4]
   12642:	681b      	ldr	r3, [r3, #0]
   12644:	429c      	cmp	r4, r3
   12646:	46a0      	mov	r8, r4
   12648:	d20c      	bcs.n	12664 <net_key_list+0x3c>
   1264a:	88ab      	ldrh	r3, [r5, #4]
   1264c:	2b02      	cmp	r3, #2
   1264e:	d811      	bhi.n	12674 <net_key_list+0x4c>
	if (i < *param->key_cnt && buf->len >= 2) {
   12650:	d108      	bne.n	12664 <net_key_list+0x3c>
		param->keys[i++] = net_buf_simple_pull_le16(buf) & 0xfff;
   12652:	4628      	mov	r0, r5
   12654:	f019 fdad 	bl	2c1b2 <net_buf_simple_pull_le16>
   12658:	6833      	ldr	r3, [r6, #0]
   1265a:	f3c0 000b 	ubfx	r0, r0, #0, #12
   1265e:	f823 0018 	strh.w	r0, [r3, r8, lsl #1]
   12662:	3401      	adds	r4, #1
	*param->key_cnt = i;
   12664:	6873      	ldr	r3, [r6, #4]
	k_sem_give(&cli->op_sync);
   12666:	6838      	ldr	r0, [r7, #0]
	*param->key_cnt = i;
   12668:	601c      	str	r4, [r3, #0]
	k_sem_give(&cli->op_sync);
   1266a:	3004      	adds	r0, #4
}
   1266c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_sem_give(&cli->op_sync);
   12670:	f019 bbf5 	b.w	2be5e <k_sem_give>
		key_idx_unpack(buf, &param->keys[i], &param->keys[i + 1]);
   12674:	0063      	lsls	r3, r4, #1
   12676:	6831      	ldr	r1, [r6, #0]
   12678:	1c9a      	adds	r2, r3, #2
   1267a:	440a      	add	r2, r1
   1267c:	4628      	mov	r0, r5
   1267e:	4419      	add	r1, r3
   12680:	f019 fbef 	bl	2be62 <key_idx_unpack>
	for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   12684:	3402      	adds	r4, #2
   12686:	e7db      	b.n	12640 <net_key_list+0x18>
}
   12688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1268c:	20002ae8 	.word	0x20002ae8

00012690 <comp_data_status>:
{
   12690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (cli->op_pending != OP_DEV_COMP_DATA_STATUS) {
   12692:	4e10      	ldr	r6, [pc, #64]	; (126d4 <comp_data_status+0x44>)
   12694:	6833      	ldr	r3, [r6, #0]
   12696:	69d9      	ldr	r1, [r3, #28]
   12698:	2902      	cmp	r1, #2
{
   1269a:	4614      	mov	r4, r2
	if (cli->op_pending != OP_DEV_COMP_DATA_STATUS) {
   1269c:	d119      	bne.n	126d2 <comp_data_status+0x42>
	param = cli->op_param;
   1269e:	6a1d      	ldr	r5, [r3, #32]
	*(param->status) = net_buf_simple_pull_u8(buf);
   126a0:	4610      	mov	r0, r2
   126a2:	682f      	ldr	r7, [r5, #0]
   126a4:	f019 fd7d 	bl	2c1a2 <net_buf_simple_pull_u8>
   126a8:	7038      	strb	r0, [r7, #0]
	to_copy  = MIN(net_buf_simple_tailroom(param->comp), buf->len);
   126aa:	6868      	ldr	r0, [r5, #4]
   126ac:	f019 fda1 	bl	2c1f2 <net_buf_simple_tailroom>
   126b0:	88a2      	ldrh	r2, [r4, #4]
   126b2:	4290      	cmp	r0, r2
   126b4:	d203      	bcs.n	126be <comp_data_status+0x2e>
   126b6:	6868      	ldr	r0, [r5, #4]
   126b8:	f019 fd9b 	bl	2c1f2 <net_buf_simple_tailroom>
   126bc:	4602      	mov	r2, r0
	net_buf_simple_add_mem(param->comp, buf->data, to_copy);
   126be:	6821      	ldr	r1, [r4, #0]
   126c0:	6868      	ldr	r0, [r5, #4]
   126c2:	f019 fcf0 	bl	2c0a6 <net_buf_simple_add_mem>
	k_sem_give(&cli->op_sync);
   126c6:	6830      	ldr	r0, [r6, #0]
}
   126c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_sem_give(&cli->op_sync);
   126cc:	3004      	adds	r0, #4
   126ce:	f019 bbc6 	b.w	2be5e <k_sem_give>
}
   126d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126d4:	20002ae8 	.word	0x20002ae8

000126d8 <cli_wait>:

static int cli_wait(void)
{
	int err;

	err = k_sem_take(&cli->op_sync, SYS_TIMEOUT_MS(msg_timeout));
   126d8:	4b12      	ldr	r3, [pc, #72]	; (12724 <cli_wait+0x4c>)
{
   126da:	b5d0      	push	{r4, r6, r7, lr}
	err = k_sem_take(&cli->op_sync, SYS_TIMEOUT_MS(msg_timeout));
   126dc:	681c      	ldr	r4, [r3, #0]
   126de:	4b12      	ldr	r3, [pc, #72]	; (12728 <cli_wait+0x50>)
   126e0:	6819      	ldr	r1, [r3, #0]
   126e2:	1c4b      	adds	r3, r1, #1
   126e4:	f104 0404 	add.w	r4, r4, #4
   126e8:	d017      	beq.n	1271a <cli_wait+0x42>
   126ea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   126ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   126f2:	f240 36e7 	movw	r6, #999	; 0x3e7
   126f6:	2700      	movs	r7, #0
   126f8:	fbc0 6701 	smlal	r6, r7, r0, r1
   126fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12700:	2300      	movs	r3, #0
   12702:	4630      	mov	r0, r6
   12704:	4639      	mov	r1, r7
   12706:	f7ed fd4b 	bl	1a0 <__aeabi_uldivmod>
   1270a:	4602      	mov	r2, r0
   1270c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1270e:	4620      	mov	r0, r4
   12710:	f011 f9f6 	bl	23b00 <z_impl_k_sem_take>

	cli_reset();
   12714:	f7ff fe5a 	bl	123cc <cli_reset>

	return err;
}
   12718:	bdd0      	pop	{r4, r6, r7, pc}
	err = k_sem_take(&cli->op_sync, SYS_TIMEOUT_MS(msg_timeout));
   1271a:	f04f 32ff 	mov.w	r2, #4294967295
   1271e:	4613      	mov	r3, r2
   12720:	e7f5      	b.n	1270e <cli_wait+0x36>
   12722:	bf00      	nop
   12724:	20002ae8 	.word	0x20002ae8
   12728:	20002aec 	.word	0x20002aec

0001272c <mod_app_bind>:
}

static int mod_app_bind(uint16_t net_idx, uint16_t addr, uint16_t elem_addr,
			uint16_t mod_app_idx, uint16_t mod_id, uint16_t cid,
			uint8_t *status)
{
   1272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12730:	b090      	sub	sp, #64	; 0x40
   12732:	4615      	mov	r5, r2
   12734:	461c      	mov	r4, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_BIND, 8);
   12736:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
   1273a:	ab0c      	add	r3, sp, #48	; 0x30
   1273c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   12740:	9303      	str	r3, [sp, #12]
	struct bt_mesh_msg_ctx ctx = {
   12742:	2300      	movs	r3, #0
   12744:	f8cd 301e 	str.w	r3, [sp, #30]
   12748:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1274c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
{
   12750:	f8bd 8058 	ldrh.w	r8, [sp, #88]	; 0x58
   12754:	f8bd 605c 	ldrh.w	r6, [sp, #92]	; 0x5c
   12758:	9f18      	ldr	r7, [sp, #96]	; 0x60
	struct bt_mesh_msg_ctx ctx = {
   1275a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1275e:	f8ad 301a 	strh.w	r3, [sp, #26]
   12762:	f8ad 101c 	strh.w	r1, [sp, #28]
   12766:	23ff      	movs	r3, #255	; 0xff
		.mod_id = mod_id,
		.cid = cid,
	};
	int err;

	err = cli_prepare(&param, OP_MOD_APP_STATUS);
   12768:	f248 013e 	movw	r1, #32830	; 0x803e
   1276c:	a809      	add	r0, sp, #36	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   1276e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	struct mod_app_param param = {
   12772:	9709      	str	r7, [sp, #36]	; 0x24
   12774:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
   12778:	f8ad 402a 	strh.w	r4, [sp, #42]	; 0x2a
   1277c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
   12780:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
	err = cli_prepare(&param, OP_MOD_APP_STATUS);
   12784:	f7ff fe10 	bl	123a8 <cli_prepare>
	if (err) {
   12788:	bb20      	cbnz	r0, 127d4 <mod_app_bind+0xa8>
		return err;
	}

	bt_mesh_model_msg_init(&msg, OP_MOD_APP_BIND);
   1278a:	f248 013d 	movw	r1, #32829	; 0x803d
   1278e:	a803      	add	r0, sp, #12
   12790:	f017 fe30 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, elem_addr);
   12794:	4629      	mov	r1, r5
   12796:	a803      	add	r0, sp, #12
   12798:	f019 fc96 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, mod_app_idx);
   1279c:	4621      	mov	r1, r4
   1279e:	a803      	add	r0, sp, #12
   127a0:	f019 fc92 	bl	2c0c8 <net_buf_simple_add_le16>

	if (cid != CID_NVAL) {
   127a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   127a8:	429e      	cmp	r6, r3
   127aa:	d003      	beq.n	127b4 <mod_app_bind+0x88>
		net_buf_simple_add_le16(&msg, cid);
   127ac:	4631      	mov	r1, r6
   127ae:	a803      	add	r0, sp, #12
   127b0:	f019 fc8a 	bl	2c0c8 <net_buf_simple_add_le16>
	}

	net_buf_simple_add_le16(&msg, mod_id);
   127b4:	4641      	mov	r1, r8
   127b6:	a803      	add	r0, sp, #12
   127b8:	f019 fc86 	bl	2c0c8 <net_buf_simple_add_le16>

	err = bt_mesh_model_send(cli->model, &ctx, &msg, NULL, NULL);
   127bc:	4b09      	ldr	r3, [pc, #36]	; (127e4 <mod_app_bind+0xb8>)
   127be:	6818      	ldr	r0, [r3, #0]
   127c0:	2300      	movs	r3, #0
   127c2:	9300      	str	r3, [sp, #0]
   127c4:	6800      	ldr	r0, [r0, #0]
   127c6:	aa03      	add	r2, sp, #12
   127c8:	a906      	add	r1, sp, #24
   127ca:	f017 fe3c 	bl	2a446 <bt_mesh_model_send>
	if (err) {
   127ce:	b120      	cbz	r0, 127da <mod_app_bind+0xae>
		cli_reset();
		return err;
	}

	if (!status) {
		cli_reset();
   127d0:	f7ff fdfc 	bl	123cc <cli_reset>
		return 0;
	}

	return cli_wait();
}
   127d4:	b010      	add	sp, #64	; 0x40
   127d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!status) {
   127da:	2f00      	cmp	r7, #0
   127dc:	d0f8      	beq.n	127d0 <mod_app_bind+0xa4>
	return cli_wait();
   127de:	f7ff ff7b 	bl	126d8 <cli_wait>
   127e2:	e7f7      	b.n	127d4 <mod_app_bind+0xa8>
   127e4:	20002ae8 	.word	0x20002ae8

000127e8 <state_status_u8.isra.0>:
static void state_status_u8(struct bt_mesh_model *model,
   127e8:	b538      	push	{r3, r4, r5, lr}
	if (cli->op_pending != expect_status) {
   127ea:	4c08      	ldr	r4, [pc, #32]	; (1280c <state_status_u8.isra.0+0x24>)
   127ec:	6823      	ldr	r3, [r4, #0]
   127ee:	69da      	ldr	r2, [r3, #28]
   127f0:	428a      	cmp	r2, r1
   127f2:	d109      	bne.n	12808 <state_status_u8.isra.0+0x20>
	status = cli->op_param;
   127f4:	6a1d      	ldr	r5, [r3, #32]
	*status = net_buf_simple_pull_u8(buf);
   127f6:	f019 fcd4 	bl	2c1a2 <net_buf_simple_pull_u8>
   127fa:	7028      	strb	r0, [r5, #0]
	k_sem_give(&cli->op_sync);
   127fc:	6820      	ldr	r0, [r4, #0]
}
   127fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&cli->op_sync);
   12802:	3004      	adds	r0, #4
   12804:	f019 bb2b 	b.w	2be5e <k_sem_give>
}
   12808:	bd38      	pop	{r3, r4, r5, pc}
   1280a:	bf00      	nop
   1280c:	20002ae8 	.word	0x20002ae8

00012810 <mod_member_list_handle.isra.0>:
static void mod_member_list_handle(struct bt_mesh_msg_ctx *ctx,
   12810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12814:	4605      	mov	r5, r0
   12816:	4689      	mov	r9, r1
	status = net_buf_simple_pull_u8(buf);
   12818:	f019 fcc3 	bl	2c1a2 <net_buf_simple_pull_u8>
   1281c:	4680      	mov	r8, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   1281e:	4628      	mov	r0, r5
   12820:	f019 fcc7 	bl	2c1b2 <net_buf_simple_pull_le16>
static void mod_member_list_handle(struct bt_mesh_msg_ctx *ctx,
   12824:	2400      	movs	r4, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   12826:	4682      	mov	sl, r0
	if (vnd) {
   12828:	f1b9 0f00 	cmp.w	r9, #0
   1282c:	d003      	beq.n	12836 <mod_member_list_handle.isra.0+0x26>
		cid = net_buf_simple_pull_le16(buf);
   1282e:	4628      	mov	r0, r5
   12830:	f019 fcbf 	bl	2c1b2 <net_buf_simple_pull_le16>
   12834:	4604      	mov	r4, r0
	param = cli->op_param;
   12836:	4f1a      	ldr	r7, [pc, #104]	; (128a0 <mod_member_list_handle.isra.0+0x90>)
	mod_id = net_buf_simple_pull_le16(buf);
   12838:	4628      	mov	r0, r5
   1283a:	f019 fcba 	bl	2c1b2 <net_buf_simple_pull_le16>
	param = cli->op_param;
   1283e:	683b      	ldr	r3, [r7, #0]
   12840:	6a1e      	ldr	r6, [r3, #32]
	if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   12842:	88b3      	ldrh	r3, [r6, #4]
   12844:	4553      	cmp	r3, sl
   12846:	d128      	bne.n	1289a <mod_member_list_handle.isra.0+0x8a>
   12848:	88f3      	ldrh	r3, [r6, #6]
   1284a:	4283      	cmp	r3, r0
   1284c:	d125      	bne.n	1289a <mod_member_list_handle.isra.0+0x8a>
   1284e:	f1b9 0f00 	cmp.w	r9, #0
   12852:	d002      	beq.n	1285a <mod_member_list_handle.isra.0+0x4a>
	    (vnd && param->cid != cid)) {
   12854:	8933      	ldrh	r3, [r6, #8]
   12856:	42a3      	cmp	r3, r4
   12858:	d11f      	bne.n	1289a <mod_member_list_handle.isra.0+0x8a>
	if (buf->len % 2) {
   1285a:	88ac      	ldrh	r4, [r5, #4]
   1285c:	f014 0401 	ands.w	r4, r4, #1
   12860:	d11b      	bne.n	1289a <mod_member_list_handle.isra.0+0x8a>
	for (i = 0; i < *param->member_cnt && buf->len; i++) {
   12862:	6933      	ldr	r3, [r6, #16]
   12864:	681a      	ldr	r2, [r3, #0]
   12866:	42a2      	cmp	r2, r4
   12868:	d808      	bhi.n	1287c <mod_member_list_handle.isra.0+0x6c>
	*param->member_cnt = i;
   1286a:	601c      	str	r4, [r3, #0]
	if (param->status) {
   1286c:	6833      	ldr	r3, [r6, #0]
   1286e:	b98b      	cbnz	r3, 12894 <mod_member_list_handle.isra.0+0x84>
	k_sem_give(&cli->op_sync);
   12870:	6838      	ldr	r0, [r7, #0]
}
   12872:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sem_give(&cli->op_sync);
   12876:	3004      	adds	r0, #4
   12878:	f019 baf1 	b.w	2be5e <k_sem_give>
	for (i = 0; i < *param->member_cnt && buf->len; i++) {
   1287c:	88aa      	ldrh	r2, [r5, #4]
   1287e:	2a00      	cmp	r2, #0
   12880:	d0f3      	beq.n	1286a <mod_member_list_handle.isra.0+0x5a>
		param->members[i] = net_buf_simple_pull_le16(buf);
   12882:	4628      	mov	r0, r5
   12884:	f8d6 900c 	ldr.w	r9, [r6, #12]
   12888:	f019 fc93 	bl	2c1b2 <net_buf_simple_pull_le16>
   1288c:	f829 0014 	strh.w	r0, [r9, r4, lsl #1]
	for (i = 0; i < *param->member_cnt && buf->len; i++) {
   12890:	3401      	adds	r4, #1
   12892:	e7e6      	b.n	12862 <mod_member_list_handle.isra.0+0x52>
		*param->status = status;
   12894:	f883 8000 	strb.w	r8, [r3]
   12898:	e7ea      	b.n	12870 <mod_member_list_handle.isra.0+0x60>
}
   1289a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1289e:	bf00      	nop
   128a0:	20002ae8 	.word	0x20002ae8

000128a4 <mod_sub_list_vnd>:
	if (cli->op_pending != OP_MOD_SUB_LIST_VND) {
   128a4:	4b05      	ldr	r3, [pc, #20]	; (128bc <mod_sub_list_vnd+0x18>)
   128a6:	681b      	ldr	r3, [r3, #0]
{
   128a8:	4610      	mov	r0, r2
	if (cli->op_pending != OP_MOD_SUB_LIST_VND) {
   128aa:	69da      	ldr	r2, [r3, #28]
   128ac:	f248 032c 	movw	r3, #32812	; 0x802c
   128b0:	429a      	cmp	r2, r3
   128b2:	d102      	bne.n	128ba <mod_sub_list_vnd+0x16>
	mod_member_list_handle(ctx, buf, true);
   128b4:	2101      	movs	r1, #1
   128b6:	f7ff bfab 	b.w	12810 <mod_member_list_handle.isra.0>
}
   128ba:	4770      	bx	lr
   128bc:	20002ae8 	.word	0x20002ae8

000128c0 <mod_sub_list>:
	if (cli->op_pending != OP_MOD_SUB_LIST) {
   128c0:	4b05      	ldr	r3, [pc, #20]	; (128d8 <mod_sub_list+0x18>)
   128c2:	681b      	ldr	r3, [r3, #0]
{
   128c4:	4610      	mov	r0, r2
	if (cli->op_pending != OP_MOD_SUB_LIST) {
   128c6:	69da      	ldr	r2, [r3, #28]
   128c8:	f248 032a 	movw	r3, #32810	; 0x802a
   128cc:	429a      	cmp	r2, r3
   128ce:	d102      	bne.n	128d6 <mod_sub_list+0x16>
	mod_member_list_handle(ctx, buf, false);
   128d0:	2100      	movs	r1, #0
   128d2:	f7ff bf9d 	b.w	12810 <mod_member_list_handle.isra.0>
}
   128d6:	4770      	bx	lr
   128d8:	20002ae8 	.word	0x20002ae8

000128dc <mod_app_list_vnd>:
	if (cli->op_pending != OP_VND_MOD_APP_LIST) {
   128dc:	4b05      	ldr	r3, [pc, #20]	; (128f4 <mod_app_list_vnd+0x18>)
   128de:	681b      	ldr	r3, [r3, #0]
{
   128e0:	4610      	mov	r0, r2
	if (cli->op_pending != OP_VND_MOD_APP_LIST) {
   128e2:	69da      	ldr	r2, [r3, #28]
   128e4:	f248 034e 	movw	r3, #32846	; 0x804e
   128e8:	429a      	cmp	r2, r3
   128ea:	d102      	bne.n	128f2 <mod_app_list_vnd+0x16>
	mod_member_list_handle(ctx, buf, true);
   128ec:	2101      	movs	r1, #1
   128ee:	f7ff bf8f 	b.w	12810 <mod_member_list_handle.isra.0>
}
   128f2:	4770      	bx	lr
   128f4:	20002ae8 	.word	0x20002ae8

000128f8 <mod_app_list>:
	if (cli->op_pending != OP_SIG_MOD_APP_LIST) {
   128f8:	4b05      	ldr	r3, [pc, #20]	; (12910 <mod_app_list+0x18>)
   128fa:	681b      	ldr	r3, [r3, #0]
{
   128fc:	4610      	mov	r0, r2
	if (cli->op_pending != OP_SIG_MOD_APP_LIST) {
   128fe:	69da      	ldr	r2, [r3, #28]
   12900:	f248 034c 	movw	r3, #32844	; 0x804c
   12904:	429a      	cmp	r2, r3
   12906:	d102      	bne.n	1290e <mod_app_list+0x16>
	mod_member_list_handle(ctx, buf, false);
   12908:	2100      	movs	r1, #0
   1290a:	f7ff bf81 	b.w	12810 <mod_member_list_handle.isra.0>
}
   1290e:	4770      	bx	lr
   12910:	20002ae8 	.word	0x20002ae8

00012914 <mod_sub_status>:
{
   12914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (cli->op_pending != OP_MOD_SUB_STATUS) {
   12918:	4b1f      	ldr	r3, [pc, #124]	; (12998 <mod_sub_status+0x84>)
{
   1291a:	4614      	mov	r4, r2
	if (cli->op_pending != OP_MOD_SUB_STATUS) {
   1291c:	681a      	ldr	r2, [r3, #0]
   1291e:	69d1      	ldr	r1, [r2, #28]
   12920:	f248 021f 	movw	r2, #32799	; 0x801f
   12924:	4291      	cmp	r1, r2
   12926:	4699      	mov	r9, r3
   12928:	d134      	bne.n	12994 <mod_sub_status+0x80>
	status = net_buf_simple_pull_u8(buf);
   1292a:	4620      	mov	r0, r4
   1292c:	f019 fc39 	bl	2c1a2 <net_buf_simple_pull_u8>
   12930:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   12932:	4620      	mov	r0, r4
   12934:	f019 fc3d 	bl	2c1b2 <net_buf_simple_pull_le16>
   12938:	4680      	mov	r8, r0
	sub_addr = net_buf_simple_pull_le16(buf);
   1293a:	4620      	mov	r0, r4
   1293c:	f019 fc39 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (buf->len >= 4U) {
   12940:	88a3      	ldrh	r3, [r4, #4]
   12942:	2b03      	cmp	r3, #3
	sub_addr = net_buf_simple_pull_le16(buf);
   12944:	4605      	mov	r5, r0
	if (buf->len >= 4U) {
   12946:	d922      	bls.n	1298e <mod_sub_status+0x7a>
		cid = net_buf_simple_pull_le16(buf);
   12948:	4620      	mov	r0, r4
   1294a:	f019 fc32 	bl	2c1b2 <net_buf_simple_pull_le16>
   1294e:	4606      	mov	r6, r0
	mod_id = net_buf_simple_pull_le16(buf);
   12950:	4620      	mov	r0, r4
   12952:	f019 fc2e 	bl	2c1b2 <net_buf_simple_pull_le16>
	param = cli->op_param;
   12956:	f8d9 2000 	ldr.w	r2, [r9]
   1295a:	6a13      	ldr	r3, [r2, #32]
	if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   1295c:	8899      	ldrh	r1, [r3, #4]
   1295e:	4541      	cmp	r1, r8
   12960:	d118      	bne.n	12994 <mod_sub_status+0x80>
   12962:	8a19      	ldrh	r1, [r3, #16]
   12964:	4281      	cmp	r1, r0
   12966:	d115      	bne.n	12994 <mod_sub_status+0x80>
	    (param->expect_sub && *param->expect_sub != sub_addr) ||
   12968:	68d9      	ldr	r1, [r3, #12]
	if (param->elem_addr != elem_addr || param->mod_id != mod_id ||
   1296a:	b111      	cbz	r1, 12972 <mod_sub_status+0x5e>
	    (param->expect_sub && *param->expect_sub != sub_addr) ||
   1296c:	8809      	ldrh	r1, [r1, #0]
   1296e:	42a9      	cmp	r1, r5
   12970:	d110      	bne.n	12994 <mod_sub_status+0x80>
   12972:	8a59      	ldrh	r1, [r3, #18]
   12974:	42b1      	cmp	r1, r6
   12976:	d10d      	bne.n	12994 <mod_sub_status+0x80>
	if (param->sub_addr) {
   12978:	6899      	ldr	r1, [r3, #8]
   1297a:	b101      	cbz	r1, 1297e <mod_sub_status+0x6a>
		*param->sub_addr = sub_addr;
   1297c:	800d      	strh	r5, [r1, #0]
	if (param->status) {
   1297e:	681b      	ldr	r3, [r3, #0]
   12980:	b103      	cbz	r3, 12984 <mod_sub_status+0x70>
		*param->status = status;
   12982:	701f      	strb	r7, [r3, #0]
}
   12984:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	k_sem_give(&cli->op_sync);
   12988:	1d10      	adds	r0, r2, #4
   1298a:	f019 ba68 	b.w	2be5e <k_sem_give>
		cid = CID_NVAL;
   1298e:	f64f 76ff 	movw	r6, #65535	; 0xffff
   12992:	e7dd      	b.n	12950 <mod_sub_status+0x3c>
}
   12994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12998:	20002ae8 	.word	0x20002ae8

0001299c <mod_app_status>:
{
   1299c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (cli->op_pending != OP_MOD_APP_STATUS) {
   129a0:	4b1d      	ldr	r3, [pc, #116]	; (12a18 <mod_app_status+0x7c>)
{
   129a2:	4614      	mov	r4, r2
	if (cli->op_pending != OP_MOD_APP_STATUS) {
   129a4:	681a      	ldr	r2, [r3, #0]
   129a6:	69d1      	ldr	r1, [r2, #28]
   129a8:	f248 023e 	movw	r2, #32830	; 0x803e
   129ac:	4291      	cmp	r1, r2
   129ae:	4699      	mov	r9, r3
   129b0:	d130      	bne.n	12a14 <mod_app_status+0x78>
	status = net_buf_simple_pull_u8(buf);
   129b2:	4620      	mov	r0, r4
   129b4:	f019 fbf5 	bl	2c1a2 <net_buf_simple_pull_u8>
   129b8:	4606      	mov	r6, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   129ba:	4620      	mov	r0, r4
   129bc:	f019 fbf9 	bl	2c1b2 <net_buf_simple_pull_le16>
   129c0:	4680      	mov	r8, r0
	mod_app_idx = net_buf_simple_pull_le16(buf);
   129c2:	4620      	mov	r0, r4
   129c4:	f019 fbf5 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (buf->len >= 4U) {
   129c8:	88a3      	ldrh	r3, [r4, #4]
   129ca:	2b03      	cmp	r3, #3
	mod_app_idx = net_buf_simple_pull_le16(buf);
   129cc:	4607      	mov	r7, r0
	if (buf->len >= 4U) {
   129ce:	d91e      	bls.n	12a0e <mod_app_status+0x72>
		cid = net_buf_simple_pull_le16(buf);
   129d0:	4620      	mov	r0, r4
   129d2:	f019 fbee 	bl	2c1b2 <net_buf_simple_pull_le16>
   129d6:	4605      	mov	r5, r0
	mod_id = net_buf_simple_pull_le16(buf);
   129d8:	4620      	mov	r0, r4
   129da:	f019 fbea 	bl	2c1b2 <net_buf_simple_pull_le16>
   129de:	4602      	mov	r2, r0
	param = cli->op_param;
   129e0:	f8d9 0000 	ldr.w	r0, [r9]
   129e4:	6a03      	ldr	r3, [r0, #32]
	if (param->elem_addr != elem_addr ||
   129e6:	8899      	ldrh	r1, [r3, #4]
   129e8:	4541      	cmp	r1, r8
   129ea:	d113      	bne.n	12a14 <mod_app_status+0x78>
   129ec:	88d9      	ldrh	r1, [r3, #6]
   129ee:	42b9      	cmp	r1, r7
   129f0:	d110      	bne.n	12a14 <mod_app_status+0x78>
	    param->mod_app_idx != mod_app_idx || param->mod_id != mod_id ||
   129f2:	8919      	ldrh	r1, [r3, #8]
   129f4:	4291      	cmp	r1, r2
   129f6:	d10d      	bne.n	12a14 <mod_app_status+0x78>
   129f8:	895a      	ldrh	r2, [r3, #10]
   129fa:	42aa      	cmp	r2, r5
   129fc:	d10a      	bne.n	12a14 <mod_app_status+0x78>
	if (param->status) {
   129fe:	681b      	ldr	r3, [r3, #0]
   12a00:	b103      	cbz	r3, 12a04 <mod_app_status+0x68>
		*param->status = status;
   12a02:	701e      	strb	r6, [r3, #0]
}
   12a04:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	k_sem_give(&cli->op_sync);
   12a08:	3004      	adds	r0, #4
   12a0a:	f019 ba28 	b.w	2be5e <k_sem_give>
		cid = CID_NVAL;
   12a0e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   12a12:	e7e1      	b.n	129d8 <mod_app_status+0x3c>
}
   12a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12a18:	20002ae8 	.word	0x20002ae8

00012a1c <net_key_status>:
{
   12a1c:	b570      	push	{r4, r5, r6, lr}
	if (cli->op_pending != OP_NET_KEY_STATUS) {
   12a1e:	4e0f      	ldr	r6, [pc, #60]	; (12a5c <net_key_status+0x40>)
   12a20:	6833      	ldr	r3, [r6, #0]
{
   12a22:	4614      	mov	r4, r2
	if (cli->op_pending != OP_NET_KEY_STATUS) {
   12a24:	69da      	ldr	r2, [r3, #28]
   12a26:	f248 0344 	movw	r3, #32836	; 0x8044
   12a2a:	429a      	cmp	r2, r3
   12a2c:	d115      	bne.n	12a5a <net_key_status+0x3e>
	status = net_buf_simple_pull_u8(buf);
   12a2e:	4620      	mov	r0, r4
   12a30:	f019 fbb7 	bl	2c1a2 <net_buf_simple_pull_u8>
   12a34:	4605      	mov	r5, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   12a36:	4620      	mov	r0, r4
   12a38:	f019 fbbb 	bl	2c1b2 <net_buf_simple_pull_le16>
	param = cli->op_param;
   12a3c:	6832      	ldr	r2, [r6, #0]
   12a3e:	6a11      	ldr	r1, [r2, #32]
	if (param->net_idx != net_idx) {
   12a40:	888c      	ldrh	r4, [r1, #4]
   12a42:	f3c0 030b 	ubfx	r3, r0, #0, #12
   12a46:	429c      	cmp	r4, r3
   12a48:	d107      	bne.n	12a5a <net_key_status+0x3e>
	if (param->status) {
   12a4a:	680b      	ldr	r3, [r1, #0]
   12a4c:	b103      	cbz	r3, 12a50 <net_key_status+0x34>
		*param->status = status;
   12a4e:	701d      	strb	r5, [r3, #0]
}
   12a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sem_give(&cli->op_sync);
   12a54:	1d10      	adds	r0, r2, #4
   12a56:	f019 ba02 	b.w	2be5e <k_sem_give>
}
   12a5a:	bd70      	pop	{r4, r5, r6, pc}
   12a5c:	20002ae8 	.word	0x20002ae8

00012a60 <app_key_list>:
{
   12a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (cli->op_pending != OP_APP_KEY_LIST) {
   12a64:	4f20      	ldr	r7, [pc, #128]	; (12ae8 <app_key_list+0x88>)
   12a66:	683b      	ldr	r3, [r7, #0]
{
   12a68:	4615      	mov	r5, r2
	if (cli->op_pending != OP_APP_KEY_LIST) {
   12a6a:	69da      	ldr	r2, [r3, #28]
   12a6c:	f248 0302 	movw	r3, #32770	; 0x8002
   12a70:	429a      	cmp	r2, r3
   12a72:	d136      	bne.n	12ae2 <app_key_list+0x82>
	status = net_buf_simple_pull_u8(buf);
   12a74:	4628      	mov	r0, r5
   12a76:	f019 fb94 	bl	2c1a2 <net_buf_simple_pull_u8>
   12a7a:	4680      	mov	r8, r0
	net_idx = net_buf_simple_pull_le16(buf) & 0xfff;
   12a7c:	4628      	mov	r0, r5
   12a7e:	f019 fb98 	bl	2c1b2 <net_buf_simple_pull_le16>
	param = cli->op_param;
   12a82:	683b      	ldr	r3, [r7, #0]
   12a84:	6a1e      	ldr	r6, [r3, #32]
	if (param->net_idx != net_idx) {
   12a86:	8833      	ldrh	r3, [r6, #0]
   12a88:	f3c0 000b 	ubfx	r0, r0, #0, #12
   12a8c:	4283      	cmp	r3, r0
   12a8e:	d128      	bne.n	12ae2 <app_key_list+0x82>
	for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   12a90:	2400      	movs	r4, #0
   12a92:	68f3      	ldr	r3, [r6, #12]
   12a94:	681b      	ldr	r3, [r3, #0]
   12a96:	42a3      	cmp	r3, r4
   12a98:	46a1      	mov	r9, r4
   12a9a:	d90c      	bls.n	12ab6 <app_key_list+0x56>
   12a9c:	88ab      	ldrh	r3, [r5, #4]
   12a9e:	2b02      	cmp	r3, #2
   12aa0:	d815      	bhi.n	12ace <app_key_list+0x6e>
	if (i < *param->key_cnt && buf->len >= 2) {
   12aa2:	d108      	bne.n	12ab6 <app_key_list+0x56>
		param->keys[i++] = net_buf_simple_pull_le16(buf) & 0xfff;
   12aa4:	4628      	mov	r0, r5
   12aa6:	f019 fb84 	bl	2c1b2 <net_buf_simple_pull_le16>
   12aaa:	68b3      	ldr	r3, [r6, #8]
   12aac:	f3c0 000b 	ubfx	r0, r0, #0, #12
   12ab0:	f823 0019 	strh.w	r0, [r3, r9, lsl #1]
   12ab4:	3401      	adds	r4, #1
	*param->key_cnt = i;
   12ab6:	68f3      	ldr	r3, [r6, #12]
   12ab8:	601c      	str	r4, [r3, #0]
	if (param->status) {
   12aba:	6873      	ldr	r3, [r6, #4]
   12abc:	b10b      	cbz	r3, 12ac2 <app_key_list+0x62>
		*param->status = status;
   12abe:	f883 8000 	strb.w	r8, [r3]
	k_sem_give(&cli->op_sync);
   12ac2:	6838      	ldr	r0, [r7, #0]
}
   12ac4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	k_sem_give(&cli->op_sync);
   12ac8:	3004      	adds	r0, #4
   12aca:	f019 b9c8 	b.w	2be5e <k_sem_give>
		key_idx_unpack(buf, &param->keys[i], &param->keys[i + 1]);
   12ace:	0063      	lsls	r3, r4, #1
   12ad0:	68b1      	ldr	r1, [r6, #8]
   12ad2:	1c9a      	adds	r2, r3, #2
   12ad4:	440a      	add	r2, r1
   12ad6:	4628      	mov	r0, r5
   12ad8:	4419      	add	r1, r3
   12ada:	f019 f9c2 	bl	2be62 <key_idx_unpack>
	for (i = 0; i < *param->key_cnt && buf->len >= 3; i += 2) {
   12ade:	3402      	adds	r4, #2
   12ae0:	e7d7      	b.n	12a92 <app_key_list+0x32>
}
   12ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12ae6:	bf00      	nop
   12ae8:	20002ae8 	.word	0x20002ae8

00012aec <cfg_cli_init>:
{
   12aec:	b510      	push	{r4, lr}
	if (!bt_mesh_model_in_primary(model)) {
   12aee:	7904      	ldrb	r4, [r0, #4]
{
   12af0:	4603      	mov	r3, r0
	if (!bt_mesh_model_in_primary(model)) {
   12af2:	b994      	cbnz	r4, 12b1a <cfg_cli_init+0x2e>
	if (!model->user_data) {
   12af4:	6980      	ldr	r0, [r0, #24]
   12af6:	b180      	cbz	r0, 12b1a <cfg_cli_init+0x2e>
	cli = model->user_data;
   12af8:	4a09      	ldr	r2, [pc, #36]	; (12b20 <cfg_cli_init+0x34>)
   12afa:	6010      	str	r0, [r2, #0]
	msg_timeout = 2 * MSEC_PER_SEC;
   12afc:	4a09      	ldr	r2, [pc, #36]	; (12b24 <cfg_cli_init+0x38>)
	cli->model = model;
   12afe:	f840 3b04 	str.w	r3, [r0], #4
	msg_timeout = 2 * MSEC_PER_SEC;
   12b02:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   12b06:	6011      	str	r1, [r2, #0]
	model->keys[0] = BT_MESH_KEY_DEV_ANY;
   12b08:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   12b0c:	819a      	strh	r2, [r3, #12]
	return z_impl_k_sem_init(sem, initial_count, limit);
   12b0e:	2201      	movs	r2, #1
   12b10:	4621      	mov	r1, r4
   12b12:	f01a fcc7 	bl	2d4a4 <z_impl_k_sem_init>
	return 0;
   12b16:	4620      	mov	r0, r4
}
   12b18:	bd10      	pop	{r4, pc}
		return -EINVAL;
   12b1a:	f06f 0015 	mvn.w	r0, #21
   12b1e:	e7fb      	b.n	12b18 <cfg_cli_init+0x2c>
   12b20:	20002ae8 	.word	0x20002ae8
   12b24:	20002aec 	.word	0x20002aec

00012b28 <bt_mesh_cfg_app_key_add>:
{
   12b28:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b2a:	b091      	sub	sp, #68	; 0x44
   12b2c:	4615      	mov	r5, r2
   12b2e:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_ADD, 19);
   12b30:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   12b34:	ab0a      	add	r3, sp, #40	; 0x28
   12b36:	e9cd 2305 	strd	r2, r3, [sp, #20]
   12b3a:	9304      	str	r3, [sp, #16]
	struct bt_mesh_msg_ctx ctx = {
   12b3c:	2300      	movs	r3, #0
   12b3e:	f8cd 3022 	str.w	r3, [sp, #34]	; 0x22
   12b42:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   12b46:	f64f 73fd 	movw	r3, #65533	; 0xfffd
{
   12b4a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
	struct bt_mesh_msg_ctx ctx = {
   12b4c:	f8ad 001c 	strh.w	r0, [sp, #28]
   12b50:	f8ad 301e 	strh.w	r3, [sp, #30]
   12b54:	f8ad 1020 	strh.w	r1, [sp, #32]
   12b58:	23ff      	movs	r3, #255	; 0xff
	err = cli_prepare(&param, OP_APP_KEY_STATUS);
   12b5a:	f248 0103 	movw	r1, #32771	; 0x8003
   12b5e:	a802      	add	r0, sp, #8
	struct bt_mesh_msg_ctx ctx = {
   12b60:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	struct app_key_param param = {
   12b64:	9702      	str	r7, [sp, #8]
   12b66:	f8ad 500c 	strh.w	r5, [sp, #12]
   12b6a:	f8ad 600e 	strh.w	r6, [sp, #14]
	err = cli_prepare(&param, OP_APP_KEY_STATUS);
   12b6e:	f7ff fc1b 	bl	123a8 <cli_prepare>
	if (err) {
   12b72:	4604      	mov	r4, r0
   12b74:	bb08      	cbnz	r0, 12bba <bt_mesh_cfg_app_key_add+0x92>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_ADD);
   12b76:	4601      	mov	r1, r0
   12b78:	a804      	add	r0, sp, #16
   12b7a:	f017 fc3b 	bl	2a3f4 <bt_mesh_model_msg_init>
#include <sys/byteorder.h>

static inline void key_idx_pack(struct net_buf_simple *buf,
				uint16_t idx1, uint16_t idx2)
{
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   12b7e:	ea45 3106 	orr.w	r1, r5, r6, lsl #12
   12b82:	b289      	uxth	r1, r1
   12b84:	a804      	add	r0, sp, #16
   12b86:	f019 fa9f 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   12b8a:	f3c6 1107 	ubfx	r1, r6, #4, #8
   12b8e:	a804      	add	r0, sp, #16
   12b90:	f019 fa92 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_mem(&msg, app_key, 16);
   12b94:	2210      	movs	r2, #16
   12b96:	9916      	ldr	r1, [sp, #88]	; 0x58
   12b98:	eb0d 0002 	add.w	r0, sp, r2
   12b9c:	f019 fa83 	bl	2c0a6 <net_buf_simple_add_mem>
	err = bt_mesh_model_send(cli->model, &ctx, &msg, NULL, NULL);
   12ba0:	4b0a      	ldr	r3, [pc, #40]	; (12bcc <bt_mesh_cfg_app_key_add+0xa4>)
   12ba2:	6818      	ldr	r0, [r3, #0]
   12ba4:	9400      	str	r4, [sp, #0]
   12ba6:	4623      	mov	r3, r4
   12ba8:	6800      	ldr	r0, [r0, #0]
   12baa:	aa04      	add	r2, sp, #16
   12bac:	a907      	add	r1, sp, #28
   12bae:	f017 fc4a 	bl	2a446 <bt_mesh_model_send>
	if (err) {
   12bb2:	4604      	mov	r4, r0
   12bb4:	b120      	cbz	r0, 12bc0 <bt_mesh_cfg_app_key_add+0x98>
		cli_reset();
   12bb6:	f7ff fc09 	bl	123cc <cli_reset>
}
   12bba:	4620      	mov	r0, r4
   12bbc:	b011      	add	sp, #68	; 0x44
   12bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!status) {
   12bc0:	2f00      	cmp	r7, #0
   12bc2:	d0f8      	beq.n	12bb6 <bt_mesh_cfg_app_key_add+0x8e>
	return cli_wait();
   12bc4:	f7ff fd88 	bl	126d8 <cli_wait>
   12bc8:	4604      	mov	r4, r0
   12bca:	e7f6      	b.n	12bba <bt_mesh_cfg_app_key_add+0x92>
   12bcc:	20002ae8 	.word	0x20002ae8

00012bd0 <addr_is_free>:
 * free for use. When a conflict is found, next will be set to the next address
 * available after the conflicting range and -EAGAIN will be returned.
 */
static int addr_is_free(uint16_t addr_start, uint8_t num_elem, uint16_t *next)
{
	uint16_t addr_end = addr_start + num_elem - 1;
   12bd0:	1843      	adds	r3, r0, r1
   12bd2:	3b01      	subs	r3, #1
{
   12bd4:	b570      	push	{r4, r5, r6, lr}
	uint16_t addr_end = addr_start + num_elem - 1;
   12bd6:	b21d      	sxth	r5, r3
   12bd8:	b29c      	uxth	r4, r3
	uint16_t other_start, other_end;
	int i;

	if (!BT_MESH_ADDR_IS_UNICAST(addr_start) ||
   12bda:	b203      	sxth	r3, r0
   12bdc:	2b00      	cmp	r3, #0
   12bde:	dd1b      	ble.n	12c18 <addr_is_free+0x48>
   12be0:	2d00      	cmp	r5, #0
   12be2:	dd19      	ble.n	12c18 <addr_is_free+0x48>
	    !BT_MESH_ADDR_IS_UNICAST(addr_end) ||
   12be4:	b1c1      	cbz	r1, 12c18 <addr_is_free+0x48>
   12be6:	490e      	ldr	r1, [pc, #56]	; (12c20 <addr_is_free+0x50>)
	    num_elem == 0) {
		return -EINVAL;
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   12be8:	2500      	movs	r5, #0
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];

		if (node->addr == BT_MESH_ADDR_UNASSIGNED) {
   12bea:	8b0b      	ldrh	r3, [r1, #24]
   12bec:	b16b      	cbz	r3, 12c0a <addr_is_free+0x3a>
		}

		other_start = node->addr;
		other_end = other_start + node->num_elem - 1;

		if (!(addr_end < other_start || addr_start > other_end)) {
   12bee:	42a3      	cmp	r3, r4
   12bf0:	d80b      	bhi.n	12c0a <addr_is_free+0x3a>
		other_end = other_start + node->num_elem - 1;
   12bf2:	7f0e      	ldrb	r6, [r1, #28]
   12bf4:	4433      	add	r3, r6
   12bf6:	b29b      	uxth	r3, r3
   12bf8:	1e5e      	subs	r6, r3, #1
		if (!(addr_end < other_start || addr_start > other_end)) {
   12bfa:	b2b6      	uxth	r6, r6
   12bfc:	42b0      	cmp	r0, r6
   12bfe:	d804      	bhi.n	12c0a <addr_is_free+0x3a>
			if (next) {
   12c00:	b102      	cbz	r2, 12c04 <addr_is_free+0x34>
				*next = other_end + 1;
   12c02:	8013      	strh	r3, [r2, #0]
			}

			return -EAGAIN;
   12c04:	f06f 000a 	mvn.w	r0, #10
   12c08:	e005      	b.n	12c16 <addr_is_free+0x46>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   12c0a:	3501      	adds	r5, #1
   12c0c:	2d03      	cmp	r5, #3
   12c0e:	f101 012c 	add.w	r1, r1, #44	; 0x2c
   12c12:	d1ea      	bne.n	12bea <addr_is_free+0x1a>
		}
	}

	return 0;
   12c14:	2000      	movs	r0, #0
}
   12c16:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   12c18:	f06f 0015 	mvn.w	r0, #21
   12c1c:	e7fb      	b.n	12c16 <addr_is_free+0x46>
   12c1e:	bf00      	nop
   12c20:	20000530 	.word	0x20000530

00012c24 <bt_mesh_cdb_iv_update>:

void bt_mesh_cdb_iv_update(uint32_t iv_index, bool iv_update)
{
	BT_DBG("Updating IV index to %d\n", iv_index);

	bt_mesh_cdb.iv_index = iv_index;
   12c24:	4b0d      	ldr	r3, [pc, #52]	; (12c5c <bt_mesh_cdb_iv_update+0x38>)
   12c26:	f843 0b04 	str.w	r0, [r3], #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12c2a:	f3bf 8f5b 	dmb	ish
	if (val) {
   12c2e:	b159      	cbz	r1, 12c48 <bt_mesh_cdb_iv_update+0x24>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12c30:	e853 2f00 	ldrex	r2, [r3]
   12c34:	f042 0210 	orr.w	r2, r2, #16
   12c38:	e843 2100 	strex	r1, r2, [r3]
   12c3c:	2900      	cmp	r1, #0
   12c3e:	d1f7      	bne.n	12c30 <bt_mesh_cdb_iv_update+0xc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12c40:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(bt_mesh_cdb.flags, BT_MESH_CDB_IVU_IN_PROGRESS,
			  iv_update);

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		bt_mesh_store_cdb();
   12c44:	f019 b889 	b.w	2bd5a <bt_mesh_store_cdb>
   12c48:	e853 2f00 	ldrex	r2, [r3]
   12c4c:	f022 0210 	bic.w	r2, r2, #16
   12c50:	e843 2100 	strex	r1, r2, [r3]
   12c54:	2900      	cmp	r1, #0
   12c56:	d0f3      	beq.n	12c40 <bt_mesh_cdb_iv_update+0x1c>
   12c58:	e7f6      	b.n	12c48 <bt_mesh_cdb_iv_update+0x24>
   12c5a:	bf00      	nop
   12c5c:	20000530 	.word	0x20000530

00012c60 <bt_mesh_cdb_subnet_get>:
	sub->net_idx = BT_MESH_KEY_UNUSED;
	memset(sub->keys, 0, sizeof(sub->keys));
}

struct bt_mesh_cdb_subnet *bt_mesh_cdb_subnet_get(uint16_t net_idx)
{
   12c60:	4602      	mov	r2, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
		if (bt_mesh_cdb.subnets[i].net_idx == net_idx) {
   12c62:	480d      	ldr	r0, [pc, #52]	; (12c98 <bt_mesh_cdb_subnet_get+0x38>)
   12c64:	f8b0 308c 	ldrh.w	r3, [r0, #140]	; 0x8c
   12c68:	4293      	cmp	r3, r2
   12c6a:	4603      	mov	r3, r0
   12c6c:	d00d      	beq.n	12c8a <bt_mesh_cdb_subnet_get+0x2a>
   12c6e:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
   12c72:	4291      	cmp	r1, r2
   12c74:	d00b      	beq.n	12c8e <bt_mesh_cdb_subnet_get+0x2e>
   12c76:	f8b0 10d4 	ldrh.w	r1, [r0, #212]	; 0xd4
   12c7a:	4291      	cmp	r1, r2
   12c7c:	d109      	bne.n	12c92 <bt_mesh_cdb_subnet_get+0x32>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
   12c7e:	2002      	movs	r0, #2
			return &bt_mesh_cdb.subnets[i];
   12c80:	2224      	movs	r2, #36	; 0x24
   12c82:	fb02 3000 	mla	r0, r2, r0, r3
   12c86:	308c      	adds	r0, #140	; 0x8c
   12c88:	4770      	bx	lr
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
   12c8a:	2000      	movs	r0, #0
   12c8c:	e7f8      	b.n	12c80 <bt_mesh_cdb_subnet_get+0x20>
   12c8e:	2001      	movs	r0, #1
   12c90:	e7f6      	b.n	12c80 <bt_mesh_cdb_subnet_get+0x20>
		}
	}

	return NULL;
   12c92:	2000      	movs	r0, #0
}
   12c94:	4770      	bx	lr
   12c96:	bf00      	nop
   12c98:	20000530 	.word	0x20000530

00012c9c <bt_mesh_cdb_subnet_alloc>:
{
   12c9c:	b538      	push	{r3, r4, r5, lr}
   12c9e:	4604      	mov	r4, r0
	if (bt_mesh_cdb_subnet_get(net_idx) != NULL) {
   12ca0:	f7ff ffde 	bl	12c60 <bt_mesh_cdb_subnet_get>
   12ca4:	4602      	mov	r2, r0
   12ca6:	b9f8      	cbnz	r0, 12ce8 <bt_mesh_cdb_subnet_alloc+0x4c>
		if (sub->net_idx != BT_MESH_KEY_UNUSED) {
   12ca8:	4b10      	ldr	r3, [pc, #64]	; (12cec <bt_mesh_cdb_subnet_alloc+0x50>)
   12caa:	f8b3 508c 	ldrh.w	r5, [r3, #140]	; 0x8c
   12cae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   12cb2:	428d      	cmp	r5, r1
   12cb4:	d011      	beq.n	12cda <bt_mesh_cdb_subnet_alloc+0x3e>
   12cb6:	f8b3 00b0 	ldrh.w	r0, [r3, #176]	; 0xb0
   12cba:	4288      	cmp	r0, r1
   12cbc:	d010      	beq.n	12ce0 <bt_mesh_cdb_subnet_alloc+0x44>
   12cbe:	f8b3 00d4 	ldrh.w	r0, [r3, #212]	; 0xd4
   12cc2:	4288      	cmp	r0, r1
   12cc4:	d107      	bne.n	12cd6 <bt_mesh_cdb_subnet_alloc+0x3a>
		sub = &bt_mesh_cdb.subnets[i];
   12cc6:	f103 02d4 	add.w	r2, r3, #212	; 0xd4
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
   12cca:	2002      	movs	r0, #2
		sub->net_idx = net_idx;
   12ccc:	2124      	movs	r1, #36	; 0x24
   12cce:	fb01 3300 	mla	r3, r1, r0, r3
   12cd2:	f8a3 408c 	strh.w	r4, [r3, #140]	; 0x8c
}
   12cd6:	4610      	mov	r0, r2
   12cd8:	bd38      	pop	{r3, r4, r5, pc}
		sub = &bt_mesh_cdb.subnets[i];
   12cda:	f103 028c 	add.w	r2, r3, #140	; 0x8c
   12cde:	e7f5      	b.n	12ccc <bt_mesh_cdb_subnet_alloc+0x30>
   12ce0:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.subnets); ++i) {
   12ce4:	2001      	movs	r0, #1
   12ce6:	e7f1      	b.n	12ccc <bt_mesh_cdb_subnet_alloc+0x30>
		return NULL;
   12ce8:	2200      	movs	r2, #0
   12cea:	e7f4      	b.n	12cd6 <bt_mesh_cdb_subnet_alloc+0x3a>
   12cec:	20000530 	.word	0x20000530

00012cf0 <bt_mesh_cdb_create>:
{
   12cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12cf2:	4f15      	ldr	r7, [pc, #84]	; (12d48 <bt_mesh_cdb_create+0x58>)
   12cf4:	f3bf 8f5b 	dmb	ish
   12cf8:	4606      	mov	r6, r0
   12cfa:	1d3b      	adds	r3, r7, #4
   12cfc:	e853 4f00 	ldrex	r4, [r3]
   12d00:	f044 0201 	orr.w	r2, r4, #1
   12d04:	e843 2100 	strex	r1, r2, [r3]
   12d08:	2900      	cmp	r1, #0
   12d0a:	d1f7      	bne.n	12cfc <bt_mesh_cdb_create+0xc>
   12d0c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_mesh_cdb.flags,
   12d10:	f014 0401 	ands.w	r4, r4, #1
   12d14:	d111      	bne.n	12d3a <bt_mesh_cdb_create+0x4a>
	sub = bt_mesh_cdb_subnet_alloc(BT_MESH_KEY_PRIMARY);
   12d16:	4620      	mov	r0, r4
   12d18:	f7ff ffc0 	bl	12c9c <bt_mesh_cdb_subnet_alloc>
	if (sub == NULL) {
   12d1c:	4605      	mov	r5, r0
   12d1e:	b178      	cbz	r0, 12d40 <bt_mesh_cdb_create+0x50>
	memcpy(sub->keys[0].net_key, key, 16);
   12d20:	2210      	movs	r2, #16
   12d22:	4631      	mov	r1, r6
   12d24:	3004      	adds	r0, #4
   12d26:	f013 fe3c 	bl	269a2 <memcpy>
	bt_mesh_cdb.iv_index = 0;
   12d2a:	603c      	str	r4, [r7, #0]
		bt_mesh_store_cdb();
   12d2c:	f019 f815 	bl	2bd5a <bt_mesh_store_cdb>
		bt_mesh_store_cdb_subnet(sub);
   12d30:	4628      	mov	r0, r5
   12d32:	f019 f815 	bl	2bd60 <bt_mesh_store_cdb_subnet>
}
   12d36:	4620      	mov	r0, r4
   12d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EALREADY;
   12d3a:	f06f 0444 	mvn.w	r4, #68	; 0x44
   12d3e:	e7fa      	b.n	12d36 <bt_mesh_cdb_create+0x46>
		return -ENOMEM;
   12d40:	f06f 040b 	mvn.w	r4, #11
   12d44:	e7f7      	b.n	12d36 <bt_mesh_cdb_create+0x46>
   12d46:	bf00      	nop
   12d48:	20000530 	.word	0x20000530

00012d4c <bt_mesh_cdb_subnet_flags>:

uint8_t bt_mesh_cdb_subnet_flags(const struct bt_mesh_cdb_subnet *sub)
{
	uint8_t flags = 0x00;

	if (sub && sub->kr_flag) {
   12d4c:	b100      	cbz	r0, 12d50 <bt_mesh_cdb_subnet_flags+0x4>
	uint8_t flags = 0x00;
   12d4e:	7880      	ldrb	r0, [r0, #2]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12d50:	4b05      	ldr	r3, [pc, #20]	; (12d68 <bt_mesh_cdb_subnet_flags+0x1c>)
   12d52:	f3bf 8f5b 	dmb	ish
   12d56:	685b      	ldr	r3, [r3, #4]
   12d58:	f3bf 8f5b 	dmb	ish
		flags |= BT_MESH_NET_FLAG_KR;
	}

	if (atomic_test_bit(bt_mesh_cdb.flags, BT_MESH_CDB_IVU_IN_PROGRESS)) {
   12d5c:	06db      	lsls	r3, r3, #27
		flags |= BT_MESH_NET_FLAG_IVU;
   12d5e:	bf48      	it	mi
   12d60:	f040 0002 	orrmi.w	r0, r0, #2
	}

	return flags;
}
   12d64:	4770      	bx	lr
   12d66:	bf00      	nop
   12d68:	20000530 	.word	0x20000530

00012d6c <bt_mesh_cdb_node_alloc>:

struct bt_mesh_cdb_node *bt_mesh_cdb_node_alloc(const uint8_t uuid[16], uint16_t addr,
						uint8_t num_elem, uint16_t net_idx)
{
   12d6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12d70:	4681      	mov	r9, r0
   12d72:	4617      	mov	r7, r2
   12d74:	4698      	mov	r8, r3
	int i;

	if (addr == BT_MESH_ADDR_UNASSIGNED) {
   12d76:	460d      	mov	r5, r1
   12d78:	b989      	cbnz	r1, 12d9e <bt_mesh_cdb_node_alloc+0x32>
   12d7a:	2405      	movs	r4, #5
	uint16_t addr = 1, next;
   12d7c:	2501      	movs	r5, #1
		err = addr_is_free(addr, num_elem, &next);
   12d7e:	f10d 0206 	add.w	r2, sp, #6
   12d82:	4639      	mov	r1, r7
   12d84:	4628      	mov	r0, r5
   12d86:	f7ff ff23 	bl	12bd0 <addr_is_free>
		if (err == 0) {
   12d8a:	b128      	cbz	r0, 12d98 <bt_mesh_cdb_node_alloc+0x2c>
		} else if (err != -EAGAIN) {
   12d8c:	300b      	adds	r0, #11
   12d8e:	d104      	bne.n	12d9a <bt_mesh_cdb_node_alloc+0x2e>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes) + 2; ++i) {
   12d90:	3c01      	subs	r4, #1
		addr = next;
   12d92:	f8bd 5006 	ldrh.w	r5, [sp, #6]
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes) + 2; ++i) {
   12d96:	d1f2      	bne.n	12d7e <bt_mesh_cdb_node_alloc+0x12>
		addr = find_lowest_free_addr(num_elem);
		if (addr == BT_MESH_ADDR_UNASSIGNED) {
   12d98:	b945      	cbnz	r5, 12dac <bt_mesh_cdb_node_alloc+0x40>
			return NULL;
   12d9a:	2600      	movs	r6, #0
   12d9c:	e031      	b.n	12e02 <bt_mesh_cdb_node_alloc+0x96>
		}
	} else if (addr_is_free(addr, num_elem, NULL) < 0) {
   12d9e:	2200      	movs	r2, #0
   12da0:	4639      	mov	r1, r7
   12da2:	4628      	mov	r0, r5
   12da4:	f7ff ff14 	bl	12bd0 <addr_is_free>
   12da8:	2800      	cmp	r0, #0
   12daa:	dbf6      	blt.n	12d9a <bt_mesh_cdb_node_alloc+0x2e>
	}

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];

		if (node->addr == BT_MESH_ADDR_UNASSIGNED) {
   12dac:	4c1a      	ldr	r4, [pc, #104]	; (12e18 <bt_mesh_cdb_node_alloc+0xac>)
   12dae:	8b21      	ldrh	r1, [r4, #24]
   12db0:	b359      	cbz	r1, 12e0a <bt_mesh_cdb_node_alloc+0x9e>
   12db2:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
   12db6:	b35b      	cbz	r3, 12e10 <bt_mesh_cdb_node_alloc+0xa4>
   12db8:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   12dbc:	2b00      	cmp	r3, #0
   12dbe:	d1ec      	bne.n	12d9a <bt_mesh_cdb_node_alloc+0x2e>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   12dc0:	2102      	movs	r1, #2
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];
   12dc2:	f104 0660 	add.w	r6, r4, #96	; 0x60
			memcpy(node->uuid, uuid, 16);
   12dc6:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   12dca:	fb0a fa01 	mul.w	sl, sl, r1
   12dce:	f10a 0008 	add.w	r0, sl, #8
   12dd2:	4420      	add	r0, r4
			node->addr = addr;
   12dd4:	4454      	add	r4, sl
			memcpy(node->uuid, uuid, 16);
   12dd6:	2210      	movs	r2, #16
   12dd8:	4649      	mov	r1, r9
   12dda:	f013 fde2 	bl	269a2 <memcpy>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12dde:	3430      	adds	r4, #48	; 0x30
			node->addr = addr;
   12de0:	f824 5c18 	strh.w	r5, [r4, #-24]
			node->num_elem = num_elem;
   12de4:	f804 7c14 	strb.w	r7, [r4, #-20]
			node->net_idx = net_idx;
   12de8:	f824 8c16 	strh.w	r8, [r4, #-22]
   12dec:	2300      	movs	r3, #0
   12dee:	f3bf 8f5b 	dmb	ish
   12df2:	e854 2f00 	ldrex	r2, [r4]
   12df6:	e844 3100 	strex	r1, r3, [r4]
   12dfa:	2900      	cmp	r1, #0
   12dfc:	d1f9      	bne.n	12df2 <bt_mesh_cdb_node_alloc+0x86>
   12dfe:	f3bf 8f5b 	dmb	ish
			return node;
		}
	}

	return NULL;
}
   12e02:	4630      	mov	r0, r6
   12e04:	b002      	add	sp, #8
   12e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];
   12e0a:	f104 0608 	add.w	r6, r4, #8
   12e0e:	e7da      	b.n	12dc6 <bt_mesh_cdb_node_alloc+0x5a>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   12e10:	2101      	movs	r1, #1
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];
   12e12:	f104 0634 	add.w	r6, r4, #52	; 0x34
   12e16:	e7d6      	b.n	12dc6 <bt_mesh_cdb_node_alloc+0x5a>
   12e18:	20000530 	.word	0x20000530

00012e1c <bt_mesh_cdb_node_get>:

struct bt_mesh_cdb_node *bt_mesh_cdb_node_get(uint16_t addr)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   12e1c:	4a0b      	ldr	r2, [pc, #44]	; (12e4c <bt_mesh_cdb_node_get+0x30>)
{
   12e1e:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   12e20:	2300      	movs	r3, #0
   12e22:	4615      	mov	r5, r2
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];

		if (addr >= node->addr &&
   12e24:	8b14      	ldrh	r4, [r2, #24]
   12e26:	4284      	cmp	r4, r0
   12e28:	d804      	bhi.n	12e34 <bt_mesh_cdb_node_get+0x18>
		    addr <= node->addr + node->num_elem - 1) {
   12e2a:	7f11      	ldrb	r1, [r2, #28]
   12e2c:	4421      	add	r1, r4
   12e2e:	3901      	subs	r1, #1
		if (addr >= node->addr &&
   12e30:	4288      	cmp	r0, r1
   12e32:	dd06      	ble.n	12e42 <bt_mesh_cdb_node_get+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); i++) {
   12e34:	3301      	adds	r3, #1
   12e36:	2b03      	cmp	r3, #3
   12e38:	f102 022c 	add.w	r2, r2, #44	; 0x2c
   12e3c:	d1f2      	bne.n	12e24 <bt_mesh_cdb_node_get+0x8>
			return node;
		}
	}

	return NULL;
   12e3e:	2000      	movs	r0, #0
}
   12e40:	bd30      	pop	{r4, r5, pc}
		struct bt_mesh_cdb_node *node = &bt_mesh_cdb.nodes[i];
   12e42:	202c      	movs	r0, #44	; 0x2c
   12e44:	fb00 5003 	mla	r0, r0, r3, r5
   12e48:	3008      	adds	r0, #8
   12e4a:	e7f9      	b.n	12e40 <bt_mesh_cdb_node_get+0x24>
   12e4c:	20000530 	.word	0x20000530

00012e50 <bt_mesh_cdb_node_foreach>:
{
	bt_mesh_store_cdb_node(node);
}

void bt_mesh_cdb_node_foreach(bt_mesh_cdb_node_func_t func, void *user_data)
{
   12e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e52:	4c09      	ldr	r4, [pc, #36]	; (12e78 <bt_mesh_cdb_node_foreach+0x28>)
   12e54:	4605      	mov	r5, r0
   12e56:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); ++i) {
   12e58:	2700      	movs	r7, #0
		if (bt_mesh_cdb.nodes[i].addr == BT_MESH_ADDR_UNASSIGNED) {
   12e5a:	8b23      	ldrh	r3, [r4, #24]
   12e5c:	b92b      	cbnz	r3, 12e6a <bt_mesh_cdb_node_foreach+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.nodes); ++i) {
   12e5e:	3701      	adds	r7, #1
   12e60:	2f03      	cmp	r7, #3
   12e62:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   12e66:	d1f8      	bne.n	12e5a <bt_mesh_cdb_node_foreach+0xa>
		if (func(&bt_mesh_cdb.nodes[i], user_data) ==
		    BT_MESH_CDB_ITER_STOP) {
			break;
		}
	}
}
   12e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (func(&bt_mesh_cdb.nodes[i], user_data) ==
   12e6a:	4631      	mov	r1, r6
   12e6c:	f104 0008 	add.w	r0, r4, #8
   12e70:	47a8      	blx	r5
   12e72:	2800      	cmp	r0, #0
   12e74:	d1f3      	bne.n	12e5e <bt_mesh_cdb_node_foreach+0xe>
   12e76:	e7f7      	b.n	12e68 <bt_mesh_cdb_node_foreach+0x18>
   12e78:	20000530 	.word	0x20000530

00012e7c <bt_mesh_cdb_app_key_alloc>:
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); ++i) {
		key = &bt_mesh_cdb.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED) {
   12e7c:	4b12      	ldr	r3, [pc, #72]	; (12ec8 <bt_mesh_cdb_app_key_alloc+0x4c>)
{
   12e7e:	b530      	push	{r4, r5, lr}
   12e80:	4604      	mov	r4, r0
		if (key->net_idx != BT_MESH_KEY_UNUSED) {
   12e82:	f8b3 00f8 	ldrh.w	r0, [r3, #248]	; 0xf8
   12e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12e8a:	4290      	cmp	r0, r2
   12e8c:	d012      	beq.n	12eb4 <bt_mesh_cdb_app_key_alloc+0x38>
   12e8e:	f8b3 011c 	ldrh.w	r0, [r3, #284]	; 0x11c
   12e92:	4290      	cmp	r0, r2
   12e94:	d012      	beq.n	12ebc <bt_mesh_cdb_app_key_alloc+0x40>
   12e96:	f8b3 0140 	ldrh.w	r0, [r3, #320]	; 0x140
   12e9a:	4290      	cmp	r0, r2
   12e9c:	d112      	bne.n	12ec4 <bt_mesh_cdb_app_key_alloc+0x48>
		key = &bt_mesh_cdb.app_keys[i];
   12e9e:	f503 70a0 	add.w	r0, r3, #320	; 0x140
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); ++i) {
   12ea2:	2202      	movs	r2, #2
			continue;
		}

		key->net_idx = net_idx;
   12ea4:	2524      	movs	r5, #36	; 0x24
   12ea6:	fb05 3302 	mla	r3, r5, r2, r3
   12eaa:	f8a3 40f8 	strh.w	r4, [r3, #248]	; 0xf8
		key->app_idx = app_idx;
   12eae:	f8a3 10fa 	strh.w	r1, [r3, #250]	; 0xfa

		return key;
	}

	return NULL;
}
   12eb2:	bd30      	pop	{r4, r5, pc}
		key = &bt_mesh_cdb.app_keys[i];
   12eb4:	f103 00f8 	add.w	r0, r3, #248	; 0xf8
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); ++i) {
   12eb8:	2200      	movs	r2, #0
   12eba:	e7f3      	b.n	12ea4 <bt_mesh_cdb_app_key_alloc+0x28>
		key = &bt_mesh_cdb.app_keys[i];
   12ebc:	f503 708e 	add.w	r0, r3, #284	; 0x11c
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); ++i) {
   12ec0:	2201      	movs	r2, #1
   12ec2:	e7ef      	b.n	12ea4 <bt_mesh_cdb_app_key_alloc+0x28>
	return NULL;
   12ec4:	2000      	movs	r0, #0
   12ec6:	e7f4      	b.n	12eb2 <bt_mesh_cdb_app_key_alloc+0x36>
   12ec8:	20000530 	.word	0x20000530

00012ecc <bt_mesh_cdb_app_key_get>:

struct bt_mesh_cdb_app_key *bt_mesh_cdb_app_key_get(uint16_t app_idx)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); i++) {
   12ecc:	4a0c      	ldr	r2, [pc, #48]	; (12f00 <bt_mesh_cdb_app_key_get+0x34>)
{
   12ece:	b530      	push	{r4, r5, lr}
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); i++) {
   12ed0:	2300      	movs	r3, #0
   12ed2:	4611      	mov	r1, r2
		struct bt_mesh_cdb_app_key *key = &bt_mesh_cdb.app_keys[i];

		if (key->net_idx != BT_MESH_KEY_UNUSED &&
   12ed4:	f64f 74ff 	movw	r4, #65535	; 0xffff
   12ed8:	f8b2 50f8 	ldrh.w	r5, [r2, #248]	; 0xf8
   12edc:	42a5      	cmp	r5, r4
   12ede:	d003      	beq.n	12ee8 <bt_mesh_cdb_app_key_get+0x1c>
   12ee0:	f8b2 50fa 	ldrh.w	r5, [r2, #250]	; 0xfa
   12ee4:	4285      	cmp	r5, r0
   12ee6:	d006      	beq.n	12ef6 <bt_mesh_cdb_app_key_get+0x2a>
	for (i = 0; i < ARRAY_SIZE(bt_mesh_cdb.app_keys); i++) {
   12ee8:	3301      	adds	r3, #1
   12eea:	2b03      	cmp	r3, #3
   12eec:	f102 0224 	add.w	r2, r2, #36	; 0x24
   12ef0:	d1f2      	bne.n	12ed8 <bt_mesh_cdb_app_key_get+0xc>
		    key->app_idx == app_idx) {
			return key;
		}
	}

	return NULL;
   12ef2:	2000      	movs	r0, #0
}
   12ef4:	bd30      	pop	{r4, r5, pc}
		struct bt_mesh_cdb_app_key *key = &bt_mesh_cdb.app_keys[i];
   12ef6:	2024      	movs	r0, #36	; 0x24
   12ef8:	fb00 1003 	mla	r0, r0, r3, r1
   12efc:	30f8      	adds	r0, #248	; 0xf8
   12efe:	e7f9      	b.n	12ef4 <bt_mesh_cdb_app_key_get+0x28>
   12f00:	20000530 	.word	0x20000530

00012f04 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   12f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f08:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   12f0a:	1dc2      	adds	r2, r0, #7
   12f0c:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   12f10:	1e67      	subs	r7, r4, #1
   12f12:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
   12f14:	6018      	str	r0, [r3, #0]
{
   12f16:	b082      	sub	sp, #8
   12f18:	4605      	mov	r5, r0
   12f1a:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   12f1c:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   12f20:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   12f22:	2100      	movs	r1, #0
   12f24:	2204      	movs	r2, #4
   12f26:	f013 fd67 	bl	269f8 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   12f2a:	b1b7      	cbz	r7, 12f5a <mem_init+0x56>
   12f2c:	3c02      	subs	r4, #2
   12f2e:	b2a4      	uxth	r4, r4
   12f30:	fb04 6306 	mla	r3, r4, r6, r6
   12f34:	fb04 f706 	mul.w	r7, r4, r6
   12f38:	441d      	add	r5, r3
   12f3a:	1aff      	subs	r7, r7, r3
   12f3c:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   12f40:	2204      	movs	r2, #4
	while (mem_count--) {
   12f42:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   12f44:	19e8      	adds	r0, r5, r7
   12f46:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
   12f4a:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
   12f4c:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   12f4e:	f013 fd28 	bl	269a2 <memcpy>
	while (mem_count--) {
   12f52:	4544      	cmp	r4, r8
   12f54:	eba5 0506 	sub.w	r5, r5, r6
   12f58:	d1f2      	bne.n	12f40 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   12f5a:	b002      	add	sp, #8
   12f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012f60 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   12f60:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   12f62:	6805      	ldr	r5, [r0, #0]
{
   12f64:	b082      	sub	sp, #8
	if (*mem_head) {
   12f66:	b195      	cbz	r5, 12f8e <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   12f68:	1deb      	adds	r3, r5, #7
   12f6a:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   12f6e:	2204      	movs	r2, #4
   12f70:	4604      	mov	r4, r0
   12f72:	4629      	mov	r1, r5
   12f74:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   12f78:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   12f7a:	f013 fd12 	bl	269a2 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   12f7e:	9b01      	ldr	r3, [sp, #4]
   12f80:	b123      	cbz	r3, 12f8c <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   12f82:	1dda      	adds	r2, r3, #7
   12f84:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   12f88:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   12f8a:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   12f8c:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   12f8e:	4628      	mov	r0, r5
   12f90:	b002      	add	sp, #8
   12f92:	bd70      	pop	{r4, r5, r6, pc}

00012f94 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   12f94:	680b      	ldr	r3, [r1, #0]
{
   12f96:	b570      	push	{r4, r5, r6, lr}
   12f98:	460c      	mov	r4, r1
   12f9a:	4605      	mov	r5, r0
	if (*mem_head) {
   12f9c:	b183      	cbz	r3, 12fc0 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   12f9e:	3307      	adds	r3, #7
   12fa0:	f023 0303 	bic.w	r3, r3, #3
   12fa4:	881e      	ldrh	r6, [r3, #0]
   12fa6:	3601      	adds	r6, #1
   12fa8:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
   12faa:	2204      	movs	r2, #4
   12fac:	4621      	mov	r1, r4
   12fae:	4628      	mov	r0, r5
   12fb0:	f013 fcf7 	bl	269a2 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   12fb4:	1deb      	adds	r3, r5, #7
   12fb6:	f023 0303 	bic.w	r3, r3, #3
   12fba:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   12fbc:	6025      	str	r5, [r4, #0]
}
   12fbe:	bd70      	pop	{r4, r5, r6, pc}
   12fc0:	2601      	movs	r6, #1
   12fc2:	e7f2      	b.n	12faa <mem_release+0x16>

00012fc4 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   12fc4:	fb02 0001 	mla	r0, r2, r1, r0
   12fc8:	4770      	bx	lr
   12fca:	bf00      	nop

00012fcc <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   12fcc:	1a40      	subs	r0, r0, r1
   12fce:	b280      	uxth	r0, r0
}
   12fd0:	fbb0 f0f2 	udiv	r0, r0, r2
   12fd4:	4770      	bx	lr
   12fd6:	bf00      	nop

00012fd8 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   12fd8:	1e53      	subs	r3, r2, #1
	src += len;
   12fda:	4411      	add	r1, r2
	while (len--) {
   12fdc:	b29b      	uxth	r3, r3
   12fde:	b142      	cbz	r2, 12ff2 <mem_rcopy+0x1a>
   12fe0:	43db      	mvns	r3, r3
   12fe2:	18ca      	adds	r2, r1, r3
   12fe4:	3801      	subs	r0, #1
		*dst++ = *--src;
   12fe6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   12fea:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   12fee:	4291      	cmp	r1, r2
   12ff0:	d1f9      	bne.n	12fe6 <mem_rcopy+0xe>
	}
}
   12ff2:	4770      	bx	lr

00012ff4 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   12ff4:	4401      	add	r1, r0
   12ff6:	e002      	b.n	12ffe <mem_nz+0xa>
		if (*src++) {
   12ff8:	f810 3b01 	ldrb.w	r3, [r0], #1
   12ffc:	b91b      	cbnz	r3, 13006 <mem_nz+0x12>
	while (len--) {
   12ffe:	4288      	cmp	r0, r1
   13000:	d1fa      	bne.n	12ff8 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   13002:	2000      	movs	r0, #0
   13004:	4770      	bx	lr
			return 1;
   13006:	2001      	movs	r0, #1
}
   13008:	4770      	bx	lr
   1300a:	bf00      	nop

0001300c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1300c:	6010      	str	r0, [r2, #0]
   1300e:	6008      	str	r0, [r1, #0]

	return link;
}
   13010:	4770      	bx	lr
   13012:	bf00      	nop

00013014 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   13014:	680a      	ldr	r2, [r1, #0]
{
   13016:	4603      	mov	r3, r0
	if (*head != *tail) {
   13018:	6800      	ldr	r0, [r0, #0]
   1301a:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   1301c:	bf05      	ittet	eq
   1301e:	2200      	moveq	r2, #0
   13020:	600a      	streq	r2, [r1, #0]
		return NULL;
   13022:	2000      	movne	r0, #0
	*head = *tail = NULL;
   13024:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   13026:	4770      	bx	lr

00013028 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
   13028:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1302a:	6814      	ldr	r4, [r2, #0]
   1302c:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1302e:	6814      	ldr	r4, [r2, #0]
   13030:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
   13032:	bc10      	pop	{r4}
	*tail = link;
   13034:	6010      	str	r0, [r2, #0]
}
   13036:	4770      	bx	lr

00013038 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   13038:	4288      	cmp	r0, r1
   1303a:	d003      	beq.n	13044 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1303c:	b11a      	cbz	r2, 13046 <memq_peek+0xe>
		*mem = head->mem;
   1303e:	6843      	ldr	r3, [r0, #4]
   13040:	6013      	str	r3, [r2, #0]
   13042:	4770      	bx	lr
		return NULL;
   13044:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   13046:	4770      	bx	lr

00013048 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   13048:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   1304a:	4283      	cmp	r3, r0
   1304c:	d009      	beq.n	13062 <memq_dequeue+0x1a>
	if (mem) {
   1304e:	b12a      	cbz	r2, 1305c <memq_dequeue+0x14>
		*mem = head->mem;
   13050:	6858      	ldr	r0, [r3, #4]
   13052:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   13054:	681a      	ldr	r2, [r3, #0]
   13056:	600a      	str	r2, [r1, #0]

	return old_head;
}
   13058:	4618      	mov	r0, r3
   1305a:	4770      	bx	lr
	if (old_head == NULL) {
   1305c:	2b00      	cmp	r3, #0
   1305e:	d1f9      	bne.n	13054 <memq_dequeue+0xc>
   13060:	e7fa      	b.n	13058 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   13062:	2300      	movs	r3, #0
   13064:	e7f8      	b.n	13058 <memq_dequeue+0x10>
   13066:	bf00      	nop

00013068 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   13068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1306c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 130a4 <mayfly_init+0x3c>
   13070:	4e0b      	ldr	r6, [pc, #44]	; (130a0 <mayfly_init+0x38>)
   13072:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   13074:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   13078:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   1307a:	1d22      	adds	r2, r4, #4
   1307c:	4621      	mov	r1, r4
   1307e:	4628      	mov	r0, r5
   13080:	3c0c      	subs	r4, #12
   13082:	f7ff ffc3 	bl	1300c <memq_init>
		while (caller_id--) {
   13086:	42b4      	cmp	r4, r6
   13088:	f1a5 0508 	sub.w	r5, r5, #8
   1308c:	d1f5      	bne.n	1307a <mayfly_init+0x12>
	while (callee_id--) {
   1308e:	3f04      	subs	r7, #4
   13090:	1d3b      	adds	r3, r7, #4
   13092:	f1a8 0820 	sub.w	r8, r8, #32
   13096:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1309a:	d1eb      	bne.n	13074 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   1309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   130a0:	20002bf8 	.word	0x20002bf8
   130a4:	20002b68 	.word	0x20002b68

000130a8 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   130a8:	b430      	push	{r4, r5}
   130aa:	4603      	mov	r3, r0
   130ac:	460c      	mov	r4, r1
	if (enable) {
   130ae:	b19a      	cbz	r2, 130d8 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   130b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   130b4:	0108      	lsls	r0, r1, #4
   130b6:	4d14      	ldr	r5, [pc, #80]	; (13108 <mayfly_enable+0x60>)
   130b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   130bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   130c0:	4429      	add	r1, r5
   130c2:	7a48      	ldrb	r0, [r1, #9]
   130c4:	7a0d      	ldrb	r5, [r1, #8]
   130c6:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   130c8:	bf04      	itt	eq
   130ca:	3001      	addeq	r0, #1
   130cc:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
   130ce:	4621      	mov	r1, r4
   130d0:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   130d2:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
   130d4:	f00c bbb8 	b.w	1f848 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   130d8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   130dc:	4d0a      	ldr	r5, [pc, #40]	; (13108 <mayfly_enable+0x60>)
   130de:	0112      	lsls	r2, r2, #4
   130e0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   130e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   130e8:	442b      	add	r3, r5
   130ea:	7a9d      	ldrb	r5, [r3, #10]
   130ec:	7ada      	ldrb	r2, [r3, #11]
   130ee:	42aa      	cmp	r2, r5
   130f0:	d001      	beq.n	130f6 <mayfly_enable+0x4e>
}
   130f2:	bc30      	pop	{r4, r5}
   130f4:	4770      	bx	lr
			mfp[callee_id] = 1U;
   130f6:	4d05      	ldr	r5, [pc, #20]	; (1310c <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
   130f8:	3201      	adds	r2, #1
   130fa:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   130fc:	2301      	movs	r3, #1
   130fe:	546b      	strb	r3, [r5, r1]
}
   13100:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
   13102:	f00c bbff 	b.w	1f904 <mayfly_pend>
   13106:	bf00      	nop
   13108:	20002b74 	.word	0x20002b74
   1310c:	20002b70 	.word	0x20002b70

00013110 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   13110:	b570      	push	{r4, r5, r6, lr}
   13112:	461c      	mov	r4, r3
   13114:	4606      	mov	r6, r0
   13116:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   13118:	b322      	cbz	r2, 13164 <mayfly_enqueue+0x54>
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
   1311a:	7863      	ldrb	r3, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1311c:	7822      	ldrb	r2, [r4, #0]
   1311e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   13120:	f012 0203 	ands.w	r2, r2, #3
   13124:	d005      	beq.n	13132 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   13126:	2a01      	cmp	r2, #1
   13128:	d040      	beq.n	131ac <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   1312a:	3301      	adds	r3, #1
   1312c:	b2db      	uxtb	r3, r3
   1312e:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   13130:	e00f      	b.n	13152 <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   13132:	2230      	movs	r2, #48	; 0x30
   13134:	2104      	movs	r1, #4
   13136:	fb12 1105 	smlabb	r1, r2, r5, r1
   1313a:	220c      	movs	r2, #12
   1313c:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
   13140:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   13142:	491b      	ldr	r1, [pc, #108]	; (131b0 <mayfly_enqueue+0xa0>)
   13144:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
   13146:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   13148:	440a      	add	r2, r1
	m->_req = ack + 1;
   1314a:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1314c:	4621      	mov	r1, r4
   1314e:	f7ff ff6b 	bl	13028 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   13152:	4b18      	ldr	r3, [pc, #96]	; (131b4 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   13154:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   13156:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
   13158:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
   1315a:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   1315c:	f00c fbd2 	bl	1f904 <mayfly_pend>

	return 0;
   13160:	2000      	movs	r0, #0
}
   13162:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   13164:	f00c fbb0 	bl	1f8c8 <mayfly_prio_is_equal>
   13168:	2800      	cmp	r0, #0
   1316a:	d0d6      	beq.n	1311a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   1316c:	4629      	mov	r1, r5
   1316e:	4630      	mov	r0, r6
   13170:	f00c fb8a 	bl	1f888 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   13174:	2800      	cmp	r0, #0
   13176:	d0d0      	beq.n	1311a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   13178:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1317c:	011a      	lsls	r2, r3, #4
   1317e:	490c      	ldr	r1, [pc, #48]	; (131b0 <mayfly_enqueue+0xa0>)
   13180:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   13184:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13188:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   1318a:	7a9a      	ldrb	r2, [r3, #10]
   1318c:	7adb      	ldrb	r3, [r3, #11]
   1318e:	429a      	cmp	r2, r3
   13190:	d1c3      	bne.n	1311a <mayfly_enqueue+0xa>
	ack = m->_ack;
   13192:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   13194:	7822      	ldrb	r2, [r4, #0]
   13196:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   13198:	0792      	lsls	r2, r2, #30
   1319a:	d002      	beq.n	131a2 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   1319c:	3302      	adds	r3, #2
   1319e:	b2db      	uxtb	r3, r3
   131a0:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   131a2:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   131a6:	4798      	blx	r3
		return 0;
   131a8:	2000      	movs	r0, #0
}
   131aa:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   131ac:	4610      	mov	r0, r2
}
   131ae:	bd70      	pop	{r4, r5, r6, pc}
   131b0:	20002b74 	.word	0x20002b74
   131b4:	20002b70 	.word	0x20002b70

000131b8 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   131b8:	494c      	ldr	r1, [pc, #304]	; (132ec <mayfly_run+0x134>)
   131ba:	5c0b      	ldrb	r3, [r1, r0]
   131bc:	2b00      	cmp	r3, #0
   131be:	f000 8094 	beq.w	132ea <mayfly_run+0x132>
{
   131c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   131c6:	4b4a      	ldr	r3, [pc, #296]	; (132f0 <mayfly_run+0x138>)
   131c8:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
   131cc:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
   131ce:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   131d0:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
   131d4:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
   131d6:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   131da:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
   131de:	9203      	str	r2, [sp, #12]
   131e0:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
   131e4:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
   131e6:	f04f 0903 	mov.w	r9, #3
   131ea:	4688      	mov	r8, r1
   131ec:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
   131ee:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   131f0:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   131f4:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   131f6:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   131f8:	f7ff ff1e 	bl	13038 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   131fc:	f107 0624 	add.w	r6, r7, #36	; 0x24
   13200:	4683      	mov	fp, r0
   13202:	b388      	cbz	r0, 13268 <mayfly_run+0xb0>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   13204:	9c05      	ldr	r4, [sp, #20]
   13206:	7825      	ldrb	r5, [r4, #0]
   13208:	7863      	ldrb	r3, [r4, #1]
   1320a:	1aed      	subs	r5, r5, r3
   1320c:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   13210:	2d01      	cmp	r5, #1
   13212:	d106      	bne.n	13222 <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   13214:	3b01      	subs	r3, #1
   13216:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   13218:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   1321c:	4798      	blx	r3
   1321e:	9c05      	ldr	r4, [sp, #20]
   13220:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   13222:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   13224:	1ac3      	subs	r3, r0, r3
   13226:	f003 0303 	and.w	r3, r3, #3
   1322a:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   1322c:	f04f 0200 	mov.w	r2, #0
   13230:	4631      	mov	r1, r6
	req = m->_req;
   13232:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   13236:	d00d      	beq.n	13254 <mayfly_run+0x9c>
		memq_dequeue(mft[callee_id][caller_id].tail,
   13238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1323a:	f7ff ff05 	bl	13048 <memq_dequeue>
		ack = m->_ack;
   1323e:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   13240:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   13242:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   13246:	1a9b      	subs	r3, r3, r2
   13248:	f003 0303 	and.w	r3, r3, #3
   1324c:	2b01      	cmp	r3, #1
		m->_ack = req;
   1324e:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   13252:	d043      	beq.n	132dc <mayfly_run+0x124>

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   13254:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   13258:	aa05      	add	r2, sp, #20
   1325a:	f7ff feed 	bl	13038 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   1325e:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   13260:	4683      	mov	fp, r0
			if (state == 1U) {
   13262:	d029      	beq.n	132b8 <mayfly_run+0x100>
		while (link) {
   13264:	2800      	cmp	r0, #0
   13266:	d1cd      	bne.n	13204 <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   13268:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   1326c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   13270:	429a      	cmp	r2, r3
   13272:	d003      	beq.n	1327c <mayfly_run+0xc4>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   13274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   13278:	2301      	movs	r3, #1
   1327a:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   1327c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   13280:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   13284:	429a      	cmp	r2, r3
   13286:	d003      	beq.n	13290 <mayfly_run+0xd8>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   13288:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   1328c:	2301      	movs	r3, #1
   1328e:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   13290:	f109 39ff 	add.w	r9, r9, #4294967295
   13294:	fa5f f989 	uxtb.w	r9, r9
   13298:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1329c:	f1a7 070c 	sub.w	r7, r7, #12
   132a0:	d1a5      	bne.n	131ee <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   132a2:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   132a6:	b1b3      	cbz	r3, 132d6 <mayfly_run+0x11e>
   132a8:	9b03      	ldr	r3, [sp, #12]
   132aa:	b9a3      	cbnz	r3, 132d6 <mayfly_run+0x11e>
		mayfly_enable_cb(callee_id, callee_id, 0);
   132ac:	461a      	mov	r2, r3
   132ae:	4651      	mov	r1, sl
   132b0:	4650      	mov	r0, sl
   132b2:	f00c fac9 	bl	1f848 <mayfly_enable_cb>
   132b6:	e00e      	b.n	132d6 <mayfly_run+0x11e>
				if (caller_id || link) {
   132b8:	f1b9 0f00 	cmp.w	r9, #0
   132bc:	d101      	bne.n	132c2 <mayfly_run+0x10a>
   132be:	2800      	cmp	r0, #0
   132c0:	d0d2      	beq.n	13268 <mayfly_run+0xb0>
   132c2:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
   132c6:	4a09      	ldr	r2, [pc, #36]	; (132ec <mayfly_run+0x134>)
   132c8:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
   132ca:	4651      	mov	r1, sl
   132cc:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
   132ce:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   132d2:	f00c fb17 	bl	1f904 <mayfly_pend>
	}
}
   132d6:	b007      	add	sp, #28
   132d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
   132dc:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   132de:	4621      	mov	r1, r4
   132e0:	4658      	mov	r0, fp
   132e2:	4642      	mov	r2, r8
   132e4:	f7ff fea0 	bl	13028 <memq_enqueue>
   132e8:	e7b4      	b.n	13254 <mayfly_run+0x9c>
   132ea:	4770      	bx	lr
   132ec:	20002b70 	.word	0x20002b70
   132f0:	20002b74 	.word	0x20002b74

000132f4 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   132f4:	b1a1      	cbz	r1, 13320 <util_ones_count_get+0x2c>
   132f6:	1e4b      	subs	r3, r1, #1
   132f8:	b2db      	uxtb	r3, r3
{
   132fa:	b410      	push	{r4}
   132fc:	1e41      	subs	r1, r0, #1
   132fe:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
   13300:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   13302:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   13306:	b13b      	cbz	r3, 13318 <util_ones_count_get+0x24>
			bite &= (bite - 1);
   13308:	b25b      	sxtb	r3, r3
   1330a:	1e5a      	subs	r2, r3, #1
   1330c:	4013      	ands	r3, r2
			one_count++;
   1330e:	3001      	adds	r0, #1
		while (bite) {
   13310:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   13314:	b2c0      	uxtb	r0, r0
		while (bite) {
   13316:	d1f7      	bne.n	13308 <util_ones_count_get+0x14>
	while (octets_len--) {
   13318:	42a1      	cmp	r1, r4
   1331a:	d1f2      	bne.n	13302 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
   1331c:	bc10      	pop	{r4}
   1331e:	4770      	bx	lr
	uint8_t one_count = 0U;
   13320:	4608      	mov	r0, r1
}
   13322:	4770      	bx	lr

00013324 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
   13324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
   13328:	7f82      	ldrb	r2, [r0, #30]
{
   1332a:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
   1332c:	2301      	movs	r3, #1
	if (instance->job_guard) {
   1332e:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
   13330:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   13332:	2a00      	cmp	r2, #0
   13334:	d15d      	bne.n	133f2 <ticker_worker+0xce>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
   13336:	7f43      	ldrb	r3, [r0, #29]
   13338:	2bff      	cmp	r3, #255	; 0xff
   1333a:	4681      	mov	r9, r0
   1333c:	d058      	beq.n	133f0 <ticker_worker+0xcc>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1333e:	f00b fc99 	bl	1ec74 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13342:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   13346:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   1334a:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1334e:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   13350:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13352:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   13356:	f000 8140 	beq.w	135da <ticker_worker+0x2b6>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1335a:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   1335e:	42b3      	cmp	r3, r6
   13360:	bf94      	ite	ls
   13362:	2300      	movls	r3, #0
   13364:	2301      	movhi	r3, #1
   13366:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   13368:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   1336c:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
   13370:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   13374:	d067      	beq.n	13446 <ticker_worker+0x122>
			must_expire_skip = 1U;
   13376:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
   1337a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   1337e:	eb07 140b 	add.w	r4, r7, fp, lsl #4
   13382:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   13386:	68a2      	ldr	r2, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   13388:	42b2      	cmp	r2, r6
   1338a:	d85a      	bhi.n	13442 <ticker_worker+0x11e>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1338c:	f894 a002 	ldrb.w	sl, [r4, #2]
   13390:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
   13392:	f817 b00b 	ldrb.w	fp, [r7, fp]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   13396:	eba3 030a 	sub.w	r3, r3, sl
   1339a:	b2db      	uxtb	r3, r3
   1339c:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
   1339e:	eba6 0602 	sub.w	r6, r6, r2
		ticks_expired += ticks_to_expire;
   133a2:	4490      	add	r8, r2
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   133a4:	d14a      	bne.n	1343c <ticker_worker+0x118>
		if (ticker->ticks_slot != 0U &&
   133a6:	69a0      	ldr	r0, [r4, #24]
   133a8:	b368      	cbz	r0, 13406 <ticker_worker+0xe2>
   133aa:	9b01      	ldr	r3, [sp, #4]
   133ac:	2b00      	cmp	r3, #0
   133ae:	f000 808d 	beq.w	134cc <ticker_worker+0x1a8>
   133b2:	8be3      	ldrh	r3, [r4, #30]
   133b4:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
   133b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   133b8:	b13b      	cbz	r3, 133ca <ticker_worker+0xa6>
   133ba:	681a      	ldr	r2, [r3, #0]
   133bc:	b11a      	cbz	r2, 133c6 <ticker_worker+0xa2>
			    ext_data->ticks_slot_window != 0U &&
   133be:	7a1a      	ldrb	r2, [r3, #8]
   133c0:	2a00      	cmp	r2, #0
   133c2:	f000 80f6 	beq.w	135b2 <ticker_worker+0x28e>
				ext_data->reschedule_state =
   133c6:	2200      	movs	r2, #0
   133c8:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   133ca:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
   133cc:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   133d0:	3201      	adds	r2, #1
   133d2:	b292      	uxth	r2, r2
   133d4:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   133d6:	2900      	cmp	r1, #0
   133d8:	d030      	beq.n	1343c <ticker_worker+0x118>
   133da:	8ba1      	ldrh	r1, [r4, #28]
   133dc:	4291      	cmp	r1, r2
   133de:	d22d      	bcs.n	1343c <ticker_worker+0x118>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   133e0:	2b00      	cmp	r3, #0
   133e2:	f000 80fd 	beq.w	135e0 <ticker_worker+0x2bc>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   133e6:	7a1a      	ldrb	r2, [r3, #8]
   133e8:	2a01      	cmp	r2, #1
   133ea:	d027      	beq.n	1343c <ticker_worker+0x118>
			must_expire_skip = 1U;
   133ec:	2201      	movs	r2, #1
   133ee:	e00e      	b.n	1340e <ticker_worker+0xea>
		instance->worker_trigger = 0U;
   133f0:	77c2      	strb	r2, [r0, #31]
}
   133f2:	b00d      	add	sp, #52	; 0x34
   133f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f8:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   133fc:	f8dd a020 	ldr.w	sl, [sp, #32]
   13400:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   13404:	464c      	mov	r4, r9
		if (ticker->ext_data) {
   13406:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13408:	2b00      	cmp	r3, #0
   1340a:	d03f      	beq.n	1348c <ticker_worker+0x168>
   1340c:	2200      	movs	r2, #0
			ticker->ext_data->ticks_drift = 0U;
   1340e:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
   13410:	7219      	strb	r1, [r3, #8]
		if (ticker->timeout_func) {
   13412:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
   13414:	6059      	str	r1, [r3, #4]
		ticker->ack--;
   13416:	f10a 33ff 	add.w	r3, sl, #4294967295
   1341a:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   1341c:	b175      	cbz	r5, 1343c <ticker_worker+0x118>
					   ticks_expired -
   1341e:	9902      	ldr	r1, [sp, #8]
   13420:	6963      	ldr	r3, [r4, #20]
   13422:	6948      	ldr	r0, [r1, #20]
			ticker->timeout_func(ticks_at_expire,
   13424:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   13426:	eba8 0303 	sub.w	r3, r8, r3
   1342a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   1342c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   13430:	2a00      	cmp	r2, #0
   13432:	d03a      	beq.n	134aa <ticker_worker+0x186>
   13434:	6923      	ldr	r3, [r4, #16]
   13436:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1343a:	47a8      	blx	r5
	while (ticker_id_head != TICKER_NULL) {
   1343c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   13440:	d19b      	bne.n	1337a <ticker_worker+0x56>
   13442:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   13446:	f899 300b 	ldrb.w	r3, [r9, #11]
   1344a:	f899 200a 	ldrb.w	r2, [r9, #10]
   1344e:	429a      	cmp	r2, r3
   13450:	d10a      	bne.n	13468 <ticker_worker+0x144>
	uint8_t idx = *ticks_elapsed_index + 1;
   13452:	3201      	adds	r2, #1
   13454:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   13456:	2a02      	cmp	r2, #2
   13458:	bf1c      	itt	ne
   1345a:	4613      	movne	r3, r2
   1345c:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
   1345e:	9a04      	ldr	r2, [sp, #16]
   13460:	f889 200b 	strb.w	r2, [r9, #11]
   13464:	bf08      	it	eq
   13466:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   13468:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1346c:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   13470:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   13474:	2200      	movs	r2, #0
   13476:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1347a:	464b      	mov	r3, r9
   1347c:	2201      	movs	r2, #1
   1347e:	2104      	movs	r1, #4
   13480:	2003      	movs	r0, #3
   13482:	46a4      	mov	ip, r4
}
   13484:	b00d      	add	sp, #52	; 0x34
   13486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1348a:	4760      	bx	ip
		if (ticker->timeout_func) {
   1348c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   1348e:	f10a 33ff 	add.w	r3, sl, #4294967295
   13492:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   13494:	2d00      	cmp	r5, #0
   13496:	d0d1      	beq.n	1343c <ticker_worker+0x118>
					   ticks_expired -
   13498:	9a02      	ldr	r2, [sp, #8]
   1349a:	6963      	ldr	r3, [r4, #20]
   1349c:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
   1349e:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   134a0:	eba8 0003 	sub.w	r0, r8, r3
   134a4:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   134a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   134aa:	6923      	ldr	r3, [r4, #16]
   134ac:	8be2      	ldrh	r2, [r4, #30]
   134ae:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   134b0:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
   134b2:	2300      	movs	r3, #0
					slot_reserved = 1U;
   134b4:	429a      	cmp	r2, r3
   134b6:	9a01      	ldr	r2, [sp, #4]
				ticker->lazy_current = 0U;
   134b8:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
   134ba:	bf18      	it	ne
   134bc:	2201      	movne	r2, #1
	while (ticker_id_head != TICKER_NULL) {
   134be:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
					slot_reserved = 1U;
   134c2:	9201      	str	r2, [sp, #4]
				ticker->force = 0U;
   134c4:	70e3      	strb	r3, [r4, #3]
	while (ticker_id_head != TICKER_NULL) {
   134c6:	f47f af58 	bne.w	1337a <ticker_worker+0x56>
   134ca:	e7ba      	b.n	13442 <ticker_worker+0x11e>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   134cc:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   134d0:	9305      	str	r3, [sp, #20]
   134d2:	3380      	adds	r3, #128	; 0x80
   134d4:	d097      	beq.n	13406 <ticker_worker+0xe2>
   134d6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   134da:	d094      	beq.n	13406 <ticker_worker+0xe2>
		int32_t lazy_current = ticker->lazy_current;
   134dc:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   134de:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
   134e0:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
   134e2:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
   134e4:	bf28      	it	cs
   134e6:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
   134e8:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
   134ea:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
   134ec:	f8cd a020 	str.w	sl, [sp, #32]
				(lazy_current - ticker->priority);
   134f0:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
   134f2:	fb03 2302 	mla	r3, r3, r2, r2
   134f6:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
   134f8:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
   134fc:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
   134fe:	465b      	mov	r3, fp
		uint32_t acc_ticks_to_expire = 0U;
   13500:	2500      	movs	r5, #0
   13502:	46a1      	mov	r9, r4
   13504:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   13508:	9200      	str	r2, [sp, #0]
   1350a:	e02c      	b.n	13566 <ticker_worker+0x242>
				(ticker->ticks_periodic == 0U) ||
   1350c:	9c00      	ldr	r4, [sp, #0]
					  0U :
   1350e:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
   13512:	2c00      	cmp	r4, #0
   13514:	d048      	beq.n	135a8 <ticker_worker+0x284>
   13516:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   13518:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
   1351c:	4544      	cmp	r4, r8
   1351e:	bf8c      	ite	hi
   13520:	f04f 0801 	movhi.w	r8, #1
   13524:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
   13528:	bf34      	ite	cc
   1352a:	f04f 0a01 	movcc.w	sl, #1
   1352e:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   13532:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
   13534:	f892 b003 	ldrb.w	fp, [r2, #3]
   13538:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   1353c:	d30f      	bcc.n	1355e <ticker_worker+0x23a>
   1353e:	4593      	cmp	fp, r2
   13540:	d843      	bhi.n	135ca <ticker_worker+0x2a6>
			    (next_force ||
   13542:	f11e 0f80 	cmn.w	lr, #128	; 0x80
   13546:	d040      	beq.n	135ca <ticker_worker+0x2a6>
			     next_is_critical ||
   13548:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
   1354a:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
   1354e:	4594      	cmp	ip, r2
   13550:	dd02      	ble.n	13558 <ticker_worker+0x234>
			     (next_has_priority && !current_is_older) ||
   13552:	f1b8 0f00 	cmp.w	r8, #0
   13556:	d038      	beq.n	135ca <ticker_worker+0x2a6>
   13558:	9a05      	ldr	r2, [sp, #20]
   1355a:	4572      	cmp	r2, lr
   1355c:	d032      	beq.n	135c4 <ticker_worker+0x2a0>
			id_head = ticker_next->next;
   1355e:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
   13560:	2bff      	cmp	r3, #255	; 0xff
   13562:	f43f af49 	beq.w	133f8 <ticker_worker+0xd4>
			struct ticker_node *ticker_next = &nodes[id_head];
   13566:	b21b      	sxth	r3, r3
   13568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1356c:	eb07 1203 	add.w	r2, r7, r3, lsl #4
   13570:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   13572:	f8d2 8008 	ldr.w	r8, [r2, #8]
   13576:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   13578:	42a8      	cmp	r0, r5
   1357a:	f4ff af3d 	bcc.w	133f8 <ticker_worker+0xd4>
			if (ticker_next->ticks_slot == 0U) {
   1357e:	6991      	ldr	r1, [r2, #24]
   13580:	2900      	cmp	r1, #0
   13582:	d0ec      	beq.n	1355e <ticker_worker+0x23a>
			int32_t lazy_next = ticker_next->lazy_current;
   13584:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   13586:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   13588:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   1358c:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   13590:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
   13592:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
   13594:	bf28      	it	cs
   13596:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
   1359a:	f1ba 0f00 	cmp.w	sl, #0
   1359e:	d1b5      	bne.n	1350c <ticker_worker+0x1e8>
				(ticker->ticks_periodic == 0U) ||
   135a0:	9c00      	ldr	r4, [sp, #0]
					  0U :
   135a2:	46d0      	mov	r8, sl
				(ticker->ticks_periodic == 0U) ||
   135a4:	2c00      	cmp	r4, #0
   135a6:	d1b6      	bne.n	13516 <ticker_worker+0x1f2>
					(ticker->ticks_periodic != 0U) &&
   135a8:	f8dd a000 	ldr.w	sl, [sp]
				(ticker->ticks_periodic == 0U) ||
   135ac:	f04f 0801 	mov.w	r8, #1
   135b0:	e7bf      	b.n	13532 <ticker_worker+0x20e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   135b2:	8ba2      	ldrh	r2, [r4, #28]
   135b4:	9903      	ldr	r1, [sp, #12]
   135b6:	428a      	cmp	r2, r1
   135b8:	f63f af05 	bhi.w	133c6 <ticker_worker+0xa2>
				ext_data->reschedule_state =
   135bc:	f04f 0201 	mov.w	r2, #1
   135c0:	721a      	strb	r2, [r3, #8]
   135c2:	e702      	b.n	133ca <ticker_worker+0xa6>
			     (equal_priority && next_is_older))) {
   135c4:	f1ba 0f00 	cmp.w	sl, #0
   135c8:	d0c9      	beq.n	1355e <ticker_worker+0x23a>
   135ca:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   135ce:	f8dd a020 	ldr.w	sl, [sp, #32]
   135d2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   135d6:	464c      	mov	r4, r9
   135d8:	e6ed      	b.n	133b6 <ticker_worker+0x92>
	uint8_t slot_reserved = 0;
   135da:	9b04      	ldr	r3, [sp, #16]
   135dc:	9301      	str	r3, [sp, #4]
   135de:	e6c3      	b.n	13368 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   135e0:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   135e2:	f10a 33ff 	add.w	r3, sl, #4294967295
   135e6:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   135e8:	2d00      	cmp	r5, #0
   135ea:	f43f af27 	beq.w	1343c <ticker_worker+0x118>
					   ticks_expired -
   135ee:	9a02      	ldr	r2, [sp, #8]
   135f0:	6963      	ldr	r3, [r4, #20]
   135f2:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
   135f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   135f6:	eba8 0003 	sub.w	r0, r8, r3
   135fa:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   135fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   13600:	e718      	b.n	13434 <ticker_worker+0x110>
   13602:	bf00      	nop

00013604 <ticker_job>:
	if (instance->worker_trigger) {
   13604:	7fc2      	ldrb	r2, [r0, #31]
   13606:	2a00      	cmp	r2, #0
   13608:	f040 863b 	bne.w	14282 <ticker_job+0xc7e>
{
   1360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   13610:	7a83      	ldrb	r3, [r0, #10]
   13612:	7ac1      	ldrb	r1, [r0, #11]
{
   13614:	b08f      	sub	sp, #60	; 0x3c
   13616:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
   13618:	6940      	ldr	r0, [r0, #20]
   1361a:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1361c:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
   1361e:	f04f 0001 	mov.w	r0, #1
   13622:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   13626:	f000 8097 	beq.w	13758 <ticker_job+0x154>
	uint8_t idx = *ticks_elapsed_index + 1;
   1362a:	4403      	add	r3, r0
   1362c:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   1362e:	2b02      	cmp	r3, #2
		idx = 0U;
   13630:	bf08      	it	eq
   13632:	4613      	moveq	r3, r2
		ticks_elapsed =
   13634:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   13638:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
   1363c:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
   1363e:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
   13640:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
   13642:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   13644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   13648:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
   1364c:	2301      	movs	r3, #1
   1364e:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
   13650:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   13654:	f89b 201d 	ldrb.w	r2, [fp, #29]
   13658:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
   1365a:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
   1365e:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
   13662:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
   13664:	9204      	str	r2, [sp, #16]
	while (count_user--) {
   13666:	461a      	mov	r2, r3
   13668:	3b01      	subs	r3, #1
	users = &instance->users[0];
   1366a:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
   1366c:	b2db      	uxtb	r3, r3
   1366e:	2a00      	cmp	r2, #0
   13670:	f000 8328 	beq.w	13cc4 <ticker_job+0x6c0>
   13674:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	pending = 0U;
   13678:	2300      	movs	r3, #0
   1367a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   1367c:	23ff      	movs	r3, #255	; 0xff
   1367e:	9301      	str	r3, [sp, #4]
   13680:	4647      	mov	r7, r8
		user_ops = &user->user_op[0];
   13682:	687b      	ldr	r3, [r7, #4]
   13684:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
   13686:	f897 8003 	ldrb.w	r8, [r7, #3]
   1368a:	78bb      	ldrb	r3, [r7, #2]
   1368c:	46ba      	mov	sl, r7
   1368e:	9807      	ldr	r0, [sp, #28]
					ticks_used = 0;
   13690:	4699      	mov	r9, r3
			user_op = &user_ops[user->middle];
   13692:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   13696:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
   1369a:	1c59      	adds	r1, r3, #1
		while (user->middle != user->last) {
   1369c:	4543      	cmp	r3, r8
			user_op = &user_ops[user->middle];
   1369e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
			middle = user->middle + 1;
   136a2:	b2cb      	uxtb	r3, r1
		while (user->middle != user->last) {
   136a4:	f000 8188 	beq.w	139b8 <ticker_job+0x3b4>
			if (middle == user->count_user_op) {
   136a8:	f89a 1000 	ldrb.w	r1, [sl]
				middle = 0U;
   136ac:	4299      	cmp	r1, r3
   136ae:	bf08      	it	eq
   136b0:	2300      	moveq	r3, #0
			user->middle = middle;
   136b2:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   136b6:	f810 1022 	ldrb.w	r1, [r0, r2, lsl #2]
   136ba:	2904      	cmp	r1, #4
   136bc:	f240 817a 	bls.w	139b4 <ticker_job+0x3b0>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   136c0:	2907      	cmp	r1, #7
   136c2:	f200 8088 	bhi.w	137d6 <ticker_job+0x1d2>
			ticker = &node[user_op->id];
   136c6:	786a      	ldrb	r2, [r5, #1]
   136c8:	9c04      	ldr	r4, [sp, #16]
   136ca:	eb02 0042 	add.w	r0, r2, r2, lsl #1
   136ce:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   136d2:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
   136d4:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
   136d6:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
   136d8:	7860      	ldrb	r0, [r4, #1]
   136da:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   136dc:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
			ticker = &node[user_op->id];
   136e0:	fa0f fc82 	sxth.w	ip, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   136e4:	d077      	beq.n	137d6 <ticker_job+0x1d2>
			    (state == 0U) ||
   136e6:	2905      	cmp	r1, #5
   136e8:	d065      	beq.n	137b6 <ticker_job+0x1b2>
			if (state == 1U) {
   136ea:	2801      	cmp	r0, #1
   136ec:	d137      	bne.n	1375e <ticker_job+0x15a>
	previous = instance->ticker_id_head;
   136ee:	f89b e01d 	ldrb.w	lr, [fp, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   136f2:	f8db 3000 	ldr.w	r3, [fp]
	while (current != TICKER_NULL) {
   136f6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   136fa:	d017      	beq.n	1372c <ticker_job+0x128>
		ticker_current = &node[current];
   136fc:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
		if (current == id) {
   13700:	4572      	cmp	r2, lr
		ticker_current = &node[current];
   13702:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		if (current == id) {
   13706:	f000 8152 	beq.w	139ae <ticker_job+0x3aa>
	total = 0U;
   1370a:	2600      	movs	r6, #0
   1370c:	e001      	b.n	13712 <ticker_job+0x10e>
		if (current == id) {
   1370e:	4572      	cmp	r2, lr
   13710:	d070      	beq.n	137f4 <ticker_job+0x1f0>
		total += ticker_current->ticks_to_expire;
   13712:	46f0      	mov	r8, lr
		current = ticker_current->next;
   13714:	f890 e000 	ldrb.w	lr, [r0]
		total += ticker_current->ticks_to_expire;
   13718:	f8d0 9008 	ldr.w	r9, [r0, #8]
	while (current != TICKER_NULL) {
   1371c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
		ticker_current = &node[current];
   13720:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
		total += ticker_current->ticks_to_expire;
   13724:	444e      	add	r6, r9
		ticker_current = &node[current];
   13726:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	while (current != TICKER_NULL) {
   1372a:	d1f0      	bne.n	1370e <ticker_job+0x10a>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1372c:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1372e:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   13730:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   13732:	f000 8127 	beq.w	13984 <ticker_job+0x380>
		ticker->req = ticker->ack;
   13736:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   13738:	f89b 301c 	ldrb.w	r3, [fp, #28]
   1373c:	4293      	cmp	r3, r2
   1373e:	d022      	beq.n	13786 <ticker_job+0x182>
	if (user_op->fp_op_func) {
   13740:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13742:	2000      	movs	r0, #0
   13744:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
   13746:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   13748:	b10b      	cbz	r3, 1374e <ticker_job+0x14a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1374a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1374c:	4798      	blx	r3
   1374e:	f89a 8003 	ldrb.w	r8, [sl, #3]
   13752:	f89a 3002 	ldrb.w	r3, [sl, #2]
   13756:	e79a      	b.n	1368e <ticker_job+0x8a>
		flag_elapsed = 0U;
   13758:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   1375a:	9202      	str	r2, [sp, #8]
   1375c:	e778      	b.n	13650 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   1375e:	2104      	movs	r1, #4
   13760:	465b      	mov	r3, fp
   13762:	2201      	movs	r2, #1
   13764:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   13768:	4608      	mov	r0, r1
   1376a:	47a0      	blx	r4
	while (count_user--) {
   1376c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
   1376e:	f88a 9002 	strb.w	r9, [sl, #2]
   13772:	4657      	mov	r7, sl
				pending = 1U;
   13774:	2301      	movs	r3, #1
	while (count_user--) {
   13776:	42ba      	cmp	r2, r7
				pending = 1U;
   13778:	9308      	str	r3, [sp, #32]
   1377a:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
   1377e:	f000 8122 	beq.w	139c6 <ticker_job+0x3c2>
   13782:	461f      	mov	r7, r3
   13784:	e77d      	b.n	13682 <ticker_job+0x7e>
			instance->ticker_id_slot_previous = TICKER_NULL;
   13786:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   13788:	2907      	cmp	r1, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   1378a:	f88b 301c 	strb.w	r3, [fp, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   1378e:	f040 81e0 	bne.w	13b52 <ticker_job+0x54e>
				ticks_at_stop =
   13792:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
   13794:	f8db 3014 	ldr.w	r3, [fp, #20]
			if (!((ticks_at_stop - ticks_current) &
   13798:	1ac2      	subs	r2, r0, r3
   1379a:	0214      	lsls	r4, r2, #8
   1379c:	f100 81d0 	bmi.w	13b40 <ticker_job+0x53c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   137a0:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   137a4:	9a02      	ldr	r2, [sp, #8]
   137a6:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   137a8:	f8db 2018 	ldr.w	r2, [fp, #24]
   137ac:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   137ae:	bf88      	it	hi
   137b0:	f8cb 3018 	strhi.w	r3, [fp, #24]
   137b4:	e7c4      	b.n	13740 <ticker_job+0x13c>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   137b6:	686e      	ldr	r6, [r5, #4]
   137b8:	2e00      	cmp	r6, #0
   137ba:	d196      	bne.n	136ea <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   137bc:	68ae      	ldr	r6, [r5, #8]
   137be:	2e00      	cmp	r6, #0
   137c0:	d193      	bne.n	136ea <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   137c2:	68ee      	ldr	r6, [r5, #12]
   137c4:	2e00      	cmp	r6, #0
   137c6:	d190      	bne.n	136ea <ticker_job+0xe6>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   137c8:	692e      	ldr	r6, [r5, #16]
   137ca:	2e00      	cmp	r6, #0
   137cc:	d18d      	bne.n	136ea <ticker_job+0xe6>
			     (user_op->params.update.lazy == 0U) &&
   137ce:	696e      	ldr	r6, [r5, #20]
   137d0:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
   137d4:	d189      	bne.n	136ea <ticker_job+0xe6>
	if (user_op->fp_op_func) {
   137d6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   137d8:	2100      	movs	r1, #0
	user_op->status = status;
   137da:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   137dc:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
   137de:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   137e0:	2a00      	cmp	r2, #0
   137e2:	f43f af54 	beq.w	1368e <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   137e6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   137e8:	4790      	blx	r2
   137ea:	f89a 8003 	ldrb.w	r8, [sl, #3]
   137ee:	f89a 3002 	ldrb.w	r3, [sl, #2]
   137f2:	e74c      	b.n	1368e <ticker_job+0x8a>
	if (previous == current) {
   137f4:	4542      	cmp	r2, r8
   137f6:	d017      	beq.n	13828 <ticker_job+0x224>
   137f8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   137fc:	eb03 1c08 	add.w	ip, r3, r8, lsl #4
	node[previous].next = ticker_current->next;
   13800:	7807      	ldrb	r7, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
   13802:	6882      	ldr	r2, [r0, #8]
	node[previous].next = ticker_current->next;
   13804:	f88c 7000 	strb.w	r7, [ip]
	if (ticker_current->next != TICKER_NULL) {
   13808:	2fff      	cmp	r7, #255	; 0xff
   1380a:	d006      	beq.n	1381a <ticker_job+0x216>
		node[ticker_current->next].ticks_to_expire += timeout;
   1380c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   13810:	eb03 1707 	add.w	r7, r3, r7, lsl #4
   13814:	68b8      	ldr	r0, [r7, #8]
   13816:	4410      	add	r0, r2
   13818:	60b8      	str	r0, [r7, #8]
	return (total + timeout);
   1381a:	4416      	add	r6, r2
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1381c:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1381e:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   13820:	d00b      	beq.n	1383a <ticker_job+0x236>
   13822:	78a7      	ldrb	r7, [r4, #2]
   13824:	786a      	ldrb	r2, [r5, #1]
   13826:	e786      	b.n	13736 <ticker_job+0x132>
   13828:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1382c:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
		instance->ticker_id_head = ticker_current->next;
   13830:	7802      	ldrb	r2, [r0, #0]
   13832:	f88b 201d 	strb.w	r2, [fp, #29]
   13836:	7829      	ldrb	r1, [r5, #0]
   13838:	e7e2      	b.n	13800 <ticker_job+0x1fc>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1383a:	f8db 7014 	ldr.w	r7, [fp, #20]
   1383e:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   13840:	f00b fa18 	bl	1ec74 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   13844:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13846:	eba0 0c07 	sub.w	ip, r0, r7
   1384a:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1384e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
   13850:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
   13852:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
   13854:	f240 80a2 	bls.w	1399c <ticker_job+0x398>
		ticks_to_expire -= ticks_elapsed;
   13858:	6962      	ldr	r2, [r4, #20]
   1385a:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
   1385c:	6866      	ldr	r6, [r4, #4]
   1385e:	2e00      	cmp	r6, #0
   13860:	d053      	beq.n	1390a <ticker_job+0x306>
	    (user_op->params.update.lazy != 0U)) {
   13862:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   13864:	2800      	cmp	r0, #0
   13866:	d050      	beq.n	1390a <ticker_job+0x306>
		user_op->params.update.lazy--;
   13868:	3801      	subs	r0, #1
   1386a:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1386c:	429e      	cmp	r6, r3
   1386e:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
   13870:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   13872:	d225      	bcs.n	138c0 <ticker_job+0x2bc>
   13874:	f106 0901 	add.w	r9, r6, #1
   13878:	920b      	str	r2, [sp, #44]	; 0x2c
   1387a:	e011      	b.n	138a0 <ticker_job+0x29c>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1387c:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
   13880:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
   13884:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
   13888:	46ce      	mov	lr, r9
	ticker->remainder_current -= ticker->remainder_periodic;
   1388a:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
   1388c:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
   1388e:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
   13892:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
   13894:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   13896:	429e      	cmp	r6, r3
			ticker->lazy_current--;
   13898:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
   1389a:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1389c:	d20e      	bcs.n	138bc <ticker_job+0x2b8>
   1389e:	8aa8      	ldrh	r0, [r5, #20]
   138a0:	4288      	cmp	r0, r1
   138a2:	f080 81b7 	bcs.w	13c14 <ticker_job+0x610>
					   ticker_remainder_dec(ticker);
   138a6:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
   138aa:	f8df e2d4 	ldr.w	lr, [pc, #724]	; 13b80 <ticker_job+0x57c>
					   ticker_remainder_dec(ticker);
   138ae:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
   138b0:	4ab2      	ldr	r2, [pc, #712]	; (13b7c <ticker_job+0x578>)
   138b2:	4486      	add	lr, r0
   138b4:	4596      	cmp	lr, r2
   138b6:	d8e1      	bhi.n	1387c <ticker_job+0x278>
   138b8:	46b6      	mov	lr, r6
   138ba:	e7e6      	b.n	1388a <ticker_job+0x286>
   138bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   138be:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   138c0:	4288      	cmp	r0, r1
   138c2:	d921      	bls.n	13908 <ticker_job+0x304>
					   ticker_remainder_inc(ticker);
   138c4:	6a20      	ldr	r0, [r4, #32]
   138c6:	9009      	str	r0, [sp, #36]	; 0x24
   138c8:	f106 0e01 	add.w	lr, r6, #1
   138cc:	920b      	str	r2, [sp, #44]	; 0x2c
   138ce:	e007      	b.n	138e0 <ticker_job+0x2dc>
	ticker->remainder_current += ticker->remainder_periodic;
   138d0:	6260      	str	r0, [r4, #36]	; 0x24
   138d2:	46b1      	mov	r9, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
   138d4:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
   138d6:	3101      	adds	r1, #1
   138d8:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
   138da:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
   138dc:	444b      	add	r3, r9
		while (ticker->lazy_current < user_op->params.update.lazy) {
   138de:	d211      	bcs.n	13904 <ticker_job+0x300>
	ticker->remainder_current += ticker->remainder_periodic;
   138e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   138e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
   138e4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 13b80 <ticker_job+0x57c>
	ticker->remainder_current += ticker->remainder_periodic;
   138e8:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
   138ea:	4aa4      	ldr	r2, [pc, #656]	; (13b7c <ticker_job+0x578>)
   138ec:	4481      	add	r9, r0
   138ee:	4591      	cmp	r9, r2
   138f0:	d8ee      	bhi.n	138d0 <ticker_job+0x2cc>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   138f2:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
   138f6:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
   138fa:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
   138fe:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
   13900:	46f1      	mov	r9, lr
   13902:	e7e7      	b.n	138d4 <ticker_job+0x2d0>
   13904:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13906:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   13908:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
   1390a:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
   1390e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
   13910:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
   13912:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
   13914:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
   13916:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   13918:	b136      	cbz	r6, 13928 <ticker_job+0x324>
   1391a:	6831      	ldr	r1, [r6, #0]
   1391c:	b121      	cbz	r1, 13928 <ticker_job+0x324>
			user_op->params.update.ticks_drift_plus -
   1391e:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
   13922:	6070      	str	r0, [r6, #4]
   13924:	68a3      	ldr	r3, [r4, #8]
   13926:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   13928:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
   1392c:	d121      	bne.n	13972 <ticker_job+0x36e>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1392e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
   13930:	4293      	cmp	r3, r2
   13932:	d91b      	bls.n	1396c <ticker_job+0x368>
		ticks_to_expire -= ticks_to_expire_minus;
   13934:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
   13936:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
   13938:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1393a:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1393c:	68e9      	ldr	r1, [r5, #12]
   1393e:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   13940:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   13942:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   13944:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   13946:	bf88      	it	hi
   13948:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
   1394a:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
   1394c:	bf98      	it	ls
   1394e:	2300      	movls	r3, #0
   13950:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   13952:	b102      	cbz	r2, 13956 <ticker_job+0x352>
		ticker->force = user_op->params.update.force;
   13954:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
   13956:	9b04      	ldr	r3, [sp, #16]
   13958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1395a:	4619      	mov	r1, r3
   1395c:	9b01      	ldr	r3, [sp, #4]
   1395e:	548b      	strb	r3, [r1, r2]
		ticker->req++;
   13960:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   13962:	786a      	ldrb	r2, [r5, #1]
   13964:	9201      	str	r2, [sp, #4]
		ticker->req++;
   13966:	3301      	adds	r3, #1
   13968:	7063      	strb	r3, [r4, #1]
   1396a:	e6e9      	b.n	13740 <ticker_job+0x13c>
   1396c:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
   1396e:	2300      	movs	r3, #0
   13970:	e7e2      	b.n	13938 <ticker_job+0x334>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13972:	9903      	ldr	r1, [sp, #12]
   13974:	eba1 0708 	sub.w	r7, r1, r8
   13978:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1397c:	429f      	cmp	r7, r3
   1397e:	d213      	bcs.n	139a8 <ticker_job+0x3a4>
			ticks_to_expire -= delta_current_start;
   13980:	1bdb      	subs	r3, r3, r7
   13982:	e7d5      	b.n	13930 <ticker_job+0x32c>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   13984:	f8db 7014 	ldr.w	r7, [fp, #20]
   13988:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
   1398a:	f00b f973 	bl	1ec74 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1398e:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13990:	eba0 0c07 	sub.w	ip, r0, r7
   13994:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   13998:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1399a:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1399c:	6961      	ldr	r1, [r4, #20]
   1399e:	440b      	add	r3, r1
   139a0:	1b9a      	subs	r2, r3, r6
   139a2:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
   139a4:	2300      	movs	r3, #0
   139a6:	e759      	b.n	1385c <ticker_job+0x258>
			ticks_to_expire_minus +=
   139a8:	443a      	add	r2, r7
   139aa:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   139ac:	e7df      	b.n	1396e <ticker_job+0x36a>
		if (current == id) {
   139ae:	4684      	mov	ip, r0
	total = 0U;
   139b0:	2600      	movs	r6, #0
   139b2:	e73d      	b.n	13830 <ticker_job+0x22c>
   139b4:	4699      	mov	r9, r3
   139b6:	e66c      	b.n	13692 <ticker_job+0x8e>
	while (count_user--) {
   139b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   139ba:	4657      	mov	r7, sl
   139bc:	42ba      	cmp	r2, r7
   139be:	f1a7 0308 	sub.w	r3, r7, #8
   139c2:	f47f aede 	bne.w	13782 <ticker_job+0x17e>
   139c6:	f89b 701d 	ldrb.w	r7, [fp, #29]
   139ca:	9b06      	ldr	r3, [sp, #24]
   139cc:	1bdb      	subs	r3, r3, r7
   139ce:	bf18      	it	ne
   139d0:	2301      	movne	r3, #1
   139d2:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
   139d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   139d6:	2b00      	cmp	r3, #0
   139d8:	f040 817c 	bne.w	13cd4 <ticker_job+0x6d0>
	count_user = instance->count_user;
   139dc:	f89b 2009 	ldrb.w	r2, [fp, #9]
	node = &instance->nodes[0];
   139e0:	f8db 3000 	ldr.w	r3, [fp]
	users = &instance->users[0];
   139e4:	f8db 1004 	ldr.w	r1, [fp, #4]
	node = &instance->nodes[0];
   139e8:	9304      	str	r3, [sp, #16]
	while (count_user--) {
   139ea:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
   139ec:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   139ee:	b2db      	uxtb	r3, r3
   139f0:	2a00      	cmp	r2, #0
   139f2:	f000 8113 	beq.w	13c1c <ticker_job+0x618>
   139f6:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   139fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   139fc:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   139fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   13a02:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   13a06:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   13a08:	9b01      	ldr	r3, [sp, #4]
   13a0a:	2bff      	cmp	r3, #255	; 0xff
   13a0c:	d05e      	beq.n	13acc <ticker_job+0x4c8>
				ticker = &node[id_insert];
   13a0e:	f8dd a004 	ldr.w	sl, [sp, #4]
   13a12:	9b04      	ldr	r3, [sp, #16]
   13a14:	fa0f f48a 	sxth.w	r4, sl
   13a18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13a1c:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   13a20:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   13a24:	f813 300c 	ldrb.w	r3, [r3, ip]
   13a28:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   13a2a:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   13a2c:	22ff      	movs	r2, #255	; 0xff
   13a2e:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   13a30:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   13a34:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   13a38:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13a3c:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   13a3e:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   13a40:	bf18      	it	ne
   13a42:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13a44:	d111      	bne.n	13a6a <ticker_job+0x466>
   13a46:	e093      	b.n	13b70 <ticker_job+0x56c>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   13a48:	ebb1 010c 	subs.w	r1, r1, ip
   13a4c:	d106      	bne.n	13a5c <ticker_job+0x458>
   13a4e:	f8be e01e 	ldrh.w	lr, [lr, #30]
   13a52:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   13a56:	45f1      	cmp	r9, lr
   13a58:	f200 80d9 	bhi.w	13c0e <ticker_job+0x60a>
		current = ticker_current->next;
   13a5c:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13a60:	9302      	str	r3, [sp, #8]
   13a62:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   13a66:	d077      	beq.n	13b58 <ticker_job+0x554>
   13a68:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   13a6a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   13a6e:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   13a72:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   13a76:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13a7a:	458c      	cmp	ip, r1
   13a7c:	d9e4      	bls.n	13a48 <ticker_job+0x444>
   13a7e:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
   13a80:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   13a82:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   13a84:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   13a86:	d16c      	bne.n	13b62 <ticker_job+0x55e>
		instance->ticker_id_head = id;
   13a88:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   13a8c:	2bff      	cmp	r3, #255	; 0xff
   13a8e:	d006      	beq.n	13a9e <ticker_job+0x49a>
		node[current].ticks_to_expire -= ticks_to_expire;
   13a90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13a94:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   13a98:	68bb      	ldr	r3, [r7, #8]
   13a9a:	1a59      	subs	r1, r3, r1
   13a9c:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   13a9e:	78a3      	ldrb	r3, [r4, #2]
   13aa0:	3301      	adds	r3, #1
   13aa2:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   13aa4:	2d00      	cmp	r5, #0
   13aa6:	d0af      	beq.n	13a08 <ticker_job+0x404>
	if (user_op->fp_op_func) {
   13aa8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13aaa:	9a03      	ldr	r2, [sp, #12]
   13aac:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   13aae:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   13ab0:	b113      	cbz	r3, 13ab8 <ticker_job+0x4b4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13ab2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   13ab4:	2000      	movs	r0, #0
   13ab6:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   13ab8:	6863      	ldr	r3, [r4, #4]
   13aba:	2b00      	cmp	r3, #0
   13abc:	d1a4      	bne.n	13a08 <ticker_job+0x404>
					ticker->op_context =
   13abe:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   13ac2:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   13ac6:	9b01      	ldr	r3, [sp, #4]
   13ac8:	2bff      	cmp	r3, #255	; 0xff
   13aca:	d1a0      	bne.n	13a0e <ticker_job+0x40a>
   13acc:	f898 3002 	ldrb.w	r3, [r8, #2]
   13ad0:	42b3      	cmp	r3, r6
   13ad2:	d02e      	beq.n	13b32 <ticker_job+0x52e>
   13ad4:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   13ad6:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   13ada:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   13ade:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   13ae2:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13ae4:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   13ae8:	b2f6      	uxtb	r6, r6
					first = 0U;
   13aea:	42b0      	cmp	r0, r6
   13aec:	bf08      	it	eq
   13aee:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13af0:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   13af2:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13af6:	d11a      	bne.n	13b2e <ticker_job+0x52a>
				id_insert = user_op->id;
   13af8:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   13afc:	9b04      	ldr	r3, [sp, #16]
   13afe:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   13b02:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   13b06:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   13b0a:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   13b0c:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   13b0e:	1ac9      	subs	r1, r1, r3
   13b10:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   13b14:	d036      	beq.n	13b84 <ticker_job+0x580>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13b16:	9b03      	ldr	r3, [sp, #12]
   13b18:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   13b1c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   13b1e:	2201      	movs	r2, #1
   13b20:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13b22:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   13b24:	b10b      	cbz	r3, 13b2a <ticker_job+0x526>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13b26:	6b29      	ldr	r1, [r5, #48]	; 0x30
   13b28:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   13b2a:	f898 3002 	ldrb.w	r3, [r8, #2]
   13b2e:	42b3      	cmp	r3, r6
   13b30:	d1d1      	bne.n	13ad6 <ticker_job+0x4d2>
	while (count_user--) {
   13b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13b34:	4542      	cmp	r2, r8
   13b36:	f1a8 0308 	sub.w	r3, r8, #8
   13b3a:	d06d      	beq.n	13c18 <ticker_job+0x614>
   13b3c:	4698      	mov	r8, r3
   13b3e:	e75e      	b.n	139fe <ticker_job+0x3fa>
				if (ticks_elapsed > ticks_used) {
   13b40:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13b42:	1a1b      	subs	r3, r3, r0
   13b44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   13b48:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
   13b4a:	bf8c      	ite	hi
   13b4c:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
   13b4e:	2300      	movls	r3, #0
   13b50:	e62a      	b.n	137a8 <ticker_job+0x1a4>
				ticks_at_stop = cntr_cnt_get();
   13b52:	f00b f88f 	bl	1ec74 <cntr_cnt_get>
   13b56:	e61d      	b.n	13794 <ticker_job+0x190>
	ticker_new->next = current;
   13b58:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   13b5a:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   13b5c:	f880 c000 	strb.w	ip, [r0]
   13b60:	4663      	mov	r3, ip
		node[previous].next = id;
   13b62:	b212      	sxth	r2, r2
   13b64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   13b68:	0112      	lsls	r2, r2, #4
   13b6a:	f807 a002 	strb.w	sl, [r7, r2]
   13b6e:	e78d      	b.n	13a8c <ticker_job+0x488>
	ticker_new->next = current;
   13b70:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   13b74:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   13b78:	e791      	b.n	13a9e <ticker_job+0x49a>
   13b7a:	bf00      	nop
   13b7c:	7f172b59 	.word	0x7f172b59
   13b80:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   13b84:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   13b86:	f8db 0014 	ldr.w	r0, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   13b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13b8e:	4293      	cmp	r3, r2
   13b90:	d031      	beq.n	13bf6 <ticker_job+0x5f2>
   13b92:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   13b96:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
   13b98:	68ef      	ldr	r7, [r5, #12]
	ticker->ext_data = start->ext_data;
   13b9a:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
   13b9c:	692a      	ldr	r2, [r5, #16]
   13b9e:	6222      	str	r2, [r4, #32]
	ticker->ticks_periodic = start->ticks_periodic;
   13ba0:	6067      	str	r7, [r4, #4]
	ticker->timeout_func = start->fp_timeout_func;
   13ba2:	e9d5 2906 	ldrd	r2, r9, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   13ba6:	686f      	ldr	r7, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   13ba8:	61a2      	str	r2, [r4, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   13baa:	eba7 0e00 	sub.w	lr, r7, r0
	ticker->context = start->context;
   13bae:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   13bb0:	83a3      	strh	r3, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   13bb2:	f41e 0f00 	tst.w	lr, #8388608	; 0x800000
	ticker->context = start->context;
   13bb6:	e9c4 9203 	strd	r9, r2, [r4, #12]
	ticker->ticks_to_expire = start->ticks_first;
   13bba:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   13bbc:	d10c      	bne.n	13bd8 <ticker_job+0x5d4>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13bbe:	f02e 4e7f 	bic.w	lr, lr, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   13bc2:	4473      	add	r3, lr
	if (ticks_to_expire > ticks_to_expire_minus) {
   13bc4:	b183      	cbz	r3, 13be8 <ticker_job+0x5e4>
	ticker->ticks_to_expire = ticks_to_expire;
   13bc6:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   13bc8:	9b03      	ldr	r3, [sp, #12]
   13bca:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   13bcc:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   13bce:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   13bd2:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   13bd4:	70e3      	strb	r3, [r4, #3]
}
   13bd6:	e729      	b.n	13a2c <ticker_job+0x428>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13bd8:	1bc0      	subs	r0, r0, r7
   13bda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   13bde:	4283      	cmp	r3, r0
   13be0:	d905      	bls.n	13bee <ticker_job+0x5ea>
			ticks_to_expire -= delta_current_start;
   13be2:	1a1b      	subs	r3, r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   13be4:	2b00      	cmp	r3, #0
   13be6:	d1ee      	bne.n	13bc6 <ticker_job+0x5c2>
		ticks_to_expire_minus -= ticks_to_expire;
   13be8:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   13bea:	2300      	movs	r3, #0
   13bec:	e7eb      	b.n	13bc6 <ticker_job+0x5c2>
			    (delta_current_start - ticks_to_expire);
   13bee:	1ac3      	subs	r3, r0, r3
		ticks_to_expire_minus -= ticks_to_expire;
   13bf0:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   13bf2:	2300      	movs	r3, #0
   13bf4:	e7e7      	b.n	13bc6 <ticker_job+0x5c2>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   13bf6:	f04f 0301 	mov.w	r3, #1
   13bfa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   13bfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
   13c00:	68eb      	ldr	r3, [r5, #12]
	ticker->ext_data = start->ext_data;
   13c02:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
   13c04:	692a      	ldr	r2, [r5, #16]
   13c06:	6222      	str	r2, [r4, #32]
	ticker->ticks_periodic = start->ticks_periodic;
   13c08:	6063      	str	r3, [r4, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   13c0a:	460b      	mov	r3, r1
   13c0c:	e7c9      	b.n	13ba2 <ticker_job+0x59e>
   13c0e:	9a02      	ldr	r2, [sp, #8]
   13c10:	4661      	mov	r1, ip
   13c12:	e735      	b.n	13a80 <ticker_job+0x47c>
   13c14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13c16:	e653      	b.n	138c0 <ticker_job+0x2bc>
   13c18:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
   13c1c:	9b06      	ldr	r3, [sp, #24]
   13c1e:	42bb      	cmp	r3, r7
   13c20:	f000 8339 	beq.w	14296 <ticker_job+0xc92>
	if (!pending) {
   13c24:	9b08      	ldr	r3, [sp, #32]
   13c26:	2b00      	cmp	r3, #0
   13c28:	f000 835b 	beq.w	142e2 <ticker_job+0xcde>
	instance->job_guard = 0U;
   13c2c:	2300      	movs	r3, #0
   13c2e:	f89b 701d 	ldrb.w	r7, [fp, #29]
   13c32:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   13c36:	2fff      	cmp	r7, #255	; 0xff
   13c38:	f000 83e5 	beq.w	14406 <ticker_job+0xe02>
	if (ticker_id_old_head == TICKER_NULL) {
   13c3c:	9b06      	ldr	r3, [sp, #24]
   13c3e:	2bff      	cmp	r3, #255	; 0xff
   13c40:	f000 8401 	beq.w	14446 <ticker_job+0xe42>
	ticks_to_expire = ticker->ticks_to_expire;
   13c44:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   13c48:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 13f48 <ticker_job+0x944>
   13c4c:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 13f4c <ticker_job+0x948>
   13c50:	4ebc      	ldr	r6, [pc, #752]	; (13f44 <ticker_job+0x940>)
	ticker = &instance->nodes[instance->ticker_id_head];
   13c52:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   13c56:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
   13c5a:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   13c5c:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
   13c5e:	f00b f809 	bl	1ec74 <cntr_cnt_get>
		cc = instance->ticks_current;
   13c62:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
   13c66:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13c6a:	1ac4      	subs	r4, r0, r3
   13c6c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   13c70:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   13c72:	42bc      	cmp	r4, r7
   13c74:	bf2c      	ite	cs
   13c76:	191b      	addcs	r3, r3, r4
   13c78:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
   13c7a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
   13c7e:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   13c80:	4620      	mov	r0, r4
   13c82:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
   13c84:	f00a fff6 	bl	1ec74 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13c88:	eba0 000a 	sub.w	r0, r0, sl
   13c8c:	eba4 040a 	sub.w	r4, r4, sl
   13c90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13c94:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   13c98:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
   13c9a:	42a0      	cmp	r0, r4
		i--;
   13c9c:	f105 35ff 	add.w	r5, r5, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   13ca0:	f240 8304 	bls.w	142ac <ticker_job+0xca8>
		LL_ASSERT(i);
   13ca4:	2d00      	cmp	r5, #0
   13ca6:	d1da      	bne.n	13c5e <ticker_job+0x65a>
   13ca8:	f640 039a 	movw	r3, #2202	; 0x89a
   13cac:	464a      	mov	r2, r9
   13cae:	4641      	mov	r1, r8
   13cb0:	4630      	mov	r0, r6
   13cb2:	f010 fbff 	bl	244b4 <printk>
   13cb6:	4040      	eors	r0, r0
   13cb8:	f380 8811 	msr	BASEPRI, r0
   13cbc:	f04f 0003 	mov.w	r0, #3
   13cc0:	df02      	svc	2
   13cc2:	e7cc      	b.n	13c5e <ticker_job+0x65a>
	if (flag_elapsed) {
   13cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13cc6:	2b00      	cmp	r3, #0
   13cc8:	f000 82fe 	beq.w	142c8 <ticker_job+0xcc4>
	pending = 0U;
   13ccc:	9b07      	ldr	r3, [sp, #28]
   13cce:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   13cd0:	23ff      	movs	r3, #255	; 0xff
   13cd2:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   13cd4:	f00a ffce 	bl	1ec74 <cntr_cnt_get>
	node = &instance->nodes[0];
   13cd8:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
   13cdc:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
   13ce0:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13ce2:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
   13ce4:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13ce6:	eba0 0003 	sub.w	r0, r0, r3
   13cea:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   13cee:	d052      	beq.n	13d96 <ticker_job+0x792>
   13cf0:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
   13cf4:	f04f 0900 	mov.w	r9, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
   13cf8:	464b      	mov	r3, r9
   13cfa:	46d1      	mov	r9, sl
   13cfc:	46c2      	mov	sl, r8
   13cfe:	4698      	mov	r8, r3
		ticker = &node[id_expired];
   13d00:	9b03      	ldr	r3, [sp, #12]
   13d02:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   13d06:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   13d0a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   13d0c:	454b      	cmp	r3, r9
   13d0e:	f200 82e1 	bhi.w	142d4 <ticker_job+0xcd0>
		is_must_expire_skip = (ticker->must_expire &&
   13d12:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
		ticks_elapsed -= ticks_to_expire;
   13d16:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
   13d1a:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
   13d1c:	ebaa 0a03 	sub.w	sl, sl, r3
		is_must_expire_skip = (ticker->must_expire &&
   13d20:	2900      	cmp	r1, #0
   13d22:	f000 8137 	beq.w	13f94 <ticker_job+0x990>
   13d26:	8be0      	ldrh	r0, [r4, #30]
   13d28:	3800      	subs	r0, #0
   13d2a:	bf18      	it	ne
   13d2c:	2001      	movne	r0, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
   13d2e:	f8db 2018 	ldr.w	r2, [fp, #24]
   13d32:	4293      	cmp	r3, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
   13d34:	bf24      	itt	cs
   13d36:	f04f 33ff 	movcs.w	r3, #4294967295
   13d3a:	f88b 301c 	strbcs.w	r3, [fp, #28]
		if ((ticker->ticks_slot != 0U) &&
   13d3e:	69a6      	ldr	r6, [r4, #24]
			instance->ticks_slot_previous -= ticks_to_expire;
   13d40:	bf34      	ite	cc
   13d42:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   13d44:	2300      	movcs	r3, #0
   13d46:	f8cb 3018 	str.w	r3, [fp, #24]
		if ((ticker->ticks_slot != 0U) &&
   13d4a:	b136      	cbz	r6, 13d5a <ticker_job+0x756>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   13d4c:	7863      	ldrb	r3, [r4, #1]
   13d4e:	78a2      	ldrb	r2, [r4, #2]
   13d50:	1a9b      	subs	r3, r3, r2
   13d52:	b2db      	uxtb	r3, r3
		if ((ticker->ticks_slot != 0U) &&
   13d54:	2b02      	cmp	r3, #2
   13d56:	f000 814d 	beq.w	13ff4 <ticker_job+0x9f0>
   13d5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
   13d5c:	7823      	ldrb	r3, [r4, #0]
		ticker->ticks_to_expire = 0U;
   13d5e:	2000      	movs	r0, #0
   13d60:	60a0      	str	r0, [r4, #8]
		instance->ticker_id_head = ticker->next;
   13d62:	f88b 301d 	strb.w	r3, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   13d66:	6860      	ldr	r0, [r4, #4]
   13d68:	2800      	cmp	r0, #0
   13d6a:	f040 80d6 	bne.w	13f1a <ticker_job+0x916>
   13d6e:	b11a      	cbz	r2, 13d78 <ticker_job+0x774>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   13d70:	7a13      	ldrb	r3, [r2, #8]
   13d72:	2b01      	cmp	r3, #1
   13d74:	f000 8118 	beq.w	13fa8 <ticker_job+0x9a4>
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   13d78:	78a2      	ldrb	r2, [r4, #2]
   13d7a:	7860      	ldrb	r0, [r4, #1]
   13d7c:	1a80      	subs	r0, r0, r2
   13d7e:	b2c0      	uxtb	r0, r0
   13d80:	2801      	cmp	r0, #1
   13d82:	f000 80c2 	beq.w	13f0a <ticker_job+0x906>
			ticker->req = ticker->ack;
   13d86:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   13d88:	f89b 501d 	ldrb.w	r5, [fp, #29]
   13d8c:	2dff      	cmp	r5, #255	; 0xff
   13d8e:	d1b7      	bne.n	13d00 <ticker_job+0x6fc>
   13d90:	f8db 3000 	ldr.w	r3, [fp]
   13d94:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
   13d96:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
   13d9a:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   13d9e:	f8db 1004 	ldr.w	r1, [fp, #4]
   13da2:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   13da4:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
   13da6:	42ac      	cmp	r4, r5
   13da8:	bf18      	it	ne
   13daa:	2001      	movne	r0, #1
   13dac:	9007      	str	r0, [sp, #28]
	while (count_user--) {
   13dae:	b2db      	uxtb	r3, r3
   13db0:	2a00      	cmp	r2, #0
   13db2:	f000 8191 	beq.w	140d8 <ticker_job+0xad4>
   13db6:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
   13dba:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
   13dbe:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
   13dc2:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
   13dc4:	9b01      	ldr	r3, [sp, #4]
   13dc6:	2bff      	cmp	r3, #255	; 0xff
   13dc8:	d062      	beq.n	13e90 <ticker_job+0x88c>
				ticker = &node[id_insert];
   13dca:	f8dd a004 	ldr.w	sl, [sp, #4]
   13dce:	9b03      	ldr	r3, [sp, #12]
   13dd0:	fa0f f48a 	sxth.w	r4, sl
   13dd4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   13dd8:	ea4f 1c04 	mov.w	ip, r4, lsl #4
   13ddc:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
   13de0:	f813 300c 	ldrb.w	r3, [r3, ip]
   13de4:	9301      	str	r3, [sp, #4]
				user_op = NULL;
   13de6:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
   13de8:	22ff      	movs	r2, #255	; 0xff
   13dea:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   13dec:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
   13df0:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
   13df4:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13df8:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
   13dfa:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
   13dfc:	bf18      	it	ne
   13dfe:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13e00:	d112      	bne.n	13e28 <ticker_job+0x824>
   13e02:	e161      	b.n	140c8 <ticker_job+0xac4>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   13e04:	ebb1 010c 	subs.w	r1, r1, ip
   13e08:	d106      	bne.n	13e18 <ticker_job+0x814>
   13e0a:	f8be e01e 	ldrh.w	lr, [lr, #30]
   13e0e:	f8b0 901e 	ldrh.w	r9, [r0, #30]
   13e12:	45f1      	cmp	r9, lr
   13e14:	f200 8110 	bhi.w	14038 <ticker_job+0xa34>
		current = ticker_current->next;
   13e18:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13e1c:	9304      	str	r3, [sp, #16]
   13e1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   13e22:	f000 80fd 	beq.w	14020 <ticker_job+0xa1c>
   13e26:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
   13e28:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
   13e2c:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
   13e30:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
   13e34:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   13e38:	458c      	cmp	ip, r1
   13e3a:	d9e3      	bls.n	13e04 <ticker_job+0x800>
   13e3c:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
   13e3e:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
   13e40:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
   13e42:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
   13e44:	f040 80f1 	bne.w	1402a <ticker_job+0xa26>
		instance->ticker_id_head = id;
   13e48:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   13e4c:	2bff      	cmp	r3, #255	; 0xff
   13e4e:	d006      	beq.n	13e5e <ticker_job+0x85a>
		node[current].ticks_to_expire -= ticks_to_expire;
   13e50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13e54:	eb07 1703 	add.w	r7, r7, r3, lsl #4
   13e58:	68bb      	ldr	r3, [r7, #8]
   13e5a:	1a59      	subs	r1, r3, r1
   13e5c:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
   13e5e:	78a3      	ldrb	r3, [r4, #2]
   13e60:	3301      	adds	r3, #1
   13e62:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   13e64:	2d00      	cmp	r5, #0
   13e66:	d0ad      	beq.n	13dc4 <ticker_job+0x7c0>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13e68:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   13e6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13e6e:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   13e70:	2200      	movs	r2, #0
   13e72:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   13e74:	b113      	cbz	r3, 13e7c <ticker_job+0x878>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13e76:	6b29      	ldr	r1, [r5, #48]	; 0x30
   13e78:	4610      	mov	r0, r2
   13e7a:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   13e7c:	6863      	ldr	r3, [r4, #4]
   13e7e:	2b00      	cmp	r3, #0
   13e80:	d1a0      	bne.n	13dc4 <ticker_job+0x7c0>
					ticker->op_context =
   13e82:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
   13e86:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   13e8a:	9b01      	ldr	r3, [sp, #4]
   13e8c:	2bff      	cmp	r3, #255	; 0xff
   13e8e:	d19c      	bne.n	13dca <ticker_job+0x7c6>
   13e90:	f898 3002 	ldrb.w	r3, [r8, #2]
   13e94:	42b3      	cmp	r3, r6
   13e96:	d030      	beq.n	13efa <ticker_job+0x8f6>
   13e98:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
   13e9a:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
   13e9e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   13ea2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
   13ea6:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13ea8:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
   13eac:	b2f6      	uxtb	r6, r6
					first = 0U;
   13eae:	42b0      	cmp	r0, r6
   13eb0:	bf08      	it	eq
   13eb2:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13eb4:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
   13eb6:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   13eba:	d11c      	bne.n	13ef6 <ticker_job+0x8f2>
				id_insert = user_op->id;
   13ebc:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
   13ec0:	9b03      	ldr	r3, [sp, #12]
   13ec2:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
   13ec6:	eb03 140c 	add.w	r4, r3, ip, lsl #4
   13eca:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
   13ece:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   13ed0:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
   13ed2:	1ac9      	subs	r1, r1, r3
   13ed4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   13ed8:	f000 80b1 	beq.w	1403e <ticker_job+0xa3a>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   13edc:	f04f 0300 	mov.w	r3, #0
   13ee0:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
   13ee4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
   13ee6:	2201      	movs	r2, #1
   13ee8:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13eea:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
   13eec:	b10b      	cbz	r3, 13ef2 <ticker_job+0x8ee>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   13eee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   13ef0:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   13ef2:	f898 3002 	ldrb.w	r3, [r8, #2]
   13ef6:	42b3      	cmp	r3, r6
   13ef8:	d1cf      	bne.n	13e9a <ticker_job+0x896>
	while (count_user--) {
   13efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13efc:	4542      	cmp	r2, r8
   13efe:	f1a8 0308 	sub.w	r3, r8, #8
   13f02:	f000 80e6 	beq.w	140d2 <ticker_job+0xace>
   13f06:	4698      	mov	r8, r3
   13f08:	e757      	b.n	13dba <ticker_job+0x7b6>
			    ticker->fp_op_func) {
   13f0a:	6a23      	ldr	r3, [r4, #32]
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
   13f0c:	2b00      	cmp	r3, #0
   13f0e:	f43f af3a 	beq.w	13d86 <ticker_job+0x782>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   13f12:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13f14:	4798      	blx	r3
   13f16:	78a2      	ldrb	r2, [r4, #2]
   13f18:	e735      	b.n	13d86 <ticker_job+0x782>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   13f1a:	b112      	cbz	r2, 13f22 <ticker_job+0x91e>
   13f1c:	7a13      	ldrb	r3, [r2, #8]
   13f1e:	2b01      	cmp	r3, #1
   13f20:	d042      	beq.n	13fa8 <ticker_job+0x9a4>
				if (!ticker->lazy_current) {
   13f22:	8be3      	ldrh	r3, [r4, #30]
   13f24:	930a      	str	r3, [sp, #40]	; 0x28
   13f26:	2b00      	cmp	r3, #0
   13f28:	d174      	bne.n	14014 <ticker_job+0xa10>
					lazy_periodic = ticker->lazy_periodic;
   13f2a:	8ba3      	ldrh	r3, [r4, #28]
   13f2c:	7866      	ldrb	r6, [r4, #1]
   13f2e:	9304      	str	r3, [sp, #16]
   13f30:	469e      	mov	lr, r3
				while (count--) {
   13f32:	1c47      	adds	r7, r0, #1
   13f34:	9709      	str	r7, [sp, #36]	; 0x24
   13f36:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
				ticks_to_expire = 0U;
   13f3a:	2300      	movs	r3, #0
   13f3c:	910b      	str	r1, [sp, #44]	; 0x2c
   13f3e:	4677      	mov	r7, lr
   13f40:	e00b      	b.n	13f5a <ticker_job+0x956>
   13f42:	bf00      	nop
   13f44:	0002e80c 	.word	0x0002e80c
   13f48:	0002e7cc 	.word	0x0002e7cc
   13f4c:	0002e878 	.word	0x0002e878
				while (count--) {
   13f50:	3f01      	subs	r7, #1
   13f52:	4686      	mov	lr, r0
   13f54:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
   13f56:	4473      	add	r3, lr
				while (count--) {
   13f58:	d012      	beq.n	13f80 <ticker_job+0x97c>
	if ((ticker->remainder_current < BIT(31)) &&
   13f5a:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 14240 <ticker_job+0xc3c>
   13f5e:	49b7      	ldr	r1, [pc, #732]	; (1423c <ticker_job+0xc38>)
	ticker->remainder_current += ticker->remainder_periodic;
   13f60:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   13f62:	4496      	add	lr, r2
   13f64:	458e      	cmp	lr, r1
   13f66:	d8f3      	bhi.n	13f50 <ticker_job+0x94c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   13f68:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   13f6c:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
   13f70:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   13f72:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
				while (count--) {
   13f76:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   13f78:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
   13f7c:	4473      	add	r3, lr
				while (count--) {
   13f7e:	d1ec      	bne.n	13f5a <ticker_job+0x956>
   13f80:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13f82:	6262      	str	r2, [r4, #36]	; 0x24
				if (!ticker->must_expire) {
   13f84:	2900      	cmp	r1, #0
   13f86:	f000 8151 	beq.w	1422c <ticker_job+0xc28>
				ticker->lazy_current += (lazy_periodic + lazy);
   13f8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   13f8c:	9904      	ldr	r1, [sp, #16]
   13f8e:	440a      	add	r2, r1
   13f90:	83e2      	strh	r2, [r4, #30]
   13f92:	e00b      	b.n	13fac <ticker_job+0x9a8>
		is_must_expire_skip = (ticker->must_expire &&
   13f94:	4608      	mov	r0, r1
   13f96:	e6ca      	b.n	13d2e <ticker_job+0x72a>
		instance->ticker_id_head = ticker->next;
   13f98:	7823      	ldrb	r3, [r4, #0]
		ticker->ticks_to_expire = 0U;
   13f9a:	60a0      	str	r0, [r4, #8]
		instance->ticker_id_head = ticker->next;
   13f9c:	f88b 301d 	strb.w	r3, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   13fa0:	6863      	ldr	r3, [r4, #4]
   13fa2:	2b00      	cmp	r3, #0
   13fa4:	f43f aee4 	beq.w	13d70 <ticker_job+0x76c>
				ticker->req = ticker->ack;
   13fa8:	78a6      	ldrb	r6, [r4, #2]
   13faa:	464b      	mov	r3, r9
			ticks_to_expire_prep(ticker, instance->ticks_current,
   13fac:	9805      	ldr	r0, [sp, #20]
   13fae:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   13fb2:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   13fb4:	eb00 0708 	add.w	r7, r0, r8
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   13fb8:	1ab8      	subs	r0, r7, r2
   13fba:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   13fbe:	d10e      	bne.n	13fde <ticker_job+0x9da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13fc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   13fc4:	4403      	add	r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   13fc6:	4299      	cmp	r1, r3
   13fc8:	d211      	bcs.n	13fee <ticker_job+0x9ea>
		ticks_to_expire -= ticks_to_expire_minus;
   13fca:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
   13fcc:	2100      	movs	r1, #0
			ticker->next = *insert_head;
   13fce:	9a01      	ldr	r2, [sp, #4]
   13fd0:	7022      	strb	r2, [r4, #0]
			ticker->req++;
   13fd2:	3601      	adds	r6, #1
   13fd4:	7066      	strb	r6, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
   13fd6:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   13fd8:	6161      	str	r1, [r4, #20]
			ticker->req++;
   13fda:	9501      	str	r5, [sp, #4]
   13fdc:	e6d4      	b.n	13d88 <ticker_job+0x784>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   13fde:	1bd2      	subs	r2, r2, r7
   13fe0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   13fe4:	4293      	cmp	r3, r2
   13fe6:	d912      	bls.n	1400e <ticker_job+0xa0a>
			ticks_to_expire -= delta_current_start;
   13fe8:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
   13fea:	4299      	cmp	r1, r3
   13fec:	d3ed      	bcc.n	13fca <ticker_job+0x9c6>
   13fee:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   13ff0:	2300      	movs	r3, #0
   13ff2:	e7ec      	b.n	13fce <ticker_job+0x9ca>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   13ff4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
   13ff6:	2800      	cmp	r0, #0
   13ff8:	f47f aeb0 	bne.w	13d5c <ticker_job+0x758>
		    !is_must_expire_skip &&
   13ffc:	b112      	cbz	r2, 14004 <ticker_job+0xa00>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   13ffe:	7a13      	ldrb	r3, [r2, #8]
   14000:	2b01      	cmp	r3, #1
   14002:	d0c9      	beq.n	13f98 <ticker_job+0x994>
			instance->ticker_id_slot_previous = id_expired;
   14004:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   14008:	f8cb 6018 	str.w	r6, [fp, #24]
   1400c:	e6a6      	b.n	13d5c <ticker_job+0x758>
			ticks_to_expire_minus +=
   1400e:	4411      	add	r1, r2
   14010:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
   14012:	e7ed      	b.n	13ff0 <ticker_job+0x9ec>
					ticker->req = ticker->ack;
   14014:	f04f 0e00 	mov.w	lr, #0
   14018:	78a6      	ldrb	r6, [r4, #2]
					lazy_periodic = 0U;
   1401a:	f8cd e010 	str.w	lr, [sp, #16]
   1401e:	e788      	b.n	13f32 <ticker_job+0x92e>
	ticker_new->next = current;
   14020:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
   14022:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
   14024:	f880 c000 	strb.w	ip, [r0]
   14028:	4663      	mov	r3, ip
		node[previous].next = id;
   1402a:	b212      	sxth	r2, r2
   1402c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   14030:	0112      	lsls	r2, r2, #4
   14032:	f807 a002 	strb.w	sl, [r7, r2]
   14036:	e709      	b.n	13e4c <ticker_job+0x848>
   14038:	9a04      	ldr	r2, [sp, #16]
   1403a:	4661      	mov	r1, ip
   1403c:	e6ff      	b.n	13e3e <ticker_job+0x83a>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   1403e:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   14040:	f8db 0014 	ldr.w	r0, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   14044:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14048:	4293      	cmp	r3, r2
   1404a:	d031      	beq.n	140b0 <ticker_job+0xaac>
   1404c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   14050:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
   14052:	68ef      	ldr	r7, [r5, #12]
	ticker->ext_data = start->ext_data;
   14054:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
   14056:	692a      	ldr	r2, [r5, #16]
   14058:	6222      	str	r2, [r4, #32]
	ticker->ticks_periodic = start->ticks_periodic;
   1405a:	6067      	str	r7, [r4, #4]
	ticker->timeout_func = start->fp_timeout_func;
   1405c:	e9d5 2906 	ldrd	r2, r9, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   14060:	686f      	ldr	r7, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
   14062:	61a2      	str	r2, [r4, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   14064:	eba7 0e00 	sub.w	lr, r7, r0
	ticker->context = start->context;
   14068:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   1406a:	83a3      	strh	r3, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1406c:	f41e 0f00 	tst.w	lr, #8388608	; 0x800000
	ticker->context = start->context;
   14070:	e9c4 9203 	strd	r9, r2, [r4, #12]
	ticker->ticks_to_expire = start->ticks_first;
   14074:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   14076:	d10c      	bne.n	14092 <ticker_job+0xa8e>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14078:	f02e 4e7f 	bic.w	lr, lr, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1407c:	4473      	add	r3, lr
	if (ticks_to_expire > ticks_to_expire_minus) {
   1407e:	b183      	cbz	r3, 140a2 <ticker_job+0xa9e>
	ticker->ticks_to_expire = ticks_to_expire;
   14080:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
   14082:	2300      	movs	r3, #0
   14084:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   14086:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   14088:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1408c:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
   1408e:	70e3      	strb	r3, [r4, #3]
}
   14090:	e6aa      	b.n	13de8 <ticker_job+0x7e4>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14092:	1bc0      	subs	r0, r0, r7
   14094:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   14098:	4283      	cmp	r3, r0
   1409a:	d905      	bls.n	140a8 <ticker_job+0xaa4>
			ticks_to_expire -= delta_current_start;
   1409c:	1a1b      	subs	r3, r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   1409e:	2b00      	cmp	r3, #0
   140a0:	d1ee      	bne.n	14080 <ticker_job+0xa7c>
		ticks_to_expire_minus -= ticks_to_expire;
   140a2:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   140a4:	2300      	movs	r3, #0
   140a6:	e7eb      	b.n	14080 <ticker_job+0xa7c>
			    (delta_current_start - ticks_to_expire);
   140a8:	1ac3      	subs	r3, r0, r3
		ticks_to_expire_minus -= ticks_to_expire;
   140aa:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
   140ac:	2300      	movs	r3, #0
   140ae:	e7e7      	b.n	14080 <ticker_job+0xa7c>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
   140b0:	f04f 0301 	mov.w	r3, #1
   140b4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   140b8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
   140ba:	68eb      	ldr	r3, [r5, #12]
	ticker->ext_data = start->ext_data;
   140bc:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
   140be:	692a      	ldr	r2, [r5, #16]
   140c0:	6222      	str	r2, [r4, #32]
	ticker->ticks_periodic = start->ticks_periodic;
   140c2:	6063      	str	r3, [r4, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
   140c4:	460b      	mov	r3, r1
   140c6:	e7c9      	b.n	1405c <ticker_job+0xa58>
	ticker_new->next = current;
   140c8:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
   140cc:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
   140d0:	e6c5      	b.n	13e5e <ticker_job+0x85a>
   140d2:	f8db 3000 	ldr.w	r3, [fp]
   140d6:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
   140d8:	f89b 701d 	ldrb.w	r7, [fp, #29]
   140dc:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
   140de:	2300      	movs	r3, #0
   140e0:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
   140e2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   140e6:	d010      	beq.n	1410a <ticker_job+0xb06>
   140e8:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
   140ea:	fa0f f289 	sxth.w	r2, r9
   140ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   140f2:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
   140f6:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   140f8:	b117      	cbz	r7, 14100 <ticker_job+0xafc>
   140fa:	7a39      	ldrb	r1, [r7, #8]
   140fc:	2901      	cmp	r1, #1
   140fe:	d014      	beq.n	1412a <ticker_job+0xb26>
			ticker_id_head = ticker->next;
   14100:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
   14104:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   14108:	d1ef      	bne.n	140ea <ticker_job+0xae6>
	return rescheduled;
   1410a:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   1410c:	2b00      	cmp	r3, #0
   1410e:	f43f ad85 	beq.w	13c1c <ticker_job+0x618>
	if (instance->ticker_id_head != ticker_id_old_head) {
   14112:	9a06      	ldr	r2, [sp, #24]
   14114:	42ba      	cmp	r2, r7
   14116:	f47f ad85 	bne.w	13c24 <ticker_job+0x620>
	if (!pending) {
   1411a:	9a08      	ldr	r2, [sp, #32]
   1411c:	2a00      	cmp	r2, #0
   1411e:	f000 8180 	beq.w	14422 <ticker_job+0xe1e>
	instance->job_guard = 0U;
   14122:	2300      	movs	r3, #0
   14124:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   14128:	e585      	b.n	13c36 <ticker_job+0x632>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1412a:	f89b 301c 	ldrb.w	r3, [fp, #28]
   1412e:	2bff      	cmp	r3, #255	; 0xff
   14130:	d071      	beq.n	14216 <ticker_job+0xc12>
			instance->ticks_slot_previous > ticks_elapsed) {
   14132:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   14136:	9b02      	ldr	r3, [sp, #8]
   14138:	4283      	cmp	r3, r0
   1413a:	d26c      	bcs.n	14216 <ticker_job+0xc12>
			window_start_ticks = instance->ticks_slot_previous -
   1413c:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1413e:	e9d7 4300 	ldrd	r4, r3, [r7]
   14142:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   14144:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   14148:	d26d      	bcs.n	14226 <ticker_job+0xc22>
		while (ticker_id_iter != TICKER_NULL &&
   1414a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   1414e:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
   14152:	d068      	beq.n	14226 <ticker_job+0xc22>
		       ticks_start_offset + ticker->ticks_slot <=
   14154:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
   14156:	42ac      	cmp	r4, r5
   14158:	f04f 0300 	mov.w	r3, #0
   1415c:	d333      	bcc.n	141c6 <ticker_job+0xbc2>
   1415e:	469e      	mov	lr, r3
   14160:	9501      	str	r5, [sp, #4]
   14162:	4661      	mov	r1, ip
   14164:	9203      	str	r2, [sp, #12]
   14166:	e01d      	b.n	141a4 <ticker_job+0xba0>
			if (node->ticks_to_expire >
   14168:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
   1416c:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
   14170:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
   14174:	4473      	add	r3, lr
			if (node->ticks_to_expire >
   14176:	d909      	bls.n	1418c <ticker_job+0xb88>
				window_end_ticks =
   14178:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
   1417a:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
   1417c:	bf28      	it	cs
   1417e:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
   14180:	4293      	cmp	r3, r2
   14182:	d903      	bls.n	1418c <ticker_job+0xb88>
			if (ticks_to_expire != 0U &&
   14184:	1b5b      	subs	r3, r3, r5
   14186:	d001      	beq.n	1418c <ticker_job+0xb88>
   14188:	4283      	cmp	r3, r0
   1418a:	d21b      	bcs.n	141c4 <ticker_job+0xbc0>
			window_start_ticks  = node->ticks_to_expire +
   1418c:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
   1418e:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
   14190:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
   14192:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
   14194:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
   14196:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
   1419a:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   1419c:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
   1419e:	d011      	beq.n	141c4 <ticker_job+0xbc0>
   141a0:	4294      	cmp	r4, r2
   141a2:	d30f      	bcc.n	141c4 <ticker_job+0xbc0>
			node = &nodes[ticker_id_iter];
   141a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   141a8:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
   141ac:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
   141b0:	f1b8 0f00 	cmp.w	r8, #0
   141b4:	d0d8      	beq.n	14168 <ticker_job+0xb64>
   141b6:	f898 8008 	ldrb.w	r8, [r8, #8]
   141ba:	f1b8 0f01 	cmp.w	r8, #1
   141be:	d1d3      	bne.n	14168 <ticker_job+0xb64>
				ticker_id_iter = node->next;
   141c0:	7809      	ldrb	r1, [r1, #0]
				continue;
   141c2:	e7e8      	b.n	14196 <ticker_job+0xb92>
   141c4:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
   141c6:	6093      	str	r3, [r2, #8]
   141c8:	4664      	mov	r4, ip
   141ca:	f04f 0eff 	mov.w	lr, #255	; 0xff
   141ce:	e000      	b.n	141d2 <ticker_job+0xbce>
   141d0:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
   141d2:	b221      	sxth	r1, r4
   141d4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   141d8:	eb06 1800 	add.w	r8, r6, r0, lsl #4
   141dc:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   141de:	f8d8 5008 	ldr.w	r5, [r8, #8]
   141e2:	429d      	cmp	r5, r3
   141e4:	d24e      	bcs.n	14284 <ticker_job+0xc80>
				ticker->ticks_to_expire -=
   141e6:	1b5b      	subs	r3, r3, r5
   141e8:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
   141ea:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
   141ec:	28ff      	cmp	r0, #255	; 0xff
   141ee:	46a6      	mov	lr, r4
   141f0:	d1ee      	bne.n	141d0 <ticker_job+0xbcc>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   141f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   141f6:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   141f8:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   141fc:	5c73      	ldrb	r3, [r6, r1]
   141fe:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   14200:	f806 9001 	strb.w	r9, [r6, r1]
   14204:	46e2      	mov	sl, ip
		ticker->lazy_current--;
   14206:	8bd3      	ldrh	r3, [r2, #30]
   14208:	3b01      	subs	r3, #1
   1420a:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   1420c:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
   14210:	2301      	movs	r3, #1
		ext_data->reschedule_state =
   14212:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
   14214:	e765      	b.n	140e2 <ticker_job+0xade>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   14216:	e9d7 4300 	ldrd	r4, r3, [r7]
   1421a:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
   1421c:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
   14220:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   14224:	d391      	bcc.n	1414a <ticker_job+0xb46>
		ticker->ticks_to_expire = ticks_to_expire;
   14226:	2300      	movs	r3, #0
   14228:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
   1422a:	e7ec      	b.n	14206 <ticker_job+0xc02>
					while (ticks_to_expire <
   1422c:	459a      	cmp	sl, r3
   1422e:	f67f aeac 	bls.w	13f8a <ticker_job+0x986>
   14232:	f100 0e01 	add.w	lr, r0, #1
   14236:	9409      	str	r4, [sp, #36]	; 0x24
   14238:	e00a      	b.n	14250 <ticker_job+0xc4c>
   1423a:	bf00      	nop
   1423c:	7f172b59 	.word	0x7f172b59
   14240:	ff172b5a 	.word	0xff172b5a
   14244:	4607      	mov	r7, r0
						ticks_to_expire +=
   14246:	443b      	add	r3, r7
						lazy++;
   14248:	3101      	adds	r1, #1
					while (ticks_to_expire <
   1424a:	459a      	cmp	sl, r3
						lazy++;
   1424c:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   1424e:	d911      	bls.n	14274 <ticker_job+0xc70>
	if ((ticker->remainder_current < BIT(31)) &&
   14250:	4f84      	ldr	r7, [pc, #528]	; (14464 <ticker_job+0xe60>)
   14252:	4c85      	ldr	r4, [pc, #532]	; (14468 <ticker_job+0xe64>)
	ticker->remainder_current += ticker->remainder_periodic;
   14254:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
   14256:	19d7      	adds	r7, r2, r7
   14258:	42a7      	cmp	r7, r4
   1425a:	d8f3      	bhi.n	14244 <ticker_job+0xc40>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1425c:	4677      	mov	r7, lr
   1425e:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
   14262:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   14264:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
   14268:	3101      	adds	r1, #1
					while (ticks_to_expire <
   1426a:	459a      	cmp	sl, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1426c:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
   14270:	b289      	uxth	r1, r1
					while (ticks_to_expire <
   14272:	d8ed      	bhi.n	14250 <ticker_job+0xc4c>
   14274:	9804      	ldr	r0, [sp, #16]
   14276:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14278:	4408      	add	r0, r1
   1427a:	b281      	uxth	r1, r0
   1427c:	9104      	str	r1, [sp, #16]
   1427e:	6262      	str	r2, [r4, #36]	; 0x24
   14280:	e683      	b.n	13f8a <ticker_job+0x986>
   14282:	4770      	bx	lr
				node->ticks_to_expire -=
   14284:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
   14286:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   1428a:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
   1428e:	d0ba      	beq.n	14206 <ticker_job+0xc02>
   14290:	fa0f f18e 	sxth.w	r1, lr
   14294:	e7ad      	b.n	141f2 <ticker_job+0xbee>
	if (!pending) {
   14296:	9b08      	ldr	r3, [sp, #32]
   14298:	2b00      	cmp	r3, #0
   1429a:	f000 80aa 	beq.w	143f2 <ticker_job+0xdee>
	instance->job_guard = 0U;
   1429e:	2300      	movs	r3, #0
   142a0:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   142a4:	9b07      	ldr	r3, [sp, #28]
   142a6:	2b00      	cmp	r3, #0
   142a8:	f040 80c9 	bne.w	1443e <ticker_job+0xe3a>
   142ac:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
   142b0:	b16a      	cbz	r2, 142ce <ticker_job+0xcca>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   142b2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   142b6:	465b      	mov	r3, fp
   142b8:	2201      	movs	r2, #1
   142ba:	2103      	movs	r1, #3
   142bc:	2004      	movs	r0, #4
   142be:	46a4      	mov	ip, r4
}
   142c0:	b00f      	add	sp, #60	; 0x3c
   142c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   142c6:	4760      	bx	ip
	instance->job_guard = 0U;
   142c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   142ca:	f88b 301e 	strb.w	r3, [fp, #30]
}
   142ce:	b00f      	add	sp, #60	; 0x3c
   142d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
   142d4:	eba3 0309 	sub.w	r3, r3, r9
   142d8:	60a3      	str	r3, [r4, #8]
			break;
   142da:	f8db 3000 	ldr.w	r3, [fp]
   142de:	9303      	str	r3, [sp, #12]
   142e0:	e559      	b.n	13d96 <ticker_job+0x792>
	count_user = instance->count_user;
   142e2:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   142e6:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   142ea:	1e5c      	subs	r4, r3, #1
   142ec:	b2e4      	uxtb	r4, r4
   142ee:	2b00      	cmp	r3, #0
   142f0:	f43f ac9c 	beq.w	13c2c <ticker_job+0x628>
		flag_compare_update = 1U;
   142f4:	2301      	movs	r3, #1
   142f6:	9307      	str	r3, [sp, #28]
   142f8:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   142fc:	f04f 0900 	mov.w	r9, #0
			uop->status = TICKER_STATUS_FAILURE;
   14300:	f04f 0a01 	mov.w	sl, #1
   14304:	9601      	str	r6, [sp, #4]
		while (user->first != user->last) {
   14306:	7863      	ldrb	r3, [r4, #1]
   14308:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
   1430a:	6866      	ldr	r6, [r4, #4]
		while (user->first != user->last) {
   1430c:	4299      	cmp	r1, r3
   1430e:	d10c      	bne.n	1432a <ticker_job+0xd26>
   14310:	e05c      	b.n	143cc <ticker_job+0xdc8>
	switch (uop->op) {
   14312:	2b01      	cmp	r3, #1
   14314:	d056      	beq.n	143c4 <ticker_job+0xdc0>
			first = user->first + 1;
   14316:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   14318:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
   1431a:	3301      	adds	r3, #1
   1431c:	b2db      	uxtb	r3, r3
				first = 0U;
   1431e:	429a      	cmp	r2, r3
   14320:	bf08      	it	eq
   14322:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   14324:	4299      	cmp	r1, r3
			user->first = first;
   14326:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   14328:	d050      	beq.n	143cc <ticker_job+0xdc8>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1432a:	b21b      	sxth	r3, r3
   1432c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   14330:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14334:	eb06 0283 	add.w	r2, r6, r3, lsl #2
	switch (uop->op) {
   14338:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
   1433c:	2b02      	cmp	r3, #2
   1433e:	d01b      	beq.n	14378 <ticker_job+0xd74>
   14340:	2b03      	cmp	r3, #3
   14342:	d1e6      	bne.n	14312 <ticker_job+0xd0e>
		if (uop->id < instance->count_node) {
   14344:	7853      	ldrb	r3, [r2, #1]
   14346:	f89b 1008 	ldrb.w	r1, [fp, #8]
   1434a:	4299      	cmp	r1, r3
   1434c:	d911      	bls.n	14372 <ticker_job+0xd6e>
			node[uop->id].priority =
   1434e:	f8db 1000 	ldr.w	r1, [fp]
   14352:	7910      	ldrb	r0, [r2, #4]
   14354:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14358:	eb01 1303 	add.w	r3, r1, r3, lsl #4
   1435c:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   14360:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   14364:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
   14366:	b113      	cbz	r3, 1436e <ticker_job+0xd6a>
		fp_op_func(uop->status, uop->op_context);
   14368:	6b11      	ldr	r1, [r2, #48]	; 0x30
   1436a:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1436c:	4798      	blx	r3
   1436e:	78e1      	ldrb	r1, [r4, #3]
   14370:	e7d1      	b.n	14316 <ticker_job+0xd12>
			uop->status = TICKER_STATUS_FAILURE;
   14372:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
   14376:	e7f5      	b.n	14364 <ticker_job+0xd60>
		ticker_by_next_slot_get(instance,
   14378:	e9d2 c101 	ldrd	ip, r1, [r2, #4]
	_ticker_id_head = *ticker_id_head;
   1437c:	f89c 3000 	ldrb.w	r3, [ip]
		ticker_by_next_slot_get(instance,
   14380:	f8d2 e00c 	ldr.w	lr, [r2, #12]
	node = instance->nodes;
   14384:	f8db 5000 	ldr.w	r5, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
   14388:	f8db 0014 	ldr.w	r0, [fp, #20]
   1438c:	2bff      	cmp	r3, #255	; 0xff
   1438e:	d002      	beq.n	14396 <ticker_job+0xd92>
   14390:	680f      	ldr	r7, [r1, #0]
   14392:	4287      	cmp	r7, r0
   14394:	d026      	beq.n	143e4 <ticker_job+0xde0>
		_ticker_id_head = instance->ticker_id_head;
   14396:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
   1439a:	6008      	str	r0, [r1, #0]
		_ticks_to_expire = 0U;
   1439c:	2100      	movs	r1, #0
   1439e:	e00b      	b.n	143b8 <ticker_job+0xdb4>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   143a0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   143a4:	eb05 1800 	add.w	r8, r5, r0, lsl #4
   143a8:	0100      	lsls	r0, r0, #4
	while ((_ticker_id_head != TICKER_NULL) &&
   143aa:	f8d8 7018 	ldr.w	r7, [r8, #24]
   143ae:	b9af      	cbnz	r7, 143dc <ticker_job+0xdd8>
		_ticks_to_expire += ticker->ticks_to_expire;
   143b0:	f8d8 8008 	ldr.w	r8, [r8, #8]
		_ticker_id_head = ticker->next;
   143b4:	5c2b      	ldrb	r3, [r5, r0]
		_ticks_to_expire += ticker->ticks_to_expire;
   143b6:	4441      	add	r1, r8
	while ((_ticker_id_head != TICKER_NULL) &&
   143b8:	2bff      	cmp	r3, #255	; 0xff
   143ba:	d1f1      	bne.n	143a0 <ticker_job+0xd9c>
	*ticker_id_head = _ticker_id_head;
   143bc:	f88c 3000 	strb.w	r3, [ip]
	*ticks_to_expire = _ticks_to_expire;
   143c0:	f8ce 1000 	str.w	r1, [lr]
		fp_op_func = uop->fp_op_func;
   143c4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   143c6:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
   143ca:	e7cc      	b.n	14366 <ticker_job+0xd62>
	while (count_user--) {
   143cc:	9a01      	ldr	r2, [sp, #4]
   143ce:	42a2      	cmp	r2, r4
   143d0:	f1a4 0308 	sub.w	r3, r4, #8
   143d4:	f43f af63 	beq.w	1429e <ticker_job+0xc9a>
   143d8:	461c      	mov	r4, r3
   143da:	e794      	b.n	14306 <ticker_job+0xd02>
		_ticks_to_expire += ticker->ticks_to_expire;
   143dc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   143e0:	4401      	add	r1, r0
   143e2:	e7eb      	b.n	143bc <ticker_job+0xdb8>
		ticker = &node[_ticker_id_head];
   143e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   143e8:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
   143ea:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
   143ee:	5ceb      	ldrb	r3, [r5, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
   143f0:	e7e2      	b.n	143b8 <ticker_job+0xdb4>
	count_user = instance->count_user;
   143f2:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   143f6:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   143fa:	1e5c      	subs	r4, r3, #1
   143fc:	b2e4      	uxtb	r4, r4
   143fe:	2b00      	cmp	r3, #0
   14400:	f47f af7a 	bne.w	142f8 <ticker_job+0xcf4>
   14404:	e74b      	b.n	1429e <ticker_job+0xc9a>
		if (cntr_stop() == 0) {
   14406:	f00a fc0f 	bl	1ec28 <cntr_stop>
   1440a:	2800      	cmp	r0, #0
   1440c:	f47f af4e 	bne.w	142ac <ticker_job+0xca8>
			instance->ticks_slot_previous = 0U;
   14410:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   14414:	f00a fc2e 	bl	1ec74 <cntr_cnt_get>
   14418:	f89b 201f 	ldrb.w	r2, [fp, #31]
   1441c:	f8cb 0014 	str.w	r0, [fp, #20]
   14420:	e746      	b.n	142b0 <ticker_job+0xcac>
	count_user = instance->count_user;
   14422:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
   14426:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   1442a:	1e54      	subs	r4, r2, #1
   1442c:	b2e4      	uxtb	r4, r4
   1442e:	2a00      	cmp	r2, #0
   14430:	f47f af61 	bne.w	142f6 <ticker_job+0xcf2>
	instance->job_guard = 0U;
   14434:	9b08      	ldr	r3, [sp, #32]
   14436:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   1443a:	f7ff bbfc 	b.w	13c36 <ticker_job+0x632>
   1443e:	f89b 701d 	ldrb.w	r7, [fp, #29]
   14442:	f7ff bbf8 	b.w	13c36 <ticker_job+0x632>
		ticks_current = cntr_cnt_get();
   14446:	f00a fc15 	bl	1ec74 <cntr_cnt_get>
   1444a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   1444c:	f00a fbdc 	bl	1ec08 <cntr_start>
   14450:	f89b 701d 	ldrb.w	r7, [fp, #29]
   14454:	2800      	cmp	r0, #0
   14456:	f47f abf5 	bne.w	13c44 <ticker_job+0x640>
			instance->ticks_current = ticks_current;
   1445a:	f8cb 4014 	str.w	r4, [fp, #20]
   1445e:	f7ff bbf1 	b.w	13c44 <ticker_job+0x640>
   14462:	bf00      	nop
   14464:	ff172b5a 	.word	0xff172b5a
   14468:	7f172b59 	.word	0x7f172b59

0001446c <ticker_init>:
{
   1446c:	b4f0      	push	{r4, r5, r6, r7}
   1446e:	9f04      	ldr	r7, [sp, #16]
   14470:	f89d 4014 	ldrb.w	r4, [sp, #20]
   14474:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   14476:	2800      	cmp	r0, #0
   14478:	d13e      	bne.n	144f8 <ticker_init+0x8c>
	instance->count_node = count_node;
   1447a:	f8df c084 	ldr.w	ip, [pc, #132]	; 14500 <ticker_init+0x94>
	while (count_node--) {
   1447e:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
   14480:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
   14484:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
   14488:	b2ed      	uxtb	r5, r5
   1448a:	b149      	cbz	r1, 144a0 <ticker_init+0x34>
   1448c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   14490:	eb02 1105 	add.w	r1, r2, r5, lsl #4
   14494:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   14496:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   1449a:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   1449e:	d1f9      	bne.n	14494 <ticker_init+0x28>
	while (count_user--) {
   144a0:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   144a2:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
   144a6:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
   144aa:	b2d2      	uxtb	r2, r2
   144ac:	b17b      	cbz	r3, 144ce <ticker_init+0x62>
   144ae:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
   144b2:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   144b4:	4611      	mov	r1, r2
   144b6:	f812 3908 	ldrb.w	r3, [r2], #-8
   144ba:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
   144be:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
   144c0:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
   144c2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
   144c6:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
   144c8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
   144cc:	d1f1      	bne.n	144b2 <ticker_init+0x46>
	if (count_op) {
   144ce:	b99c      	cbnz	r4, 144f8 <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
   144d0:	9a07      	ldr	r2, [sp, #28]
   144d2:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
   144d6:	9a08      	ldr	r2, [sp, #32]
   144d8:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   144dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   144e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
   144e2:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
   144e6:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
   144e8:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
   144ec:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
   144ee:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
   144f2:	f8ac 301c 	strh.w	r3, [ip, #28]
}
   144f6:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   144f8:	2001      	movs	r0, #1
}
   144fa:	bcf0      	pop	{r4, r5, r6, r7}
   144fc:	4770      	bx	lr
   144fe:	bf00      	nop
   14500:	20002c34 	.word	0x20002c34

00014504 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   14504:	4b04      	ldr	r3, [pc, #16]	; (14518 <ticker_is_initialized+0x14>)
   14506:	222c      	movs	r2, #44	; 0x2c
   14508:	fb02 3000 	mla	r0, r2, r0, r3
   1450c:	7a00      	ldrb	r0, [r0, #8]
}
   1450e:	3800      	subs	r0, #0
   14510:	bf18      	it	ne
   14512:	2001      	movne	r0, #1
   14514:	4770      	bx	lr
   14516:	bf00      	nop
   14518:	20002c34 	.word	0x20002c34

0001451c <ticker_trigger>:
	if (instance->sched_cb) {
   1451c:	4b0a      	ldr	r3, [pc, #40]	; (14548 <ticker_trigger+0x2c>)
   1451e:	222c      	movs	r2, #44	; 0x2c
   14520:	fb02 3200 	mla	r2, r2, r0, r3
{
   14524:	b410      	push	{r4}
	if (instance->sched_cb) {
   14526:	6a54      	ldr	r4, [r2, #36]	; 0x24
   14528:	b15c      	cbz	r4, 14542 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   1452a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1452e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   14532:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   14536:	46a4      	mov	ip, r4
   14538:	2201      	movs	r2, #1
}
   1453a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1453c:	2103      	movs	r1, #3
   1453e:	2002      	movs	r0, #2
   14540:	4760      	bx	ip
}
   14542:	bc10      	pop	{r4}
   14544:	4770      	bx	lr
   14546:	bf00      	nop
   14548:	20002c34 	.word	0x20002c34

0001454c <ticker_start_ext>:
{
   1454c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   14550:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 145f4 <ticker_start_ext+0xa8>
{
   14554:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   14558:	272c      	movs	r7, #44	; 0x2c
   1455a:	fb07 8700 	mla	r7, r7, r0, r8
{
   1455e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   14560:	687d      	ldr	r5, [r7, #4]
   14562:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   14566:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
   1456a:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
   1456e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   14572:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   14576:	1c75      	adds	r5, r6, #1
{
   14578:	4608      	mov	r0, r1
	last = user->last + 1;
   1457a:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
   1457c:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
   14580:	45a9      	cmp	r9, r5
   14582:	bf98      	it	ls
   14584:	2500      	movls	r5, #0
	if (last == user->first) {
   14586:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
   14588:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
   1458c:	d02f      	beq.n	145ee <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   1458e:	f8dc 1004 	ldr.w	r1, [ip, #4]
   14592:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   14596:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   1459a:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   1459e:	f04f 0904 	mov.w	r9, #4
   145a2:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   145a6:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   145a8:	9b08      	ldr	r3, [sp, #32]
   145aa:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   145ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   145ae:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   145b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   145b2:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   145b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   145b6:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   145b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   145ba:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   145bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   145be:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   145c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   145c2:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   145c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   145c6:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   145c8:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   145ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   145cc:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   145ce:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   145d2:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   145d4:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
   145d6:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   145da:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   145de:	4798      	blx	r3
   145e0:	4643      	mov	r3, r8
   145e2:	4649      	mov	r1, r9
   145e4:	2200      	movs	r2, #0
   145e6:	47a8      	blx	r5
	return user_op->status;
   145e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   145ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   145ee:	2001      	movs	r0, #1
}
   145f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   145f4:	20002c34 	.word	0x20002c34

000145f8 <ticker_start>:
{
   145f8:	b530      	push	{r4, r5, lr}
   145fa:	b08b      	sub	sp, #44	; 0x2c
   145fc:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14600:	9500      	str	r5, [sp, #0]
{
   14602:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14604:	9401      	str	r4, [sp, #4]
   14606:	9502      	str	r5, [sp, #8]
{
   14608:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   1460c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1460e:	9403      	str	r4, [sp, #12]
   14610:	9504      	str	r5, [sp, #16]
{
   14612:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   14614:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   14616:	9405      	str	r4, [sp, #20]
   14618:	9506      	str	r5, [sp, #24]
{
   1461a:	9c15      	ldr	r4, [sp, #84]	; 0x54
   1461c:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1461e:	9407      	str	r4, [sp, #28]
   14620:	2400      	movs	r4, #0
   14622:	e9cd 5408 	strd	r5, r4, [sp, #32]
   14626:	f7ff ff91 	bl	1454c <ticker_start_ext>
}
   1462a:	b00b      	add	sp, #44	; 0x2c
   1462c:	bd30      	pop	{r4, r5, pc}
   1462e:	bf00      	nop

00014630 <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
   14630:	f8df c098 	ldr.w	ip, [pc, #152]	; 146cc <ticker_update+0x9c>
{
   14634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
   14638:	272c      	movs	r7, #44	; 0x2c
   1463a:	fb07 c700 	mla	r7, r7, r0, ip
{
   1463e:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   14640:	687d      	ldr	r5, [r7, #4]
{
   14642:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   14646:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
   1464a:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1464c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   14650:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
   14654:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   14656:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   1465a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1465e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   14662:	1c75      	adds	r5, r6, #1
   14664:	b2ed      	uxtb	r5, r5
		last = 0U;
   14666:	45aa      	cmp	sl, r5
   14668:	bf98      	it	ls
   1466a:	2500      	movls	r5, #0
	if (last == user->first) {
   1466c:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
   1466e:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
   14672:	d028      	beq.n	146c6 <ticker_update+0x96>
	user_op = &user->user_op[user->last];
   14674:	f8d1 c004 	ldr.w	ip, [r1, #4]
   14678:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   1467c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   14680:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   14684:	f04f 0905 	mov.w	r9, #5
   14688:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   1468c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1468e:	9b08      	ldr	r3, [sp, #32]
   14690:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   14692:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14694:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   14696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14698:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   1469a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1469c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   1469e:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   146a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   146a2:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   146a4:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
   146a8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
   146aa:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   146ae:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
   146b0:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   146b2:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   146b6:	4798      	blx	r3
   146b8:	4653      	mov	r3, sl
   146ba:	2200      	movs	r2, #0
   146bc:	2104      	movs	r1, #4
   146be:	47a8      	blx	r5
	return user_op->status;
   146c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   146c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   146c6:	2001      	movs	r0, #1
}
   146c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   146cc:	20002c34 	.word	0x20002c34

000146d0 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
   146d0:	f8df c084 	ldr.w	ip, [pc, #132]	; 14758 <ticker_stop+0x88>
{
   146d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
   146d8:	272c      	movs	r7, #44	; 0x2c
   146da:	fb07 c700 	mla	r7, r7, r0, ip
{
   146de:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   146e0:	687d      	ldr	r5, [r7, #4]
{
   146e2:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   146e4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   146e8:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   146ec:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   146ee:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   146f2:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   146f6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   146fa:	1c75      	adds	r5, r6, #1
   146fc:	b2ed      	uxtb	r5, r5
		last = 0U;
   146fe:	45a8      	cmp	r8, r5
   14700:	bf98      	it	ls
   14702:	2500      	movls	r5, #0
	if (last == user->first) {
   14704:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   14706:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
   1470a:	d021      	beq.n	14750 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
   1470c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   14710:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
   14714:	eb06 068e 	add.w	r6, r6, lr, lsl #2
   14718:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1471c:	f04f 0e06 	mov.w	lr, #6
   14720:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
   14724:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   14728:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   1472a:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   1472c:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
   14730:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   14734:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
   14738:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1473a:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   1473e:	4798      	blx	r3
   14740:	4623      	mov	r3, r4
   14742:	2200      	movs	r2, #0
   14744:	2104      	movs	r1, #4
   14746:	47a8      	blx	r5
	return user_op->status;
   14748:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   1474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   14750:	2001      	movs	r0, #1
}
   14752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14756:	bf00      	nop
   14758:	20002c34 	.word	0x20002c34

0001475c <ticker_ticks_now_get>:
	return cntr_cnt_get();
   1475c:	f00a ba8a 	b.w	1ec74 <cntr_cnt_get>

00014760 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   14760:	1a40      	subs	r0, r0, r1
}
   14762:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14766:	4770      	bx	lr

00014768 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   14768:	2801      	cmp	r0, #1
   1476a:	d813      	bhi.n	14794 <ll_addr_get+0x2c>
{
   1476c:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
   1476e:	b948      	cbnz	r0, 14784 <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   14770:	b131      	cbz	r1, 14780 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   14772:	4608      	mov	r0, r1
   14774:	2206      	movs	r2, #6
   14776:	4909      	ldr	r1, [pc, #36]	; (1479c <ll_addr_get+0x34>)
   14778:	f012 f913 	bl	269a2 <memcpy>
	}

	return pub_addr;
   1477c:	4807      	ldr	r0, [pc, #28]	; (1479c <ll_addr_get+0x34>)
}
   1477e:	bd08      	pop	{r3, pc}
	return pub_addr;
   14780:	4806      	ldr	r0, [pc, #24]	; (1479c <ll_addr_get+0x34>)
}
   14782:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   14784:	b141      	cbz	r1, 14798 <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   14786:	4608      	mov	r0, r1
   14788:	2206      	movs	r2, #6
   1478a:	4905      	ldr	r1, [pc, #20]	; (147a0 <ll_addr_get+0x38>)
   1478c:	f012 f909 	bl	269a2 <memcpy>
		return rnd_addr;
   14790:	4803      	ldr	r0, [pc, #12]	; (147a0 <ll_addr_get+0x38>)
}
   14792:	bd08      	pop	{r3, pc}
		return NULL;
   14794:	2000      	movs	r0, #0
}
   14796:	4770      	bx	lr
		return rnd_addr;
   14798:	4801      	ldr	r0, [pc, #4]	; (147a0 <ll_addr_get+0x38>)
}
   1479a:	bd08      	pop	{r3, pc}
   1479c:	20002c60 	.word	0x20002c60
   147a0:	20002c68 	.word	0x20002c68

000147a4 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   147a4:	b570      	push	{r4, r5, r6, lr}
   147a6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   147a8:	2000      	movs	r0, #0
{
   147aa:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   147ac:	f003 f9aa 	bl	17b04 <ull_adv_is_enabled>
   147b0:	b988      	cbnz	r0, 147d6 <ll_addr_set+0x32>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   147b2:	f003 fbb7 	bl	17f24 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   147b6:	f010 0606 	ands.w	r6, r0, #6
   147ba:	d10c      	bne.n	147d6 <ll_addr_set+0x32>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   147bc:	4629      	mov	r1, r5
   147be:	2206      	movs	r2, #6
	if (addr_type) {
   147c0:	b124      	cbz	r4, 147cc <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   147c2:	4806      	ldr	r0, [pc, #24]	; (147dc <ll_addr_set+0x38>)
   147c4:	f012 f8ed 	bl	269a2 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   147c8:	4630      	mov	r0, r6
}
   147ca:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   147cc:	4804      	ldr	r0, [pc, #16]	; (147e0 <ll_addr_set+0x3c>)
   147ce:	f012 f8e8 	bl	269a2 <memcpy>
	return 0;
   147d2:	4620      	mov	r0, r4
}
   147d4:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   147d6:	200c      	movs	r0, #12
}
   147d8:	bd70      	pop	{r4, r5, r6, pc}
   147da:	bf00      	nop
   147dc:	20002c68 	.word	0x20002c68
   147e0:	20002c60 	.word	0x20002c60

000147e4 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   147e4:	2802      	cmp	r0, #2
   147e6:	d001      	beq.n	147ec <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   147e8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   147ea:	4770      	bx	lr
{
   147ec:	b538      	push	{r3, r4, r5, lr}
   147ee:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   147f0:	4608      	mov	r0, r1
   147f2:	461d      	mov	r5, r3
   147f4:	f003 ff98 	bl	18728 <ll_connected_get>
			if (!conn) {
   147f8:	b110      	cbz	r0, 14800 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   147fa:	2000      	movs	r0, #0
   147fc:	7028      	strb	r0, [r5, #0]
}
   147fe:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14800:	4620      	mov	r0, r4
}
   14802:	bd38      	pop	{r3, r4, r5, pc}

00014804 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   14804:	2300      	movs	r3, #0
   14806:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   14808:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   1480a:	4770      	bx	lr

0001480c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   1480c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1480e:	4802      	ldr	r0, [pc, #8]	; (14818 <hci_driver_init+0xc>)
   14810:	f7f3 fda8 	bl	8364 <bt_hci_driver_register>

	return 0;
}
   14814:	2000      	movs	r0, #0
   14816:	bd08      	pop	{r3, pc}
   14818:	0002e890 	.word	0x0002e890

0001481c <hci_driver_send>:
{
   1481c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   1481e:	8983      	ldrh	r3, [r0, #12]
{
   14820:	b083      	sub	sp, #12
	if (!buf->len) {
   14822:	b123      	cbz	r3, 1482e <hci_driver_send+0x12>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   14824:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   14826:	4604      	mov	r4, r0
   14828:	b1c3      	cbz	r3, 1485c <hci_driver_send+0x40>
   1482a:	2b02      	cmp	r3, #2
   1482c:	d004      	beq.n	14838 <hci_driver_send+0x1c>
   1482e:	f06f 0515 	mvn.w	r5, #21
}
   14832:	4628      	mov	r0, r5
   14834:	b003      	add	sp, #12
   14836:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   14838:	a901      	add	r1, sp, #4
   1483a:	f000 fe77 	bl	1552c <hci_acl_handle>
	if (evt) {
   1483e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   14840:	4605      	mov	r5, r0
	if (evt) {
   14842:	b113      	cbz	r3, 1484a <hci_driver_send+0x2e>
		bt_recv_prio(evt);
   14844:	4618      	mov	r0, r3
   14846:	f7f3 fd6f 	bl	8328 <bt_recv_prio>
	if (!err) {
   1484a:	2d00      	cmp	r5, #0
   1484c:	d1f1      	bne.n	14832 <hci_driver_send+0x16>
		net_buf_unref(buf);
   1484e:	4620      	mov	r0, r4
   14850:	f00b fa9c 	bl	1fd8c <net_buf_unref>
   14854:	2500      	movs	r5, #0
}
   14856:	4628      	mov	r0, r5
   14858:	b003      	add	sp, #12
   1485a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   1485c:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   1485e:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   14860:	f000 fa60 	bl	14d24 <hci_cmd_handle>
	if (evt) {
   14864:	2800      	cmp	r0, #0
   14866:	d0f2      	beq.n	1484e <hci_driver_send+0x32>
		bt_recv_prio(evt);
   14868:	f7f3 fd5e 	bl	8328 <bt_recv_prio>
		if (node_rx) {
   1486c:	9d01      	ldr	r5, [sp, #4]
   1486e:	2d00      	cmp	r5, #0
   14870:	d0ed      	beq.n	1484e <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   14872:	4628      	mov	r0, r5
   14874:	f001 fb12 	bl	15e9c <hci_get_class>
   14878:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   1487a:	9901      	ldr	r1, [sp, #4]
   1487c:	4801      	ldr	r0, [pc, #4]	; (14884 <hci_driver_send+0x68>)
   1487e:	f018 fcec 	bl	2d25a <k_queue_append>
	if (!err) {
   14882:	e7e4      	b.n	1484e <hci_driver_send+0x32>
   14884:	20000e44 	.word	0x20000e44

00014888 <recv_thread>:
{
   14888:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   1488a:	4d37      	ldr	r5, [pc, #220]	; (14968 <recv_thread+0xe0>)
		LL_ASSERT(0);
   1488c:	4f37      	ldr	r7, [pc, #220]	; (1496c <recv_thread+0xe4>)
   1488e:	4e38      	ldr	r6, [pc, #224]	; (14970 <recv_thread+0xe8>)
{
   14890:	b083      	sub	sp, #12
   14892:	e015      	b.n	148c0 <recv_thread+0x38>
	switch (class) {
   14894:	2b00      	cmp	r3, #0
   14896:	d13c      	bne.n	14912 <recv_thread+0x8a>
		LL_ASSERT(0);
   14898:	4836      	ldr	r0, [pc, #216]	; (14974 <recv_thread+0xec>)
   1489a:	23cf      	movs	r3, #207	; 0xcf
   1489c:	463a      	mov	r2, r7
   1489e:	4631      	mov	r1, r6
   148a0:	f00f fe08 	bl	244b4 <printk>
   148a4:	4040      	eors	r0, r0
   148a6:	f380 8811 	msr	BASEPRI, r0
   148aa:	f04f 0003 	mov.w	r0, #3
   148ae:	df02      	svc	2
	node_rx->hdr.next = NULL;
   148b0:	9b01      	ldr	r3, [sp, #4]
   148b2:	2200      	movs	r2, #0
   148b4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   148b6:	a801      	add	r0, sp, #4
   148b8:	f002 fa58 	bl	16d6c <ll_rx_mem_release>
	z_impl_k_yield();
   148bc:	f00f f888 	bl	239d0 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   148c0:	f04f 32ff 	mov.w	r2, #4294967295
   148c4:	f04f 33ff 	mov.w	r3, #4294967295
   148c8:	4628      	mov	r0, r5
   148ca:	f00e fd3b 	bl	23344 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   148ce:	2800      	cmp	r0, #0
   148d0:	d0f4      	beq.n	148bc <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   148d2:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   148d4:	9001      	str	r0, [sp, #4]
	switch (class) {
   148d6:	2b04      	cmp	r3, #4
   148d8:	d9dc      	bls.n	14894 <recv_thread+0xc>
   148da:	2b05      	cmp	r3, #5
   148dc:	d1dc      	bne.n	14898 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   148de:	f04f 32ff 	mov.w	r2, #4294967295
   148e2:	f04f 33ff 	mov.w	r3, #4294967295
   148e6:	2003      	movs	r0, #3
   148e8:	f7f4 faa6 	bl	8e38 <bt_buf_get_rx>
   148ec:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   148ee:	4601      	mov	r1, r0
   148f0:	9801      	ldr	r0, [sp, #4]
   148f2:	f000 fe99 	bl	15628 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   148f6:	9b01      	ldr	r3, [sp, #4]
   148f8:	2200      	movs	r2, #0
   148fa:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   148fc:	a801      	add	r0, sp, #4
   148fe:	f002 fa35 	bl	16d6c <ll_rx_mem_release>
		if (buf) {
   14902:	2c00      	cmp	r4, #0
   14904:	d0da      	beq.n	148bc <recv_thread+0x34>
			if (buf->len) {
   14906:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   14908:	4620      	mov	r0, r4
			if (buf->len) {
   1490a:	b1db      	cbz	r3, 14944 <recv_thread+0xbc>
				bt_recv(buf);
   1490c:	f7f3 fc92 	bl	8234 <bt_recv>
   14910:	e7d4      	b.n	148bc <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   14912:	2b02      	cmp	r3, #2
   14914:	d019      	beq.n	1494a <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   14916:	f04f 32ff 	mov.w	r2, #4294967295
   1491a:	f04f 33ff 	mov.w	r3, #4294967295
   1491e:	2001      	movs	r0, #1
   14920:	f7f4 fa8a 	bl	8e38 <bt_buf_get_rx>
   14924:	4604      	mov	r4, r0
		if (buf) {
   14926:	b1cc      	cbz	r4, 1495c <recv_thread+0xd4>
			hci_evt_encode(node_rx, buf);
   14928:	9801      	ldr	r0, [sp, #4]
   1492a:	4621      	mov	r1, r4
   1492c:	f000 feb6 	bl	1569c <hci_evt_encode>
	node_rx->hdr.next = NULL;
   14930:	9b01      	ldr	r3, [sp, #4]
   14932:	2200      	movs	r2, #0
   14934:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   14936:	a801      	add	r0, sp, #4
   14938:	f002 fa18 	bl	16d6c <ll_rx_mem_release>
			if (buf->len) {
   1493c:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1493e:	4620      	mov	r0, r4
			if (buf->len) {
   14940:	2b00      	cmp	r3, #0
   14942:	d1e3      	bne.n	1490c <recv_thread+0x84>
				net_buf_unref(buf);
   14944:	f00b fa22 	bl	1fd8c <net_buf_unref>
   14948:	e7b8      	b.n	148bc <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   1494a:	2200      	movs	r2, #0
   1494c:	2300      	movs	r3, #0
   1494e:	2101      	movs	r1, #1
   14950:	2000      	movs	r0, #0
   14952:	f7f4 faa7 	bl	8ea4 <bt_buf_get_evt>
   14956:	4604      	mov	r4, r0
		if (buf) {
   14958:	2c00      	cmp	r4, #0
   1495a:	d1e5      	bne.n	14928 <recv_thread+0xa0>
	node_rx->hdr.next = NULL;
   1495c:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   1495e:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   14960:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   14962:	f002 fa03 	bl	16d6c <ll_rx_mem_release>
		if (buf) {
   14966:	e7a9      	b.n	148bc <recv_thread+0x34>
   14968:	20000e44 	.word	0x20000e44
   1496c:	0002e82c 	.word	0x0002e82c
   14970:	0002e86c 	.word	0x0002e86c
   14974:	0002e80c 	.word	0x0002e80c

00014978 <prio_recv_thread>:
{
   14978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   1497c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14a34 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
   14980:	4f2b      	ldr	r7, [pc, #172]	; (14a30 <prio_recv_thread+0xb8>)
{
   14982:	b082      	sub	sp, #8
   14984:	e00c      	b.n	149a0 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   14986:	f7f4 fa8d 	bl	8ea4 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   1498a:	4622      	mov	r2, r4
   1498c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   14990:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   14992:	f001 fa6b 	bl	15e6c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   14996:	4620      	mov	r0, r4
   14998:	f7f3 fcc6 	bl	8328 <bt_recv_prio>
	z_impl_k_yield();
   1499c:	f00f f818 	bl	239d0 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   149a0:	f10d 0102 	add.w	r1, sp, #2
   149a4:	a801      	add	r0, sp, #4
   149a6:	f002 f833 	bl	16a10 <ll_rx_get>
   149aa:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   149ac:	f04f 32ff 	mov.w	r2, #4294967295
   149b0:	f04f 33ff 	mov.w	r3, #4294967295
   149b4:	2100      	movs	r1, #0
   149b6:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   149b8:	2c00      	cmp	r4, #0
   149ba:	d1e4      	bne.n	14986 <prio_recv_thread+0xe>
		if (node_rx) {
   149bc:	9b01      	ldr	r3, [sp, #4]
   149be:	b193      	cbz	r3, 149e6 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   149c0:	f002 f900 	bl	16bc4 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   149c4:	9e01      	ldr	r6, [sp, #4]
   149c6:	4630      	mov	r0, r6
   149c8:	f001 fa68 	bl	15e9c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   149cc:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   149ce:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   149d0:	796b      	ldrb	r3, [r5, #5]
   149d2:	2b03      	cmp	r3, #3
   149d4:	d102      	bne.n	149dc <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   149d6:	792b      	ldrb	r3, [r5, #4]
   149d8:	2b0e      	cmp	r3, #14
   149da:	d00c      	beq.n	149f6 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   149dc:	4629      	mov	r1, r5
   149de:	4638      	mov	r0, r7
   149e0:	f018 fc3b 	bl	2d25a <k_queue_append>
			continue;
   149e4:	e7dc      	b.n	149a0 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   149e6:	f04f 32ff 	mov.w	r2, #4294967295
   149ea:	f04f 33ff 	mov.w	r3, #4294967295
   149ee:	4640      	mov	r0, r8
   149f0:	f00f f886 	bl	23b00 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   149f4:	e7d4      	b.n	149a0 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   149f6:	4621      	mov	r1, r4
   149f8:	f04f 33ff 	mov.w	r3, #4294967295
   149fc:	f04f 32ff 	mov.w	r2, #4294967295
   14a00:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   14a02:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   14a04:	f7f4 fa4e 	bl	8ea4 <bt_buf_get_evt>
   14a08:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   14a0a:	4622      	mov	r2, r4
   14a0c:	f105 001c 	add.w	r0, r5, #28
   14a10:	4631      	mov	r1, r6
   14a12:	f000 fdf1 	bl	155f8 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   14a16:	4630      	mov	r0, r6
   14a18:	f000 fdfe 	bl	15618 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   14a1c:	4620      	mov	r0, r4
			if (buf) {
   14a1e:	b124      	cbz	r4, 14a2a <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   14a20:	f7f3 fc82 	bl	8328 <bt_recv_prio>
					net_buf_unref(buf);
   14a24:	4620      	mov	r0, r4
   14a26:	f00b f9b1 	bl	1fd8c <net_buf_unref>
   14a2a:	9d01      	ldr	r5, [sp, #4]
   14a2c:	e7d6      	b.n	149dc <prio_recv_thread+0x64>
   14a2e:	bf00      	nop
   14a30:	20000e44 	.word	0x20000e44
   14a34:	20000de4 	.word	0x20000de4

00014a38 <hci_driver_open>:
{
   14a38:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   14a3a:	481a      	ldr	r0, [pc, #104]	; (14aa4 <hci_driver_open+0x6c>)
{
   14a3c:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   14a3e:	f001 fcff 	bl	16440 <ll_init>
	if (err) {
   14a42:	4604      	mov	r4, r0
   14a44:	bb58      	cbnz	r0, 14a9e <hci_driver_open+0x66>
	hci_init(NULL);
   14a46:	f001 fa3f 	bl	15ec8 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   14a4a:	2600      	movs	r6, #0
   14a4c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14a4e:	f06f 0309 	mvn.w	r3, #9
   14a52:	9303      	str	r3, [sp, #12]
   14a54:	e9cd 6706 	strd	r6, r7, [sp, #24]
   14a58:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14a5c:	4b12      	ldr	r3, [pc, #72]	; (14aa8 <hci_driver_open+0x70>)
   14a5e:	4913      	ldr	r1, [pc, #76]	; (14aac <hci_driver_open+0x74>)
   14a60:	9404      	str	r4, [sp, #16]
   14a62:	9400      	str	r4, [sp, #0]
   14a64:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   14a68:	4811      	ldr	r0, [pc, #68]	; (14ab0 <hci_driver_open+0x78>)
   14a6a:	f00f f8bb 	bl	23be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   14a6e:	4911      	ldr	r1, [pc, #68]	; (14ab4 <hci_driver_open+0x7c>)
   14a70:	480f      	ldr	r0, [pc, #60]	; (14ab0 <hci_driver_open+0x78>)
   14a72:	f018 fd31 	bl	2d4d8 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14a76:	f06f 0307 	mvn.w	r3, #7
   14a7a:	9303      	str	r3, [sp, #12]
   14a7c:	e9cd 6706 	strd	r6, r7, [sp, #24]
   14a80:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14a84:	4b0c      	ldr	r3, [pc, #48]	; (14ab8 <hci_driver_open+0x80>)
   14a86:	490d      	ldr	r1, [pc, #52]	; (14abc <hci_driver_open+0x84>)
   14a88:	9404      	str	r4, [sp, #16]
   14a8a:	9400      	str	r4, [sp, #0]
   14a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   14a90:	480b      	ldr	r0, [pc, #44]	; (14ac0 <hci_driver_open+0x88>)
   14a92:	f00f f8a7 	bl	23be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   14a96:	490b      	ldr	r1, [pc, #44]	; (14ac4 <hci_driver_open+0x8c>)
   14a98:	4809      	ldr	r0, [pc, #36]	; (14ac0 <hci_driver_open+0x88>)
   14a9a:	f018 fd1d 	bl	2d4d8 <z_impl_k_thread_name_set>
}
   14a9e:	4620      	mov	r0, r4
   14aa0:	b008      	add	sp, #32
   14aa2:	bdd0      	pop	{r4, r6, r7, pc}
   14aa4:	20000de4 	.word	0x20000de4
   14aa8:	00014979 	.word	0x00014979
   14aac:	20009d80 	.word	0x20009d80
   14ab0:	200018b0 	.word	0x200018b0
   14ab4:	0002e870 	.word	0x0002e870
   14ab8:	00014889 	.word	0x00014889
   14abc:	20009f40 	.word	0x20009f40
   14ac0:	20001930 	.word	0x20001930
   14ac4:	0002e87c 	.word	0x0002e87c

00014ac8 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
   14ac8:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   14aca:	4b07      	ldr	r3, [pc, #28]	; (14ae8 <cmd_complete_status+0x20>)
{
   14acc:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   14ace:	2101      	movs	r1, #1
   14ad0:	8818      	ldrh	r0, [r3, #0]
   14ad2:	f012 fe0d 	bl	276f0 <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
   14ad6:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   14ad8:	4604      	mov	r4, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
   14ada:	3008      	adds	r0, #8
   14adc:	f017 fadd 	bl	2c09a <net_buf_simple_add>
   14ae0:	4603      	mov	r3, r0
	ccst->status = status;

	return buf;
}
   14ae2:	4620      	mov	r0, r4
	ccst->status = status;
   14ae4:	701d      	strb	r5, [r3, #0]
}
   14ae6:	bd38      	pop	{r3, r4, r5, pc}
   14ae8:	20009060 	.word	0x20009060

00014aec <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   14aec:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   14aee:	f100 0408 	add.w	r4, r0, #8
{
   14af2:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   14af4:	4620      	mov	r0, r4
   14af6:	2102      	movs	r1, #2
{
   14af8:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   14afa:	f017 face 	bl	2c09a <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   14afe:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   14b00:	223e      	movs	r2, #62	; 0x3e
   14b02:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   14b04:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   14b06:	2101      	movs	r1, #1
   14b08:	4620      	mov	r0, r4
   14b0a:	f017 fac6 	bl	2c09a <net_buf_simple_add>
	me->subevent = subevt;
   14b0e:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   14b10:	4629      	mov	r1, r5
   14b12:	4620      	mov	r0, r4
}
   14b14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   14b18:	f017 babf 	b.w	2c09a <net_buf_simple_add>

00014b1c <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
   14b1c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   14b1e:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
   14b22:	4604      	mov	r4, r0
   14b24:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   14b26:	4628      	mov	r0, r5
   14b28:	2102      	movs	r1, #2
   14b2a:	f017 fab6 	bl	2c09a <net_buf_simple_add>
   14b2e:	4603      	mov	r3, r0
	hdr->evt = evt;
   14b30:	2208      	movs	r2, #8
	hdr->len = len;
   14b32:	2104      	movs	r1, #4
	hdr->evt = evt;
   14b34:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   14b36:	7059      	strb	r1, [r3, #1]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
		return;
	}

	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));
   14b38:	4628      	mov	r0, r5
   14b3a:	f017 faae 	bl	2c09a <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   14b3e:	fab4 f384 	clz	r3, r4
   14b42:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   14b44:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   14b46:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   14b48:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   14b4c:	bd70      	pop	{r4, r5, r6, pc}
   14b4e:	bf00      	nop

00014b50 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   14b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   14b54:	4c17      	ldr	r4, [pc, #92]	; (14bb4 <le_remote_feat_complete+0x64>)
   14b56:	6866      	ldr	r6, [r4, #4]
   14b58:	f04f 0900 	mov.w	r9, #0
   14b5c:	464c      	mov	r4, r9
   14b5e:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   14b62:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   14b64:	ea54 0205 	orrs.w	r2, r4, r5
   14b68:	d009      	beq.n	14b7e <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   14b6a:	4a13      	ldr	r2, [pc, #76]	; (14bb8 <le_remote_feat_complete+0x68>)
   14b6c:	6812      	ldr	r2, [r2, #0]
   14b6e:	4606      	mov	r6, r0
   14b70:	4688      	mov	r8, r1
   14b72:	f002 0008 	and.w	r0, r2, #8
   14b76:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   14b78:	ea50 0201 	orrs.w	r2, r0, r1
   14b7c:	d101      	bne.n	14b82 <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   14b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   14b82:	4618      	mov	r0, r3
   14b84:	220b      	movs	r2, #11
   14b86:	2104      	movs	r1, #4
   14b88:	f7ff ffb0 	bl	14aec <meta_evt>
	sep->status = status;
   14b8c:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   14b8e:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   14b92:	b93e      	cbnz	r6, 14ba4 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
   14b94:	f108 0104 	add.w	r1, r8, #4
   14b98:	3003      	adds	r0, #3
}
   14b9a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
   14b9e:	2208      	movs	r2, #8
   14ba0:	f011 beff 	b.w	269a2 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   14ba4:	4649      	mov	r1, r9
   14ba6:	3003      	adds	r0, #3
}
   14ba8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   14bac:	2208      	movs	r2, #8
   14bae:	f011 bf23 	b.w	269f8 <memset>
   14bb2:	bf00      	nop
   14bb4:	20000290 	.word	0x20000290
   14bb8:	20000298 	.word	0x20000298

00014bbc <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   14bbc:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   14bbe:	f102 0408 	add.w	r4, r2, #8
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   14bc2:	4605      	mov	r5, r0
   14bc4:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   14bc6:	4620      	mov	r0, r4
   14bc8:	2102      	movs	r1, #2
   14bca:	f017 fa66 	bl	2c09a <net_buf_simple_add>
   14bce:	4603      	mov	r3, r0
	hdr->evt = evt;
   14bd0:	2205      	movs	r2, #5
	hdr->len = len;
   14bd2:	2104      	movs	r1, #4
	hdr->evt = evt;
   14bd4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   14bd6:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   14bd8:	4620      	mov	r0, r4
   14bda:	f017 fa5e 	bl	2c09a <net_buf_simple_add>
	ep->status = 0x00;
   14bde:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
   14be0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
   14be4:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
   14be6:	782b      	ldrb	r3, [r5, #0]
   14be8:	70c3      	strb	r3, [r0, #3]
}
   14bea:	bd70      	pop	{r4, r5, r6, pc}

00014bec <hci_cmd_complete>:
{
   14bec:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14bee:	4b06      	ldr	r3, [pc, #24]	; (14c08 <hci_cmd_complete+0x1c>)
{
   14bf0:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14bf2:	8818      	ldrh	r0, [r3, #0]
{
   14bf4:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14bf6:	f012 fd7b 	bl	276f0 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   14bfa:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   14bfc:	6028      	str	r0, [r5, #0]
}
   14bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   14c02:	3008      	adds	r0, #8
   14c04:	f017 ba49 	b.w	2c09a <net_buf_simple_add>
   14c08:	20009060 	.word	0x20009060

00014c0c <hci_vendor_cmd_handle_common>:
{
   14c0c:	b570      	push	{r4, r5, r6, lr}
   14c0e:	1e43      	subs	r3, r0, #1
   14c10:	b086      	sub	sp, #24
   14c12:	4614      	mov	r4, r2
   14c14:	2b09      	cmp	r3, #9
   14c16:	d806      	bhi.n	14c26 <hci_vendor_cmd_handle_common+0x1a>
   14c18:	e8df f003 	tbb	[pc, r3]
   14c1c:	05382109 	.word	0x05382109
   14c20:	51054605 	.word	0x51054605
   14c24:	7465      	.short	0x7465
	return 0;
   14c26:	f06f 0015 	mvn.w	r0, #21
}
   14c2a:	b006      	add	sp, #24
   14c2c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14c2e:	4620      	mov	r0, r4
   14c30:	210d      	movs	r1, #13
   14c32:	f7ff ffdb 	bl	14bec <hci_cmd_complete>
   14c36:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   14c38:	2202      	movs	r2, #2
	rp->status = 0x00;
   14c3a:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   14c3c:	2404      	movs	r4, #4
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   14c3e:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   14c40:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   14c42:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
   14c44:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   14c46:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   14c48:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   14c4a:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   14c4c:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   14c4e:	7298      	strb	r0, [r3, #10]
   14c50:	72d8      	strb	r0, [r3, #11]
   14c52:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   14c54:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   14c56:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   14c58:	719a      	strb	r2, [r3, #6]
}
   14c5a:	b006      	add	sp, #24
   14c5c:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14c5e:	4620      	mov	r0, r4
   14c60:	2141      	movs	r1, #65	; 0x41
   14c62:	f7ff ffc3 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   14c66:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14c68:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   14c6a:	4621      	mov	r1, r4
	rp->status = 0x00;
   14c6c:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   14c70:	2240      	movs	r2, #64	; 0x40
   14c72:	f011 fec1 	bl	269f8 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   14c76:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   14c78:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   14c7a:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   14c7e:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   14c82:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   14c84:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   14c86:	70ab      	strb	r3, [r5, #2]
}
   14c88:	b006      	add	sp, #24
   14c8a:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14c8c:	4620      	mov	r0, r4
   14c8e:	2109      	movs	r1, #9
   14c90:	f7ff ffac 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   14c94:	2400      	movs	r4, #0
   14c96:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   14c9a:	4621      	mov	r1, r4
   14c9c:	2208      	movs	r2, #8
   14c9e:	f011 feab 	bl	269f8 <memset>
	return 0;
   14ca2:	4620      	mov	r0, r4
}
   14ca4:	b006      	add	sp, #24
   14ca6:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   14ca8:	6889      	ldr	r1, [r1, #8]
   14caa:	2000      	movs	r0, #0
   14cac:	f7ff fd7a 	bl	147a4 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   14cb0:	2000      	movs	r0, #0
   14cb2:	f7ff ff09 	bl	14ac8 <cmd_complete_status>
   14cb6:	6020      	str	r0, [r4, #0]
   14cb8:	2000      	movs	r0, #0
}
   14cba:	b006      	add	sp, #24
   14cbc:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   14cbe:	4e18      	ldr	r6, [pc, #96]	; (14d20 <hci_vendor_cmd_handle_common+0x114>)
   14cc0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14cc2:	ad01      	add	r5, sp, #4
   14cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14cc6:	6833      	ldr	r3, [r6, #0]
   14cc8:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   14cca:	4620      	mov	r0, r4
   14ccc:	2113      	movs	r1, #19
   14cce:	f7ff ff8d 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   14cd2:	2400      	movs	r4, #0
   14cd4:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   14cd8:	2212      	movs	r2, #18
   14cda:	a901      	add	r1, sp, #4
   14cdc:	f011 fe61 	bl	269a2 <memcpy>
	return 0;
   14ce0:	4620      	mov	r0, r4
}
   14ce2:	b006      	add	sp, #24
   14ce4:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   14ce6:	4620      	mov	r0, r4
   14ce8:	2118      	movs	r1, #24
   14cea:	f7ff ff7f 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   14cee:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   14cf0:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   14cf2:	2101      	movs	r1, #1
	rp->status = 0x00;
   14cf4:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   14cf8:	f00a fed2 	bl	1faa0 <hci_vendor_read_static_addr>
   14cfc:	7068      	strb	r0, [r5, #1]
	return 0;
   14cfe:	4620      	mov	r0, r4
}
   14d00:	b006      	add	sp, #24
   14d02:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14d04:	4620      	mov	r0, r4
   14d06:	2121      	movs	r1, #33	; 0x21
   14d08:	f7ff ff70 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   14d0c:	4601      	mov	r1, r0
   14d0e:	2400      	movs	r4, #0
   14d10:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   14d14:	3001      	adds	r0, #1
   14d16:	f00a ff35 	bl	1fb84 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   14d1a:	4620      	mov	r0, r4
}
   14d1c:	b006      	add	sp, #24
   14d1e:	bd70      	pop	{r4, r5, r6, pc}
   14d20:	0002e8a4 	.word	0x0002e8a4

00014d24 <hci_cmd_handle>:
{
   14d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   14d26:	8983      	ldrh	r3, [r0, #12]
{
   14d28:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   14d2a:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
   14d2c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   14d2e:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   14d30:	f240 808b 	bls.w	14e4a <hci_cmd_handle+0x126>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   14d34:	4604      	mov	r4, r0
   14d36:	2103      	movs	r1, #3
   14d38:	3008      	adds	r0, #8
   14d3a:	f017 fa2a 	bl	2c192 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   14d3e:	89a2      	ldrh	r2, [r4, #12]
   14d40:	7883      	ldrb	r3, [r0, #2]
   14d42:	429a      	cmp	r2, r3
   14d44:	f0c0 8081 	bcc.w	14e4a <hci_cmd_handle+0x126>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   14d48:	8803      	ldrh	r3, [r0, #0]
   14d4a:	4d9e      	ldr	r5, [pc, #632]	; (14fc4 <hci_cmd_handle+0x2a0>)
	switch (BT_OGF(_opcode)) {
   14d4c:	f3c3 2285 	ubfx	r2, r3, #10, #6
   14d50:	2a08      	cmp	r2, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   14d52:	b298      	uxth	r0, r3
   14d54:	802b      	strh	r3, [r5, #0]
	ocf = BT_OCF(_opcode);
   14d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
	switch (BT_OGF(_opcode)) {
   14d5a:	d867      	bhi.n	14e2c <hci_cmd_handle+0x108>
   14d5c:	2a00      	cmp	r2, #0
   14d5e:	d06f      	beq.n	14e40 <hci_cmd_handle+0x11c>
   14d60:	3a01      	subs	r2, #1
   14d62:	2a07      	cmp	r2, #7
   14d64:	d86c      	bhi.n	14e40 <hci_cmd_handle+0x11c>
   14d66:	e8df f002 	tbb	[pc, r2]
   14d6a:	6b8f      	.short	0x6b8f
   14d6c:	6b6b5773 	.word	0x6b6b5773
   14d70:	046b      	.short	0x046b
	switch (ocf) {
   14d72:	3b01      	subs	r3, #1
   14d74:	2b4d      	cmp	r3, #77	; 0x4d
   14d76:	d863      	bhi.n	14e40 <hci_cmd_handle+0x11c>
   14d78:	e8df f013 	tbh	[pc, r3, lsl #1]
   14d7c:	014b0158 	.word	0x014b0158
   14d80:	00620182 	.word	0x00620182
   14d84:	016b017b 	.word	0x016b017b
   14d88:	02c50162 	.word	0x02c50162
   14d8c:	01cd02bd 	.word	0x01cd02bd
   14d90:	01ac01bf 	.word	0x01ac01bf
   14d94:	00620062 	.word	0x00620062
   14d98:	019b01a0 	.word	0x019b01a0
   14d9c:	023d0195 	.word	0x023d0195
   14da0:	0062022b 	.word	0x0062022b
   14da4:	03690372 	.word	0x03690372
   14da8:	03490355 	.word	0x03490355
   14dac:	03430062 	.word	0x03430062
   14db0:	0325033b 	.word	0x0325033b
   14db4:	00620062 	.word	0x00620062
   14db8:	03160062 	.word	0x03160062
   14dbc:	0302030a 	.word	0x0302030a
   14dc0:	02e302ec 	.word	0x02e302ec
   14dc4:	00620062 	.word	0x00620062
   14dc8:	02cd02da 	.word	0x02cd02da
   14dcc:	01e50146 	.word	0x01e50146
   14dd0:	027301d4 	.word	0x027301d4
   14dd4:	0264026c 	.word	0x0264026c
   14dd8:	02950243 	.word	0x02950243
   14ddc:	01fe0284 	.word	0x01fe0284
   14de0:	00620062 	.word	0x00620062
   14de4:	00620062 	.word	0x00620062
   14de8:	00620062 	.word	0x00620062
   14dec:	00620062 	.word	0x00620062
   14df0:	00620062 	.word	0x00620062
   14df4:	00620062 	.word	0x00620062
   14df8:	00620062 	.word	0x00620062
   14dfc:	00620062 	.word	0x00620062
   14e00:	00620062 	.word	0x00620062
   14e04:	00620062 	.word	0x00620062
   14e08:	00620062 	.word	0x00620062
   14e0c:	00620062 	.word	0x00620062
   14e10:	006201f1 	.word	0x006201f1
   14e14:	013f0062 	.word	0x013f0062
	switch (ocf) {
   14e18:	3b01      	subs	r3, #1
   14e1a:	2b08      	cmp	r3, #8
   14e1c:	d810      	bhi.n	14e40 <hci_cmd_handle+0x11c>
   14e1e:	e8df f003 	tbb	[pc, r3]
   14e22:	76d5      	.short	0x76d5
   14e24:	0f0f0f67 	.word	0x0f0f0f67
   14e28:	0f0f      	.short	0x0f0f
   14e2a:	5b          	.byte	0x5b
   14e2b:	00          	.byte	0x00
	switch (BT_OGF(_opcode)) {
   14e2c:	2a3f      	cmp	r2, #63	; 0x3f
   14e2e:	d107      	bne.n	14e40 <hci_cmd_handle+0x11c>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   14e30:	4621      	mov	r1, r4
   14e32:	4618      	mov	r0, r3
   14e34:	aa07      	add	r2, sp, #28
   14e36:	f7ff fee9 	bl	14c0c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   14e3a:	3016      	adds	r0, #22
   14e3c:	d14a      	bne.n	14ed4 <hci_cmd_handle+0x1b0>
   14e3e:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   14e40:	2101      	movs	r1, #1
   14e42:	f012 fc67 	bl	27714 <bt_hci_cmd_status_create>
}
   14e46:	b00d      	add	sp, #52	; 0x34
   14e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   14e4a:	2000      	movs	r0, #0
}
   14e4c:	b00d      	add	sp, #52	; 0x34
   14e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   14e50:	2b63      	cmp	r3, #99	; 0x63
   14e52:	f000 8351 	beq.w	154f8 <hci_cmd_handle+0x7d4>
   14e56:	d82a      	bhi.n	14eae <hci_cmd_handle+0x18a>
   14e58:	2b03      	cmp	r3, #3
   14e5a:	f000 832f 	beq.w	154bc <hci_cmd_handle+0x798>
   14e5e:	2b2d      	cmp	r3, #45	; 0x2d
   14e60:	d120      	bne.n	14ea4 <hci_cmd_handle+0x180>
		read_tx_power_level(cmd, evt);
   14e62:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14e64:	2104      	movs	r1, #4
   14e66:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   14e68:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   14e6a:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14e6c:	f7ff febe 	bl	14bec <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   14e70:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14e72:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   14e74:	1cc3      	adds	r3, r0, #3
   14e76:	4632      	mov	r2, r6
   14e78:	2002      	movs	r0, #2
   14e7a:	f7ff fcb3 	bl	147e4 <ll_tx_pwr_lvl_get>
	rp->status = status;
   14e7e:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   14e80:	9807      	ldr	r0, [sp, #28]
   14e82:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   14e86:	e7de      	b.n	14e46 <hci_cmd_handle+0x122>
	switch (ocf) {
   14e88:	2b06      	cmp	r3, #6
   14e8a:	f000 82f9 	beq.w	15480 <hci_cmd_handle+0x75c>
   14e8e:	2b1d      	cmp	r3, #29
   14e90:	d1d6      	bne.n	14e40 <hci_cmd_handle+0x11c>
	handle = sys_le16_to_cpu(cmd->handle);
   14e92:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   14e94:	8818      	ldrh	r0, [r3, #0]
   14e96:	f003 fdab 	bl	189f0 <ll_version_ind_send>
   14e9a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   14e9c:	8828      	ldrh	r0, [r5, #0]
   14e9e:	f012 fc39 	bl	27714 <bt_hci_cmd_status_create>
}
   14ea2:	e7d0      	b.n	14e46 <hci_cmd_handle+0x122>
	switch (ocf) {
   14ea4:	2b01      	cmp	r3, #1
   14ea6:	d1cb      	bne.n	14e40 <hci_cmd_handle+0x11c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   14ea8:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   14eaa:	4b47      	ldr	r3, [pc, #284]	; (14fc8 <hci_cmd_handle+0x2a4>)
   14eac:	e0c0      	b.n	15030 <hci_cmd_handle+0x30c>
	switch (ocf) {
   14eae:	2b7b      	cmp	r3, #123	; 0x7b
   14eb0:	f000 82f0 	beq.w	15494 <hci_cmd_handle+0x770>
   14eb4:	2b7c      	cmp	r3, #124	; 0x7c
   14eb6:	d1c3      	bne.n	14e40 <hci_cmd_handle+0x11c>
		write_auth_payload_timeout(cmd, evt);
   14eb8:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   14eba:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   14ebc:	8859      	ldrh	r1, [r3, #2]
   14ebe:	b2a8      	uxth	r0, r5
   14ec0:	f003 fed0 	bl	18c64 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   14ec4:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14ec6:	2103      	movs	r1, #3
   14ec8:	a807      	add	r0, sp, #28
   14eca:	f7ff fe8f 	bl	14bec <hci_cmd_complete>
	rp->status = status;
   14ece:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   14ed0:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   14ed4:	9807      	ldr	r0, [sp, #28]
   14ed6:	e7b6      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14ed8:	2107      	movs	r1, #7
   14eda:	a807      	add	r0, sp, #28
   14edc:	f7ff fe86 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   14ee0:	4601      	mov	r1, r0
   14ee2:	2000      	movs	r0, #0
   14ee4:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   14ee8:	f7ff fc3e 	bl	14768 <ll_addr_get>
	if (err == -EINVAL) {
   14eec:	9807      	ldr	r0, [sp, #28]
   14eee:	e7aa      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14ef0:	2109      	movs	r1, #9
   14ef2:	a807      	add	r0, sp, #28
   14ef4:	f7ff fe7a 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   14ef8:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14efa:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   14efc:	2208      	movs	r2, #8
	rp->status = 0x00;
   14efe:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   14f02:	f011 fd79 	bl	269f8 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   14f06:	2360      	movs	r3, #96	; 0x60
   14f08:	9807      	ldr	r0, [sp, #28]
   14f0a:	7163      	strb	r3, [r4, #5]
}
   14f0c:	e79b      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14f0e:	2141      	movs	r1, #65	; 0x41
   14f10:	a807      	add	r0, sp, #28
   14f12:	f7ff fe6b 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   14f16:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14f18:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   14f1a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   14f1c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   14f20:	f011 fd6a 	bl	269f8 <memset>
	rp->commands[14] |= BIT(3) | BIT(5);
   14f24:	7be3      	ldrb	r3, [r4, #15]
	rp->commands[0] |= BIT(5);
   14f26:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   14f28:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
   14f2a:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
   14f2c:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[22] |= BIT(2);
   14f2e:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   14f30:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
   14f32:	f894 c01b 	ldrb.w	ip, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   14f36:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   14f3a:	73e3      	strb	r3, [r4, #15]
	rp->commands[27] |= BIT(0) | BIT(1);
   14f3c:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[0] |= BIT(5);
   14f3e:	f047 0720 	orr.w	r7, r7, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   14f42:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   14f46:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[15] |= BIT(1);
   14f4a:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[22] |= BIT(2);
   14f4e:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   14f52:	f062 0208 	orn	r2, r2, #8
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   14f56:	f063 0308 	orn	r3, r3, #8
	rp->commands[0] |= BIT(5);
   14f5a:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   14f5c:	71a6      	strb	r6, [r4, #6]
	rp->commands[28] |= BIT(3);
   14f5e:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   14f60:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   14f64:	72e5      	strb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
   14f66:	7420      	strb	r0, [r4, #16]
	rp->commands[33] |= BIT(4) | BIT(5);
   14f68:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   14f6c:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[22] |= BIT(2);
   14f70:	75e1      	strb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   14f72:	76a2      	strb	r2, [r4, #26]
	rp->commands[35] |= BIT(3);
   14f74:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   14f78:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   14f7c:	7723      	strb	r3, [r4, #28]
	rp->commands[38] |= BIT(7);
   14f7e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   14f82:	f060 0006 	orn	r0, r0, #6
	rp->commands[26] |= BIT(2) | BIT(3);
   14f86:	f06c 0c30 	orn	ip, ip, #48	; 0x30
	rp->commands[28] |= BIT(1) | BIT(2);
   14f8a:	f047 070e 	orr.w	r7, r7, #14
	rp->commands[32] |= BIT(4) | BIT(5);
   14f8e:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
   14f92:	f065 050f 	orn	r5, r5, #15
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   14f96:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   14f9a:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   14f9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(2) | BIT(3);
   14fa2:	f884 c01b 	strb.w	ip, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
   14fa6:	7767      	strb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   14fa8:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
   14fac:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   14fb0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   14fb4:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   14fb8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   14fbc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   14fc0:	9807      	ldr	r0, [sp, #28]
}
   14fc2:	e740      	b.n	14e46 <hci_cmd_handle+0x122>
   14fc4:	20009060 	.word	0x20009060
   14fc8:	20000290 	.word	0x20000290
	rp = hci_cmd_complete(evt, sizeof(*rp));
   14fcc:	2109      	movs	r1, #9
   14fce:	a807      	add	r0, sp, #28
   14fd0:	f7ff fe0c 	bl	14bec <hci_cmd_complete>
   14fd4:	4603      	mov	r3, r0
	rp->status = 0x00;
   14fd6:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   14fd8:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   14fda:	f04f 31ff 	mov.w	r1, #4294967295
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   14fde:	f06f 050e 	mvn.w	r5, #14
   14fe2:	2405      	movs	r4, #5
	rp->status = 0x00;
   14fe4:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   14fe6:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   14fe8:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   14fea:	715d      	strb	r5, [r3, #5]
   14fec:	9807      	ldr	r0, [sp, #28]
   14fee:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   14ff0:	709a      	strb	r2, [r3, #2]
   14ff2:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   14ff4:	71d9      	strb	r1, [r3, #7]
   14ff6:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   14ff8:	e725      	b.n	14e46 <hci_cmd_handle+0x122>
		le_set_privacy_mode(cmd, evt);
   14ffa:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   14ffc:	79c1      	ldrb	r1, [r0, #7]
   14ffe:	f007 f98d 	bl	1c31c <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
   15002:	f7ff fd61 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15006:	e71e      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_rl_clear();
   15008:	f006 fcaa 	bl	1b960 <ll_rl_clear>
	*evt = cmd_complete_status(status);
   1500c:	f7ff fd5c 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15010:	e719      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15012:	2104      	movs	r1, #4
   15014:	a807      	add	r0, sp, #28
   15016:	f7ff fde9 	bl	14bec <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1501a:	2203      	movs	r2, #3
	rp->status = 0x00;
   1501c:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1501e:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   15020:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   15022:	221b      	movs	r2, #27
   15024:	7042      	strb	r2, [r0, #1]
   15026:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   15028:	9807      	ldr	r0, [sp, #28]
   1502a:	e70c      	b.n	14e46 <hci_cmd_handle+0x122>
   1502c:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   1502e:	4bbd      	ldr	r3, [pc, #756]	; (15324 <hci_cmd_handle+0x600>)
   15030:	6811      	ldr	r1, [r2, #0]
   15032:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   15034:	605a      	str	r2, [r3, #4]
   15036:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
   15038:	2000      	movs	r0, #0
   1503a:	f7ff fd45 	bl	14ac8 <cmd_complete_status>
}
   1503e:	e702      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15040:	2102      	movs	r1, #2
   15042:	a807      	add	r0, sp, #28
   15044:	f7ff fdd2 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   15048:	2300      	movs	r3, #0
   1504a:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   1504c:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   1504e:	9807      	ldr	r0, [sp, #28]
   15050:	e6f9      	b.n	14e46 <hci_cmd_handle+0x122>
		le_set_adv_param(cmd, evt);
   15052:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   15054:	7ba5      	ldrb	r5, [r4, #14]
   15056:	79a3      	ldrb	r3, [r4, #6]
   15058:	7962      	ldrb	r2, [r4, #5]
   1505a:	7921      	ldrb	r1, [r4, #4]
   1505c:	8820      	ldrh	r0, [r4, #0]
   1505e:	9502      	str	r5, [sp, #8]
   15060:	7b65      	ldrb	r5, [r4, #13]
   15062:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   15064:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   15066:	9400      	str	r4, [sp, #0]
   15068:	f002 fbd6 	bl	17818 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
   1506c:	f7ff fd2c 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15070:	e6e9      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   15072:	68a1      	ldr	r1, [r4, #8]
   15074:	2001      	movs	r0, #1
   15076:	f7ff fb95 	bl	147a4 <ll_addr_set>
	*evt = cmd_complete_status(status);
   1507a:	f7ff fd25 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   1507e:	e6e2      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15080:	2109      	movs	r1, #9
   15082:	a807      	add	r0, sp, #28
   15084:	f7ff fdb2 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   15088:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1508a:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1508c:	2208      	movs	r2, #8
	rp->status = 0x00;
   1508e:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   15092:	f011 fcb1 	bl	269f8 <memset>
	dst[0] = val;
   15096:	21ff      	movs	r1, #255	; 0xff
	dst[1] = val >> 8;
   15098:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
   1509a:	2301      	movs	r3, #1
	dst[0] = val;
   1509c:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   1509e:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   150a0:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   150a2:	9807      	ldr	r0, [sp, #28]
   150a4:	e6cf      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_wl_add(&cmd->addr);
   150a6:	68a0      	ldr	r0, [r4, #8]
   150a8:	f006 ff34 	bl	1bf14 <ll_wl_add>
	*evt = cmd_complete_status(status);
   150ac:	f7ff fd0c 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   150b0:	e6c9      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_wl_clear();
   150b2:	f006 fba7 	bl	1b804 <ll_wl_clear>
	*evt = cmd_complete_status(status);
   150b6:	f7ff fd07 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   150ba:	e6c4      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   150bc:	2102      	movs	r1, #2
   150be:	a807      	add	r0, sp, #28
   150c0:	f7ff fd94 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   150c4:	2300      	movs	r3, #0
   150c6:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   150c8:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   150ca:	f006 fb99 	bl	1b800 <ll_wl_size_get>
   150ce:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   150d0:	9807      	ldr	r0, [sp, #28]
   150d2:	e6b8      	b.n	14e46 <hci_cmd_handle+0x122>
		le_set_scan_enable(cmd, evt);
   150d4:	68a3      	ldr	r3, [r4, #8]
	if (cmd->enable && cmd->filter_dup) {
   150d6:	7818      	ldrb	r0, [r3, #0]
   150d8:	2800      	cmp	r0, #0
   150da:	f000 8210 	beq.w	154fe <hci_cmd_handle+0x7da>
   150de:	785b      	ldrb	r3, [r3, #1]
   150e0:	2b00      	cmp	r3, #0
   150e2:	f000 820c 	beq.w	154fe <hci_cmd_handle+0x7da>
		dup_count = 0;
   150e6:	4990      	ldr	r1, [pc, #576]	; (15328 <hci_cmd_handle+0x604>)
		dup_curr = 0U;
   150e8:	4a90      	ldr	r2, [pc, #576]	; (1532c <hci_cmd_handle+0x608>)
		dup_count = 0;
   150ea:	2300      	movs	r3, #0
   150ec:	600b      	str	r3, [r1, #0]
		dup_curr = 0U;
   150ee:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   150f0:	f002 feb8 	bl	17e64 <ll_scan_enable>
	*evt = cmd_complete_status(status);
   150f4:	f7ff fce8 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   150f8:	e6a5      	b.n	14e46 <hci_cmd_handle+0x122>
		le_set_scan_param(cmd, evt);
   150fa:	68a4      	ldr	r4, [r4, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   150fc:	7963      	ldrb	r3, [r4, #5]
   150fe:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   15102:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   15106:	7820      	ldrb	r0, [r4, #0]
   15108:	79a4      	ldrb	r4, [r4, #6]
   1510a:	9400      	str	r4, [sp, #0]
   1510c:	f7eb ff38 	bl	f80 <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   15110:	f7ff fcda 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15114:	e697      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_adv_enable(cmd->enable);
   15116:	68a3      	ldr	r3, [r4, #8]
   15118:	7818      	ldrb	r0, [r3, #0]
   1511a:	f7eb fc41 	bl	9a0 <ll_adv_enable>
	*evt = cmd_complete_status(status);
   1511e:	f7ff fcd3 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15122:	e690      	b.n	14e46 <hci_cmd_handle+0x122>
	memcpy(dst, src, sizeof(*dst));
   15124:	68a1      	ldr	r1, [r4, #8]
   15126:	2207      	movs	r2, #7
   15128:	a808      	add	r0, sp, #32
   1512a:	f011 fc3a 	bl	269a2 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1512e:	2107      	movs	r1, #7
   15130:	a807      	add	r0, sp, #28
   15132:	f7ff fd5b 	bl	14bec <hci_cmd_complete>
   15136:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   15138:	1c61      	adds	r1, r4, #1
   1513a:	a808      	add	r0, sp, #32
   1513c:	f007 f8b0 	bl	1c2a0 <ll_rl_crpa_get>
   15140:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   15142:	9807      	ldr	r0, [sp, #28]
   15144:	e67f      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15146:	2102      	movs	r1, #2
   15148:	a807      	add	r0, sp, #28
   1514a:	f7ff fd4f 	bl	14bec <hci_cmd_complete>
   1514e:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   15150:	f006 fc04 	bl	1b95c <ll_rl_size_get>
	rp->status = 0x00;
   15154:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   15156:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   15158:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   1515a:	9807      	ldr	r0, [sp, #28]
   1515c:	e673      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1515e:	2103      	movs	r1, #3
   15160:	a807      	add	r0, sp, #28
   15162:	f7ff fd43 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   15166:	4601      	mov	r1, r0
   15168:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1516a:	3001      	adds	r0, #1
	rp->status = 0x00;
   1516c:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   15170:	f7ff fb48 	bl	14804 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   15174:	9807      	ldr	r0, [sp, #28]
   15176:	e666      	b.n	14e46 <hci_cmd_handle+0x122>
		le_set_phy(cmd, evt);
   15178:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1517a:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   1517c:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   1517e:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   15180:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   15184:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
   15186:	bf44      	itt	mi
   15188:	f041 0107 	orrmi.w	r1, r1, #7
   1518c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1518e:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   15192:	7913      	ldrb	r3, [r2, #4]
   15194:	bf1c      	itt	ne
   15196:	f043 0307 	orrne.w	r3, r3, #7
   1519a:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1519c:	ea41 0203 	orr.w	r2, r1, r3
   151a0:	f012 0ff8 	tst.w	r2, #248	; 0xf8
   151a4:	f040 81b4 	bne.w	15510 <hci_cmd_handle+0x7ec>
	if (!(cmd->tx_phys & 0x07) ||
   151a8:	074f      	lsls	r7, r1, #29
   151aa:	f000 81ad 	beq.w	15508 <hci_cmd_handle+0x7e4>
   151ae:	075a      	lsls	r2, r3, #29
   151b0:	f000 81aa 	beq.w	15508 <hci_cmd_handle+0x7e4>
	if (phy_opts & 0x03) {
   151b4:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   151b8:	bf1c      	itt	ne
   151ba:	f104 34ff 	addne.w	r4, r4, #4294967295
		phy_opts &= 1;
   151be:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   151c2:	4630      	mov	r0, r6
   151c4:	f003 fcd6 	bl	18b74 <ll_phy_req_send>
   151c8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   151ca:	8828      	ldrh	r0, [r5, #0]
   151cc:	f012 faa2 	bl	27714 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   151d0:	e639      	b.n	14e46 <hci_cmd_handle+0x122>
		le_conn_update(cmd, evt);
   151d2:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   151d4:	8911      	ldrh	r1, [r2, #8]
   151d6:	8853      	ldrh	r3, [r2, #2]
   151d8:	8810      	ldrh	r0, [r2, #0]
   151da:	9102      	str	r1, [sp, #8]
   151dc:	88d1      	ldrh	r1, [r2, #6]
   151de:	9101      	str	r1, [sp, #4]
   151e0:	8892      	ldrh	r2, [r2, #4]
   151e2:	9200      	str	r2, [sp, #0]
   151e4:	2200      	movs	r2, #0
   151e6:	4611      	mov	r1, r2
   151e8:	f003 fb06 	bl	187f8 <ll_conn_update>
   151ec:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   151ee:	8828      	ldrh	r0, [r5, #0]
   151f0:	f012 fa90 	bl	27714 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   151f4:	e627      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_wl_remove(&cmd->addr);
   151f6:	68a0      	ldr	r0, [r4, #8]
   151f8:	f006 fb32 	bl	1b860 <ll_wl_remove>
	*evt = cmd_complete_status(status);
   151fc:	f7ff fc64 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15200:	e621      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15202:	2109      	movs	r1, #9
   15204:	a807      	add	r0, sp, #28
   15206:	f7ff fcf1 	bl	14bec <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1520a:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1520c:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1520e:	f10d 021a 	add.w	r2, sp, #26
   15212:	f10d 0016 	add.w	r0, sp, #22
   15216:	a906      	add	r1, sp, #24
   15218:	f003 fc7a 	bl	18b10 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1521c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   15220:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   15224:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   15228:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   1522c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   15230:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   15234:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   15236:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   1523a:	7022      	strb	r2, [r4, #0]
   1523c:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1523e:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   15242:	e600      	b.n	14e46 <hci_cmd_handle+0x122>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   15244:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   15246:	8818      	ldrh	r0, [r3, #0]
   15248:	f006 fbec 	bl	1ba24 <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
   1524c:	2000      	movs	r0, #0
   1524e:	f7ff fc3b 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15252:	e5f8      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_rl_enable(cmd->enable);
   15254:	68a3      	ldr	r3, [r4, #8]
   15256:	7818      	ldrb	r0, [r3, #0]
   15258:	f006 fbc8 	bl	1b9ec <ll_rl_enable>
	*evt = cmd_complete_status(status);
   1525c:	f7ff fc34 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15260:	e5f1      	b.n	14e46 <hci_cmd_handle+0x122>
   15262:	68a1      	ldr	r1, [r4, #8]
   15264:	2207      	movs	r2, #7
   15266:	a808      	add	r0, sp, #32
   15268:	f011 fb9b 	bl	269a2 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1526c:	2107      	movs	r1, #7
   1526e:	a807      	add	r0, sp, #28
   15270:	f7ff fcbc 	bl	14bec <hci_cmd_complete>
   15274:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   15276:	1c61      	adds	r1, r4, #1
   15278:	a808      	add	r0, sp, #32
   1527a:	f007 f833 	bl	1c2e4 <ll_rl_lrpa_get>
   1527e:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   15280:	9807      	ldr	r0, [sp, #28]
   15282:	e5e0      	b.n	14e46 <hci_cmd_handle+0x122>
		le_set_default_phy(cmd, evt);
   15284:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   15286:	781a      	ldrb	r2, [r3, #0]
   15288:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1528a:	bf4a      	itet	mi
   1528c:	2007      	movmi	r0, #7
   1528e:	7858      	ldrbpl	r0, [r3, #1]
   15290:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   15292:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   15294:	bf4a      	itet	mi
   15296:	2107      	movmi	r1, #7
   15298:	7899      	ldrbpl	r1, [r3, #2]
   1529a:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1529c:	f003 fc60 	bl	18b60 <ll_phy_default_set>
	*evt = cmd_complete_status(status);
   152a0:	f7ff fc12 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   152a4:	e5cf      	b.n	14e46 <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
   152a6:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   152a8:	2105      	movs	r1, #5
   152aa:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   152ac:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   152ae:	f7ff fc9d 	bl	14bec <hci_cmd_complete>
   152b2:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   152b4:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   152b6:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   152b8:	1ce1      	adds	r1, r4, #3
   152ba:	f003 fc33 	bl	18b24 <ll_phy_get>
   152be:	78e2      	ldrb	r2, [r4, #3]
   152c0:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   152c2:	7020      	strb	r0, [r4, #0]
   152c4:	2a00      	cmp	r2, #0
   152c6:	fa92 f2a2 	rbit	r2, r2
   152ca:	fab2 f282 	clz	r2, r2
   152ce:	bf08      	it	eq
   152d0:	f04f 32ff 	moveq.w	r2, #4294967295
   152d4:	2b00      	cmp	r3, #0
   152d6:	fa93 f3a3 	rbit	r3, r3
   152da:	fab3 f383 	clz	r3, r3
   152de:	f102 0201 	add.w	r2, r2, #1
   152e2:	bf08      	it	eq
   152e4:	f04f 33ff 	moveq.w	r3, #4294967295
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   152e8:	70e2      	strb	r2, [r4, #3]
   152ea:	3301      	adds	r3, #1
   152ec:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   152ee:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   152f2:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   152f4:	e5a7      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   152f6:	68a1      	ldr	r1, [r4, #8]
   152f8:	f811 0b01 	ldrb.w	r0, [r1], #1
   152fc:	f002 fcd0 	bl	17ca0 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
   15300:	f7ff fbe2 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15304:	e59f      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   15306:	68a1      	ldr	r1, [r4, #8]
   15308:	f811 0b01 	ldrb.w	r0, [r1], #1
   1530c:	f002 fc74 	bl	17bf8 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
   15310:	f7ff fbda 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15314:	e597      	b.n	14e46 <hci_cmd_handle+0x122>
	status = ll_rl_remove(&cmd->peer_id_addr);
   15316:	68a0      	ldr	r0, [r4, #8]
   15318:	f006 ff1c 	bl	1c154 <ll_rl_remove>
	*evt = cmd_complete_status(status);
   1531c:	f7ff fbd4 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15320:	e591      	b.n	14e46 <hci_cmd_handle+0x122>
   15322:	bf00      	nop
   15324:	20000298 	.word	0x20000298
   15328:	20002c74 	.word	0x20002c74
   1532c:	20002c78 	.word	0x20002c78
		le_add_dev_to_rl(cmd, evt);
   15330:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   15332:	f100 0217 	add.w	r2, r0, #23
   15336:	1dc1      	adds	r1, r0, #7
   15338:	f006 fe4e 	bl	1bfd8 <ll_rl_add>
	*evt = cmd_complete_status(status);
   1533c:	f7ff fbc4 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15340:	e581      	b.n	14e46 <hci_cmd_handle+0x122>
		le_write_default_data_len(cmd, evt);
   15342:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   15344:	8859      	ldrh	r1, [r3, #2]
   15346:	8818      	ldrh	r0, [r3, #0]
   15348:	f003 fbd8 	bl	18afc <ll_length_default_set>
	*evt = cmd_complete_status(status);
   1534c:	b2c0      	uxtb	r0, r0
   1534e:	f7ff fbbb 	bl	14ac8 <cmd_complete_status>
	if (err == -EINVAL) {
   15352:	e578      	b.n	14e46 <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15354:	2105      	movs	r1, #5
   15356:	a807      	add	r0, sp, #28
   15358:	f7ff fc48 	bl	14bec <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   1535c:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1535e:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   15360:	f10d 001a 	add.w	r0, sp, #26
   15364:	f003 fbbe 	bl	18ae4 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   15368:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1536c:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   15370:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   15372:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   15376:	7022      	strb	r2, [r4, #0]
   15378:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1537a:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   1537e:	e562      	b.n	14e46 <hci_cmd_handle+0x122>
		le_set_data_len(cmd, evt);
   15380:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   15382:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   15384:	889a      	ldrh	r2, [r3, #4]
   15386:	8859      	ldrh	r1, [r3, #2]
   15388:	b2a8      	uxth	r0, r5
   1538a:	f003 fb57 	bl	18a3c <ll_length_req_send>
   1538e:	e599      	b.n	14ec4 <hci_cmd_handle+0x1a0>
		le_conn_param_req_neg_reply(cmd, evt);
   15390:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   15392:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   15394:	789a      	ldrb	r2, [r3, #2]
   15396:	2300      	movs	r3, #0
   15398:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1539c:	b2a8      	uxth	r0, r5
   1539e:	9300      	str	r3, [sp, #0]
   153a0:	2102      	movs	r1, #2
   153a2:	f003 fa29 	bl	187f8 <ll_conn_update>
   153a6:	e58d      	b.n	14ec4 <hci_cmd_handle+0x1a0>
		le_conn_param_req_reply(cmd, evt);
   153a8:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   153aa:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   153ac:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   153ae:	8853      	ldrh	r3, [r2, #2]
   153b0:	9102      	str	r1, [sp, #8]
   153b2:	88d1      	ldrh	r1, [r2, #6]
   153b4:	9101      	str	r1, [sp, #4]
   153b6:	8892      	ldrh	r2, [r2, #4]
   153b8:	9200      	str	r2, [sp, #0]
   153ba:	b2a8      	uxth	r0, r5
   153bc:	2200      	movs	r2, #0
   153be:	2102      	movs	r1, #2
   153c0:	f003 fa1a 	bl	187f8 <ll_conn_update>
   153c4:	e57e      	b.n	14ec4 <hci_cmd_handle+0x1a0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   153c6:	2109      	movs	r1, #9
   153c8:	a807      	add	r0, sp, #28
   153ca:	f7ff fc0f 	bl	14bec <hci_cmd_complete>
	dst[0] = val;
   153ce:	24bf      	movs	r4, #191	; 0xbf
	rp->status = 0x00;
   153d0:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   153d2:	21ff      	movs	r1, #255	; 0xff
	dst[0] = val;
   153d4:	2230      	movs	r2, #48	; 0x30
   153d6:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   153d8:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   153da:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   153dc:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   153de:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   153e0:	2201      	movs	r2, #1
   153e2:	7003      	strb	r3, [r0, #0]
   153e4:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   153e6:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   153e8:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   153ea:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   153ec:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   153ee:	9807      	ldr	r0, [sp, #28]
   153f0:	e529      	b.n	14e46 <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
   153f2:	68a3      	ldr	r3, [r4, #8]
   153f4:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   153f6:	2200      	movs	r2, #0
   153f8:	b2a8      	uxth	r0, r5
   153fa:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   153fc:	f006 f844 	bl	1b488 <ll_start_enc_req_send>
   15400:	e560      	b.n	14ec4 <hci_cmd_handle+0x1a0>
	handle = sys_le16_to_cpu(cmd->handle);
   15402:	68a2      	ldr	r2, [r4, #8]
   15404:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   15408:	2100      	movs	r1, #0
   1540a:	b2a8      	uxth	r0, r5
   1540c:	e7f6      	b.n	153fc <hci_cmd_handle+0x6d8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1540e:	2109      	movs	r1, #9
   15410:	a807      	add	r0, sp, #28
   15412:	f7ff fbeb 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   15416:	2300      	movs	r3, #0
   15418:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1541c:	2108      	movs	r1, #8
   1541e:	f007 fbfb 	bl	1cc18 <lll_csrand_get>
	if (err == -EINVAL) {
   15422:	9807      	ldr	r0, [sp, #28]
   15424:	e50f      	b.n	14e46 <hci_cmd_handle+0x122>
		le_encrypt(cmd, evt);
   15426:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   15428:	aa08      	add	r2, sp, #32
   1542a:	f100 0110 	add.w	r1, r0, #16
   1542e:	2300      	movs	r3, #0
   15430:	f009 fc72 	bl	1ed18 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15434:	2111      	movs	r1, #17
   15436:	a807      	add	r0, sp, #28
   15438:	f7ff fbd8 	bl	14bec <hci_cmd_complete>
	rp->status = 0x00;
   1543c:	2300      	movs	r3, #0
   1543e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   15442:	a908      	add	r1, sp, #32
   15444:	2210      	movs	r2, #16
   15446:	f011 faac 	bl	269a2 <memcpy>
	if (err == -EINVAL) {
   1544a:	9807      	ldr	r0, [sp, #28]
   1544c:	e4fb      	b.n	14e46 <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
   1544e:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   15450:	8818      	ldrh	r0, [r3, #0]
   15452:	f003 faa7 	bl	189a4 <ll_feature_req_send>
   15456:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   15458:	8828      	ldrh	r0, [r5, #0]
   1545a:	f012 f95b 	bl	27714 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1545e:	e4f2      	b.n	14e46 <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
   15460:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15462:	2108      	movs	r1, #8
   15464:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   15466:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   15468:	f7ff fbc0 	bl	14bec <hci_cmd_complete>
   1546c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1546e:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   15470:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   15472:	f003 fa53 	bl	1891c <ll_chm_get>
	rp->status = status;
   15476:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   15478:	9807      	ldr	r0, [sp, #28]
   1547a:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   1547e:	e4e2      	b.n	14e46 <hci_cmd_handle+0x122>
		disconnect(cmd, evt);
   15480:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   15482:	7899      	ldrb	r1, [r3, #2]
   15484:	8818      	ldrh	r0, [r3, #0]
   15486:	f003 fa69 	bl	1895c <ll_terminate_ind_send>
   1548a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1548c:	8828      	ldrh	r0, [r5, #0]
   1548e:	f012 f941 	bl	27714 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   15492:	e4d8      	b.n	14e46 <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
   15494:	68a3      	ldr	r3, [r4, #8]
   15496:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   15498:	a908      	add	r1, sp, #32
   1549a:	b2a8      	uxth	r0, r5
   1549c:	f003 fbbe 	bl	18c1c <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   154a0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   154a2:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   154a4:	a807      	add	r0, sp, #28
   154a6:	f7ff fba1 	bl	14bec <hci_cmd_complete>
	rp->status = status;
   154aa:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   154ac:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   154b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   154b4:	f8a0 3003 	strh.w	r3, [r0, #3]
   154b8:	9807      	ldr	r0, [sp, #28]
}
   154ba:	e4c4      	b.n	14e46 <hci_cmd_handle+0x122>
	dup_count = -1;
   154bc:	4816      	ldr	r0, [pc, #88]	; (15518 <hci_cmd_handle+0x7f4>)
	event_mask = DEFAULT_EVENT_MASK;
   154be:	4917      	ldr	r1, [pc, #92]	; (1551c <hci_cmd_handle+0x7f8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   154c0:	4a17      	ldr	r2, [pc, #92]	; (15520 <hci_cmd_handle+0x7fc>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   154c2:	4b18      	ldr	r3, [pc, #96]	; (15524 <hci_cmd_handle+0x800>)
	dup_count = -1;
   154c4:	f04f 34ff 	mov.w	r4, #4294967295
   154c8:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   154ca:	f641 75ff 	movw	r5, #8191	; 0x1fff
   154ce:	f04f 34ff 	mov.w	r4, #4294967295
   154d2:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   154d6:	201f      	movs	r0, #31
   154d8:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   154da:	2400      	movs	r4, #0
   154dc:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   154de:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   154e2:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
   154e6:	f001 f91d 	bl	16724 <ll_reset>
		*evt = cmd_complete_status(0x00);
   154ea:	2000      	movs	r0, #0
   154ec:	f7ff faec 	bl	14ac8 <cmd_complete_status>
	conn_count = 0U;
   154f0:	4b0d      	ldr	r3, [pc, #52]	; (15528 <hci_cmd_handle+0x804>)
   154f2:	2200      	movs	r2, #0
   154f4:	601a      	str	r2, [r3, #0]
}
   154f6:	e4a6      	b.n	14e46 <hci_cmd_handle+0x122>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   154f8:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   154fa:	4b09      	ldr	r3, [pc, #36]	; (15520 <hci_cmd_handle+0x7fc>)
   154fc:	e598      	b.n	15030 <hci_cmd_handle+0x30c>
		dup_count = -1;
   154fe:	4b06      	ldr	r3, [pc, #24]	; (15518 <hci_cmd_handle+0x7f4>)
   15500:	f04f 32ff 	mov.w	r2, #4294967295
   15504:	601a      	str	r2, [r3, #0]
   15506:	e5f3      	b.n	150f0 <hci_cmd_handle+0x3cc>
	return bt_hci_cmd_status_create(_opcode, status);
   15508:	2112      	movs	r1, #18
   1550a:	f012 f903 	bl	27714 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1550e:	e49a      	b.n	14e46 <hci_cmd_handle+0x122>
	return bt_hci_cmd_status_create(_opcode, status);
   15510:	2111      	movs	r1, #17
   15512:	f012 f8ff 	bl	27714 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   15516:	e496      	b.n	14e46 <hci_cmd_handle+0x122>
   15518:	20002c74 	.word	0x20002c74
   1551c:	20000290 	.word	0x20000290
   15520:	200019b0 	.word	0x200019b0
   15524:	20000298 	.word	0x20000298
   15528:	20002c70 	.word	0x20002c70

0001552c <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   1552c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1552e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   15530:	2b03      	cmp	r3, #3
	*evt = NULL;
   15532:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   15534:	d941      	bls.n	155ba <hci_acl_handle+0x8e>
{
   15536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1553a:	4605      	mov	r5, r0
   1553c:	460e      	mov	r6, r1
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   1553e:	3008      	adds	r0, #8
   15540:	2104      	movs	r1, #4
   15542:	f016 fe26 	bl	2c192 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   15546:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   15548:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1554a:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   1554e:	42bb      	cmp	r3, r7
   15550:	d30a      	bcc.n	15568 <hci_acl_handle+0x3c>
	node_tx = ll_tx_mem_acquire();
   15552:	f003 f8fb 	bl	1874c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   15556:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   1555a:	4604      	mov	r4, r0
   1555c:	b318      	cbz	r0, 155a6 <hci_acl_handle+0x7a>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1555e:	089a      	lsrs	r2, r3, #2
   15560:	d102      	bne.n	15568 <hci_acl_handle+0x3c>
	switch (bt_acl_flags_pb(flags)) {
   15562:	b1d3      	cbz	r3, 1559a <hci_acl_handle+0x6e>
   15564:	2b01      	cmp	r3, #1
   15566:	d003      	beq.n	15570 <hci_acl_handle+0x44>
		return -EINVAL;
   15568:	f06f 0015 	mvn.w	r0, #21
}
   1556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   15570:	7902      	ldrb	r2, [r0, #4]
   15572:	f363 0201 	bfi	r2, r3, #0, #2
   15576:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   15578:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1557a:	68a9      	ldr	r1, [r5, #8]
   1557c:	463a      	mov	r2, r7
   1557e:	1de0      	adds	r0, r4, #7
   15580:	f011 fa0f 	bl	269a2 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   15584:	4621      	mov	r1, r4
   15586:	f3c8 000b 	ubfx	r0, r8, #0, #12
   1558a:	f003 f8eb 	bl	18764 <ll_tx_mem_enqueue>
   1558e:	2800      	cmp	r0, #0
   15590:	d0ec      	beq.n	1556c <hci_acl_handle+0x40>
		ll_tx_mem_release(node_tx);
   15592:	4620      	mov	r0, r4
   15594:	f003 f8e0 	bl	18758 <ll_tx_mem_release>
   15598:	e7e6      	b.n	15568 <hci_acl_handle+0x3c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1559a:	7903      	ldrb	r3, [r0, #4]
   1559c:	2202      	movs	r2, #2
   1559e:	f362 0301 	bfi	r3, r2, #0, #2
   155a2:	7103      	strb	r3, [r0, #4]
		break;
   155a4:	e7e8      	b.n	15578 <hci_acl_handle+0x4c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   155a6:	4b13      	ldr	r3, [pc, #76]	; (155f4 <hci_acl_handle+0xc8>)
   155a8:	6819      	ldr	r1, [r3, #0]
   155aa:	4603      	mov	r3, r0
   155ac:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   155b0:	4313      	orrs	r3, r2
   155b2:	d105      	bne.n	155c0 <hci_acl_handle+0x94>
		return -ENOBUFS;
   155b4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   155b8:	e7d8      	b.n	1556c <hci_acl_handle+0x40>
		return -EINVAL;
   155ba:	f06f 0015 	mvn.w	r0, #21
}
   155be:	4770      	bx	lr
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   155c0:	f04f 33ff 	mov.w	r3, #4294967295
   155c4:	f04f 32ff 	mov.w	r2, #4294967295
   155c8:	2001      	movs	r0, #1
   155ca:	f7f3 fc35 	bl	8e38 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   155ce:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   155d0:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   155d2:	3008      	adds	r0, #8
   155d4:	f016 fd61 	bl	2c09a <net_buf_simple_add>
	hdr->len = len;
   155d8:	2401      	movs	r4, #1
	hdr->evt = evt;
   155da:	221a      	movs	r2, #26
   155dc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   155de:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   155e0:	6830      	ldr	r0, [r6, #0]
   155e2:	4621      	mov	r1, r4
   155e4:	3008      	adds	r0, #8
   155e6:	f016 fd58 	bl	2c09a <net_buf_simple_add>
   155ea:	4603      	mov	r3, r0
		return -ENOBUFS;
   155ec:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   155f0:	701c      	strb	r4, [r3, #0]
   155f2:	e7bb      	b.n	1556c <hci_acl_handle+0x40>
   155f4:	20000290 	.word	0x20000290

000155f8 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   155f8:	4b06      	ldr	r3, [pc, #24]	; (15614 <hci_disconn_complete_encode+0x1c>)
   155fa:	681b      	ldr	r3, [r3, #0]
{
   155fc:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   155fe:	f003 0410 	and.w	r4, r3, #16
   15602:	2500      	movs	r5, #0
   15604:	ea54 0305 	orrs.w	r3, r4, r5
   15608:	d101      	bne.n	1560e <hci_disconn_complete_encode+0x16>
}
   1560a:	bc30      	pop	{r4, r5}
   1560c:	4770      	bx	lr
   1560e:	bc30      	pop	{r4, r5}
   15610:	f7ff bad4 	b.w	14bbc <hci_disconn_complete_encode.part.0>
   15614:	20000290 	.word	0x20000290

00015618 <hci_disconn_complete_process>:
	conn_count--;
   15618:	4a02      	ldr	r2, [pc, #8]	; (15624 <hci_disconn_complete_process+0xc>)
   1561a:	6813      	ldr	r3, [r2, #0]
   1561c:	3b01      	subs	r3, #1
   1561e:	6013      	str	r3, [r2, #0]
}
   15620:	4770      	bx	lr
   15622:	bf00      	nop
   15624:	20002c70 	.word	0x20002c70

00015628 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   15628:	7f03      	ldrb	r3, [r0, #28]
   1562a:	f003 0303 	and.w	r3, r3, #3
   1562e:	3b01      	subs	r3, #1
   15630:	2b01      	cmp	r3, #1
{
   15632:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   15634:	d90d      	bls.n	15652 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   15636:	4a16      	ldr	r2, [pc, #88]	; (15690 <hci_acl_encode+0x68>)
   15638:	4916      	ldr	r1, [pc, #88]	; (15694 <hci_acl_encode+0x6c>)
   1563a:	4817      	ldr	r0, [pc, #92]	; (15698 <hci_acl_encode+0x70>)
   1563c:	f241 2357 	movw	r3, #4695	; 0x1257
   15640:	f00e ff38 	bl	244b4 <printk>
   15644:	4040      	eors	r0, r0
   15646:	f380 8811 	msr	BASEPRI, r0
   1564a:	f04f 0003 	mov.w	r0, #3
   1564e:	df02      	svc	2
		break;
	}
}
   15650:	bd70      	pop	{r4, r5, r6, pc}
   15652:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   15654:	f101 0508 	add.w	r5, r1, #8
   15658:	4628      	mov	r0, r5
   1565a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   1565c:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   1565e:	f016 fd1c 	bl	2c09a <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   15662:	7f23      	ldrb	r3, [r4, #28]
   15664:	f003 0303 	and.w	r3, r3, #3
   15668:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1566a:	bf0c      	ite	eq
   1566c:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   15670:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   15674:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   15676:	7f61      	ldrb	r1, [r4, #29]
   15678:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   1567a:	4628      	mov	r0, r5
   1567c:	f016 fd0d 	bl	2c09a <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   15680:	7f62      	ldrb	r2, [r4, #29]
   15682:	f104 011f 	add.w	r1, r4, #31
}
   15686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1568a:	f011 b98a 	b.w	269a2 <memcpy>
   1568e:	bf00      	nop
   15690:	0002e8b8 	.word	0x0002e8b8
   15694:	0002e86c 	.word	0x0002e86c
   15698:	0002e80c 	.word	0x0002e80c

0001569c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   156a0:	7905      	ldrb	r5, [r0, #4]
   156a2:	2d02      	cmp	r5, #2
{
   156a4:	4604      	mov	r4, r0
   156a6:	b089      	sub	sp, #36	; 0x24
   156a8:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   156aa:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   156ae:	d015      	beq.n	156dc <hci_evt_encode+0x40>
	handle = node_rx->hdr.handle;
   156b0:	3d04      	subs	r5, #4
   156b2:	88e7      	ldrh	r7, [r4, #6]
	switch (node_rx->hdr.type) {
   156b4:	2d0f      	cmp	r5, #15
   156b6:	d82c      	bhi.n	15712 <hci_evt_encode+0x76>
   156b8:	e8df f015 	tbh	[pc, r5, lsl #1]
   156bc:	002b003b 	.word	0x002b003b
   156c0:	002b002b 	.word	0x002b002b
   156c4:	002b002b 	.word	0x002b002b
   156c8:	002b002b 	.word	0x002b002b
   156cc:	00e4002b 	.word	0x00e4002b
   156d0:	01560147 	.word	0x01560147
   156d4:	01db012d 	.word	0x01db012d
   156d8:	01aa017a 	.word	0x01aa017a
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
   156dc:	7fe3      	ldrb	r3, [r4, #31]
   156de:	88e5      	ldrh	r5, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
   156e0:	3b03      	subs	r3, #3
   156e2:	2b12      	cmp	r3, #18
   156e4:	f200 81dc 	bhi.w	15aa0 <hci_evt_encode+0x404>
   156e8:	e8df f013 	tbh	[pc, r3, lsl #1]
   156ec:	01da021b 	.word	0x01da021b
   156f0:	01fd01da 	.word	0x01fd01da
   156f4:	01da020d 	.word	0x01da020d
   156f8:	01da0261 	.word	0x01da0261
   156fc:	01da01da 	.word	0x01da01da
   15700:	01da0266 	.word	0x01da0266
   15704:	01da0243 	.word	0x01da0243
   15708:	01da01da 	.word	0x01da01da
   1570c:	01dd01da 	.word	0x01dd01da
   15710:	01dd      	.short	0x01dd
		LL_ASSERT(0);
   15712:	f241 1362 	movw	r3, #4450	; 0x1162
		LL_ASSERT(0);
   15716:	4ab3      	ldr	r2, [pc, #716]	; (159e4 <hci_evt_encode+0x348>)
   15718:	49b3      	ldr	r1, [pc, #716]	; (159e8 <hci_evt_encode+0x34c>)
   1571a:	48b4      	ldr	r0, [pc, #720]	; (159ec <hci_evt_encode+0x350>)
   1571c:	f00e feca 	bl	244b4 <printk>
   15720:	4040      	eors	r0, r0
   15722:	f380 8811 	msr	BASEPRI, r0
   15726:	f04f 0003 	mov.w	r0, #3
   1572a:	df02      	svc	2
	}
}
   1572c:	b009      	add	sp, #36	; 0x24
   1572e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   15732:	4aaf      	ldr	r2, [pc, #700]	; (159f0 <hci_evt_encode+0x354>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   15734:	7e23      	ldrb	r3, [r4, #24]
	if (adv->tx_addr) {
   15736:	7f25      	ldrb	r5, [r4, #28]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   15738:	f894 901a 	ldrb.w	r9, [r4, #26]
	direct = node_rx->hdr.rx_ftr.direct;
   1573c:	f894 801b 	ldrb.w	r8, [r4, #27]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   15740:	e892 0003 	ldmia.w	r2, {r0, r1}
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   15744:	425b      	negs	r3, r3
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   15746:	0c0a      	lsrs	r2, r1, #16
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   15748:	b25b      	sxtb	r3, r3
	if (adv->tx_addr) {
   1574a:	066f      	lsls	r7, r5, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   1574c:	9006      	str	r0, [sp, #24]
   1574e:	f8ad 101c 	strh.w	r1, [sp, #28]
   15752:	f88d 201e 	strb.w	r2, [sp, #30]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   15756:	9305      	str	r3, [sp, #20]
	if (adv->tx_addr) {
   15758:	f100 8244 	bmi.w	15be4 <hci_evt_encode+0x548>
	if (direct) {
   1575c:	f1b8 0f00 	cmp.w	r8, #0
   15760:	f040 8268 	bne.w	15c34 <hci_evt_encode+0x598>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15764:	49a3      	ldr	r1, [pc, #652]	; (159f4 <hci_evt_encode+0x358>)
   15766:	6849      	ldr	r1, [r1, #4]
   15768:	4642      	mov	r2, r8
   1576a:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   1576e:	4313      	orrs	r3, r2
   15770:	d0dc      	beq.n	1572c <hci_evt_encode+0x90>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   15772:	4ba1      	ldr	r3, [pc, #644]	; (159f8 <hci_evt_encode+0x35c>)
   15774:	6819      	ldr	r1, [r3, #0]
   15776:	4643      	mov	r3, r8
   15778:	f001 0202 	and.w	r2, r1, #2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1577c:	4313      	orrs	r3, r2
   1577e:	d0d5      	beq.n	1572c <hci_evt_encode+0x90>
	if (dup_count >= 0) {
   15780:	f8df a288 	ldr.w	sl, [pc, #648]	; 15a0c <hci_evt_encode+0x370>
   15784:	f8da 2000 	ldr.w	r2, [sl]
   15788:	2a00      	cmp	r2, #0
   1578a:	db44      	blt.n	15816 <hci_evt_encode+0x17a>
		for (i = 0; i < dup_count; i++) {
   1578c:	bf08      	it	eq
   1578e:	f104 0b1e 	addeq.w	fp, r4, #30
   15792:	d018      	beq.n	157c6 <hci_evt_encode+0x12a>
   15794:	4d99      	ldr	r5, [pc, #612]	; (159fc <hci_evt_encode+0x360>)
   15796:	f104 0b1e 	add.w	fp, r4, #30
   1579a:	4647      	mov	r7, r8
			if (!memcmp(&adv->adv_ind.addr[0],
   1579c:	2206      	movs	r2, #6
   1579e:	4629      	mov	r1, r5
   157a0:	4658      	mov	r0, fp
   157a2:	f011 f8ee 	bl	26982 <memcmp>
   157a6:	b938      	cbnz	r0, 157b8 <hci_evt_encode+0x11c>
			    adv->tx_addr == dup_filter[i].addr.type) {
   157a8:	7f22      	ldrb	r2, [r4, #28]
   157aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   157ae:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   157b2:	4288      	cmp	r0, r1
   157b4:	f000 831a 	beq.w	15dec <hci_evt_encode+0x750>
		for (i = 0; i < dup_count; i++) {
   157b8:	f8da 2000 	ldr.w	r2, [sl]
   157bc:	3701      	adds	r7, #1
   157be:	4297      	cmp	r7, r2
   157c0:	f105 0508 	add.w	r5, r5, #8
   157c4:	dbea      	blt.n	1579c <hci_evt_encode+0x100>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   157c6:	4d8e      	ldr	r5, [pc, #568]	; (15a00 <hci_evt_encode+0x364>)
   157c8:	4f8e      	ldr	r7, [pc, #568]	; (15a04 <hci_evt_encode+0x368>)
   157ca:	682a      	ldr	r2, [r5, #0]
   157cc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   157d0:	4659      	mov	r1, fp
   157d2:	1c90      	adds	r0, r2, #2
   157d4:	2206      	movs	r2, #6
   157d6:	f011 f8e4 	bl	269a2 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   157da:	682a      	ldr	r2, [r5, #0]
   157dc:	7f21      	ldrb	r1, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   157de:	f8da 3000 	ldr.w	r3, [sl]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   157e2:	eb07 00c2 	add.w	r0, r7, r2, lsl #3
   157e6:	f3c1 1180 	ubfx	r1, r1, #6, #1
   157ea:	7041      	strb	r1, [r0, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   157ec:	7f20      	ldrb	r0, [r4, #28]
   157ee:	2101      	movs	r1, #1
   157f0:	f000 000f 	and.w	r0, r0, #15
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   157f4:	2b0f      	cmp	r3, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   157f6:	fa01 f100 	lsl.w	r1, r1, r0
   157fa:	f807 1032 	strb.w	r1, [r7, r2, lsl #3]
			dup_count++;
   157fe:	bfdb      	ittet	le
   15800:	1c59      	addle	r1, r3, #1
			dup_curr = dup_count;
   15802:	460a      	movle	r2, r1
			dup_curr++;
   15804:	3201      	addgt	r2, #1
			dup_count++;
   15806:	f8ca 1000 	strle.w	r1, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1580a:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   1580c:	bf08      	it	eq
   1580e:	2300      	moveq	r3, #0
			dup_curr++;
   15810:	602a      	str	r2, [r5, #0]
			dup_curr = 0U;
   15812:	bf08      	it	eq
   15814:	602b      	streq	r3, [r5, #0]
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   15816:	7f23      	ldrb	r3, [r4, #28]
   15818:	f003 030f 	and.w	r3, r3, #15
   1581c:	2b01      	cmp	r3, #1
   1581e:	f000 82e2 	beq.w	15de6 <hci_evt_encode+0x74a>
		data_len = (adv->len - BDADDR_SIZE);
   15822:	7f63      	ldrb	r3, [r4, #29]
   15824:	f1a3 0806 	sub.w	r8, r3, #6
   15828:	fa5f f888 	uxtb.w	r8, r8
   1582c:	3305      	adds	r3, #5
   1582e:	b2da      	uxtb	r2, r3
   15830:	4647      	mov	r7, r8
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   15832:	2102      	movs	r1, #2
   15834:	4630      	mov	r0, r6
   15836:	f7ff f959 	bl	14aec <meta_evt>
	sep->num_reports = 1U;
   1583a:	2301      	movs	r3, #1
   1583c:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   1583e:	7f23      	ldrb	r3, [r4, #28]
   15840:	aa08      	add	r2, sp, #32
   15842:	f003 030f 	and.w	r3, r3, #15
   15846:	4413      	add	r3, r2
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   15848:	4605      	mov	r5, r0
	adv_info->evt_type = c_adv_type[adv->type];
   1584a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1584e:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   15850:	f006 f884 	bl	1b95c <ll_rl_size_get>
   15854:	4581      	cmp	r9, r0
   15856:	f080 82bb 	bcs.w	15dd0 <hci_evt_encode+0x734>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   1585a:	4648      	mov	r0, r9
   1585c:	1cea      	adds	r2, r5, #3
   1585e:	1ca9      	adds	r1, r5, #2
   15860:	f006 f838 	bl	1b8d4 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   15864:	78ab      	ldrb	r3, [r5, #2]
   15866:	3302      	adds	r3, #2
   15868:	70ab      	strb	r3, [r5, #2]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   1586a:	f105 060a 	add.w	r6, r5, #10
	adv_info->length = data_len;
   1586e:	f885 8009 	strb.w	r8, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   15872:	f104 0124 	add.w	r1, r4, #36	; 0x24
   15876:	4630      	mov	r0, r6
   15878:	463a      	mov	r2, r7
   1587a:	f011 f892 	bl	269a2 <memcpy>
	*prssi = rssi;
   1587e:	9b05      	ldr	r3, [sp, #20]
   15880:	55f3      	strb	r3, [r6, r7]
   15882:	e753      	b.n	1572c <hci_evt_encode+0x90>
	uint8_t status = node_rx->status;
   15884:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
   15886:	2d00      	cmp	r5, #0
   15888:	f000 81a3 	beq.w	15bd2 <hci_evt_encode+0x536>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1588c:	4b59      	ldr	r3, [pc, #356]	; (159f4 <hci_evt_encode+0x358>)
   1588e:	6859      	ldr	r1, [r3, #4]
   15890:	f04f 0800 	mov.w	r8, #0
   15894:	4642      	mov	r2, r8
   15896:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   1589a:	4313      	orrs	r3, r2
   1589c:	f43f af46 	beq.w	1572c <hci_evt_encode+0x90>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   158a0:	4b55      	ldr	r3, [pc, #340]	; (159f8 <hci_evt_encode+0x35c>)
   158a2:	f8d3 c000 	ldr.w	ip, [r3]
   158a6:	f240 2101 	movw	r1, #513	; 0x201
   158aa:	ea0c 0201 	and.w	r2, ip, r1
   158ae:	4643      	mov	r3, r8
   158b0:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   158b2:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   158b6:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   158b8:	f43f af38 	beq.w	1572c <hci_evt_encode+0x90>
	if (!status) {
   158bc:	2d00      	cmp	r5, #0
   158be:	f040 81a3 	bne.w	15c08 <hci_evt_encode+0x56c>
		conn_count++;
   158c2:	4a51      	ldr	r2, [pc, #324]	; (15a08 <hci_evt_encode+0x36c>)
   158c4:	6813      	ldr	r3, [r2, #0]
   158c6:	3301      	adds	r3, #1
   158c8:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   158ca:	ea50 0301 	orrs.w	r3, r0, r1
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   158ce:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   158d0:	f040 8245 	bne.w	15d5e <hci_evt_encode+0x6c2>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   158d4:	2212      	movs	r2, #18
   158d6:	2101      	movs	r1, #1
   158d8:	f7ff f908 	bl	14aec <meta_evt>
   158dc:	4606      	mov	r6, r0
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   158de:	2206      	movs	r2, #6
	lecc->status = 0x00;
   158e0:	7035      	strb	r5, [r6, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   158e2:	f8a6 7001 	strh.w	r7, [r6, #1]
	lecc->role = node_rx->role;
   158e6:	7f63      	ldrb	r3, [r4, #29]
   158e8:	70f3      	strb	r3, [r6, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   158ea:	7fa3      	ldrb	r3, [r4, #30]
   158ec:	f003 0301 	and.w	r3, r3, #1
   158f0:	7133      	strb	r3, [r6, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   158f2:	f104 011f 	add.w	r1, r4, #31
   158f6:	3005      	adds	r0, #5
   158f8:	f011 f853 	bl	269a2 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   158fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   158fe:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   15900:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   15902:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   15906:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   1590a:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = node_rx->sca;
   1590e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15912:	7473      	strb	r3, [r6, #17]
   15914:	e70a      	b.n	1572c <hci_evt_encode+0x90>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   15916:	4b37      	ldr	r3, [pc, #220]	; (159f4 <hci_evt_encode+0x358>)
   15918:	6859      	ldr	r1, [r3, #4]
   1591a:	2400      	movs	r4, #0
   1591c:	4622      	mov	r2, r4
   1591e:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   15922:	4313      	orrs	r3, r2
   15924:	f43f af02 	beq.w	1572c <hci_evt_encode+0x90>
	hdr = net_buf_add(buf, sizeof(*hdr));
   15928:	3608      	adds	r6, #8
   1592a:	2102      	movs	r1, #2
   1592c:	4630      	mov	r0, r6
   1592e:	f016 fbb4 	bl	2c09a <net_buf_simple_add>
   15932:	4603      	mov	r3, r0
	hdr->evt = evt;
   15934:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   15936:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
   15938:	4630      	mov	r0, r6
	hdr->evt = evt;
   1593a:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   1593c:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   1593e:	f016 fbac 	bl	2c09a <net_buf_simple_add>
	ep->status = 0x00;
   15942:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   15944:	f8a0 7001 	strh.w	r7, [r0, #1]
   15948:	e6f0      	b.n	1572c <hci_evt_encode+0x90>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1594a:	4b2a      	ldr	r3, [pc, #168]	; (159f4 <hci_evt_encode+0x358>)
   1594c:	6819      	ldr	r1, [r3, #0]
   1594e:	2300      	movs	r3, #0
   15950:	f001 0210 	and.w	r2, r1, #16
   15954:	4313      	orrs	r3, r2
   15956:	f43f aee9 	beq.w	1572c <hci_evt_encode+0x90>
   1595a:	4632      	mov	r2, r6
   1595c:	4639      	mov	r1, r7
}
   1595e:	b009      	add	sp, #36	; 0x24
   15960:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15964:	f7ff b92a 	b.w	14bbc <hci_disconn_complete_encode.part.0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15968:	4b22      	ldr	r3, [pc, #136]	; (159f4 <hci_evt_encode+0x358>)
   1596a:	6858      	ldr	r0, [r3, #4]
   1596c:	2100      	movs	r1, #0
   1596e:	460a      	mov	r2, r1
   15970:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   15974:	4313      	orrs	r3, r2
   15976:	f43f aed9 	beq.w	1572c <hci_evt_encode+0x90>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1597a:	4b1f      	ldr	r3, [pc, #124]	; (159f8 <hci_evt_encode+0x35c>)
   1597c:	6818      	ldr	r0, [r3, #0]
   1597e:	460b      	mov	r3, r1
   15980:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15984:	4313      	orrs	r3, r2
   15986:	f43f aed1 	beq.w	1572c <hci_evt_encode+0x90>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   1598a:	2209      	movs	r2, #9
   1598c:	2103      	movs	r1, #3
   1598e:	4630      	mov	r0, r6
   15990:	f7ff f8ac 	bl	14aec <meta_evt>
	sep->status = cu->status;
   15994:	7f23      	ldrb	r3, [r4, #28]
   15996:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   15998:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1599a:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1599c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1599e:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   159a2:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   159a6:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   159aa:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   159ae:	e6bd      	b.n	1572c <hci_evt_encode+0x90>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   159b0:	4b10      	ldr	r3, [pc, #64]	; (159f4 <hci_evt_encode+0x358>)
   159b2:	6858      	ldr	r0, [r3, #4]
   159b4:	2100      	movs	r1, #0
   159b6:	460a      	mov	r2, r1
   159b8:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   159bc:	4313      	orrs	r3, r2
   159be:	f43f aeb5 	beq.w	1572c <hci_evt_encode+0x90>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   159c2:	4b0d      	ldr	r3, [pc, #52]	; (159f8 <hci_evt_encode+0x35c>)
   159c4:	6818      	ldr	r0, [r3, #0]
   159c6:	460b      	mov	r3, r1
   159c8:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   159cc:	4313      	orrs	r3, r2
   159ce:	f43f aead 	beq.w	1572c <hci_evt_encode+0x90>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   159d2:	4630      	mov	r0, r6
   159d4:	2203      	movs	r2, #3
   159d6:	2114      	movs	r1, #20
   159d8:	f7ff f888 	bl	14aec <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   159dc:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   159de:	7f23      	ldrb	r3, [r4, #28]
   159e0:	7083      	strb	r3, [r0, #2]
   159e2:	e6a3      	b.n	1572c <hci_evt_encode+0x90>
   159e4:	0002e8b8 	.word	0x0002e8b8
   159e8:	0002e86c 	.word	0x0002e86c
   159ec:	0002e80c 	.word	0x0002e80c
   159f0:	0002dccc 	.word	0x0002dccc
   159f4:	20000290 	.word	0x20000290
   159f8:	20000298 	.word	0x20000298
   159fc:	20002c7e 	.word	0x20002c7e
   15a00:	20002c78 	.word	0x20002c78
   15a04:	20002c7c 	.word	0x20002c7c
   15a08:	20002c70 	.word	0x20002c70
   15a0c:	20002c74 	.word	0x20002c74
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15a10:	4b85      	ldr	r3, [pc, #532]	; (15c28 <hci_evt_encode+0x58c>)
   15a12:	6858      	ldr	r0, [r3, #4]
   15a14:	2100      	movs	r1, #0
   15a16:	460a      	mov	r2, r1
   15a18:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   15a1c:	4313      	orrs	r3, r2
   15a1e:	f43f ae85 	beq.w	1572c <hci_evt_encode+0x90>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   15a22:	4b82      	ldr	r3, [pc, #520]	; (15c2c <hci_evt_encode+0x590>)
   15a24:	6818      	ldr	r0, [r3, #0]
   15a26:	460b      	mov	r3, r1
   15a28:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15a2c:	4313      	orrs	r3, r2
   15a2e:	f43f ae7d 	beq.w	1572c <hci_evt_encode+0x90>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   15a32:	2205      	movs	r2, #5
   15a34:	4630      	mov	r0, r6
   15a36:	210c      	movs	r1, #12
   15a38:	f7ff f858 	bl	14aec <meta_evt>
	sep->status = pu->status;
   15a3c:	7f23      	ldrb	r3, [r4, #28]
   15a3e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   15a40:	f8a0 7001 	strh.w	r7, [r0, #1]
   15a44:	7f62      	ldrb	r2, [r4, #29]
   15a46:	2a00      	cmp	r2, #0
   15a48:	fa92 f3a2 	rbit	r3, r2
   15a4c:	fab3 f383 	clz	r3, r3
   15a50:	bf08      	it	eq
   15a52:	f04f 33ff 	moveq.w	r3, #4294967295
   15a56:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   15a58:	70c3      	strb	r3, [r0, #3]
   15a5a:	7fa2      	ldrb	r2, [r4, #30]
   15a5c:	fa92 f3a2 	rbit	r3, r2
   15a60:	2a00      	cmp	r2, #0
   15a62:	fab3 f383 	clz	r3, r3
   15a66:	bf08      	it	eq
   15a68:	f04f 33ff 	moveq.w	r3, #4294967295
   15a6c:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   15a6e:	7103      	strb	r3, [r0, #4]
   15a70:	e65c      	b.n	1572c <hci_evt_encode+0x90>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   15a72:	4b6f      	ldr	r3, [pc, #444]	; (15c30 <hci_evt_encode+0x594>)
   15a74:	6819      	ldr	r1, [r3, #0]
   15a76:	2300      	movs	r3, #0
   15a78:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   15a7c:	4313      	orrs	r3, r2
   15a7e:	f43f ae55 	beq.w	1572c <hci_evt_encode+0x90>
	hdr = net_buf_add(buf, sizeof(*hdr));
   15a82:	3608      	adds	r6, #8
   15a84:	2102      	movs	r1, #2
   15a86:	4630      	mov	r0, r6
   15a88:	f016 fb07 	bl	2c09a <net_buf_simple_add>
   15a8c:	4603      	mov	r3, r0
	hdr->evt = evt;
   15a8e:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   15a90:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
   15a92:	4630      	mov	r0, r6
	hdr->evt = evt;
   15a94:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   15a96:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   15a98:	f016 faff 	bl	2c09a <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   15a9c:	8007      	strh	r7, [r0, #0]
   15a9e:	e645      	b.n	1572c <hci_evt_encode+0x90>
		LL_ASSERT(0);
   15aa0:	f241 232b 	movw	r3, #4651	; 0x122b
   15aa4:	e637      	b.n	15716 <hci_evt_encode+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15aa6:	4b60      	ldr	r3, [pc, #384]	; (15c28 <hci_evt_encode+0x58c>)
   15aa8:	6858      	ldr	r0, [r3, #4]
   15aaa:	2100      	movs	r1, #0
   15aac:	460a      	mov	r2, r1
   15aae:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   15ab2:	4313      	orrs	r3, r2
   15ab4:	f43f ae3a 	beq.w	1572c <hci_evt_encode+0x90>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   15ab8:	4b5c      	ldr	r3, [pc, #368]	; (15c2c <hci_evt_encode+0x590>)
   15aba:	6818      	ldr	r0, [r3, #0]
   15abc:	460b      	mov	r3, r1
   15abe:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15ac2:	4313      	orrs	r3, r2
   15ac4:	f43f ae32 	beq.w	1572c <hci_evt_encode+0x90>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   15ac8:	4630      	mov	r0, r6
   15aca:	220a      	movs	r2, #10
   15acc:	2107      	movs	r1, #7
   15ace:	f7ff f80d 	bl	14aec <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   15ad2:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   15ad4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15ad6:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   15ad8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15ada:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   15adc:	8c23      	ldrh	r3, [r4, #32]
   15ade:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   15ae0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   15ae2:	8103      	strh	r3, [r0, #8]
   15ae4:	e622      	b.n	1572c <hci_evt_encode+0x90>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   15ae6:	4b50      	ldr	r3, [pc, #320]	; (15c28 <hci_evt_encode+0x58c>)
   15ae8:	6819      	ldr	r1, [r3, #0]
   15aea:	2000      	movs	r0, #0
   15aec:	f001 0280 	and.w	r2, r1, #128	; 0x80
   15af0:	4603      	mov	r3, r0
   15af2:	4313      	orrs	r3, r2
   15af4:	f43f ae1a 	beq.w	1572c <hci_evt_encode+0x90>
   15af8:	4632      	mov	r2, r6
   15afa:	4629      	mov	r1, r5
}
   15afc:	b009      	add	sp, #36	; 0x24
   15afe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b02:	f7ff b80b 	b.w	14b1c <encrypt_change.part.0>
	switch (pdu_data->llctrl.unknown_rsp.type) {
   15b06:	f894 3020 	ldrb.w	r3, [r4, #32]
   15b0a:	2b0e      	cmp	r3, #14
   15b0c:	f47f ae0e 	bne.w	1572c <hci_evt_encode+0x90>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   15b10:	460b      	mov	r3, r1
   15b12:	462a      	mov	r2, r5
   15b14:	2100      	movs	r1, #0
   15b16:	201a      	movs	r0, #26
}
   15b18:	b009      	add	sp, #36	; 0x24
   15b1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   15b1e:	f7ff b817 	b.w	14b50 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15b22:	4b41      	ldr	r3, [pc, #260]	; (15c28 <hci_evt_encode+0x58c>)
   15b24:	6858      	ldr	r0, [r3, #4]
   15b26:	2100      	movs	r1, #0
   15b28:	460a      	mov	r2, r1
   15b2a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   15b2e:	4313      	orrs	r3, r2
   15b30:	f43f adfc 	beq.w	1572c <hci_evt_encode+0x90>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   15b34:	4b3d      	ldr	r3, [pc, #244]	; (15c2c <hci_evt_encode+0x590>)
   15b36:	6818      	ldr	r0, [r3, #0]
   15b38:	460b      	mov	r3, r1
   15b3a:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15b3e:	4313      	orrs	r3, r2
   15b40:	f43f adf4 	beq.w	1572c <hci_evt_encode+0x90>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   15b44:	4630      	mov	r0, r6
   15b46:	220c      	movs	r2, #12
   15b48:	2105      	movs	r1, #5
   15b4a:	f7fe ffcf 	bl	14aec <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   15b4e:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   15b52:	4606      	mov	r6, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   15b54:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   15b56:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   15b5a:	f010 ff22 	bl	269a2 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   15b5e:	f106 000a 	add.w	r0, r6, #10
   15b62:	f104 0128 	add.w	r1, r4, #40	; 0x28
   15b66:	2202      	movs	r2, #2
}
   15b68:	b009      	add	sp, #36	; 0x24
   15b6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   15b6e:	f010 bf18 	b.w	269a2 <memcpy>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15b72:	4b2d      	ldr	r3, [pc, #180]	; (15c28 <hci_evt_encode+0x58c>)
   15b74:	6858      	ldr	r0, [r3, #4]
   15b76:	2100      	movs	r1, #0
   15b78:	460a      	mov	r2, r1
   15b7a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   15b7e:	4313      	orrs	r3, r2
   15b80:	d038      	beq.n	15bf4 <hci_evt_encode+0x558>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   15b82:	4b2a      	ldr	r3, [pc, #168]	; (15c2c <hci_evt_encode+0x590>)
   15b84:	6818      	ldr	r0, [r3, #0]
   15b86:	460b      	mov	r3, r1
   15b88:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15b8c:	4313      	orrs	r3, r2
   15b8e:	d031      	beq.n	15bf4 <hci_evt_encode+0x558>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   15b90:	4630      	mov	r0, r6
   15b92:	220a      	movs	r2, #10
   15b94:	2106      	movs	r1, #6
   15b96:	f7fe ffa9 	bl	14aec <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   15b9a:	8005      	strh	r5, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   15b9c:	8c23      	ldrh	r3, [r4, #32]
   15b9e:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   15ba0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   15ba2:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   15ba4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15ba6:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   15ba8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15baa:	8103      	strh	r3, [r0, #8]
   15bac:	e5be      	b.n	1572c <hci_evt_encode+0x90>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   15bae:	460b      	mov	r3, r1
   15bb0:	462a      	mov	r2, r5
   15bb2:	4601      	mov	r1, r0
   15bb4:	2000      	movs	r0, #0
   15bb6:	e7af      	b.n	15b18 <hci_evt_encode+0x47c>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   15bb8:	4b1b      	ldr	r3, [pc, #108]	; (15c28 <hci_evt_encode+0x58c>)
   15bba:	6819      	ldr	r1, [r3, #0]
   15bbc:	2300      	movs	r3, #0
   15bbe:	f001 0280 	and.w	r2, r1, #128	; 0x80
   15bc2:	4313      	orrs	r3, r2
   15bc4:	f43f adb2 	beq.w	1572c <hci_evt_encode+0x90>
   15bc8:	f894 0020 	ldrb.w	r0, [r4, #32]
   15bcc:	4632      	mov	r2, r6
   15bce:	4629      	mov	r1, r5
   15bd0:	e794      	b.n	15afc <hci_evt_encode+0x460>
		ll_rl_crpa_set(node_rx->peer_addr_type,
   15bd2:	7fa0      	ldrb	r0, [r4, #30]
   15bd4:	f104 0325 	add.w	r3, r4, #37	; 0x25
   15bd8:	22ff      	movs	r2, #255	; 0xff
   15bda:	f104 011f 	add.w	r1, r4, #31
   15bde:	f006 fb3b 	bl	1c258 <ll_rl_crpa_set>
   15be2:	e653      	b.n	1588c <hci_evt_encode+0x1f0>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   15be4:	2100      	movs	r1, #0
   15be6:	4608      	mov	r0, r1
   15be8:	f104 031e 	add.w	r3, r4, #30
   15bec:	464a      	mov	r2, r9
   15bee:	f006 fb33 	bl	1c258 <ll_rl_crpa_set>
   15bf2:	e5b3      	b.n	1575c <hci_evt_encode+0xc0>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   15bf4:	2300      	movs	r3, #0
   15bf6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   15bfa:	4628      	mov	r0, r5
   15bfc:	9300      	str	r3, [sp, #0]
   15bfe:	221a      	movs	r2, #26
   15c00:	2102      	movs	r1, #2
   15c02:	f002 fdf9 	bl	187f8 <ll_conn_update>
		return;
   15c06:	e591      	b.n	1572c <hci_evt_encode+0x90>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   15c08:	ea50 0301 	orrs.w	r3, r0, r1
   15c0c:	f040 80d4 	bne.w	15db8 <hci_evt_encode+0x71c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   15c10:	2212      	movs	r2, #18
   15c12:	2101      	movs	r1, #1
   15c14:	4630      	mov	r0, r6
   15c16:	f7fe ff69 	bl	14aec <meta_evt>
   15c1a:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   15c1c:	4641      	mov	r1, r8
   15c1e:	2212      	movs	r2, #18
   15c20:	f010 feea 	bl	269f8 <memset>
		lecc->status = status;
   15c24:	7025      	strb	r5, [r4, #0]
		return;
   15c26:	e581      	b.n	1572c <hci_evt_encode+0x90>
   15c28:	20000290 	.word	0x20000290
   15c2c:	20000298 	.word	0x20000298
   15c30:	200019b0 	.word	0x200019b0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15c34:	4b84      	ldr	r3, [pc, #528]	; (15e48 <hci_evt_encode+0x7ac>)
   15c36:	6858      	ldr	r0, [r3, #4]
   15c38:	2100      	movs	r1, #0
   15c3a:	460a      	mov	r2, r1
   15c3c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   15c40:	4313      	orrs	r3, r2
   15c42:	f43f ad73 	beq.w	1572c <hci_evt_encode+0x90>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   15c46:	4b81      	ldr	r3, [pc, #516]	; (15e4c <hci_evt_encode+0x7b0>)
   15c48:	6818      	ldr	r0, [r3, #0]
   15c4a:	460b      	mov	r3, r1
   15c4c:	f400 6280 	and.w	r2, r0, #1024	; 0x400
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   15c50:	4313      	orrs	r3, r2
   15c52:	f43f ad6b 	beq.w	1572c <hci_evt_encode+0x90>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   15c56:	7f23      	ldrb	r3, [r4, #28]
   15c58:	f003 030f 	and.w	r3, r3, #15
   15c5c:	2b01      	cmp	r3, #1
   15c5e:	d00c      	beq.n	15c7a <hci_evt_encode+0x5de>
   15c60:	4a7b      	ldr	r2, [pc, #492]	; (15e50 <hci_evt_encode+0x7b4>)
   15c62:	497c      	ldr	r1, [pc, #496]	; (15e54 <hci_evt_encode+0x7b8>)
   15c64:	487c      	ldr	r0, [pc, #496]	; (15e58 <hci_evt_encode+0x7bc>)
   15c66:	f640 43a1 	movw	r3, #3233	; 0xca1
   15c6a:	f00e fc23 	bl	244b4 <printk>
   15c6e:	4040      	eors	r0, r0
   15c70:	f380 8811 	msr	BASEPRI, r0
   15c74:	f04f 0003 	mov.w	r0, #3
   15c78:	df02      	svc	2
	if (dup_count >= 0) {
   15c7a:	f8df a1ec 	ldr.w	sl, [pc, #492]	; 15e68 <hci_evt_encode+0x7cc>
   15c7e:	f8da 2000 	ldr.w	r2, [sl]
   15c82:	2a00      	cmp	r2, #0
   15c84:	db48      	blt.n	15d18 <hci_evt_encode+0x67c>
		for (i = 0; i < dup_count; i++) {
   15c86:	bf08      	it	eq
   15c88:	f104 0b1e 	addeq.w	fp, r4, #30
   15c8c:	d018      	beq.n	15cc0 <hci_evt_encode+0x624>
   15c8e:	4d73      	ldr	r5, [pc, #460]	; (15e5c <hci_evt_encode+0x7c0>)
   15c90:	f104 0b1e 	add.w	fp, r4, #30
   15c94:	2700      	movs	r7, #0
			if (!memcmp(&adv->adv_ind.addr[0],
   15c96:	2206      	movs	r2, #6
   15c98:	4629      	mov	r1, r5
   15c9a:	4658      	mov	r0, fp
   15c9c:	f010 fe71 	bl	26982 <memcmp>
   15ca0:	b938      	cbnz	r0, 15cb2 <hci_evt_encode+0x616>
			    adv->tx_addr == dup_filter[i].addr.type) {
   15ca2:	7f22      	ldrb	r2, [r4, #28]
   15ca4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   15ca8:	f3c2 1080 	ubfx	r0, r2, #6, #1
				    sizeof(bt_addr_t)) &&
   15cac:	4288      	cmp	r0, r1
   15cae:	f000 80b9 	beq.w	15e24 <hci_evt_encode+0x788>
		for (i = 0; i < dup_count; i++) {
   15cb2:	f8da 2000 	ldr.w	r2, [sl]
   15cb6:	3701      	adds	r7, #1
   15cb8:	4297      	cmp	r7, r2
   15cba:	f105 0508 	add.w	r5, r5, #8
   15cbe:	dbea      	blt.n	15c96 <hci_evt_encode+0x5fa>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
   15cc0:	4d67      	ldr	r5, [pc, #412]	; (15e60 <hci_evt_encode+0x7c4>)
   15cc2:	4f68      	ldr	r7, [pc, #416]	; (15e64 <hci_evt_encode+0x7c8>)
   15cc4:	682a      	ldr	r2, [r5, #0]
   15cc6:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   15cca:	4659      	mov	r1, fp
   15ccc:	1c90      	adds	r0, r2, #2
   15cce:	2206      	movs	r2, #6
   15cd0:	f010 fe67 	bl	269a2 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   15cd4:	682a      	ldr	r2, [r5, #0]
   15cd6:	7f20      	ldrb	r0, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   15cd8:	f8da 1000 	ldr.w	r1, [sl]
		dup_filter[dup_curr].addr.type = adv->tx_addr;
   15cdc:	eb07 0cc2 	add.w	ip, r7, r2, lsl #3
   15ce0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15ce4:	f88c 0001 	strb.w	r0, [ip, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
   15ce8:	f894 c01c 	ldrb.w	ip, [r4, #28]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   15cec:	290f      	cmp	r1, #15
		dup_filter[dup_curr].mask = BIT(adv->type);
   15cee:	f04f 0001 	mov.w	r0, #1
   15cf2:	f00c 0c0f 	and.w	ip, ip, #15
			dup_count++;
   15cf6:	bfd8      	it	le
   15cf8:	3101      	addle	r1, #1
		dup_filter[dup_curr].mask = BIT(adv->type);
   15cfa:	fa00 f00c 	lsl.w	r0, r0, ip
   15cfe:	f807 0032 	strb.w	r0, [r7, r2, lsl #3]
			dup_curr = dup_count;
   15d02:	bfd6      	itet	le
   15d04:	460a      	movle	r2, r1
			dup_curr++;
   15d06:	3201      	addgt	r2, #1
			dup_count++;
   15d08:	f8ca 1000 	strle.w	r1, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   15d0c:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   15d0e:	bf08      	it	eq
   15d10:	2300      	moveq	r3, #0
			dup_curr++;
   15d12:	602a      	str	r2, [r5, #0]
			dup_curr = 0U;
   15d14:	bf08      	it	eq
   15d16:	602b      	streq	r3, [r5, #0]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   15d18:	2211      	movs	r2, #17
   15d1a:	210b      	movs	r1, #11
   15d1c:	4630      	mov	r0, r6
   15d1e:	f7fe fee5 	bl	14aec <meta_evt>
	drp->num_reports = 1U;
   15d22:	2301      	movs	r3, #1
   15d24:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   15d26:	7043      	strb	r3, [r0, #1]
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
   15d28:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   15d2a:	f005 fe17 	bl	1b95c <ll_rl_size_get>
   15d2e:	4581      	cmp	r9, r0
   15d30:	d26d      	bcs.n	15e0e <hci_evt_encode+0x772>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   15d32:	4648      	mov	r0, r9
   15d34:	1cea      	adds	r2, r5, #3
   15d36:	1ca9      	adds	r1, r5, #2
   15d38:	f005 fdcc 	bl	1b8d4 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   15d3c:	78ab      	ldrb	r3, [r5, #2]
   15d3e:	3302      	adds	r3, #2
   15d40:	70ab      	strb	r3, [r5, #2]
	dir_info->dir_addr.type = adv->rx_addr;
   15d42:	7f23      	ldrb	r3, [r4, #28]
   15d44:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   15d48:	726b      	strb	r3, [r5, #9]
	memcpy(&dir_info->dir_addr.a.val[0],
   15d4a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   15d4e:	2206      	movs	r2, #6
   15d50:	f105 000a 	add.w	r0, r5, #10
   15d54:	f010 fe25 	bl	269a2 <memcpy>
	dir_info->rssi = rssi;
   15d58:	9b05      	ldr	r3, [sp, #20]
   15d5a:	742b      	strb	r3, [r5, #16]
   15d5c:	e4e6      	b.n	1572c <hci_evt_encode+0x90>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   15d5e:	221e      	movs	r2, #30
   15d60:	210a      	movs	r1, #10
   15d62:	f7fe fec3 	bl	14aec <meta_evt>
   15d66:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
   15d68:	2206      	movs	r2, #6
		leecc->status = 0x00;
   15d6a:	7035      	strb	r5, [r6, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   15d6c:	f8a6 7001 	strh.w	r7, [r6, #1]
		leecc->role = node_rx->role;
   15d70:	7f63      	ldrb	r3, [r4, #29]
   15d72:	70f3      	strb	r3, [r6, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
   15d74:	7fa3      	ldrb	r3, [r4, #30]
   15d76:	7133      	strb	r3, [r6, #4]
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
   15d78:	f104 011f 	add.w	r1, r4, #31
   15d7c:	3005      	adds	r0, #5
   15d7e:	f010 fe10 	bl	269a2 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &node_rx->local_rpa[0],
   15d82:	2206      	movs	r2, #6
   15d84:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   15d88:	f106 000b 	add.w	r0, r6, #11
   15d8c:	f010 fe09 	bl	269a2 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
   15d90:	2206      	movs	r2, #6
   15d92:	f104 0125 	add.w	r1, r4, #37	; 0x25
   15d96:	f106 0011 	add.w	r0, r6, #17
   15d9a:	f010 fe02 	bl	269a2 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   15d9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   15da0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
   15da2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   15da4:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   15da8:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   15dac:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = node_rx->sca;
   15db0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15db4:	7773      	strb	r3, [r6, #29]
		return;
   15db6:	e4b9      	b.n	1572c <hci_evt_encode+0x90>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   15db8:	221e      	movs	r2, #30
   15dba:	210a      	movs	r1, #10
   15dbc:	4630      	mov	r0, r6
   15dbe:	f7fe fe95 	bl	14aec <meta_evt>
   15dc2:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   15dc4:	4641      	mov	r1, r8
   15dc6:	221e      	movs	r2, #30
   15dc8:	f010 fe16 	bl	269f8 <memset>
			leecc->status = status;
   15dcc:	7025      	strb	r5, [r4, #0]
			return;
   15dce:	e4ad      	b.n	1572c <hci_evt_encode+0x90>
		adv_info->addr.type = adv->tx_addr;
   15dd0:	7f23      	ldrb	r3, [r4, #28]
   15dd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   15dd6:	70ab      	strb	r3, [r5, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->adv_ind.addr[0],
   15dd8:	2206      	movs	r2, #6
   15dda:	f104 011e 	add.w	r1, r4, #30
   15dde:	1ce8      	adds	r0, r5, #3
   15de0:	f010 fddf 	bl	269a2 <memcpy>
   15de4:	e541      	b.n	1586a <hci_evt_encode+0x1ce>
   15de6:	2700      	movs	r7, #0
   15de8:	220b      	movs	r2, #11
   15dea:	e522      	b.n	15832 <hci_evt_encode+0x196>
				if (dup_filter[i].mask & BIT(adv->type)) {
   15dec:	491d      	ldr	r1, [pc, #116]	; (15e64 <hci_evt_encode+0x7c8>)
   15dee:	f811 3037 	ldrb.w	r3, [r1, r7, lsl #3]
   15df2:	f002 020f 	and.w	r2, r2, #15
   15df6:	fa23 f002 	lsr.w	r0, r3, r2
   15dfa:	07c0      	lsls	r0, r0, #31
   15dfc:	f53f ac96 	bmi.w	1572c <hci_evt_encode+0x90>
				dup_filter[i].mask |= BIT(adv->type);
   15e00:	2001      	movs	r0, #1
   15e02:	fa00 f202 	lsl.w	r2, r0, r2
   15e06:	4313      	orrs	r3, r2
   15e08:	f801 3037 	strb.w	r3, [r1, r7, lsl #3]
				return false;
   15e0c:	e503      	b.n	15816 <hci_evt_encode+0x17a>
		dir_info->addr.type = adv->tx_addr;
   15e0e:	7f23      	ldrb	r3, [r4, #28]
   15e10:	f3c3 1380 	ubfx	r3, r3, #6, #1
   15e14:	70ab      	strb	r3, [r5, #2]
		memcpy(&dir_info->addr.a.val[0], &adv->direct_ind.adv_addr[0],
   15e16:	2206      	movs	r2, #6
   15e18:	f104 011e 	add.w	r1, r4, #30
   15e1c:	1ce8      	adds	r0, r5, #3
   15e1e:	f010 fdc0 	bl	269a2 <memcpy>
   15e22:	e78e      	b.n	15d42 <hci_evt_encode+0x6a6>
				if (dup_filter[i].mask & BIT(adv->type)) {
   15e24:	480f      	ldr	r0, [pc, #60]	; (15e64 <hci_evt_encode+0x7c8>)
   15e26:	f810 3037 	ldrb.w	r3, [r0, r7, lsl #3]
   15e2a:	f002 020f 	and.w	r2, r2, #15
   15e2e:	fa23 f102 	lsr.w	r1, r3, r2
   15e32:	07cd      	lsls	r5, r1, #31
   15e34:	f53f ac7a 	bmi.w	1572c <hci_evt_encode+0x90>
				dup_filter[i].mask |= BIT(adv->type);
   15e38:	2101      	movs	r1, #1
   15e3a:	fa01 f202 	lsl.w	r2, r1, r2
   15e3e:	4313      	orrs	r3, r2
   15e40:	f800 3037 	strb.w	r3, [r0, r7, lsl #3]
				return false;
   15e44:	e768      	b.n	15d18 <hci_evt_encode+0x67c>
   15e46:	bf00      	nop
   15e48:	20000290 	.word	0x20000290
   15e4c:	20000298 	.word	0x20000298
   15e50:	0002e8b8 	.word	0x0002e8b8
   15e54:	0002e8f4 	.word	0x0002e8f4
   15e58:	0002e80c 	.word	0x0002e80c
   15e5c:	20002c7e 	.word	0x20002c7e
   15e60:	20002c78 	.word	0x20002c78
   15e64:	20002c7c 	.word	0x20002c7c
   15e68:	20002c74 	.word	0x20002c74

00015e6c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   15e6c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   15e6e:	f100 0408 	add.w	r4, r0, #8
{
   15e72:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   15e74:	4620      	mov	r0, r4
   15e76:	2102      	movs	r1, #2
{
   15e78:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   15e7a:	f016 f90e 	bl	2c09a <net_buf_simple_add>
   15e7e:	4603      	mov	r3, r0
	hdr->evt = evt;
   15e80:	2213      	movs	r2, #19
	hdr->len = len;
   15e82:	2105      	movs	r1, #5
	hdr->evt = evt;
   15e84:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   15e86:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   15e88:	4620      	mov	r0, r4
   15e8a:	f016 f906 	bl	2c09a <net_buf_simple_add>
	ep->num_handles = num_handles;
   15e8e:	2301      	movs	r3, #1
   15e90:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   15e92:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   15e96:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   15e9a:	bd70      	pop	{r4, r5, r6, pc}

00015e9c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   15e9c:	7903      	ldrb	r3, [r0, #4]
   15e9e:	2b02      	cmp	r3, #2
   15ea0:	d008      	beq.n	15eb4 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   15ea2:	3b04      	subs	r3, #4
   15ea4:	b2db      	uxtb	r3, r3
   15ea6:	2b0f      	cmp	r3, #15
   15ea8:	d901      	bls.n	15eae <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   15eaa:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   15eac:	4770      	bx	lr
   15eae:	4a05      	ldr	r2, [pc, #20]	; (15ec4 <hci_get_class+0x28>)
   15eb0:	5cd0      	ldrb	r0, [r2, r3]
   15eb2:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   15eb4:	7f03      	ldrb	r3, [r0, #28]
   15eb6:	f003 0303 	and.w	r3, r3, #3
   15eba:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   15ebc:	bf0c      	ite	eq
   15ebe:	2004      	moveq	r0, #4
   15ec0:	2005      	movne	r0, #5
   15ec2:	4770      	bx	lr
   15ec4:	0002e91c 	.word	0x0002e91c

00015ec8 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   15ec8:	480d      	ldr	r0, [pc, #52]	; (15f00 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   15eca:	4a0e      	ldr	r2, [pc, #56]	; (15f04 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   15ecc:	4b0e      	ldr	r3, [pc, #56]	; (15f08 <hci_init+0x40>)
	dup_count = -1;
   15ece:	490f      	ldr	r1, [pc, #60]	; (15f0c <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   15ed0:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   15ed2:	f04f 34ff 	mov.w	r4, #4294967295
   15ed6:	f641 75ff 	movw	r5, #8191	; 0x1fff
   15eda:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   15ede:	2400      	movs	r4, #0
   15ee0:	2500      	movs	r5, #0
   15ee2:	e9c2 4500 	strd	r4, r5, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   15ee6:	241f      	movs	r4, #31
   15ee8:	2500      	movs	r5, #0
   15eea:	e9c3 4500 	strd	r4, r5, [r3]
	conn_count = 0U;
   15eee:	4b08      	ldr	r3, [pc, #32]	; (15f10 <hci_init+0x48>)
	dup_count = -1;
   15ef0:	f04f 30ff 	mov.w	r0, #4294967295
	conn_count = 0U;
   15ef4:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   15ef6:	bc30      	pop	{r4, r5}
	dup_count = -1;
   15ef8:	6008      	str	r0, [r1, #0]
	conn_count = 0U;
   15efa:	601a      	str	r2, [r3, #0]
}
   15efc:	4770      	bx	lr
   15efe:	bf00      	nop
   15f00:	20000290 	.word	0x20000290
   15f04:	200019b0 	.word	0x200019b0
   15f08:	20000298 	.word	0x20000298
   15f0c:	20002c74 	.word	0x20002c74
   15f10:	20002c70 	.word	0x20002c70

00015f14 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   15f14:	f006 be80 	b.w	1cc18 <lll_csrand_get>

00015f18 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   15f18:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   15f1a:	2300      	movs	r3, #0
   15f1c:	f008 fefc 	bl	1ed18 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   15f20:	2000      	movs	r0, #0
   15f22:	bd08      	pop	{r3, pc}

00015f24 <bt_encrypt_be>:

int bt_encrypt_be(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   15f24:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt_be(key, plaintext, enc_data);
   15f26:	f008 fedd 	bl	1ece4 <ecb_encrypt_be>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   15f2a:	2000      	movs	r0, #0
   15f2c:	bd08      	pop	{r3, pc}
   15f2e:	bf00      	nop

00015f30 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   15f30:	b510      	push	{r4, lr}
   15f32:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   15f34:	f006 fe92 	bl	1cc5c <lll_reset>
	LL_ASSERT(!err);
   15f38:	b970      	cbnz	r0, 15f58 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   15f3a:	f007 faf5 	bl	1d528 <lll_adv_reset>
	LL_ASSERT(!err);
   15f3e:	b9e0      	cbnz	r0, 15f7a <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   15f40:	f008 f932 	bl	1e1a8 <lll_scan_reset>
	LL_ASSERT(!err);
   15f44:	bb50      	cbnz	r0, 15f9c <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   15f46:	f008 f9cf 	bl	1e2e8 <lll_conn_reset>
	LL_ASSERT(!err);
   15f4a:	2800      	cmp	r0, #0
   15f4c:	d137      	bne.n	15fbe <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   15f4e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   15f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15f54:	f00d bdae 	b.w	23ab4 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   15f58:	4a22      	ldr	r2, [pc, #136]	; (15fe4 <perform_lll_reset+0xb4>)
   15f5a:	4923      	ldr	r1, [pc, #140]	; (15fe8 <perform_lll_reset+0xb8>)
   15f5c:	4823      	ldr	r0, [pc, #140]	; (15fec <perform_lll_reset+0xbc>)
   15f5e:	f240 53c9 	movw	r3, #1481	; 0x5c9
   15f62:	f00e faa7 	bl	244b4 <printk>
   15f66:	4040      	eors	r0, r0
   15f68:	f380 8811 	msr	BASEPRI, r0
   15f6c:	f04f 0003 	mov.w	r0, #3
   15f70:	df02      	svc	2
	err = lll_adv_reset();
   15f72:	f007 fad9 	bl	1d528 <lll_adv_reset>
	LL_ASSERT(!err);
   15f76:	2800      	cmp	r0, #0
   15f78:	d0e2      	beq.n	15f40 <perform_lll_reset+0x10>
   15f7a:	4a1a      	ldr	r2, [pc, #104]	; (15fe4 <perform_lll_reset+0xb4>)
   15f7c:	491a      	ldr	r1, [pc, #104]	; (15fe8 <perform_lll_reset+0xb8>)
   15f7e:	481b      	ldr	r0, [pc, #108]	; (15fec <perform_lll_reset+0xbc>)
   15f80:	f240 53ce 	movw	r3, #1486	; 0x5ce
   15f84:	f00e fa96 	bl	244b4 <printk>
   15f88:	4040      	eors	r0, r0
   15f8a:	f380 8811 	msr	BASEPRI, r0
   15f8e:	f04f 0003 	mov.w	r0, #3
   15f92:	df02      	svc	2
	err = lll_scan_reset();
   15f94:	f008 f908 	bl	1e1a8 <lll_scan_reset>
	LL_ASSERT(!err);
   15f98:	2800      	cmp	r0, #0
   15f9a:	d0d4      	beq.n	15f46 <perform_lll_reset+0x16>
   15f9c:	4a11      	ldr	r2, [pc, #68]	; (15fe4 <perform_lll_reset+0xb4>)
   15f9e:	4912      	ldr	r1, [pc, #72]	; (15fe8 <perform_lll_reset+0xb8>)
   15fa0:	4812      	ldr	r0, [pc, #72]	; (15fec <perform_lll_reset+0xbc>)
   15fa2:	f240 53d4 	movw	r3, #1492	; 0x5d4
   15fa6:	f00e fa85 	bl	244b4 <printk>
   15faa:	4040      	eors	r0, r0
   15fac:	f380 8811 	msr	BASEPRI, r0
   15fb0:	f04f 0003 	mov.w	r0, #3
   15fb4:	df02      	svc	2
	err = lll_conn_reset();
   15fb6:	f008 f997 	bl	1e2e8 <lll_conn_reset>
	LL_ASSERT(!err);
   15fba:	2800      	cmp	r0, #0
   15fbc:	d0c7      	beq.n	15f4e <perform_lll_reset+0x1e>
   15fbe:	4a09      	ldr	r2, [pc, #36]	; (15fe4 <perform_lll_reset+0xb4>)
   15fc0:	4909      	ldr	r1, [pc, #36]	; (15fe8 <perform_lll_reset+0xb8>)
   15fc2:	480a      	ldr	r0, [pc, #40]	; (15fec <perform_lll_reset+0xbc>)
   15fc4:	f240 53da 	movw	r3, #1498	; 0x5da
   15fc8:	f00e fa74 	bl	244b4 <printk>
   15fcc:	4040      	eors	r0, r0
   15fce:	f380 8811 	msr	BASEPRI, r0
   15fd2:	f04f 0003 	mov.w	r0, #3
   15fd6:	df02      	svc	2
   15fd8:	4620      	mov	r0, r4
}
   15fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15fde:	f00d bd69 	b.w	23ab4 <z_impl_k_sem_give>
   15fe2:	bf00      	nop
   15fe4:	0002e92c 	.word	0x0002e92c
   15fe8:	0002e968 	.word	0x0002e968
   15fec:	0002e80c 	.word	0x0002e80c

00015ff0 <disabled_cb>:
   15ff0:	f00d bd60 	b.w	23ab4 <z_impl_k_sem_give>

00015ff4 <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   15ff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   15ff8:	4f2f      	ldr	r7, [pc, #188]	; (160b8 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   15ffa:	780b      	ldrb	r3, [r1, #0]
   15ffc:	783c      	ldrb	r4, [r7, #0]
{
   15ffe:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   16000:	7879      	ldrb	r1, [r7, #1]
   16002:	4299      	cmp	r1, r3
   16004:	bf9c      	itt	ls
   16006:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   16008:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   1600a:	429a      	cmp	r2, r3
{
   1600c:	4683      	mov	fp, r0
   1600e:	4692      	mov	sl, r2
   16010:	d046      	beq.n	160a0 <tx_cmplt_get+0xac>
		return NULL;
	}

	i = *idx + 1;
   16012:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   16014:	4e29      	ldr	r6, [pc, #164]	; (160bc <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   16016:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   16018:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   1601c:	4291      	cmp	r1, r2
   1601e:	bf08      	it	eq
   16020:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   16022:	18f1      	adds	r1, r6, r3

	*idx = i;
   16024:	702a      	strb	r2, [r5, #0]
   16026:	d03b      	beq.n	160a0 <tx_cmplt_get+0xac>
		return 0;
	}

	*handle = tx->handle;
   16028:	5af3      	ldrh	r3, [r6, r3]
   1602a:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   1602c:	f04f 0800 	mov.w	r8, #0
   16030:	f04f 0901 	mov.w	r9, #1
   16034:	e020      	b.n	16078 <tx_cmplt_get+0x84>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   16036:	f108 0801 	add.w	r8, r8, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   1603a:	f030 0303 	bics.w	r3, r0, #3
			cmplt++;
   1603e:	fa5f f888 	uxtb.w	r8, r8
   16042:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   16046:	d125      	bne.n	16094 <tx_cmplt_get+0xa0>
	if (*idx >= count) {
   16048:	782b      	ldrb	r3, [r5, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1604a:	7879      	ldrb	r1, [r7, #1]
   1604c:	7838      	ldrb	r0, [r7, #0]
   1604e:	4299      	cmp	r1, r3
   16050:	bf9c      	itt	ls
   16052:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   16054:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   16056:	459a      	cmp	sl, r3
   16058:	d024      	beq.n	160a4 <tx_cmplt_get+0xb0>
	i = *idx + 1;
   1605a:	1c5c      	adds	r4, r3, #1
   1605c:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   1605e:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   16062:	42a1      	cmp	r1, r4
   16064:	bf08      	it	eq
   16066:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   16068:	18f1      	adds	r1, r6, r3
	*idx = i;
   1606a:	702c      	strb	r4, [r5, #0]
   1606c:	d01a      	beq.n	160a4 <tx_cmplt_get+0xb0>
   1606e:	5af0      	ldrh	r0, [r6, r3]
   16070:	f8bb 3000 	ldrh.w	r3, [fp]
   16074:	4298      	cmp	r0, r3
   16076:	d115      	bne.n	160a4 <tx_cmplt_get+0xb0>
		node_tx = tx->node;
   16078:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   1607a:	2801      	cmp	r0, #1
   1607c:	d9db      	bls.n	16036 <tx_cmplt_get+0x42>
   1607e:	f030 0303 	bics.w	r3, r0, #3
   16082:	d00a      	beq.n	1609a <tx_cmplt_get+0xa6>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   16084:	7903      	ldrb	r3, [r0, #4]
   16086:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   1608a:	3b01      	subs	r3, #1
   1608c:	2b01      	cmp	r3, #1
   1608e:	d90c      	bls.n	160aa <tx_cmplt_get+0xb6>
   16090:	2302      	movs	r3, #2
   16092:	604b      	str	r3, [r1, #4]
			ll_tx_mem_release(node_tx);
   16094:	f002 fb60 	bl	18758 <ll_tx_mem_release>
   16098:	e7d6      	b.n	16048 <tx_cmplt_get+0x54>
   1609a:	2302      	movs	r3, #2
   1609c:	604b      	str	r3, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   1609e:	e7d3      	b.n	16048 <tx_cmplt_get+0x54>
		return 0;
   160a0:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   160a4:	4640      	mov	r0, r8
   160a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   160aa:	f108 0801 	add.w	r8, r8, #1
   160ae:	fa5f f888 	uxtb.w	r8, r8
   160b2:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   160b6:	e7ed      	b.n	16094 <tx_cmplt_get+0xa0>
   160b8:	200007f8 	.word	0x200007f8
   160bc:	200007fc 	.word	0x200007fc

000160c0 <rx_demux>:
{
   160c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160c4:	4cb0      	ldr	r4, [pc, #704]	; (16388 <rx_demux+0x2c8>)
	k_sem_give(sem_recv);
   160c6:	4eb1      	ldr	r6, [pc, #708]	; (1638c <rx_demux+0x2cc>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   160c8:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 163b4 <rx_demux+0x2f4>
{
   160cc:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   160ce:	e9d4 0100 	ldrd	r0, r1, [r4]
   160d2:	aa03      	add	r2, sp, #12
   160d4:	f7fc ffb0 	bl	13038 <memq_peek>
		if (link) {
   160d8:	4607      	mov	r7, r0
   160da:	2800      	cmp	r0, #0
   160dc:	d036      	beq.n	1614c <rx_demux+0x8c>
			LL_ASSERT(rx);
   160de:	9b03      	ldr	r3, [sp, #12]
   160e0:	2b00      	cmp	r3, #0
   160e2:	f000 8122 	beq.w	1632a <rx_demux+0x26a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   160e6:	7818      	ldrb	r0, [r3, #0]
   160e8:	aa04      	add	r2, sp, #16
   160ea:	a902      	add	r1, sp, #8
   160ec:	f004 fea8 	bl	1ae40 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   160f0:	4605      	mov	r5, r0
   160f2:	2800      	cmp	r0, #0
   160f4:	d056      	beq.n	161a4 <rx_demux+0xe4>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   160f6:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   160fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   160fe:	f891 9000 	ldrb.w	r9, [r1]
   16102:	9205      	str	r2, [sp, #20]
   16104:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   16108:	f10d 0814 	add.w	r8, sp, #20
   1610c:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   16110:	f004 feac 	bl	1ae6c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   16114:	4629      	mov	r1, r5
   16116:	9a05      	ldr	r2, [sp, #20]
   16118:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1611c:	f004 feee 	bl	1aefc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   16120:	4628      	mov	r0, r5
   16122:	f004 fe67 	bl	1adf4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   16126:	4642      	mov	r2, r8
   16128:	4639      	mov	r1, r7
   1612a:	4648      	mov	r0, r9
   1612c:	f004 fe88 	bl	1ae40 <ull_conn_ack_by_last_peek>
	} while (link);
   16130:	4605      	mov	r5, r0
   16132:	2800      	cmp	r0, #0
   16134:	d1ec      	bne.n	16110 <rx_demux+0x50>
	k_sem_give(sem_recv);
   16136:	6830      	ldr	r0, [r6, #0]
   16138:	f00d fcbc 	bl	23ab4 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1613c:	e9d4 0100 	ldrd	r0, r1, [r4]
   16140:	aa03      	add	r2, sp, #12
   16142:	f7fc ff79 	bl	13038 <memq_peek>
		if (link) {
   16146:	4607      	mov	r7, r0
   16148:	2800      	cmp	r0, #0
   1614a:	d1c8      	bne.n	160de <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1614c:	aa04      	add	r2, sp, #16
   1614e:	a902      	add	r1, sp, #8
   16150:	f10d 0007 	add.w	r0, sp, #7
   16154:	f004 fe5a 	bl	1ae0c <ull_conn_ack_peek>
			if (link) {
   16158:	4605      	mov	r5, r0
   1615a:	2800      	cmp	r0, #0
   1615c:	d061      	beq.n	16222 <rx_demux+0x162>
				rx_demux_conn_tx_ack(ack_last, handle,
   1615e:	9a04      	ldr	r2, [sp, #16]
   16160:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   16164:	f89d 9007 	ldrb.w	r9, [sp, #7]
   16168:	9205      	str	r2, [sp, #20]
   1616a:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1616e:	f10d 0814 	add.w	r8, sp, #20
   16172:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   16176:	f004 fe79 	bl	1ae6c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1617a:	4629      	mov	r1, r5
   1617c:	9a05      	ldr	r2, [sp, #20]
   1617e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16182:	f004 febb 	bl	1aefc <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   16186:	4628      	mov	r0, r5
   16188:	f004 fe34 	bl	1adf4 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1618c:	4642      	mov	r2, r8
   1618e:	4639      	mov	r1, r7
   16190:	4648      	mov	r0, r9
   16192:	f004 fe55 	bl	1ae40 <ull_conn_ack_by_last_peek>
	} while (link);
   16196:	4605      	mov	r5, r0
   16198:	2800      	cmp	r0, #0
   1619a:	d1ec      	bne.n	16176 <rx_demux+0xb6>
	k_sem_give(sem_recv);
   1619c:	6830      	ldr	r0, [r6, #0]
   1619e:	f00d fc89 	bl	23ab4 <z_impl_k_sem_give>
			if (nack) {
   161a2:	e7cb      	b.n	1613c <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
   161a4:	9b03      	ldr	r3, [sp, #12]
   161a6:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   161a8:	791b      	ldrb	r3, [r3, #4]
   161aa:	3b01      	subs	r3, #1
   161ac:	2b0d      	cmp	r3, #13
   161ae:	d808      	bhi.n	161c2 <rx_demux+0x102>
   161b0:	e8df f003 	tbb	[pc, r3]
   161b4:	1507303a 	.word	0x1507303a
   161b8:	07070707 	.word	0x07070707
   161bc:	07070707 	.word	0x07070707
   161c0:	1526      	.short	0x1526
		LL_ASSERT(0);
   161c2:	4a73      	ldr	r2, [pc, #460]	; (16390 <rx_demux+0x2d0>)
   161c4:	4973      	ldr	r1, [pc, #460]	; (16394 <rx_demux+0x2d4>)
   161c6:	4874      	ldr	r0, [pc, #464]	; (16398 <rx_demux+0x2d8>)
   161c8:	f240 7374 	movw	r3, #1908	; 0x774
   161cc:	f00e f972 	bl	244b4 <printk>
   161d0:	4040      	eors	r0, r0
   161d2:	f380 8811 	msr	BASEPRI, r0
   161d6:	f04f 0003 	mov.w	r0, #3
   161da:	df02      	svc	2
			if (nack) {
   161dc:	e777      	b.n	160ce <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   161de:	496a      	ldr	r1, [pc, #424]	; (16388 <rx_demux+0x2c8>)
   161e0:	6860      	ldr	r0, [r4, #4]
   161e2:	2200      	movs	r2, #0
   161e4:	f7fc ff30 	bl	13048 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   161e8:	4b6c      	ldr	r3, [pc, #432]	; (1639c <rx_demux+0x2dc>)
		ll_rx_put(link, rx);
   161ea:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   161ec:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   161ee:	4a6c      	ldr	r2, [pc, #432]	; (163a0 <rx_demux+0x2e0>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   161f0:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   161f2:	4638      	mov	r0, r7
   161f4:	f7fc ff18 	bl	13028 <memq_enqueue>
	k_sem_give(sem_recv);
   161f8:	6830      	ldr	r0, [r6, #0]
   161fa:	f00d fc5b 	bl	23ab4 <z_impl_k_sem_give>
			if (nack) {
   161fe:	e79d      	b.n	1613c <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   16200:	4961      	ldr	r1, [pc, #388]	; (16388 <rx_demux+0x2c8>)
   16202:	6860      	ldr	r0, [r4, #4]
   16204:	2200      	movs	r2, #0
   16206:	f7fc ff1f 	bl	13048 <memq_dequeue>
		ull_conn_setup(link, rx);
   1620a:	9905      	ldr	r1, [sp, #20]
   1620c:	4638      	mov	r0, r7
   1620e:	f002 fdd3 	bl	18db8 <ull_conn_setup>
			if (nack) {
   16212:	e75c      	b.n	160ce <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   16214:	a905      	add	r1, sp, #20
   16216:	4638      	mov	r0, r7
   16218:	f002 fdf0 	bl	18dfc <ull_conn_rx>
		if (nack) {
   1621c:	2800      	cmp	r0, #0
   1621e:	f000 80d1 	beq.w	163c4 <rx_demux+0x304>
}
   16222:	b007      	add	sp, #28
   16224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   16228:	4957      	ldr	r1, [pc, #348]	; (16388 <rx_demux+0x2c8>)
   1622a:	6860      	ldr	r0, [r4, #4]
   1622c:	2200      	movs	r2, #0
   1622e:	f7fc ff0b 	bl	13048 <memq_dequeue>
		rx_demux_event_done(link, rx);
   16232:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   16234:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   16238:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
   1623c:	b17b      	cbz	r3, 1625e <rx_demux+0x19e>
   1623e:	2b01      	cmp	r3, #1
   16240:	f000 80bc 	beq.w	163bc <rx_demux+0x2fc>
		LL_ASSERT(0);
   16244:	4a52      	ldr	r2, [pc, #328]	; (16390 <rx_demux+0x2d0>)
   16246:	4953      	ldr	r1, [pc, #332]	; (16394 <rx_demux+0x2d4>)
   16248:	4853      	ldr	r0, [pc, #332]	; (16398 <rx_demux+0x2d8>)
   1624a:	f240 73b4 	movw	r3, #1972	; 0x7b4
   1624e:	f00e f931 	bl	244b4 <printk>
   16252:	4040      	eors	r0, r0
   16254:	f380 8811 	msr	BASEPRI, r0
   16258:	f04f 0003 	mov.w	r0, #3
   1625c:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1625e:	4a51      	ldr	r2, [pc, #324]	; (163a4 <rx_demux+0x2e4>)
   16260:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   16262:	f892 c001 	ldrb.w	ip, [r2, #1]
   16266:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   16268:	1c4b      	adds	r3, r1, #1
   1626a:	b2db      	uxtb	r3, r3
		last = 0U;
   1626c:	459c      	cmp	ip, r3
   1626e:	bf08      	it	eq
   16270:	2300      	moveq	r3, #0
	if (last == first) {
   16272:	4298      	cmp	r0, r3
	done->extra.type = 0U;
   16274:	f04f 0c00 	mov.w	ip, #0
   16278:	f885 c020 	strb.w	ip, [r5, #32]
   1627c:	f000 80b6 	beq.w	163ec <rx_demux+0x32c>
	done->hdr.link = link;
   16280:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16282:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16284:	fb00 2101 	mla	r1, r0, r1, r2
   16288:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1628a:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   1628c:	4d46      	ldr	r5, [pc, #280]	; (163a8 <rx_demux+0x2e8>)
   1628e:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
   16290:	78ea      	ldrb	r2, [r5, #3]
   16292:	f895 c000 	ldrb.w	ip, [r5]
   16296:	429a      	cmp	r2, r3
   16298:	d02a      	beq.n	162f0 <rx_demux+0x230>
	return (void *)(fifo + first * size);
   1629a:	f105 0a04 	add.w	sl, r5, #4
   1629e:	fb03 ac0c 	mla	ip, r3, ip, sl
	while (next) {
   162a2:	f1bc 0f00 	cmp.w	ip, #0
   162a6:	d023      	beq.n	162f0 <rx_demux+0x230>
		uint8_t is_aborted = next->is_aborted;
   162a8:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
   162ac:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   162ae:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   162b2:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   162b6:	d547      	bpl.n	16348 <rx_demux+0x288>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   162b8:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   162ba:	78ab      	ldrb	r3, [r5, #2]
   162bc:	f895 c000 	ldrb.w	ip, [r5]
   162c0:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   162c2:	429a      	cmp	r2, r3
   162c4:	d014      	beq.n	162f0 <rx_demux+0x230>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   162c6:	3301      	adds	r3, #1
   162c8:	b2db      	uxtb	r3, r3
	if (_first == count) {
   162ca:	4299      	cmp	r1, r3
   162cc:	d054      	beq.n	16378 <rx_demux+0x2b8>
	if (first == last) {
   162ce:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   162d0:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   162d2:	d00d      	beq.n	162f0 <rx_demux+0x230>
	return (void *)(fifo + first * size);
   162d4:	fb03 ac0c 	mla	ip, r3, ip, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   162d8:	f1bc 0f00 	cmp.w	ip, #0
   162dc:	d008      	beq.n	162f0 <rx_demux+0x230>
   162de:	2f00      	cmp	r7, #0
   162e0:	d1e2      	bne.n	162a8 <rx_demux+0x1e8>
   162e2:	f1b8 0f00 	cmp.w	r8, #0
   162e6:	d003      	beq.n	162f0 <rx_demux+0x230>
   162e8:	f89c 3020 	ldrb.w	r3, [ip, #32]
   162ec:	07db      	lsls	r3, r3, #31
   162ee:	d5db      	bpl.n	162a8 <rx_demux+0x1e8>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   162f0:	f1b9 0f00 	cmp.w	r9, #0
   162f4:	f43f aeeb 	beq.w	160ce <rx_demux+0xe>
	return hdr->ref;
   162f8:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   162fc:	2b00      	cmp	r3, #0
   162fe:	f000 8083 	beq.w	16408 <rx_demux+0x348>
	return hdr->ref--;
   16302:	f899 3000 	ldrb.w	r3, [r9]
   16306:	3b01      	subs	r3, #1
   16308:	b2db      	uxtb	r3, r3
   1630a:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
   1630e:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   16312:	2b00      	cmp	r3, #0
   16314:	f47f aedb 	bne.w	160ce <rx_demux+0xe>
   16318:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1631c:	2b00      	cmp	r3, #0
   1631e:	f43f aed6 	beq.w	160ce <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   16322:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16326:	4798      	blx	r3
			if (nack) {
   16328:	e6d1      	b.n	160ce <rx_demux+0xe>
			LL_ASSERT(rx);
   1632a:	4a19      	ldr	r2, [pc, #100]	; (16390 <rx_demux+0x2d0>)
   1632c:	491f      	ldr	r1, [pc, #124]	; (163ac <rx_demux+0x2ec>)
   1632e:	481a      	ldr	r0, [pc, #104]	; (16398 <rx_demux+0x2d8>)
   16330:	f240 6374 	movw	r3, #1652	; 0x674
   16334:	f00e f8be 	bl	244b4 <printk>
   16338:	4040      	eors	r0, r0
   1633a:	f380 8811 	msr	BASEPRI, r0
   1633e:	f04f 0003 	mov.w	r0, #3
   16342:	df02      	svc	2
   16344:	9b03      	ldr	r3, [sp, #12]
   16346:	e6ce      	b.n	160e6 <rx_demux+0x26>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   16348:	465b      	mov	r3, fp
   1634a:	463a      	mov	r2, r7
   1634c:	4639      	mov	r1, r7
   1634e:	2001      	movs	r0, #1
			mfy.param = next;
   16350:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   16354:	f7fc fedc 	bl	13110 <mayfly_enqueue>
			LL_ASSERT(!ret);
   16358:	2800      	cmp	r0, #0
   1635a:	d0ad      	beq.n	162b8 <rx_demux+0x1f8>
   1635c:	4a0c      	ldr	r2, [pc, #48]	; (16390 <rx_demux+0x2d0>)
   1635e:	4914      	ldr	r1, [pc, #80]	; (163b0 <rx_demux+0x2f0>)
   16360:	480d      	ldr	r0, [pc, #52]	; (16398 <rx_demux+0x2d8>)
   16362:	f240 73cc 	movw	r3, #1996	; 0x7cc
   16366:	f00e f8a5 	bl	244b4 <printk>
   1636a:	4040      	eors	r0, r0
   1636c:	f380 8811 	msr	BASEPRI, r0
   16370:	f04f 0003 	mov.w	r0, #3
   16374:	df02      	svc	2
   16376:	e79f      	b.n	162b8 <rx_demux+0x1f8>
	*first = _first; /* Write back read-index */
   16378:	2300      	movs	r3, #0
   1637a:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   1637c:	2a00      	cmp	r2, #0
   1637e:	d0b7      	beq.n	162f0 <rx_demux+0x230>
	return (void *)(fifo + first * size);
   16380:	f8df c034 	ldr.w	ip, [pc, #52]	; 163b8 <rx_demux+0x2f8>
   16384:	e7ab      	b.n	162de <rx_demux+0x21e>
   16386:	bf00      	nop
   16388:	200030dc 	.word	0x200030dc
   1638c:	200030e4 	.word	0x200030e4
   16390:	0002e92c 	.word	0x0002e92c
   16394:	0002e86c 	.word	0x0002e86c
   16398:	0002e80c 	.word	0x0002e80c
   1639c:	200007f8 	.word	0x200007f8
   163a0:	200030d8 	.word	0x200030d8
   163a4:	20000694 	.word	0x20000694
   163a8:	200006d4 	.word	0x200006d4
   163ac:	0002e970 	.word	0x0002e970
   163b0:	0002e974 	.word	0x0002e974
   163b4:	2000085c 	.word	0x2000085c
   163b8:	200006d8 	.word	0x200006d8
		ull_conn_done(done);
   163bc:	4628      	mov	r0, r5
   163be:	f004 fa8b 	bl	1a8d8 <ull_conn_done>
		break;
   163c2:	e74c      	b.n	1625e <rx_demux+0x19e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   163c4:	4917      	ldr	r1, [pc, #92]	; (16424 <rx_demux+0x364>)
   163c6:	4602      	mov	r2, r0
   163c8:	6860      	ldr	r0, [r4, #4]
   163ca:	f7fc fe3d 	bl	13048 <memq_dequeue>
		if (rx) {
   163ce:	9905      	ldr	r1, [sp, #20]
   163d0:	2900      	cmp	r1, #0
   163d2:	f43f ae7c 	beq.w	160ce <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   163d6:	4b14      	ldr	r3, [pc, #80]	; (16428 <rx_demux+0x368>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   163d8:	4a14      	ldr	r2, [pc, #80]	; (1642c <rx_demux+0x36c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   163da:	78db      	ldrb	r3, [r3, #3]
   163dc:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   163de:	4638      	mov	r0, r7
   163e0:	f7fc fe22 	bl	13028 <memq_enqueue>
	k_sem_give(sem_recv);
   163e4:	6830      	ldr	r0, [r6, #0]
   163e6:	f00d fb65 	bl	23ab4 <z_impl_k_sem_give>
			if (nack) {
   163ea:	e670      	b.n	160ce <rx_demux+0xe>
	LL_ASSERT(release == done);
   163ec:	4a10      	ldr	r2, [pc, #64]	; (16430 <rx_demux+0x370>)
   163ee:	4911      	ldr	r1, [pc, #68]	; (16434 <rx_demux+0x374>)
   163f0:	4811      	ldr	r0, [pc, #68]	; (16438 <rx_demux+0x378>)
   163f2:	f240 73bb 	movw	r3, #1979	; 0x7bb
   163f6:	f00e f85d 	bl	244b4 <printk>
   163fa:	4040      	eors	r0, r0
   163fc:	f380 8811 	msr	BASEPRI, r0
   16400:	f04f 0003 	mov.w	r0, #3
   16404:	df02      	svc	2
   16406:	e741      	b.n	1628c <rx_demux+0x1cc>
	LL_ASSERT(ull_ref_get(ull_hdr));
   16408:	4a09      	ldr	r2, [pc, #36]	; (16430 <rx_demux+0x370>)
   1640a:	490c      	ldr	r1, [pc, #48]	; (1643c <rx_demux+0x37c>)
   1640c:	480a      	ldr	r0, [pc, #40]	; (16438 <rx_demux+0x378>)
   1640e:	f240 73de 	movw	r3, #2014	; 0x7de
   16412:	f00e f84f 	bl	244b4 <printk>
   16416:	4040      	eors	r0, r0
   16418:	f380 8811 	msr	BASEPRI, r0
   1641c:	f04f 0003 	mov.w	r0, #3
   16420:	df02      	svc	2
   16422:	e76e      	b.n	16302 <rx_demux+0x242>
   16424:	200030dc 	.word	0x200030dc
   16428:	200007f8 	.word	0x200007f8
   1642c:	200030d8 	.word	0x200030d8
   16430:	0002e92c 	.word	0x0002e92c
   16434:	0002e994 	.word	0x0002e994
   16438:	0002e80c 	.word	0x0002e80c
   1643c:	0002e97c 	.word	0x0002e97c

00016440 <ll_init>:
{
   16440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   16444:	4ba1      	ldr	r3, [pc, #644]	; (166cc <ll_init+0x28c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16446:	4da2      	ldr	r5, [pc, #648]	; (166d0 <ll_init+0x290>)
	sem_recv = sem_rx;
   16448:	6018      	str	r0, [r3, #0]
{
   1644a:	b086      	sub	sp, #24
	cntr_init();
   1644c:	f008 fbce 	bl	1ebec <cntr_init>
	mayfly_init();
   16450:	f7fc fe0a 	bl	13068 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16454:	489f      	ldr	r0, [pc, #636]	; (166d4 <ll_init+0x294>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   16456:	4ca0      	ldr	r4, [pc, #640]	; (166d8 <ll_init+0x298>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16458:	4ba0      	ldr	r3, [pc, #640]	; (166dc <ll_init+0x29c>)
   1645a:	4aa1      	ldr	r2, [pc, #644]	; (166e0 <ll_init+0x2a0>)
   1645c:	9305      	str	r3, [sp, #20]
   1645e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   16462:	9204      	str	r2, [sp, #16]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   16464:	2003      	movs	r0, #3
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   16466:	2102      	movs	r1, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16468:	220c      	movs	r2, #12
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1646a:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1646c:	9201      	str	r2, [sp, #4]
   1646e:	9400      	str	r4, [sp, #0]
   16470:	4a9c      	ldr	r2, [pc, #624]	; (166e4 <ll_init+0x2a4>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   16472:	7421      	strb	r1, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   16474:	7020      	strb	r0, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   16476:	7620      	strb	r0, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   16478:	2108      	movs	r1, #8
   1647a:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1647c:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1647e:	f7fd fff5 	bl	1446c <ticker_init>
	LL_ASSERT(!err);
   16482:	2800      	cmp	r0, #0
   16484:	f040 80f2 	bne.w	1666c <ll_init+0x22c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16488:	2201      	movs	r2, #1
   1648a:	2100      	movs	r1, #0
   1648c:	4896      	ldr	r0, [pc, #600]	; (166e8 <ll_init+0x2a8>)
   1648e:	f017 f809 	bl	2d4a4 <z_impl_k_sem_init>
	err = lll_init();
   16492:	f006 fb8f 	bl	1cbb4 <lll_init>
	if (err) {
   16496:	4604      	mov	r4, r0
   16498:	b118      	cbz	r0, 164a2 <ll_init+0x62>
}
   1649a:	4620      	mov	r0, r4
   1649c:	b006      	add	sp, #24
   1649e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   164a2:	4b92      	ldr	r3, [pc, #584]	; (166ec <ll_init+0x2ac>)
		link = mem_acquire(&mem_link_done.free);
   164a4:	f8df 824c 	ldr.w	r8, [pc, #588]	; 166f4 <ll_init+0x2b4>
   164a8:	4d91      	ldr	r5, [pc, #580]	; (166f0 <ll_init+0x2b0>)
		rx = mem_acquire(&mem_done.free);
   164aa:	4f90      	ldr	r7, [pc, #576]	; (166ec <ll_init+0x2ac>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   164ac:	1d18      	adds	r0, r3, #4
   164ae:	2203      	movs	r2, #3
   164b0:	2134      	movs	r1, #52	; 0x34
   164b2:	f7fc fd27 	bl	12f04 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   164b6:	4643      	mov	r3, r8
   164b8:	2203      	movs	r2, #3
   164ba:	1d18      	adds	r0, r3, #4
   164bc:	2108      	movs	r1, #8
   164be:	f7fc fd21 	bl	12f04 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   164c2:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   164c4:	786a      	ldrb	r2, [r5, #1]
   164c6:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   164c8:	3401      	adds	r4, #1
   164ca:	b2e4      	uxtb	r4, r4
		last = 0U;
   164cc:	42a2      	cmp	r2, r4
   164ce:	bf08      	it	eq
   164d0:	2400      	moveq	r4, #0
	if (last == first) {
   164d2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   164d4:	4640      	mov	r0, r8
   164d6:	d013      	beq.n	16500 <ll_init+0xc0>
   164d8:	f7fc fd42 	bl	12f60 <mem_acquire>
   164dc:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   164de:	4638      	mov	r0, r7
		if (!link) {
   164e0:	b176      	cbz	r6, 16500 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
   164e2:	f7fc fd3d 	bl	12f60 <mem_acquire>
		if (!rx) {
   164e6:	b138      	cbz	r0, 164f8 <ll_init+0xb8>
		rx->link = link;
   164e8:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   164ea:	78ea      	ldrb	r2, [r5, #3]
   164ec:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   164ee:	fb02 5303 	mla	r3, r2, r3, r5
   164f2:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   164f4:	70ec      	strb	r4, [r5, #3]
}
   164f6:	e7e5      	b.n	164c4 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
   164f8:	497e      	ldr	r1, [pc, #504]	; (166f4 <ll_init+0x2b4>)
   164fa:	4630      	mov	r0, r6
   164fc:	f7fc fd4a 	bl	12f94 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   16500:	4b7d      	ldr	r3, [pc, #500]	; (166f8 <ll_init+0x2b8>)
   16502:	2209      	movs	r2, #9
   16504:	1d18      	adds	r0, r3, #4
   16506:	2148      	movs	r1, #72	; 0x48
   16508:	f7fc fcfc 	bl	12f04 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1650c:	4b7b      	ldr	r3, [pc, #492]	; (166fc <ll_init+0x2bc>)
   1650e:	220b      	movs	r2, #11
   16510:	1d18      	adds	r0, r3, #4
   16512:	2108      	movs	r1, #8
   16514:	f7fc fcf6 	bl	12f04 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   16518:	4878      	ldr	r0, [pc, #480]	; (166fc <ll_init+0x2bc>)
   1651a:	f7fc fd21 	bl	12f60 <mem_acquire>
	LL_ASSERT(link);
   1651e:	4604      	mov	r4, r0
   16520:	2800      	cmp	r0, #0
   16522:	f000 80bf 	beq.w	166a4 <ll_init+0x264>
	MEMQ_INIT(ull_rx, link);
   16526:	4a76      	ldr	r2, [pc, #472]	; (16700 <ll_init+0x2c0>)
   16528:	4620      	mov	r0, r4
   1652a:	1f11      	subs	r1, r2, #4
   1652c:	f7fc fd6e 	bl	1300c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   16530:	4872      	ldr	r0, [pc, #456]	; (166fc <ll_init+0x2bc>)
   16532:	f7fc fd15 	bl	12f60 <mem_acquire>
	LL_ASSERT(link);
   16536:	4604      	mov	r4, r0
   16538:	2800      	cmp	r0, #0
   1653a:	f000 80a5 	beq.w	16688 <ll_init+0x248>
	MEMQ_INIT(ll_rx, link);
   1653e:	4a71      	ldr	r2, [pc, #452]	; (16704 <ll_init+0x2c4>)
	mem_link_rx.quota_pdu = RX_CNT;
   16540:	4d71      	ldr	r5, [pc, #452]	; (16708 <ll_init+0x2c8>)
   16542:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 16720 <ll_init+0x2e0>
		rx = mem_acquire(&mem_pdu_rx.free);
   16546:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 166f8 <ll_init+0x2b8>
	MEMQ_INIT(ll_rx, link);
   1654a:	4620      	mov	r0, r4
   1654c:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   1654e:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
   16550:	f7fc fd5c 	bl	1300c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   16554:	2307      	movs	r3, #7
   16556:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
   1655a:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
   1655e:	2700      	movs	r7, #0
	if (last == count) {
   16560:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16564:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   16568:	3401      	adds	r4, #1
   1656a:	b2e4      	uxtb	r4, r4
		last = 0U;
   1656c:	42a2      	cmp	r2, r4
   1656e:	bf08      	it	eq
   16570:	2400      	moveq	r4, #0
	if (last == first) {
   16572:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   16574:	4630      	mov	r0, r6
   16576:	d049      	beq.n	1660c <ll_init+0x1cc>
   16578:	f7fc fcf2 	bl	12f60 <mem_acquire>
   1657c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1657e:	4640      	mov	r0, r8
		if (!link) {
   16580:	f1ba 0f00 	cmp.w	sl, #0
   16584:	d042      	beq.n	1660c <ll_init+0x1cc>
		rx = mem_acquire(&mem_pdu_rx.free);
   16586:	f7fc fceb 	bl	12f60 <mem_acquire>
		if (!rx) {
   1658a:	2800      	cmp	r0, #0
   1658c:	d03a      	beq.n	16604 <ll_init+0x1c4>
		link->mem = NULL;
   1658e:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   16592:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16596:	f899 1003 	ldrb.w	r1, [r9, #3]
   1659a:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
   1659e:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   165a0:	fb01 9202 	mla	r2, r1, r2, r9
   165a4:	3b01      	subs	r3, #1
   165a6:	b2db      	uxtb	r3, r3
   165a8:	6050      	str	r0, [r2, #4]
   165aa:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   165ac:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
   165b0:	2b00      	cmp	r3, #0
   165b2:	d1d5      	bne.n	16560 <ll_init+0x120>
	err = lll_adv_init();
   165b4:	f006 ffb6 	bl	1d524 <lll_adv_init>
	if (err) {
   165b8:	4604      	mov	r4, r0
   165ba:	2800      	cmp	r0, #0
   165bc:	f47f af6d 	bne.w	1649a <ll_init+0x5a>
	err = ull_adv_init();
   165c0:	f001 f9d0 	bl	17964 <ull_adv_init>
	if (err) {
   165c4:	4604      	mov	r4, r0
   165c6:	2800      	cmp	r0, #0
   165c8:	f47f af67 	bne.w	1649a <ll_init+0x5a>
	err = lll_scan_init();
   165cc:	f007 fdea 	bl	1e1a4 <lll_scan_init>
	if (err) {
   165d0:	4604      	mov	r4, r0
   165d2:	2800      	cmp	r0, #0
   165d4:	f47f af61 	bne.w	1649a <ll_init+0x5a>
	err = ull_scan_init();
   165d8:	f001 fbb0 	bl	17d3c <ull_scan_init>
	if (err) {
   165dc:	4604      	mov	r4, r0
   165de:	2800      	cmp	r0, #0
   165e0:	f47f af5b 	bne.w	1649a <ll_init+0x5a>
	err = lll_conn_init();
   165e4:	f007 fe76 	bl	1e2d4 <lll_conn_init>
	if (err) {
   165e8:	4604      	mov	r4, r0
   165ea:	2800      	cmp	r0, #0
   165ec:	f47f af55 	bne.w	1649a <ll_init+0x5a>
	err = ull_conn_init();
   165f0:	f002 fb5a 	bl	18ca8 <ull_conn_init>
	if (err) {
   165f4:	4604      	mov	r4, r0
   165f6:	2800      	cmp	r0, #0
   165f8:	f47f af4f 	bne.w	1649a <ll_init+0x5a>
		ull_filter_reset(true);
   165fc:	2001      	movs	r0, #1
   165fe:	f005 fec3 	bl	1c388 <ull_filter_reset>
	return  0;
   16602:	e74a      	b.n	1649a <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
   16604:	493d      	ldr	r1, [pc, #244]	; (166fc <ll_init+0x2bc>)
   16606:	4650      	mov	r0, sl
   16608:	f7fc fcc4 	bl	12f94 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   1660c:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1660e:	1e5f      	subs	r7, r3, #1
   16610:	b2ff      	uxtb	r7, r7
   16612:	2b00      	cmp	r3, #0
   16614:	d0ce      	beq.n	165b4 <ll_init+0x174>
   16616:	4e3d      	ldr	r6, [pc, #244]	; (1670c <ll_init+0x2cc>)
		link = mem_acquire(&mem_link_rx.free);
   16618:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 166fc <ll_init+0x2bc>
   1661c:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1661e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 166f8 <ll_init+0x2b8>
	if (last == count) {
   16622:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16624:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   16626:	3401      	adds	r4, #1
   16628:	b2e4      	uxtb	r4, r4
		last = 0U;
   1662a:	42a2      	cmp	r2, r4
   1662c:	bf08      	it	eq
   1662e:	2400      	moveq	r4, #0
	if (last == first) {
   16630:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   16632:	4648      	mov	r0, r9
   16634:	d0be      	beq.n	165b4 <ll_init+0x174>
   16636:	f7fc fc93 	bl	12f60 <mem_acquire>
   1663a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1663c:	4640      	mov	r0, r8
		if (!link) {
   1663e:	f1ba 0f00 	cmp.w	sl, #0
   16642:	d0b7      	beq.n	165b4 <ll_init+0x174>
		rx = mem_acquire(&mem_pdu_rx.free);
   16644:	f7fc fc8c 	bl	12f60 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16648:	3f01      	subs	r7, #1
   1664a:	b2ff      	uxtb	r7, r7
		if (!rx) {
   1664c:	2800      	cmp	r0, #0
   1664e:	d037      	beq.n	166c0 <ll_init+0x280>
		rx->link = link;
   16650:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16654:	78f1      	ldrb	r1, [r6, #3]
   16656:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   16658:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1665a:	fb01 6202 	mla	r2, r1, r2, r6
   1665e:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16660:	2fff      	cmp	r7, #255	; 0xff
   16662:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   16664:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   16666:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16668:	d1db      	bne.n	16622 <ll_init+0x1e2>
   1666a:	e7a3      	b.n	165b4 <ll_init+0x174>
	LL_ASSERT(!err);
   1666c:	4a28      	ldr	r2, [pc, #160]	; (16710 <ll_init+0x2d0>)
   1666e:	4929      	ldr	r1, [pc, #164]	; (16714 <ll_init+0x2d4>)
   16670:	4829      	ldr	r0, [pc, #164]	; (16718 <ll_init+0x2d8>)
   16672:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   16676:	f00d ff1d 	bl	244b4 <printk>
   1667a:	4040      	eors	r0, r0
   1667c:	f380 8811 	msr	BASEPRI, r0
   16680:	f04f 0003 	mov.w	r0, #3
   16684:	df02      	svc	2
   16686:	e6ff      	b.n	16488 <ll_init+0x48>
	LL_ASSERT(link);
   16688:	4a21      	ldr	r2, [pc, #132]	; (16710 <ll_init+0x2d0>)
   1668a:	4924      	ldr	r1, [pc, #144]	; (1671c <ll_init+0x2dc>)
   1668c:	4822      	ldr	r0, [pc, #136]	; (16718 <ll_init+0x2d8>)
   1668e:	f240 53b7 	movw	r3, #1463	; 0x5b7
   16692:	f00d ff0f 	bl	244b4 <printk>
   16696:	4040      	eors	r0, r0
   16698:	f380 8811 	msr	BASEPRI, r0
   1669c:	f04f 0003 	mov.w	r0, #3
   166a0:	df02      	svc	2
   166a2:	e74c      	b.n	1653e <ll_init+0xfe>
	LL_ASSERT(link);
   166a4:	4a1a      	ldr	r2, [pc, #104]	; (16710 <ll_init+0x2d0>)
   166a6:	491d      	ldr	r1, [pc, #116]	; (1671c <ll_init+0x2dc>)
   166a8:	481b      	ldr	r0, [pc, #108]	; (16718 <ll_init+0x2d8>)
   166aa:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
   166ae:	f00d ff01 	bl	244b4 <printk>
   166b2:	4040      	eors	r0, r0
   166b4:	f380 8811 	msr	BASEPRI, r0
   166b8:	f04f 0003 	mov.w	r0, #3
   166bc:	df02      	svc	2
   166be:	e732      	b.n	16526 <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
   166c0:	490e      	ldr	r1, [pc, #56]	; (166fc <ll_init+0x2bc>)
   166c2:	4650      	mov	r0, sl
   166c4:	f7fc fc66 	bl	12f94 <mem_release>
			break;
   166c8:	e774      	b.n	165b4 <ll_init+0x174>
   166ca:	bf00      	nop
   166cc:	200030e4 	.word	0x200030e4
   166d0:	0001f955 	.word	0x0001f955
   166d4:	20003280 	.word	0x20003280
   166d8:	200034f0 	.word	0x200034f0
   166dc:	0001fa99 	.word	0x0001fa99
   166e0:	0001f9b9 	.word	0x0001f9b9
   166e4:	20003100 	.word	0x20003100
   166e8:	200030e8 	.word	0x200030e8
   166ec:	20002d2c 	.word	0x20002d2c
   166f0:	20000694 	.word	0x20000694
   166f4:	20002dcc 	.word	0x20002dcc
   166f8:	20002e48 	.word	0x20002e48
   166fc:	20002dec 	.word	0x20002dec
   16700:	200030e0 	.word	0x200030e0
   16704:	200030d8 	.word	0x200030d8
   16708:	20002de8 	.word	0x20002de8
   1670c:	200006bc 	.word	0x200006bc
   16710:	0002e92c 	.word	0x0002e92c
   16714:	0002e968 	.word	0x0002e968
   16718:	0002e80c 	.word	0x0002e80c
   1671c:	0002ec30 	.word	0x0002ec30
   16720:	200006a8 	.word	0x200006a8

00016724 <ll_reset>:
{
   16724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16728:	b087      	sub	sp, #28
	err = ull_adv_reset();
   1672a:	f001 f91d 	bl	17968 <ull_adv_reset>
	LL_ASSERT(!err);
   1672e:	2800      	cmp	r0, #0
   16730:	f040 80e9 	bne.w	16906 <ll_reset+0x1e2>
	err = ull_scan_reset();
   16734:	f001 fbda 	bl	17eec <ull_scan_reset>
	LL_ASSERT(!err);
   16738:	2800      	cmp	r0, #0
   1673a:	f040 80f6 	bne.w	1692a <ll_reset+0x206>
	err = ull_conn_reset();
   1673e:	f002 fab5 	bl	18cac <ull_conn_reset>
	LL_ASSERT(!err);
   16742:	2800      	cmp	r0, #0
   16744:	f040 8103 	bne.w	1694e <ll_reset+0x22a>
	MFIFO_INIT(tx_ack);
   16748:	4b9f      	ldr	r3, [pc, #636]	; (169c8 <ll_reset+0x2a4>)
	MFIFO_INIT(done);
   1674a:	4ea0      	ldr	r6, [pc, #640]	; (169cc <ll_reset+0x2a8>)
	MFIFO_INIT(pdu_rx_free);
   1674c:	4fa0      	ldr	r7, [pc, #640]	; (169d0 <ll_reset+0x2ac>)
	MFIFO_INIT(ll_pdu_rx_free);
   1674e:	4da1      	ldr	r5, [pc, #644]	; (169d4 <ll_reset+0x2b0>)
	MFIFO_INIT(tx_ack);
   16750:	2400      	movs	r4, #0
   16752:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   16754:	4620      	mov	r0, r4
   16756:	f005 fe17 	bl	1c388 <ull_filter_reset>
	MFIFO_INIT(prep);
   1675a:	4b9f      	ldr	r3, [pc, #636]	; (169d8 <ll_reset+0x2b4>)
	MFIFO_INIT(done);
   1675c:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   1675e:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   16760:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   16762:	806c      	strh	r4, [r5, #2]
   16764:	2201      	movs	r2, #1
   16766:	4621      	mov	r1, r4
   16768:	4668      	mov	r0, sp
   1676a:	f016 fe9b 	bl	2d4a4 <z_impl_k_sem_init>
		mfy.param = &sem;
   1676e:	4b9b      	ldr	r3, [pc, #620]	; (169dc <ll_reset+0x2b8>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   16770:	4622      	mov	r2, r4
   16772:	4621      	mov	r1, r4
   16774:	2003      	movs	r0, #3
		mfy.param = &sem;
   16776:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1677a:	f7fc fcc9 	bl	13110 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1677e:	2800      	cmp	r0, #0
   16780:	f040 80f3 	bne.w	1696a <ll_reset+0x246>
	return z_impl_k_sem_take(sem, timeout);
   16784:	f04f 32ff 	mov.w	r2, #4294967295
   16788:	f04f 33ff 	mov.w	r3, #4294967295
   1678c:	4668      	mov	r0, sp
   1678e:	f00d f9b7 	bl	23b00 <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   16792:	4b93      	ldr	r3, [pc, #588]	; (169e0 <ll_reset+0x2bc>)
		link = mem_acquire(&mem_link_done.free);
   16794:	f8df 924c 	ldr.w	r9, [pc, #588]	; 169e4 <ll_reset+0x2c0>
		rx = mem_acquire(&mem_done.free);
   16798:	f8df 8244 	ldr.w	r8, [pc, #580]	; 169e0 <ll_reset+0x2bc>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1679c:	1d18      	adds	r0, r3, #4
   1679e:	2203      	movs	r2, #3
   167a0:	2134      	movs	r1, #52	; 0x34
   167a2:	f7fc fbaf 	bl	12f04 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   167a6:	464b      	mov	r3, r9
   167a8:	2203      	movs	r2, #3
   167aa:	1d18      	adds	r0, r3, #4
   167ac:	2108      	movs	r1, #8
   167ae:	f7fc fba9 	bl	12f04 <mem_init>
static inline void done_alloc(void)
   167b2:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   167b4:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   167b6:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   167b8:	3401      	adds	r4, #1
   167ba:	b2e4      	uxtb	r4, r4
		last = 0U;
   167bc:	42a2      	cmp	r2, r4
   167be:	bf08      	it	eq
   167c0:	2400      	moveq	r4, #0
	if (last == first) {
   167c2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   167c4:	4648      	mov	r0, r9
   167c6:	d016      	beq.n	167f6 <ll_reset+0xd2>
   167c8:	f7fc fbca 	bl	12f60 <mem_acquire>
   167cc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   167ce:	4640      	mov	r0, r8
		if (!link) {
   167d0:	f1ba 0f00 	cmp.w	sl, #0
   167d4:	d00f      	beq.n	167f6 <ll_reset+0xd2>
		rx = mem_acquire(&mem_done.free);
   167d6:	f7fc fbc3 	bl	12f60 <mem_acquire>
		if (!rx) {
   167da:	b140      	cbz	r0, 167ee <ll_reset+0xca>
		rx->link = link;
   167dc:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   167e0:	78f2      	ldrb	r2, [r6, #3]
   167e2:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   167e4:	fb02 6303 	mla	r3, r2, r3, r6
   167e8:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   167ea:	70f4      	strb	r4, [r6, #3]
}
   167ec:	e7e2      	b.n	167b4 <ll_reset+0x90>
			mem_release(link, &mem_link_done.free);
   167ee:	497d      	ldr	r1, [pc, #500]	; (169e4 <ll_reset+0x2c0>)
   167f0:	4650      	mov	r0, sl
   167f2:	f7fc fbcf 	bl	12f94 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   167f6:	4b7c      	ldr	r3, [pc, #496]	; (169e8 <ll_reset+0x2c4>)
   167f8:	2209      	movs	r2, #9
   167fa:	1d18      	adds	r0, r3, #4
   167fc:	2148      	movs	r1, #72	; 0x48
   167fe:	f7fc fb81 	bl	12f04 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   16802:	4b7a      	ldr	r3, [pc, #488]	; (169ec <ll_reset+0x2c8>)
   16804:	220b      	movs	r2, #11
   16806:	1d18      	adds	r0, r3, #4
   16808:	2108      	movs	r1, #8
   1680a:	f7fc fb7b 	bl	12f04 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1680e:	4877      	ldr	r0, [pc, #476]	; (169ec <ll_reset+0x2c8>)
   16810:	f7fc fba6 	bl	12f60 <mem_acquire>
	LL_ASSERT(link);
   16814:	4604      	mov	r4, r0
   16816:	2800      	cmp	r0, #0
   16818:	f000 80c3 	beq.w	169a2 <ll_reset+0x27e>
	MEMQ_INIT(ull_rx, link);
   1681c:	4a74      	ldr	r2, [pc, #464]	; (169f0 <ll_reset+0x2cc>)
   1681e:	4620      	mov	r0, r4
   16820:	1f11      	subs	r1, r2, #4
   16822:	f7fc fbf3 	bl	1300c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   16826:	4871      	ldr	r0, [pc, #452]	; (169ec <ll_reset+0x2c8>)
   16828:	f7fc fb9a 	bl	12f60 <mem_acquire>
	LL_ASSERT(link);
   1682c:	4604      	mov	r4, r0
   1682e:	2800      	cmp	r0, #0
   16830:	f000 80a9 	beq.w	16986 <ll_reset+0x262>
	MEMQ_INIT(ll_rx, link);
   16834:	4a6f      	ldr	r2, [pc, #444]	; (169f4 <ll_reset+0x2d0>)
	mem_link_rx.quota_pdu = RX_CNT;
   16836:	4e70      	ldr	r6, [pc, #448]	; (169f8 <ll_reset+0x2d4>)
		rx = mem_acquire(&mem_pdu_rx.free);
   16838:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 169e8 <ll_reset+0x2c4>
	MEMQ_INIT(ll_rx, link);
   1683c:	4620      	mov	r0, r4
   1683e:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   16840:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   16842:	f7fc fbe3 	bl	1300c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   16846:	2307      	movs	r3, #7
   16848:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
   1684c:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   1684e:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   16852:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16854:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   16856:	3401      	adds	r4, #1
   16858:	b2e4      	uxtb	r4, r4
		last = 0U;
   1685a:	42a2      	cmp	r2, r4
   1685c:	bf08      	it	eq
   1685e:	2400      	moveq	r4, #0
	if (last == first) {
   16860:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   16862:	4640      	mov	r0, r8
   16864:	d020      	beq.n	168a8 <ll_reset+0x184>
   16866:	f7fc fb7b 	bl	12f60 <mem_acquire>
   1686a:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1686c:	4650      	mov	r0, sl
		if (!link) {
   1686e:	f1bb 0f00 	cmp.w	fp, #0
   16872:	d019      	beq.n	168a8 <ll_reset+0x184>
		rx = mem_acquire(&mem_pdu_rx.free);
   16874:	f7fc fb74 	bl	12f60 <mem_acquire>
		if (!rx) {
   16878:	b190      	cbz	r0, 168a0 <ll_reset+0x17c>
		link->mem = NULL;
   1687a:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
   1687e:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16882:	78e9      	ldrb	r1, [r5, #3]
   16884:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   16886:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16888:	fb01 5202 	mla	r2, r1, r2, r5
   1688c:	3b01      	subs	r3, #1
   1688e:	b2db      	uxtb	r3, r3
   16890:	6050      	str	r0, [r2, #4]
   16892:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   16894:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   16896:	2b00      	cmp	r3, #0
   16898:	d1db      	bne.n	16852 <ll_reset+0x12e>
}
   1689a:	b007      	add	sp, #28
   1689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   168a0:	4952      	ldr	r1, [pc, #328]	; (169ec <ll_reset+0x2c8>)
   168a2:	4658      	mov	r0, fp
   168a4:	f7fc fb76 	bl	12f94 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   168a8:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   168aa:	1e5d      	subs	r5, r3, #1
   168ac:	b2ed      	uxtb	r5, r5
   168ae:	2b00      	cmp	r3, #0
   168b0:	d0f3      	beq.n	1689a <ll_reset+0x176>
   168b2:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   168b4:	f8df 9134 	ldr.w	r9, [pc, #308]	; 169ec <ll_reset+0x2c8>
		rx = mem_acquire(&mem_pdu_rx.free);
   168b8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 169e8 <ll_reset+0x2c4>
	if (last == count) {
   168bc:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   168be:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   168c0:	3401      	adds	r4, #1
   168c2:	b2e4      	uxtb	r4, r4
		last = 0U;
   168c4:	42a2      	cmp	r2, r4
   168c6:	bf08      	it	eq
   168c8:	2400      	moveq	r4, #0
	if (last == first) {
   168ca:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   168cc:	4648      	mov	r0, r9
   168ce:	d0e4      	beq.n	1689a <ll_reset+0x176>
   168d0:	f7fc fb46 	bl	12f60 <mem_acquire>
   168d4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   168d6:	4640      	mov	r0, r8
		if (!link) {
   168d8:	f1ba 0f00 	cmp.w	sl, #0
   168dc:	d0dd      	beq.n	1689a <ll_reset+0x176>
		rx = mem_acquire(&mem_pdu_rx.free);
   168de:	f7fc fb3f 	bl	12f60 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   168e2:	3d01      	subs	r5, #1
   168e4:	b2ed      	uxtb	r5, r5
		if (!rx) {
   168e6:	2800      	cmp	r0, #0
   168e8:	d069      	beq.n	169be <ll_reset+0x29a>
		rx->link = link;
   168ea:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   168ee:	78f9      	ldrb	r1, [r7, #3]
   168f0:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   168f2:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   168f4:	fb01 7202 	mla	r2, r1, r2, r7
   168f8:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   168fa:	2dff      	cmp	r5, #255	; 0xff
   168fc:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   168fe:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   16900:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16902:	d1db      	bne.n	168bc <ll_reset+0x198>
   16904:	e7c9      	b.n	1689a <ll_reset+0x176>
	LL_ASSERT(!err);
   16906:	4a3d      	ldr	r2, [pc, #244]	; (169fc <ll_reset+0x2d8>)
   16908:	493d      	ldr	r1, [pc, #244]	; (16a00 <ll_reset+0x2dc>)
   1690a:	483e      	ldr	r0, [pc, #248]	; (16a04 <ll_reset+0x2e0>)
   1690c:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   16910:	f00d fdd0 	bl	244b4 <printk>
   16914:	4040      	eors	r0, r0
   16916:	f380 8811 	msr	BASEPRI, r0
   1691a:	f04f 0003 	mov.w	r0, #3
   1691e:	df02      	svc	2
	err = ull_scan_reset();
   16920:	f001 fae4 	bl	17eec <ull_scan_reset>
	LL_ASSERT(!err);
   16924:	2800      	cmp	r0, #0
   16926:	f43f af0a 	beq.w	1673e <ll_reset+0x1a>
   1692a:	4a34      	ldr	r2, [pc, #208]	; (169fc <ll_reset+0x2d8>)
   1692c:	4934      	ldr	r1, [pc, #208]	; (16a00 <ll_reset+0x2dc>)
   1692e:	4835      	ldr	r0, [pc, #212]	; (16a04 <ll_reset+0x2e0>)
   16930:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   16934:	f00d fdbe 	bl	244b4 <printk>
   16938:	4040      	eors	r0, r0
   1693a:	f380 8811 	msr	BASEPRI, r0
   1693e:	f04f 0003 	mov.w	r0, #3
   16942:	df02      	svc	2
	err = ull_conn_reset();
   16944:	f002 f9b2 	bl	18cac <ull_conn_reset>
	LL_ASSERT(!err);
   16948:	2800      	cmp	r0, #0
   1694a:	f43f aefd 	beq.w	16748 <ll_reset+0x24>
   1694e:	4a2b      	ldr	r2, [pc, #172]	; (169fc <ll_reset+0x2d8>)
   16950:	492b      	ldr	r1, [pc, #172]	; (16a00 <ll_reset+0x2dc>)
   16952:	482c      	ldr	r0, [pc, #176]	; (16a04 <ll_reset+0x2e0>)
   16954:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   16958:	f00d fdac 	bl	244b4 <printk>
   1695c:	4040      	eors	r0, r0
   1695e:	f380 8811 	msr	BASEPRI, r0
   16962:	f04f 0003 	mov.w	r0, #3
   16966:	df02      	svc	2
   16968:	e6ee      	b.n	16748 <ll_reset+0x24>
		LL_ASSERT(!retval);
   1696a:	4a24      	ldr	r2, [pc, #144]	; (169fc <ll_reset+0x2d8>)
   1696c:	4926      	ldr	r1, [pc, #152]	; (16a08 <ll_reset+0x2e4>)
   1696e:	4825      	ldr	r0, [pc, #148]	; (16a04 <ll_reset+0x2e0>)
   16970:	f44f 7300 	mov.w	r3, #512	; 0x200
   16974:	f00d fd9e 	bl	244b4 <printk>
   16978:	4040      	eors	r0, r0
   1697a:	f380 8811 	msr	BASEPRI, r0
   1697e:	f04f 0003 	mov.w	r0, #3
   16982:	df02      	svc	2
   16984:	e6fe      	b.n	16784 <ll_reset+0x60>
	LL_ASSERT(link);
   16986:	4a1d      	ldr	r2, [pc, #116]	; (169fc <ll_reset+0x2d8>)
   16988:	4920      	ldr	r1, [pc, #128]	; (16a0c <ll_reset+0x2e8>)
   1698a:	481e      	ldr	r0, [pc, #120]	; (16a04 <ll_reset+0x2e0>)
   1698c:	f240 53b7 	movw	r3, #1463	; 0x5b7
   16990:	f00d fd90 	bl	244b4 <printk>
   16994:	4040      	eors	r0, r0
   16996:	f380 8811 	msr	BASEPRI, r0
   1699a:	f04f 0003 	mov.w	r0, #3
   1699e:	df02      	svc	2
   169a0:	e748      	b.n	16834 <ll_reset+0x110>
	LL_ASSERT(link);
   169a2:	4a16      	ldr	r2, [pc, #88]	; (169fc <ll_reset+0x2d8>)
   169a4:	4919      	ldr	r1, [pc, #100]	; (16a0c <ll_reset+0x2e8>)
   169a6:	4817      	ldr	r0, [pc, #92]	; (16a04 <ll_reset+0x2e0>)
   169a8:	f44f 63b6 	mov.w	r3, #1456	; 0x5b0
   169ac:	f00d fd82 	bl	244b4 <printk>
   169b0:	4040      	eors	r0, r0
   169b2:	f380 8811 	msr	BASEPRI, r0
   169b6:	f04f 0003 	mov.w	r0, #3
   169ba:	df02      	svc	2
   169bc:	e72e      	b.n	1681c <ll_reset+0xf8>
			mem_release(link, &mem_link_rx.free);
   169be:	490b      	ldr	r1, [pc, #44]	; (169ec <ll_reset+0x2c8>)
   169c0:	4650      	mov	r0, sl
   169c2:	f7fc fae7 	bl	12f94 <mem_release>
			break;
   169c6:	e768      	b.n	1689a <ll_reset+0x176>
   169c8:	200007f8 	.word	0x200007f8
   169cc:	20000694 	.word	0x20000694
   169d0:	200006bc 	.word	0x200006bc
   169d4:	200006a8 	.word	0x200006a8
   169d8:	200006d4 	.word	0x200006d4
   169dc:	2000081c 	.word	0x2000081c
   169e0:	20002d2c 	.word	0x20002d2c
   169e4:	20002dcc 	.word	0x20002dcc
   169e8:	20002e48 	.word	0x20002e48
   169ec:	20002dec 	.word	0x20002dec
   169f0:	200030e0 	.word	0x200030e0
   169f4:	200030d8 	.word	0x200030d8
   169f8:	20002de8 	.word	0x20002de8
   169fc:	0002e92c 	.word	0x0002e92c
   16a00:	0002e968 	.word	0x0002e968
   16a04:	0002e80c 	.word	0x0002e80c
   16a08:	0002e9a4 	.word	0x0002e9a4
   16a0c:	0002ec30 	.word	0x0002ec30

00016a10 <ll_rx_get>:
{
   16a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a14:	b085      	sub	sp, #20
   16a16:	e9cd 0100 	strd	r0, r1, [sp]
   16a1a:	4c5f      	ldr	r4, [pc, #380]	; (16b98 <ll_rx_get+0x188>)
				mem_release(link, &mem_link_rx.free);
   16a1c:	4d5f      	ldr	r5, [pc, #380]	; (16b9c <ll_rx_get+0x18c>)
   16a1e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 16ba4 <ll_rx_get+0x194>
	*node_rx = NULL;
   16a22:	9a00      	ldr	r2, [sp, #0]
   16a24:	2300      	movs	r3, #0
   16a26:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   16a28:	e9d9 0100 	ldrd	r0, r1, [r9]
   16a2c:	aa03      	add	r2, sp, #12
   16a2e:	f7fc fb03 	bl	13038 <memq_peek>
	if (link) {
   16a32:	4607      	mov	r7, r0
   16a34:	2800      	cmp	r0, #0
   16a36:	f000 80a4 	beq.w	16b82 <ll_rx_get+0x172>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   16a3a:	9b03      	ldr	r3, [sp, #12]
   16a3c:	4958      	ldr	r1, [pc, #352]	; (16ba0 <ll_rx_get+0x190>)
   16a3e:	781a      	ldrb	r2, [r3, #0]
   16a40:	9801      	ldr	r0, [sp, #4]
   16a42:	f7ff fad7 	bl	15ff4 <tx_cmplt_get>
		if (!cmplt) {
   16a46:	4603      	mov	r3, r0
   16a48:	2800      	cmp	r0, #0
   16a4a:	f040 8091 	bne.w	16b70 <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
   16a4e:	78a2      	ldrb	r2, [r4, #2]
   16a50:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   16a54:	78e2      	ldrb	r2, [r4, #3]
   16a56:	f10d 0109 	add.w	r1, sp, #9
   16a5a:	f10d 000a 	add.w	r0, sp, #10
   16a5e:	461e      	mov	r6, r3
   16a60:	f7ff fac8 	bl	15ff4 <tx_cmplt_get>
   16a64:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
   16a68:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   16a6c:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   16a6e:	d1f1      	bne.n	16a54 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   16a70:	9b03      	ldr	r3, [sp, #12]
   16a72:	7919      	ldrb	r1, [r3, #4]
   16a74:	2903      	cmp	r1, #3
   16a76:	d178      	bne.n	16b6a <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
   16a78:	494a      	ldr	r1, [pc, #296]	; (16ba4 <ll_rx_get+0x194>)
   16a7a:	f8d9 0004 	ldr.w	r0, [r9, #4]
   16a7e:	f7fc fae3 	bl	13048 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   16a82:	4949      	ldr	r1, [pc, #292]	; (16ba8 <ll_rx_get+0x198>)
   16a84:	4638      	mov	r0, r7
   16a86:	f7fc fa85 	bl	12f94 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   16a8a:	782b      	ldrb	r3, [r5, #0]
   16a8c:	2b06      	cmp	r3, #6
   16a8e:	d85d      	bhi.n	16b4c <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
   16a90:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   16a92:	4946      	ldr	r1, [pc, #280]	; (16bac <ll_rx_get+0x19c>)
   16a94:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   16a96:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   16a98:	f7fc fa7c 	bl	12f94 <mem_release>
	while (mem_link_rx.quota_pdu &&
   16a9c:	782b      	ldrb	r3, [r5, #0]
   16a9e:	2b00      	cmp	r3, #0
   16aa0:	d0bf      	beq.n	16a22 <ll_rx_get+0x12>
   16aa2:	4f43      	ldr	r7, [pc, #268]	; (16bb0 <ll_rx_get+0x1a0>)
		link = mem_acquire(&mem_link_rx.free);
   16aa4:	f8df 8100 	ldr.w	r8, [pc, #256]	; 16ba8 <ll_rx_get+0x198>
   16aa8:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   16aaa:	f8df a100 	ldr.w	sl, [pc, #256]	; 16bac <ll_rx_get+0x19c>
	if (last == count) {
   16aae:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16ab0:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   16ab2:	3601      	adds	r6, #1
   16ab4:	b2f6      	uxtb	r6, r6
		last = 0U;
   16ab6:	42b2      	cmp	r2, r6
   16ab8:	bf08      	it	eq
   16aba:	2600      	moveq	r6, #0
	if (last == first) {
   16abc:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   16abe:	4640      	mov	r0, r8
   16ac0:	d01f      	beq.n	16b02 <ll_rx_get+0xf2>
   16ac2:	f7fc fa4d 	bl	12f60 <mem_acquire>
   16ac6:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   16ac8:	4650      	mov	r0, sl
		if (!link) {
   16aca:	f1bb 0f00 	cmp.w	fp, #0
   16ace:	d018      	beq.n	16b02 <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
   16ad0:	f7fc fa46 	bl	12f60 <mem_acquire>
		if (!rx) {
   16ad4:	b188      	cbz	r0, 16afa <ll_rx_get+0xea>
		link->mem = NULL;
   16ad6:	2300      	movs	r3, #0
   16ad8:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   16adc:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16ae0:	78f9      	ldrb	r1, [r7, #3]
   16ae2:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   16ae4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16ae6:	fb01 7202 	mla	r2, r1, r2, r7
   16aea:	3b01      	subs	r3, #1
   16aec:	b2db      	uxtb	r3, r3
   16aee:	6050      	str	r0, [r2, #4]
   16af0:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   16af2:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   16af4:	2b00      	cmp	r3, #0
   16af6:	d1da      	bne.n	16aae <ll_rx_get+0x9e>
   16af8:	e793      	b.n	16a22 <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
   16afa:	492b      	ldr	r1, [pc, #172]	; (16ba8 <ll_rx_get+0x198>)
   16afc:	4658      	mov	r0, fp
   16afe:	f7fc fa49 	bl	12f94 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16b02:	782b      	ldrb	r3, [r5, #0]
   16b04:	2b00      	cmp	r3, #0
   16b06:	d08c      	beq.n	16a22 <ll_rx_get+0x12>
   16b08:	4f2a      	ldr	r7, [pc, #168]	; (16bb4 <ll_rx_get+0x1a4>)
	last = last + 1;
   16b0a:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   16b0c:	787a      	ldrb	r2, [r7, #1]
   16b0e:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   16b10:	3601      	adds	r6, #1
   16b12:	b2f6      	uxtb	r6, r6
		last = 0U;
   16b14:	42b2      	cmp	r2, r6
   16b16:	bf08      	it	eq
   16b18:	2600      	moveq	r6, #0
	if (last == first) {
   16b1a:	429e      	cmp	r6, r3
   16b1c:	d081      	beq.n	16a22 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   16b1e:	4822      	ldr	r0, [pc, #136]	; (16ba8 <ll_rx_get+0x198>)
   16b20:	f7fc fa1e 	bl	12f60 <mem_acquire>
		if (!link) {
   16b24:	4680      	mov	r8, r0
   16b26:	2800      	cmp	r0, #0
   16b28:	f43f af7b 	beq.w	16a22 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   16b2c:	481f      	ldr	r0, [pc, #124]	; (16bac <ll_rx_get+0x19c>)
   16b2e:	f7fc fa17 	bl	12f60 <mem_acquire>
		if (!rx) {
   16b32:	b308      	cbz	r0, 16b78 <ll_rx_get+0x168>
		rx->link = link;
   16b34:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16b38:	78f9      	ldrb	r1, [r7, #3]
   16b3a:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   16b3c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16b3e:	fb01 7202 	mla	r2, r1, r2, r7
   16b42:	3b01      	subs	r3, #1
   16b44:	6050      	str	r0, [r2, #4]
   16b46:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   16b48:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16b4a:	e76a      	b.n	16a22 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   16b4c:	4a1a      	ldr	r2, [pc, #104]	; (16bb8 <ll_rx_get+0x1a8>)
   16b4e:	491b      	ldr	r1, [pc, #108]	; (16bbc <ll_rx_get+0x1ac>)
   16b50:	481b      	ldr	r0, [pc, #108]	; (16bc0 <ll_rx_get+0x1b0>)
   16b52:	f240 4329 	movw	r3, #1065	; 0x429
   16b56:	f00d fcad 	bl	244b4 <printk>
   16b5a:	4040      	eors	r0, r0
   16b5c:	f380 8811 	msr	BASEPRI, r0
   16b60:	f04f 0003 	mov.w	r0, #3
   16b64:	df02      	svc	2
   16b66:	782b      	ldrb	r3, [r5, #0]
   16b68:	e792      	b.n	16a90 <ll_rx_get+0x80>
			*node_rx = rx;
   16b6a:	9900      	ldr	r1, [sp, #0]
   16b6c:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   16b6e:	4613      	mov	r3, r2
}
   16b70:	4618      	mov	r0, r3
   16b72:	b005      	add	sp, #20
   16b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   16b78:	490b      	ldr	r1, [pc, #44]	; (16ba8 <ll_rx_get+0x198>)
   16b7a:	4640      	mov	r0, r8
   16b7c:	f7fc fa0a 	bl	12f94 <mem_release>
			break;
   16b80:	e74f      	b.n	16a22 <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   16b82:	78e2      	ldrb	r2, [r4, #3]
   16b84:	4906      	ldr	r1, [pc, #24]	; (16ba0 <ll_rx_get+0x190>)
   16b86:	9801      	ldr	r0, [sp, #4]
   16b88:	f7ff fa34 	bl	15ff4 <tx_cmplt_get>
   16b8c:	4603      	mov	r3, r0
}
   16b8e:	4618      	mov	r0, r3
   16b90:	b005      	add	sp, #20
   16b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b96:	bf00      	nop
   16b98:	200007f8 	.word	0x200007f8
   16b9c:	20002de8 	.word	0x20002de8
   16ba0:	200007fa 	.word	0x200007fa
   16ba4:	200030d4 	.word	0x200030d4
   16ba8:	20002dec 	.word	0x20002dec
   16bac:	20002e48 	.word	0x20002e48
   16bb0:	200006a8 	.word	0x200006a8
   16bb4:	200006bc 	.word	0x200006bc
   16bb8:	0002e92c 	.word	0x0002e92c
   16bbc:	0002e9ac 	.word	0x0002e9ac
   16bc0:	0002e80c 	.word	0x0002e80c

00016bc4 <ll_rx_dequeue>:
{
   16bc4:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   16bc6:	495f      	ldr	r1, [pc, #380]	; (16d44 <ll_rx_dequeue+0x180>)
{
   16bc8:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   16bca:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   16bcc:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   16bce:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   16bd0:	aa01      	add	r2, sp, #4
   16bd2:	f7fc fa39 	bl	13048 <memq_dequeue>
	LL_ASSERT(link);
   16bd6:	4604      	mov	r4, r0
   16bd8:	2800      	cmp	r0, #0
   16bda:	d058      	beq.n	16c8e <ll_rx_dequeue+0xca>
	mem_release(link, &mem_link_rx.free);
   16bdc:	495a      	ldr	r1, [pc, #360]	; (16d48 <ll_rx_dequeue+0x184>)
   16bde:	4620      	mov	r0, r4
   16be0:	f7fc f9d8 	bl	12f94 <mem_release>
	switch (rx->type) {
   16be4:	9a01      	ldr	r2, [sp, #4]
   16be6:	7913      	ldrb	r3, [r2, #4]
   16be8:	2b13      	cmp	r3, #19
   16bea:	d80f      	bhi.n	16c0c <ll_rx_dequeue+0x48>
   16bec:	e8df f003 	tbb	[pc, r3]
   16bf0:	0e0a0e0a 	.word	0x0e0a0e0a
   16bf4:	0e0e0e0a 	.word	0x0e0e0e0a
   16bf8:	0e0e0e0e 	.word	0x0e0e0e0e
   16bfc:	0a0a1d0e 	.word	0x0a0a1d0e
   16c00:	0a0a0a0a 	.word	0x0a0a0a0a
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   16c04:	2b00      	cmp	r3, #0
   16c06:	d050      	beq.n	16caa <ll_rx_dequeue+0xe6>
}
   16c08:	b002      	add	sp, #8
   16c0a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   16c0c:	4a4f      	ldr	r2, [pc, #316]	; (16d4c <ll_rx_dequeue+0x188>)
   16c0e:	4950      	ldr	r1, [pc, #320]	; (16d50 <ll_rx_dequeue+0x18c>)
   16c10:	4850      	ldr	r0, [pc, #320]	; (16d54 <ll_rx_dequeue+0x190>)
   16c12:	f44f 734f 	mov.w	r3, #828	; 0x33c
   16c16:	f00d fc4d 	bl	244b4 <printk>
   16c1a:	4040      	eors	r0, r0
   16c1c:	f380 8811 	msr	BASEPRI, r0
   16c20:	f04f 0003 	mov.w	r0, #3
   16c24:	df02      	svc	2
}
   16c26:	b002      	add	sp, #8
   16c28:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   16c2a:	7f13      	ldrb	r3, [r2, #28]
   16c2c:	2b3c      	cmp	r3, #60	; 0x3c
   16c2e:	d04b      	beq.n	16cc8 <ll_rx_dequeue+0x104>
   16c30:	7f53      	ldrb	r3, [r2, #29]
   16c32:	b1f3      	cbz	r3, 16c72 <ll_rx_dequeue+0xae>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   16c34:	6893      	ldr	r3, [r2, #8]
   16c36:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   16c38:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   16c3c:	b128      	cbz	r0, 16c4a <ll_rx_dequeue+0x86>
					adv->node_rx_cc_free = NULL;
   16c3e:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   16c40:	4945      	ldr	r1, [pc, #276]	; (16d58 <ll_rx_dequeue+0x194>)
					adv->node_rx_cc_free = NULL;
   16c42:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					mem_release(rx_free, &mem_pdu_rx.free);
   16c46:	f7fc f9a5 	bl	12f94 <mem_release>
			adv->is_enabled = 0U;
   16c4a:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   16c4e:	f36f 0300 	bfc	r3, #0, #1
   16c52:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
			      (ull_scan_is_enabled(0) << 1)) |
   16c56:	2000      	movs	r0, #0
   16c58:	f001 f964 	bl	17f24 <ull_scan_is_enabled>
   16c5c:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   16c5e:	2000      	movs	r0, #0
   16c60:	f000 ff50 	bl	17b04 <ull_adv_is_enabled>
			if (!bm) {
   16c64:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   16c68:	d1ce      	bne.n	16c08 <ll_rx_dequeue+0x44>
				ull_filter_adv_scan_state_cb(0);
   16c6a:	f004 fee5 	bl	1ba38 <ull_filter_adv_scan_state_cb>
}
   16c6e:	b002      	add	sp, #8
   16c70:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   16c72:	4a36      	ldr	r2, [pc, #216]	; (16d4c <ll_rx_dequeue+0x188>)
   16c74:	4936      	ldr	r1, [pc, #216]	; (16d50 <ll_rx_dequeue+0x18c>)
   16c76:	4837      	ldr	r0, [pc, #220]	; (16d54 <ll_rx_dequeue+0x190>)
   16c78:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   16c7c:	f00d fc1a 	bl	244b4 <printk>
   16c80:	4040      	eors	r0, r0
   16c82:	f380 8811 	msr	BASEPRI, r0
   16c86:	f04f 0003 	mov.w	r0, #3
   16c8a:	df02      	svc	2
   16c8c:	e7e3      	b.n	16c56 <ll_rx_dequeue+0x92>
	LL_ASSERT(link);
   16c8e:	4a2f      	ldr	r2, [pc, #188]	; (16d4c <ll_rx_dequeue+0x188>)
   16c90:	4932      	ldr	r1, [pc, #200]	; (16d5c <ll_rx_dequeue+0x198>)
   16c92:	4830      	ldr	r0, [pc, #192]	; (16d54 <ll_rx_dequeue+0x190>)
   16c94:	f240 235e 	movw	r3, #606	; 0x25e
   16c98:	f00d fc0c 	bl	244b4 <printk>
   16c9c:	4040      	eors	r0, r0
   16c9e:	f380 8811 	msr	BASEPRI, r0
   16ca2:	f04f 0003 	mov.w	r0, #3
   16ca6:	df02      	svc	2
   16ca8:	e798      	b.n	16bdc <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   16caa:	4a28      	ldr	r2, [pc, #160]	; (16d4c <ll_rx_dequeue+0x188>)
   16cac:	492c      	ldr	r1, [pc, #176]	; (16d60 <ll_rx_dequeue+0x19c>)
   16cae:	4829      	ldr	r0, [pc, #164]	; (16d54 <ll_rx_dequeue+0x190>)
   16cb0:	f44f 734e 	mov.w	r3, #824	; 0x338
   16cb4:	f00d fbfe 	bl	244b4 <printk>
   16cb8:	4040      	eors	r0, r0
   16cba:	f380 8811 	msr	BASEPRI, r0
   16cbe:	f04f 0003 	mov.w	r0, #3
   16cc2:	df02      	svc	2
}
   16cc4:	b002      	add	sp, #8
   16cc6:	bd70      	pop	{r4, r5, r6, pc}
			struct lll_adv *lll = ftr->param;
   16cc8:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   16cca:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   16ccc:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   16cce:	b1ed      	cbz	r5, 16d0c <ll_rx_dequeue+0x148>
				LL_ASSERT(!conn_lll->link_tx_free);
   16cd0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
   16cd2:	2200      	movs	r2, #0
   16cd4:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   16cd6:	b163      	cbz	r3, 16cf2 <ll_rx_dequeue+0x12e>
   16cd8:	4a1c      	ldr	r2, [pc, #112]	; (16d4c <ll_rx_dequeue+0x188>)
   16cda:	4922      	ldr	r1, [pc, #136]	; (16d64 <ll_rx_dequeue+0x1a0>)
   16cdc:	481d      	ldr	r0, [pc, #116]	; (16d54 <ll_rx_dequeue+0x190>)
   16cde:	f240 23c5 	movw	r3, #709	; 0x2c5
   16ce2:	f00d fbe7 	bl	244b4 <printk>
   16ce6:	4040      	eors	r0, r0
   16ce8:	f380 8811 	msr	BASEPRI, r0
   16cec:	f04f 0003 	mov.w	r0, #3
   16cf0:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   16cf2:	f105 0150 	add.w	r1, r5, #80	; 0x50
   16cf6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   16cfa:	f7fc f98b 	bl	13014 <memq_deinit>
				LL_ASSERT(link);
   16cfe:	4606      	mov	r6, r0
   16d00:	b190      	cbz	r0, 16d28 <ll_rx_dequeue+0x164>
				ll_conn_release(conn);
   16d02:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   16d04:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
   16d06:	f001 fcf9 	bl	186fc <ll_conn_release>
   16d0a:	e79e      	b.n	16c4a <ll_rx_dequeue+0x86>
				LL_ASSERT(conn_lll);
   16d0c:	4a0f      	ldr	r2, [pc, #60]	; (16d4c <ll_rx_dequeue+0x188>)
   16d0e:	4916      	ldr	r1, [pc, #88]	; (16d68 <ll_rx_dequeue+0x1a4>)
   16d10:	4810      	ldr	r0, [pc, #64]	; (16d54 <ll_rx_dequeue+0x190>)
   16d12:	f240 23c2 	movw	r3, #706	; 0x2c2
   16d16:	f00d fbcd 	bl	244b4 <printk>
   16d1a:	4040      	eors	r0, r0
   16d1c:	f380 8811 	msr	BASEPRI, r0
   16d20:	f04f 0003 	mov.w	r0, #3
   16d24:	df02      	svc	2
   16d26:	e7d3      	b.n	16cd0 <ll_rx_dequeue+0x10c>
				LL_ASSERT(link);
   16d28:	4a08      	ldr	r2, [pc, #32]	; (16d4c <ll_rx_dequeue+0x188>)
   16d2a:	490c      	ldr	r1, [pc, #48]	; (16d5c <ll_rx_dequeue+0x198>)
   16d2c:	4809      	ldr	r0, [pc, #36]	; (16d54 <ll_rx_dequeue+0x190>)
   16d2e:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   16d32:	f00d fbbf 	bl	244b4 <printk>
   16d36:	4040      	eors	r0, r0
   16d38:	f380 8811 	msr	BASEPRI, r0
   16d3c:	f04f 0003 	mov.w	r0, #3
   16d40:	df02      	svc	2
   16d42:	e7de      	b.n	16d02 <ll_rx_dequeue+0x13e>
   16d44:	200030d4 	.word	0x200030d4
   16d48:	20002dec 	.word	0x20002dec
   16d4c:	0002e92c 	.word	0x0002e92c
   16d50:	0002e86c 	.word	0x0002e86c
   16d54:	0002e80c 	.word	0x0002e80c
   16d58:	20002e48 	.word	0x20002e48
   16d5c:	0002ec30 	.word	0x0002ec30
   16d60:	0002ea04 	.word	0x0002ea04
   16d64:	0002e9ec 	.word	0x0002e9ec
   16d68:	0002e9e0 	.word	0x0002e9e0

00016d6c <ll_rx_mem_release>:
{
   16d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   16d70:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   16d72:	4e85      	ldr	r6, [pc, #532]	; (16f88 <ll_rx_mem_release+0x21c>)
{
   16d74:	4681      	mov	r9, r0
	while (rx) {
   16d76:	2c00      	cmp	r4, #0
   16d78:	d041      	beq.n	16dfe <ll_rx_mem_release+0x92>
			LL_ASSERT(0);
   16d7a:	f8df 8238 	ldr.w	r8, [pc, #568]	; 16fb4 <ll_rx_mem_release+0x248>
   16d7e:	f8df a238 	ldr.w	sl, [pc, #568]	; 16fb8 <ll_rx_mem_release+0x24c>
   16d82:	4f82      	ldr	r7, [pc, #520]	; (16f8c <ll_rx_mem_release+0x220>)
		rx = rx->next;
   16d84:	4625      	mov	r5, r4
   16d86:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   16d88:	792b      	ldrb	r3, [r5, #4]
   16d8a:	2b13      	cmp	r3, #19
   16d8c:	d869      	bhi.n	16e62 <ll_rx_mem_release+0xf6>
   16d8e:	e8df f003 	tbb	[pc, r3]
   16d92:	681d      	.short	0x681d
   16d94:	681d681d 	.word	0x681d681d
   16d98:	68686868 	.word	0x68686868
   16d9c:	0a686868 	.word	0x0a686868
   16da0:	1d1d1d78 	.word	0x1d1d1d78
   16da4:	1d1d      	.short	0x1d1d
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   16da6:	7f2b      	ldrb	r3, [r5, #28]
   16da8:	2b3c      	cmp	r3, #60	; 0x3c
   16daa:	f000 80d1 	beq.w	16f50 <ll_rx_mem_release+0x1e4>
				LL_ASSERT(!cc->status);
   16dae:	b1db      	cbz	r3, 16de8 <ll_rx_mem_release+0x7c>
   16db0:	4977      	ldr	r1, [pc, #476]	; (16f90 <ll_rx_mem_release+0x224>)
   16db2:	f240 33a6 	movw	r3, #934	; 0x3a6
   16db6:	4642      	mov	r2, r8
   16db8:	4638      	mov	r0, r7
   16dba:	f00d fb7b 	bl	244b4 <printk>
   16dbe:	4040      	eors	r0, r0
   16dc0:	f380 8811 	msr	BASEPRI, r0
   16dc4:	f04f 0003 	mov.w	r0, #3
   16dc8:	df02      	svc	2
   16dca:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   16dcc:	b963      	cbnz	r3, 16de8 <ll_rx_mem_release+0x7c>
   16dce:	4971      	ldr	r1, [pc, #452]	; (16f94 <ll_rx_mem_release+0x228>)
   16dd0:	f240 33e9 	movw	r3, #1001	; 0x3e9
   16dd4:	4642      	mov	r2, r8
   16dd6:	4638      	mov	r0, r7
   16dd8:	f00d fb6c 	bl	244b4 <printk>
   16ddc:	4040      	eors	r0, r0
   16dde:	f380 8811 	msr	BASEPRI, r0
   16de2:	f04f 0003 	mov.w	r0, #3
   16de6:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   16de8:	7833      	ldrb	r3, [r6, #0]
   16dea:	2b06      	cmp	r3, #6
   16dec:	d86e      	bhi.n	16ecc <ll_rx_mem_release+0x160>
	mem_link_rx.quota_pdu += delta;
   16dee:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   16df0:	4969      	ldr	r1, [pc, #420]	; (16f98 <ll_rx_mem_release+0x22c>)
	mem_link_rx.quota_pdu += delta;
   16df2:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   16df4:	4628      	mov	r0, r5
   16df6:	f7fc f8cd 	bl	12f94 <mem_release>
	while (rx) {
   16dfa:	2c00      	cmp	r4, #0
   16dfc:	d1c2      	bne.n	16d84 <ll_rx_mem_release+0x18>
	*node_rx = rx;
   16dfe:	2700      	movs	r7, #0
   16e00:	f8c9 7000 	str.w	r7, [r9]
	while (mem_link_rx.quota_pdu &&
   16e04:	7833      	ldrb	r3, [r6, #0]
   16e06:	b353      	cbz	r3, 16e5e <ll_rx_mem_release+0xf2>
   16e08:	4d64      	ldr	r5, [pc, #400]	; (16f9c <ll_rx_mem_release+0x230>)
		link = mem_acquire(&mem_link_rx.free);
   16e0a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 16fa8 <ll_rx_mem_release+0x23c>
   16e0e:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   16e10:	f8df 9184 	ldr.w	r9, [pc, #388]	; 16f98 <ll_rx_mem_release+0x22c>
	if (last == count) {
   16e14:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   16e16:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   16e18:	3401      	adds	r4, #1
   16e1a:	b2e4      	uxtb	r4, r4
		last = 0U;
   16e1c:	42a2      	cmp	r2, r4
   16e1e:	bf08      	it	eq
   16e20:	2400      	moveq	r4, #0
	if (last == first) {
   16e22:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   16e24:	4640      	mov	r0, r8
   16e26:	d064      	beq.n	16ef2 <ll_rx_mem_release+0x186>
   16e28:	f7fc f89a 	bl	12f60 <mem_acquire>
   16e2c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   16e2e:	4648      	mov	r0, r9
		if (!link) {
   16e30:	f1ba 0f00 	cmp.w	sl, #0
   16e34:	d05d      	beq.n	16ef2 <ll_rx_mem_release+0x186>
		rx = mem_acquire(&mem_pdu_rx.free);
   16e36:	f7fc f893 	bl	12f60 <mem_acquire>
		if (!rx) {
   16e3a:	2800      	cmp	r0, #0
   16e3c:	d055      	beq.n	16eea <ll_rx_mem_release+0x17e>
		link->mem = NULL;
   16e3e:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   16e42:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16e46:	78e9      	ldrb	r1, [r5, #3]
   16e48:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   16e4a:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16e4c:	fb01 5202 	mla	r2, r1, r2, r5
   16e50:	3b01      	subs	r3, #1
   16e52:	b2db      	uxtb	r3, r3
   16e54:	6050      	str	r0, [r2, #4]
   16e56:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   16e58:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   16e5a:	2b00      	cmp	r3, #0
   16e5c:	d1da      	bne.n	16e14 <ll_rx_mem_release+0xa8>
}
   16e5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   16e62:	f240 431d 	movw	r3, #1053	; 0x41d
   16e66:	4642      	mov	r2, r8
   16e68:	4651      	mov	r1, sl
   16e6a:	4638      	mov	r0, r7
   16e6c:	f00d fb22 	bl	244b4 <printk>
   16e70:	4040      	eors	r0, r0
   16e72:	f380 8811 	msr	BASEPRI, r0
   16e76:	f04f 0003 	mov.w	r0, #3
   16e7a:	df02      	svc	2
	while (rx) {
   16e7c:	2c00      	cmp	r4, #0
   16e7e:	d181      	bne.n	16d84 <ll_rx_mem_release+0x18>
   16e80:	e7bd      	b.n	16dfe <ll_rx_mem_release+0x92>
			conn = ll_conn_get(rx_free->handle);
   16e82:	88e8      	ldrh	r0, [r5, #6]
   16e84:	f001 fc48 	bl	18718 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   16e88:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   16e8a:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   16e8c:	b163      	cbz	r3, 16ea8 <ll_rx_mem_release+0x13c>
   16e8e:	4944      	ldr	r1, [pc, #272]	; (16fa0 <ll_rx_mem_release+0x234>)
   16e90:	f44f 6382 	mov.w	r3, #1040	; 0x410
   16e94:	4642      	mov	r2, r8
   16e96:	4638      	mov	r0, r7
   16e98:	f00d fb0c 	bl	244b4 <printk>
   16e9c:	4040      	eors	r0, r0
   16e9e:	f380 8811 	msr	BASEPRI, r0
   16ea2:	f04f 0003 	mov.w	r0, #3
   16ea6:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   16ea8:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   16eac:	f105 0068 	add.w	r0, r5, #104	; 0x68
   16eb0:	f7fc f8b0 	bl	13014 <memq_deinit>
			LL_ASSERT(link);
   16eb4:	4683      	mov	fp, r0
   16eb6:	2800      	cmp	r0, #0
   16eb8:	d052      	beq.n	16f60 <ll_rx_mem_release+0x1f4>
			conn->lll.link_tx_free = link;
   16eba:	f8c5 b078 	str.w	fp, [r5, #120]	; 0x78
			ll_conn_release(conn);
   16ebe:	4628      	mov	r0, r5
   16ec0:	f001 fc1c 	bl	186fc <ll_conn_release>
	while (rx) {
   16ec4:	2c00      	cmp	r4, #0
   16ec6:	f47f af5d 	bne.w	16d84 <ll_rx_mem_release+0x18>
   16eca:	e798      	b.n	16dfe <ll_rx_mem_release+0x92>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   16ecc:	4935      	ldr	r1, [pc, #212]	; (16fa4 <ll_rx_mem_release+0x238>)
   16ece:	f240 4329 	movw	r3, #1065	; 0x429
   16ed2:	4642      	mov	r2, r8
   16ed4:	4638      	mov	r0, r7
   16ed6:	f00d faed 	bl	244b4 <printk>
   16eda:	4040      	eors	r0, r0
   16edc:	f380 8811 	msr	BASEPRI, r0
   16ee0:	f04f 0003 	mov.w	r0, #3
   16ee4:	df02      	svc	2
   16ee6:	7833      	ldrb	r3, [r6, #0]
   16ee8:	e781      	b.n	16dee <ll_rx_mem_release+0x82>
			mem_release(link, &mem_link_rx.free);
   16eea:	492f      	ldr	r1, [pc, #188]	; (16fa8 <ll_rx_mem_release+0x23c>)
   16eec:	4650      	mov	r0, sl
   16eee:	f7fc f851 	bl	12f94 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   16ef2:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16ef4:	1e5f      	subs	r7, r3, #1
   16ef6:	b2ff      	uxtb	r7, r7
   16ef8:	2b00      	cmp	r3, #0
   16efa:	d0b0      	beq.n	16e5e <ll_rx_mem_release+0xf2>
   16efc:	4d2b      	ldr	r5, [pc, #172]	; (16fac <ll_rx_mem_release+0x240>)
		link = mem_acquire(&mem_link_rx.free);
   16efe:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 16fa8 <ll_rx_mem_release+0x23c>
   16f02:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   16f04:	f8df 9090 	ldr.w	r9, [pc, #144]	; 16f98 <ll_rx_mem_release+0x22c>
	if (last == count) {
   16f08:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16f0a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   16f0c:	3401      	adds	r4, #1
   16f0e:	b2e4      	uxtb	r4, r4
		last = 0U;
   16f10:	42a2      	cmp	r2, r4
   16f12:	bf08      	it	eq
   16f14:	2400      	moveq	r4, #0
	if (last == first) {
   16f16:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   16f18:	4640      	mov	r0, r8
   16f1a:	d0a0      	beq.n	16e5e <ll_rx_mem_release+0xf2>
   16f1c:	f7fc f820 	bl	12f60 <mem_acquire>
   16f20:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   16f22:	4648      	mov	r0, r9
		if (!link) {
   16f24:	f1ba 0f00 	cmp.w	sl, #0
   16f28:	d099      	beq.n	16e5e <ll_rx_mem_release+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
   16f2a:	f7fc f819 	bl	12f60 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16f2e:	3f01      	subs	r7, #1
   16f30:	b2ff      	uxtb	r7, r7
		if (!rx) {
   16f32:	b318      	cbz	r0, 16f7c <ll_rx_mem_release+0x210>
		rx->link = link;
   16f34:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16f38:	78e9      	ldrb	r1, [r5, #3]
   16f3a:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   16f3c:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16f3e:	fb01 5202 	mla	r2, r1, r2, r5
   16f42:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16f44:	2fff      	cmp	r7, #255	; 0xff
   16f46:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   16f48:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   16f4a:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   16f4c:	d1dc      	bne.n	16f08 <ll_rx_mem_release+0x19c>
   16f4e:	e786      	b.n	16e5e <ll_rx_mem_release+0xf2>
				mem_release(rx_free, &mem_pdu_rx.free);
   16f50:	4911      	ldr	r1, [pc, #68]	; (16f98 <ll_rx_mem_release+0x22c>)
   16f52:	4628      	mov	r0, r5
   16f54:	f7fc f81e 	bl	12f94 <mem_release>
	while (rx) {
   16f58:	2c00      	cmp	r4, #0
   16f5a:	f47f af13 	bne.w	16d84 <ll_rx_mem_release+0x18>
   16f5e:	e74e      	b.n	16dfe <ll_rx_mem_release+0x92>
			LL_ASSERT(link);
   16f60:	4913      	ldr	r1, [pc, #76]	; (16fb0 <ll_rx_mem_release+0x244>)
   16f62:	f240 4313 	movw	r3, #1043	; 0x413
   16f66:	4642      	mov	r2, r8
   16f68:	4638      	mov	r0, r7
   16f6a:	f00d faa3 	bl	244b4 <printk>
   16f6e:	4040      	eors	r0, r0
   16f70:	f380 8811 	msr	BASEPRI, r0
   16f74:	f04f 0003 	mov.w	r0, #3
   16f78:	df02      	svc	2
   16f7a:	e79e      	b.n	16eba <ll_rx_mem_release+0x14e>
			mem_release(link, &mem_link_rx.free);
   16f7c:	4650      	mov	r0, sl
   16f7e:	490a      	ldr	r1, [pc, #40]	; (16fa8 <ll_rx_mem_release+0x23c>)
}
   16f80:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   16f84:	f7fc b806 	b.w	12f94 <mem_release>
   16f88:	20002de8 	.word	0x20002de8
   16f8c:	0002e80c 	.word	0x0002e80c
   16f90:	0002ea24 	.word	0x0002ea24
   16f94:	0002ea30 	.word	0x0002ea30
   16f98:	20002e48 	.word	0x20002e48
   16f9c:	200006a8 	.word	0x200006a8
   16fa0:	0002ea54 	.word	0x0002ea54
   16fa4:	0002e9ac 	.word	0x0002e9ac
   16fa8:	20002dec 	.word	0x20002dec
   16fac:	200006bc 	.word	0x200006bc
   16fb0:	0002ec30 	.word	0x0002ec30
   16fb4:	0002e92c 	.word	0x0002e92c
   16fb8:	0002e86c 	.word	0x0002e86c

00016fbc <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   16fbc:	4801      	ldr	r0, [pc, #4]	; (16fc4 <ll_rx_link_alloc+0x8>)
   16fbe:	f7fb bfcf 	b.w	12f60 <mem_acquire>
   16fc2:	bf00      	nop
   16fc4:	20002dec 	.word	0x20002dec

00016fc8 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   16fc8:	4901      	ldr	r1, [pc, #4]	; (16fd0 <ll_rx_link_release+0x8>)
   16fca:	f7fb bfe3 	b.w	12f94 <mem_release>
   16fce:	bf00      	nop
   16fd0:	20002dec 	.word	0x20002dec

00016fd4 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   16fd4:	4801      	ldr	r0, [pc, #4]	; (16fdc <ll_rx_alloc+0x8>)
   16fd6:	f7fb bfc3 	b.w	12f60 <mem_acquire>
   16fda:	bf00      	nop
   16fdc:	20002e48 	.word	0x20002e48

00016fe0 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   16fe0:	4901      	ldr	r1, [pc, #4]	; (16fe8 <ll_rx_release+0x8>)
   16fe2:	f7fb bfd7 	b.w	12f94 <mem_release>
   16fe6:	bf00      	nop
   16fe8:	20002e48 	.word	0x20002e48

00016fec <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16fec:	4b02      	ldr	r3, [pc, #8]	; (16ff8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   16fee:	4a03      	ldr	r2, [pc, #12]	; (16ffc <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   16ff0:	78db      	ldrb	r3, [r3, #3]
   16ff2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   16ff4:	f7fc b818 	b.w	13028 <memq_enqueue>
   16ff8:	200007f8 	.word	0x200007f8
   16ffc:	200030d8 	.word	0x200030d8

00017000 <ll_rx_sched>:
	k_sem_give(sem_recv);
   17000:	4b01      	ldr	r3, [pc, #4]	; (17008 <ll_rx_sched+0x8>)
   17002:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   17004:	f00c bd56 	b.w	23ab4 <z_impl_k_sem_give>
   17008:	200030e4 	.word	0x200030e4

0001700c <ll_pdu_rx_alloc_peek>:
{
   1700c:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1700e:	4b0d      	ldr	r3, [pc, #52]	; (17044 <ll_pdu_rx_alloc_peek+0x38>)
   17010:	789a      	ldrb	r2, [r3, #2]
   17012:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   17014:	42a2      	cmp	r2, r4
   17016:	d809      	bhi.n	1702c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   17018:	1aa1      	subs	r1, r4, r2
   1701a:	b2c9      	uxtb	r1, r1
   1701c:	4288      	cmp	r0, r1
   1701e:	d802      	bhi.n	17026 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   17020:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   17022:	7819      	ldrb	r1, [r3, #0]
   17024:	d109      	bne.n	1703a <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   17026:	2000      	movs	r0, #0
}
   17028:	bc10      	pop	{r4}
   1702a:	4770      	bx	lr
		return count - first + last;
   1702c:	7859      	ldrb	r1, [r3, #1]
   1702e:	1a89      	subs	r1, r1, r2
   17030:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   17032:	b2c9      	uxtb	r1, r1
   17034:	4288      	cmp	r0, r1
   17036:	d8f6      	bhi.n	17026 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   17038:	7819      	ldrb	r1, [r3, #0]
}
   1703a:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   1703c:	fb02 3301 	mla	r3, r2, r1, r3
   17040:	6858      	ldr	r0, [r3, #4]
   17042:	4770      	bx	lr
   17044:	200006a8 	.word	0x200006a8

00017048 <ll_pdu_rx_alloc>:
{
   17048:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1704a:	4b0a      	ldr	r3, [pc, #40]	; (17074 <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   1704c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1704e:	78da      	ldrb	r2, [r3, #3]
   17050:	7818      	ldrb	r0, [r3, #0]
   17052:	785c      	ldrb	r4, [r3, #1]
   17054:	428a      	cmp	r2, r1
   17056:	d00a      	beq.n	1706e <ll_pdu_rx_alloc+0x26>
	_first += 1U;
   17058:	1c4a      	adds	r2, r1, #1
   1705a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1705c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   17060:	4294      	cmp	r4, r2
   17062:	bf08      	it	eq
   17064:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   17066:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   17068:	709a      	strb	r2, [r3, #2]
}
   1706a:	bc10      	pop	{r4}
   1706c:	4770      	bx	lr
		return NULL;
   1706e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   17070:	e7fb      	b.n	1706a <ll_pdu_rx_alloc+0x22>
   17072:	bf00      	nop
   17074:	200006a8 	.word	0x200006a8

00017078 <ll_tx_ack_put>:
{
   17078:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   1707a:	4a13      	ldr	r2, [pc, #76]	; (170c8 <ll_tx_ack_put+0x50>)
   1707c:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1707e:	7855      	ldrb	r5, [r2, #1]
   17080:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   17082:	1c73      	adds	r3, r6, #1
   17084:	b2db      	uxtb	r3, r3
		last = 0U;
   17086:	429d      	cmp	r5, r3
   17088:	bf08      	it	eq
   1708a:	2300      	moveq	r3, #0
	if (last == first) {
   1708c:	429c      	cmp	r4, r3
   1708e:	d00a      	beq.n	170a6 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17090:	4615      	mov	r5, r2
   17092:	f815 4b04 	ldrb.w	r4, [r5], #4
   17096:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   1709a:	192e      	adds	r6, r5, r4
   1709c:	d003      	beq.n	170a6 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   1709e:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   170a0:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   170a2:	6071      	str	r1, [r6, #4]
}
   170a4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   170a6:	4a09      	ldr	r2, [pc, #36]	; (170cc <ll_tx_ack_put+0x54>)
   170a8:	4909      	ldr	r1, [pc, #36]	; (170d0 <ll_tx_ack_put+0x58>)
   170aa:	480a      	ldr	r0, [pc, #40]	; (170d4 <ll_tx_ack_put+0x5c>)
   170ac:	f240 4371 	movw	r3, #1137	; 0x471
   170b0:	f00d fa00 	bl	244b4 <printk>
   170b4:	4040      	eors	r0, r0
   170b6:	f380 8811 	msr	BASEPRI, r0
   170ba:	f04f 0003 	mov.w	r0, #3
   170be:	df02      	svc	2
	tx->handle = handle;
   170c0:	2300      	movs	r3, #0
   170c2:	801b      	strh	r3, [r3, #0]
   170c4:	deff      	udf	#255	; 0xff
   170c6:	bf00      	nop
   170c8:	200007f8 	.word	0x200007f8
   170cc:	0002e92c 	.word	0x0002e92c
   170d0:	0002ec24 	.word	0x0002ec24
   170d4:	0002e80c 	.word	0x0002e80c

000170d8 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   170d8:	2200      	movs	r2, #0
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   170da:	2306      	movs	r3, #6
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   170dc:	7002      	strb	r2, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   170de:	700b      	strb	r3, [r1, #0]
}
   170e0:	4770      	bx	lr
   170e2:	bf00      	nop

000170e4 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   170e4:	2200      	movs	r2, #0
{
   170e6:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   170e8:	4611      	mov	r1, r2
   170ea:	4b0a      	ldr	r3, [pc, #40]	; (17114 <ll_radio_state_abort+0x30>)
   170ec:	2001      	movs	r0, #1
   170ee:	f7fc f80f 	bl	13110 <mayfly_enqueue>
	LL_ASSERT(!ret);
   170f2:	b900      	cbnz	r0, 170f6 <ll_radio_state_abort+0x12>
}
   170f4:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   170f6:	4a08      	ldr	r2, [pc, #32]	; (17118 <ll_radio_state_abort+0x34>)
   170f8:	4908      	ldr	r1, [pc, #32]	; (1711c <ll_radio_state_abort+0x38>)
   170fa:	4809      	ldr	r0, [pc, #36]	; (17120 <ll_radio_state_abort+0x3c>)
   170fc:	f240 4389 	movw	r3, #1161	; 0x489
   17100:	f00d f9d8 	bl	244b4 <printk>
   17104:	4040      	eors	r0, r0
   17106:	f380 8811 	msr	BASEPRI, r0
   1710a:	f04f 0003 	mov.w	r0, #3
   1710e:	df02      	svc	2
}
   17110:	bd08      	pop	{r3, pc}
   17112:	bf00      	nop
   17114:	2000082c 	.word	0x2000082c
   17118:	0002e92c 	.word	0x0002e92c
   1711c:	0002e974 	.word	0x0002e974
   17120:	0002e80c 	.word	0x0002e80c

00017124 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   17124:	6008      	str	r0, [r1, #0]
   17126:	4801      	ldr	r0, [pc, #4]	; (1712c <ull_ticker_status_give+0x8>)
   17128:	f00c bcc4 	b.w	23ab4 <z_impl_k_sem_give>
   1712c:	200030e8 	.word	0x200030e8

00017130 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17130:	f030 0302 	bics.w	r3, r0, #2
{
   17134:	b510      	push	{r4, lr}
   17136:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17138:	d002      	beq.n	17140 <ull_ticker_status_take+0x10>
   1713a:	680b      	ldr	r3, [r1, #0]
   1713c:	2b02      	cmp	r3, #2
   1713e:	d008      	beq.n	17152 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   17140:	f04f 32ff 	mov.w	r2, #4294967295
   17144:	f04f 33ff 	mov.w	r3, #4294967295
   17148:	4809      	ldr	r0, [pc, #36]	; (17170 <ull_ticker_status_take+0x40>)
   1714a:	f00c fcd9 	bl	23b00 <z_impl_k_sem_take>
	return *ret_cb;
   1714e:	6820      	ldr	r0, [r4, #0]
}
   17150:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17152:	4a08      	ldr	r2, [pc, #32]	; (17174 <ull_ticker_status_take+0x44>)
   17154:	4908      	ldr	r1, [pc, #32]	; (17178 <ull_ticker_status_take+0x48>)
   17156:	4809      	ldr	r0, [pc, #36]	; (1717c <ull_ticker_status_take+0x4c>)
   17158:	f240 43a5 	movw	r3, #1189	; 0x4a5
   1715c:	f00d f9aa 	bl	244b4 <printk>
   17160:	4040      	eors	r0, r0
   17162:	f380 8811 	msr	BASEPRI, r0
   17166:	f04f 0003 	mov.w	r0, #3
   1716a:	df02      	svc	2
   1716c:	e7e8      	b.n	17140 <ull_ticker_status_take+0x10>
   1716e:	bf00      	nop
   17170:	200030e8 	.word	0x200030e8
   17174:	0002e92c 	.word	0x0002e92c
   17178:	0002ea6c 	.word	0x0002ea6c
   1717c:	0002e80c 	.word	0x0002e80c

00017180 <ull_disable_mark>:
	if (!*m) {
   17180:	4a04      	ldr	r2, [pc, #16]	; (17194 <ull_disable_mark+0x14>)
   17182:	6813      	ldr	r3, [r2, #0]
   17184:	b10b      	cbz	r3, 1718a <ull_disable_mark+0xa>
}
   17186:	4618      	mov	r0, r3
   17188:	4770      	bx	lr
		*m = param;
   1718a:	4603      	mov	r3, r0
   1718c:	6010      	str	r0, [r2, #0]
}
   1718e:	4618      	mov	r0, r3
   17190:	4770      	bx	lr
   17192:	bf00      	nop
   17194:	20002d24 	.word	0x20002d24

00017198 <ull_disable_unmark>:
	if (*m && *m == param) {
   17198:	4a04      	ldr	r2, [pc, #16]	; (171ac <ull_disable_unmark+0x14>)
   1719a:	6813      	ldr	r3, [r2, #0]
   1719c:	b123      	cbz	r3, 171a8 <ull_disable_unmark+0x10>
   1719e:	4298      	cmp	r0, r3
		*m = NULL;
   171a0:	bf06      	itte	eq
   171a2:	2100      	moveq	r1, #0
   171a4:	6011      	streq	r1, [r2, #0]
	return NULL;
   171a6:	2300      	movne	r3, #0
}
   171a8:	4618      	mov	r0, r3
   171aa:	4770      	bx	lr
   171ac:	20002d24 	.word	0x20002d24

000171b0 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   171b0:	4b01      	ldr	r3, [pc, #4]	; (171b8 <ull_disable_mark_get+0x8>)
}
   171b2:	6818      	ldr	r0, [r3, #0]
   171b4:	4770      	bx	lr
   171b6:	bf00      	nop
   171b8:	20002d24 	.word	0x20002d24

000171bc <ull_update_mark>:
	if (!*m) {
   171bc:	4a04      	ldr	r2, [pc, #16]	; (171d0 <ull_update_mark+0x14>)
   171be:	6813      	ldr	r3, [r2, #0]
   171c0:	b10b      	cbz	r3, 171c6 <ull_update_mark+0xa>
}
   171c2:	4618      	mov	r0, r3
   171c4:	4770      	bx	lr
		*m = param;
   171c6:	4603      	mov	r3, r0
   171c8:	6010      	str	r0, [r2, #0]
}
   171ca:	4618      	mov	r0, r3
   171cc:	4770      	bx	lr
   171ce:	bf00      	nop
   171d0:	20002d28 	.word	0x20002d28

000171d4 <ull_update_unmark>:
	if (*m && *m == param) {
   171d4:	4a04      	ldr	r2, [pc, #16]	; (171e8 <ull_update_unmark+0x14>)
   171d6:	6813      	ldr	r3, [r2, #0]
   171d8:	b123      	cbz	r3, 171e4 <ull_update_unmark+0x10>
   171da:	4298      	cmp	r0, r3
		*m = NULL;
   171dc:	bf06      	itte	eq
   171de:	2100      	moveq	r1, #0
   171e0:	6011      	streq	r1, [r2, #0]
	return NULL;
   171e2:	2300      	movne	r3, #0
}
   171e4:	4618      	mov	r0, r3
   171e6:	4770      	bx	lr
   171e8:	20002d28 	.word	0x20002d28

000171ec <ull_update_mark_get>:
	return mark_get(mark_update);
   171ec:	4b01      	ldr	r3, [pc, #4]	; (171f4 <ull_update_mark_get+0x8>)
}
   171ee:	6818      	ldr	r0, [r3, #0]
   171f0:	4770      	bx	lr
   171f2:	bf00      	nop
   171f4:	20002d28 	.word	0x20002d28

000171f8 <ull_disable>:
{
   171f8:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   171fa:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   171fc:	f115 0f10 	cmn.w	r5, #16
{
   17200:	b087      	sub	sp, #28
	if (!hdr) {
   17202:	d00b      	beq.n	1721c <ull_disable+0x24>
	compiler_barrier();
   17204:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   17206:	2201      	movs	r2, #1
   17208:	4668      	mov	r0, sp
   1720a:	2100      	movs	r1, #0
   1720c:	f016 f94a 	bl	2d4a4 <z_impl_k_sem_init>
   17210:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   17212:	4a13      	ldr	r2, [pc, #76]	; (17260 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   17214:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   17218:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   1721a:	b913      	cbnz	r3, 17222 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   1721c:	2000      	movs	r0, #0
}
   1721e:	b007      	add	sp, #28
   17220:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   17222:	4b10      	ldr	r3, [pc, #64]	; (17264 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   17224:	2200      	movs	r2, #0
   17226:	4611      	mov	r1, r2
   17228:	2003      	movs	r0, #3
	mfy.param = lll;
   1722a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1722c:	f7fb ff70 	bl	13110 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17230:	b940      	cbnz	r0, 17244 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   17232:	f04f 32ff 	mov.w	r2, #4294967295
   17236:	f04f 33ff 	mov.w	r3, #4294967295
   1723a:	4668      	mov	r0, sp
   1723c:	f00c fc60 	bl	23b00 <z_impl_k_sem_take>
}
   17240:	b007      	add	sp, #28
   17242:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   17244:	4a08      	ldr	r2, [pc, #32]	; (17268 <ull_disable+0x70>)
   17246:	4909      	ldr	r1, [pc, #36]	; (1726c <ull_disable+0x74>)
   17248:	4809      	ldr	r0, [pc, #36]	; (17270 <ull_disable+0x78>)
   1724a:	f240 43e7 	movw	r3, #1255	; 0x4e7
   1724e:	f00d f931 	bl	244b4 <printk>
   17252:	4040      	eors	r0, r0
   17254:	f380 8811 	msr	BASEPRI, r0
   17258:	f04f 0003 	mov.w	r0, #3
   1725c:	df02      	svc	2
   1725e:	e7e8      	b.n	17232 <ull_disable+0x3a>
   17260:	00015ff1 	.word	0x00015ff1
   17264:	2000083c 	.word	0x2000083c
   17268:	0002e92c 	.word	0x0002e92c
   1726c:	0002e974 	.word	0x0002e974
   17270:	0002e80c 	.word	0x0002e80c

00017274 <ull_pdu_rx_alloc_peek>:
{
   17274:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   17276:	4b0d      	ldr	r3, [pc, #52]	; (172ac <ull_pdu_rx_alloc_peek+0x38>)
   17278:	789a      	ldrb	r2, [r3, #2]
   1727a:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   1727c:	42a2      	cmp	r2, r4
   1727e:	d809      	bhi.n	17294 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   17280:	1aa1      	subs	r1, r4, r2
   17282:	b2c9      	uxtb	r1, r1
   17284:	4288      	cmp	r0, r1
   17286:	d802      	bhi.n	1728e <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   17288:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1728a:	7819      	ldrb	r1, [r3, #0]
   1728c:	d109      	bne.n	172a2 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   1728e:	2000      	movs	r0, #0
}
   17290:	bc10      	pop	{r4}
   17292:	4770      	bx	lr
		return count - first + last;
   17294:	7859      	ldrb	r1, [r3, #1]
   17296:	1a89      	subs	r1, r1, r2
   17298:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1729a:	b2c9      	uxtb	r1, r1
   1729c:	4288      	cmp	r0, r1
   1729e:	d8f6      	bhi.n	1728e <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   172a0:	7819      	ldrb	r1, [r3, #0]
}
   172a2:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   172a4:	fb02 3301 	mla	r3, r2, r1, r3
   172a8:	6858      	ldr	r0, [r3, #4]
   172aa:	4770      	bx	lr
   172ac:	200006bc 	.word	0x200006bc

000172b0 <ull_pdu_rx_alloc>:
{
   172b0:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   172b2:	4b0a      	ldr	r3, [pc, #40]	; (172dc <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   172b4:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   172b6:	78da      	ldrb	r2, [r3, #3]
   172b8:	7818      	ldrb	r0, [r3, #0]
   172ba:	785c      	ldrb	r4, [r3, #1]
   172bc:	428a      	cmp	r2, r1
   172be:	d00a      	beq.n	172d6 <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   172c0:	1c4a      	adds	r2, r1, #1
   172c2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   172c4:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   172c8:	4294      	cmp	r4, r2
   172ca:	bf08      	it	eq
   172cc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   172ce:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   172d0:	709a      	strb	r2, [r3, #2]
}
   172d2:	bc10      	pop	{r4}
   172d4:	4770      	bx	lr
		return NULL;
   172d6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   172d8:	e7fb      	b.n	172d2 <ull_pdu_rx_alloc+0x22>
   172da:	bf00      	nop
   172dc:	200006bc 	.word	0x200006bc

000172e0 <ull_rx_put>:
{
   172e0:	b538      	push	{r3, r4, r5, lr}
   172e2:	460c      	mov	r4, r1
   172e4:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   172e6:	f003 fd8b 	bl	1ae00 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   172ea:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   172ec:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   172ee:	4a03      	ldr	r2, [pc, #12]	; (172fc <ull_rx_put+0x1c>)
   172f0:	4628      	mov	r0, r5
}
   172f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   172f6:	f7fb be97 	b.w	13028 <memq_enqueue>
   172fa:	bf00      	nop
   172fc:	200030e0 	.word	0x200030e0

00017300 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   17300:	2201      	movs	r2, #1
   17302:	4b02      	ldr	r3, [pc, #8]	; (1730c <ull_rx_sched+0xc>)
   17304:	4611      	mov	r1, r2
   17306:	2000      	movs	r0, #0
   17308:	f7fb bf02 	b.w	13110 <mayfly_enqueue>
   1730c:	2000084c 	.word	0x2000084c

00017310 <ull_prepare_enqueue>:
{
   17310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   17314:	4e19      	ldr	r6, [pc, #100]	; (1737c <ull_prepare_enqueue+0x6c>)
{
   17316:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1731a:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   1731c:	7877      	ldrb	r7, [r6, #1]
   1731e:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   17322:	1c65      	adds	r5, r4, #1
   17324:	b2ed      	uxtb	r5, r5
		last = 0U;
   17326:	42af      	cmp	r7, r5
   17328:	bf08      	it	eq
   1732a:	2500      	moveq	r5, #0
	if (last == first) {
   1732c:	45ac      	cmp	ip, r5
   1732e:	d021      	beq.n	17374 <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   17330:	4699      	mov	r9, r3
   17332:	4633      	mov	r3, r6
   17334:	460f      	mov	r7, r1
   17336:	4611      	mov	r1, r2
   17338:	f813 2b04 	ldrb.w	r2, [r3], #4
   1733c:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   17340:	b1c4      	cbz	r4, 17374 <ull_prepare_enqueue+0x64>
   17342:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   17344:	2210      	movs	r2, #16
   17346:	4620      	mov	r0, r4
   17348:	f00f fb2b 	bl	269a2 <memcpy>
	e->is_resume = is_resume;
   1734c:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
   17350:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   17354:	f00a 0a01 	and.w	sl, sl, #1
   17358:	f022 0303 	bic.w	r3, r2, #3
   1735c:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
   17360:	9a08      	ldr	r2, [sp, #32]
   17362:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
   17364:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
   17368:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
   1736a:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   1736e:	2000      	movs	r0, #0
}
   17370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   17374:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   17378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1737c:	200006d4 	.word	0x200006d4

00017380 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   17380:	4b05      	ldr	r3, [pc, #20]	; (17398 <ull_prepare_dequeue_get+0x18>)
   17382:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   17384:	78d9      	ldrb	r1, [r3, #3]
   17386:	7818      	ldrb	r0, [r3, #0]
   17388:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   1738a:	bf1a      	itte	ne
   1738c:	3304      	addne	r3, #4
   1738e:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   17392:	2000      	moveq	r0, #0
}
   17394:	4770      	bx	lr
   17396:	bf00      	nop
   17398:	200006d4 	.word	0x200006d4

0001739c <ull_prepare_dequeue_iter>:
{
   1739c:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1739e:	4b0c      	ldr	r3, [pc, #48]	; (173d0 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   173a0:	7802      	ldrb	r2, [r0, #0]
   173a2:	785c      	ldrb	r4, [r3, #1]
   173a4:	78dd      	ldrb	r5, [r3, #3]
   173a6:	7819      	ldrb	r1, [r3, #0]
   173a8:	4294      	cmp	r4, r2
   173aa:	bf9c      	itt	ls
   173ac:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   173ae:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   173b0:	4295      	cmp	r5, r2
   173b2:	d00a      	beq.n	173ca <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   173b4:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   173b6:	4d07      	ldr	r5, [pc, #28]	; (173d4 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   173b8:	b2db      	uxtb	r3, r3
		i = 0U;
   173ba:	429c      	cmp	r4, r3
   173bc:	bf08      	it	eq
   173be:	2300      	moveq	r3, #0
	*idx = i;
   173c0:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   173c2:	fb02 5001 	mla	r0, r2, r1, r5
}
   173c6:	bc30      	pop	{r4, r5}
   173c8:	4770      	bx	lr
		return NULL;
   173ca:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   173cc:	e7fb      	b.n	173c6 <ull_prepare_dequeue_iter+0x2a>
   173ce:	bf00      	nop
   173d0:	200006d4 	.word	0x200006d4
   173d4:	200006d8 	.word	0x200006d8

000173d8 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   173d8:	4b06      	ldr	r3, [pc, #24]	; (173f4 <ull_event_done_extra_get+0x1c>)
   173da:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   173dc:	78d8      	ldrb	r0, [r3, #3]
   173de:	781a      	ldrb	r2, [r3, #0]
   173e0:	4288      	cmp	r0, r1
   173e2:	d005      	beq.n	173f0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   173e4:	fb01 3302 	mla	r3, r1, r2, r3
   173e8:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   173ea:	b110      	cbz	r0, 173f2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   173ec:	3020      	adds	r0, #32
   173ee:	4770      	bx	lr
		return NULL;
   173f0:	2000      	movs	r0, #0
}
   173f2:	4770      	bx	lr
   173f4:	20000694 	.word	0x20000694

000173f8 <ull_event_done>:
{
   173f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   173fa:	4a14      	ldr	r2, [pc, #80]	; (1744c <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   173fc:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   173fe:	78d4      	ldrb	r4, [r2, #3]
   17400:	7811      	ldrb	r1, [r2, #0]
   17402:	7855      	ldrb	r5, [r2, #1]
   17404:	429c      	cmp	r4, r3
   17406:	d01f      	beq.n	17448 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   17408:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1740c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1740e:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   17410:	b2db      	uxtb	r3, r3
		_first = 0U;
   17412:	429d      	cmp	r5, r3
   17414:	bf08      	it	eq
   17416:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   17418:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   1741a:	b19c      	cbz	r4, 17444 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1741c:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
   1741e:	2600      	movs	r6, #0
	link = evdone->hdr.link;
   17420:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
   17422:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   17424:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
   17426:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   17428:	f003 fcea 	bl	1ae00 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1742c:	4a08      	ldr	r2, [pc, #32]	; (17450 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1742e:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   17430:	4621      	mov	r1, r4
   17432:	4638      	mov	r0, r7
   17434:	f7fb fdf8 	bl	13028 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   17438:	4b06      	ldr	r3, [pc, #24]	; (17454 <ull_event_done+0x5c>)
   1743a:	4630      	mov	r0, r6
   1743c:	462a      	mov	r2, r5
   1743e:	4629      	mov	r1, r5
   17440:	f7fb fe66 	bl	13110 <mayfly_enqueue>
}
   17444:	4620      	mov	r0, r4
   17446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   17448:	2400      	movs	r4, #0
   1744a:	e7fb      	b.n	17444 <ull_event_done+0x4c>
   1744c:	20000694 	.word	0x20000694
   17450:	200030e0 	.word	0x200030e0
   17454:	2000084c 	.word	0x2000084c

00017458 <disabled_cb>:
{
   17458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1745a:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   1745c:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
{
   17460:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   17462:	b1ef      	cbz	r7, 174a0 <disabled_cb+0x48>
	LL_ASSERT(adv->node_rx_cc_free);
   17464:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
   17468:	2300      	movs	r3, #0
   1746a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
   1746e:	b36c      	cbz	r4, 174cc <disabled_cb+0x74>
	adv->node_rx_cc_free = NULL;
   17470:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   17472:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17476:	220d      	movs	r2, #13
	adv->node_rx_cc_free = NULL;
   17478:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   1747c:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17480:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   17482:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   17484:	221e      	movs	r2, #30
   17486:	f00f fab7 	bl	269f8 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1748a:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
   1748c:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1748e:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   17490:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   17492:	4621      	mov	r1, r4
   17494:	f7ff fdaa 	bl	16fec <ll_rx_put>
}
   17498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1749c:	f7ff bdb0 	b.w	17000 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   174a0:	4a12      	ldr	r2, [pc, #72]	; (174ec <disabled_cb+0x94>)
   174a2:	4913      	ldr	r1, [pc, #76]	; (174f0 <disabled_cb+0x98>)
   174a4:	4813      	ldr	r0, [pc, #76]	; (174f4 <disabled_cb+0x9c>)
   174a6:	f44f 63d6 	mov.w	r3, #1712	; 0x6b0
   174aa:	f00d f803 	bl	244b4 <printk>
   174ae:	4040      	eors	r0, r0
   174b0:	f380 8811 	msr	BASEPRI, r0
   174b4:	f04f 0003 	mov.w	r0, #3
   174b8:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   174ba:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
   174be:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
	adv->link_cc_free = NULL;
   174c2:	2300      	movs	r3, #0
   174c4:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
   174c8:	2c00      	cmp	r4, #0
   174ca:	d1d1      	bne.n	17470 <disabled_cb+0x18>
   174cc:	4a07      	ldr	r2, [pc, #28]	; (174ec <disabled_cb+0x94>)
   174ce:	490a      	ldr	r1, [pc, #40]	; (174f8 <disabled_cb+0xa0>)
   174d0:	4808      	ldr	r0, [pc, #32]	; (174f4 <disabled_cb+0x9c>)
   174d2:	f240 63b4 	movw	r3, #1716	; 0x6b4
   174d6:	f00c ffed 	bl	244b4 <printk>
   174da:	4040      	eors	r0, r0
   174dc:	f380 8811 	msr	BASEPRI, r0
   174e0:	f04f 0003 	mov.w	r0, #3
   174e4:	df02      	svc	2
   174e6:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
   174ea:	e7c1      	b.n	17470 <disabled_cb+0x18>
   174ec:	0002ea8c 	.word	0x0002ea8c
   174f0:	0002eacc 	.word	0x0002eacc
   174f4:	0002e80c 	.word	0x0002e80c
   174f8:	0002eae0 	.word	0x0002eae0

000174fc <ticker_cb>:
{
   174fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17500:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   17502:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17506:	4295      	cmp	r5, r2
{
   17508:	b08a      	sub	sp, #40	; 0x28
   1750a:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   1750c:	d018      	beq.n	17540 <ticker_cb+0x44>
	return ++hdr->ref;
   1750e:	7c1b      	ldrb	r3, [r3, #16]
   17510:	3301      	adds	r3, #1
   17512:	b2db      	uxtb	r3, r3
   17514:	4680      	mov	r8, r0
   17516:	460f      	mov	r7, r1
   17518:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   1751a:	2b00      	cmp	r3, #0
   1751c:	d061      	beq.n	175e2 <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
   1751e:	4e38      	ldr	r6, [pc, #224]	; (17600 <ticker_cb+0x104>)
		mfy.param = &p;
   17520:	4b38      	ldr	r3, [pc, #224]	; (17604 <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
   17522:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   17526:	2200      	movs	r2, #0
	lll = &adv->lll;
   17528:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1752c:	4611      	mov	r1, r2
   1752e:	2001      	movs	r0, #1
		mfy.param = &p;
   17530:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
   17532:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   17534:	8135      	strh	r5, [r6, #8]
		p.param = lll;
   17536:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1753a:	f7fb fde9 	bl	13110 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1753e:	b938      	cbnz	r0, 17550 <ticker_cb+0x54>
	if (!lll->is_hdcd)
   17540:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   17544:	f015 0501 	ands.w	r5, r5, #1
   17548:	d014      	beq.n	17574 <ticker_cb+0x78>
}
   1754a:	b00a      	add	sp, #40	; 0x28
   1754c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   17550:	4a2d      	ldr	r2, [pc, #180]	; (17608 <ticker_cb+0x10c>)
   17552:	492e      	ldr	r1, [pc, #184]	; (1760c <ticker_cb+0x110>)
   17554:	482e      	ldr	r0, [pc, #184]	; (17610 <ticker_cb+0x114>)
   17556:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   1755a:	f00c ffab 	bl	244b4 <printk>
   1755e:	4040      	eors	r0, r0
   17560:	f380 8811 	msr	BASEPRI, r0
   17564:	f04f 0003 	mov.w	r0, #3
   17568:	df02      	svc	2
	if (!lll->is_hdcd)
   1756a:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   1756e:	f015 0501 	ands.w	r5, r5, #1
   17572:	d1ea      	bne.n	1754a <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   17574:	2104      	movs	r1, #4
   17576:	a809      	add	r0, sp, #36	; 0x24
   17578:	f005 fb6e 	bl	1cc58 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1757c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1757e:	4925      	ldr	r1, [pc, #148]	; (17614 <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   17580:	4a25      	ldr	r2, [pc, #148]	; (17618 <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   17582:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   17584:	fba1 3100 	umull	r3, r1, r1, r0
   17588:	1a43      	subs	r3, r0, r1
   1758a:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1758e:	1aa2      	subs	r2, r4, r2
   17590:	4c22      	ldr	r4, [pc, #136]	; (1761c <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   17592:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   17594:	f240 1147 	movw	r1, #327	; 0x147
   17598:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1759a:	0952      	lsrs	r2, r2, #5
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1759c:	fb01 0313 	mls	r3, r1, r3, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   175a0:	fba4 1202 	umull	r1, r2, r4, r2
				    (TICKER_ID_ADV_BASE +
   175a4:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   175a6:	491e      	ldr	r1, [pc, #120]	; (17620 <ticker_cb+0x124>)
   175a8:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   175aa:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   175ac:	e9cd 5502 	strd	r5, r5, [sp, #8]
   175b0:	e9cd 5500 	strd	r5, r5, [sp]
   175b4:	4628      	mov	r0, r5
   175b6:	b2d2      	uxtb	r2, r2
   175b8:	2101      	movs	r1, #1
		random_delay += 1;
   175ba:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   175bc:	f7fd f838 	bl	14630 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   175c0:	f030 0302 	bics.w	r3, r0, #2
   175c4:	d0c1      	beq.n	1754a <ticker_cb+0x4e>
   175c6:	4a10      	ldr	r2, [pc, #64]	; (17608 <ticker_cb+0x10c>)
   175c8:	4916      	ldr	r1, [pc, #88]	; (17624 <ticker_cb+0x128>)
   175ca:	4811      	ldr	r0, [pc, #68]	; (17610 <ticker_cb+0x114>)
   175cc:	f240 6346 	movw	r3, #1606	; 0x646
   175d0:	f00c ff70 	bl	244b4 <printk>
   175d4:	4040      	eors	r0, r0
   175d6:	f380 8811 	msr	BASEPRI, r0
   175da:	f04f 0003 	mov.w	r0, #3
   175de:	df02      	svc	2
}
   175e0:	e7b3      	b.n	1754a <ticker_cb+0x4e>
		LL_ASSERT(ref);
   175e2:	4a09      	ldr	r2, [pc, #36]	; (17608 <ticker_cb+0x10c>)
   175e4:	4910      	ldr	r1, [pc, #64]	; (17628 <ticker_cb+0x12c>)
   175e6:	480a      	ldr	r0, [pc, #40]	; (17610 <ticker_cb+0x114>)
   175e8:	f240 6324 	movw	r3, #1572	; 0x624
   175ec:	f00c ff62 	bl	244b4 <printk>
   175f0:	4040      	eors	r0, r0
   175f2:	f380 8811 	msr	BASEPRI, r0
   175f6:	f04f 0003 	mov.w	r0, #3
   175fa:	df02      	svc	2
   175fc:	e78f      	b.n	1751e <ticker_cb+0x22>
   175fe:	bf00      	nop
   17600:	2000360c 	.word	0x2000360c
   17604:	2000086c 	.word	0x2000086c
   17608:	0002ea8c 	.word	0x0002ea8c
   1760c:	0002e974 	.word	0x0002e974
   17610:	0002e80c 	.word	0x0002e80c
   17614:	90d4f121 	.word	0x90d4f121
   17618:	20003520 	.word	0x20003520
   1761c:	24924929 	.word	0x24924929
   17620:	000176d1 	.word	0x000176d1
   17624:	0002eafc 	.word	0x0002eafc
   17628:	0002eaf8 	.word	0x0002eaf8

0001762c <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   1762c:	2800      	cmp	r0, #0
   1762e:	d132      	bne.n	17696 <ticker_op_stop_cb+0x6a>
{
   17630:	b538      	push	{r3, r4, r5, lr}
   17632:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   17634:	4d1f      	ldr	r5, [pc, #124]	; (176b4 <ticker_op_stop_cb+0x88>)
	return hdr->ref;
   17636:	7c09      	ldrb	r1, [r1, #16]
   17638:	f104 031c 	add.w	r3, r4, #28
   1763c:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   1763e:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   17642:	b1e1      	cbz	r1, 1767e <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   17644:	6962      	ldr	r2, [r4, #20]
   17646:	b16a      	cbz	r2, 17664 <ticker_op_stop_cb+0x38>
   17648:	4a1b      	ldr	r2, [pc, #108]	; (176b8 <ticker_op_stop_cb+0x8c>)
   1764a:	491c      	ldr	r1, [pc, #112]	; (176bc <ticker_op_stop_cb+0x90>)
   1764c:	481c      	ldr	r0, [pc, #112]	; (176c0 <ticker_op_stop_cb+0x94>)
   1764e:	f240 6397 	movw	r3, #1687	; 0x697
   17652:	f00c ff2f 	bl	244b4 <printk>
   17656:	4040      	eors	r0, r0
   17658:	f380 8811 	msr	BASEPRI, r0
   1765c:	f04f 0003 	mov.w	r0, #3
   17660:	df02      	svc	2
   17662:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   17664:	4917      	ldr	r1, [pc, #92]	; (176c4 <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
   17666:	4818      	ldr	r0, [pc, #96]	; (176c8 <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
   17668:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1766a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1766c:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   1766e:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   17670:	4b10      	ldr	r3, [pc, #64]	; (176b4 <ticker_op_stop_cb+0x88>)
   17672:	4611      	mov	r1, r2
   17674:	2002      	movs	r0, #2
   17676:	f7fb fd4b 	bl	13110 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1767a:	b968      	cbnz	r0, 17698 <ticker_op_stop_cb+0x6c>
}
   1767c:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   1767e:	4b11      	ldr	r3, [pc, #68]	; (176c4 <ticker_op_stop_cb+0x98>)
   17680:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   17682:	2101      	movs	r1, #1
   17684:	462b      	mov	r3, r5
   17686:	2002      	movs	r0, #2
   17688:	f7fb fd42 	bl	13110 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1768c:	2800      	cmp	r0, #0
   1768e:	d0f5      	beq.n	1767c <ticker_op_stop_cb+0x50>
   17690:	f240 63a3 	movw	r3, #1699	; 0x6a3
   17694:	e002      	b.n	1769c <ticker_op_stop_cb+0x70>
   17696:	4770      	bx	lr
		LL_ASSERT(!ret);
   17698:	f240 639e 	movw	r3, #1694	; 0x69e
		LL_ASSERT(!ret);
   1769c:	4a06      	ldr	r2, [pc, #24]	; (176b8 <ticker_op_stop_cb+0x8c>)
   1769e:	490b      	ldr	r1, [pc, #44]	; (176cc <ticker_op_stop_cb+0xa0>)
   176a0:	4807      	ldr	r0, [pc, #28]	; (176c0 <ticker_op_stop_cb+0x94>)
   176a2:	f00c ff07 	bl	244b4 <printk>
   176a6:	4040      	eors	r0, r0
   176a8:	f380 8811 	msr	BASEPRI, r0
   176ac:	f04f 0003 	mov.w	r0, #3
   176b0:	df02      	svc	2
}
   176b2:	bd38      	pop	{r3, r4, r5, pc}
   176b4:	2000087c 	.word	0x2000087c
   176b8:	0002ea8c 	.word	0x0002ea8c
   176bc:	0002eb18 	.word	0x0002eb18
   176c0:	0002e80c 	.word	0x0002e80c
   176c4:	00017459 	.word	0x00017459
   176c8:	0001ccc5 	.word	0x0001ccc5
   176cc:	0002e974 	.word	0x0002e974

000176d0 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   176d0:	b900      	cbnz	r0, 176d4 <ticker_op_update_cb+0x4>
   176d2:	4770      	bx	lr
{
   176d4:	b510      	push	{r4, lr}
   176d6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   176d8:	f7ff fd6a 	bl	171b0 <ull_disable_mark_get>
   176dc:	4284      	cmp	r4, r0
   176de:	d00c      	beq.n	176fa <ticker_op_update_cb+0x2a>
   176e0:	4a06      	ldr	r2, [pc, #24]	; (176fc <ticker_op_update_cb+0x2c>)
   176e2:	4907      	ldr	r1, [pc, #28]	; (17700 <ticker_op_update_cb+0x30>)
   176e4:	4807      	ldr	r0, [pc, #28]	; (17704 <ticker_op_update_cb+0x34>)
   176e6:	f240 6367 	movw	r3, #1639	; 0x667
   176ea:	f00c fee3 	bl	244b4 <printk>
   176ee:	4040      	eors	r0, r0
   176f0:	f380 8811 	msr	BASEPRI, r0
   176f4:	f04f 0003 	mov.w	r0, #3
   176f8:	df02      	svc	2
}
   176fa:	bd10      	pop	{r4, pc}
   176fc:	0002ea8c 	.word	0x0002ea8c
   17700:	0002eb2c 	.word	0x0002eb2c
   17704:	0002e80c 	.word	0x0002e80c

00017708 <ticker_stop_cb>:
{
   17708:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1770a:	4c19      	ldr	r4, [pc, #100]	; (17770 <ticker_stop_cb+0x68>)
   1770c:	4a19      	ldr	r2, [pc, #100]	; (17774 <ticker_stop_cb+0x6c>)
   1770e:	1b1c      	subs	r4, r3, r4
   17710:	0964      	lsrs	r4, r4, #5
{
   17712:	461d      	mov	r5, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   17714:	fba2 3404 	umull	r3, r4, r2, r4
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   17718:	f014 0fff 	tst.w	r4, #255	; 0xff
{
   1771c:	b083      	sub	sp, #12
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1771e:	d119      	bne.n	17754 <ticker_stop_cb+0x4c>
			  TICKER_ID_ADV_BASE + handle,
   17720:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   17722:	4b15      	ldr	r3, [pc, #84]	; (17778 <ticker_stop_cb+0x70>)
   17724:	9500      	str	r5, [sp, #0]
   17726:	b2d2      	uxtb	r2, r2
   17728:	2101      	movs	r1, #1
   1772a:	2000      	movs	r0, #0
   1772c:	f7fc ffd0 	bl	146d0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   17730:	f030 0302 	bics.w	r3, r0, #2
   17734:	d00c      	beq.n	17750 <ticker_stop_cb+0x48>
   17736:	4a11      	ldr	r2, [pc, #68]	; (1777c <ticker_stop_cb+0x74>)
   17738:	4911      	ldr	r1, [pc, #68]	; (17780 <ticker_stop_cb+0x78>)
   1773a:	4812      	ldr	r0, [pc, #72]	; (17784 <ticker_stop_cb+0x7c>)
   1773c:	f240 6379 	movw	r3, #1657	; 0x679
   17740:	f00c feb8 	bl	244b4 <printk>
   17744:	4040      	eors	r0, r0
   17746:	f380 8811 	msr	BASEPRI, r0
   1774a:	f04f 0003 	mov.w	r0, #3
   1774e:	df02      	svc	2
}
   17750:	b003      	add	sp, #12
   17752:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   17754:	4a09      	ldr	r2, [pc, #36]	; (1777c <ticker_stop_cb+0x74>)
   17756:	490c      	ldr	r1, [pc, #48]	; (17788 <ticker_stop_cb+0x80>)
   17758:	480a      	ldr	r0, [pc, #40]	; (17784 <ticker_stop_cb+0x7c>)
   1775a:	f240 6374 	movw	r3, #1652	; 0x674
   1775e:	f00c fea9 	bl	244b4 <printk>
   17762:	4040      	eors	r0, r0
   17764:	f380 8811 	msr	BASEPRI, r0
   17768:	f04f 0003 	mov.w	r0, #3
   1776c:	df02      	svc	2
   1776e:	e7d7      	b.n	17720 <ticker_stop_cb+0x18>
   17770:	20003520 	.word	0x20003520
   17774:	24924929 	.word	0x24924929
   17778:	0001762d 	.word	0x0001762d
   1777c:	0002ea8c 	.word	0x0002ea8c
   17780:	0002eafc 	.word	0x0002eafc
   17784:	0002e80c 	.word	0x0002e80c
   17788:	0002eb5c 	.word	0x0002eb5c

0001778c <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   1778c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1778e:	4c1d      	ldr	r4, [pc, #116]	; (17804 <conn_release.constprop.0+0x78>)
   17790:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
   17792:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   17794:	b163      	cbz	r3, 177b0 <conn_release.constprop.0+0x24>
   17796:	4a1c      	ldr	r2, [pc, #112]	; (17808 <conn_release.constprop.0+0x7c>)
   17798:	491c      	ldr	r1, [pc, #112]	; (1780c <conn_release.constprop.0+0x80>)
   1779a:	481d      	ldr	r0, [pc, #116]	; (17810 <conn_release.constprop.0+0x84>)
   1779c:	f240 63de 	movw	r3, #1758	; 0x6de
   177a0:	f00c fe88 	bl	244b4 <printk>
   177a4:	4040      	eors	r0, r0
   177a6:	f380 8811 	msr	BASEPRI, r0
   177aa:	f04f 0003 	mov.w	r0, #3
   177ae:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   177b0:	f105 0150 	add.w	r1, r5, #80	; 0x50
   177b4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   177b8:	f7fb fc2c 	bl	13014 <memq_deinit>
	LL_ASSERT(link);
   177bc:	4606      	mov	r6, r0
   177be:	b190      	cbz	r0, 177e6 <conn_release.constprop.0+0x5a>
	ll_conn_release(lll->hdr.parent);
   177c0:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   177c2:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   177c4:	f000 ff9a 	bl	186fc <ll_conn_release>
	adv->lll.conn = NULL;
   177c8:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   177ca:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->lll.conn = NULL;
   177ce:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   177d0:	f7ff fc06 	bl	16fe0 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   177d4:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	adv->node_rx_cc_free = NULL;
   177d8:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
	ll_rx_link_release(adv->link_cc_free);
   177dc:	f7ff fbf4 	bl	16fc8 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   177e0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
}
   177e4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   177e6:	4a08      	ldr	r2, [pc, #32]	; (17808 <conn_release.constprop.0+0x7c>)
   177e8:	490a      	ldr	r1, [pc, #40]	; (17814 <conn_release.constprop.0+0x88>)
   177ea:	4809      	ldr	r0, [pc, #36]	; (17810 <conn_release.constprop.0+0x84>)
   177ec:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
   177f0:	f00c fe60 	bl	244b4 <printk>
   177f4:	4040      	eors	r0, r0
   177f6:	f380 8811 	msr	BASEPRI, r0
   177fa:	f04f 0003 	mov.w	r0, #3
   177fe:	df02      	svc	2
   17800:	e7de      	b.n	177c0 <conn_release.constprop.0+0x34>
   17802:	bf00      	nop
   17804:	20003520 	.word	0x20003520
   17808:	0002ea8c 	.word	0x0002ea8c
   1780c:	0002eb68 	.word	0x0002eb68
   17810:	0002e80c 	.word	0x0002e80c
   17814:	0002ec30 	.word	0x0002ec30

00017818 <ll_adv_params_set>:
{
   17818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1781c:	4d4f      	ldr	r5, [pc, #316]	; (1795c <ll_adv_params_set+0x144>)
	if (!adv || adv->is_enabled) {
   1781e:	4c50      	ldr	r4, [pc, #320]	; (17960 <ll_adv_params_set+0x148>)
{
   17820:	4686      	mov	lr, r0
	if (!adv || adv->is_enabled) {
   17822:	f894 70d6 	ldrb.w	r7, [r4, #214]	; 0xd6
{
   17826:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   17828:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   1782c:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   1782e:	f017 0701 	ands.w	r7, r7, #1
{
   17832:	4699      	mov	r9, r3
   17834:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
   17838:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1783c:	9000      	str	r0, [sp, #0]
   1783e:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   17842:	d173      	bne.n	1792c <ll_adv_params_set+0x114>
   17844:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   17848:	8d21      	ldrh	r1, [r4, #40]	; 0x28
   1784a:	4615      	mov	r5, r2
   1784c:	f04f 0827 	mov.w	r8, #39	; 0x27
   17850:	222d      	movs	r2, #45	; 0x2d
   17852:	fb18 2800 	smlabb	r8, r8, r0, r2
	pdu->type = pdu_adv_type[adv_type];
   17856:	aa02      	add	r2, sp, #8
   17858:	4462      	add	r2, ip
   1785a:	f814 0008 	ldrb.w	r0, [r4, r8]
   1785e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
	adv->lll.chan_map = chan_map;
   17862:	f006 0607 	and.w	r6, r6, #7
		adv->interval = 0;
   17866:	f1bc 0f01 	cmp.w	ip, #1
	adv->lll.chan_map = chan_map;
   1786a:	f003 0303 	and.w	r3, r3, #3
   1786e:	ea4f 0646 	mov.w	r6, r6, lsl #1
	pdu->type = pdu_adv_type[adv_type];
   17872:	f020 001f 	bic.w	r0, r0, #31
		adv->interval = 0;
   17876:	bf08      	it	eq
   17878:	f04f 0e00 	moveq.w	lr, #0
	adv->lll.chan_map = chan_map;
   1787c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   17880:	f012 0f0e 	tst.w	r2, #14
	adv->own_addr_type = own_addr_type;
   17884:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   17888:	f8a4 e0d4 	strh.w	lr, [r4, #212]	; 0xd4
	pdu->type = pdu_adv_type[adv_type];
   1788c:	f002 020f 	and.w	r2, r2, #15
	adv->lll.chan_map = chan_map;
   17890:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
   17894:	ea42 0200 	orr.w	r2, r2, r0
   17898:	f021 0102 	bic.w	r1, r1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1789c:	bf0c      	ite	eq
   1789e:	2001      	moveq	r0, #1
   178a0:	2000      	movne	r0, #0
	adv->own_addr_type = own_addr_type;
   178a2:	f365 0342 	bfi	r3, r5, #1, #2
   178a6:	f360 1245 	bfi	r2, r0, #5, #1
	adv->lll.chan_map = chan_map;
   178aa:	430e      	orrs	r6, r1
   178ac:	8526      	strh	r6, [r4, #40]	; 0x28
   178ae:	f804 2008 	strb.w	r2, [r4, r8]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   178b2:	b2da      	uxtb	r2, r3
	adv->own_addr_type = own_addr_type;
   178b4:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   178b8:	075b      	lsls	r3, r3, #29
   178ba:	eb04 0608 	add.w	r6, r4, r8
   178be:	d50a      	bpl.n	178d6 <ll_adv_params_set+0xbe>
		adv->id_addr_type = direct_addr_type;
   178c0:	4613      	mov	r3, r2
   178c2:	f369 03c3 	bfi	r3, r9, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   178c6:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
   178c8:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   178cc:	2206      	movs	r2, #6
   178ce:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   178d2:	f00f f866 	bl	269a2 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   178d6:	f814 1008 	ldrb.w	r1, [r4, r8]
   178da:	f001 030f 	and.w	r3, r1, #15
   178de:	2b01      	cmp	r3, #1
   178e0:	d029      	beq.n	17936 <ll_adv_params_set+0x11e>
	} else if (pdu->len == 0) {
   178e2:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   178e4:	f005 0501 	and.w	r5, r5, #1
   178e8:	f365 1186 	bfi	r1, r5, #6, #1
	} else if (pdu->len == 0) {
   178ec:	b1bb      	cbz	r3, 1791e <ll_adv_params_set+0x106>
		pdu->rx_addr = 0;
   178ee:	f36f 11c7 	bfc	r1, #7, #1
   178f2:	f804 1008 	strb.w	r1, [r4, r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   178f6:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   178fa:	2327      	movs	r3, #39	; 0x27
   178fc:	227d      	movs	r2, #125	; 0x7d
   178fe:	fb13 2301 	smlabb	r3, r3, r1, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   17902:	01ad      	lsls	r5, r5, #6
   17904:	f045 0504 	orr.w	r5, r5, #4
   17908:	54e5      	strb	r5, [r4, r3]
   1790a:	441c      	add	r4, r3
	if (pdu->len == 0) {
   1790c:	7863      	ldrb	r3, [r4, #1]
   1790e:	b913      	cbnz	r3, 17916 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   17910:	2206      	movs	r2, #6
	return 0;
   17912:	461f      	mov	r7, r3
		pdu->len = BDADDR_SIZE;
   17914:	7062      	strb	r2, [r4, #1]
}
   17916:	4638      	mov	r0, r7
   17918:	b003      	add	sp, #12
   1791a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
   1791e:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   17922:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   17924:	f804 1008 	strb.w	r1, [r4, r8]
		pdu->len = BDADDR_SIZE;
   17928:	7073      	strb	r3, [r6, #1]
   1792a:	e7e4      	b.n	178f6 <ll_adv_params_set+0xde>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1792c:	270c      	movs	r7, #12
}
   1792e:	4638      	mov	r0, r7
   17930:	b003      	add	sp, #12
   17932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   17936:	f005 0501 	and.w	r5, r5, #1
   1793a:	f365 1186 	bfi	r1, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   1793e:	4608      	mov	r0, r1
   17940:	f369 10c7 	bfi	r0, r9, #7, #1
   17944:	f804 0008 	strb.w	r0, [r4, r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   17948:	990a      	ldr	r1, [sp, #40]	; 0x28
   1794a:	2206      	movs	r2, #6
   1794c:	f106 0008 	add.w	r0, r6, #8
   17950:	f00f f827 	bl	269a2 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   17954:	230c      	movs	r3, #12
   17956:	7073      	strb	r3, [r6, #1]
   17958:	e7cd      	b.n	178f6 <ll_adv_params_set+0xde>
   1795a:	bf00      	nop
   1795c:	0002dcd4 	.word	0x0002dcd4
   17960:	20003520 	.word	0x20003520

00017964 <ull_adv_init>:
}
   17964:	2000      	movs	r0, #0
   17966:	4770      	bx	lr

00017968 <ull_adv_reset>:
{
   17968:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   1796a:	4c4b      	ldr	r4, [pc, #300]	; (17a98 <ull_adv_reset+0x130>)
   1796c:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   17970:	07da      	lsls	r2, r3, #31
{
   17972:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   17974:	d549      	bpl.n	17a0a <ull_adv_reset+0xa2>
	mark = ull_disable_mark(adv);
   17976:	4620      	mov	r0, r4
   17978:	f7ff fc02 	bl	17180 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   1797c:	4284      	cmp	r4, r0
   1797e:	d00c      	beq.n	1799a <ull_adv_reset+0x32>
   17980:	4a46      	ldr	r2, [pc, #280]	; (17a9c <ull_adv_reset+0x134>)
   17982:	4947      	ldr	r1, [pc, #284]	; (17aa0 <ull_adv_reset+0x138>)
   17984:	4847      	ldr	r0, [pc, #284]	; (17aa4 <ull_adv_reset+0x13c>)
   17986:	f240 7333 	movw	r3, #1843	; 0x733
   1798a:	f00c fd93 	bl	244b4 <printk>
   1798e:	4040      	eors	r0, r0
   17990:	f380 8811 	msr	BASEPRI, r0
   17994:	f04f 0003 	mov.w	r0, #3
   17998:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1799a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1799e:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   179a0:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   179a2:	d435      	bmi.n	17a10 <ull_adv_reset+0xa8>
	ret_cb = TICKER_STATUS_BUSY;
   179a4:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   179a6:	2103      	movs	r1, #3
   179a8:	4b3f      	ldr	r3, [pc, #252]	; (17aa8 <ull_adv_reset+0x140>)
   179aa:	9500      	str	r5, [sp, #0]
   179ac:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   179ae:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   179b0:	f7fc fe8e 	bl	146d0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   179b4:	4629      	mov	r1, r5
   179b6:	f7ff fbbb 	bl	17130 <ull_ticker_status_take>
	if (ret) {
   179ba:	2800      	cmp	r0, #0
   179bc:	d151      	bne.n	17a62 <ull_adv_reset+0xfa>
	ret = ull_disable(&adv->lll);
   179be:	483b      	ldr	r0, [pc, #236]	; (17aac <ull_adv_reset+0x144>)
   179c0:	f7ff fc1a 	bl	171f8 <ull_disable>
	LL_ASSERT(!ret);
   179c4:	2800      	cmp	r0, #0
   179c6:	d139      	bne.n	17a3c <ull_adv_reset+0xd4>
	mark = ull_disable_unmark(adv);
   179c8:	4833      	ldr	r0, [pc, #204]	; (17a98 <ull_adv_reset+0x130>)
   179ca:	f7ff fbe5 	bl	17198 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   179ce:	4284      	cmp	r4, r0
   179d0:	d00c      	beq.n	179ec <ull_adv_reset+0x84>
   179d2:	4a32      	ldr	r2, [pc, #200]	; (17a9c <ull_adv_reset+0x134>)
   179d4:	4932      	ldr	r1, [pc, #200]	; (17aa0 <ull_adv_reset+0x138>)
   179d6:	4833      	ldr	r0, [pc, #204]	; (17aa4 <ull_adv_reset+0x13c>)
   179d8:	f240 7355 	movw	r3, #1877	; 0x755
   179dc:	f00c fd6a 	bl	244b4 <printk>
   179e0:	4040      	eors	r0, r0
   179e2:	f380 8811 	msr	BASEPRI, r0
   179e6:	f04f 0003 	mov.w	r0, #3
   179ea:	df02      	svc	2
	if (adv->lll.conn) {
   179ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   179ee:	b10b      	cbz	r3, 179f4 <ull_adv_reset+0x8c>
		conn_release(adv);
   179f0:	f7ff fecc 	bl	1778c <conn_release.constprop.0>
	adv->is_enabled = 0U;
   179f4:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   179f8:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   179fa:	f36f 0300 	bfc	r3, #0, #1
   179fe:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   17a02:	f000 fa81 	bl	17f08 <ull_scan_is_enabled_get>
   17a06:	2800      	cmp	r0, #0
   17a08:	d040      	beq.n	17a8c <ull_adv_reset+0x124>
}
   17a0a:	2000      	movs	r0, #0
   17a0c:	b005      	add	sp, #20
   17a0e:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
   17a10:	2202      	movs	r2, #2
   17a12:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   17a14:	2103      	movs	r1, #3
   17a16:	4b24      	ldr	r3, [pc, #144]	; (17aa8 <ull_adv_reset+0x140>)
   17a18:	9500      	str	r5, [sp, #0]
   17a1a:	2201      	movs	r2, #1
   17a1c:	2000      	movs	r0, #0
   17a1e:	f7fc fe57 	bl	146d0 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   17a22:	4629      	mov	r1, r5
   17a24:	f7ff fb84 	bl	17130 <ull_ticker_status_take>
		if (ret) {
   17a28:	2800      	cmp	r0, #0
   17a2a:	d0bb      	beq.n	179a4 <ull_adv_reset+0x3c>
			mark = ull_disable_unmark(adv);
   17a2c:	481a      	ldr	r0, [pc, #104]	; (17a98 <ull_adv_reset+0x130>)
   17a2e:	f7ff fbb3 	bl	17198 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   17a32:	4284      	cmp	r4, r0
   17a34:	d0e9      	beq.n	17a0a <ull_adv_reset+0xa2>
   17a36:	f240 733e 	movw	r3, #1854	; 0x73e
   17a3a:	e019      	b.n	17a70 <ull_adv_reset+0x108>
	LL_ASSERT(!ret);
   17a3c:	4a17      	ldr	r2, [pc, #92]	; (17a9c <ull_adv_reset+0x134>)
   17a3e:	491c      	ldr	r1, [pc, #112]	; (17ab0 <ull_adv_reset+0x148>)
   17a40:	4818      	ldr	r0, [pc, #96]	; (17aa4 <ull_adv_reset+0x13c>)
   17a42:	f240 7352 	movw	r3, #1874	; 0x752
   17a46:	f00c fd35 	bl	244b4 <printk>
   17a4a:	4040      	eors	r0, r0
   17a4c:	f380 8811 	msr	BASEPRI, r0
   17a50:	f04f 0003 	mov.w	r0, #3
   17a54:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   17a56:	4810      	ldr	r0, [pc, #64]	; (17a98 <ull_adv_reset+0x130>)
   17a58:	f7ff fb9e 	bl	17198 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   17a5c:	4284      	cmp	r4, r0
   17a5e:	d1b8      	bne.n	179d2 <ull_adv_reset+0x6a>
   17a60:	e7c4      	b.n	179ec <ull_adv_reset+0x84>
		mark = ull_disable_unmark(adv);
   17a62:	480d      	ldr	r0, [pc, #52]	; (17a98 <ull_adv_reset+0x130>)
   17a64:	f7ff fb98 	bl	17198 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   17a68:	4284      	cmp	r4, r0
   17a6a:	d0ce      	beq.n	17a0a <ull_adv_reset+0xa2>
   17a6c:	f240 734c 	movw	r3, #1868	; 0x74c
   17a70:	4a0a      	ldr	r2, [pc, #40]	; (17a9c <ull_adv_reset+0x134>)
   17a72:	490b      	ldr	r1, [pc, #44]	; (17aa0 <ull_adv_reset+0x138>)
   17a74:	480b      	ldr	r0, [pc, #44]	; (17aa4 <ull_adv_reset+0x13c>)
   17a76:	f00c fd1d 	bl	244b4 <printk>
   17a7a:	4040      	eors	r0, r0
   17a7c:	f380 8811 	msr	BASEPRI, r0
   17a80:	f04f 0003 	mov.w	r0, #3
   17a84:	df02      	svc	2
}
   17a86:	2000      	movs	r0, #0
   17a88:	b005      	add	sp, #20
   17a8a:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
   17a8c:	f003 ffd4 	bl	1ba38 <ull_filter_adv_scan_state_cb>
}
   17a90:	2000      	movs	r0, #0
   17a92:	b005      	add	sp, #20
   17a94:	bd30      	pop	{r4, r5, pc}
   17a96:	bf00      	nop
   17a98:	20003520 	.word	0x20003520
   17a9c:	0002ea8c 	.word	0x0002ea8c
   17aa0:	0002eb7c 	.word	0x0002eb7c
   17aa4:	0002e80c 	.word	0x0002e80c
   17aa8:	00017125 	.word	0x00017125
   17aac:	2000353c 	.word	0x2000353c
   17ab0:	0002e974 	.word	0x0002e974

00017ab4 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   17ab4:	4a03      	ldr	r2, [pc, #12]	; (17ac4 <ull_adv_handle_get+0x10>)
   17ab6:	4b04      	ldr	r3, [pc, #16]	; (17ac8 <ull_adv_handle_get+0x14>)
   17ab8:	1a80      	subs	r0, r0, r2
   17aba:	0940      	lsrs	r0, r0, #5
   17abc:	fba3 3000 	umull	r3, r0, r3, r0
}
   17ac0:	b280      	uxth	r0, r0
   17ac2:	4770      	bx	lr
   17ac4:	20003520 	.word	0x20003520
   17ac8:	24924929 	.word	0x24924929

00017acc <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   17acc:	4a04      	ldr	r2, [pc, #16]	; (17ae0 <ull_adv_lll_handle_get+0x14>)
   17ace:	6800      	ldr	r0, [r0, #0]
   17ad0:	4b04      	ldr	r3, [pc, #16]	; (17ae4 <ull_adv_lll_handle_get+0x18>)
   17ad2:	1a80      	subs	r0, r0, r2
   17ad4:	0940      	lsrs	r0, r0, #5
   17ad6:	fba3 3000 	umull	r3, r0, r3, r0
}
   17ada:	b280      	uxth	r0, r0
   17adc:	4770      	bx	lr
   17ade:	bf00      	nop
   17ae0:	20003520 	.word	0x20003520
   17ae4:	24924929 	.word	0x24924929

00017ae8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   17ae8:	b938      	cbnz	r0, 17afa <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   17aea:	4805      	ldr	r0, [pc, #20]	; (17b00 <ull_adv_is_enabled_get+0x18>)
   17aec:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
	return &ll_adv[handle];
   17af0:	f013 0f01 	tst.w	r3, #1
   17af4:	bf08      	it	eq
   17af6:	2000      	moveq	r0, #0
   17af8:	4770      	bx	lr
		return NULL;
   17afa:	2000      	movs	r0, #0
}
   17afc:	4770      	bx	lr
   17afe:	bf00      	nop
   17b00:	20003520 	.word	0x20003520

00017b04 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   17b04:	b928      	cbnz	r0, 17b12 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   17b06:	4b04      	ldr	r3, [pc, #16]	; (17b18 <ull_adv_is_enabled+0x14>)
   17b08:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
   17b0c:	f000 0001 	and.w	r0, r0, #1
   17b10:	4770      	bx	lr
   17b12:	2000      	movs	r0, #0
}
   17b14:	4770      	bx	lr
   17b16:	bf00      	nop
   17b18:	20003520 	.word	0x20003520

00017b1c <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   17b1c:	b950      	cbnz	r0, 17b34 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   17b1e:	4b06      	ldr	r3, [pc, #24]	; (17b38 <ull_adv_filter_pol_get+0x1c>)
   17b20:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
   17b24:	f010 0001 	ands.w	r0, r0, #1
   17b28:	d005      	beq.n	17b36 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   17b2a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   17b2e:	f000 0003 	and.w	r0, r0, #3
   17b32:	4770      	bx	lr
		return 0;
   17b34:	2000      	movs	r0, #0
}
   17b36:	4770      	bx	lr
   17b38:	20003520 	.word	0x20003520

00017b3c <ull_adv_data_set>:
{
   17b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   17b40:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
   17b44:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17b48:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   17b4c:	f100 0c1c 	add.w	ip, r0, #28
   17b50:	f103 0611 	add.w	r6, r3, #17
   17b54:	4605      	mov	r5, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   17b56:	f81c 0006 	ldrb.w	r0, [ip, r6]
   17b5a:	f000 0e0f 	and.w	lr, r0, #15
   17b5e:	f1be 0f01 	cmp.w	lr, #1
{
   17b62:	460f      	mov	r7, r1
   17b64:	eb0c 0106 	add.w	r1, ip, r6
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   17b68:	d038      	beq.n	17bdc <ull_adv_data_set+0xa0>
   17b6a:	4690      	mov	r8, r2
	first = pdu->first;
   17b6c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
	if (first == last) {
   17b70:	4294      	cmp	r4, r2
	first = pdu->first;
   17b72:	fa5f fe82 	uxtb.w	lr, r2
	if (first == last) {
   17b76:	d034      	beq.n	17be2 <ull_adv_data_set+0xa6>
		pdu->last = first;
   17b78:	f885 e02c 	strb.w	lr, [r5, #44]	; 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
   17b7c:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   17b80:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
		if (first_latest != first) {
   17b84:	4596      	cmp	lr, r2
   17b86:	d033      	beq.n	17bf0 <ull_adv_data_set+0xb4>
			last++;
   17b88:	3401      	adds	r4, #1
   17b8a:	b2e4      	uxtb	r4, r4
			if (last == DOUBLE_BUFFER_SIZE) {
   17b8c:	2c02      	cmp	r4, #2
   17b8e:	f81c 0006 	ldrb.w	r0, [ip, r6]
   17b92:	d02a      	beq.n	17bea <ull_adv_data_set+0xae>
   17b94:	2227      	movs	r2, #39	; 0x27
   17b96:	2302      	movs	r3, #2
   17b98:	fb12 3304 	smlabb	r3, r2, r4, r3
		pdu->chan_sel = prev->chan_sel;
   17b9c:	f3c0 1240 	ubfx	r2, r0, #5, #1
	pdu->type = prev->type;
   17ba0:	f3c0 0603 	ubfx	r6, r0, #0, #4
   17ba4:	ea46 1642 	orr.w	r6, r6, r2, lsl #5
	pdu->tx_addr = prev->tx_addr;
   17ba8:	f3c0 1280 	ubfx	r2, r0, #6, #1
	pdu->type = prev->type;
   17bac:	ea46 1682 	orr.w	r6, r6, r2, lsl #6
   17bb0:	f000 0080 	and.w	r0, r0, #128	; 0x80
	return (void *)pdu->pdu[last];
   17bb4:	f105 022b 	add.w	r2, r5, #43	; 0x2b
   17bb8:	4330      	orrs	r0, r6
   17bba:	18d6      	adds	r6, r2, r3
   17bbc:	54d0      	strb	r0, [r2, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   17bbe:	3102      	adds	r1, #2
   17bc0:	2206      	movs	r2, #6
   17bc2:	1cb0      	adds	r0, r6, #2
   17bc4:	f00e feed 	bl	269a2 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   17bc8:	463a      	mov	r2, r7
   17bca:	4641      	mov	r1, r8
   17bcc:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   17bd0:	3706      	adds	r7, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   17bd2:	f00e fee6 	bl	269a2 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   17bd6:	7077      	strb	r7, [r6, #1]
	pdu->last = idx;
   17bd8:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
   17bdc:	2000      	movs	r0, #0
   17bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last++;
   17be2:	3401      	adds	r4, #1
   17be4:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
   17be6:	2c02      	cmp	r4, #2
   17be8:	d1d4      	bne.n	17b94 <ull_adv_data_set+0x58>
{
   17bea:	2302      	movs	r3, #2
			last = 0U;
   17bec:	2400      	movs	r4, #0
   17bee:	e7d5      	b.n	17b9c <ull_adv_data_set+0x60>
   17bf0:	f81c 0006 	ldrb.w	r0, [ip, r6]
   17bf4:	3302      	adds	r3, #2
   17bf6:	e7d1      	b.n	17b9c <ull_adv_data_set+0x60>

00017bf8 <ll_adv_data_set>:
{
   17bf8:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   17bfa:	4601      	mov	r1, r0
   17bfc:	4801      	ldr	r0, [pc, #4]	; (17c04 <ll_adv_data_set+0xc>)
   17bfe:	f7ff bf9d 	b.w	17b3c <ull_adv_data_set>
   17c02:	bf00      	nop
   17c04:	20003520 	.word	0x20003520

00017c08 <ull_scan_rsp_set>:
{
   17c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   17c0c:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	first = pdu->first;
   17c10:	f890 e07b 	ldrb.w	lr, [r0, #123]	; 0x7b
   17c14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17c18:	4605      	mov	r5, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   17c1a:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   17c1e:	f103 0061 	add.w	r0, r3, #97	; 0x61
   17c22:	f105 0c1c 	add.w	ip, r5, #28
	if (first == last) {
   17c26:	45a6      	cmp	lr, r4
   17c28:	460e      	mov	r6, r1
   17c2a:	4617      	mov	r7, r2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   17c2c:	eb0c 0100 	add.w	r1, ip, r0
	if (first == last) {
   17c30:	d009      	beq.n	17c46 <ull_scan_rsp_set+0x3e>
		pdu->last = first;
   17c32:	fa5f f28e 	uxtb.w	r2, lr
   17c36:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
   17c3a:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   17c3e:	f895 e07b 	ldrb.w	lr, [r5, #123]	; 0x7b
		if (first_latest != first) {
   17c42:	4572      	cmp	r2, lr
   17c44:	d027      	beq.n	17c96 <ull_scan_rsp_set+0x8e>
		last++;
   17c46:	3401      	adds	r4, #1
   17c48:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
   17c4a:	2c02      	cmp	r4, #2
   17c4c:	d025      	beq.n	17c9a <ull_scan_rsp_set+0x92>
   17c4e:	2227      	movs	r2, #39	; 0x27
   17c50:	2302      	movs	r3, #2
   17c52:	fb12 3304 	smlabb	r3, r2, r4, r3
	pdu->tx_addr = prev->tx_addr;
   17c56:	f81c 0000 	ldrb.w	r0, [ip, r0]
   17c5a:	f3c0 1080 	ubfx	r0, r0, #6, #1
	return (void *)pdu->pdu[last];
   17c5e:	f105 027b 	add.w	r2, r5, #123	; 0x7b
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   17c62:	0180      	lsls	r0, r0, #6
   17c64:	eb02 0803 	add.w	r8, r2, r3
   17c68:	f040 0004 	orr.w	r0, r0, #4
   17c6c:	54d0      	strb	r0, [r2, r3]
	pdu->len = BDADDR_SIZE + len;
   17c6e:	1db3      	adds	r3, r6, #6
   17c70:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   17c74:	3102      	adds	r1, #2
   17c76:	f108 0002 	add.w	r0, r8, #2
   17c7a:	2206      	movs	r2, #6
   17c7c:	f00e fe91 	bl	269a2 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   17c80:	4632      	mov	r2, r6
   17c82:	4639      	mov	r1, r7
   17c84:	f108 0008 	add.w	r0, r8, #8
   17c88:	f00e fe8b 	bl	269a2 <memcpy>
	pdu->last = idx;
   17c8c:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
}
   17c90:	2000      	movs	r0, #0
   17c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17c96:	3302      	adds	r3, #2
   17c98:	e7dd      	b.n	17c56 <ull_scan_rsp_set+0x4e>
{
   17c9a:	2302      	movs	r3, #2
			last = 0U;
   17c9c:	2400      	movs	r4, #0
   17c9e:	e7da      	b.n	17c56 <ull_scan_rsp_set+0x4e>

00017ca0 <ll_adv_scan_rsp_set>:
{
   17ca0:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   17ca2:	4601      	mov	r1, r0
   17ca4:	4801      	ldr	r0, [pc, #4]	; (17cac <ll_adv_scan_rsp_set+0xc>)
   17ca6:	f7ff bfaf 	b.w	17c08 <ull_scan_rsp_set>
   17caa:	bf00      	nop
   17cac:	20003520 	.word	0x20003520

00017cb0 <ticker_cb>:
	return 0;
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
		      uint16_t lazy, void *param)
{
   17cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ++hdr->ref;
   17cb4:	7c1d      	ldrb	r5, [r3, #16]
   17cb6:	3501      	adds	r5, #1
   17cb8:	b2ed      	uxtb	r5, r5
   17cba:	4680      	mov	r8, r0
   17cbc:	460f      	mov	r7, r1
   17cbe:	4616      	mov	r6, r2
   17cc0:	741d      	strb	r5, [r3, #16]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   17cc2:	f103 041c 	add.w	r4, r3, #28
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   17cc6:	b17d      	cbz	r5, 17ce8 <ticker_cb+0x38>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   17cc8:	4d16      	ldr	r5, [pc, #88]	; (17d24 <ticker_cb+0x74>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	mfy.param = &p;
   17cca:	4b17      	ldr	r3, [pc, #92]	; (17d28 <ticker_cb+0x78>)
	p.ticks_at_expire = ticks_at_expire;
   17ccc:	f8c5 8000 	str.w	r8, [r5]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17cd0:	2200      	movs	r2, #0
   17cd2:	4611      	mov	r1, r2
   17cd4:	2001      	movs	r0, #1
	mfy.param = &p;
   17cd6:	609d      	str	r5, [r3, #8]
	p.remainder = remainder;
   17cd8:	606f      	str	r7, [r5, #4]
	p.lazy = lazy;
   17cda:	812e      	strh	r6, [r5, #8]
	p.param = lll;
   17cdc:	60ec      	str	r4, [r5, #12]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17cde:	f7fb fa17 	bl	13110 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   17ce2:	b978      	cbnz	r0, 17d04 <ticker_cb+0x54>

	DEBUG_RADIO_PREPARE_O(1);
}
   17ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(ref);
   17ce8:	4a10      	ldr	r2, [pc, #64]	; (17d2c <ticker_cb+0x7c>)
   17cea:	4911      	ldr	r1, [pc, #68]	; (17d30 <ticker_cb+0x80>)
   17cec:	4811      	ldr	r0, [pc, #68]	; (17d34 <ticker_cb+0x84>)
   17cee:	f240 23c9 	movw	r3, #713	; 0x2c9
   17cf2:	f00c fbdf 	bl	244b4 <printk>
   17cf6:	4040      	eors	r0, r0
   17cf8:	f380 8811 	msr	BASEPRI, r0
   17cfc:	f04f 0003 	mov.w	r0, #3
   17d00:	df02      	svc	2
   17d02:	e7e1      	b.n	17cc8 <ticker_cb+0x18>
	LL_ASSERT(!ret);
   17d04:	4a09      	ldr	r2, [pc, #36]	; (17d2c <ticker_cb+0x7c>)
   17d06:	490c      	ldr	r1, [pc, #48]	; (17d38 <ticker_cb+0x88>)
   17d08:	480a      	ldr	r0, [pc, #40]	; (17d34 <ticker_cb+0x84>)
   17d0a:	f240 23d5 	movw	r3, #725	; 0x2d5
   17d0e:	f00c fbd1 	bl	244b4 <printk>
   17d12:	4040      	eors	r0, r0
   17d14:	f380 8811 	msr	BASEPRI, r0
   17d18:	f04f 0003 	mov.w	r0, #3
   17d1c:	df02      	svc	2
}
   17d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d22:	bf00      	nop
   17d24:	20003664 	.word	0x20003664
   17d28:	2000088c 	.word	0x2000088c
   17d2c:	0002eb88 	.word	0x0002eb88
   17d30:	0002eaf8 	.word	0x0002eaf8
   17d34:	0002e80c 	.word	0x0002e80c
   17d38:	0002e974 	.word	0x0002e974

00017d3c <ull_scan_init>:
}
   17d3c:	2000      	movs	r0, #0
   17d3e:	4770      	bx	lr

00017d40 <ull_scan_disable>:
{
   17d40:	b530      	push	{r4, r5, lr}
   17d42:	4605      	mov	r5, r0
   17d44:	b085      	sub	sp, #20
	mark = ull_disable_mark(scan);
   17d46:	4608      	mov	r0, r1
{
   17d48:	460c      	mov	r4, r1
	mark = ull_disable_mark(scan);
   17d4a:	f7ff fa19 	bl	17180 <ull_disable_mark>
	LL_ASSERT(mark == scan);
   17d4e:	4284      	cmp	r4, r0
   17d50:	d00c      	beq.n	17d6c <ull_scan_disable+0x2c>
   17d52:	4a2f      	ldr	r2, [pc, #188]	; (17e10 <ull_scan_disable+0xd0>)
   17d54:	492f      	ldr	r1, [pc, #188]	; (17e14 <ull_scan_disable+0xd4>)
   17d56:	4830      	ldr	r0, [pc, #192]	; (17e18 <ull_scan_disable+0xd8>)
   17d58:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   17d5c:	f00c fbaa 	bl	244b4 <printk>
   17d60:	4040      	eors	r0, r0
   17d62:	f380 8811 	msr	BASEPRI, r0
   17d66:	f04f 0003 	mov.w	r0, #3
   17d6a:	df02      	svc	2
			  TICKER_ID_SCAN_BASE + handle,
   17d6c:	1d2a      	adds	r2, r5, #4
	ret_cb = TICKER_STATUS_BUSY;
   17d6e:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   17d70:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   17d72:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   17d74:	4b29      	ldr	r3, [pc, #164]	; (17e1c <ull_scan_disable+0xdc>)
   17d76:	9500      	str	r5, [sp, #0]
   17d78:	2103      	movs	r1, #3
   17d7a:	b2d2      	uxtb	r2, r2
   17d7c:	2000      	movs	r0, #0
   17d7e:	f7fc fca7 	bl	146d0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   17d82:	4629      	mov	r1, r5
   17d84:	f7ff f9d4 	bl	17130 <ull_ticker_status_take>
	if (ret) {
   17d88:	bb50      	cbnz	r0, 17de0 <ull_scan_disable+0xa0>
	ret = ull_disable(&scan->lll);
   17d8a:	f104 001c 	add.w	r0, r4, #28
   17d8e:	f7ff fa33 	bl	171f8 <ull_disable>
	LL_ASSERT(!ret);
   17d92:	b9b8      	cbnz	r0, 17dc4 <ull_scan_disable+0x84>
	mark = ull_disable_unmark(scan);
   17d94:	4620      	mov	r0, r4
   17d96:	f7ff f9ff 	bl	17198 <ull_disable_unmark>
	LL_ASSERT(mark == scan);
   17d9a:	4284      	cmp	r4, r0
   17d9c:	d00f      	beq.n	17dbe <ull_scan_disable+0x7e>
   17d9e:	4a1c      	ldr	r2, [pc, #112]	; (17e10 <ull_scan_disable+0xd0>)
   17da0:	491c      	ldr	r1, [pc, #112]	; (17e14 <ull_scan_disable+0xd4>)
   17da2:	481d      	ldr	r0, [pc, #116]	; (17e18 <ull_scan_disable+0xd8>)
   17da4:	f44f 73ed 	mov.w	r3, #474	; 0x1da
   17da8:	f00c fb84 	bl	244b4 <printk>
   17dac:	4040      	eors	r0, r0
   17dae:	f380 8811 	msr	BASEPRI, r0
   17db2:	f04f 0003 	mov.w	r0, #3
   17db6:	df02      	svc	2
	return 0;
   17db8:	2000      	movs	r0, #0
}
   17dba:	b005      	add	sp, #20
   17dbc:	bd30      	pop	{r4, r5, pc}
	return 0;
   17dbe:	2000      	movs	r0, #0
}
   17dc0:	b005      	add	sp, #20
   17dc2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   17dc4:	4a12      	ldr	r2, [pc, #72]	; (17e10 <ull_scan_disable+0xd0>)
   17dc6:	4916      	ldr	r1, [pc, #88]	; (17e20 <ull_scan_disable+0xe0>)
   17dc8:	4813      	ldr	r0, [pc, #76]	; (17e18 <ull_scan_disable+0xd8>)
   17dca:	f240 13d7 	movw	r3, #471	; 0x1d7
   17dce:	f00c fb71 	bl	244b4 <printk>
   17dd2:	4040      	eors	r0, r0
   17dd4:	f380 8811 	msr	BASEPRI, r0
   17dd8:	f04f 0003 	mov.w	r0, #3
   17ddc:	df02      	svc	2
   17dde:	e7d9      	b.n	17d94 <ull_scan_disable+0x54>
		mark = ull_disable_unmark(scan);
   17de0:	4620      	mov	r0, r4
   17de2:	f7ff f9d9 	bl	17198 <ull_disable_unmark>
		LL_ASSERT(mark == scan);
   17de6:	4284      	cmp	r4, r0
   17de8:	d00f      	beq.n	17e0a <ull_scan_disable+0xca>
   17dea:	4a09      	ldr	r2, [pc, #36]	; (17e10 <ull_scan_disable+0xd0>)
   17dec:	4909      	ldr	r1, [pc, #36]	; (17e14 <ull_scan_disable+0xd4>)
   17dee:	480a      	ldr	r0, [pc, #40]	; (17e18 <ull_scan_disable+0xd8>)
   17df0:	f240 13d1 	movw	r3, #465	; 0x1d1
   17df4:	f00c fb5e 	bl	244b4 <printk>
   17df8:	4040      	eors	r0, r0
   17dfa:	f380 8811 	msr	BASEPRI, r0
   17dfe:	f04f 0003 	mov.w	r0, #3
   17e02:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   17e04:	200c      	movs	r0, #12
}
   17e06:	b005      	add	sp, #20
   17e08:	bd30      	pop	{r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17e0a:	200c      	movs	r0, #12
}
   17e0c:	b005      	add	sp, #20
   17e0e:	bd30      	pop	{r4, r5, pc}
   17e10:	0002eb88 	.word	0x0002eb88
   17e14:	0002ebc8 	.word	0x0002ebc8
   17e18:	0002e80c 	.word	0x0002e80c
   17e1c:	00017125 	.word	0x00017125
   17e20:	0002e974 	.word	0x0002e974

00017e24 <disable.constprop.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
   17e24:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   17e26:	4d0e      	ldr	r5, [pc, #56]	; (17e60 <disable.constprop.0+0x3c>)
   17e28:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   17e2c:	07db      	lsls	r3, r3, #31
   17e2e:	d514      	bpl.n	17e5a <disable.constprop.0+0x36>
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   17e30:	4629      	mov	r1, r5
   17e32:	2000      	movs	r0, #0
   17e34:	f7ff ff84 	bl	17d40 <ull_scan_disable>
	if (ret) {
   17e38:	4604      	mov	r4, r0
   17e3a:	b108      	cbz	r0, 17e40 <disable.constprop.0+0x1c>
		ull_filter_adv_scan_state_cb(0);
	}
#endif

	return 0;
}
   17e3c:	4620      	mov	r0, r4
   17e3e:	bd38      	pop	{r3, r4, r5, pc}
	scan->is_enabled = 0U;
   17e40:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   17e44:	f360 0300 	bfi	r3, r0, #0, #1
   17e48:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if (!ull_adv_is_enabled_get(0))
   17e4c:	f7ff fe4c 	bl	17ae8 <ull_adv_is_enabled_get>
   17e50:	2800      	cmp	r0, #0
   17e52:	d1f3      	bne.n	17e3c <disable.constprop.0+0x18>
		ull_filter_adv_scan_state_cb(0);
   17e54:	f003 fdf0 	bl	1ba38 <ull_filter_adv_scan_state_cb>
   17e58:	e7f0      	b.n	17e3c <disable.constprop.0+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   17e5a:	240c      	movs	r4, #12
}
   17e5c:	4620      	mov	r0, r4
   17e5e:	bd38      	pop	{r3, r4, r5, pc}
   17e60:	20003624 	.word	0x20003624

00017e64 <ll_scan_enable>:
	if (!enable) {
   17e64:	b380      	cbz	r0, 17ec8 <ll_scan_enable+0x64>
{
   17e66:	b538      	push	{r3, r4, r5, lr}
	if (!scan || scan->is_enabled) {
   17e68:	4c1f      	ldr	r4, [pc, #124]	; (17ee8 <ll_scan_enable+0x84>)
   17e6a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   17e6e:	f013 0101 	ands.w	r1, r3, #1
   17e72:	d135      	bne.n	17ee0 <ll_scan_enable+0x7c>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   17e74:	f3c3 0541 	ubfx	r5, r3, #1, #2
   17e78:	079b      	lsls	r3, r3, #30
   17e7a:	d50a      	bpl.n	17e92 <ll_scan_enable+0x2e>
		if (!mem_nz(ll_addr_get(1, NULL), BDADDR_SIZE)) {
   17e7c:	2001      	movs	r0, #1
   17e7e:	f7fc fc73 	bl	14768 <ll_addr_get>
   17e82:	2106      	movs	r1, #6
   17e84:	f7fb f8b6 	bl	12ff4 <mem_nz>
   17e88:	b360      	cbz	r0, 17ee4 <ll_scan_enable+0x80>
   17e8a:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
   17e8e:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   17e92:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   17e96:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   17e9a:	f003 fe11 	bl	1bac0 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   17e9e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	if ((lll->type & 0x1) &&
   17ea2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	lll->rpa_gen = 0;
   17ea6:	f36f 0300 	bfc	r3, #0, #1
	lll->rl_idx = FILTER_IDX_NONE;
   17eaa:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   17eac:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	if ((lll->type & 0x1) &&
   17eb0:	09d3      	lsrs	r3, r2, #7
	lll->rl_idx = FILTER_IDX_NONE;
   17eb2:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	if ((lll->type & 0x1) &&
   17eb6:	d002      	beq.n	17ebe <ll_scan_enable+0x5a>
   17eb8:	3d02      	subs	r5, #2
   17eba:	2d01      	cmp	r5, #1
   17ebc:	d906      	bls.n	17ecc <ll_scan_enable+0x68>
}
   17ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   17ec2:	4809      	ldr	r0, [pc, #36]	; (17ee8 <ll_scan_enable+0x84>)
   17ec4:	f7e9 b894 	b.w	ff0 <ull_scan_enable>
		err = disable(SCAN_HANDLE_1M);
   17ec8:	f7ff bfac 	b.w	17e24 <disable.constprop.0>
		ull_filter_rpa_update(false);
   17ecc:	2000      	movs	r0, #0
   17ece:	f003 fea3 	bl	1bc18 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   17ed2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   17ed6:	f043 0301 	orr.w	r3, r3, #1
   17eda:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   17ede:	e7ee      	b.n	17ebe <ll_scan_enable+0x5a>
			return BT_HCI_ERR_CMD_DISALLOWED;
   17ee0:	200c      	movs	r0, #12
}
   17ee2:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_INVALID_PARAM;
   17ee4:	2012      	movs	r0, #18
}
   17ee6:	bd38      	pop	{r3, r4, r5, pc}
   17ee8:	20003624 	.word	0x20003624

00017eec <ull_scan_reset>:
{
   17eec:	b508      	push	{r3, lr}
		(void)disable(handle);
   17eee:	f7ff ff99 	bl	17e24 <disable.constprop.0>
}
   17ef2:	2000      	movs	r0, #0
   17ef4:	bd08      	pop	{r3, pc}
   17ef6:	bf00      	nop

00017ef8 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   17ef8:	4b02      	ldr	r3, [pc, #8]	; (17f04 <ull_scan_lll_handle_get+0xc>)
   17efa:	6800      	ldr	r0, [r0, #0]
   17efc:	1ac0      	subs	r0, r0, r3
}
   17efe:	f3c0 1087 	ubfx	r0, r0, #6, #8
   17f02:	4770      	bx	lr
   17f04:	20003624 	.word	0x20003624

00017f08 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   17f08:	b938      	cbnz	r0, 17f1a <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   17f0a:	4805      	ldr	r0, [pc, #20]	; (17f20 <ull_scan_is_enabled_get+0x18>)
   17f0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
	return &ll_scan[handle];
   17f10:	f013 0f01 	tst.w	r3, #1
   17f14:	bf08      	it	eq
   17f16:	2000      	moveq	r0, #0
   17f18:	4770      	bx	lr
		return NULL;
   17f1a:	2000      	movs	r0, #0
}
   17f1c:	4770      	bx	lr
   17f1e:	bf00      	nop
   17f20:	20003624 	.word	0x20003624

00017f24 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   17f24:	b968      	cbnz	r0, 17f42 <ull_scan_is_enabled+0x1e>
	if (!scan || !scan->is_enabled) {
   17f26:	4a08      	ldr	r2, [pc, #32]	; (17f48 <ull_scan_is_enabled+0x24>)
   17f28:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
   17f2c:	f013 0001 	ands.w	r0, r3, #1
   17f30:	d008      	beq.n	17f44 <ull_scan_is_enabled+0x20>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   17f32:	f892 0024 	ldrb.w	r0, [r2, #36]	; 0x24
   17f36:	f003 0301 	and.w	r3, r3, #1
   17f3a:	09c0      	lsrs	r0, r0, #7
   17f3c:	fa03 f000 	lsl.w	r0, r3, r0
   17f40:	4770      	bx	lr
		return 0;
   17f42:	2000      	movs	r0, #0
}
   17f44:	4770      	bx	lr
   17f46:	bf00      	nop
   17f48:	20003624 	.word	0x20003624

00017f4c <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   17f4c:	b950      	cbnz	r0, 17f64 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   17f4e:	4b06      	ldr	r3, [pc, #24]	; (17f68 <ull_scan_filter_pol_get+0x1c>)
   17f50:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
   17f54:	f010 0001 	ands.w	r0, r0, #1
   17f58:	d005      	beq.n	17f66 <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   17f5a:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
   17f5e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   17f62:	4770      	bx	lr
		return 0;
   17f64:	2000      	movs	r0, #0
}
   17f66:	4770      	bx	lr
   17f68:	20003624 	.word	0x20003624

00017f6c <tx_ull_dequeue>:
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   17f6c:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
{
   17f70:	4603      	mov	r3, r0
   17f72:	b410      	push	{r4}
   17f74:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   17f76:	b172      	cbz	r2, 17f96 <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   17f78:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
   17f7c:	428a      	cmp	r2, r1
   17f7e:	d02b      	beq.n	17fd8 <tx_ull_dequeue+0x6c>
   17f80:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
		if (conn->tx_head == conn->tx_data) {
   17f84:	4291      	cmp	r1, r2
   17f86:	d01a      	beq.n	17fbe <tx_ull_dequeue+0x52>
		conn->tx_head = conn->tx_head->next;
   17f88:	680a      	ldr	r2, [r1, #0]
   17f8a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
   17f8e:	2300      	movs	r3, #0
}
   17f90:	bc10      	pop	{r4}
		tx->next = NULL;
   17f92:	6003      	str	r3, [r0, #0]
}
   17f94:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   17f96:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
   17f9a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   17f9e:	428a      	cmp	r2, r1
   17fa0:	d025      	beq.n	17fee <tx_ull_dequeue+0x82>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17fa2:	7911      	ldrb	r1, [r2, #4]
   17fa4:	f001 0103 	and.w	r1, r1, #3
   17fa8:	2903      	cmp	r1, #3
   17faa:	d00e      	beq.n	17fca <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
   17fac:	6812      	ldr	r2, [r2, #0]
   17fae:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
   17fb2:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   17fb4:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
   17fb8:	bc10      	pop	{r4}
		tx->next = tx;
   17fba:	6000      	str	r0, [r0, #0]
}
   17fbc:	4770      	bx	lr
   17fbe:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   17fc0:	6809      	ldr	r1, [r1, #0]
   17fc2:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
   17fc6:	4611      	mov	r1, r2
   17fc8:	e7de      	b.n	17f88 <tx_ull_dequeue+0x1c>
		    ((pdu_data_tx->llctrl.opcode !=
   17fca:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17fcc:	2903      	cmp	r1, #3
   17fce:	d001      	beq.n	17fd4 <tx_ull_dequeue+0x68>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17fd0:	290a      	cmp	r1, #10
   17fd2:	d1eb      	bne.n	17fac <tx_ull_dequeue+0x40>
   17fd4:	4611      	mov	r1, r2
   17fd6:	e7d7      	b.n	17f88 <tx_ull_dequeue+0x1c>
   17fd8:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
   17fdc:	6809      	ldr	r1, [r1, #0]
   17fde:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   17fe2:	4294      	cmp	r4, r2
			conn->tx_ctrl = conn->tx_head;
   17fe4:	bf18      	it	ne
   17fe6:	f8c3 11b4 	strne.w	r1, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   17fea:	d1e5      	bne.n	17fb8 <tx_ull_dequeue+0x4c>
   17fec:	e7e1      	b.n	17fb2 <tx_ull_dequeue+0x46>
	if (conn->tx_head == conn->tx_ctrl) {
   17fee:	2a00      	cmp	r2, #0
   17ff0:	d1e6      	bne.n	17fc0 <tx_ull_dequeue+0x54>
   17ff2:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
   17ff6:	4611      	mov	r1, r2
   17ff8:	e7f0      	b.n	17fdc <tx_ull_dequeue+0x70>
   17ffa:	bf00      	nop

00017ffc <calc_eff_time>:
	uint16_t time = PKT_US(max_octets, phy);
   17ffc:	074b      	lsls	r3, r1, #29
   17ffe:	d50c      	bpl.n	1801a <calc_eff_time+0x1e>
   18000:	0181      	lsls	r1, r0, #6
	eff_time = MIN(eff_time, default_time);
   18002:	f501 7074 	add.w	r0, r1, #976	; 0x3d0
   18006:	4290      	cmp	r0, r2
   18008:	bf28      	it	cs
   1800a:	4610      	movcs	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   1800c:	f44f 6129 	mov.w	r1, #2704	; 0xa90
   18010:	4288      	cmp	r0, r1
   18012:	bf38      	it	cc
   18014:	4608      	movcc	r0, r1
}
   18016:	b280      	uxth	r0, r0
   18018:	4770      	bx	lr
{
   1801a:	b410      	push	{r4}
	uint16_t time = PKT_US(max_octets, phy);
   1801c:	f100 040d 	add.w	r4, r0, #13
   18020:	f001 0003 	and.w	r0, r1, #3
   18024:	4404      	add	r4, r0
   18026:	f3c1 0140 	ubfx	r1, r1, #1, #1
   1802a:	00e4      	lsls	r4, r4, #3
   1802c:	40cc      	lsrs	r4, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   1802e:	b2a3      	uxth	r3, r4
   18030:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   18034:	f100 0028 	add.w	r0, r0, #40	; 0x28
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
   18038:	bf38      	it	cc
   1803a:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   1803e:	00c4      	lsls	r4, r0, #3
	eff_time = MIN(eff_time, default_time);
   18040:	429a      	cmp	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   18042:	fa24 f101 	lsr.w	r1, r4, r1
	eff_time = MIN(eff_time, default_time);
   18046:	bf28      	it	cs
   18048:	461a      	movcs	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   1804a:	428a      	cmp	r2, r1
	eff_time = MIN(eff_time, default_time);
   1804c:	4610      	mov	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
   1804e:	bf38      	it	cc
   18050:	4608      	movcc	r0, r1
}
   18052:	b280      	uxth	r0, r0
   18054:	bc10      	pop	{r4}
   18056:	4770      	bx	lr

00018058 <init_reset>:
{
   18058:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1805a:	4813      	ldr	r0, [pc, #76]	; (180a8 <init_reset+0x50>)
   1805c:	4b13      	ldr	r3, [pc, #76]	; (180ac <init_reset+0x54>)
   1805e:	2201      	movs	r2, #1
   18060:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18064:	f7fa ff4e 	bl	12f04 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   18068:	4b11      	ldr	r3, [pc, #68]	; (180b0 <init_reset+0x58>)
   1806a:	2203      	movs	r2, #3
   1806c:	1d18      	adds	r0, r3, #4
   1806e:	2124      	movs	r1, #36	; 0x24
   18070:	f7fa ff48 	bl	12f04 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   18074:	4b0f      	ldr	r3, [pc, #60]	; (180b4 <init_reset+0x5c>)
   18076:	2204      	movs	r2, #4
   18078:	1898      	adds	r0, r3, r2
   1807a:	2120      	movs	r1, #32
   1807c:	f7fa ff42 	bl	12f04 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   18080:	4b0d      	ldr	r3, [pc, #52]	; (180b8 <init_reset+0x60>)
   18082:	2207      	movs	r2, #7
   18084:	1d18      	adds	r0, r3, #4
   18086:	2108      	movs	r1, #8
   18088:	f7fa ff3c 	bl	12f04 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1808c:	4b0b      	ldr	r3, [pc, #44]	; (180bc <init_reset+0x64>)
	default_phy_tx |= BIT(2);
   1808e:	490c      	ldr	r1, [pc, #48]	; (180c0 <init_reset+0x68>)
	default_phy_rx |= BIT(2);
   18090:	4a0c      	ldr	r2, [pc, #48]	; (180c4 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   18092:	480d      	ldr	r0, [pc, #52]	; (180c8 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   18094:	251b      	movs	r5, #27
   18096:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(2);
   18098:	2307      	movs	r3, #7
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1809a:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(2);
   1809e:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(2);
   180a0:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   180a2:	8004      	strh	r4, [r0, #0]
}
   180a4:	2000      	movs	r0, #0
   180a6:	bd38      	pop	{r3, r4, r5, pc}
   180a8:	20003678 	.word	0x20003678
   180ac:	20003674 	.word	0x20003674
   180b0:	20003854 	.word	0x20003854
   180b4:	200038c4 	.word	0x200038c4
   180b8:	20003948 	.word	0x20003948
   180bc:	20009062 	.word	0x20009062
   180c0:	20009159 	.word	0x20009159
   180c4:	20009158 	.word	0x20009158
   180c8:	20009064 	.word	0x20009064

000180cc <ctrl_tx_pause_enqueue>:
{
   180cc:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   180ce:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
   180d2:	4604      	mov	r4, r0
   180d4:	460d      	mov	r5, r1
	if (
   180d6:	b11b      	cbz	r3, 180e0 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   180d8:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
   180dc:	0788      	lsls	r0, r1, #30
   180de:	d50d      	bpl.n	180fc <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   180e0:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   180e4:	b301      	cbz	r1, 18128 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   180e6:	bb4a      	cbnz	r2, 1813c <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   180e8:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   180ec:	681a      	ldr	r2, [r3, #0]
   180ee:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   180f0:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   180f2:	682b      	ldr	r3, [r5, #0]
   180f4:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
   180f8:	b19b      	cbz	r3, 18122 <ctrl_tx_pause_enqueue+0x56>
}
   180fa:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   180fc:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   18100:	07c9      	lsls	r1, r1, #31
   18102:	d4ed      	bmi.n	180e0 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   18104:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   18108:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   1810a:	bf04      	itt	eq
   1810c:	6819      	ldreq	r1, [r3, #0]
   1810e:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   18112:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   18116:	b1f9      	cbz	r1, 18158 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   18118:	2a00      	cmp	r2, #0
   1811a:	d0e5      	beq.n	180e8 <ctrl_tx_pause_enqueue+0x1c>
   1811c:	f240 7399 	movw	r3, #1945	; 0x799
   18120:	e00e      	b.n	18140 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   18122:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   18126:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   18128:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   1812a:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
   1812e:	2a00      	cmp	r2, #0
   18130:	d1e2      	bne.n	180f8 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   18132:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
   18136:	2b00      	cmp	r3, #0
   18138:	d1df      	bne.n	180fa <ctrl_tx_pause_enqueue+0x2e>
   1813a:	e7f2      	b.n	18122 <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   1813c:	f240 73ab 	movw	r3, #1963	; 0x7ab
   18140:	4a0a      	ldr	r2, [pc, #40]	; (1816c <ctrl_tx_pause_enqueue+0xa0>)
   18142:	490b      	ldr	r1, [pc, #44]	; (18170 <ctrl_tx_pause_enqueue+0xa4>)
   18144:	480b      	ldr	r0, [pc, #44]	; (18174 <ctrl_tx_pause_enqueue+0xa8>)
   18146:	f00c f9b5 	bl	244b4 <printk>
   1814a:	4040      	eors	r0, r0
   1814c:	f380 8811 	msr	BASEPRI, r0
   18150:	f04f 0003 	mov.w	r0, #3
   18154:	df02      	svc	2
   18156:	e7c7      	b.n	180e8 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   18158:	6819      	ldr	r1, [r3, #0]
   1815a:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   1815c:	601d      	str	r5, [r3, #0]
			if (!pause) {
   1815e:	b90a      	cbnz	r2, 18164 <ctrl_tx_pause_enqueue+0x98>
				conn->tx_ctrl_last = tx;
   18160:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   18164:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   18166:	2b00      	cmp	r3, #0
   18168:	d1c7      	bne.n	180fa <ctrl_tx_pause_enqueue+0x2e>
   1816a:	e7da      	b.n	18122 <ctrl_tx_pause_enqueue+0x56>
   1816c:	0002ebd8 	.word	0x0002ebd8
   18170:	0002ec18 	.word	0x0002ec18
   18174:	0002e80c 	.word	0x0002e80c

00018178 <tx_lll_flush>:
{
   18178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1817c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   18180:	4935      	ldr	r1, [pc, #212]	; (18258 <tx_lll_flush+0xe0>)
{
   18182:	b083      	sub	sp, #12
   18184:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   18186:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1818a:	4640      	mov	r0, r8
   1818c:	f7fa ff1e 	bl	12fcc <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   18190:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   18194:	4629      	mov	r1, r5
   18196:	f006 f8a9 	bl	1e2ec <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1819a:	6d28      	ldr	r0, [r5, #80]	; 0x50
   1819c:	4631      	mov	r1, r6
   1819e:	aa01      	add	r2, sp, #4
   181a0:	f7fa ff52 	bl	13048 <memq_dequeue>
	while (link) {
   181a4:	b340      	cbz	r0, 181f8 <tx_lll_flush+0x80>
   181a6:	4c2d      	ldr	r4, [pc, #180]	; (1825c <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
   181a8:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   181ac:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   181b0:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   181b2:	f894 c001 	ldrb.w	ip, [r4, #1]
   181b6:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   181b8:	1c4b      	adds	r3, r1, #1
   181ba:	b2db      	uxtb	r3, r3
		last = 0U;
   181bc:	459c      	cmp	ip, r3
   181be:	bf08      	it	eq
   181c0:	2300      	moveq	r3, #0
	if (last == first) {
   181c2:	429a      	cmp	r2, r3
   181c4:	d038      	beq.n	18238 <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   181c6:	7822      	ldrb	r2, [r4, #0]
   181c8:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   181cc:	eb19 0e02 	adds.w	lr, r9, r2
   181d0:	d032      	beq.n	18238 <tx_lll_flush+0xc0>
		lll_tx->node = tx;
   181d2:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
   181d6:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   181da:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
   181de:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   181e2:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   181e4:	6001      	str	r1, [r0, #0]
		tx->next = link;
   181e6:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   181ea:	4631      	mov	r1, r6
   181ec:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   181ee:	70e3      	strb	r3, [r4, #3]
   181f0:	f7fa ff2a 	bl	13048 <memq_dequeue>
	while (link) {
   181f4:	2800      	cmp	r0, #0
   181f6:	d1db      	bne.n	181b0 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   181f8:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
	rx = (void *)&conn->llcp_terminate.node_rx;
   181fc:	f508 7498 	add.w	r4, r8, #304	; 0x130
	LL_ASSERT(rx->hdr.link);
   18200:	b150      	cbz	r0, 18218 <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
   18202:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   18204:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   18206:	f8c8 3130 	str.w	r3, [r8, #304]	; 0x130
	ull_rx_put(link, rx);
   1820a:	f7ff f869 	bl	172e0 <ull_rx_put>
	ull_rx_sched();
   1820e:	f7ff f877 	bl	17300 <ull_rx_sched>
}
   18212:	b003      	add	sp, #12
   18214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   18218:	4a11      	ldr	r2, [pc, #68]	; (18260 <tx_lll_flush+0xe8>)
   1821a:	4912      	ldr	r1, [pc, #72]	; (18264 <tx_lll_flush+0xec>)
   1821c:	4812      	ldr	r0, [pc, #72]	; (18268 <tx_lll_flush+0xf0>)
   1821e:	f240 733e 	movw	r3, #1854	; 0x73e
   18222:	f00c f947 	bl	244b4 <printk>
   18226:	4040      	eors	r0, r0
   18228:	f380 8811 	msr	BASEPRI, r0
   1822c:	f04f 0003 	mov.w	r0, #3
   18230:	df02      	svc	2
   18232:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
   18236:	e7e4      	b.n	18202 <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
   18238:	4a09      	ldr	r2, [pc, #36]	; (18260 <tx_lll_flush+0xe8>)
   1823a:	490c      	ldr	r1, [pc, #48]	; (1826c <tx_lll_flush+0xf4>)
   1823c:	480a      	ldr	r0, [pc, #40]	; (18268 <tx_lll_flush+0xf0>)
   1823e:	f240 732a 	movw	r3, #1834	; 0x72a
   18242:	f00c f937 	bl	244b4 <printk>
   18246:	4040      	eors	r0, r0
   18248:	f380 8811 	msr	BASEPRI, r0
   1824c:	f04f 0003 	mov.w	r0, #3
   18250:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   18252:	2300      	movs	r3, #0
   18254:	801b      	strh	r3, [r3, #0]
   18256:	deff      	udf	#255	; 0xff
   18258:	20003678 	.word	0x20003678
   1825c:	2000089c 	.word	0x2000089c
   18260:	0002ebd8 	.word	0x0002ebd8
   18264:	0002ec28 	.word	0x0002ec28
   18268:	0002e80c 	.word	0x0002e80c
   1826c:	0002ec20 	.word	0x0002ec20

00018270 <ticker_op_stop_cb>:
{
   18270:	b510      	push	{r4, lr}
   18272:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18274:	b9b0      	cbnz	r0, 182a4 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   18276:	4b12      	ldr	r3, [pc, #72]	; (182c0 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   18278:	2200      	movs	r2, #0
   1827a:	4611      	mov	r1, r2
   1827c:	2002      	movs	r0, #2
	mfy.param = param;
   1827e:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   18280:	f7fa ff46 	bl	13110 <mayfly_enqueue>
	LL_ASSERT(!retval);
   18284:	b900      	cbnz	r0, 18288 <ticker_op_stop_cb+0x18>
}
   18286:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   18288:	4a0e      	ldr	r2, [pc, #56]	; (182c4 <ticker_op_stop_cb+0x54>)
   1828a:	490f      	ldr	r1, [pc, #60]	; (182c8 <ticker_op_stop_cb+0x58>)
   1828c:	480f      	ldr	r0, [pc, #60]	; (182cc <ticker_op_stop_cb+0x5c>)
   1828e:	f240 6389 	movw	r3, #1673	; 0x689
   18292:	f00c f90f 	bl	244b4 <printk>
   18296:	4040      	eors	r0, r0
   18298:	f380 8811 	msr	BASEPRI, r0
   1829c:	f04f 0003 	mov.w	r0, #3
   182a0:	df02      	svc	2
}
   182a2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   182a4:	4a07      	ldr	r2, [pc, #28]	; (182c4 <ticker_op_stop_cb+0x54>)
   182a6:	490a      	ldr	r1, [pc, #40]	; (182d0 <ticker_op_stop_cb+0x60>)
   182a8:	4808      	ldr	r0, [pc, #32]	; (182cc <ticker_op_stop_cb+0x5c>)
   182aa:	f240 6382 	movw	r3, #1666	; 0x682
   182ae:	f00c f901 	bl	244b4 <printk>
   182b2:	4040      	eors	r0, r0
   182b4:	f380 8811 	msr	BASEPRI, r0
   182b8:	f04f 0003 	mov.w	r0, #3
   182bc:	df02      	svc	2
   182be:	e7da      	b.n	18276 <ticker_op_stop_cb+0x6>
   182c0:	20000914 	.word	0x20000914
   182c4:	0002ebd8 	.word	0x0002ebd8
   182c8:	0002e9a4 	.word	0x0002e9a4
   182cc:	0002e80c 	.word	0x0002e80c
   182d0:	0002ec38 	.word	0x0002ec38

000182d4 <ticker_start_conn_op_cb>:
{
   182d4:	b510      	push	{r4, lr}
   182d6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   182d8:	b990      	cbnz	r0, 18300 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   182da:	4620      	mov	r0, r4
   182dc:	f7fe ff7a 	bl	171d4 <ull_update_unmark>
	LL_ASSERT(p == param);
   182e0:	4284      	cmp	r4, r0
   182e2:	d00c      	beq.n	182fe <ticker_start_conn_op_cb+0x2a>
   182e4:	4a0d      	ldr	r2, [pc, #52]	; (1831c <ticker_start_conn_op_cb+0x48>)
   182e6:	490e      	ldr	r1, [pc, #56]	; (18320 <ticker_start_conn_op_cb+0x4c>)
   182e8:	480e      	ldr	r0, [pc, #56]	; (18324 <ticker_start_conn_op_cb+0x50>)
   182ea:	f240 6379 	movw	r3, #1657	; 0x679
   182ee:	f00c f8e1 	bl	244b4 <printk>
   182f2:	4040      	eors	r0, r0
   182f4:	f380 8811 	msr	BASEPRI, r0
   182f8:	f04f 0003 	mov.w	r0, #3
   182fc:	df02      	svc	2
}
   182fe:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18300:	4a06      	ldr	r2, [pc, #24]	; (1831c <ticker_start_conn_op_cb+0x48>)
   18302:	4909      	ldr	r1, [pc, #36]	; (18328 <ticker_start_conn_op_cb+0x54>)
   18304:	4807      	ldr	r0, [pc, #28]	; (18324 <ticker_start_conn_op_cb+0x50>)
   18306:	f240 6376 	movw	r3, #1654	; 0x676
   1830a:	f00c f8d3 	bl	244b4 <printk>
   1830e:	4040      	eors	r0, r0
   18310:	f380 8811 	msr	BASEPRI, r0
   18314:	f04f 0003 	mov.w	r0, #3
   18318:	df02      	svc	2
   1831a:	e7de      	b.n	182da <ticker_start_conn_op_cb+0x6>
   1831c:	0002ebd8 	.word	0x0002ebd8
   18320:	0002ec44 	.word	0x0002ec44
   18324:	0002e80c 	.word	0x0002e80c
   18328:	0002ec38 	.word	0x0002ec38

0001832c <ticker_stop_conn_op_cb>:
{
   1832c:	b510      	push	{r4, lr}
   1832e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18330:	b990      	cbnz	r0, 18358 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   18332:	4620      	mov	r0, r4
   18334:	f7fe ff42 	bl	171bc <ull_update_mark>
	LL_ASSERT(p == param);
   18338:	4284      	cmp	r4, r0
   1833a:	d00c      	beq.n	18356 <ticker_stop_conn_op_cb+0x2a>
   1833c:	4a0d      	ldr	r2, [pc, #52]	; (18374 <ticker_stop_conn_op_cb+0x48>)
   1833e:	490e      	ldr	r1, [pc, #56]	; (18378 <ticker_stop_conn_op_cb+0x4c>)
   18340:	480e      	ldr	r0, [pc, #56]	; (1837c <ticker_stop_conn_op_cb+0x50>)
   18342:	f240 636f 	movw	r3, #1647	; 0x66f
   18346:	f00c f8b5 	bl	244b4 <printk>
   1834a:	4040      	eors	r0, r0
   1834c:	f380 8811 	msr	BASEPRI, r0
   18350:	f04f 0003 	mov.w	r0, #3
   18354:	df02      	svc	2
}
   18356:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   18358:	4a06      	ldr	r2, [pc, #24]	; (18374 <ticker_stop_conn_op_cb+0x48>)
   1835a:	4909      	ldr	r1, [pc, #36]	; (18380 <ticker_stop_conn_op_cb+0x54>)
   1835c:	4807      	ldr	r0, [pc, #28]	; (1837c <ticker_stop_conn_op_cb+0x50>)
   1835e:	f240 636c 	movw	r3, #1644	; 0x66c
   18362:	f00c f8a7 	bl	244b4 <printk>
   18366:	4040      	eors	r0, r0
   18368:	f380 8811 	msr	BASEPRI, r0
   1836c:	f04f 0003 	mov.w	r0, #3
   18370:	df02      	svc	2
   18372:	e7de      	b.n	18332 <ticker_stop_conn_op_cb+0x6>
   18374:	0002ebd8 	.word	0x0002ebd8
   18378:	0002ec44 	.word	0x0002ec44
   1837c:	0002e80c 	.word	0x0002e80c
   18380:	0002ec38 	.word	0x0002ec38

00018384 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   18384:	b900      	cbnz	r0, 18388 <ticker_update_conn_op_cb+0x4>
   18386:	4770      	bx	lr
{
   18388:	b510      	push	{r4, lr}
   1838a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1838c:	f7fe ff2e 	bl	171ec <ull_update_mark_get>
   18390:	4284      	cmp	r4, r0
   18392:	d010      	beq.n	183b6 <ticker_update_conn_op_cb+0x32>
   18394:	f7fe ff0c 	bl	171b0 <ull_disable_mark_get>
   18398:	4284      	cmp	r4, r0
   1839a:	d00c      	beq.n	183b6 <ticker_update_conn_op_cb+0x32>
   1839c:	4a06      	ldr	r2, [pc, #24]	; (183b8 <ticker_update_conn_op_cb+0x34>)
   1839e:	4907      	ldr	r1, [pc, #28]	; (183bc <ticker_update_conn_op_cb+0x38>)
   183a0:	4807      	ldr	r0, [pc, #28]	; (183c0 <ticker_update_conn_op_cb+0x3c>)
   183a2:	f240 6363 	movw	r3, #1635	; 0x663
   183a6:	f00c f885 	bl	244b4 <printk>
   183aa:	4040      	eors	r0, r0
   183ac:	f380 8811 	msr	BASEPRI, r0
   183b0:	f04f 0003 	mov.w	r0, #3
   183b4:	df02      	svc	2
}
   183b6:	bd10      	pop	{r4, pc}
   183b8:	0002ebd8 	.word	0x0002ebd8
   183bc:	0002ec50 	.word	0x0002ec50
   183c0:	0002e80c 	.word	0x0002e80c

000183c4 <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   183c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183c8:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   183ca:	4826      	ldr	r0, [pc, #152]	; (18464 <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   183cc:	460e      	mov	r6, r1
   183ce:	4690      	mov	r8, r2
   183d0:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   183d2:	f7fa fdc5 	bl	12f60 <mem_acquire>
	if (!tx) {
   183d6:	2800      	cmp	r0, #0
   183d8:	d041      	beq.n	1845e <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   183da:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   183dc:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   183de:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   183e0:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   183e4:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   183e8:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   183ea:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   183ec:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   183ee:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   183f0:	71c1      	strb	r1, [r0, #7]
	if (
   183f2:	b11a      	cbz	r2, 183fc <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
   183f4:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   183f8:	0799      	lsls	r1, r3, #30
   183fa:	d510      	bpl.n	1841e <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   183fc:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   18400:	b33b      	cbz	r3, 18452 <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   18402:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   18406:	681a      	ldr	r2, [r3, #0]
   18408:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1840a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1840c:	6802      	ldr	r2, [r0, #0]
   1840e:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
	if (!tx->next) {
   18412:	b1da      	cbz	r2, 1844c <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18414:	2303      	movs	r3, #3
   18416:	7033      	strb	r3, [r6, #0]

	return 0;
   18418:	2000      	movs	r0, #0
}
   1841a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   1841e:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   18422:	07db      	lsls	r3, r3, #31
   18424:	d4ea      	bmi.n	183fc <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   18426:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   1842a:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   1842c:	bf04      	itt	eq
   1842e:	6813      	ldreq	r3, [r2, #0]
   18430:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   18434:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   18438:	2b00      	cmp	r3, #0
   1843a:	d1e2      	bne.n	18402 <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   1843c:	6813      	ldr	r3, [r2, #0]
   1843e:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   18440:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   18442:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   18444:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   18448:	2a00      	cmp	r2, #0
   1844a:	d1e3      	bne.n	18414 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   1844c:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   18450:	e7e0      	b.n	18414 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   18452:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   18454:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   18458:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   1845c:	e7d9      	b.n	18412 <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
   1845e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   18462:	e7da      	b.n	1841a <reject_ext_ind_send.isra.0+0x56>
   18464:	200038c4 	.word	0x200038c4

00018468 <start_enc_rsp_send>:
{
   18468:	b570      	push	{r4, r5, r6, lr}
   1846a:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   1846c:	b179      	cbz	r1, 1848e <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   1846e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18472:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   18474:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18478:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   1847a:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1847e:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   18482:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18484:	704e      	strb	r6, [r1, #1]
	return 0;
   18486:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18488:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1848a:	70cd      	strb	r5, [r1, #3]
}
   1848c:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1848e:	4826      	ldr	r0, [pc, #152]	; (18528 <start_enc_rsp_send+0xc0>)
   18490:	f7fa fd66 	bl	12f60 <mem_acquire>
		if (!tx) {
   18494:	2800      	cmp	r0, #0
   18496:	d043      	beq.n	18520 <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   18498:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1849c:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   1849e:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   184a2:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   184a4:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   184a8:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   184aa:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   184ae:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   184b2:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   184b4:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   184b6:	71c1      	strb	r1, [r0, #7]
	if (
   184b8:	b1e3      	cbz	r3, 184f4 <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   184ba:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   184be:	0791      	lsls	r1, r2, #30
   184c0:	d418      	bmi.n	184f4 <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   184c2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   184c6:	07d2      	lsls	r2, r2, #31
   184c8:	d414      	bmi.n	184f4 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   184ca:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   184ce:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   184d0:	bf04      	itt	eq
   184d2:	681a      	ldreq	r2, [r3, #0]
   184d4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   184d8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   184dc:	b1ca      	cbz	r2, 18512 <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   184de:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   184e2:	681a      	ldr	r2, [r3, #0]
   184e4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   184e6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   184e8:	6803      	ldr	r3, [r0, #0]
   184ea:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   184ee:	b163      	cbz	r3, 1850a <start_enc_rsp_send+0xa2>
	return 0;
   184f0:	2000      	movs	r0, #0
}
   184f2:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   184f4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   184f8:	2a00      	cmp	r2, #0
   184fa:	d1f0      	bne.n	184de <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   184fc:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   184fe:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   18502:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   18506:	2b00      	cmp	r3, #0
   18508:	d1f2      	bne.n	184f0 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   1850a:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
   1850e:	4618      	mov	r0, r3
}
   18510:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   18512:	681a      	ldr	r2, [r3, #0]
   18514:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   18516:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   18518:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1851a:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
   1851e:	e7e6      	b.n	184ee <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   18520:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   18524:	bd70      	pop	{r4, r5, r6, pc}
   18526:	bf00      	nop
   18528:	200038c4 	.word	0x200038c4

0001852c <ctrl_tx_sec_enqueue>:
{
   1852c:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp_enc.pause_tx) {
   1852e:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   18532:	079a      	lsls	r2, r3, #30
{
   18534:	4604      	mov	r4, r0
   18536:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   18538:	d50b      	bpl.n	18552 <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   1853a:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
   1853e:	2b00      	cmp	r3, #0
   18540:	d042      	beq.n	185c8 <ctrl_tx_sec_enqueue+0x9c>
			tx->next = conn->tx_ctrl_last->next;
   18542:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   18546:	681a      	ldr	r2, [r3, #0]
   18548:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1854a:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   1854c:	682b      	ldr	r3, [r5, #0]
   1854e:	b34b      	cbz	r3, 185a4 <ctrl_tx_sec_enqueue+0x78>
}
   18550:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->tx_head) {
   18552:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
   18556:	b1ea      	cbz	r2, 18594 <ctrl_tx_sec_enqueue+0x68>
			if ((conn->llcp_req != conn->llcp_ack) &&
   18558:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   1855c:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   18560:	4299      	cmp	r1, r3
   18562:	d003      	beq.n	1856c <ctrl_tx_sec_enqueue+0x40>
   18564:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   18568:	2b03      	cmp	r3, #3
   1856a:	d035      	beq.n	185d8 <ctrl_tx_sec_enqueue+0xac>
	    !conn->llcp_phy.pause_tx &&
   1856c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   18570:	f013 0301 	ands.w	r3, r3, #1
   18574:	d119      	bne.n	185aa <ctrl_tx_sec_enqueue+0x7e>
		if (conn->tx_head == conn->tx_data) {
   18576:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   1857a:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   1857c:	bf04      	itt	eq
   1857e:	6811      	ldreq	r1, [r2, #0]
   18580:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   18584:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   18588:	2900      	cmp	r1, #0
   1858a:	d048      	beq.n	1861e <ctrl_tx_sec_enqueue+0xf2>
			LL_ASSERT(!pause);
   1858c:	b18b      	cbz	r3, 185b2 <ctrl_tx_sec_enqueue+0x86>
   1858e:	f240 7399 	movw	r3, #1945	; 0x799
   18592:	e034      	b.n	185fe <ctrl_tx_sec_enqueue+0xd2>
		if (!conn->tx_ctrl) {
   18594:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
   18598:	b95b      	cbnz	r3, 185b2 <ctrl_tx_sec_enqueue+0x86>
			tx->next = conn->tx_head;
   1859a:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   1859c:	e9c0 116c 	strd	r1, r1, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   185a0:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
			conn->tx_data_last = tx;
   185a4:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   185a8:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   185aa:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
   185ae:	2b00      	cmp	r3, #0
   185b0:	d040      	beq.n	18634 <ctrl_tx_sec_enqueue+0x108>
	tx->next = conn->tx_ctrl_last->next;
   185b2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   185b6:	681a      	ldr	r2, [r3, #0]
   185b8:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   185ba:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   185bc:	682b      	ldr	r3, [r5, #0]
   185be:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
		if (!tx->next) {
   185c2:	2b00      	cmp	r3, #0
   185c4:	d1c4      	bne.n	18550 <ctrl_tx_sec_enqueue+0x24>
   185c6:	e7ed      	b.n	185a4 <ctrl_tx_sec_enqueue+0x78>
			tx->next = conn->tx_head;
   185c8:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   185cc:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   185ce:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
   185d2:	2b00      	cmp	r3, #0
   185d4:	d1bc      	bne.n	18550 <ctrl_tx_sec_enqueue+0x24>
   185d6:	e7e5      	b.n	185a4 <ctrl_tx_sec_enqueue+0x78>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   185d8:	7913      	ldrb	r3, [r2, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   185da:	f003 0303 	and.w	r3, r3, #3
   185de:	2b03      	cmp	r3, #3
   185e0:	d1c4      	bne.n	1856c <ctrl_tx_sec_enqueue+0x40>
			    ((pdu_data_tx->llctrl.opcode ==
   185e2:	79d3      	ldrb	r3, [r2, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   185e4:	2b03      	cmp	r3, #3
   185e6:	d001      	beq.n	185ec <ctrl_tx_sec_enqueue+0xc0>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   185e8:	2b0a      	cmp	r3, #10
   185ea:	d1bf      	bne.n	1856c <ctrl_tx_sec_enqueue+0x40>
	    !conn->llcp_phy.pause_tx &&
   185ec:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   185f0:	07db      	lsls	r3, r3, #31
   185f2:	d525      	bpl.n	18640 <ctrl_tx_sec_enqueue+0x114>
		if (!conn->tx_ctrl) {
   185f4:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
   185f8:	b16b      	cbz	r3, 18616 <ctrl_tx_sec_enqueue+0xea>
			LL_ASSERT(!pause);
   185fa:	f240 73ab 	movw	r3, #1963	; 0x7ab
   185fe:	4a11      	ldr	r2, [pc, #68]	; (18644 <ctrl_tx_sec_enqueue+0x118>)
   18600:	4911      	ldr	r1, [pc, #68]	; (18648 <ctrl_tx_sec_enqueue+0x11c>)
   18602:	4812      	ldr	r0, [pc, #72]	; (1864c <ctrl_tx_sec_enqueue+0x120>)
   18604:	f00b ff56 	bl	244b4 <printk>
   18608:	4040      	eors	r0, r0
   1860a:	f380 8811 	msr	BASEPRI, r0
   1860e:	f04f 0003 	mov.w	r0, #3
   18612:	df02      	svc	2
   18614:	e7cd      	b.n	185b2 <ctrl_tx_sec_enqueue+0x86>
			tx->next = conn->tx_head;
   18616:	602a      	str	r2, [r5, #0]
			conn->tx_head = tx;
   18618:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
   1861c:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head->next;
   1861e:	6811      	ldr	r1, [r2, #0]
   18620:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   18622:	6015      	str	r5, [r2, #0]
			if (!pause) {
   18624:	2b00      	cmp	r3, #0
   18626:	d191      	bne.n	1854c <ctrl_tx_sec_enqueue+0x20>
				conn->tx_ctrl = tx;
   18628:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   1862a:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
		if (!tx->next) {
   1862e:	2b00      	cmp	r3, #0
   18630:	d18e      	bne.n	18550 <ctrl_tx_sec_enqueue+0x24>
   18632:	e7b7      	b.n	185a4 <ctrl_tx_sec_enqueue+0x78>
			tx->next = conn->tx_head;
   18634:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   18636:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   1863a:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
   1863e:	bd38      	pop	{r3, r4, r5, pc}
				pause = true;
   18640:	2301      	movs	r3, #1
   18642:	e798      	b.n	18576 <ctrl_tx_sec_enqueue+0x4a>
   18644:	0002ebd8 	.word	0x0002ebd8
   18648:	0002ec18 	.word	0x0002ec18
   1864c:	0002e80c 	.word	0x0002e80c

00018650 <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   18650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18652:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18654:	4824      	ldr	r0, [pc, #144]	; (186e8 <feature_rsp_send.isra.0+0x98>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   18656:	460d      	mov	r5, r1
   18658:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1865a:	f7fa fc81 	bl	12f60 <mem_acquire>
	if (!tx) {
   1865e:	2800      	cmp	r0, #0
   18660:	d03e      	beq.n	186e0 <feature_rsp_send.isra.0+0x90>
	       (features[1] << 8) | (features[2] << 16);
   18662:	79bb      	ldrb	r3, [r7, #6]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   18664:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   18666:	4a21      	ldr	r2, [pc, #132]	; (186ec <feature_rsp_send.isra.0+0x9c>)
   18668:	4604      	mov	r4, r0
   1866a:	7978      	ldrb	r0, [r7, #5]
   1866c:	041b      	lsls	r3, r3, #16
   1866e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   18672:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   18674:	f8d6 111c 	ldr.w	r1, [r6, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   18678:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   1867c:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1867e:	400b      	ands	r3, r1
   18680:	f3c3 0310 	ubfx	r3, r3, #0, #17
   18684:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   18688:	79bb      	ldrb	r3, [r7, #6]
   1868a:	f897 c005 	ldrb.w	ip, [r7, #5]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1868e:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   18690:	041b      	lsls	r3, r3, #16
   18692:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   18696:	430b      	orrs	r3, r1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18698:	7921      	ldrb	r1, [r4, #4]
	       (features[1] << 8) | (features[2] << 16);
   1869a:	4313      	orrs	r3, r2
	feat &= LL_FEAT_BIT_MASK;
   1869c:	f3c3 0310 	ubfx	r3, r3, #0, #17
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   186a0:	2709      	movs	r7, #9
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   186a2:	2208      	movs	r2, #8
	conn->common.fex_valid = 1U;
   186a4:	f040 0001 	orr.w	r0, r0, #1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   186a8:	f041 0103 	orr.w	r1, r1, #3
	conn->llcp_feature.features_peer =
   186ac:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
	conn->common.fex_valid = 1U;
   186b0:	f886 00dc 	strb.w	r0, [r6, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   186b4:	7121      	strb	r1, [r4, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   186b6:	18a0      	adds	r0, r4, r2
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   186b8:	7167      	strb	r7, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   186ba:	71e7      	strb	r7, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   186bc:	2100      	movs	r1, #0
   186be:	f00e f99b 	bl	269f8 <memset>
	feat_result &= 0xFF;
   186c2:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
	dst[0] = val;
   186c6:	7223      	strb	r3, [r4, #8]
	dst[1] = val >> 8;
   186c8:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
   186ca:	2301      	movs	r3, #1
	ctrl_tx_sec_enqueue(conn, tx);
   186cc:	4630      	mov	r0, r6
   186ce:	72a3      	strb	r3, [r4, #10]
	dst[1] = val >> 8;
   186d0:	7262      	strb	r2, [r4, #9]
   186d2:	4621      	mov	r1, r4
   186d4:	f7ff ff2a 	bl	1852c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   186d8:	2303      	movs	r3, #3
   186da:	702b      	strb	r3, [r5, #0]
	return 0;
   186dc:	2000      	movs	r0, #0
}
   186de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   186e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   186e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   186e6:	bf00      	nop
   186e8:	200038c4 	.word	0x200038c4
   186ec:	fffe30d0 	.word	0xfffe30d0

000186f0 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   186f0:	4801      	ldr	r0, [pc, #4]	; (186f8 <ll_conn_acquire+0x8>)
   186f2:	f7fa bc35 	b.w	12f60 <mem_acquire>
   186f6:	bf00      	nop
   186f8:	20003674 	.word	0x20003674

000186fc <ll_conn_release>:
	mem_release(conn, &conn_free);
   186fc:	4901      	ldr	r1, [pc, #4]	; (18704 <ll_conn_release+0x8>)
   186fe:	f7fa bc49 	b.w	12f94 <mem_release>
   18702:	bf00      	nop
   18704:	20003674 	.word	0x20003674

00018708 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   18708:	4902      	ldr	r1, [pc, #8]	; (18714 <ll_conn_handle_get+0xc>)
   1870a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1870e:	f7fa bc5d 	b.w	12fcc <mem_index_get>
   18712:	bf00      	nop
   18714:	20003678 	.word	0x20003678

00018718 <ll_conn_get>:
{
   18718:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1871a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1871e:	4801      	ldr	r0, [pc, #4]	; (18724 <ll_conn_get+0xc>)
   18720:	f7fa bc50 	b.w	12fc4 <mem_get>
   18724:	20003678 	.word	0x20003678

00018728 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18728:	b958      	cbnz	r0, 18742 <ll_connected_get+0x1a>
{
   1872a:	b508      	push	{r3, lr}
   1872c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1872e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18732:	4805      	ldr	r0, [pc, #20]	; (18748 <ll_connected_get+0x20>)
   18734:	f7fa fc46 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   18738:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1873a:	b903      	cbnz	r3, 1873e <ll_connected_get+0x16>
}
   1873c:	bd08      	pop	{r3, pc}
		return NULL;
   1873e:	2000      	movs	r0, #0
}
   18740:	bd08      	pop	{r3, pc}
		return NULL;
   18742:	2000      	movs	r0, #0
}
   18744:	4770      	bx	lr
   18746:	bf00      	nop
   18748:	20003678 	.word	0x20003678

0001874c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1874c:	4801      	ldr	r0, [pc, #4]	; (18754 <ll_tx_mem_acquire+0x8>)
   1874e:	f7fa bc07 	b.w	12f60 <mem_acquire>
   18752:	bf00      	nop
   18754:	20003854 	.word	0x20003854

00018758 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   18758:	4901      	ldr	r1, [pc, #4]	; (18760 <ll_tx_mem_release+0x8>)
   1875a:	f7fa bc1b 	b.w	12f94 <mem_release>
   1875e:	bf00      	nop
   18760:	20003854 	.word	0x20003854

00018764 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18764:	2800      	cmp	r0, #0
   18766:	d13d      	bne.n	187e4 <ll_tx_mem_enqueue+0x80>
{
   18768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1876a:	4602      	mov	r2, r0
   1876c:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1876e:	481f      	ldr	r0, [pc, #124]	; (187ec <ll_tx_mem_enqueue+0x88>)
   18770:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18774:	f7fa fc26 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   18778:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1877a:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1877c:	b9e2      	cbnz	r2, 187b8 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1877e:	491c      	ldr	r1, [pc, #112]	; (187f0 <ll_tx_mem_enqueue+0x8c>)
   18780:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   18782:	784e      	ldrb	r6, [r1, #1]
   18784:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   18786:	1c7b      	adds	r3, r7, #1
   18788:	b2db      	uxtb	r3, r3
		last = 0U;
   1878a:	429e      	cmp	r6, r3
   1878c:	bf08      	it	eq
   1878e:	2300      	moveq	r3, #0
	if (last == first) {
   18790:	4298      	cmp	r0, r3
   18792:	d014      	beq.n	187be <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   18794:	460e      	mov	r6, r1
   18796:	f816 0b04 	ldrb.w	r0, [r6], #4
   1879a:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   1879e:	1837      	adds	r7, r6, r0
   187a0:	d00d      	beq.n	187be <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   187a2:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   187a4:	607d      	str	r5, [r7, #4]
	return hdr->ref;
   187a6:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   187a8:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   187aa:	b958      	cbnz	r0, 187c4 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   187ac:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   187b0:	2b00      	cmp	r3, #0
   187b2:	db11      	blt.n	187d8 <ll_tx_mem_enqueue+0x74>
	return 0;
   187b4:	2000      	movs	r0, #0
}
   187b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   187b8:	f06f 0015 	mvn.w	r0, #21
}
   187bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   187be:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   187c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   187c4:	4b0b      	ldr	r3, [pc, #44]	; (187f4 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   187c6:	2101      	movs	r1, #1
   187c8:	2003      	movs	r0, #3
		mfy.param = conn;
   187ca:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   187cc:	f7fa fca0 	bl	13110 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   187d0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   187d4:	2b00      	cmp	r3, #0
   187d6:	daed      	bge.n	187b4 <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   187d8:	4620      	mov	r0, r4
   187da:	2100      	movs	r1, #0
   187dc:	f002 fe1c 	bl	1b418 <ull_slave_latency_cancel>
	return 0;
   187e0:	2000      	movs	r0, #0
}
   187e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   187e4:	f06f 0015 	mvn.w	r0, #21
}
   187e8:	4770      	bx	lr
   187ea:	bf00      	nop
   187ec:	20003678 	.word	0x20003678
   187f0:	200008e0 	.word	0x200008e0
   187f4:	20000904 	.word	0x20000904

000187f8 <ll_conn_update>:
{
   187f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   187fc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   18800:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   18804:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   18808:	2800      	cmp	r0, #0
   1880a:	d154      	bne.n	188b6 <ll_conn_update+0xbe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1880c:	460c      	mov	r4, r1
   1880e:	4616      	mov	r6, r2
   18810:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18814:	4602      	mov	r2, r0
   18816:	4840      	ldr	r0, [pc, #256]	; (18918 <ll_conn_update+0x120>)
   18818:	461d      	mov	r5, r3
   1881a:	f7fa fbd3 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   1881e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   18820:	2b00      	cmp	r3, #0
   18822:	d148      	bne.n	188b6 <ll_conn_update+0xbe>
	if (!cmd) {
   18824:	b1e4      	cbz	r4, 18860 <ll_conn_update+0x68>
		cmd--;
   18826:	3c01      	subs	r4, #1
		if (cmd) {
   18828:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1882c:	d04e      	beq.n	188cc <ll_conn_update+0xd4>
			if ((conn->llcp_conn_param.req ==
   1882e:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
   18832:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
   18836:	4291      	cmp	r1, r2
   18838:	d03a      	beq.n	188b0 <ll_conn_update+0xb8>
			    (conn->llcp_conn_param.state !=
   1883a:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   1883e:	f002 0107 	and.w	r1, r2, #7
   18842:	2903      	cmp	r1, #3
   18844:	d134      	bne.n	188b0 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   18846:	f004 0407 	and.w	r4, r4, #7
   1884a:	f044 0408 	orr.w	r4, r4, #8
   1884e:	f022 020f 	bic.w	r2, r2, #15
   18852:	4314      	orrs	r4, r2
   18854:	f880 4172 	strb.w	r4, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
   18858:	f880 6173 	strb.w	r6, [r0, #371]	; 0x173
	return 0;
   1885c:	4618      	mov	r0, r3
   1885e:	e028      	b.n	188b2 <ll_conn_update+0xba>
		if (!conn->llcp_conn_param.disabled &&
   18860:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   18864:	06d9      	lsls	r1, r3, #27
   18866:	d529      	bpl.n	188bc <ll_conn_update+0xc4>
		} else if (conn->lll.role) {
   18868:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1886c:	2b00      	cmp	r3, #0
   1886e:	db4c      	blt.n	1890a <ll_conn_update+0x112>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   18870:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
   18874:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
   18878:	4293      	cmp	r3, r2
   1887a:	d119      	bne.n	188b0 <ll_conn_update+0xb8>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1887c:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   18880:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
   18884:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   18886:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18888:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   1888c:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18890:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   18894:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   18896:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
   1889a:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   1889e:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   188a2:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   188a6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
   188aa:	4618      	mov	r0, r3
}
   188ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   188b0:	200c      	movs	r0, #12
}
   188b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   188b6:	2002      	movs	r0, #2
}
   188b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   188bc:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   188c0:	07da      	lsls	r2, r3, #31
   188c2:	d503      	bpl.n	188cc <ll_conn_update+0xd4>
		     (conn->llcp_feature.features_conn &
   188c4:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   188c8:	079b      	lsls	r3, r3, #30
   188ca:	d5cd      	bpl.n	18868 <ll_conn_update+0x70>
			if (conn->llcp_conn_param.req !=
   188cc:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   188d0:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
   188d4:	4293      	cmp	r3, r2
   188d6:	d1eb      	bne.n	188b0 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   188d8:	f8b0 2172 	ldrh.w	r2, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   188dc:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   188e0:	f8a0 5174 	strh.w	r5, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   188e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   188e8:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   188ea:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   188ee:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   188f0:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.req++;
   188f4:	f880 3170 	strb.w	r3, [r0, #368]	; 0x170
			conn->llcp_conn_param.latency = latency;
   188f8:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   188fc:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   18900:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18904:	db03      	blt.n	1890e <ll_conn_update+0x116>
	return 0;
   18906:	2000      	movs	r0, #0
   18908:	e7d3      	b.n	188b2 <ll_conn_update+0xba>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1890a:	201a      	movs	r0, #26
   1890c:	e7d1      	b.n	188b2 <ll_conn_update+0xba>
				ull_slave_latency_cancel(conn, handle);
   1890e:	2100      	movs	r1, #0
   18910:	f002 fd82 	bl	1b418 <ull_slave_latency_cancel>
	return 0;
   18914:	2000      	movs	r0, #0
   18916:	e7cc      	b.n	188b2 <ll_conn_update+0xba>
   18918:	20003678 	.word	0x20003678

0001891c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1891c:	b9d0      	cbnz	r0, 18954 <ll_chm_get+0x38>
{
   1891e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18920:	4602      	mov	r2, r0
   18922:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18924:	480c      	ldr	r0, [pc, #48]	; (18958 <ll_chm_get+0x3c>)
   18926:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1892a:	f7fa fb4b 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   1892e:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18930:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   18932:	b96e      	cbnz	r6, 18950 <ll_chm_get+0x34>
   18934:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   18938:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   1893c:	2205      	movs	r2, #5
   1893e:	4639      	mov	r1, r7
   18940:	4628      	mov	r0, r5
   18942:	f00e f82e 	bl	269a2 <memcpy>
	} while (conn->chm_updated);
   18946:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   1894a:	2800      	cmp	r0, #0
   1894c:	d1f4      	bne.n	18938 <ll_chm_get+0x1c>
}
   1894e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18950:	2002      	movs	r0, #2
}
   18952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18954:	2002      	movs	r0, #2
}
   18956:	4770      	bx	lr
   18958:	20003678 	.word	0x20003678

0001895c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1895c:	b9e8      	cbnz	r0, 1899a <ll_terminate_ind_send+0x3e>
{
   1895e:	b538      	push	{r3, r4, r5, lr}
   18960:	4602      	mov	r2, r0
   18962:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18964:	480e      	ldr	r0, [pc, #56]	; (189a0 <ll_terminate_ind_send+0x44>)
   18966:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1896a:	f7fa fb2b 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   1896e:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   18970:	b964      	cbnz	r4, 1898c <ll_terminate_ind_send+0x30>
	conn->llcp_terminate.req++;
   18972:	f890 212c 	ldrb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18976:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   1897a:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
	conn->llcp_terminate.req++;
   1897e:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18980:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   18982:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18986:	db03      	blt.n	18990 <ll_terminate_ind_send+0x34>
	return 0;
   18988:	4620      	mov	r0, r4
}
   1898a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1898c:	2002      	movs	r0, #2
}
   1898e:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   18990:	4621      	mov	r1, r4
   18992:	f002 fd41 	bl	1b418 <ull_slave_latency_cancel>
	return 0;
   18996:	4620      	mov	r0, r4
}
   18998:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1899a:	2002      	movs	r0, #2
}
   1899c:	4770      	bx	lr
   1899e:	bf00      	nop
   189a0:	20003678 	.word	0x20003678

000189a4 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   189a4:	b9d8      	cbnz	r0, 189de <ll_feature_req_send+0x3a>
{
   189a6:	b510      	push	{r4, lr}
   189a8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   189aa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   189ae:	480f      	ldr	r0, [pc, #60]	; (189ec <ll_feature_req_send+0x48>)
   189b0:	f7fa fb08 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   189b4:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   189b6:	b984      	cbnz	r4, 189da <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   189b8:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   189bc:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   189c0:	428a      	cmp	r2, r1
   189c2:	d108      	bne.n	189d6 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   189c4:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   189c8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   189ca:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   189cc:	f880 2118 	strb.w	r2, [r0, #280]	; 0x118
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   189d0:	db07      	blt.n	189e2 <ll_feature_req_send+0x3e>
	return 0;
   189d2:	4620      	mov	r0, r4
}
   189d4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   189d6:	200c      	movs	r0, #12
}
   189d8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   189da:	2002      	movs	r0, #2
}
   189dc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   189de:	2002      	movs	r0, #2
}
   189e0:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   189e2:	4621      	mov	r1, r4
   189e4:	f002 fd18 	bl	1b418 <ull_slave_latency_cancel>
	return 0;
   189e8:	4620      	mov	r0, r4
}
   189ea:	bd10      	pop	{r4, pc}
   189ec:	20003678 	.word	0x20003678

000189f0 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   189f0:	b9d8      	cbnz	r0, 18a2a <ll_version_ind_send+0x3a>
{
   189f2:	b510      	push	{r4, lr}
   189f4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   189f6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   189fa:	480f      	ldr	r0, [pc, #60]	; (18a38 <ll_version_ind_send+0x48>)
   189fc:	f7fa fae2 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   18a00:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   18a02:	b984      	cbnz	r4, 18a26 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   18a04:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   18a08:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   18a0c:	428a      	cmp	r2, r1
   18a0e:	d108      	bne.n	18a22 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18a10:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   18a14:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18a16:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   18a18:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18a1c:	db07      	blt.n	18a2e <ll_version_ind_send+0x3e>
	return 0;
   18a1e:	4620      	mov	r0, r4
}
   18a20:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18a22:	200c      	movs	r0, #12
}
   18a24:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18a26:	2002      	movs	r0, #2
}
   18a28:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18a2a:	2002      	movs	r0, #2
}
   18a2c:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   18a2e:	4621      	mov	r1, r4
   18a30:	f002 fcf2 	bl	1b418 <ull_slave_latency_cancel>
	return 0;
   18a34:	4620      	mov	r0, r4
}
   18a36:	bd10      	pop	{r4, pc}
   18a38:	20003678 	.word	0x20003678

00018a3c <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18a3c:	2800      	cmp	r0, #0
   18a3e:	d147      	bne.n	18ad0 <ll_length_req_send+0x94>
{
   18a40:	b538      	push	{r3, r4, r5, lr}
   18a42:	460d      	mov	r5, r1
   18a44:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18a46:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18a4a:	4602      	mov	r2, r0
   18a4c:	4824      	ldr	r0, [pc, #144]	; (18ae0 <ll_length_req_send+0xa4>)
   18a4e:	f7fa fab9 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   18a52:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   18a54:	bb1b      	cbnz	r3, 18a9e <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
   18a56:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   18a5a:	071a      	lsls	r2, r3, #28
   18a5c:	d421      	bmi.n	18aa2 <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
   18a5e:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   18a62:	07d1      	lsls	r1, r2, #31
   18a64:	d503      	bpl.n	18a6e <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   18a66:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
	    (conn->common.fex_valid &&
   18a6a:	0692      	lsls	r2, r2, #26
   18a6c:	d519      	bpl.n	18aa2 <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   18a6e:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   18a72:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
   18a76:	428a      	cmp	r2, r1
   18a78:	d017      	beq.n	18aaa <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
   18a7a:	f003 0307 	and.w	r3, r3, #7
   18a7e:	2b03      	cmp	r3, #3
   18a80:	d004      	beq.n	18a8c <ll_length_req_send+0x50>
   18a82:	3303      	adds	r3, #3
   18a84:	f003 0307 	and.w	r3, r3, #7
   18a88:	2b01      	cmp	r3, #1
   18a8a:	d80c      	bhi.n	18aa6 <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
   18a8c:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   18a90:	b94b      	cbnz	r3, 18aa6 <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   18a92:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   18a96:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
   18a9a:	4618      	mov	r0, r3
}
   18a9c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18a9e:	2002      	movs	r0, #2
}
   18aa0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   18aa2:	201a      	movs	r0, #26
}
   18aa4:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   18aa6:	200c      	movs	r0, #12
}
   18aa8:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18aaa:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18aae:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_length.tx_octets = tx_octets;
   18ab2:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
   18ab6:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18ab8:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18abc:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   18abe:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
   18ac2:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   18ac6:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18aca:	db03      	blt.n	18ad4 <ll_length_req_send+0x98>
	return 0;
   18acc:	2000      	movs	r0, #0
}
   18ace:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18ad0:	2002      	movs	r0, #2
}
   18ad2:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   18ad4:	2100      	movs	r1, #0
   18ad6:	f002 fc9f 	bl	1b418 <ull_slave_latency_cancel>
	return 0;
   18ada:	2000      	movs	r0, #0
}
   18adc:	bd38      	pop	{r3, r4, r5, pc}
   18ade:	bf00      	nop
   18ae0:	20003678 	.word	0x20003678

00018ae4 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   18ae4:	4a03      	ldr	r2, [pc, #12]	; (18af4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   18ae6:	4b04      	ldr	r3, [pc, #16]	; (18af8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   18ae8:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   18aea:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   18aec:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   18aee:	800b      	strh	r3, [r1, #0]
}
   18af0:	4770      	bx	lr
   18af2:	bf00      	nop
   18af4:	20009062 	.word	0x20009062
   18af8:	20009064 	.word	0x20009064

00018afc <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   18afc:	4a02      	ldr	r2, [pc, #8]	; (18b08 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   18afe:	4b03      	ldr	r3, [pc, #12]	; (18b0c <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   18b00:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   18b02:	8019      	strh	r1, [r3, #0]
}
   18b04:	2000      	movs	r0, #0
   18b06:	4770      	bx	lr
   18b08:	20009062 	.word	0x20009062
   18b0c:	20009064 	.word	0x20009064

00018b10 <ll_length_max_get>:
{
   18b10:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   18b12:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   18b14:	f44f 6429 	mov.w	r4, #2704	; 0xa90
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   18b18:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   18b1a:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   18b1c:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   18b1e:	801c      	strh	r4, [r3, #0]
}
   18b20:	bc30      	pop	{r4, r5}
   18b22:	4770      	bx	lr

00018b24 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18b24:	b9c0      	cbnz	r0, 18b58 <ll_phy_get+0x34>
{
   18b26:	b538      	push	{r3, r4, r5, lr}
   18b28:	460d      	mov	r5, r1
   18b2a:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18b2c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18b30:	4602      	mov	r2, r0
   18b32:	480a      	ldr	r0, [pc, #40]	; (18b5c <ll_phy_get+0x38>)
   18b34:	f7fa fa46 	bl	12fc4 <mem_get>
   18b38:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   18b3a:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   18b3c:	b950      	cbnz	r0, 18b54 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   18b3e:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   18b42:	f3c2 0202 	ubfx	r2, r2, #0, #3
   18b46:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   18b48:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   18b4c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18b50:	7023      	strb	r3, [r4, #0]
}
   18b52:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18b54:	2002      	movs	r0, #2
}
   18b56:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18b58:	2002      	movs	r0, #2
}
   18b5a:	4770      	bx	lr
   18b5c:	20003678 	.word	0x20003678

00018b60 <ll_phy_default_set>:
	default_phy_tx = tx;
   18b60:	4a02      	ldr	r2, [pc, #8]	; (18b6c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   18b62:	4b03      	ldr	r3, [pc, #12]	; (18b70 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   18b64:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   18b66:	7019      	strb	r1, [r3, #0]
}
   18b68:	2000      	movs	r0, #0
   18b6a:	4770      	bx	lr
   18b6c:	20009159 	.word	0x20009159
   18b70:	20009158 	.word	0x20009158

00018b74 <ll_phy_req_send>:
{
   18b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   18b76:	2800      	cmp	r0, #0
   18b78:	d148      	bne.n	18c0c <ll_phy_req_send+0x98>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18b7a:	460c      	mov	r4, r1
   18b7c:	4615      	mov	r5, r2
   18b7e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18b82:	4602      	mov	r2, r0
   18b84:	4824      	ldr	r0, [pc, #144]	; (18c18 <ll_phy_req_send+0xa4>)
   18b86:	461e      	mov	r6, r3
   18b88:	f7fa fa1c 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   18b8c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   18b8e:	bbeb      	cbnz	r3, 18c0c <ll_phy_req_send+0x98>
	if (conn->llcp_phy.disabled ||
   18b90:	f890 71ab 	ldrb.w	r7, [r0, #427]	; 0x1ab
   18b94:	f017 0708 	ands.w	r7, r7, #8
   18b98:	d13b      	bne.n	18c12 <ll_phy_req_send+0x9e>
	    (conn->common.fex_valid &&
   18b9a:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   18b9e:	07db      	lsls	r3, r3, #31
   18ba0:	d504      	bpl.n	18bac <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   18ba2:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   18ba6:	f413 6f10 	tst.w	r3, #2304	; 0x900
   18baa:	d032      	beq.n	18c12 <ll_phy_req_send+0x9e>
	if ((conn->llcp_req != conn->llcp_ack) ||
   18bac:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   18bb0:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   18bb4:	429a      	cmp	r2, r3
   18bb6:	d126      	bne.n	18c06 <ll_phy_req_send+0x92>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   18bb8:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   18bbc:	f890 21a9 	ldrb.w	r2, [r0, #425]	; 0x1a9
   18bc0:	429a      	cmp	r2, r3
   18bc2:	d120      	bne.n	18c06 <ll_phy_req_send+0x92>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18bc4:	f004 0407 	and.w	r4, r4, #7
   18bc8:	f8b0 11aa 	ldrh.w	r1, [r0, #426]	; 0x1aa
   18bcc:	00a4      	lsls	r4, r4, #2
   18bce:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   18bd2:	f006 0307 	and.w	r3, r6, #7
   18bd6:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   18bda:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18bde:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18be2:	f421 61df 	bic.w	r1, r1, #1784	; 0x6f8
   18be6:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   18bea:	f021 0107 	bic.w	r1, r1, #7
	conn->llcp_phy.req++;
   18bee:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18bf0:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18bf2:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   18bf4:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18bf8:	f8a0 31aa 	strh.w	r3, [r0, #426]	; 0x1aa
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   18bfc:	da04      	bge.n	18c08 <ll_phy_req_send+0x94>
		ull_slave_latency_cancel(conn, handle);
   18bfe:	2100      	movs	r1, #0
   18c00:	f002 fc0a 	bl	1b418 <ull_slave_latency_cancel>
   18c04:	e000      	b.n	18c08 <ll_phy_req_send+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18c06:	270c      	movs	r7, #12
}
   18c08:	4638      	mov	r0, r7
   18c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18c0c:	2702      	movs	r7, #2
}
   18c0e:	4638      	mov	r0, r7
   18c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   18c12:	271a      	movs	r7, #26
}
   18c14:	4638      	mov	r0, r7
   18c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c18:	20003678 	.word	0x20003678

00018c1c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18c1c:	b9d8      	cbnz	r0, 18c56 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18c1e:	4602      	mov	r2, r0
{
   18c20:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18c22:	480e      	ldr	r0, [pc, #56]	; (18c5c <ll_apto_get+0x40>)
   18c24:	460c      	mov	r4, r1
   18c26:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18c2a:	f7fa f9cb 	bl	12fc4 <mem_get>
   18c2e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   18c30:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   18c32:	b970      	cbnz	r0, 18c52 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   18c34:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
   18c38:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   18c3a:	4a09      	ldr	r2, [pc, #36]	; (18c60 <ll_apto_get+0x44>)
   18c3c:	fb03 f301 	mul.w	r3, r3, r1
   18c40:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   18c44:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   18c48:	fba2 2303 	umull	r2, r3, r2, r3
   18c4c:	099b      	lsrs	r3, r3, #6
   18c4e:	8023      	strh	r3, [r4, #0]
}
   18c50:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18c52:	2002      	movs	r0, #2
}
   18c54:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18c56:	2002      	movs	r0, #2
}
   18c58:	4770      	bx	lr
   18c5a:	bf00      	nop
   18c5c:	20003678 	.word	0x20003678
   18c60:	10624dd3 	.word	0x10624dd3

00018c64 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   18c64:	b9d8      	cbnz	r0, 18c9e <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18c66:	4602      	mov	r2, r0
{
   18c68:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18c6a:	480e      	ldr	r0, [pc, #56]	; (18ca4 <ll_apto_set+0x40>)
   18c6c:	460d      	mov	r5, r1
   18c6e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18c72:	f7fa f9a7 	bl	12fc4 <mem_get>
   18c76:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   18c78:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   18c7a:	b970      	cbnz	r0, 18c9a <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   18c7c:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   18c7e:	f240 44e2 	movw	r4, #1250	; 0x4e2
   18c82:	fb04 f403 	mul.w	r4, r4, r3
   18c86:	f242 7310 	movw	r3, #10000	; 0x2710
   18c8a:	fb03 4305 	mla	r3, r3, r5, r4
   18c8e:	3b01      	subs	r3, #1
   18c90:	fbb3 f3f4 	udiv	r3, r3, r4
   18c94:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   18c98:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18c9a:	2002      	movs	r0, #2
}
   18c9c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18c9e:	2002      	movs	r0, #2
}
   18ca0:	4770      	bx	lr
   18ca2:	bf00      	nop
   18ca4:	20003678 	.word	0x20003678

00018ca8 <ull_conn_init>:
	err = init_reset();
   18ca8:	f7ff b9d6 	b.w	18058 <init_reset>

00018cac <ull_conn_reset>:
{
   18cac:	b530      	push	{r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18cae:	2200      	movs	r2, #0
{
   18cb0:	b085      	sub	sp, #20
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18cb2:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18cb6:	482b      	ldr	r0, [pc, #172]	; (18d64 <ull_conn_reset+0xb8>)
   18cb8:	f7fa f984 	bl	12fc4 <mem_get>
   18cbc:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   18cbe:	f7fe fa5f 	bl	17180 <ull_disable_mark>
	LL_ASSERT(mark == conn);
   18cc2:	4284      	cmp	r4, r0
   18cc4:	d00c      	beq.n	18ce0 <ull_conn_reset+0x34>
   18cc6:	4a28      	ldr	r2, [pc, #160]	; (18d68 <ull_conn_reset+0xbc>)
   18cc8:	4928      	ldr	r1, [pc, #160]	; (18d6c <ull_conn_reset+0xc0>)
   18cca:	4829      	ldr	r0, [pc, #164]	; (18d70 <ull_conn_reset+0xc4>)
   18ccc:	f240 6396 	movw	r3, #1686	; 0x696
   18cd0:	f00b fbf0 	bl	244b4 <printk>
   18cd4:	4040      	eors	r0, r0
   18cd6:	f380 8811 	msr	BASEPRI, r0
   18cda:	f04f 0003 	mov.w	r0, #3
   18cde:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18ce0:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   18ce2:	2202      	movs	r2, #2
   18ce4:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   18ce6:	2103      	movs	r1, #3
   18ce8:	4b22      	ldr	r3, [pc, #136]	; (18d74 <ull_conn_reset+0xc8>)
   18cea:	9500      	str	r5, [sp, #0]
   18cec:	2205      	movs	r2, #5
   18cee:	2000      	movs	r0, #0
   18cf0:	f7fb fcee 	bl	146d0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   18cf4:	4629      	mov	r1, r5
   18cf6:	f7fe fa1b 	bl	17130 <ull_ticker_status_take>
	if (!ret) {
   18cfa:	b1f0      	cbz	r0, 18d3a <ull_conn_reset+0x8e>
	conn->lll.link_tx_free = NULL;
   18cfc:	2300      	movs	r3, #0
   18cfe:	67a3      	str	r3, [r4, #120]	; 0x78
	mark = ull_disable_unmark(conn);
   18d00:	4620      	mov	r0, r4
   18d02:	f7fe fa49 	bl	17198 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   18d06:	4284      	cmp	r4, r0
   18d08:	d00c      	beq.n	18d24 <ull_conn_reset+0x78>
   18d0a:	4a17      	ldr	r2, [pc, #92]	; (18d68 <ull_conn_reset+0xbc>)
   18d0c:	4917      	ldr	r1, [pc, #92]	; (18d6c <ull_conn_reset+0xc0>)
   18d0e:	4818      	ldr	r0, [pc, #96]	; (18d70 <ull_conn_reset+0xc4>)
   18d10:	f240 63a5 	movw	r3, #1701	; 0x6a5
   18d14:	f00b fbce 	bl	244b4 <printk>
   18d18:	4040      	eors	r0, r0
   18d1a:	f380 8811 	msr	BASEPRI, r0
   18d1e:	f04f 0003 	mov.w	r0, #3
   18d22:	df02      	svc	2
	MFIFO_INIT(conn_ack);
   18d24:	4914      	ldr	r1, [pc, #80]	; (18d78 <ull_conn_reset+0xcc>)
	MFIFO_INIT(conn_tx);
   18d26:	4815      	ldr	r0, [pc, #84]	; (18d7c <ull_conn_reset+0xd0>)
	conn_upd_curr = NULL;
   18d28:	4a15      	ldr	r2, [pc, #84]	; (18d80 <ull_conn_reset+0xd4>)
	MFIFO_INIT(conn_tx);
   18d2a:	2300      	movs	r3, #0
   18d2c:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   18d2e:	804b      	strh	r3, [r1, #2]
	conn_upd_curr = NULL;
   18d30:	6013      	str	r3, [r2, #0]
	err = init_reset();
   18d32:	f7ff f991 	bl	18058 <init_reset>
}
   18d36:	b005      	add	sp, #20
   18d38:	bd30      	pop	{r4, r5, pc}
		ret = ull_disable(&conn->lll);
   18d3a:	f104 001c 	add.w	r0, r4, #28
   18d3e:	f7fe fa5b 	bl	171f8 <ull_disable>
		LL_ASSERT(!ret);
   18d42:	2800      	cmp	r0, #0
   18d44:	d0da      	beq.n	18cfc <ull_conn_reset+0x50>
   18d46:	4a08      	ldr	r2, [pc, #32]	; (18d68 <ull_conn_reset+0xbc>)
   18d48:	490e      	ldr	r1, [pc, #56]	; (18d84 <ull_conn_reset+0xd8>)
   18d4a:	4809      	ldr	r0, [pc, #36]	; (18d70 <ull_conn_reset+0xc4>)
   18d4c:	f240 639f 	movw	r3, #1695	; 0x69f
   18d50:	f00b fbb0 	bl	244b4 <printk>
   18d54:	4040      	eors	r0, r0
   18d56:	f380 8811 	msr	BASEPRI, r0
   18d5a:	f04f 0003 	mov.w	r0, #3
   18d5e:	df02      	svc	2
   18d60:	e7cc      	b.n	18cfc <ull_conn_reset+0x50>
   18d62:	bf00      	nop
   18d64:	20003678 	.word	0x20003678
   18d68:	0002ebd8 	.word	0x0002ebd8
   18d6c:	0002eca4 	.word	0x0002eca4
   18d70:	0002e80c 	.word	0x0002e80c
   18d74:	00017125 	.word	0x00017125
   18d78:	2000089c 	.word	0x2000089c
   18d7c:	200008e0 	.word	0x200008e0
   18d80:	20003840 	.word	0x20003840
   18d84:	0002e974 	.word	0x0002e974

00018d88 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   18d88:	4b01      	ldr	r3, [pc, #4]	; (18d90 <ull_conn_default_tx_octets_get+0x8>)
}
   18d8a:	8818      	ldrh	r0, [r3, #0]
   18d8c:	4770      	bx	lr
   18d8e:	bf00      	nop
   18d90:	20009062 	.word	0x20009062

00018d94 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   18d94:	4b01      	ldr	r3, [pc, #4]	; (18d9c <ull_conn_default_tx_time_get+0x8>)
}
   18d96:	8818      	ldrh	r0, [r3, #0]
   18d98:	4770      	bx	lr
   18d9a:	bf00      	nop
   18d9c:	20009064 	.word	0x20009064

00018da0 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   18da0:	4b01      	ldr	r3, [pc, #4]	; (18da8 <ull_conn_default_phy_tx_get+0x8>)
}
   18da2:	7818      	ldrb	r0, [r3, #0]
   18da4:	4770      	bx	lr
   18da6:	bf00      	nop
   18da8:	20009159 	.word	0x20009159

00018dac <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   18dac:	4b01      	ldr	r3, [pc, #4]	; (18db4 <ull_conn_default_phy_rx_get+0x8>)
}
   18dae:	7818      	ldrb	r0, [r3, #0]
   18db0:	4770      	bx	lr
   18db2:	bf00      	nop
   18db4:	20009158 	.word	0x20009158

00018db8 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   18db8:	688b      	ldr	r3, [r1, #8]
   18dba:	689b      	ldr	r3, [r3, #8]
{
   18dbc:	b510      	push	{r4, lr}
	switch (lll->role) {
   18dbe:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   18dc2:	09e4      	lsrs	r4, r4, #7
   18dc4:	d10d      	bne.n	18de2 <ull_conn_setup+0x2a>
		LL_ASSERT(0);
   18dc6:	4a0a      	ldr	r2, [pc, #40]	; (18df0 <ull_conn_setup+0x38>)
   18dc8:	490a      	ldr	r1, [pc, #40]	; (18df4 <ull_conn_setup+0x3c>)
   18dca:	480b      	ldr	r0, [pc, #44]	; (18df8 <ull_conn_setup+0x40>)
   18dcc:	f240 23fa 	movw	r3, #762	; 0x2fa
   18dd0:	f00b fb70 	bl	244b4 <printk>
   18dd4:	4040      	eors	r0, r0
   18dd6:	f380 8811 	msr	BASEPRI, r0
   18dda:	f04f 0003 	mov.w	r0, #3
   18dde:	df02      	svc	2
}
   18de0:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   18de2:	460a      	mov	r2, r1
}
   18de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   18de8:	3208      	adds	r2, #8
   18dea:	f7e9 bf65 	b.w	2cb8 <ull_slave_setup>
   18dee:	bf00      	nop
   18df0:	0002ebd8 	.word	0x0002ebd8
   18df4:	0002e86c 	.word	0x0002e86c
   18df8:	0002e80c 	.word	0x0002e80c

00018dfc <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   18dfc:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   18dfe:	88da      	ldrh	r2, [r3, #6]
   18e00:	2a00      	cmp	r2, #0
   18e02:	d15a      	bne.n	18eba <ull_conn_rx+0xbe>
{
   18e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e08:	460d      	mov	r5, r1
   18e0a:	b085      	sub	sp, #20
   18e0c:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18e0e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   18e12:	48b2      	ldr	r0, [pc, #712]	; (190dc <ull_conn_rx+0x2e0>)
   18e14:	f7fa f8d6 	bl	12fc4 <mem_get>
   18e18:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   18e1a:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   18e1c:	2800      	cmp	r0, #0
   18e1e:	f040 8092 	bne.w	18f46 <ull_conn_rx+0x14a>
	pdu_rx = (void *)(*rx)->pdu;
   18e22:	682a      	ldr	r2, [r5, #0]
	switch (pdu_rx->ll_id) {
   18e24:	7f13      	ldrb	r3, [r2, #28]
   18e26:	f003 0303 	and.w	r3, r3, #3
   18e2a:	2b03      	cmp	r3, #3
	pdu_rx = (void *)(*rx)->pdu;
   18e2c:	4616      	mov	r6, r2
	switch (pdu_rx->ll_id) {
   18e2e:	d12a      	bne.n	18e86 <ull_conn_rx+0x8a>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   18e30:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	opcode = pdu_rx->llctrl.opcode;
   18e34:	f892 a01f 	ldrb.w	sl, [r2, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   18e38:	07d8      	lsls	r0, r3, #31
   18e3a:	f140 808b 	bpl.w	18f54 <ull_conn_rx+0x158>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   18e3e:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   18e42:	2a00      	cmp	r2, #0
   18e44:	f2c0 8636 	blt.w	19ab4 <ull_conn_rx+0xcb8>
	return (!conn->lll.role &&
   18e48:	0759      	lsls	r1, r3, #29
   18e4a:	f100 80e9 	bmi.w	19020 <ull_conn_rx+0x224>
		((!conn->llcp_enc.refresh &&
   18e4e:	f1ba 0f02 	cmp.w	sl, #2
   18e52:	f000 8419 	beq.w	19688 <ull_conn_rx+0x88c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   18e56:	f1ba 0f05 	cmp.w	sl, #5
   18e5a:	f000 8569 	beq.w	19930 <ull_conn_rx+0xb34>
   18e5e:	f1ba 0f06 	cmp.w	sl, #6
   18e62:	f000 86b0 	beq.w	19bc6 <ull_conn_rx+0xdca>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   18e66:	f1ba 0f0d 	cmp.w	sl, #13
   18e6a:	f000 8435 	beq.w	196d8 <ull_conn_rx+0x8dc>
   18e6e:	f1ba 0f11 	cmp.w	sl, #17
   18e72:	f000 8326 	beq.w	194c2 <ull_conn_rx+0x6c6>
		conn->llcp_terminate.reason_peer =
   18e76:	233d      	movs	r3, #61	; 0x3d
   18e78:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18e7c:	682b      	ldr	r3, [r5, #0]
   18e7e:	2203      	movs	r2, #3
   18e80:	711a      	strb	r2, [r3, #4]

		return 0;
   18e82:	2000      	movs	r0, #0
   18e84:	e00b      	b.n	18e9e <ull_conn_rx+0xa2>
	switch (pdu_rx->ll_id) {
   18e86:	b96b      	cbnz	r3, 18ea4 <ull_conn_rx+0xa8>
		if (conn->llcp_enc.pause_rx) {
   18e88:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   18e8c:	07db      	lsls	r3, r3, #31
   18e8e:	d503      	bpl.n	18e98 <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_peer =
   18e90:	233d      	movs	r3, #61	; 0x3d
   18e92:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
   18e96:	682a      	ldr	r2, [r5, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18e98:	2303      	movs	r3, #3
   18e9a:	7113      	strb	r3, [r2, #4]
	return 0;
   18e9c:	2000      	movs	r0, #0
}
   18e9e:	b005      	add	sp, #20
   18ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   18ea4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   18ea8:	07da      	lsls	r2, r3, #31
   18eaa:	d5f7      	bpl.n	18e9c <ull_conn_rx+0xa0>
			conn->llcp_terminate.reason_peer =
   18eac:	233d      	movs	r3, #61	; 0x3d
   18eae:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18eb2:	682b      	ldr	r3, [r5, #0]
   18eb4:	2203      	movs	r2, #3
   18eb6:	711a      	strb	r2, [r3, #4]
   18eb8:	e7f1      	b.n	18e9e <ull_conn_rx+0xa2>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18eba:	2203      	movs	r2, #3
   18ebc:	711a      	strb	r2, [r3, #4]
		return 0;
   18ebe:	2000      	movs	r0, #0
}
   18ec0:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   18ec2:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   18ec6:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
   18ec8:	f043 0303 	orr.w	r3, r3, #3
   18ecc:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   18ed0:	d114      	bne.n	18efc <ull_conn_rx+0x100>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   18ed2:	f8b4 31aa 	ldrh.w	r3, [r4, #426]	; 0x1aa
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   18ed6:	f894 01ac 	ldrb.w	r0, [r4, #428]	; 0x1ac
					conn->llcp_phy.tx =
   18eda:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   18ede:	f000 0307 	and.w	r3, r0, #7
   18ee2:	009b      	lsls	r3, r3, #2
   18ee4:	f3c0 1002 	ubfx	r0, r0, #4, #3
   18ee8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   18eec:	f021 0104 	bic.w	r1, r1, #4
					conn->llcp_phy.ack--;
   18ef0:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
   18ef2:	430b      	orrs	r3, r1
					conn->llcp_phy.ack--;
   18ef4:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
					conn->llcp_phy.tx =
   18ef8:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   18efc:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
   18f00:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   18f04:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   18f08:	f3c2 0082 	ubfx	r0, r2, #2, #3
   18f0c:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   18f0e:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   18f12:	009b      	lsls	r3, r3, #2
   18f14:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   18f18:	f002 0203 	and.w	r2, r2, #3
   18f1c:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   18f1e:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   18f22:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   18f26:	d002      	beq.n	18f2e <ull_conn_rx+0x132>
   18f28:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   18f2c:	d105      	bne.n	18f3a <ull_conn_rx+0x13e>
					conn->llcp_phy.tx = 0;
   18f2e:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   18f32:	f003 0303 	and.w	r3, r3, #3
   18f36:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   18f3a:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   18f3e:	f043 0301 	orr.w	r3, r3, #1
   18f42:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18f46:	682b      	ldr	r3, [r5, #0]
   18f48:	2203      	movs	r2, #3
	int nack = 0;
   18f4a:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18f4c:	711a      	strb	r2, [r3, #4]
}
   18f4e:	b005      	add	sp, #20
   18f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   18f54:	321c      	adds	r2, #28
	switch (opcode) {
   18f56:	f1ba 0f19 	cmp.w	sl, #25
   18f5a:	d81f      	bhi.n	18f9c <ull_conn_rx+0x1a0>
   18f5c:	e8df f01a 	tbh	[pc, sl, lsl #1]
   18f60:	043700c2 	.word	0x043700c2
   18f64:	04980394 	.word	0x04980394
   18f68:	04e304dc 	.word	0x04e304dc
   18f6c:	04720502 	.word	0x04720502
   18f70:	025e0430 	.word	0x025e0430
   18f74:	051c0210 	.word	0x051c0210
   18f78:	03bc0400 	.word	0x03bc0400
   18f7c:	037903ac 	.word	0x037903ac
   18f80:	02b102e6 	.word	0x02b102e6
   18f84:	03a10298 	.word	0x03a10298
   18f88:	00880088 	.word	0x00880088
   18f8c:	01a201df 	.word	0x01a201df
   18f90:	01300165 	.word	0x01300165
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   18f94:	7f73      	ldrb	r3, [r6, #29]
   18f96:	2b01      	cmp	r3, #1
   18f98:	f000 8507 	beq.w	199aa <ull_conn_rx+0xbae>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18f9c:	4850      	ldr	r0, [pc, #320]	; (190e0 <ull_conn_rx+0x2e4>)
   18f9e:	f7f9 ffdf 	bl	12f60 <mem_acquire>
	if (!tx) {
   18fa2:	2800      	cmp	r0, #0
   18fa4:	f000 86d4 	beq.w	19d50 <ull_conn_rx+0xf54>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   18fa8:	2302      	movs	r3, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18faa:	7902      	ldrb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   18fac:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   18fae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
   18fb2:	f880 a008 	strb.w	sl, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18fb6:	f042 0203 	orr.w	r2, r2, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   18fba:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18fbc:	7102      	strb	r2, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   18fbe:	71c1      	strb	r1, [r0, #7]
	if (
   18fc0:	b303      	cbz	r3, 19004 <ull_conn_rx+0x208>
	    !conn->llcp_enc.pause_tx &&
   18fc2:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   18fc6:	0795      	lsls	r5, r2, #30
   18fc8:	d41c      	bmi.n	19004 <ull_conn_rx+0x208>
	    !conn->llcp_phy.pause_tx &&
   18fca:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   18fce:	07d1      	lsls	r1, r2, #31
   18fd0:	d418      	bmi.n	19004 <ull_conn_rx+0x208>
		if (conn->tx_head == conn->tx_data) {
   18fd2:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   18fd6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   18fd8:	bf04      	itt	eq
   18fda:	681a      	ldreq	r2, [r3, #0]
   18fdc:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   18fe0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   18fe4:	b99a      	cbnz	r2, 1900e <ull_conn_rx+0x212>
			tx->next = conn->tx_head->next;
   18fe6:	681a      	ldr	r2, [r3, #0]
   18fe8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   18fea:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   18fec:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   18fee:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
	if (!tx->next) {
   18ff2:	2b00      	cmp	r3, #0
   18ff4:	f000 8588 	beq.w	19b08 <ull_conn_rx+0xd0c>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18ff8:	2303      	movs	r3, #3
	return 0;
   18ffa:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   18ffc:	7133      	strb	r3, [r6, #4]
}
   18ffe:	b005      	add	sp, #20
   19000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   19004:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   19008:	2a00      	cmp	r2, #0
   1900a:	f000 8581 	beq.w	19b10 <ull_conn_rx+0xd14>
	tx->next = conn->tx_ctrl_last->next;
   1900e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   19012:	681a      	ldr	r2, [r3, #0]
   19014:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19016:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   19018:	6803      	ldr	r3, [r0, #0]
   1901a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
   1901e:	e7e8      	b.n	18ff2 <ull_conn_rx+0x1f6>
		 (conn->llcp_enc.refresh &&
   19020:	f1ba 0f02 	cmp.w	sl, #2
   19024:	f000 8330 	beq.w	19688 <ull_conn_rx+0x88c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   19028:	f1ba 0f0b 	cmp.w	sl, #11
   1902c:	f000 8577 	beq.w	19b1e <ull_conn_rx+0xd22>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   19030:	f1ba 0f04 	cmp.w	sl, #4
   19034:	f47f af0f 	bne.w	18e56 <ull_conn_rx+0x5a>
		if (conn->lll.role ||
   19038:	7f73      	ldrb	r3, [r6, #29]
   1903a:	2b0d      	cmp	r3, #13
   1903c:	d1ae      	bne.n	18f9c <ull_conn_rx+0x1a0>
		memcpy(&conn->llcp.encryption.skd[8],
   1903e:	2208      	movs	r2, #8
   19040:	f106 0120 	add.w	r1, r6, #32
   19044:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   19048:	f00d fcab 	bl	269a2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   1904c:	f106 0128 	add.w	r1, r6, #40	; 0x28
   19050:	2204      	movs	r2, #4
   19052:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   19056:	f00d fca4 	bl	269a2 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   1905a:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1905e:	682a      	ldr	r2, [r5, #0]
		conn->llcp_enc.pause_rx = 1U;
   19060:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19064:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
   19066:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
   1906a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1906c:	7111      	strb	r1, [r2, #4]
		break;
   1906e:	e716      	b.n	18e9e <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   19070:	7f73      	ldrb	r3, [r6, #29]
   19072:	2b09      	cmp	r3, #9
   19074:	d192      	bne.n	18f9c <ull_conn_rx+0x1a0>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   19076:	f1ba 0f14 	cmp.w	sl, #20
   1907a:	f000 85aa 	beq.w	19bd2 <ull_conn_rx+0xdd6>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1907e:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
   19082:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   19086:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   1908a:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1908c:	428a      	cmp	r2, r1
	eff_tx_octets = conn->lll.max_tx_octets;
   1908e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   19092:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   19096:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1909a:	9100      	str	r1, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   1909c:	9302      	str	r3, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1909e:	f001 818c 	beq.w	1a3ba <ull_conn_rx+0x15be>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   190a2:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	struct node_tx *tx = NULL;
   190a6:	2100      	movs	r1, #0
	       tx) ||
   190a8:	f002 0207 	and.w	r2, r2, #7
   190ac:	2a02      	cmp	r2, #2
   190ae:	f000 85a9 	beq.w	19c04 <ull_conn_rx+0xe08>
   190b2:	f896 a01f 	ldrb.w	sl, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   190b6:	f1ba 0f15 	cmp.w	sl, #21
   190ba:	f43f aeef 	beq.w	18e9c <ull_conn_rx+0xa0>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   190be:	4608      	mov	r0, r1
   190c0:	4907      	ldr	r1, [pc, #28]	; (190e0 <ull_conn_rx+0x2e4>)
   190c2:	f7f9 ff67 	bl	12f94 <mem_release>
			if (conn->llcp_length.state ==
   190c6:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
   190ca:	f003 0307 	and.w	r3, r3, #7
   190ce:	2b04      	cmp	r3, #4
   190d0:	f47f aee4 	bne.w	18e9c <ull_conn_rx+0xa0>
				return -EBUSY;
   190d4:	f06f 000f 	mvn.w	r0, #15
   190d8:	e6e1      	b.n	18e9e <ull_conn_rx+0xa2>
   190da:	bf00      	nop
   190dc:	20003678 	.word	0x20003678
   190e0:	200038c4 	.word	0x200038c4
		if (!conn->lll.role ||
   190e4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   190e8:	2b00      	cmp	r3, #0
   190ea:	f6bf af57 	bge.w	18f9c <ull_conn_rx+0x1a0>
   190ee:	7f73      	ldrb	r3, [r6, #29]
   190f0:	2b0c      	cmp	r3, #12
   190f2:	f47f af53 	bne.w	18f9c <ull_conn_rx+0x1a0>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   190f6:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   190fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   190fc:	1ac3      	subs	r3, r0, r3
   190fe:	041b      	lsls	r3, r3, #16
   19100:	f101 804a 	bmi.w	1a198 <ull_conn_rx+0x139c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   19104:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   19108:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   1910c:	1a9b      	subs	r3, r3, r2
   1910e:	f003 0303 	and.w	r3, r3, #3
   19112:	2b02      	cmp	r3, #2
   19114:	f001 80b4 	beq.w	1a280 <ull_conn_rx+0x1484>
	if (!conn_upd_curr) {
   19118:	4bda      	ldr	r3, [pc, #872]	; (19484 <ull_conn_rx+0x688>)
   1911a:	681a      	ldr	r2, [r3, #0]
   1911c:	2a00      	cmp	r2, #0
   1911e:	f001 8101 	beq.w	1a324 <ull_conn_rx+0x1528>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   19122:	f896 3020 	ldrb.w	r3, [r6, #32]
   19126:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   1912a:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1912e:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   19132:	f240 42e2 	movw	r2, #1250	; 0x4e2
   19136:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   1913a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1913e:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   19142:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   19146:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   1914a:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1914e:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   19152:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   19156:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   1915a:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1915e:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   19162:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   19166:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   1916a:	f8a4 00ec 	strh.w	r0, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1916e:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
   19172:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   19176:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
   1917a:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1917c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   19180:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   19184:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp_cu.timeout =
   19188:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
	link->mem = conn->llcp_rx;
   1918c:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   1918e:	682b      	ldr	r3, [r5, #0]
   19190:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   19192:	682b      	ldr	r3, [r5, #0]
   19194:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   19198:	2300      	movs	r3, #0
   1919a:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1919c:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   191a0:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   191a4:	4293      	cmp	r3, r2
   191a6:	d007      	beq.n	191b8 <ull_conn_rx+0x3bc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   191a8:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   191ac:	f003 0307 	and.w	r3, r3, #7
   191b0:	2b04      	cmp	r3, #4
   191b2:	d101      	bne.n	191b8 <ull_conn_rx+0x3bc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   191b4:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
   191b8:	2000      	movs	r0, #0
   191ba:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		break;
   191be:	e66e      	b.n	18e9e <ull_conn_rx+0xa2>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   191c0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   191c4:	2b00      	cmp	r3, #0
   191c6:	f6ff aee9 	blt.w	18f9c <ull_conn_rx+0x1a0>
   191ca:	7f77      	ldrb	r7, [r6, #29]
   191cc:	2f03      	cmp	r7, #3
   191ce:	f47f aee5 	bne.w	18f9c <ull_conn_rx+0x1a0>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   191d2:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
					 conn->lll.phy_rx))) {
   191d6:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   191da:	f896 2020 	ldrb.w	r2, [r6, #32]
   191de:	430b      	orrs	r3, r1
   191e0:	f003 0307 	and.w	r3, r3, #7
   191e4:	4213      	tst	r3, r2
   191e6:	f43f ae59 	beq.w	18e9c <ull_conn_rx+0xa0>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   191ea:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   191ee:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   191f2:	1a9b      	subs	r3, r3, r2
   191f4:	f003 0303 	and.w	r3, r3, #3
   191f8:	2b02      	cmp	r3, #2
   191fa:	f43f ae4f 	beq.w	18e9c <ull_conn_rx+0xa0>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   191fe:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   19202:	f002 f98b 	bl	1b51c <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   19206:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
   1920a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp_ack -= 2U;
   1920e:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   19210:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   19212:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
   19216:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1921a:	682a      	ldr	r2, [r5, #0]
			conn->llcp.chan_map.initiate = 1U;
   1921c:	f043 0301 	orr.w	r3, r3, #1
   19220:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	int nack = 0;
   19224:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19226:	7117      	strb	r7, [r2, #4]

		break;
   19228:	e639      	b.n	18e9e <ull_conn_rx+0xa2>
		if (!conn->lll.role ||
   1922a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1922e:	2b00      	cmp	r3, #0
   19230:	f6bf aeb4 	bge.w	18f9c <ull_conn_rx+0x1a0>
   19234:	7f73      	ldrb	r3, [r6, #29]
   19236:	2b05      	cmp	r3, #5
   19238:	f47f aeb0 	bne.w	18f9c <ull_conn_rx+0x1a0>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   1923c:	f896 1020 	ldrb.w	r1, [r6, #32]
   19240:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   19244:	ea41 0003 	orr.w	r0, r1, r3
   19248:	f010 0007 	ands.w	r0, r0, #7
   1924c:	f040 8726 	bne.w	1a09c <ull_conn_rx+0x12a0>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   19250:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   19254:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   19258:	428b      	cmp	r3, r1
   1925a:	f43f aecd 	beq.w	18ff8 <ull_conn_rx+0x1fc>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1925e:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   19262:	f003 0303 	and.w	r3, r3, #3
   19266:	2b02      	cmp	r3, #2
   19268:	f47f aec6 	bne.w	18ff8 <ull_conn_rx+0x1fc>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1926c:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   19270:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   19274:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   19278:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1927c:	4611      	mov	r1, r2
   1927e:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   19282:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
   19286:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   1928a:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1928e:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
   19292:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   19296:	f041 81a4 	bne.w	1a5e2 <ull_conn_rx+0x17e6>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1929a:	682a      	ldr	r2, [r5, #0]
   1929c:	2103      	movs	r1, #3
	int nack = 0;
   1929e:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   192a0:	7111      	strb	r1, [r2, #4]
		if (err) {
   192a2:	e5fc      	b.n	18e9e <ull_conn_rx+0xa2>
		if (conn->lll.role ||
   192a4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   192a8:	2b00      	cmp	r3, #0
   192aa:	f6ff ae77 	blt.w	18f9c <ull_conn_rx+0x1a0>
   192ae:	7f73      	ldrb	r3, [r6, #29]
   192b0:	2b03      	cmp	r3, #3
   192b2:	f47f ae73 	bne.w	18f9c <ull_conn_rx+0x1a0>
		if (!conn->lll.role &&
   192b6:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   192ba:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   192be:	429a      	cmp	r2, r3
   192c0:	f43f ae9a 	beq.w	18ff8 <ull_conn_rx+0x1fc>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   192c4:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   192c8:	f001 0303 	and.w	r3, r1, #3
   192cc:	2b02      	cmp	r3, #2
   192ce:	f47f ae93 	bne.w	18ff8 <ull_conn_rx+0x1fc>
			conn->llcp_phy.tx &= p->rx_phys;
   192d2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
			conn->llcp_phy.rx &= p->tx_phys;
   192d6:	f896 2020 	ldrb.w	r2, [r6, #32]
			conn->llcp_phy.tx &= p->rx_phys;
   192da:	f3c1 0082 	ubfx	r0, r1, #2, #3
   192de:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   192e0:	009b      	lsls	r3, r3, #2
   192e2:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   192e6:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   192ea:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   192ee:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   192f2:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   192f6:	d002      	beq.n	192fe <ull_conn_rx+0x502>
   192f8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   192fc:	d105      	bne.n	1930a <ull_conn_rx+0x50e>
				conn->llcp_phy.tx = 0;
   192fe:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   19302:	f003 0303 	and.w	r3, r3, #3
   19306:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
   1930a:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   1930e:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   19310:	f043 0301 	orr.w	r3, r3, #1
   19314:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   19318:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1931c:	e66c      	b.n	18ff8 <ull_conn_rx+0x1fc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   1931e:	7f73      	ldrb	r3, [r6, #29]
   19320:	2b03      	cmp	r3, #3
   19322:	f47f ae3b 	bne.w	18f9c <ull_conn_rx+0x1a0>
		if (!conn->lll.role) {
   19326:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1932a:	2b00      	cmp	r3, #0
   1932c:	f2c0 8514 	blt.w	19d58 <ull_conn_rx+0xf5c>
			if ((conn->llcp_phy.ack !=
   19330:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
   19334:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
   19338:	428a      	cmp	r2, r1
   1933a:	d007      	beq.n	1934c <ull_conn_rx+0x550>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1933c:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   19340:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   19344:	3b01      	subs	r3, #1
   19346:	2b02      	cmp	r3, #2
   19348:	f240 872e 	bls.w	1a1a8 <ull_conn_rx+0x13ac>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1934c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   19350:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   19354:	1a1b      	subs	r3, r3, r0
   19356:	f003 0303 	and.w	r3, r3, #3
   1935a:	2b02      	cmp	r3, #2
   1935c:	f000 8697 	beq.w	1a08e <ull_conn_rx+0x1292>
				     LLCP_ENCRYPTION)) ||
   19360:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
   19364:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   19368:	4298      	cmp	r0, r3
   1936a:	f43f adaa 	beq.w	18ec2 <ull_conn_rx+0xc6>
				nack = reject_ext_ind_send(conn, *rx,
   1936e:	1d31      	adds	r1, r6, #4
   19370:	4620      	mov	r0, r4
   19372:	232a      	movs	r3, #42	; 0x2a
   19374:	2216      	movs	r2, #22
}
   19376:	b005      	add	sp, #20
   19378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1937c:	f7ff b822 	b.w	183c4 <reject_ext_ind_send.isra.0>
		if (!conn->lll.role ||
   19380:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19384:	2b00      	cmp	r3, #0
   19386:	f6bf ae09 	bge.w	18f9c <ull_conn_rx+0x1a0>
   1938a:	7f75      	ldrb	r5, [r6, #29]
   1938c:	2d01      	cmp	r5, #1
   1938e:	f47f ae05 	bne.w	18f9c <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19392:	483d      	ldr	r0, [pc, #244]	; (19488 <ull_conn_rx+0x68c>)
   19394:	f7f9 fde4 	bl	12f60 <mem_acquire>
		if (!tx) {
   19398:	4603      	mov	r3, r0
   1939a:	2800      	cmp	r0, #0
   1939c:	f000 84d8 	beq.w	19d50 <ull_conn_rx+0xf54>
	conn->llcp_enc.pause_rx = 1U;
   193a0:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   193a4:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   193a8:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   193ac:	f36f 01c3 	bfc	r1, #3, #1
   193b0:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   193b4:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   193b8:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   193ba:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   193be:	7145      	strb	r5, [r0, #5]
	    conn->tx_head &&
   193c0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   193c4:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   193c8:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   193ca:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   193cc:	71d8      	strb	r0, [r3, #7]
	if (
   193ce:	2a00      	cmp	r2, #0
   193d0:	f000 83ee 	beq.w	19bb0 <ull_conn_rx+0xdb4>
	    !conn->llcp_enc.pause_tx &&
   193d4:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
   193d8:	0788      	lsls	r0, r1, #30
   193da:	f100 83e9 	bmi.w	19bb0 <ull_conn_rx+0xdb4>
	    !conn->llcp_phy.pause_tx &&
   193de:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   193e2:	07c9      	lsls	r1, r1, #31
   193e4:	f100 83e4 	bmi.w	19bb0 <ull_conn_rx+0xdb4>
		if (conn->tx_head == conn->tx_data) {
   193e8:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   193ec:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   193ee:	bf04      	itt	eq
   193f0:	6811      	ldreq	r1, [r2, #0]
   193f2:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   193f6:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   193fa:	2900      	cmp	r1, #0
   193fc:	f001 80b3 	beq.w	1a566 <ull_conn_rx+0x176a>
	tx->next = conn->tx_ctrl_last->next;
   19400:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   19404:	6811      	ldr	r1, [r2, #0]
   19406:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   19408:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   1940a:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
	if (!tx->next) {
   1940e:	681a      	ldr	r2, [r3, #0]
   19410:	2a00      	cmp	r2, #0
   19412:	f47f adf1 	bne.w	18ff8 <ull_conn_rx+0x1fc>
		conn->tx_data_last = tx;
   19416:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   1941a:	e5ed      	b.n	18ff8 <ull_conn_rx+0x1fc>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1941c:	7f73      	ldrb	r3, [r6, #29]
   1941e:	2b09      	cmp	r3, #9
   19420:	f47f adbc 	bne.w	18f9c <ull_conn_rx+0x1a0>
	       (features[1] << 8) | (features[2] << 16);
   19424:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   19428:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1942c:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   19430:	4916      	ldr	r1, [pc, #88]	; (1948c <ull_conn_rx+0x690>)
   19432:	041b      	lsls	r3, r3, #16
   19434:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   19438:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1943a:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
	conn->common.fex_valid = 1U;
   1943e:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   19442:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   19444:	4003      	ands	r3, r0
   19446:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1944a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   1944e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   19452:	f896 5021 	ldrb.w	r5, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   19456:	f896 0020 	ldrb.w	r0, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   1945a:	041b      	lsls	r3, r3, #16
   1945c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   19460:	4303      	orrs	r3, r0
   19462:	430b      	orrs	r3, r1
	feat &= LL_FEAT_BIT_MASK;
   19464:	f3c3 0310 	ubfx	r3, r3, #0, #17
	conn->llcp_feature.ack = conn->llcp_feature.req;
   19468:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
	conn->llcp_feature.features_peer =
   1946c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	conn->common.fex_valid = 1U;
   19470:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
   19474:	2000      	movs	r0, #0
	conn->common.fex_valid = 1U;
   19476:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1947a:	f884 1119 	strb.w	r1, [r4, #281]	; 0x119
	conn->procedure_expire = 0U;
   1947e:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
}
   19482:	e50c      	b.n	18e9e <ull_conn_rx+0xa2>
   19484:	20003840 	.word	0x20003840
   19488:	200038c4 	.word	0x200038c4
   1948c:	fffe30d0 	.word	0xfffe30d0
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   19490:	7f75      	ldrb	r5, [r6, #29]
   19492:	2d01      	cmp	r5, #1
   19494:	f47f ad82 	bne.w	18f9c <ull_conn_rx+0x1a0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19498:	48e8      	ldr	r0, [pc, #928]	; (1983c <ull_conn_rx+0xa40>)
   1949a:	f7f9 fd61 	bl	12f60 <mem_acquire>
	if (!tx) {
   1949e:	4601      	mov	r1, r0
   194a0:	2800      	cmp	r0, #0
   194a2:	f000 8455 	beq.w	19d50 <ull_conn_rx+0xf54>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   194a6:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   194a8:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   194aa:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   194ae:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   194b0:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   194b2:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   194b4:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   194b6:	f7ff f839 	bl	1852c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   194ba:	2303      	movs	r3, #3
   194bc:	7133      	strb	r3, [r6, #4]
	return 0;
   194be:	2000      	movs	r0, #0
   194c0:	e4ed      	b.n	18e9e <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   194c2:	7f73      	ldrb	r3, [r6, #29]
   194c4:	2b03      	cmp	r3, #3
   194c6:	f47f ad69 	bne.w	18f9c <ull_conn_rx+0x1a0>
	switch (rej_ext_ind->reject_opcode) {
   194ca:	f896 3020 	ldrb.w	r3, [r6, #32]
   194ce:	3b03      	subs	r3, #3
   194d0:	2b13      	cmp	r3, #19
   194d2:	f63f ad91 	bhi.w	18ff8 <ull_conn_rx+0x1fc>
   194d6:	a201      	add	r2, pc, #4	; (adr r2, 194dc <ull_conn_rx+0x6e0>)
   194d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   194dc:	00019a5d 	.word	0x00019a5d
   194e0:	00018ff9 	.word	0x00018ff9
   194e4:	00018ff9 	.word	0x00018ff9
   194e8:	00018ff9 	.word	0x00018ff9
   194ec:	00018ff9 	.word	0x00018ff9
   194f0:	00018ff9 	.word	0x00018ff9
   194f4:	00018ff9 	.word	0x00018ff9
   194f8:	00018ff9 	.word	0x00018ff9
   194fc:	00018ff9 	.word	0x00018ff9
   19500:	00018ff9 	.word	0x00018ff9
   19504:	00018ff9 	.word	0x00018ff9
   19508:	00018ff9 	.word	0x00018ff9
   1950c:	000199f7 	.word	0x000199f7
   19510:	00018ff9 	.word	0x00018ff9
   19514:	00018ff9 	.word	0x00018ff9
   19518:	00018ff9 	.word	0x00018ff9
   1951c:	00018ff9 	.word	0x00018ff9
   19520:	000199bb 	.word	0x000199bb
   19524:	00018ff9 	.word	0x00018ff9
   19528:	00019a9b 	.word	0x00019a9b
		if (conn->lll.role ||
   1952c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19530:	2b00      	cmp	r3, #0
   19532:	f6ff ad33 	blt.w	18f9c <ull_conn_rx+0x1a0>
   19536:	7f73      	ldrb	r3, [r6, #29]
   19538:	2b18      	cmp	r3, #24
   1953a:	f47f ad2f 	bne.w	18f9c <ull_conn_rx+0x1a0>
		if (!conn->lll.role &&
   1953e:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   19542:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   19546:	429a      	cmp	r2, r3
   19548:	f43f ad56 	beq.w	18ff8 <ull_conn_rx+0x1fc>
		    (conn->llcp_conn_param.state ==
   1954c:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
   19550:	f003 0307 	and.w	r3, r3, #7
   19554:	2b04      	cmp	r3, #4
   19556:	f47f ad4f 	bne.w	18ff8 <ull_conn_rx+0x1fc>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1955a:	f8b6 e020 	ldrh.w	lr, [r6, #32]
   1955e:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < 6) ||
   19562:	2a05      	cmp	r2, #5
   19564:	f240 8612 	bls.w	1a18c <ull_conn_rx+0x1390>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   19568:	f8b6 c022 	ldrh.w	ip, [r6, #34]	; 0x22
   1956c:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < 6) ||
   19570:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   19574:	f200 860a 	bhi.w	1a18c <ull_conn_rx+0x1390>
			    (interval_max > 3200) ||
   19578:	429a      	cmp	r2, r3
   1957a:	f200 8607 	bhi.w	1a18c <ull_conn_rx+0x1390>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1957e:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
   19580:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
   19582:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   19586:	f080 8601 	bcs.w	1a18c <ull_conn_rx+0x1390>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1958a:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   1958c:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   19590:	f1a8 010a 	sub.w	r1, r8, #10
   19594:	b289      	uxth	r1, r1
   19596:	f640 4976 	movw	r9, #3190	; 0xc76
   1959a:	4549      	cmp	r1, r9
   1959c:	f200 85f6 	bhi.w	1a18c <ull_conn_rx+0x1390>
			     ((latency + 1) * interval_max)) ||
   195a0:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   195a4:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
   195a8:	f080 85f0 	bcs.w	1a18c <ull_conn_rx+0x1390>
			     ((latency + 1) * interval_max)) ||
   195ac:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   195b0:	428b      	cmp	r3, r1
   195b2:	f0c0 85eb 	bcc.w	1a18c <ull_conn_rx+0x1390>
			conn->procedure_expire = 0U;
   195b6:	2300      	movs	r3, #0
			conn->llcp_conn_param.preferred_periodicity =
   195b8:	f884 117c 	strb.w	r1, [r4, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
   195bc:	f8a4 e174 	strh.w	lr, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   195c0:	f8a4 c176 	strh.w	ip, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   195c4:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
			conn->llcp_conn_param.timeout =	timeout;
   195c8:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			conn->procedure_expire = 0U;
   195cc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   195d0:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   195d4:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   195d8:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   195dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   195e0:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   195e4:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   195e8:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   195ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   195f0:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   195f4:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   195f8:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   195fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   19600:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   19604:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   19608:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1960c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   19610:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   19614:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   19618:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   1961c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   19620:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   19624:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   19628:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   1962c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   19630:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   19634:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   19638:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
   1963c:	682e      	ldr	r6, [r5, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1963e:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
   19640:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   19644:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
   19648:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1964c:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19650:	e4d2      	b.n	18ff8 <ull_conn_rx+0x1fc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   19652:	7f72      	ldrb	r2, [r6, #29]
   19654:	2a18      	cmp	r2, #24
   19656:	f47f aca1 	bne.w	18f9c <ull_conn_rx+0x1a0>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1965a:	4f79      	ldr	r7, [pc, #484]	; (19840 <ull_conn_rx+0xa44>)
   1965c:	f8d7 9000 	ldr.w	r9, [r7]
   19660:	f1b9 0f00 	cmp.w	r9, #0
   19664:	f000 8276 	beq.w	19b54 <ull_conn_rx+0xd58>
   19668:	454c      	cmp	r4, r9
   1966a:	f000 8273 	beq.w	19b54 <ull_conn_rx+0xd58>
			nack = reject_ext_ind_send(conn, *rx,
   1966e:	1d31      	adds	r1, r6, #4
   19670:	4620      	mov	r0, r4
   19672:	2320      	movs	r3, #32
   19674:	220f      	movs	r2, #15
   19676:	e67e      	b.n	19376 <ull_conn_rx+0x57a>
		((!conn->llcp_enc.refresh &&
   19678:	f1ba 0f07 	cmp.w	sl, #7
   1967c:	f000 80e2 	beq.w	19844 <ull_conn_rx+0xa48>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   19680:	f1ba 0f02 	cmp.w	sl, #2
   19684:	f040 8225 	bne.w	19ad2 <ull_conn_rx+0xcd6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   19688:	7f73      	ldrb	r3, [r6, #29]
   1968a:	2b02      	cmp	r3, #2
   1968c:	f47f ac86 	bne.w	18f9c <ull_conn_rx+0x1a0>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   19690:	f896 3020 	ldrb.w	r3, [r6, #32]
   19694:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19698:	2303      	movs	r3, #3
   1969a:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   1969c:	2000      	movs	r0, #0
}
   1969e:	f7ff bbfe 	b.w	18e9e <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   196a2:	7f73      	ldrb	r3, [r6, #29]
   196a4:	2b01      	cmp	r3, #1
   196a6:	f47f ac79 	bne.w	18f9c <ull_conn_rx+0x1a0>
		conn->procedure_expire = 0U;
   196aa:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   196ac:	2303      	movs	r3, #3
		conn->procedure_expire = 0U;
   196ae:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   196b2:	7133      	strb	r3, [r6, #4]
		break;
   196b4:	f7ff bbf3 	b.w	18e9e <ull_conn_rx+0xa2>
		if (conn->lll.role ||
   196b8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   196bc:	2b00      	cmp	r3, #0
   196be:	f6ff ac6d 	blt.w	18f9c <ull_conn_rx+0x1a0>
   196c2:	7f73      	ldrb	r3, [r6, #29]
   196c4:	2b09      	cmp	r3, #9
   196c6:	f47f ac69 	bne.w	18f9c <ull_conn_rx+0x1a0>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   196ca:	1d31      	adds	r1, r6, #4
   196cc:	4620      	mov	r0, r4
}
   196ce:	b005      	add	sp, #20
   196d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   196d4:	f7fe bfbc 	b.w	18650 <feature_rsp_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   196d8:	7f73      	ldrb	r3, [r6, #29]
   196da:	2b02      	cmp	r3, #2
   196dc:	f47f ac5e 	bne.w	18f9c <ull_conn_rx+0x1a0>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   196e0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   196e4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   196e8:	429a      	cmp	r2, r3
   196ea:	d004      	beq.n	196f6 <ull_conn_rx+0x8fa>
   196ec:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   196f0:	2a03      	cmp	r2, #3
   196f2:	f000 85b8 	beq.w	1a266 <ull_conn_rx+0x146a>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   196f6:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   196fa:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   196fe:	4283      	cmp	r3, r0
   19700:	f000 857a 	beq.w	1a1f8 <ull_conn_rx+0x13fc>
		rej_ext_ind->error_code = rej_ind->error_code;
   19704:	f896 2020 	ldrb.w	r2, [r6, #32]
   19708:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1970c:	2a23      	cmp	r2, #35	; 0x23
   1970e:	d012      	beq.n	19736 <ull_conn_rx+0x93a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   19710:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   19714:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   19718:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1971c:	f3c3 0002 	ubfx	r0, r3, #0, #3
   19720:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   19724:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   19728:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1972a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1972e:	f884 11ab 	strb.w	r1, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   19732:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   19736:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   1973a:	0759      	lsls	r1, r3, #29
   1973c:	f57f ac5c 	bpl.w	18ff8 <ull_conn_rx+0x1fc>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   19740:	2313      	movs	r3, #19
	p->status = rej_ext_ind->error_code;
   19742:	7732      	strb	r2, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   19744:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   19746:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   1974a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1974e:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   19750:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   19754:	f3c3 0302 	ubfx	r3, r3, #0, #3
   19758:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   1975a:	2000      	movs	r0, #0
   1975c:	f7ff bb9f 	b.w	18e9e <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   19760:	7f75      	ldrb	r5, [r6, #29]
   19762:	2d06      	cmp	r5, #6
   19764:	f47f ac1a 	bne.w	18f9c <ull_conn_rx+0x1a0>
	if (!conn->llcp_version.tx) {
   19768:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
   1976c:	07df      	lsls	r7, r3, #31
   1976e:	f140 8391 	bpl.w	19e94 <ull_conn_rx+0x1098>
	} else if (!conn->llcp_version.rx) {
   19772:	f013 0302 	ands.w	r3, r3, #2
   19776:	f47f ac3f 	bne.w	18ff8 <ull_conn_rx+0x1fc>
		conn->llcp_version.ack = conn->llcp_version.req;
   1977a:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
		conn->procedure_expire = 0U;
   1977e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   19782:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
	conn->llcp_version.version_number = v->version_number;
   19786:	f896 3020 	ldrb.w	r3, [r6, #32]
   1978a:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1978e:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   19792:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   19796:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1979a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1979e:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128
		sys_le16_to_cpu(v->sub_version_number);
   197a2:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   197a6:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   197aa:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   197ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   197b2:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
	conn->llcp_version.rx = 1U;
   197b6:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	return 0;
   197ba:	2000      	movs	r0, #0
   197bc:	f7ff bb6f 	b.w	18e9e <ull_conn_rx+0xa2>
		if (!conn->lll.role ||
   197c0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   197c4:	2b00      	cmp	r3, #0
   197c6:	f6ff af7c 	blt.w	196c2 <ull_conn_rx+0x8c6>
   197ca:	f7ff bbe7 	b.w	18f9c <ull_conn_rx+0x1a0>
		if (!conn->lll.role ||
   197ce:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   197d2:	2b00      	cmp	r3, #0
   197d4:	f6bf abe2 	bge.w	18f9c <ull_conn_rx+0x1a0>
   197d8:	7f73      	ldrb	r3, [r6, #29]
   197da:	2b08      	cmp	r3, #8
   197dc:	f47f abde 	bne.w	18f9c <ull_conn_rx+0x1a0>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   197e0:	f8b6 5025 	ldrh.w	r5, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   197e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   197e6:	1aeb      	subs	r3, r5, r3
   197e8:	041f      	lsls	r7, r3, #16
   197ea:	f100 84d5 	bmi.w	1a198 <ull_conn_rx+0x139c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   197ee:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   197f2:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   197f6:	1a9b      	subs	r3, r3, r2
   197f8:	f003 0303 	and.w	r3, r3, #3
   197fc:	2b02      	cmp	r3, #2
   197fe:	f000 853f 	beq.w	1a280 <ull_conn_rx+0x1484>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   19802:	2205      	movs	r2, #5
   19804:	f106 0120 	add.w	r1, r6, #32
   19808:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   1980c:	f00d f8c9 	bl	269a2 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   19810:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   19814:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   19818:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	conn->llcp_type = LLCP_CHAN_MAP;
   1981c:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
   1981e:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
   19822:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19824:	2103      	movs	r1, #3
	conn->llcp_type = LLCP_CHAN_MAP;
   19826:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
	conn->llcp.chan_map.initiate = 0U;
   1982a:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   1982e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	int nack = 0;
   19832:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19834:	7131      	strb	r1, [r6, #4]
		if (err) {
   19836:	f7ff bb32 	b.w	18e9e <ull_conn_rx+0xa2>
   1983a:	bf00      	nop
   1983c:	200038c4 	.word	0x200038c4
   19840:	20003840 	.word	0x20003840
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   19844:	7f73      	ldrb	r3, [r6, #29]
   19846:	2b02      	cmp	r3, #2
   19848:	f47f aba8 	bne.w	18f9c <ull_conn_rx+0x1a0>
		} else if ((conn->llcp_conn_param.ack !=
   1984c:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   19850:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   19854:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   19856:	f896 2020 	ldrb.w	r2, [r6, #32]
		} else if ((conn->llcp_conn_param.ack !=
   1985a:	d002      	beq.n	19862 <ull_conn_rx+0xa66>
			    conn->llcp_conn_param.req) &&
   1985c:	2a0f      	cmp	r2, #15
   1985e:	f000 833e 	beq.w	19ede <ull_conn_rx+0x10e2>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   19862:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   19866:	f894 1199 	ldrb.w	r1, [r4, #409]	; 0x199
   1986a:	4299      	cmp	r1, r3
   1986c:	d002      	beq.n	19874 <ull_conn_rx+0xa78>
   1986e:	2a14      	cmp	r2, #20
   19870:	f000 84a9 	beq.w	1a1c6 <ull_conn_rx+0x13ca>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   19874:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   19878:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1987c:	428b      	cmp	r3, r1
   1987e:	d002      	beq.n	19886 <ull_conn_rx+0xa8a>
   19880:	2a16      	cmp	r2, #22
   19882:	f000 852a 	beq.w	1a2da <ull_conn_rx+0x14de>
			switch (llctrl->unknown_rsp.type) {
   19886:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19888:	bf04      	itt	eq
   1988a:	2303      	moveq	r3, #3
   1988c:	7133      	strbeq	r3, [r6, #4]
				break;
   1988e:	e493      	b.n	191b8 <ull_conn_rx+0x3bc>
		if (!conn->lll.role ||
   19890:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19894:	2b00      	cmp	r3, #0
   19896:	f6bf ab81 	bge.w	18f9c <ull_conn_rx+0x1a0>
   1989a:	7f73      	ldrb	r3, [r6, #29]
   1989c:	2b17      	cmp	r3, #23
   1989e:	f47f ab7d 	bne.w	18f9c <ull_conn_rx+0x1a0>
		memcpy(&conn->llcp_enc.rand[0],
   198a2:	2208      	movs	r2, #8
   198a4:	f106 0120 	add.w	r1, r6, #32
   198a8:	f204 1055 	addw	r0, r4, #341	; 0x155
   198ac:	f00d f879 	bl	269a2 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   198b0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   198b4:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   198b8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   198bc:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   198c0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   198c4:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   198c6:	2201      	movs	r2, #1
   198c8:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   198cc:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   198ce:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   198d2:	710a      	strb	r2, [r1, #4]
		conn->llcp_ack -= 2U;
   198d4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   198d8:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
   198dc:	3b02      	subs	r3, #2
   198de:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   198e2:	2208      	movs	r2, #8
   198e4:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   198e8:	f104 00ee 	add.w	r0, r4, #238	; 0xee
   198ec:	f00d f859 	bl	269a2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   198f0:	2204      	movs	r2, #4
   198f2:	f106 0132 	add.w	r1, r6, #50	; 0x32
   198f6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   198fa:	f00d f852 	bl	269a2 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   198fe:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   19902:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
   19906:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   1990a:	f043 0301 	orr.w	r3, r3, #1
   1990e:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
   19912:	2000      	movs	r0, #0
		break;
   19914:	f7ff bac3 	b.w	18e9e <ull_conn_rx+0xa2>
		if (conn->lll.role ||
   19918:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1991c:	2b00      	cmp	r3, #0
   1991e:	f6bf ab8b 	bge.w	19038 <ull_conn_rx+0x23c>
   19922:	f7ff bb3b 	b.w	18f9c <ull_conn_rx+0x1a0>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   19926:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1992a:	2b00      	cmp	r3, #0
   1992c:	f6ff ab36 	blt.w	18f9c <ull_conn_rx+0x1a0>
   19930:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   19934:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19938:	429a      	cmp	r2, r3
   1993a:	f43f ab2f 	beq.w	18f9c <ull_conn_rx+0x1a0>
   1993e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   19942:	2b03      	cmp	r3, #3
   19944:	f47f ab2a 	bne.w	18f9c <ull_conn_rx+0x1a0>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   19948:	7f72      	ldrb	r2, [r6, #29]
   1994a:	2a01      	cmp	r2, #1
   1994c:	f47f ab26 	bne.w	18f9c <ull_conn_rx+0x1a0>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19950:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   19954:	f36f 0201 	bfc	r2, #0, #2
   19958:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	int nack = 0;
   1995c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1995e:	7133      	strb	r3, [r6, #4]
		break;
   19960:	f7ff ba9d 	b.w	18e9e <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   19964:	7f72      	ldrb	r2, [r6, #29]
   19966:	2a01      	cmp	r2, #1
   19968:	f47f ab18 	bne.w	18f9c <ull_conn_rx+0x1a0>
		if (conn->lll.role) {
   1996c:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   19970:	2a00      	cmp	r2, #0
   19972:	f2c0 80b6 	blt.w	19ae2 <ull_conn_rx+0xce6>
			conn->llcp_enc.pause_rx = 0U;
   19976:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   1997a:	f023 0303 	bic.w	r3, r3, #3
   1997e:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		if (conn->llcp_enc.refresh) {
   19982:	075e      	lsls	r6, r3, #29
   19984:	f57f ac18 	bpl.w	191b8 <ull_conn_rx+0x3bc>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   19988:	682a      	ldr	r2, [r5, #0]
			conn->llcp_enc.refresh = 0U;
   1998a:	f36f 0382 	bfc	r3, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1998e:	2110      	movs	r1, #16
			conn->llcp_enc.refresh = 0U;
   19990:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   19994:	7111      	strb	r1, [r2, #4]
		conn->procedure_expire = 0U;
   19996:	e40f      	b.n	191b8 <ull_conn_rx+0x3bc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   19998:	7f73      	ldrb	r3, [r6, #29]
   1999a:	2b01      	cmp	r3, #1
   1999c:	f47f aafe 	bne.w	18f9c <ull_conn_rx+0x1a0>
	} else if (!conn->lll.role) {
   199a0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   199a4:	2b00      	cmp	r3, #0
   199a6:	f280 80be 	bge.w	19b26 <ull_conn_rx+0xd2a>
		conn->lll.enc_tx = 0;
   199aa:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   199ae:	f36f 1304 	bfc	r3, #4, #1
   199b2:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   199b6:	f7ff bb1f 	b.w	18ff8 <ull_conn_rx+0x1fc>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   199ba:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   199be:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
   199c2:	429a      	cmp	r2, r3
   199c4:	f43f ab18 	beq.w	18ff8 <ull_conn_rx+0x1fc>
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   199c8:	2209      	movs	r2, #9
	conn->procedure_expire = 0U;
   199ca:	2000      	movs	r0, #0
	conn->llcp_length.ack = conn->llcp_length.req;
   199cc:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
	conn->procedure_expire = 0U;
   199d0:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   199d4:	7772      	strb	r2, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   199d6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   199da:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   199de:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   199e2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   199e6:	8433      	strh	r3, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   199e8:	2315      	movs	r3, #21
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   199ea:	84b5      	strh	r5, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   199ec:	8471      	strh	r1, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   199ee:	84f2      	strh	r2, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   199f0:	77f3      	strb	r3, [r6, #31]
	if (err) {
   199f2:	f7ff ba54 	b.w	18e9e <ull_conn_rx+0xa2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   199f6:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   199fa:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   199fe:	429a      	cmp	r2, r3
   19a00:	f43f aafa 	beq.w	18ff8 <ull_conn_rx+0x1fc>
	if (!lll->role && (rej_ext_ind->error_code ==
   19a04:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   19a08:	2a00      	cmp	r2, #0
   19a0a:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   19a0e:	f2c0 85c9 	blt.w	1a5a4 <ull_conn_rx+0x17a8>
   19a12:	2a1a      	cmp	r2, #26
   19a14:	f000 864a 	beq.w	1a6ac <ull_conn_rx+0x18b0>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   19a18:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   19a1c:	f002 0107 	and.w	r1, r2, #7
   19a20:	2904      	cmp	r1, #4
   19a22:	f000 8583 	beq.w	1a52c <ull_conn_rx+0x1730>
	if (!conn->llcp_conn_param.cmd) {
   19a26:	0713      	lsls	r3, r2, #28
   19a28:	f57f aae6 	bpl.w	18ff8 <ull_conn_rx+0x1fc>
	cu->status = rej_ext_ind->error_code;
   19a2c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   19a30:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   19a32:	220f      	movs	r2, #15
   19a34:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   19a36:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   19a38:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	cu->latency = lll->latency;
   19a3c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   19a3e:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   19a40:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   19a44:	237d      	movs	r3, #125	; 0x7d
   19a46:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   19a4a:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   19a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   19a50:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   19a52:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   19a56:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   19a58:	f7ff ba21 	b.w	18e9e <ull_conn_rx+0xa2>
		if ((conn->llcp_ack != conn->llcp_req) &&
   19a5c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   19a60:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   19a64:	4293      	cmp	r3, r2
   19a66:	f43f aac7 	beq.w	18ff8 <ull_conn_rx+0x1fc>
   19a6a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   19a6e:	2b03      	cmp	r3, #3
   19a70:	f47f aac2 	bne.w	18ff8 <ull_conn_rx+0x1fc>
	conn->llcp_enc.pause_rx = 0U;
   19a74:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   19a78:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   19a7c:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
   19a80:	2000      	movs	r0, #0
	conn->llcp_enc.pause_rx = 0U;
   19a82:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   19a86:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   19a8a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   19a8e:	f886 3020 	strb.w	r3, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   19a92:	230d      	movs	r3, #13
   19a94:	77f3      	strb	r3, [r6, #31]
	if (err) {
   19a96:	f7ff ba02 	b.w	18e9e <ull_conn_rx+0xa2>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   19a9a:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   19a9e:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   19aa2:	4283      	cmp	r3, r0
   19aa4:	f43f aaa8 	beq.w	18ff8 <ull_conn_rx+0x1fc>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   19aa8:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   19aac:	2a23      	cmp	r2, #35	; 0x23
   19aae:	f47f ae2f 	bne.w	19710 <ull_conn_rx+0x914>
   19ab2:	e640      	b.n	19736 <ull_conn_rx+0x93a>
	       (conn->lll.role &&
   19ab4:	075a      	lsls	r2, r3, #29
   19ab6:	f57f addf 	bpl.w	19678 <ull_conn_rx+0x87c>
		 (conn->llcp_enc.refresh &&
   19aba:	f1ba 0f02 	cmp.w	sl, #2
   19abe:	f43f ade3 	beq.w	19688 <ull_conn_rx+0x88c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   19ac2:	f1ba 0f0b 	cmp.w	sl, #11
   19ac6:	f43f aa65 	beq.w	18f94 <ull_conn_rx+0x198>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   19aca:	f1ba 0f03 	cmp.w	sl, #3
   19ace:	f43f aee4 	beq.w	1989a <ull_conn_rx+0xa9e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   19ad2:	f1ba 0f06 	cmp.w	sl, #6
   19ad6:	f47f a9c6 	bne.w	18e66 <ull_conn_rx+0x6a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   19ada:	7f72      	ldrb	r2, [r6, #29]
   19adc:	2a01      	cmp	r2, #1
   19ade:	f47f aa5d 	bne.w	18f9c <ull_conn_rx+0x1a0>
			if ((conn->llcp_req != conn->llcp_ack) &&
   19ae2:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   19ae6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   19aea:	428a      	cmp	r2, r1
   19aec:	f000 8444 	beq.w	1a378 <ull_conn_rx+0x157c>
   19af0:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   19af4:	2a03      	cmp	r2, #3
   19af6:	f47f aa51 	bne.w	18f9c <ull_conn_rx+0x1a0>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19afa:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   19afe:	f36f 0201 	bfc	r2, #0, #2
   19b02:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   19b06:	e73c      	b.n	19982 <ull_conn_rx+0xb86>
		conn->tx_data_last = tx;
   19b08:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
   19b0c:	f7ff ba74 	b.w	18ff8 <ull_conn_rx+0x1fc>
			tx->next = conn->tx_head;
   19b10:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   19b12:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   19b16:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
   19b1a:	f7ff ba6a 	b.w	18ff2 <ull_conn_rx+0x1f6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   19b1e:	7f73      	ldrb	r3, [r6, #29]
   19b20:	2b01      	cmp	r3, #1
   19b22:	f47f aa3b 	bne.w	18f9c <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19b26:	48d7      	ldr	r0, [pc, #860]	; (19e84 <ull_conn_rx+0x1088>)
   19b28:	f7f9 fa1a 	bl	12f60 <mem_acquire>
		if (!tx) {
   19b2c:	4603      	mov	r3, r0
   19b2e:	2800      	cmp	r0, #0
   19b30:	f000 810e 	beq.w	19d50 <ull_conn_rx+0xf54>
	conn->llcp_enc.pause_rx = 1U;
   19b34:	f894 0152 	ldrb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   19b38:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19b3c:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   19b3e:	f040 0001 	orr.w	r0, r0, #1
   19b42:	f884 0152 	strb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   19b46:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   19b4a:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   19b4c:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   19b50:	7158      	strb	r0, [r3, #5]
   19b52:	e435      	b.n	193c0 <ull_conn_rx+0x5c4>
		if (!conn->lll.role) {
   19b54:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   19b58:	2a00      	cmp	r2, #0
   19b5a:	f2c0 8177 	blt.w	19e4c <ull_conn_rx+0x1050>
					conn->llcp_conn_param.ack) &&
   19b5e:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   19b62:	9200      	str	r2, [sp, #0]
   19b64:	4611      	mov	r1, r2
			if ((conn->llcp_conn_param.req !=
   19b66:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   19b6a:	428a      	cmp	r2, r1
   19b6c:	d009      	beq.n	19b82 <ull_conn_rx+0xd86>
			    ((conn->llcp_conn_param.state ==
   19b6e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
   19b72:	f012 0207 	ands.w	r2, r2, #7
   19b76:	f000 8330 	beq.w	1a1da <ull_conn_rx+0x13de>
			      LLCP_CPR_STATE_REQ) ||
   19b7a:	3a04      	subs	r2, #4
   19b7c:	2a01      	cmp	r2, #1
   19b7e:	f240 832c 	bls.w	1a1da <ull_conn_rx+0x13de>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   19b82:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   19b86:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   19b8a:	1a52      	subs	r2, r2, r1
   19b8c:	f002 0203 	and.w	r2, r2, #3
   19b90:	2a02      	cmp	r2, #2
   19b92:	f000 84ad 	beq.w	1a4f0 <ull_conn_rx+0x16f4>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   19b96:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   19b9a:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   19b9e:	4291      	cmp	r1, r2
   19ba0:	f000 8413 	beq.w	1a3ca <ull_conn_rx+0x15ce>
				nack = reject_ext_ind_send(conn, *rx,
   19ba4:	1d31      	adds	r1, r6, #4
   19ba6:	4620      	mov	r0, r4
   19ba8:	232a      	movs	r3, #42	; 0x2a
   19baa:	220f      	movs	r2, #15
   19bac:	f7ff bbe3 	b.w	19376 <ull_conn_rx+0x57a>
		if (!conn->tx_ctrl) {
   19bb0:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   19bb4:	2900      	cmp	r1, #0
   19bb6:	f47f ac23 	bne.w	19400 <ull_conn_rx+0x604>
			tx->next = conn->tx_head;
   19bba:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   19bbc:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   19bc0:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
   19bc4:	e423      	b.n	1940e <ull_conn_rx+0x612>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   19bc6:	7f73      	ldrb	r3, [r6, #29]
   19bc8:	2b01      	cmp	r3, #1
   19bca:	f43f aed4 	beq.w	19976 <ull_conn_rx+0xb7a>
   19bce:	f7ff b9e5 	b.w	18f9c <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19bd2:	48ac      	ldr	r0, [pc, #688]	; (19e84 <ull_conn_rx+0x1088>)
   19bd4:	f7f9 f9c4 	bl	12f60 <mem_acquire>
		if (!tx) {
   19bd8:	4601      	mov	r1, r0
   19bda:	2800      	cmp	r0, #0
   19bdc:	f000 80b8 	beq.w	19d50 <ull_conn_rx+0xf54>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   19be0:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
   19be4:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   19be8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   19bec:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   19bee:	4290      	cmp	r0, r2
	eff_tx_octets = conn->lll.max_tx_octets;
   19bf0:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   19bf4:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   19bf8:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   19bfc:	9000      	str	r0, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   19bfe:	9302      	str	r3, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   19c00:	f040 854c 	bne.w	1a69c <ull_conn_rx+0x18a0>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   19c04:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   19c06:	2a1a      	cmp	r2, #26
   19c08:	f240 82db 	bls.w	1a1c2 <ull_conn_rx+0x13c6>
			eff_tx_octets = MIN(max_rx_octets,
   19c0c:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
   19c10:	4282      	cmp	r2, r0
   19c12:	bf28      	it	cs
   19c14:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   19c16:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
	if (!conn->common.fex_valid ||
   19c1a:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
			eff_rx_octets = MIN(max_tx_octets,
   19c1e:	9b01      	ldr	r3, [sp, #4]
   19c20:	f1bc 0f1b 	cmp.w	ip, #27
   19c24:	bf34      	ite	cc
   19c26:	469e      	movcc	lr, r3
   19c28:	f04f 0e1b 	movcs.w	lr, #27
	if (!conn->common.fex_valid ||
   19c2c:	07c0      	lsls	r0, r0, #31
   19c2e:	f140 82c4 	bpl.w	1a1ba <ull_conn_rx+0x13be>
	feature_coded_phy = (conn->llcp_feature.features_conn &
   19c32:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
   19c36:	0503      	lsls	r3, r0, #20
   19c38:	f140 83ac 	bpl.w	1a394 <ull_conn_rx+0x1598>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   19c3c:	f8b4 00d8 	ldrh.w	r0, [r4, #216]	; 0xd8
   19c40:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
   19c44:	bf28      	it	cs
   19c46:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   19c4a:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   19c4e:	bf38      	it	cc
   19c50:	f44f 70a4 	movcc.w	r0, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   19c54:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
		lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   19c58:	f8b6 b022 	ldrh.w	fp, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   19c5c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
   19c5e:	9303      	str	r3, [sp, #12]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   19c60:	f5bb 7fa4 	cmp.w	fp, #328	; 0x148
   19c64:	f0c0 82a7 	bcc.w	1a1b6 <ull_conn_rx+0x13ba>
			eff_tx_time = MAX(eff_tx_time,
   19c68:	f894 a064 	ldrb.w	sl, [r4, #100]	; 0x64
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   19c6c:	4583      	cmp	fp, r0
   19c6e:	bf28      	it	cs
   19c70:	4683      	movcs	fp, r0
			eff_tx_time = MAX(eff_tx_time,
   19c72:	f01a 0f04 	tst.w	sl, #4
   19c76:	f00a 0007 	and.w	r0, sl, #7
   19c7a:	f040 837a 	bne.w	1a372 <ull_conn_rx+0x1576>
   19c7e:	f100 0a28 	add.w	sl, r0, #40	; 0x28
   19c82:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   19c86:	1040      	asrs	r0, r0, #1
   19c88:	fa2a f000 	lsr.w	r0, sl, r0
   19c8c:	4558      	cmp	r0, fp
   19c8e:	bf38      	it	cc
   19c90:	4658      	movcc	r0, fp
   19c92:	b280      	uxth	r0, r0
		if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   19c94:	9b03      	ldr	r3, [sp, #12]
   19c96:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   19c9a:	f0c0 828a 	bcc.w	1a1b2 <ull_conn_rx+0x13b6>
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   19c9e:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
			eff_rx_time = MAX(eff_rx_time,
   19ca2:	f894 a065 	ldrb.w	sl, [r4, #101]	; 0x65
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   19ca6:	bf38      	it	cc
   19ca8:	f44f 7ca4 	movcc.w	ip, #328	; 0x148
   19cac:	4563      	cmp	r3, ip
   19cae:	bf28      	it	cs
   19cb0:	4663      	movcs	r3, ip
			eff_rx_time = MAX(eff_rx_time,
   19cb2:	f01a 0f04 	tst.w	sl, #4
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   19cb6:	469b      	mov	fp, r3
			eff_rx_time = MAX(eff_rx_time,
   19cb8:	f00a 0c07 	and.w	ip, sl, #7
   19cbc:	f040 832f 	bne.w	1a31e <ull_conn_rx+0x1522>
   19cc0:	f10c 0a28 	add.w	sl, ip, #40	; 0x28
   19cc4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   19cc8:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   19ccc:	fa2a fc0c 	lsr.w	ip, sl, ip
   19cd0:	45dc      	cmp	ip, fp
   19cd2:	bf38      	it	cc
   19cd4:	46dc      	movcc	ip, fp
   19cd6:	fa1f fc8c 	uxth.w	ip, ip
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   19cda:	9b01      	ldr	r3, [sp, #4]
   19cdc:	459e      	cmp	lr, r3
   19cde:	f000 82d3 	beq.w	1a288 <ull_conn_rx+0x148c>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   19ce2:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   19ce4:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   19ce8:	3b01      	subs	r3, #1
   19cea:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
   19cee:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.state =
   19cf2:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
   19cf6:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
   19cfa:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
			if (tx) {
   19cfe:	2900      	cmp	r1, #0
   19d00:	f000 8351 	beq.w	1a3a6 <ull_conn_rx+0x15aa>
				conn->llcp_length.state =
   19d04:	2605      	movs	r6, #5
   19d06:	f366 0302 	bfi	r3, r6, #0, #3
   19d0a:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			link->mem = conn->llcp_rx;
   19d0e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   19d12:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   19d14:	682b      	ldr	r3, [r5, #0]
   19d16:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   19d18:	682b      	ldr	r3, [r5, #0]
   19d1a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			*rx = NULL;
   19d1e:	2300      	movs	r3, #0
   19d20:	602b      	str	r3, [r5, #0]
	if (tx) {
   19d22:	2900      	cmp	r1, #0
   19d24:	f43f a8ba 	beq.w	18e9c <ull_conn_rx+0xa0>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19d28:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   19d2a:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19d2c:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   19d30:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   19d32:	2509      	movs	r5, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   19d34:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   19d36:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   19d3a:	4620      	mov	r0, r4
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   19d3c:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19d40:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   19d42:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   19d44:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   19d46:	f7fe fbf1 	bl	1852c <ctrl_tx_sec_enqueue>
	return 0;
   19d4a:	2000      	movs	r0, #0
}
   19d4c:	f7ff b8a7 	b.w	18e9e <ull_conn_rx+0xa2>
			return -ENOBUFS;
   19d50:	f06f 0036 	mvn.w	r0, #54	; 0x36
   19d54:	f7ff b8a3 	b.w	18e9e <ull_conn_rx+0xa2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19d58:	484a      	ldr	r0, [pc, #296]	; (19e84 <ull_conn_rx+0x1088>)
   19d5a:	f7f9 f901 	bl	12f60 <mem_acquire>
	if (!tx) {
   19d5e:	4602      	mov	r2, r0
   19d60:	2800      	cmp	r0, #0
   19d62:	d0f5      	beq.n	19d50 <ull_conn_rx+0xf54>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19d64:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   19d68:	f894 11a9 	ldrb.w	r1, [r4, #425]	; 0x1a9
   19d6c:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19d70:	2502      	movs	r5, #2
   19d72:	f365 0301 	bfi	r3, r5, #0, #2
	if (conn->llcp_phy.ack ==
   19d76:	4288      	cmp	r0, r1
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19d78:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   19d7c:	d118      	bne.n	19db0 <ull_conn_rx+0xfb4>
		conn->llcp_phy.tx =
   19d7e:	f8b4 31aa 	ldrh.w	r3, [r4, #426]	; 0x1aa
			conn->phy_pref_rx;
   19d82:	f894 51ac 	ldrb.w	r5, [r4, #428]	; 0x1ac
		conn->llcp_phy.tx =
   19d86:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   19d8a:	f005 0307 	and.w	r3, r5, #7
   19d8e:	009b      	lsls	r3, r3, #2
   19d90:	f3c5 1502 	ubfx	r5, r5, #4, #3
   19d94:	f021 0104 	bic.w	r1, r1, #4
   19d98:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
   19d9c:	430b      	orrs	r3, r1
		conn->llcp_phy.ack--;
   19d9e:	3801      	subs	r0, #1
		conn->procedure_expire =
   19da0:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
		conn->llcp_phy.ack--;
   19da4:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->llcp_phy.tx =
   19da8:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
		conn->procedure_expire =
   19dac:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
	conn->llcp_phy.rx &= p->tx_phys;
   19db0:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
   19db4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   19db8:	f896 0020 	ldrb.w	r0, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   19dbc:	f3c1 0582 	ubfx	r5, r1, #2, #3
   19dc0:	402b      	ands	r3, r5
	conn->llcp_phy.rx &= p->tx_phys;
   19dc2:	ea00 1051 	and.w	r0, r0, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   19dc6:	009b      	lsls	r3, r3, #2
   19dc8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   19dcc:	f001 0103 	and.w	r1, r1, #3
   19dd0:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   19dd2:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   19dd4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   19dd8:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   19dda:	f894 51ac 	ldrb.w	r5, [r4, #428]	; 0x1ac
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19dde:	7911      	ldrb	r1, [r2, #4]
	    conn->tx_head &&
   19de0:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   19de4:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   19de6:	f3c5 0502 	ubfx	r5, r5, #0, #3
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   19dea:	f3c0 1002 	ubfx	r0, r0, #4, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19dee:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   19df2:	7215      	strb	r5, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   19df4:	2517      	movs	r5, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   19df6:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19df8:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   19dfa:	71d5      	strb	r5, [r2, #7]
	if (
   19dfc:	2b00      	cmp	r3, #0
   19dfe:	f000 81ba 	beq.w	1a176 <ull_conn_rx+0x137a>
	    !conn->llcp_enc.pause_tx &&
   19e02:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
   19e06:	0788      	lsls	r0, r1, #30
   19e08:	f100 81b5 	bmi.w	1a176 <ull_conn_rx+0x137a>
	    !conn->llcp_phy.pause_tx &&
   19e0c:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   19e10:	07c9      	lsls	r1, r1, #31
   19e12:	f100 81b0 	bmi.w	1a176 <ull_conn_rx+0x137a>
		if (conn->tx_head == conn->tx_data) {
   19e16:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   19e1a:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   19e1c:	bf04      	itt	eq
   19e1e:	6819      	ldreq	r1, [r3, #0]
   19e20:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   19e24:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   19e28:	2900      	cmp	r1, #0
   19e2a:	f000 83e9 	beq.w	1a600 <ull_conn_rx+0x1804>
	tx->next = conn->tx_ctrl_last->next;
   19e2e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   19e32:	6819      	ldr	r1, [r3, #0]
   19e34:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   19e36:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   19e38:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
	if (!tx->next) {
   19e3c:	6813      	ldr	r3, [r2, #0]
   19e3e:	2b00      	cmp	r3, #0
   19e40:	f47f a8da 	bne.w	18ff8 <ull_conn_rx+0x1fc>
		conn->tx_data_last = tx;
   19e44:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19e48:	f7ff b8d6 	b.w	18ff8 <ull_conn_rx+0x1fc>
			    conn->llcp_conn_param.ack) ||
   19e4c:	f894 1171 	ldrb.w	r1, [r4, #369]	; 0x171
		} else if ((conn->llcp_conn_param.req ==
   19e50:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   19e54:	428b      	cmp	r3, r1
   19e56:	f000 808e 	beq.w	19f76 <ull_conn_rx+0x117a>
			    conn->llcp_conn_param.ack) ||
   19e5a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   19e5e:	0798      	lsls	r0, r3, #30
   19e60:	f000 8089 	beq.w	19f76 <ull_conn_rx+0x117a>
			LL_ASSERT(0);
   19e64:	4a08      	ldr	r2, [pc, #32]	; (19e88 <ull_conn_rx+0x108c>)
   19e66:	4909      	ldr	r1, [pc, #36]	; (19e8c <ull_conn_rx+0x1090>)
   19e68:	4809      	ldr	r0, [pc, #36]	; (19e90 <ull_conn_rx+0x1094>)
   19e6a:	f241 63df 	movw	r3, #5855	; 0x16df
   19e6e:	f00a fb21 	bl	244b4 <printk>
   19e72:	4040      	eors	r0, r0
   19e74:	f380 8811 	msr	BASEPRI, r0
   19e78:	f04f 0003 	mov.w	r0, #3
   19e7c:	df02      	svc	2
	int nack = 0;
   19e7e:	2000      	movs	r0, #0
   19e80:	f7ff b80d 	b.w	18e9e <ull_conn_rx+0xa2>
   19e84:	200038c4 	.word	0x200038c4
   19e88:	0002ebd8 	.word	0x0002ebd8
   19e8c:	0002e86c 	.word	0x0002e86c
   19e90:	0002e80c 	.word	0x0002e80c
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19e94:	48d4      	ldr	r0, [pc, #848]	; (1a1e8 <ull_conn_rx+0x13ec>)
   19e96:	f7f9 f863 	bl	12f60 <mem_acquire>
		if (!tx) {
   19e9a:	4601      	mov	r1, r0
   19e9c:	2800      	cmp	r0, #0
   19e9e:	f43f af57 	beq.w	19d50 <ull_conn_rx+0xf54>
		conn->llcp_version.tx = 1U;
   19ea2:	f894 2126 	ldrb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19ea6:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   19ea8:	f042 0201 	orr.w	r2, r2, #1
   19eac:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19eb0:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   19eb4:	220c      	movs	r2, #12
		pdu_tx->len =
   19eb6:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19eb8:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   19eba:	250b      	movs	r5, #11
		v->sub_version_number =
   19ebc:	f04f 33ff 	mov.w	r3, #4294967295
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19ec0:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   19ec4:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19ec6:	2205      	movs	r2, #5
   19ec8:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   19eca:	72cb      	strb	r3, [r1, #11]
   19ecc:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   19ece:	720d      	strb	r5, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   19ed0:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   19ed2:	4620      	mov	r0, r4
   19ed4:	f7fe fb2a 	bl	1852c <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19ed8:	2303      	movs	r3, #3
   19eda:	7133      	strb	r3, [r6, #4]
   19edc:	e453      	b.n	19786 <ull_conn_rx+0x98a>
			conn->llcp_conn_param.disabled = 1U;
   19ede:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   19ee2:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   19ee6:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   19eea:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   19eec:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   19ef0:	f2c0 821b 	blt.w	1a32a <ull_conn_rx+0x152e>
				LL_ASSERT(conn->llcp_cu.req ==
   19ef4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   19ef8:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   19efc:	4293      	cmp	r3, r2
   19efe:	d00e      	beq.n	19f1e <ull_conn_rx+0x1122>
   19f00:	4aba      	ldr	r2, [pc, #744]	; (1a1ec <ull_conn_rx+0x13f0>)
   19f02:	49bb      	ldr	r1, [pc, #748]	; (1a1f0 <ull_conn_rx+0x13f4>)
   19f04:	48bb      	ldr	r0, [pc, #748]	; (1a1f4 <ull_conn_rx+0x13f8>)
   19f06:	f241 7363 	movw	r3, #5987	; 0x1763
   19f0a:	f00a fad3 	bl	244b4 <printk>
   19f0e:	4040      	eors	r0, r0
   19f10:	f380 8811 	msr	BASEPRI, r0
   19f14:	f04f 0003 	mov.w	r0, #3
   19f18:	df02      	svc	2
   19f1a:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
				conn->llcp_conn_param.state =
   19f1e:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.interval =
   19f22:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   19f26:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
				conn->llcp_conn_param.state =
   19f2a:	2305      	movs	r3, #5
   19f2c:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19f30:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
				conn->llcp_cu.ack--;
   19f34:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   19f36:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
   19f3a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.win_size = 1U;
   19f3e:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19f40:	0093      	lsls	r3, r2, #2
				conn->llcp_cu.win_size = 1U;
   19f42:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19f46:	f021 0207 	bic.w	r2, r1, #7
   19f4a:	4333      	orrs	r3, r6
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19f4c:	6829      	ldr	r1, [r5, #0]
				conn->llcp_cu.latency =
   19f4e:	f8b4 5178 	ldrh.w	r5, [r4, #376]	; 0x178
				conn->llcp_conn_param.state =
   19f52:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   19f56:	4313      	orrs	r3, r2
   19f58:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
				conn->llcp_cu.timeout =
   19f5c:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
				conn->llcp_cu.latency =
   19f60:	f8a4 510a 	strh.w	r5, [r4, #266]	; 0x10a
				conn->llcp_cu.win_offset_us = 0U;
   19f64:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19f66:	2303      	movs	r3, #3
				conn->llcp_cu.win_offset_us = 0U;
   19f68:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   19f6c:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   19f70:	710b      	strb	r3, [r1, #4]
				break;
   19f72:	f7fe bf94 	b.w	18e9e <ull_conn_rx+0xa2>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   19f76:	f8b6 a020 	ldrh.w	sl, [r6, #32]
   19f7a:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < 6) ||
   19f7e:	2b05      	cmp	r3, #5
   19f80:	d97f      	bls.n	1a082 <ull_conn_rx+0x1286>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   19f82:	8c72      	ldrh	r2, [r6, #34]	; 0x22
   19f84:	f8ad 2000 	strh.w	r2, [sp]
   19f88:	b292      	uxth	r2, r2
			if ((interval_min < 6) ||
   19f8a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   19f8e:	d878      	bhi.n	1a082 <ull_conn_rx+0x1286>
			    (interval_max > 3200) ||
   19f90:	4293      	cmp	r3, r2
   19f92:	d876      	bhi.n	1a082 <ull_conn_rx+0x1286>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   19f94:	f8b6 8024 	ldrh.w	r8, [r6, #36]	; 0x24
   19f98:	fa1f f088 	uxth.w	r0, r8
			    (interval_min > interval_max) ||
   19f9c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   19fa0:	d26f      	bcs.n	1a082 <ull_conn_rx+0x1286>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   19fa2:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
   19fa6:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   19faa:	f1a3 0c0a 	sub.w	ip, r3, #10
   19fae:	fa1f fc8c 	uxth.w	ip, ip
   19fb2:	f640 4b76 	movw	fp, #3190	; 0xc76
   19fb6:	45dc      	cmp	ip, fp
   19fb8:	d863      	bhi.n	1a082 <ull_conn_rx+0x1286>
			     ((latency + 1) * interval_max)) ||
   19fba:	fb00 2c02 	mla	ip, r0, r2, r2
			    (timeout < 10) || (timeout > 3200) ||
   19fbe:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   19fc2:	d25e      	bcs.n	1a082 <ull_conn_rx+0x1286>
			     ((latency + 1) * interval_max)) ||
   19fc4:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   19fc8:	455a      	cmp	r2, fp
   19fca:	d35a      	bcc.n	1a082 <ull_conn_rx+0x1286>
			conn->llcp_conn_param.interval_min = interval_min;
   19fcc:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   19fd0:	f8bd a000 	ldrh.w	sl, [sp]
			conn->llcp_conn_param.timeout =	timeout;
   19fd4:	f8a4 e17a 	strh.w	lr, [r4, #378]	; 0x17a
			conn->llcp_conn_param.interval_max = interval_max;
   19fd8:	f8a4 a176 	strh.w	sl, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   19fdc:	f8a4 8178 	strh.w	r8, [r4, #376]	; 0x178
			conn->llcp_conn_param.preferred_periodicity =
   19fe0:	f884 b17c 	strb.w	fp, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   19fe4:	f896 802a 	ldrb.w	r8, [r6, #42]	; 0x2a
   19fe8:	f896 c029 	ldrb.w	ip, [r6, #41]	; 0x29
			     lll->interval) ||
   19fec:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   19ff0:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   19ff4:	f8a4 c17e 	strh.w	ip, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   19ff8:	f896 802c 	ldrb.w	r8, [r6, #44]	; 0x2c
   19ffc:	f896 c02b 	ldrb.w	ip, [r6, #43]	; 0x2b
   1a000:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset0 =
   1a004:	f8a4 c180 	strh.w	ip, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   1a008:	f896 802e 	ldrb.w	r8, [r6, #46]	; 0x2e
   1a00c:	f896 c02d 	ldrb.w	ip, [r6, #45]	; 0x2d
   1a010:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset1 =
   1a014:	f8a4 c182 	strh.w	ip, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   1a018:	f896 8030 	ldrb.w	r8, [r6, #48]	; 0x30
   1a01c:	f896 c02f 	ldrb.w	ip, [r6, #47]	; 0x2f
   1a020:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset2 =
   1a024:	f8a4 c184 	strh.w	ip, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   1a028:	f896 8032 	ldrb.w	r8, [r6, #50]	; 0x32
   1a02c:	f896 c031 	ldrb.w	ip, [r6, #49]	; 0x31
   1a030:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset3 =
   1a034:	f8a4 c186 	strh.w	ip, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   1a038:	f896 c033 	ldrb.w	ip, [r6, #51]	; 0x33
   1a03c:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
   1a040:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset4 =
   1a044:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   1a048:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
   1a04c:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   1a050:	4572      	cmp	r2, lr
				sys_le16_to_cpu(cpr->offset5);
   1a052:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   1a056:	f8a4 618a 	strh.w	r6, [r4, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
   1a05a:	f000 82d7 	beq.w	1a60c <ull_conn_rx+0x1810>
				conn->llcp_conn_param.state =
   1a05e:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   1a062:	2203      	movs	r2, #3
   1a064:	f362 0302 	bfi	r3, r2, #0, #3
   1a068:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack--;
   1a06c:	3901      	subs	r1, #1
   1a06e:	f884 1171 	strb.w	r1, [r4, #369]	; 0x171
			if (!conn_upd_curr) {
   1a072:	f1b9 0f00 	cmp.w	r9, #0
   1a076:	f47e af11 	bne.w	18e9c <ull_conn_rx+0xa0>
				conn_upd_curr = conn;
   1a07a:	603c      	str	r4, [r7, #0]
	int nack = 0;
   1a07c:	4648      	mov	r0, r9
   1a07e:	f7fe bf0e 	b.w	18e9e <ull_conn_rx+0xa2>
				nack = reject_ext_ind_send(conn, *rx,
   1a082:	1d31      	adds	r1, r6, #4
   1a084:	4620      	mov	r0, r4
   1a086:	231e      	movs	r3, #30
   1a088:	220f      	movs	r2, #15
   1a08a:	f7ff b974 	b.w	19376 <ull_conn_rx+0x57a>
				      0x03) == 0x02) &&
   1a08e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1a092:	2b03      	cmp	r3, #3
   1a094:	f47f a96b 	bne.w	1936e <ull_conn_rx+0x572>
   1a098:	f7ff b962 	b.w	19360 <ull_conn_rx+0x564>
	instant = sys_le16_to_cpu(ind->instant);
   1a09c:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1a09e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   1a0a0:	1a82      	subs	r2, r0, r2
   1a0a2:	0412      	lsls	r2, r2, #16
   1a0a4:	d478      	bmi.n	1a198 <ull_conn_rx+0x139c>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1a0a6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1a0aa:	f894 c0e9 	ldrb.w	ip, [r4, #233]	; 0xe9
   1a0ae:	eba2 020c 	sub.w	r2, r2, ip
   1a0b2:	f002 0203 	and.w	r2, r2, #3
   1a0b6:	2a02      	cmp	r2, #2
   1a0b8:	f000 80e2 	beq.w	1a280 <ull_conn_rx+0x1484>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1a0bc:	f894 c1a8 	ldrb.w	ip, [r4, #424]	; 0x1a8
   1a0c0:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   1a0c4:	4562      	cmp	r2, ip
   1a0c6:	d019      	beq.n	1a0fc <ull_conn_rx+0x1300>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1a0c8:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1a0cc:	f002 0203 	and.w	r2, r2, #3
   1a0d0:	2a02      	cmp	r2, #2
   1a0d2:	d113      	bne.n	1a0fc <ull_conn_rx+0x1300>
		conn->llcp_phy.pause_tx = 0U;
   1a0d4:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1a0d8:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1a0dc:	f884 c1a9 	strb.w	ip, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   1a0e0:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1a0e4:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   1a0e8:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   1a0ec:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   1a0f0:	f884 21ab 	strb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1a0f4:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
		conn->procedure_expire = 0U;
   1a0f8:	f8a4 c0cc 	strh.w	ip, [r4, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   1a0fc:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   1a100:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   1a104:	009b      	lsls	r3, r3, #2
   1a106:	f003 031c 	and.w	r3, r3, #28
   1a10a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1a10e:	f002 0202 	and.w	r2, r2, #2
   1a112:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   1a114:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
   1a118:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
   1a11c:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   1a11e:	682b      	ldr	r3, [r5, #0]
   1a120:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1a122:	682b      	ldr	r3, [r5, #0]
   1a124:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   1a128:	2300      	movs	r3, #0
   1a12a:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   1a12c:	f7fc ff8c 	bl	17048 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   1a130:	4605      	mov	r5, r0
   1a132:	2800      	cmp	r0, #0
   1a134:	f000 823f 	beq.w	1a5b6 <ull_conn_rx+0x17ba>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   1a138:	682b      	ldr	r3, [r5, #0]
   1a13a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   1a13e:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   1a140:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   1a144:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   1a148:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
	conn->llcp_ack -= 2U;
   1a14c:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   1a14e:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   1a150:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   1a154:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   1a158:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   1a15c:	f43e ae9e 	beq.w	18e9c <ull_conn_rx+0xa0>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1a160:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   1a164:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1a168:	f363 1206 	bfi	r2, r3, #4, #3
   1a16c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	int nack = 0;
   1a170:	2000      	movs	r0, #0
   1a172:	f7fe be94 	b.w	18e9e <ull_conn_rx+0xa2>
		if (!conn->tx_ctrl) {
   1a176:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   1a17a:	2900      	cmp	r1, #0
   1a17c:	f47f ae57 	bne.w	19e2e <ull_conn_rx+0x1032>
			tx->next = conn->tx_head;
   1a180:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1a182:	e9c4 226c 	strd	r2, r2, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   1a186:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
   1a18a:	e657      	b.n	19e3c <ull_conn_rx+0x1040>
				nack = reject_ext_ind_send(conn, *rx,
   1a18c:	1d31      	adds	r1, r6, #4
   1a18e:	4620      	mov	r0, r4
   1a190:	231e      	movs	r3, #30
   1a192:	2210      	movs	r2, #16
   1a194:	f7ff b8ef 	b.w	19376 <ull_conn_rx+0x57a>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a198:	2303      	movs	r3, #3
   1a19a:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   1a19c:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   1a19e:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	int nack = 0;
   1a1a2:	2000      	movs	r0, #0
   1a1a4:	f7fe be7b 	b.w	18e9e <ull_conn_rx+0xa2>
				nack = reject_ext_ind_send(conn, *rx,
   1a1a8:	1d31      	adds	r1, r6, #4
   1a1aa:	4620      	mov	r0, r4
   1a1ac:	2323      	movs	r3, #35	; 0x23
   1a1ae:	f7ff b8e1 	b.w	19374 <ull_conn_rx+0x578>
   1a1b2:	46c4      	mov	ip, r8
   1a1b4:	e591      	b.n	19cda <ull_conn_rx+0xede>
   1a1b6:	4648      	mov	r0, r9
   1a1b8:	e56c      	b.n	19c94 <ull_conn_rx+0xe98>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   1a1ba:	f44f 70a4 	mov.w	r0, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   1a1be:	4684      	mov	ip, r0
   1a1c0:	e54a      	b.n	19c58 <ull_conn_rx+0xe5c>
   1a1c2:	9a02      	ldr	r2, [sp, #8]
   1a1c4:	e527      	b.n	19c16 <ull_conn_rx+0xe1a>
			conn->llcp_length.disabled = 1U;
   1a1c6:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   1a1ca:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.disabled = 1U;
   1a1ce:	f042 0308 	orr.w	r3, r2, #8
   1a1d2:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   1a1d6:	f7fe bfef 	b.w	191b8 <ull_conn_rx+0x3bc>
				nack = reject_ext_ind_send(conn, *rx,
   1a1da:	1d31      	adds	r1, r6, #4
   1a1dc:	4620      	mov	r0, r4
   1a1de:	2323      	movs	r3, #35	; 0x23
   1a1e0:	220f      	movs	r2, #15
   1a1e2:	f7ff b8c8 	b.w	19376 <ull_conn_rx+0x57a>
   1a1e6:	bf00      	nop
   1a1e8:	200038c4 	.word	0x200038c4
   1a1ec:	0002ebd8 	.word	0x0002ebd8
   1a1f0:	0002ecb4 	.word	0x0002ecb4
   1a1f4:	0002e80c 	.word	0x0002e80c
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1a1f8:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   1a1fc:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1a200:	429a      	cmp	r2, r3
   1a202:	f43f abda 	beq.w	199ba <ull_conn_rx+0xbbe>
		rej_ext_ind->error_code = rej_ind->error_code;
   1a206:	f896 3020 	ldrb.w	r3, [r6, #32]
   1a20a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   1a20e:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   1a212:	2a00      	cmp	r2, #0
   1a214:	f2c0 81dd 	blt.w	1a5d2 <ull_conn_rx+0x17d6>
   1a218:	2b1a      	cmp	r3, #26
   1a21a:	f000 8247 	beq.w	1a6ac <ull_conn_rx+0x18b0>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1a21e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   1a222:	f002 0307 	and.w	r3, r2, #7
   1a226:	2b04      	cmp	r3, #4
   1a228:	f47f abfd 	bne.w	19a26 <ull_conn_rx+0xc2a>
		LL_ASSERT(conn_upd_curr == conn);
   1a22c:	4fd9      	ldr	r7, [pc, #868]	; (1a594 <ull_conn_rx+0x1798>)
   1a22e:	683b      	ldr	r3, [r7, #0]
   1a230:	429c      	cmp	r4, r3
   1a232:	d00e      	beq.n	1a252 <ull_conn_rx+0x1456>
   1a234:	4ad8      	ldr	r2, [pc, #864]	; (1a598 <ull_conn_rx+0x179c>)
   1a236:	49d9      	ldr	r1, [pc, #868]	; (1a59c <ull_conn_rx+0x17a0>)
   1a238:	48d9      	ldr	r0, [pc, #868]	; (1a5a0 <ull_conn_rx+0x17a4>)
   1a23a:	f241 03ec 	movw	r3, #4332	; 0x10ec
   1a23e:	f00a f939 	bl	244b4 <printk>
   1a242:	4040      	eors	r0, r0
   1a244:	f380 8811 	msr	BASEPRI, r0
   1a248:	f04f 0003 	mov.w	r0, #3
   1a24c:	df02      	svc	2
   1a24e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1a252:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1a256:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   1a25a:	2300      	movs	r3, #0
   1a25c:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   1a25e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   1a262:	f7ff bbe0 	b.w	19a26 <ull_conn_rx+0xc2a>
	conn->llcp_enc.pause_rx = 0U;
   1a266:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   1a26a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	conn->procedure_expire = 0U;
   1a26e:	2000      	movs	r0, #0
	conn->llcp_enc.pause_rx = 0U;
   1a270:	f022 0303 	bic.w	r3, r2, #3
   1a274:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   1a278:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	if (err) {
   1a27c:	f7fe be0f 	b.w	18e9e <ull_conn_rx+0xa2>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a280:	2303      	movs	r3, #3
   1a282:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1a284:	232a      	movs	r3, #42	; 0x2a
   1a286:	e78a      	b.n	1a19e <ull_conn_rx+0x13a2>
			conn->llcp_length.ack = conn->llcp_length.req;
   1a288:	9b00      	ldr	r3, [sp, #0]
   1a28a:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1a28e:	9b02      	ldr	r3, [sp, #8]
			conn->procedure_expire = 0U;
   1a290:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1a292:	429a      	cmp	r2, r3
			conn->procedure_expire = 0U;
   1a294:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1a298:	f000 8171 	beq.w	1a57e <ull_conn_rx+0x1782>
			conn->lll.max_rx_time = eff_rx_time;
   1a29c:	f8a4 c062 	strh.w	ip, [r4, #98]	; 0x62
			if (tx) {
   1a2a0:	2900      	cmp	r1, #0
   1a2a2:	f000 8167 	beq.w	1a574 <ull_conn_rx+0x1778>
				conn->llcp_length.state =
   1a2a6:	f894 519a 	ldrb.w	r5, [r4, #410]	; 0x19a
					(conn->llcp_length.req - 1);
   1a2aa:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   1a2ac:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
				conn->llcp_length.state =
   1a2b0:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   1a2b2:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   1a2b4:	f367 0502 	bfi	r5, r7, #0, #3
				conn->llcp_length.ack =
   1a2b8:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
   1a2bc:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
   1a2c0:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
   1a2c4:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
				conn->llcp_length.state =
   1a2c8:	f884 519a 	strb.w	r5, [r4, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   1a2cc:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   1a2d0:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1a2d2:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1a2d6:	84f0      	strh	r0, [r6, #38]	; 0x26
   1a2d8:	e523      	b.n	19d22 <ull_conn_rx+0xf26>
			conn->llcp_phy.pause_tx = 0U;
   1a2da:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   1a2de:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
   1a2e2:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
   1a2e6:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   1a2ea:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   1a2ec:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   1a2f0:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
   1a2f4:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   1a2f6:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   1a2fa:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
   1a2fe:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   1a302:	d55d      	bpl.n	1a3c0 <ull_conn_rx+0x15c4>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1a304:	6829      	ldr	r1, [r5, #0]
				p->status = 0U;
   1a306:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1a308:	2013      	movs	r0, #19
   1a30a:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   1a30c:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   1a30e:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   1a310:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1a314:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1a318:	77b3      	strb	r3, [r6, #30]
   1a31a:	f7fe bf4d 	b.w	191b8 <ull_conn_rx+0x3bc>
			eff_rx_time = MAX(eff_rx_time,
   1a31e:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
   1a322:	e4d5      	b.n	19cd0 <ull_conn_rx+0xed4>
		conn_upd_curr = conn;
   1a324:	601c      	str	r4, [r3, #0]
   1a326:	f7fe befc 	b.w	19122 <ull_conn_rx+0x326>
			LL_ASSERT(conn_upd_curr == conn);
   1a32a:	4f9a      	ldr	r7, [pc, #616]	; (1a594 <ull_conn_rx+0x1798>)
   1a32c:	683a      	ldr	r2, [r7, #0]
   1a32e:	4294      	cmp	r4, r2
   1a330:	d00e      	beq.n	1a350 <ull_conn_rx+0x1554>
   1a332:	4a99      	ldr	r2, [pc, #612]	; (1a598 <ull_conn_rx+0x179c>)
   1a334:	4999      	ldr	r1, [pc, #612]	; (1a59c <ull_conn_rx+0x17a0>)
   1a336:	489a      	ldr	r0, [pc, #616]	; (1a5a0 <ull_conn_rx+0x17a4>)
   1a338:	f241 737b 	movw	r3, #6011	; 0x177b
   1a33c:	f00a f8ba 	bl	244b4 <printk>
   1a340:	4040      	eors	r0, r0
   1a342:	f380 8811 	msr	BASEPRI, r0
   1a346:	f04f 0003 	mov.w	r0, #3
   1a34a:	df02      	svc	2
   1a34c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
   1a350:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1a354:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
			if (!conn->llcp_conn_param.cmd) {
   1a358:	f012 0208 	ands.w	r2, r2, #8
	conn_upd_curr = NULL;
   1a35c:	f04f 0300 	mov.w	r3, #0
   1a360:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   1a362:	f040 80cc 	bne.w	1a4fe <ull_conn_rx+0x1702>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a366:	682b      	ldr	r3, [r5, #0]
   1a368:	2103      	movs	r1, #3
	int nack = 0;
   1a36a:	4610      	mov	r0, r2
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a36c:	7119      	strb	r1, [r3, #4]
				break;
   1a36e:	f7fe bd96 	b.w	18e9e <ull_conn_rx+0xa2>
			eff_tx_time = MAX(eff_tx_time,
   1a372:	f44f 6029 	mov.w	r0, #2704	; 0xa90
   1a376:	e489      	b.n	19c8c <ull_conn_rx+0xe90>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1a378:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
				conn->llcp_ack -= 2U;
   1a37c:	3a02      	subs	r2, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1a37e:	f36f 0101 	bfc	r1, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   1a382:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   1a384:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1a388:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
				conn->llcp_type = LLCP_ENCRYPTION;
   1a38c:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   1a390:	f7ff baf7 	b.w	19982 <ull_conn_rx+0xb86>
	    (!feature_coded_phy && !feature_phy_2m)) {
   1a394:	f410 7f80 	tst.w	r0, #256	; 0x100
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   1a398:	f44f 70a4 	mov.w	r0, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
   1a39c:	f000 812d 	beq.w	1a5fa <ull_conn_rx+0x17fe>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
   1a3a0:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
   1a3a4:	e458      	b.n	19c58 <ull_conn_rx+0xe5c>
				conn->llcp_length.state =
   1a3a6:	2604      	movs	r6, #4
   1a3a8:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   1a3ac:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   1a3b0:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
				conn->llcp_length.state =
   1a3b4:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
   1a3b8:	e4a9      	b.n	19d0e <ull_conn_rx+0xf12>
	struct node_tx *tx = NULL;
   1a3ba:	2100      	movs	r1, #0
   1a3bc:	f7fe be7b 	b.w	190b6 <ull_conn_rx+0x2ba>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a3c0:	682b      	ldr	r3, [r5, #0]
   1a3c2:	2203      	movs	r2, #3
   1a3c4:	711a      	strb	r2, [r3, #4]
   1a3c6:	f7fe bef7 	b.w	191b8 <ull_conn_rx+0x3bc>
				uint16_t interval_min =
   1a3ca:	8c32      	ldrh	r2, [r6, #32]
   1a3cc:	f8ad 2004 	strh.w	r2, [sp, #4]
   1a3d0:	b292      	uxth	r2, r2
				if ((interval_min < 6) ||
   1a3d2:	2a05      	cmp	r2, #5
   1a3d4:	f67f ae55 	bls.w	1a082 <ull_conn_rx+0x1286>
				uint16_t interval_max =
   1a3d8:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
   1a3dc:	fa1f f188 	uxth.w	r1, r8
				if ((interval_min < 6) ||
   1a3e0:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1a3e4:	f63f ae4d 	bhi.w	1a082 <ull_conn_rx+0x1286>
				    (interval_max > 3200) ||
   1a3e8:	428a      	cmp	r2, r1
   1a3ea:	f63f ae4a 	bhi.w	1a082 <ull_conn_rx+0x1286>
				uint16_t latency =
   1a3ee:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
   1a3f2:	fa1f f08e 	uxth.w	r0, lr
				    (interval_min > interval_max) ||
   1a3f6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1a3fa:	f4bf ae42 	bcs.w	1a082 <ull_conn_rx+0x1286>
				uint16_t timeout =
   1a3fe:	f8b6 b026 	ldrh.w	fp, [r6, #38]	; 0x26
   1a402:	fa1f f28b 	uxth.w	r2, fp
				    (latency > 499) ||
   1a406:	f1a2 0c0a 	sub.w	ip, r2, #10
   1a40a:	fa1f fc8c 	uxth.w	ip, ip
   1a40e:	f640 4a76 	movw	sl, #3190	; 0xc76
   1a412:	45d4      	cmp	ip, sl
   1a414:	f63f ae35 	bhi.w	1a082 <ull_conn_rx+0x1286>
				     ((latency + 1) * interval_max)) ||
   1a418:	fb00 1c01 	mla	ip, r0, r1, r1
				    (timeout > 3200) ||
   1a41c:	ebbc 0f82 	cmp.w	ip, r2, lsl #2
   1a420:	f4bf ae2f 	bcs.w	1a082 <ull_conn_rx+0x1286>
				     ((latency + 1) * interval_max)) ||
   1a424:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   1a428:	4551      	cmp	r1, sl
					cpr->preferred_periodicity;
   1a42a:	46d4      	mov	ip, sl
				     ((latency + 1) * interval_max)) ||
   1a42c:	f4ff ae29 	bcc.w	1a082 <ull_conn_rx+0x1286>
				conn->llcp_conn_param.interval_min =
   1a430:	f8bd a004 	ldrh.w	sl, [sp, #4]
				conn->llcp_conn_param.latency =	latency;
   1a434:	f8a4 e178 	strh.w	lr, [r4, #376]	; 0x178
				conn->llcp_conn_param.interval_min =
   1a438:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
   1a43c:	f8a4 8176 	strh.w	r8, [r4, #374]	; 0x176
				conn->llcp_conn_param.timeout =	timeout;
   1a440:	f8a4 b17a 	strh.w	fp, [r4, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
   1a444:	f884 c17c 	strb.w	ip, [r4, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1a448:	f896 802a 	ldrb.w	r8, [r6, #42]	; 0x2a
   1a44c:	f896 c029 	ldrb.w	ip, [r6, #41]	; 0x29
				     lll->interval) ||
   1a450:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1a454:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1a458:	f8a4 c17e 	strh.w	ip, [r4, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
   1a45c:	f896 802c 	ldrb.w	r8, [r6, #44]	; 0x2c
   1a460:	f896 c02b 	ldrb.w	ip, [r6, #43]	; 0x2b
   1a464:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   1a468:	f8a4 c180 	strh.w	ip, [r4, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
   1a46c:	f896 802e 	ldrb.w	r8, [r6, #46]	; 0x2e
   1a470:	f896 c02d 	ldrb.w	ip, [r6, #45]	; 0x2d
   1a474:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   1a478:	f8a4 c182 	strh.w	ip, [r4, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
   1a47c:	f896 8030 	ldrb.w	r8, [r6, #48]	; 0x30
   1a480:	f896 c02f 	ldrb.w	ip, [r6, #47]	; 0x2f
   1a484:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   1a488:	f8a4 c184 	strh.w	ip, [r4, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
   1a48c:	f896 8032 	ldrb.w	r8, [r6, #50]	; 0x32
   1a490:	f896 c031 	ldrb.w	ip, [r6, #49]	; 0x31
   1a494:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   1a498:	f8a4 c186 	strh.w	ip, [r4, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
   1a49c:	f896 c033 	ldrb.w	ip, [r6, #51]	; 0x33
   1a4a0:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
   1a4a4:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   1a4a8:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
   1a4ac:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
   1a4b0:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   1a4b4:	4571      	cmp	r1, lr
					sys_le16_to_cpu(cpr->offset5);
   1a4b6:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   1a4ba:	f8a4 618a 	strh.w	r6, [r4, #394]	; 0x18a
				if ((conn->llcp_conn_param.interval_max !=
   1a4be:	f000 80cc 	beq.w	1a65a <ull_conn_rx+0x185e>
					if (conn->llcp_enc.pause_tx) {
   1a4c2:	f013 0f02 	tst.w	r3, #2
						conn->llcp_conn_param.state =
   1a4c6:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
   1a4ca:	f000 80c0 	beq.w	1a64e <ull_conn_rx+0x1852>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a4ce:	682a      	ldr	r2, [r5, #0]
						conn->llcp_conn_param.state =
   1a4d0:	2102      	movs	r1, #2
   1a4d2:	f361 0302 	bfi	r3, r1, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a4d6:	2103      	movs	r1, #3
						conn->llcp_conn_param.state =
   1a4d8:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a4dc:	7111      	strb	r1, [r2, #4]
				conn->llcp_conn_param.ack--;
   1a4de:	9b00      	ldr	r3, [sp, #0]
   1a4e0:	3b01      	subs	r3, #1
   1a4e2:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
				if (!conn_upd_curr) {
   1a4e6:	f1b9 0f00 	cmp.w	r9, #0
   1a4ea:	f47e acd7 	bne.w	18e9c <ull_conn_rx+0xa0>
   1a4ee:	e5c4      	b.n	1a07a <ull_conn_rx+0x127e>
				      0x03) == 0x02) &&
   1a4f0:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   1a4f4:	2a03      	cmp	r2, #3
   1a4f6:	f47f ab55 	bne.w	19ba4 <ull_conn_rx+0xda8>
   1a4fa:	f7ff bb4c 	b.w	19b96 <ull_conn_rx+0xd9a>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1a4fe:	682a      	ldr	r2, [r5, #0]
   1a500:	210f      	movs	r1, #15
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1a502:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1a504:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1a506:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   1a508:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   1a50a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
			cu->latency = lll->latency;
   1a50e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   1a510:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   1a512:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   1a516:	237d      	movs	r3, #125	; 0x7d
   1a518:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   1a51c:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   1a51e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a522:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1a526:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1a528:	f7fe be46 	b.w	191b8 <ull_conn_rx+0x3bc>
		LL_ASSERT(conn_upd_curr == conn);
   1a52c:	4f19      	ldr	r7, [pc, #100]	; (1a594 <ull_conn_rx+0x1798>)
   1a52e:	6839      	ldr	r1, [r7, #0]
   1a530:	428c      	cmp	r4, r1
   1a532:	d010      	beq.n	1a556 <ull_conn_rx+0x175a>
   1a534:	4a18      	ldr	r2, [pc, #96]	; (1a598 <ull_conn_rx+0x179c>)
   1a536:	4919      	ldr	r1, [pc, #100]	; (1a59c <ull_conn_rx+0x17a0>)
   1a538:	4819      	ldr	r0, [pc, #100]	; (1a5a0 <ull_conn_rx+0x17a4>)
   1a53a:	f241 03ec 	movw	r3, #4332	; 0x10ec
   1a53e:	f009 ffb9 	bl	244b4 <printk>
   1a542:	4040      	eors	r0, r0
   1a544:	f380 8811 	msr	BASEPRI, r0
   1a548:	f04f 0003 	mov.w	r0, #3
   1a54c:	df02      	svc	2
   1a54e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1a552:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1a556:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   1a55a:	2300      	movs	r3, #0
   1a55c:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   1a55e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   1a562:	f7ff ba60 	b.w	19a26 <ull_conn_rx+0xc2a>
			tx->next = conn->tx_head->next;
   1a566:	6811      	ldr	r1, [r2, #0]
   1a568:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   1a56a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   1a56c:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
   1a570:	f7fe bf4d 	b.w	1940e <ull_conn_rx+0x612>
				conn->lll.max_tx_octets = eff_tx_octets;
   1a574:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   1a578:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
   1a57c:	e6a6      	b.n	1a2cc <ull_conn_rx+0x14d0>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1a57e:	4548      	cmp	r0, r9
   1a580:	f47f ae8c 	bne.w	1a29c <ull_conn_rx+0x14a0>
			    eff_rx_time == conn->lll.max_rx_time &&
   1a584:	45c4      	cmp	ip, r8
   1a586:	f47f ae89 	bne.w	1a29c <ull_conn_rx+0x14a0>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a58a:	682b      	ldr	r3, [r5, #0]
   1a58c:	2503      	movs	r5, #3
   1a58e:	711d      	strb	r5, [r3, #4]
				goto send_length_resp;
   1a590:	f7ff bbc7 	b.w	19d22 <ull_conn_rx+0xf26>
   1a594:	20003840 	.word	0x20003840
   1a598:	0002ebd8 	.word	0x0002ebd8
   1a59c:	0002ecdc 	.word	0x0002ecdc
   1a5a0:	0002e80c 	.word	0x0002e80c
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1a5a4:	2a23      	cmp	r2, #35	; 0x23
   1a5a6:	f43f aa37 	beq.w	19a18 <ull_conn_rx+0xc1c>
			conn->slave.ticks_to_offset =
   1a5aa:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
   1a5ae:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   1a5b2:	f7ff ba31 	b.w	19a18 <ull_conn_rx+0xc1c>
	LL_ASSERT(rx_dle);
   1a5b6:	4a5d      	ldr	r2, [pc, #372]	; (1a72c <ull_conn_rx+0x1930>)
   1a5b8:	495d      	ldr	r1, [pc, #372]	; (1a730 <ull_conn_rx+0x1934>)
   1a5ba:	485e      	ldr	r0, [pc, #376]	; (1a734 <ull_conn_rx+0x1938>)
   1a5bc:	f241 33a4 	movw	r3, #5028	; 0x13a4
   1a5c0:	f009 ff78 	bl	244b4 <printk>
   1a5c4:	4040      	eors	r0, r0
   1a5c6:	f380 8811 	msr	BASEPRI, r0
   1a5ca:	f04f 0003 	mov.w	r0, #3
   1a5ce:	df02      	svc	2
   1a5d0:	e5b2      	b.n	1a138 <ull_conn_rx+0x133c>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1a5d2:	2b23      	cmp	r3, #35	; 0x23
   1a5d4:	f43f ae23 	beq.w	1a21e <ull_conn_rx+0x1422>
			conn->slave.ticks_to_offset =
   1a5d8:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   1a5dc:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   1a5e0:	e61d      	b.n	1a21e <ull_conn_rx+0x1422>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1a5e2:	682b      	ldr	r3, [r5, #0]
   1a5e4:	2113      	movs	r1, #19
   1a5e6:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   1a5e8:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   1a5ea:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   1a5ec:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1a5f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1a5f4:	77b3      	strb	r3, [r6, #30]
		if (err) {
   1a5f6:	f7fe bc52 	b.w	18e9e <ull_conn_rx+0xa2>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   1a5fa:	4684      	mov	ip, r0
   1a5fc:	f7ff bb2c 	b.w	19c58 <ull_conn_rx+0xe5c>
			tx->next = conn->tx_head->next;
   1a600:	6819      	ldr	r1, [r3, #0]
   1a602:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   1a604:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1a606:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
   1a60a:	e417      	b.n	19e3c <ull_conn_rx+0x1040>
			     lll->interval) ||
   1a60c:	8e26      	ldrh	r6, [r4, #48]	; 0x30
   1a60e:	4286      	cmp	r6, r0
   1a610:	f47f ad25 	bne.w	1a05e <ull_conn_rx+0x1262>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a614:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1a618:	fb00 f202 	mul.w	r2, r0, r2
   1a61c:	f242 7010 	movw	r0, #10000	; 0x2710
   1a620:	fb00 2303 	mla	r3, r0, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1a624:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a628:	3b01      	subs	r3, #1
   1a62a:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1a62e:	b29b      	uxth	r3, r3
   1a630:	4298      	cmp	r0, r3
   1a632:	f47f ad14 	bne.w	1a05e <ull_conn_rx+0x1262>
				conn->llcp_conn_param.state =
   1a636:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   1a63a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a63e:	f043 0301 	orr.w	r3, r3, #1
   1a642:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a646:	682b      	ldr	r3, [r5, #0]
   1a648:	2203      	movs	r2, #3
   1a64a:	711a      	strb	r2, [r3, #4]
   1a64c:	e50e      	b.n	1a06c <ull_conn_rx+0x1270>
						conn->llcp_conn_param.state =
   1a64e:	2203      	movs	r2, #3
   1a650:	f362 0302 	bfi	r3, r2, #0, #3
   1a654:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
   1a658:	e741      	b.n	1a4de <ull_conn_rx+0x16e2>
				     lll->interval) ||
   1a65a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1a65c:	4281      	cmp	r1, r0
   1a65e:	f47f af30 	bne.w	1a4c2 <ull_conn_rx+0x16c6>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a662:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1a666:	fb01 f10e 	mul.w	r1, r1, lr
   1a66a:	f242 7010 	movw	r0, #10000	; 0x2710
   1a66e:	fb00 1202 	mla	r2, r0, r2, r1
				     lll->latency) ||
   1a672:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1a676:	3a01      	subs	r2, #1
   1a678:	fbb2 f2f1 	udiv	r2, r2, r1
				     lll->latency) ||
   1a67c:	b292      	uxth	r2, r2
   1a67e:	4290      	cmp	r0, r2
   1a680:	f47f af1f 	bne.w	1a4c2 <ull_conn_rx+0x16c6>
					conn->llcp_conn_param.state =
   1a684:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   1a688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a68c:	f043 0301 	orr.w	r3, r3, #1
   1a690:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
					(*rx)->hdr.type =
   1a694:	682b      	ldr	r3, [r5, #0]
   1a696:	2203      	movs	r2, #3
   1a698:	711a      	strb	r2, [r3, #4]
   1a69a:	e720      	b.n	1a4de <ull_conn_rx+0x16e2>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1a69c:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1a6a0:	f012 0f06 	tst.w	r2, #6
   1a6a4:	f43f aaae 	beq.w	19c04 <ull_conn_rx+0xe08>
   1a6a8:	f7fe bcfe 	b.w	190a8 <ull_conn_rx+0x2ac>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1a6ac:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1a6b0:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   1a6b4:	4293      	cmp	r3, r2
   1a6b6:	d00e      	beq.n	1a6d6 <ull_conn_rx+0x18da>
   1a6b8:	4a1c      	ldr	r2, [pc, #112]	; (1a72c <ull_conn_rx+0x1930>)
   1a6ba:	491f      	ldr	r1, [pc, #124]	; (1a738 <ull_conn_rx+0x193c>)
   1a6bc:	481d      	ldr	r0, [pc, #116]	; (1a734 <ull_conn_rx+0x1938>)
   1a6be:	f241 03d1 	movw	r3, #4305	; 0x10d1
   1a6c2:	f009 fef7 	bl	244b4 <printk>
   1a6c6:	4040      	eors	r0, r0
   1a6c8:	f380 8811 	msr	BASEPRI, r0
   1a6cc:	f04f 0003 	mov.w	r0, #3
   1a6d0:	df02      	svc	2
   1a6d2:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1a6d6:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1a6da:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   1a6de:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1a6e2:	2305      	movs	r3, #5
   1a6e4:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a6e8:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1a6ec:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1a6f0:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a6f4:	009b      	lsls	r3, r3, #2
   1a6f6:	f020 0007 	bic.w	r0, r0, #7
   1a6fa:	f043 0301 	orr.w	r3, r3, #1
   1a6fe:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   1a700:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   1a702:	2501      	movs	r5, #1
		conn->llcp_cu.ack--;
   1a704:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
		conn->llcp_cu.win_offset_us = 0U;
   1a708:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1a70a:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1a70e:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1a712:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
		conn->llcp_cu.win_size = 1U;
   1a716:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
   1a71a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1a71e:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1a722:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
	if (err) {
   1a726:	f7fe bc67 	b.w	18ff8 <ull_conn_rx+0x1fc>
   1a72a:	bf00      	nop
   1a72c:	0002ebd8 	.word	0x0002ebd8
   1a730:	0002ecf4 	.word	0x0002ecf4
   1a734:	0002e80c 	.word	0x0002e80c
   1a738:	0002ecb4 	.word	0x0002ecb4

0001a73c <ull_conn_tx_demux>:
{
   1a73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a740:	4f24      	ldr	r7, [pc, #144]	; (1a7d4 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a742:	4e25      	ldr	r6, [pc, #148]	; (1a7d8 <ull_conn_tx_demux+0x9c>)
   1a744:	78fa      	ldrb	r2, [r7, #3]
{
   1a746:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   1a748:	1d3d      	adds	r5, r7, #4
   1a74a:	e021      	b.n	1a790 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a74c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1a750:	4630      	mov	r0, r6
   1a752:	f7f8 fc37 	bl	12fc4 <mem_get>
	if (conn->lll.handle != handle) {
   1a756:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   1a758:	bb32      	cbnz	r2, 1a7a8 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   1a75a:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1a75e:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
			tx->next = NULL;
   1a762:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   1a764:	b369      	cbz	r1, 1a7c2 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   1a766:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   1a76a:	b102      	cbz	r2, 1a76e <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   1a76c:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1a76e:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
   1a772:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   1a774:	78bb      	ldrb	r3, [r7, #2]
   1a776:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   1a778:	429a      	cmp	r2, r3
   1a77a:	d005      	beq.n	1a788 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   1a77c:	3301      	adds	r3, #1
   1a77e:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a780:	4299      	cmp	r1, r3
   1a782:	bf08      	it	eq
   1a784:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a786:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   1a788:	3c01      	subs	r4, #1
   1a78a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1a78e:	d016      	beq.n	1a7be <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a790:	78bb      	ldrb	r3, [r7, #2]
   1a792:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   1a794:	4293      	cmp	r3, r2
   1a796:	d012      	beq.n	1a7be <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   1a798:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   1a79c:	eb15 0803 	adds.w	r8, r5, r3
   1a7a0:	d00d      	beq.n	1a7be <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a7a2:	5aea      	ldrh	r2, [r5, r3]
   1a7a4:	2a00      	cmp	r2, #0
   1a7a6:	d0d1      	beq.n	1a74c <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   1a7a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   1a7ac:	790b      	ldrb	r3, [r1, #4]
   1a7ae:	f36f 0301 	bfc	r3, #0, #2
   1a7b2:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   1a7b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1a7b8:	f7fc fc5e 	bl	17078 <ll_tx_ack_put>
   1a7bc:	e7d9      	b.n	1a772 <ull_conn_tx_demux+0x36>
}
   1a7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   1a7c2:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
   1a7c6:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
   1a7ca:	2a00      	cmp	r2, #0
   1a7cc:	d1cb      	bne.n	1a766 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   1a7ce:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			if (conn->tx_data_last) {
   1a7d2:	e7cc      	b.n	1a76e <ull_conn_tx_demux+0x32>
   1a7d4:	200008e0 	.word	0x200008e0
   1a7d8:	20003678 	.word	0x20003678

0001a7dc <conn_cleanup>:
{
   1a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   1a7e0:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
   1a7e4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
   1a7e6:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a7ea:	230e      	movs	r3, #14
{
   1a7ec:	b083      	sub	sp, #12
   1a7ee:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   1a7f0:	f8a0 2136 	strh.w	r2, [r0, #310]	; 0x136
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a7f4:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
	struct lll_conn *lll = &conn->lll;
   1a7f8:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   1a7fc:	b144      	cbz	r4, 1a810 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a7fe:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   1a800:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1a802:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1a804:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1a806:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1a808:	f7fc fbf0 	bl	16fec <ll_rx_put>
	while (rx) {
   1a80c:	2c00      	cmp	r4, #0
   1a80e:	d1f7      	bne.n	1a800 <conn_cleanup+0x24>
	while (conn->tx_head) {
   1a810:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   1a814:	b381      	cbz	r1, 1a878 <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   1a816:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1a8d0 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   1a81a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 1a8c8 <conn_cleanup+0xec>
   1a81e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1a8d4 <conn_cleanup+0xf8>
   1a822:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   1a826:	e007      	b.n	1a838 <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a828:	4629      	mov	r1, r5
   1a82a:	4620      	mov	r0, r4
   1a82c:	463a      	mov	r2, r7
   1a82e:	f7f8 fbfb 	bl	13028 <memq_enqueue>
	while (conn->tx_head) {
   1a832:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   1a836:	b1f9      	cbz	r1, 1a878 <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1a838:	4630      	mov	r0, r6
   1a83a:	f7fd fb97 	bl	17f6c <tx_ull_dequeue>
   1a83e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   1a840:	4640      	mov	r0, r8
   1a842:	f7f8 fb8d 	bl	12f60 <mem_acquire>
		LL_ASSERT(link);
   1a846:	4604      	mov	r4, r0
   1a848:	2800      	cmp	r0, #0
   1a84a:	d1ed      	bne.n	1a828 <conn_cleanup+0x4c>
   1a84c:	481c      	ldr	r0, [pc, #112]	; (1a8c0 <conn_cleanup+0xe4>)
   1a84e:	f240 7312 	movw	r3, #1810	; 0x712
   1a852:	4652      	mov	r2, sl
   1a854:	4649      	mov	r1, r9
   1a856:	f009 fe2d 	bl	244b4 <printk>
   1a85a:	4040      	eors	r0, r0
   1a85c:	f380 8811 	msr	BASEPRI, r0
   1a860:	f04f 0003 	mov.w	r0, #3
   1a864:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a866:	4629      	mov	r1, r5
   1a868:	4620      	mov	r0, r4
   1a86a:	463a      	mov	r2, r7
   1a86c:	f7f8 fbdc 	bl	13028 <memq_enqueue>
	while (conn->tx_head) {
   1a870:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   1a874:	2900      	cmp	r1, #0
   1a876:	d1df      	bne.n	1a838 <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
   1a878:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a87c:	4b11      	ldr	r3, [pc, #68]	; (1a8c4 <conn_cleanup+0xe8>)
   1a87e:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   1a882:	3205      	adds	r2, #5
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a884:	b2d2      	uxtb	r2, r2
   1a886:	2101      	movs	r1, #1
   1a888:	2000      	movs	r0, #0
   1a88a:	f7f9 ff21 	bl	146d0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a88e:	f030 0302 	bics.w	r3, r0, #2
   1a892:	d00c      	beq.n	1a8ae <conn_cleanup+0xd2>
   1a894:	4a0c      	ldr	r2, [pc, #48]	; (1a8c8 <conn_cleanup+0xec>)
   1a896:	490d      	ldr	r1, [pc, #52]	; (1a8cc <conn_cleanup+0xf0>)
   1a898:	4809      	ldr	r0, [pc, #36]	; (1a8c0 <conn_cleanup+0xe4>)
   1a89a:	f240 63d1 	movw	r3, #1745	; 0x6d1
   1a89e:	f009 fe09 	bl	244b4 <printk>
   1a8a2:	4040      	eors	r0, r0
   1a8a4:	f380 8811 	msr	BASEPRI, r0
   1a8a8:	f04f 0003 	mov.w	r0, #3
   1a8ac:	df02      	svc	2
	lll->handle = 0xFFFF;
   1a8ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1a8b2:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   1a8b4:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   1a8b6:	b003      	add	sp, #12
   1a8b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1a8bc:	f7ff bf3e 	b.w	1a73c <ull_conn_tx_demux>
   1a8c0:	0002e80c 	.word	0x0002e80c
   1a8c4:	00018271 	.word	0x00018271
   1a8c8:	0002ebd8 	.word	0x0002ebd8
   1a8cc:	0002ed10 	.word	0x0002ed10
   1a8d0:	20003948 	.word	0x20003948
   1a8d4:	0002ec30 	.word	0x0002ec30

0001a8d8 <ull_conn_done>:
{
   1a8d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   1a8dc:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   1a8de:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   1a8e0:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   1a8e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a8e6:	429a      	cmp	r2, r3
{
   1a8e8:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   1a8ea:	d05f      	beq.n	1a9ac <ull_conn_done+0xd4>
	switch (done->extra.mic_state) {
   1a8ec:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1a8f0:	2b01      	cmp	r3, #1
   1a8f2:	4606      	mov	r6, r0
   1a8f4:	f000 80e2 	beq.w	1aabc <ull_conn_done+0x1e4>
   1a8f8:	2b02      	cmp	r3, #2
   1a8fa:	d050      	beq.n	1a99e <ull_conn_done+0xc6>
   1a8fc:	2b00      	cmp	r3, #0
   1a8fe:	f000 80c3 	beq.w	1aa88 <ull_conn_done+0x1b0>
	reason_peer = conn->llcp_terminate.reason_peer;
   1a902:	f894 712f 	ldrb.w	r7, [r4, #303]	; 0x12f
	if (reason_peer && (
   1a906:	2f00      	cmp	r7, #0
   1a908:	d14c      	bne.n	1a9a4 <ull_conn_done+0xcc>
	latency_event = lll->latency_event;
   1a90a:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   1a90e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   1a910:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1a912:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   1a916:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   1a918:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   1a91c:	2b00      	cmp	r3, #0
   1a91e:	d048      	beq.n	1a9b2 <ull_conn_done+0xda>
		} else if (lll->role) {
   1a920:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1a924:	2b00      	cmp	r3, #0
   1a926:	f2c0 810f 	blt.w	1ab48 <ull_conn_done+0x270>
	if (done->extra.crc_valid) {
   1a92a:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   1a92e:	2200      	movs	r2, #0
   1a930:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   1a934:	2b00      	cmp	r3, #0
   1a936:	f000 80c7 	beq.w	1aac8 <ull_conn_done+0x1f0>
		conn->supervision_expire = 0U;
   1a93a:	2300      	movs	r3, #0
   1a93c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   1a940:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   1a944:	b133      	cbz	r3, 1a954 <ull_conn_done+0x7c>
		if (conn->procedure_expire > elapsed_event) {
   1a946:	4543      	cmp	r3, r8
   1a948:	f240 8114 	bls.w	1ab74 <ull_conn_done+0x29c>
			conn->procedure_expire -= elapsed_event;
   1a94c:	eba3 0308 	sub.w	r3, r3, r8
   1a950:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   1a954:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   1a958:	b133      	cbz	r3, 1a968 <ull_conn_done+0x90>
		if (conn->apto_expire > elapsed_event) {
   1a95a:	4543      	cmp	r3, r8
   1a95c:	f240 80e1 	bls.w	1ab22 <ull_conn_done+0x24a>
			conn->apto_expire -= elapsed_event;
   1a960:	eba3 0308 	sub.w	r3, r3, r8
   1a964:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   1a968:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   1a96c:	2b00      	cmp	r3, #0
   1a96e:	d04a      	beq.n	1aa06 <ull_conn_done+0x12e>
		if (conn->appto_expire > elapsed_event) {
   1a970:	4543      	cmp	r3, r8
   1a972:	f200 80b6 	bhi.w	1aae2 <ull_conn_done+0x20a>
			if ((conn->procedure_expire == 0U) &&
   1a976:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   1a97a:	2200      	movs	r2, #0
   1a97c:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   1a980:	2b00      	cmp	r3, #0
   1a982:	d140      	bne.n	1aa06 <ull_conn_done+0x12e>
			    (conn->llcp_req == conn->llcp_ack)) {
   1a984:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1a988:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			if ((conn->procedure_expire == 0U) &&
   1a98c:	4293      	cmp	r3, r2
   1a98e:	d13e      	bne.n	1aa0e <ull_conn_done+0x136>
				conn->llcp_ack -= 2U;
   1a990:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   1a992:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   1a994:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   1a998:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a99c:	e03c      	b.n	1aa18 <ull_conn_done+0x140>
		conn->llcp_terminate.reason_peer =
   1a99e:	273d      	movs	r7, #61	; 0x3d
   1a9a0:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		conn_cleanup(conn, reason_peer);
   1a9a4:	4639      	mov	r1, r7
   1a9a6:	4620      	mov	r0, r4
   1a9a8:	f7ff ff18 	bl	1a7dc <conn_cleanup>
}
   1a9ac:	b00b      	add	sp, #44	; 0x2c
   1a9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   1a9b2:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   1a9b6:	2b00      	cmp	r3, #0
   1a9b8:	d1bf      	bne.n	1a93a <ull_conn_done+0x62>
	else if (conn->connect_expire) {
   1a9ba:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1a9be:	2b00      	cmp	r3, #0
   1a9c0:	f000 8082 	beq.w	1aac8 <ull_conn_done+0x1f0>
		if (conn->connect_expire > elapsed_event) {
   1a9c4:	4543      	cmp	r3, r8
   1a9c6:	f240 80f1 	bls.w	1abac <ull_conn_done+0x2d4>
			conn->connect_expire -= elapsed_event;
   1a9ca:	eba3 0308 	sub.w	r3, r3, r8
   1a9ce:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   1a9d2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   1a9d6:	2b00      	cmp	r3, #0
   1a9d8:	d0b2      	beq.n	1a940 <ull_conn_done+0x68>
		if (conn->supervision_expire > elapsed_event) {
   1a9da:	4598      	cmp	r8, r3
   1a9dc:	f080 80c5 	bcs.w	1ab6a <ull_conn_done+0x292>
			conn->supervision_expire -= elapsed_event;
   1a9e0:	eba3 0308 	sub.w	r3, r3, r8
   1a9e4:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   1a9e6:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   1a9e8:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1a9ea:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   1a9ee:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   1a9f0:	d907      	bls.n	1aa02 <ull_conn_done+0x12a>
			else if (lll->role) {
   1a9f2:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   1a9f6:	4293      	cmp	r3, r2
   1a9f8:	daa2      	bge.n	1a940 <ull_conn_done+0x68>
				if (latency_event) {
   1a9fa:	f1b9 0f00 	cmp.w	r9, #0
   1a9fe:	f000 80c7 	beq.w	1ab90 <ull_conn_done+0x2b8>
				force = 1U;
   1aa02:	2701      	movs	r7, #1
   1aa04:	e79c      	b.n	1a940 <ull_conn_done+0x68>
   1aa06:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1aa0a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1aa0e:	1a9b      	subs	r3, r3, r2
   1aa10:	f003 0303 	and.w	r3, r3, #3
   1aa14:	2b02      	cmp	r3, #2
   1aa16:	d071      	beq.n	1aafc <ull_conn_done+0x224>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1aa18:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   1aa1c:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   1aa20:	429a      	cmp	r2, r3
   1aa22:	f000 808f 	beq.w	1ab44 <ull_conn_done+0x26c>
		lll->latency_event = 0U;
   1aa26:	2200      	movs	r2, #0
   1aa28:	84aa      	strh	r2, [r5, #36]	; 0x24
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1aa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   1aa2c:	b90f      	cbnz	r7, 1aa32 <ull_conn_done+0x15a>
   1aa2e:	454a      	cmp	r2, r9
   1aa30:	d070      	beq.n	1ab14 <ull_conn_done+0x23c>
		lazy = lll->latency_event + 1U;
   1aa32:	3201      	adds	r2, #1
   1aa34:	9c08      	ldr	r4, [sp, #32]
   1aa36:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1aa38:	b90b      	cbnz	r3, 1aa3e <ull_conn_done+0x166>
   1aa3a:	2c00      	cmp	r4, #0
   1aa3c:	d04d      	beq.n	1aada <ull_conn_done+0x202>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1aa3e:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aa40:	4e67      	ldr	r6, [pc, #412]	; (1abe0 <ull_conn_done+0x308>)
		struct ll_conn *conn = lll->hdr.parent;
   1aa42:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aa44:	9506      	str	r5, [sp, #24]
   1aa46:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1aa48:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1aa4a:	9103      	str	r1, [sp, #12]
   1aa4c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1aa50:	b2d2      	uxtb	r2, r2
   1aa52:	9704      	str	r7, [sp, #16]
   1aa54:	9400      	str	r4, [sp, #0]
   1aa56:	9605      	str	r6, [sp, #20]
   1aa58:	2101      	movs	r1, #1
   1aa5a:	f7f9 fde9 	bl	14630 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1aa5e:	f030 0302 	bics.w	r3, r0, #2
   1aa62:	d0a3      	beq.n	1a9ac <ull_conn_done+0xd4>
   1aa64:	f7fc fba4 	bl	171b0 <ull_disable_mark_get>
   1aa68:	4285      	cmp	r5, r0
   1aa6a:	d09f      	beq.n	1a9ac <ull_conn_done+0xd4>
   1aa6c:	4a5d      	ldr	r2, [pc, #372]	; (1abe4 <ull_conn_done+0x30c>)
   1aa6e:	495e      	ldr	r1, [pc, #376]	; (1abe8 <ull_conn_done+0x310>)
   1aa70:	485e      	ldr	r0, [pc, #376]	; (1abec <ull_conn_done+0x314>)
   1aa72:	f240 5317 	movw	r3, #1303	; 0x517
   1aa76:	f009 fd1d 	bl	244b4 <printk>
   1aa7a:	4040      	eors	r0, r0
   1aa7c:	f380 8811 	msr	BASEPRI, r0
   1aa80:	f04f 0003 	mov.w	r0, #3
   1aa84:	df02      	svc	2
   1aa86:	e791      	b.n	1a9ac <ull_conn_done+0xd4>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1aa88:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   1aa8c:	0719      	lsls	r1, r3, #28
   1aa8e:	d53b      	bpl.n	1ab08 <ull_conn_done+0x230>
					    (lll->latency + 6)) ?
   1aa90:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   1aa92:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   1aa96:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   1aa98:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   1aa9a:	bfc4      	itt	gt
   1aa9c:	1ad3      	subgt	r3, r2, r3
   1aa9e:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   1aaa0:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   1aaa4:	bfcc      	ite	gt
   1aaa6:	b29b      	uxthgt	r3, r3
   1aaa8:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1aaaa:	4299      	cmp	r1, r3
   1aaac:	d057      	beq.n	1ab5e <ull_conn_done+0x286>
				conn->appto_reload = appto_reload_new;
   1aaae:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   1aab2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   1aab6:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   1aaba:	e722      	b.n	1a902 <ull_conn_done+0x2a>
		conn->appto_expire = conn->apto_expire = 0U;
   1aabc:	2300      	movs	r3, #0
   1aabe:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   1aac2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   1aac6:	e71c      	b.n	1a902 <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   1aac8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1aacc:	2b00      	cmp	r3, #0
   1aace:	d184      	bne.n	1a9da <ull_conn_done+0x102>
			conn->supervision_expire = conn->supervision_reload;
   1aad0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1aad4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1aad8:	e77d      	b.n	1a9d6 <ull_conn_done+0xfe>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1aada:	2900      	cmp	r1, #0
   1aadc:	d04f      	beq.n	1ab7e <ull_conn_done+0x2a6>
   1aade:	4623      	mov	r3, r4
   1aae0:	e7ad      	b.n	1aa3e <ull_conn_done+0x166>
			conn->appto_expire -= elapsed_event;
   1aae2:	eba3 0808 	sub.w	r8, r3, r8
   1aae6:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1aaea:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->appto_expire -= elapsed_event;
   1aaee:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1aaf2:	1a9b      	subs	r3, r3, r2
   1aaf4:	f003 0303 	and.w	r3, r3, #3
   1aaf8:	2b02      	cmp	r3, #2
   1aafa:	d18d      	bne.n	1aa18 <ull_conn_done+0x140>
   1aafc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1ab00:	3b01      	subs	r3, #1
   1ab02:	2b01      	cmp	r3, #1
   1ab04:	d888      	bhi.n	1aa18 <ull_conn_done+0x140>
   1ab06:	e78e      	b.n	1aa26 <ull_conn_done+0x14e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1ab08:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   1ab0c:	07da      	lsls	r2, r3, #31
   1ab0e:	f57f aef8 	bpl.w	1a902 <ull_conn_done+0x2a>
   1ab12:	e7bd      	b.n	1aa90 <ull_conn_done+0x1b8>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1ab14:	9c08      	ldr	r4, [sp, #32]
   1ab16:	b913      	cbnz	r3, 1ab1e <ull_conn_done+0x246>
   1ab18:	2c00      	cmp	r4, #0
   1ab1a:	f43f af47 	beq.w	1a9ac <ull_conn_done+0xd4>
	lazy = 0U;
   1ab1e:	4639      	mov	r1, r7
   1ab20:	e78d      	b.n	1aa3e <ull_conn_done+0x166>
			rx = ll_pdu_rx_alloc();
   1ab22:	f7fc fa91 	bl	17048 <ll_pdu_rx_alloc>
			if (rx) {
   1ab26:	4601      	mov	r1, r0
   1ab28:	b370      	cbz	r0, 1ab88 <ull_conn_done+0x2b0>
				conn->apto_expire = 0U;
   1ab2a:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   1ab2c:	8baa      	ldrh	r2, [r5, #28]
				conn->apto_expire = 0U;
   1ab2e:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   1ab32:	2311      	movs	r3, #17
				rx->handle = lll->handle;
   1ab34:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   1ab36:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1ab38:	6800      	ldr	r0, [r0, #0]
   1ab3a:	f7fc fa57 	bl	16fec <ll_rx_put>
				ll_rx_sched();
   1ab3e:	f7fc fa5f 	bl	17000 <ll_rx_sched>
   1ab42:	e711      	b.n	1a968 <ull_conn_done+0x90>
   1ab44:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   1ab46:	e770      	b.n	1aa2a <ull_conn_done+0x152>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1ab48:	aa08      	add	r2, sp, #32
   1ab4a:	a909      	add	r1, sp, #36	; 0x24
   1ab4c:	4630      	mov	r0, r6
   1ab4e:	f7e5 fedf 	bl	910 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1ab52:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1ab56:	b373      	cbz	r3, 1abb6 <ull_conn_done+0x2de>
				lll->latency_event = 0;
   1ab58:	2300      	movs	r3, #0
   1ab5a:	84ab      	strh	r3, [r5, #36]	; 0x24
   1ab5c:	e6e5      	b.n	1a92a <ull_conn_done+0x52>
			if (conn->apto_expire == 0U) {
   1ab5e:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   1ab62:	2900      	cmp	r1, #0
   1ab64:	f47f aecd 	bne.w	1a902 <ull_conn_done+0x2a>
   1ab68:	e7a3      	b.n	1aab2 <ull_conn_done+0x1da>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1ab6a:	4620      	mov	r0, r4
   1ab6c:	2108      	movs	r1, #8
   1ab6e:	f7ff fe35 	bl	1a7dc <conn_cleanup>
			return;
   1ab72:	e71b      	b.n	1a9ac <ull_conn_done+0xd4>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   1ab74:	4620      	mov	r0, r4
   1ab76:	2122      	movs	r1, #34	; 0x22
   1ab78:	f7ff fe30 	bl	1a7dc <conn_cleanup>
			return;
   1ab7c:	e716      	b.n	1a9ac <ull_conn_done+0xd4>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1ab7e:	2f00      	cmp	r7, #0
   1ab80:	f43f af14 	beq.w	1a9ac <ull_conn_done+0xd4>
   1ab84:	460b      	mov	r3, r1
   1ab86:	e75a      	b.n	1aa3e <ull_conn_done+0x166>
				conn->apto_expire = 1U;
   1ab88:	2301      	movs	r3, #1
   1ab8a:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   1ab8e:	e6eb      	b.n	1a968 <ull_conn_done+0x90>
					force = conn->slave.force & 0x01;
   1ab90:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   1ab94:	085a      	lsrs	r2, r3, #1
					if (force) {
   1ab96:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   1ab9a:	bf17      	itett	ne
   1ab9c:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1aba0:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   1aba4:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   1aba8:	461f      	movne	r7, r3
   1abaa:	e6c9      	b.n	1a940 <ull_conn_done+0x68>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   1abac:	4620      	mov	r0, r4
   1abae:	213e      	movs	r1, #62	; 0x3e
   1abb0:	f7ff fe14 	bl	1a7dc <conn_cleanup>
			return;
   1abb4:	e6fa      	b.n	1a9ac <ull_conn_done+0xd4>
				ull_conn_tx_demux(UINT8_MAX);
   1abb6:	20ff      	movs	r0, #255	; 0xff
   1abb8:	f7ff fdc0 	bl	1a73c <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1abbc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1abc0:	2b00      	cmp	r3, #0
   1abc2:	d1c9      	bne.n	1ab58 <ull_conn_done+0x280>
   1abc4:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   1abc8:	463a      	mov	r2, r7
   1abca:	f7f8 fa35 	bl	13038 <memq_peek>
   1abce:	2800      	cmp	r0, #0
   1abd0:	d1c2      	bne.n	1ab58 <ull_conn_done+0x280>
			} else if (lll->slave.latency_enabled) {
   1abd2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1abd6:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   1abd8:	bf44      	itt	mi
   1abda:	8c2b      	ldrhmi	r3, [r5, #32]
   1abdc:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   1abde:	e6a4      	b.n	1a92a <ull_conn_done+0x52>
   1abe0:	00018385 	.word	0x00018385
   1abe4:	0002ebd8 	.word	0x0002ebd8
   1abe8:	0002ed40 	.word	0x0002ed40
   1abec:	0002e80c 	.word	0x0002e80c

0001abf0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1abf0:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   1abf4:	2b00      	cmp	r3, #0
   1abf6:	f000 80e7 	beq.w	1adc8 <ull_conn_tx_lll_enqueue+0x1d8>
   1abfa:	3901      	subs	r1, #1
{
   1abfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1ac00:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 1add0 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   1ac04:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 1add4 <ull_conn_tx_lll_enqueue+0x1e4>
   1ac08:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 1add8 <ull_conn_tx_lll_enqueue+0x1e8>
   1ac0c:	4604      	mov	r4, r0
   1ac0e:	b2cd      	uxtb	r5, r1
   1ac10:	e012      	b.n	1ac38 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1ac12:	4640      	mov	r0, r8
   1ac14:	f7f8 f9a4 	bl	12f60 <mem_acquire>
		LL_ASSERT(link);
   1ac18:	4607      	mov	r7, r0
   1ac1a:	2800      	cmp	r0, #0
   1ac1c:	d066      	beq.n	1acec <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1ac1e:	4631      	mov	r1, r6
   1ac20:	4638      	mov	r0, r7
   1ac22:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   1ac26:	f7f8 f9ff 	bl	13028 <memq_enqueue>
	while (conn->tx_head &&
   1ac2a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1ac2e:	3d01      	subs	r5, #1
   1ac30:	b2ed      	uxtb	r5, r5
   1ac32:	2b00      	cmp	r3, #0
   1ac34:	f000 8089 	beq.w	1ad4a <ull_conn_tx_lll_enqueue+0x15a>
		 !conn->llcp_phy.pause_tx &&
   1ac38:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   1ac3c:	07d1      	lsls	r1, r2, #31
   1ac3e:	d403      	bmi.n	1ac48 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   1ac40:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
   1ac44:	0792      	lsls	r2, r2, #30
   1ac46:	d566      	bpl.n	1ad16 <ull_conn_tx_lll_enqueue+0x126>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1ac48:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   1ac4c:	4293      	cmp	r3, r2
   1ac4e:	d17c      	bne.n	1ad4a <ull_conn_tx_lll_enqueue+0x15a>
   1ac50:	2dff      	cmp	r5, #255	; 0xff
   1ac52:	d07a      	beq.n	1ad4a <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1ac54:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   1ac58:	4620      	mov	r0, r4
   1ac5a:	f7fd f987 	bl	17f6c <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1ac5e:	7903      	ldrb	r3, [r0, #4]
   1ac60:	f003 0303 	and.w	r3, r3, #3
   1ac64:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1ac66:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1ac68:	d1d3      	bne.n	1ac12 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   1ac6a:	79c3      	ldrb	r3, [r0, #7]
   1ac6c:	3b03      	subs	r3, #3
   1ac6e:	2b14      	cmp	r3, #20
   1ac70:	d8cf      	bhi.n	1ac12 <ull_conn_tx_lll_enqueue+0x22>
   1ac72:	a201      	add	r2, pc, #4	; (adr r2, 1ac78 <ull_conn_tx_lll_enqueue+0x88>)
   1ac74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ac78:	0001acd5 	.word	0x0001acd5
   1ac7c:	0001acd5 	.word	0x0001acd5
   1ac80:	0001ac13 	.word	0x0001ac13
   1ac84:	0001ac13 	.word	0x0001ac13
   1ac88:	0001ac13 	.word	0x0001ac13
   1ac8c:	0001ac13 	.word	0x0001ac13
   1ac90:	0001ac13 	.word	0x0001ac13
   1ac94:	0001acd5 	.word	0x0001acd5
   1ac98:	0001accd 	.word	0x0001accd
   1ac9c:	0001ac13 	.word	0x0001ac13
   1aca0:	0001ac13 	.word	0x0001ac13
   1aca4:	0001ac13 	.word	0x0001ac13
   1aca8:	0001ac13 	.word	0x0001ac13
   1acac:	0001ac13 	.word	0x0001ac13
   1acb0:	0001ac13 	.word	0x0001ac13
   1acb4:	0001ac13 	.word	0x0001ac13
   1acb8:	0001ac13 	.word	0x0001ac13
   1acbc:	0001ac13 	.word	0x0001ac13
   1acc0:	0001ac13 	.word	0x0001ac13
   1acc4:	0001ad09 	.word	0x0001ad09
   1acc8:	0001ad09 	.word	0x0001ad09
		if (!conn->lll.role) {
   1accc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1acd0:	2b00      	cmp	r3, #0
   1acd2:	da9e      	bge.n	1ac12 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1acd4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   1acd8:	f043 0302 	orr.w	r3, r3, #2
   1acdc:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   1ace0:	4640      	mov	r0, r8
   1ace2:	f7f8 f93d 	bl	12f60 <mem_acquire>
		LL_ASSERT(link);
   1ace6:	4607      	mov	r7, r0
   1ace8:	2800      	cmp	r0, #0
   1acea:	d198      	bne.n	1ac1e <ull_conn_tx_lll_enqueue+0x2e>
   1acec:	4837      	ldr	r0, [pc, #220]	; (1adcc <ull_conn_tx_lll_enqueue+0x1dc>)
   1acee:	f240 536b 	movw	r3, #1387	; 0x56b
   1acf2:	4652      	mov	r2, sl
   1acf4:	4649      	mov	r1, r9
   1acf6:	f009 fbdd 	bl	244b4 <printk>
   1acfa:	4040      	eors	r0, r0
   1acfc:	f380 8811 	msr	BASEPRI, r0
   1ad00:	f04f 0003 	mov.w	r0, #3
   1ad04:	df02      	svc	2
   1ad06:	e78a      	b.n	1ac1e <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   1ad08:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   1ad0c:	f043 0301 	orr.w	r3, r3, #1
   1ad10:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   1ad14:	e77d      	b.n	1ac12 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1ad16:	791a      	ldrb	r2, [r3, #4]
   1ad18:	f002 0203 	and.w	r2, r2, #3
   1ad1c:	2a03      	cmp	r2, #3
   1ad1e:	d197      	bne.n	1ac50 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   1ad20:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1ad22:	2a03      	cmp	r2, #3
   1ad24:	d001      	beq.n	1ad2a <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1ad26:	2a0a      	cmp	r2, #10
   1ad28:	d192      	bne.n	1ac50 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1ad2a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1ad2e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1ad32:	428a      	cmp	r2, r1
   1ad34:	d00b      	beq.n	1ad4e <ull_conn_tx_lll_enqueue+0x15e>
   1ad36:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   1ad3a:	2a03      	cmp	r2, #3
   1ad3c:	d088      	beq.n	1ac50 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1ad3e:	681a      	ldr	r2, [r3, #0]
   1ad40:	b11a      	cbz	r2, 1ad4a <ull_conn_tx_lll_enqueue+0x15a>
   1ad42:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   1ad46:	428a      	cmp	r2, r1
   1ad48:	d02d      	beq.n	1ada6 <ull_conn_tx_lll_enqueue+0x1b6>
}
   1ad4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   1ad4e:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   1ad52:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   1ad56:	4288      	cmp	r0, r1
   1ad58:	d1f1      	bne.n	1ad3e <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1ad5a:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   1ad5e:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   1ad62:	4288      	cmp	r0, r1
   1ad64:	d1eb      	bne.n	1ad3e <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   1ad66:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   1ad6a:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   1ad6e:	4288      	cmp	r0, r1
   1ad70:	d1e5      	bne.n	1ad3e <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
   1ad72:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   1ad76:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   1ad7a:	4288      	cmp	r0, r1
   1ad7c:	d1df      	bne.n	1ad3e <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1ad7e:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   1ad82:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   1ad86:	4288      	cmp	r0, r1
   1ad88:	d1d9      	bne.n	1ad3e <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1ad8a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1ad8e:	2101      	movs	r1, #1
   1ad90:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   1ad94:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   1ad96:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   1ad98:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1ad9c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
   1ada0:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   1ada4:	e754      	b.n	1ac50 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   1ada6:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
   1adaa:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
   1adae:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   1adb2:	680a      	ldr	r2, [r1, #0]
   1adb4:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1adb6:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   1adb8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   1adbc:	2800      	cmp	r0, #0
   1adbe:	f47f af47 	bne.w	1ac50 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   1adc2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   1adc6:	e743      	b.n	1ac50 <ull_conn_tx_lll_enqueue+0x60>
   1adc8:	4770      	bx	lr
   1adca:	bf00      	nop
   1adcc:	0002e80c 	.word	0x0002e80c
   1add0:	20003948 	.word	0x20003948
   1add4:	0002ebd8 	.word	0x0002ebd8
   1add8:	0002ec30 	.word	0x0002ec30

0001addc <tx_demux>:
{
   1addc:	b510      	push	{r4, lr}
   1adde:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1ade0:	2001      	movs	r0, #1
   1ade2:	f7ff fcab 	bl	1a73c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1ade6:	4620      	mov	r0, r4
   1ade8:	2101      	movs	r1, #1
}
   1adea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1adee:	f7ff beff 	b.w	1abf0 <ull_conn_tx_lll_enqueue>
   1adf2:	bf00      	nop

0001adf4 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1adf4:	4901      	ldr	r1, [pc, #4]	; (1adfc <ull_conn_link_tx_release+0x8>)
   1adf6:	f7f8 b8cd 	b.w	12f94 <mem_release>
   1adfa:	bf00      	nop
   1adfc:	20003948 	.word	0x20003948

0001ae00 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   1ae00:	4b01      	ldr	r3, [pc, #4]	; (1ae08 <ull_conn_ack_last_idx_get+0x8>)
}
   1ae02:	78d8      	ldrb	r0, [r3, #3]
   1ae04:	4770      	bx	lr
   1ae06:	bf00      	nop
   1ae08:	2000089c 	.word	0x2000089c

0001ae0c <ull_conn_ack_peek>:
{
   1ae0c:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1ae0e:	4b0b      	ldr	r3, [pc, #44]	; (1ae3c <ull_conn_ack_peek+0x30>)
   1ae10:	789c      	ldrb	r4, [r3, #2]
   1ae12:	78de      	ldrb	r6, [r3, #3]
   1ae14:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   1ae16:	42b4      	cmp	r4, r6
   1ae18:	d00d      	beq.n	1ae36 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   1ae1a:	3304      	adds	r3, #4
   1ae1c:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   1ae20:	4605      	mov	r5, r0
   1ae22:	1918      	adds	r0, r3, r4
   1ae24:	d005      	beq.n	1ae32 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1ae26:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   1ae28:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   1ae2a:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   1ae2c:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1ae2e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1ae30:	6818      	ldr	r0, [r3, #0]
}
   1ae32:	bcf0      	pop	{r4, r5, r6, r7}
   1ae34:	4770      	bx	lr
		return NULL;
   1ae36:	2000      	movs	r0, #0
   1ae38:	e7fb      	b.n	1ae32 <ull_conn_ack_peek+0x26>
   1ae3a:	bf00      	nop
   1ae3c:	2000089c 	.word	0x2000089c

0001ae40 <ull_conn_ack_by_last_peek>:
{
   1ae40:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1ae42:	4b09      	ldr	r3, [pc, #36]	; (1ae68 <ull_conn_ack_by_last_peek+0x28>)
   1ae44:	789c      	ldrb	r4, [r3, #2]
   1ae46:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1ae48:	4284      	cmp	r4, r0
   1ae4a:	d00b      	beq.n	1ae64 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   1ae4c:	3304      	adds	r3, #4
   1ae4e:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1ae52:	1918      	adds	r0, r3, r4
   1ae54:	d004      	beq.n	1ae60 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   1ae56:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   1ae58:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   1ae5a:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1ae5c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1ae5e:	6818      	ldr	r0, [r3, #0]
}
   1ae60:	bc30      	pop	{r4, r5}
   1ae62:	4770      	bx	lr
		return NULL;
   1ae64:	2000      	movs	r0, #0
   1ae66:	e7fb      	b.n	1ae60 <ull_conn_ack_by_last_peek+0x20>
   1ae68:	2000089c 	.word	0x2000089c

0001ae6c <ull_conn_ack_dequeue>:
{
   1ae6c:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   1ae6e:	4b0a      	ldr	r3, [pc, #40]	; (1ae98 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   1ae70:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1ae72:	78da      	ldrb	r2, [r3, #3]
   1ae74:	7818      	ldrb	r0, [r3, #0]
   1ae76:	785c      	ldrb	r4, [r3, #1]
   1ae78:	428a      	cmp	r2, r1
   1ae7a:	d00a      	beq.n	1ae92 <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   1ae7c:	1c4a      	adds	r2, r1, #1
   1ae7e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1ae80:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1ae84:	4294      	cmp	r4, r2
   1ae86:	bf08      	it	eq
   1ae88:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1ae8a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1ae8c:	709a      	strb	r2, [r3, #2]
}
   1ae8e:	bc10      	pop	{r4}
   1ae90:	4770      	bx	lr
		return NULL;
   1ae92:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   1ae94:	e7fb      	b.n	1ae8e <ull_conn_ack_dequeue+0x22>
   1ae96:	bf00      	nop
   1ae98:	2000089c 	.word	0x2000089c

0001ae9c <ull_conn_lll_ack_enqueue>:
{
   1ae9c:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1ae9e:	4a13      	ldr	r2, [pc, #76]	; (1aeec <ull_conn_lll_ack_enqueue+0x50>)
   1aea0:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1aea2:	7855      	ldrb	r5, [r2, #1]
   1aea4:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   1aea6:	1c73      	adds	r3, r6, #1
   1aea8:	b2db      	uxtb	r3, r3
		last = 0U;
   1aeaa:	429d      	cmp	r5, r3
   1aeac:	bf08      	it	eq
   1aeae:	2300      	moveq	r3, #0
	if (last == first) {
   1aeb0:	429c      	cmp	r4, r3
   1aeb2:	d00a      	beq.n	1aeca <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1aeb4:	4615      	mov	r5, r2
   1aeb6:	f815 4b04 	ldrb.w	r4, [r5], #4
   1aeba:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1aebe:	192e      	adds	r6, r5, r4
   1aec0:	d003      	beq.n	1aeca <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   1aec2:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   1aec4:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   1aec6:	6071      	str	r1, [r6, #4]
}
   1aec8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   1aeca:	4a09      	ldr	r2, [pc, #36]	; (1aef0 <ull_conn_lll_ack_enqueue+0x54>)
   1aecc:	4909      	ldr	r1, [pc, #36]	; (1aef4 <ull_conn_lll_ack_enqueue+0x58>)
   1aece:	480a      	ldr	r0, [pc, #40]	; (1aef8 <ull_conn_lll_ack_enqueue+0x5c>)
   1aed0:	f240 53a9 	movw	r3, #1449	; 0x5a9
   1aed4:	f009 faee 	bl	244b4 <printk>
   1aed8:	4040      	eors	r0, r0
   1aeda:	f380 8811 	msr	BASEPRI, r0
   1aede:	f04f 0003 	mov.w	r0, #3
   1aee2:	df02      	svc	2
	lll_tx->handle = handle;
   1aee4:	2300      	movs	r3, #0
   1aee6:	801b      	strh	r3, [r3, #0]
   1aee8:	deff      	udf	#255	; 0xff
   1aeea:	bf00      	nop
   1aeec:	2000089c 	.word	0x2000089c
   1aef0:	0002ebd8 	.word	0x0002ebd8
   1aef4:	0002ec20 	.word	0x0002ec20
   1aef8:	0002e80c 	.word	0x0002e80c

0001aefc <ull_conn_tx_ack>:
{
   1aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   1aefe:	7953      	ldrb	r3, [r2, #5]
{
   1af00:	b083      	sub	sp, #12
   1af02:	4614      	mov	r4, r2
   1af04:	4605      	mov	r5, r0
   1af06:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   1af08:	b37b      	cbz	r3, 1af6a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1af0a:	7923      	ldrb	r3, [r4, #4]
   1af0c:	f003 0203 	and.w	r2, r3, #3
   1af10:	2a03      	cmp	r2, #3
   1af12:	d00d      	beq.n	1af30 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   1af14:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1af18:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1af1a:	bf04      	itt	eq
   1af1c:	f36f 0301 	bfceq	r3, #0, #2
   1af20:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1af22:	4621      	mov	r1, r4
   1af24:	4628      	mov	r0, r5
}
   1af26:	b003      	add	sp, #12
   1af28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1af2c:	f7fc b8a4 	b.w	17078 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   1af30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1af34:	429d      	cmp	r5, r3
   1af36:	d126      	bne.n	1af86 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   1af38:	6830      	ldr	r0, [r6, #0]
   1af3a:	4284      	cmp	r4, r0
   1af3c:	d040      	beq.n	1afc0 <ull_conn_tx_ack+0xc4>
			LL_ASSERT(!link->next);
   1af3e:	2800      	cmp	r0, #0
   1af40:	d0ef      	beq.n	1af22 <ull_conn_tx_ack+0x26>
   1af42:	4aba      	ldr	r2, [pc, #744]	; (1b22c <ull_conn_tx_ack+0x330>)
   1af44:	49ba      	ldr	r1, [pc, #744]	; (1b230 <ull_conn_tx_ack+0x334>)
   1af46:	48bb      	ldr	r0, [pc, #748]	; (1b234 <ull_conn_tx_ack+0x338>)
   1af48:	f240 53c9 	movw	r3, #1481	; 0x5c9
   1af4c:	f009 fab2 	bl	244b4 <printk>
   1af50:	4040      	eors	r0, r0
   1af52:	f380 8811 	msr	BASEPRI, r0
   1af56:	f04f 0003 	mov.w	r0, #3
   1af5a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1af5c:	4621      	mov	r1, r4
   1af5e:	4628      	mov	r0, r5
}
   1af60:	b003      	add	sp, #12
   1af62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1af66:	f7fc b887 	b.w	17078 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1af6a:	4ab0      	ldr	r2, [pc, #704]	; (1b22c <ull_conn_tx_ack+0x330>)
   1af6c:	49b2      	ldr	r1, [pc, #712]	; (1b238 <ull_conn_tx_ack+0x33c>)
   1af6e:	48b1      	ldr	r0, [pc, #708]	; (1b234 <ull_conn_tx_ack+0x338>)
   1af70:	f240 53b6 	movw	r3, #1462	; 0x5b6
   1af74:	f009 fa9e 	bl	244b4 <printk>
   1af78:	4040      	eors	r0, r0
   1af7a:	f380 8811 	msr	BASEPRI, r0
   1af7e:	f04f 0003 	mov.w	r0, #3
   1af82:	df02      	svc	2
   1af84:	e7c1      	b.n	1af0a <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1af86:	48ad      	ldr	r0, [pc, #692]	; (1b23c <ull_conn_tx_ack+0x340>)
   1af88:	462a      	mov	r2, r5
   1af8a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1af8e:	f7f8 f819 	bl	12fc4 <mem_get>
   1af92:	79e3      	ldrb	r3, [r4, #7]
   1af94:	3b02      	subs	r3, #2
   1af96:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   1af98:	2b16      	cmp	r3, #22
   1af9a:	d80d      	bhi.n	1afb8 <ull_conn_tx_ack+0xbc>
   1af9c:	e8df f003 	tbb	[pc, r3]
   1afa0:	0c3dc2de 	.word	0x0c3dc2de
   1afa4:	0c0c0c0c 	.word	0x0c0c0c0c
   1afa8:	470c51b1 	.word	0x470c51b1
   1afac:	440c0c0c 	.word	0x440c0c0c
   1afb0:	e5980c0c 	.word	0xe5980c0c
   1afb4:	1d16      	.short	0x1d16
   1afb6:	a0          	.byte	0xa0
   1afb7:	00          	.byte	0x00
		if (link->next == (void *)tx) {
   1afb8:	6830      	ldr	r0, [r6, #0]
   1afba:	42a0      	cmp	r0, r4
   1afbc:	d1bf      	bne.n	1af3e <ull_conn_tx_ack+0x42>
   1afbe:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1afc0:	499f      	ldr	r1, [pc, #636]	; (1b240 <ull_conn_tx_ack+0x344>)
}
   1afc2:	b003      	add	sp, #12
   1afc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1afc8:	f7f7 bfe4 	b.w	12f94 <mem_release>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1afcc:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   1afd0:	2202      	movs	r2, #2
   1afd2:	f362 0301 	bfi	r3, r2, #0, #2
   1afd6:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   1afda:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
   1afde:	2b00      	cmp	r3, #0
   1afe0:	da14      	bge.n	1b00c <ull_conn_tx_ack+0x110>
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1afe2:	4998      	ldr	r1, [pc, #608]	; (1b244 <ull_conn_tx_ack+0x348>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1afe4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
   1afe8:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1afec:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1afee:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   1aff2:	f10d 0c08 	add.w	ip, sp, #8
   1aff6:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   1affa:	f003 0307 	and.w	r3, r3, #7
   1affe:	4463      	add	r3, ip
   1b000:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1b004:	f363 1206 	bfi	r2, r3, #4, #3
   1b008:	f887 2064 	strb.w	r2, [r7, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1b00c:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
   1b010:	f36f 0300 	bfc	r3, #0, #1
   1b014:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
		break;
   1b018:	e78e      	b.n	1af38 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   1b01a:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
   1b01e:	f043 0302 	orr.w	r3, r3, #2
   1b022:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
   1b026:	e787      	b.n	1af38 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1b028:	7a23      	ldrb	r3, [r4, #8]
   1b02a:	2b03      	cmp	r3, #3
   1b02c:	d184      	bne.n	1af38 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   1b02e:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   1b032:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   1b034:	f023 0303 	bic.w	r3, r3, #3
   1b038:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   1b03c:	f8a7 20cc 	strh.w	r2, [r7, #204]	; 0xcc
		break;
   1b040:	e77a      	b.n	1af38 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   1b042:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1b046:	2b00      	cmp	r3, #0
   1b048:	dbe7      	blt.n	1b01a <ull_conn_tx_ack+0x11e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b04a:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1b04c:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b04e:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1b052:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1b054:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1b056:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b058:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1b05a:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1b05c:	f200 1155 	addw	r1, r0, #341	; 0x155
   1b060:	18a0      	adds	r0, r4, r2
   1b062:	f00b fc9e 	bl	269a2 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1b066:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   1b06a:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1b06c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
   1b070:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1b072:	210c      	movs	r1, #12
   1b074:	f104 0012 	add.w	r0, r4, #18
   1b078:	f001 fdda 	bl	1cc30 <lll_csrand_isr_get>
	    conn->tx_head &&
   1b07c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
	if (
   1b080:	2b00      	cmp	r3, #0
   1b082:	f000 80ad 	beq.w	1b1e0 <ull_conn_tx_ack+0x2e4>
	    !conn->llcp_enc.pause_tx &&
   1b086:	f897 2152 	ldrb.w	r2, [r7, #338]	; 0x152
	    conn->tx_head &&
   1b08a:	0791      	lsls	r1, r2, #30
   1b08c:	f100 80a8 	bmi.w	1b1e0 <ull_conn_tx_ack+0x2e4>
	    !conn->llcp_phy.pause_tx &&
   1b090:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
   1b094:	07d2      	lsls	r2, r2, #31
   1b096:	f100 80a3 	bmi.w	1b1e0 <ull_conn_tx_ack+0x2e4>
		if (conn->tx_head == conn->tx_data) {
   1b09a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
   1b09e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1b0a0:	bf04      	itt	eq
   1b0a2:	681a      	ldreq	r2, [r3, #0]
   1b0a4:	f8c7 21bc 	streq.w	r2, [r7, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   1b0a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   1b0ac:	2a00      	cmp	r2, #0
   1b0ae:	f000 80b6 	beq.w	1b21e <ull_conn_tx_ack+0x322>
	tx->next = conn->tx_ctrl_last->next;
   1b0b2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
   1b0b6:	681a      	ldr	r2, [r3, #0]
   1b0b8:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1b0ba:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   1b0bc:	6823      	ldr	r3, [r4, #0]
   1b0be:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
	if (!tx->next) {
   1b0c2:	2b00      	cmp	r3, #0
   1b0c4:	d078      	beq.n	1b1b8 <ull_conn_tx_ack+0x2bc>
		if (link->next == (void *)tx) {
   1b0c6:	6833      	ldr	r3, [r6, #0]
   1b0c8:	2b00      	cmp	r3, #0
   1b0ca:	d07a      	beq.n	1b1c2 <ull_conn_tx_ack+0x2c6>
}
   1b0cc:	b003      	add	sp, #12
   1b0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1b0d0:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   1b0d4:	2202      	movs	r2, #2
   1b0d6:	f362 0302 	bfi	r3, r2, #0, #3
   1b0da:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   1b0de:	e72b      	b.n	1af38 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1b0e0:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   1b0e4:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1b0e8:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1b0ec:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1b0f0:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1b0f4:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1b0f8:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1b0fc:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
   1b100:	e71a      	b.n	1af38 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_tx = 1U;
   1b102:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   1b106:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
   1b10a:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   1b10e:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1b112:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   1b116:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
   1b11a:	f043 0306 	orr.w	r3, r3, #6
   1b11e:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
   1b122:	e709      	b.n	1af38 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   1b124:	2208      	movs	r2, #8
   1b126:	f104 0112 	add.w	r1, r4, #18
   1b12a:	30ee      	adds	r0, #238	; 0xee
   1b12c:	f00b fc39 	bl	269a2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   1b130:	2204      	movs	r2, #4
   1b132:	f104 011a 	add.w	r1, r4, #26
   1b136:	f107 0098 	add.w	r0, r7, #152	; 0x98
   1b13a:	f00b fc32 	bl	269a2 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   1b13e:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   1b142:	f8b7 10ca 	ldrh.w	r1, [r7, #202]	; 0xca
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1b146:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
		conn->procedure_expire = conn->procedure_reload;
   1b14a:	f8a7 10cc 	strh.w	r1, [r7, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   1b14e:	f043 0302 	orr.w	r3, r3, #2
   1b152:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1b156:	f887 2151 	strb.w	r2, [r7, #337]	; 0x151
		break;
   1b15a:	e6ed      	b.n	1af38 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1b15c:	7a21      	ldrb	r1, [r4, #8]
   1b15e:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   1b160:	bf08      	it	eq
   1b162:	2116      	moveq	r1, #22
   1b164:	f7ff fb3a 	bl	1a7dc <conn_cleanup>
	break;
   1b168:	e6e6      	b.n	1af38 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1b16a:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   1b16e:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   1b172:	428b      	cmp	r3, r1
   1b174:	f43f aee0 	beq.w	1af38 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   1b178:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
   1b17c:	f002 0307 	and.w	r3, r2, #7
   1b180:	2b03      	cmp	r3, #3
   1b182:	d005      	beq.n	1b190 <ull_conn_tx_ack+0x294>
   1b184:	3303      	adds	r3, #3
   1b186:	f003 0307 	and.w	r3, r3, #7
   1b18a:	2b01      	cmp	r3, #1
   1b18c:	f63f af14 	bhi.w	1afb8 <ull_conn_tx_ack+0xbc>
				conn->lll.max_tx_octets =
   1b190:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
   1b194:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   1b198:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
   1b19c:	f8b7 01a2 	ldrh.w	r0, [r7, #418]	; 0x1a2
   1b1a0:	f8a7 0060 	strh.w	r0, [r7, #96]	; 0x60
				if (conn->llcp_length.state ==
   1b1a4:	2b05      	cmp	r3, #5
   1b1a6:	d034      	beq.n	1b212 <ull_conn_tx_ack+0x316>
				if (!conn->llcp_length.cache.tx_octets) {
   1b1a8:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
   1b1ac:	bb1b      	cbnz	r3, 1b1f6 <ull_conn_tx_ack+0x2fa>
					conn->llcp_length.ack =
   1b1ae:	f887 1199 	strb.w	r1, [r7, #409]	; 0x199
					conn->procedure_expire = 0U;
   1b1b2:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
					break;
   1b1b6:	e6bf      	b.n	1af38 <ull_conn_tx_ack+0x3c>
		if (link->next == (void *)tx) {
   1b1b8:	6833      	ldr	r3, [r6, #0]
		conn->tx_data_last = tx;
   1b1ba:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
		if (link->next == (void *)tx) {
   1b1be:	2b00      	cmp	r3, #0
   1b1c0:	d184      	bne.n	1b0cc <ull_conn_tx_ack+0x1d0>
			LL_ASSERT(link->next);
   1b1c2:	4a1a      	ldr	r2, [pc, #104]	; (1b22c <ull_conn_tx_ack+0x330>)
   1b1c4:	4920      	ldr	r1, [pc, #128]	; (1b248 <ull_conn_tx_ack+0x34c>)
   1b1c6:	481b      	ldr	r0, [pc, #108]	; (1b234 <ull_conn_tx_ack+0x338>)
   1b1c8:	f240 53c1 	movw	r3, #1473	; 0x5c1
   1b1cc:	f009 f972 	bl	244b4 <printk>
   1b1d0:	4040      	eors	r0, r0
   1b1d2:	f380 8811 	msr	BASEPRI, r0
   1b1d6:	f04f 0003 	mov.w	r0, #3
   1b1da:	df02      	svc	2
   1b1dc:	2000      	movs	r0, #0
   1b1de:	e6ef      	b.n	1afc0 <ull_conn_tx_ack+0xc4>
		if (!conn->tx_ctrl) {
   1b1e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   1b1e4:	2a00      	cmp	r2, #0
   1b1e6:	f47f af64 	bne.w	1b0b2 <ull_conn_tx_ack+0x1b6>
			tx->next = conn->tx_head;
   1b1ea:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   1b1ec:	e9c7 446c 	strd	r4, r4, [r7, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   1b1f0:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
   1b1f4:	e765      	b.n	1b0c2 <ull_conn_tx_ack+0x1c6>
				conn->llcp_length.cache.tx_octets = 0;
   1b1f6:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1b1f8:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
   1b1fc:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
				conn->llcp_length.tx_time =
   1b200:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1b204:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
   1b208:	f8a7 11a4 	strh.w	r1, [r7, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   1b20c:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
				break;
   1b210:	e692      	b.n	1af38 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   1b212:	2304      	movs	r3, #4
   1b214:	f363 0202 	bfi	r2, r3, #0, #3
   1b218:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
					break;
   1b21c:	e68c      	b.n	1af38 <ull_conn_tx_ack+0x3c>
			tx->next = conn->tx_head->next;
   1b21e:	681a      	ldr	r2, [r3, #0]
   1b220:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   1b222:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   1b224:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   1b226:	e9c7 446d 	strd	r4, r4, [r7, #436]	; 0x1b4
   1b22a:	e74a      	b.n	1b0c2 <ull_conn_tx_ack+0x1c6>
   1b22c:	0002ebd8 	.word	0x0002ebd8
   1b230:	0002eda8 	.word	0x0002eda8
   1b234:	0002e80c 	.word	0x0002e80c
   1b238:	0002ed9c 	.word	0x0002ed9c
   1b23c:	20003678 	.word	0x20003678
   1b240:	200038c4 	.word	0x200038c4
   1b244:	0002edc0 	.word	0x0002edc0
   1b248:	0002edb4 	.word	0x0002edb4

0001b24c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   1b24c:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   1b250:	f3c2 1302 	ubfx	r3, r2, #4, #3
   1b254:	2b02      	cmp	r3, #2
   1b256:	d012      	beq.n	1b27e <ull_conn_lll_max_tx_octets_get+0x32>
   1b258:	2b04      	cmp	r3, #4
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1b25a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
	switch (lll->phy_tx_time) {
   1b25e:	d014      	beq.n	1b28a <ull_conn_lll_max_tx_octets_get+0x3e>
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1b260:	08db      	lsrs	r3, r3, #3
   1b262:	3b0a      	subs	r3, #10
   1b264:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1b266:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   1b26a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
	if (lll->enc_tx) {
   1b26e:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1b270:	bf44      	itt	mi
   1b272:	3b04      	submi	r3, #4
   1b274:	b29b      	uxthmi	r3, r3
}
   1b276:	4298      	cmp	r0, r3
   1b278:	bf28      	it	cs
   1b27a:	4618      	movcs	r0, r3
   1b27c:	4770      	bx	lr
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1b27e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1b282:	089b      	lsrs	r3, r3, #2
   1b284:	3b0b      	subs	r3, #11
   1b286:	b29b      	uxth	r3, r3
		break;
   1b288:	e7ed      	b.n	1b266 <ull_conn_lll_max_tx_octets_get+0x1a>
		if (lll->phy_flags & 0x01) {
   1b28a:	0711      	lsls	r1, r2, #28
			max_tx_octets = ((lll->max_tx_time - 592) >>
   1b28c:	bf4b      	itete	mi
   1b28e:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
			max_tx_octets = ((lll->max_tx_time - 430) >>
   1b292:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
			max_tx_octets = ((lll->max_tx_time - 592) >>
   1b296:	119b      	asrmi	r3, r3, #6
			max_tx_octets = ((lll->max_tx_time - 430) >>
   1b298:	111b      	asrpl	r3, r3, #4
					  4) - 2;
   1b29a:	3b02      	subs	r3, #2
			max_tx_octets = ((lll->max_tx_time - 430) >>
   1b29c:	b29b      	uxth	r3, r3
   1b29e:	e7e2      	b.n	1b266 <ull_conn_lll_max_tx_octets_get+0x1a>

0001b2a0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   1b2a0:	b510      	push	{r4, lr}
   1b2a2:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1b2a4:	b930      	cbnz	r0, 1b2b4 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   1b2a6:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1b2aa:	f36f 0341 	bfc	r3, #1, #1
   1b2ae:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   1b2b2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1b2b4:	4a09      	ldr	r2, [pc, #36]	; (1b2dc <ticker_update_latency_cancel_op_cb+0x3c>)
   1b2b6:	490a      	ldr	r1, [pc, #40]	; (1b2e0 <ticker_update_latency_cancel_op_cb+0x40>)
   1b2b8:	480a      	ldr	r0, [pc, #40]	; (1b2e4 <ticker_update_latency_cancel_op_cb+0x44>)
   1b2ba:	f240 13e3 	movw	r3, #483	; 0x1e3
   1b2be:	f009 f8f9 	bl	244b4 <printk>
   1b2c2:	4040      	eors	r0, r0
   1b2c4:	f380 8811 	msr	BASEPRI, r0
   1b2c8:	f04f 0003 	mov.w	r0, #3
   1b2cc:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   1b2ce:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1b2d2:	f36f 0341 	bfc	r3, #1, #1
   1b2d6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   1b2da:	bd10      	pop	{r4, pc}
   1b2dc:	0002edcc 	.word	0x0002edcc
   1b2e0:	0002ee10 	.word	0x0002ee10
   1b2e4:	0002e80c 	.word	0x0002e80c

0001b2e8 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b2e8:	b900      	cbnz	r0, 1b2ec <ticker_op_cb+0x4>
   1b2ea:	4770      	bx	lr
{
   1b2ec:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b2ee:	4a07      	ldr	r2, [pc, #28]	; (1b30c <ticker_op_cb+0x24>)
   1b2f0:	4907      	ldr	r1, [pc, #28]	; (1b310 <ticker_op_cb+0x28>)
   1b2f2:	4808      	ldr	r0, [pc, #32]	; (1b314 <ticker_op_cb+0x2c>)
   1b2f4:	f240 13db 	movw	r3, #475	; 0x1db
   1b2f8:	f009 f8dc 	bl	244b4 <printk>
   1b2fc:	4040      	eors	r0, r0
   1b2fe:	f380 8811 	msr	BASEPRI, r0
   1b302:	f04f 0003 	mov.w	r0, #3
   1b306:	df02      	svc	2
}
   1b308:	bd08      	pop	{r3, pc}
   1b30a:	bf00      	nop
   1b30c:	0002edcc 	.word	0x0002edcc
   1b310:	0002ec38 	.word	0x0002ec38
   1b314:	0002e80c 	.word	0x0002e80c

0001b318 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   1b318:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1b31a:	4a07      	ldr	r2, [pc, #28]	; (1b338 <ticker_op_stop_adv_cb.part.0+0x20>)
   1b31c:	4907      	ldr	r1, [pc, #28]	; (1b33c <ticker_op_stop_adv_cb.part.0+0x24>)
   1b31e:	4808      	ldr	r0, [pc, #32]	; (1b340 <ticker_op_stop_adv_cb.part.0+0x28>)
   1b320:	f240 13d3 	movw	r3, #467	; 0x1d3
   1b324:	f009 f8c6 	bl	244b4 <printk>
   1b328:	4040      	eors	r0, r0
   1b32a:	f380 8811 	msr	BASEPRI, r0
   1b32e:	f04f 0003 	mov.w	r0, #3
   1b332:	df02      	svc	2
}
   1b334:	bd08      	pop	{r3, pc}
   1b336:	bf00      	nop
   1b338:	0002edcc 	.word	0x0002edcc
   1b33c:	0002ee24 	.word	0x0002ee24
   1b340:	0002e80c 	.word	0x0002e80c

0001b344 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1b344:	2801      	cmp	r0, #1
   1b346:	d000      	beq.n	1b34a <ticker_op_stop_adv_cb+0x6>
   1b348:	4770      	bx	lr
{
   1b34a:	b510      	push	{r4, lr}
   1b34c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1b34e:	f7fb ff2f 	bl	171b0 <ull_disable_mark_get>
   1b352:	4284      	cmp	r4, r0
   1b354:	d003      	beq.n	1b35e <ticker_op_stop_adv_cb+0x1a>
}
   1b356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b35a:	f7ff bfdd 	b.w	1b318 <ticker_op_stop_adv_cb.part.0>
   1b35e:	bd10      	pop	{r4, pc}

0001b360 <ull_slave_ticker_cb>:
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b360:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
{
   1b364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b366:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b368:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b36c:	459c      	cmp	ip, r3
   1b36e:	d02a      	beq.n	1b3c6 <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1b370:	4605      	mov	r5, r0
   1b372:	460f      	mov	r7, r1
   1b374:	4601      	mov	r1, r0
   1b376:	4620      	mov	r0, r4
   1b378:	4616      	mov	r6, r2
   1b37a:	f7e5 fed1 	bl	1120 <ull_conn_llcp>
		if (ret) {
   1b37e:	bb10      	cbnz	r0, 1b3c6 <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   1b380:	7c23      	ldrb	r3, [r4, #16]
   1b382:	3301      	adds	r3, #1
   1b384:	b2db      	uxtb	r3, r3
   1b386:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   1b388:	b363      	cbz	r3, 1b3e4 <ull_slave_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   1b38a:	f8df c088 	ldr.w	ip, [pc, #136]	; 1b414 <ull_slave_ticker_cb+0xb4>
	mfy.param = &p;
   1b38e:	4b1c      	ldr	r3, [pc, #112]	; (1b400 <ull_slave_ticker_cb+0xa0>)
	p.ticks_at_expire = ticks_at_expire;
   1b390:	f8cc 5000 	str.w	r5, [ip]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b394:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1b396:	f104 0e1c 	add.w	lr, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b39a:	4611      	mov	r1, r2
   1b39c:	2001      	movs	r0, #1
	mfy.param = &p;
   1b39e:	f8c3 c008 	str.w	ip, [r3, #8]
	p.remainder = remainder;
   1b3a2:	f8cc 7004 	str.w	r7, [ip, #4]
	p.lazy = lazy;
   1b3a6:	f8ac 6008 	strh.w	r6, [ip, #8]
	p.param = &conn->lll;
   1b3aa:	f8cc e00c 	str.w	lr, [ip, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b3ae:	f7f7 feaf 	bl	13110 <mayfly_enqueue>
	LL_ASSERT(!err);
   1b3b2:	b948      	cbnz	r0, 1b3c8 <ull_slave_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   1b3b4:	20ff      	movs	r0, #255	; 0xff
   1b3b6:	f7ff f9c1 	bl	1a73c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1b3ba:	4620      	mov	r0, r4
   1b3bc:	21ff      	movs	r1, #255	; 0xff
}
   1b3be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1b3c2:	f7ff bc15 	b.w	1abf0 <ull_conn_tx_lll_enqueue>
}
   1b3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   1b3c8:	4a0e      	ldr	r2, [pc, #56]	; (1b404 <ull_slave_ticker_cb+0xa4>)
   1b3ca:	490f      	ldr	r1, [pc, #60]	; (1b408 <ull_slave_ticker_cb+0xa8>)
   1b3cc:	480f      	ldr	r0, [pc, #60]	; (1b40c <ull_slave_ticker_cb+0xac>)
   1b3ce:	f240 1397 	movw	r3, #407	; 0x197
   1b3d2:	f009 f86f 	bl	244b4 <printk>
   1b3d6:	4040      	eors	r0, r0
   1b3d8:	f380 8811 	msr	BASEPRI, r0
   1b3dc:	f04f 0003 	mov.w	r0, #3
   1b3e0:	df02      	svc	2
   1b3e2:	e7e7      	b.n	1b3b4 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   1b3e4:	4a07      	ldr	r2, [pc, #28]	; (1b404 <ull_slave_ticker_cb+0xa4>)
   1b3e6:	490a      	ldr	r1, [pc, #40]	; (1b410 <ull_slave_ticker_cb+0xb0>)
   1b3e8:	4808      	ldr	r0, [pc, #32]	; (1b40c <ull_slave_ticker_cb+0xac>)
   1b3ea:	f240 138b 	movw	r3, #395	; 0x18b
   1b3ee:	f009 f861 	bl	244b4 <printk>
   1b3f2:	4040      	eors	r0, r0
   1b3f4:	f380 8811 	msr	BASEPRI, r0
   1b3f8:	f04f 0003 	mov.w	r0, #3
   1b3fc:	df02      	svc	2
   1b3fe:	e7c4      	b.n	1b38a <ull_slave_ticker_cb+0x2a>
   1b400:	20000924 	.word	0x20000924
   1b404:	0002edcc 	.word	0x0002edcc
   1b408:	0002e968 	.word	0x0002e968
   1b40c:	0002e80c 	.word	0x0002e80c
   1b410:	0002eaf8 	.word	0x0002eaf8
   1b414:	2000398c 	.word	0x2000398c

0001b418 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1b418:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1b41a:	b123      	cbz	r3, 1b426 <ull_slave_latency_cancel+0xe>
   1b41c:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1b420:	f012 0302 	ands.w	r3, r2, #2
   1b424:	d000      	beq.n	1b428 <ull_slave_latency_cancel+0x10>
   1b426:	4770      	bx	lr
{
   1b428:	b530      	push	{r4, r5, lr}
   1b42a:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   1b42c:	f042 0202 	orr.w	r2, r2, #2
				      (TICKER_ID_CONN_BASE + handle),
   1b430:	3105      	adds	r1, #5
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b432:	4d11      	ldr	r5, [pc, #68]	; (1b478 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   1b434:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b438:	2401      	movs	r4, #1
   1b43a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1b43e:	b2ca      	uxtb	r2, r1
   1b440:	9006      	str	r0, [sp, #24]
   1b442:	9304      	str	r3, [sp, #16]
   1b444:	9300      	str	r3, [sp, #0]
   1b446:	4618      	mov	r0, r3
   1b448:	9505      	str	r5, [sp, #20]
   1b44a:	9403      	str	r4, [sp, #12]
   1b44c:	2103      	movs	r1, #3
   1b44e:	f7f9 f8ef 	bl	14630 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1b452:	f030 0302 	bics.w	r3, r0, #2
   1b456:	d00c      	beq.n	1b472 <ull_slave_latency_cancel+0x5a>
   1b458:	4a08      	ldr	r2, [pc, #32]	; (1b47c <ull_slave_latency_cancel+0x64>)
   1b45a:	4909      	ldr	r1, [pc, #36]	; (1b480 <ull_slave_latency_cancel+0x68>)
   1b45c:	4809      	ldr	r0, [pc, #36]	; (1b484 <ull_slave_latency_cancel+0x6c>)
   1b45e:	f44f 73b0 	mov.w	r3, #352	; 0x160
   1b462:	f009 f827 	bl	244b4 <printk>
   1b466:	4040      	eors	r0, r0
   1b468:	f380 8811 	msr	BASEPRI, r0
   1b46c:	f04f 0003 	mov.w	r0, #3
   1b470:	df02      	svc	2
}
   1b472:	b009      	add	sp, #36	; 0x24
   1b474:	bd30      	pop	{r4, r5, pc}
   1b476:	bf00      	nop
   1b478:	0001b2a1 	.word	0x0001b2a1
   1b47c:	0002edcc 	.word	0x0002edcc
   1b480:	0002ed10 	.word	0x0002ed10
   1b484:	0002e80c 	.word	0x0002e80c

0001b488 <ll_start_enc_req_send>:
{
   1b488:	b570      	push	{r4, r5, r6, lr}
   1b48a:	460e      	mov	r6, r1
   1b48c:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   1b48e:	f7fd f94b 	bl	18728 <ll_connected_get>
	if (!conn) {
   1b492:	2800      	cmp	r0, #0
   1b494:	d040      	beq.n	1b518 <ll_start_enc_req_send+0x90>
	if (error_code) {
   1b496:	4604      	mov	r4, r0
   1b498:	b95e      	cbnz	r6, 1b4b2 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1b49a:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   1b49e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1b4a2:	429a      	cmp	r2, r3
   1b4a4:	d003      	beq.n	1b4ae <ll_start_enc_req_send+0x26>
   1b4a6:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   1b4aa:	2b03      	cmp	r3, #3
   1b4ac:	d026      	beq.n	1b4fc <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   1b4ae:	200c      	movs	r0, #12
}
   1b4b0:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1b4b2:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   1b4b6:	f010 0004 	ands.w	r0, r0, #4
   1b4ba:	d112      	bne.n	1b4e2 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   1b4bc:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1b4c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1b4c4:	429a      	cmp	r2, r3
   1b4c6:	d0f2      	beq.n	1b4ae <ll_start_enc_req_send+0x26>
   1b4c8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1b4cc:	2b03      	cmp	r3, #3
   1b4ce:	d1ee      	bne.n	1b4ae <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b4d0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   1b4d4:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b4d8:	f360 0301 	bfi	r3, r0, #0, #2
   1b4dc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   1b4e0:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1b4e2:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
			if (conn->llcp_terminate.ack !=
   1b4e6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
   1b4ea:	4293      	cmp	r3, r2
   1b4ec:	d1df      	bne.n	1b4ae <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   1b4ee:	3301      	adds	r3, #1
   1b4f0:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
			conn->llcp_terminate.reason_own = error_code;
   1b4f4:	f884 612e 	strb.w	r6, [r4, #302]	; 0x12e
	return 0;
   1b4f8:	2000      	movs	r0, #0
}
   1b4fa:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   1b4fc:	4629      	mov	r1, r5
   1b4fe:	2210      	movs	r2, #16
   1b500:	f200 105d 	addw	r0, r0, #349	; 0x15d
   1b504:	f00b fa4d 	bl	269a2 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b508:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   1b50c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	return 0;
   1b510:	4630      	mov	r0, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b512:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
}
   1b516:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b518:	2002      	movs	r0, #2
}
   1b51a:	bd70      	pop	{r4, r5, r6, pc}

0001b51c <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   1b51c:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   1b51e:	4903      	ldr	r1, [pc, #12]	; (1b52c <ull_chan_map_get+0x10>)
   1b520:	2205      	movs	r2, #5
   1b522:	f00b fa3e 	bl	269a2 <memcpy>

	return count;
   1b526:	4b02      	ldr	r3, [pc, #8]	; (1b530 <ull_chan_map_get+0x14>)
}
   1b528:	7818      	ldrb	r0, [r3, #0]
   1b52a:	bd08      	pop	{r3, pc}
   1b52c:	20000934 	.word	0x20000934
   1b530:	20000c0c 	.word	0x20000c0c

0001b534 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1b534:	b470      	push	{r4, r5, r6}
   1b536:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1b538:	7800      	ldrb	r0, [r0, #0]
   1b53a:	4c1b      	ldr	r4, [pc, #108]	; (1b5a8 <lll_chan_sel_1+0x74>)
   1b53c:	fb02 1101 	mla	r1, r2, r1, r1
   1b540:	180a      	adds	r2, r1, r0
   1b542:	fb84 0102 	smull	r0, r1, r4, r2
   1b546:	4411      	add	r1, r2
   1b548:	1149      	asrs	r1, r1, #5
   1b54a:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   1b54e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   1b552:	1a51      	subs	r1, r2, r1
   1b554:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b556:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1b558:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b55a:	5c9c      	ldrb	r4, [r3, r2]
{
   1b55c:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b560:	f001 0107 	and.w	r1, r1, #7
   1b564:	410c      	asrs	r4, r1
   1b566:	f014 0401 	ands.w	r4, r4, #1
   1b56a:	d11b      	bne.n	1b5a4 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1b56c:	fbb0 f2f5 	udiv	r2, r0, r5
   1b570:	fb05 0212 	mls	r2, r5, r2, r0
   1b574:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1b576:	1e5d      	subs	r5, r3, #1
   1b578:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1b57a:	f104 0108 	add.w	r1, r4, #8
   1b57e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1b582:	4620      	mov	r0, r4
   1b584:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   1b586:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1b58a:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1b58e:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1b592:	d002      	beq.n	1b59a <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   1b594:	b132      	cbz	r2, 1b5a4 <lll_chan_sel_1+0x70>
				chan_index--;
   1b596:	3a01      	subs	r2, #1
   1b598:	b2d2      	uxtb	r2, r2
			chan_next++;
   1b59a:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1b59c:	4284      	cmp	r4, r0
   1b59e:	d1f2      	bne.n	1b586 <lll_chan_sel_1+0x52>
	while (byte_count--) {
   1b5a0:	42b5      	cmp	r5, r6
   1b5a2:	d1ea      	bne.n	1b57a <lll_chan_sel_1+0x46>
}
   1b5a4:	bc70      	pop	{r4, r5, r6}
   1b5a6:	4770      	bx	lr
   1b5a8:	dd67c8a7 	.word	0xdd67c8a7

0001b5ac <lll_chan_sel_2>:
{
   1b5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1b5ae:	4f2f      	ldr	r7, [pc, #188]	; (1b66c <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1b5b0:	4e2f      	ldr	r6, [pc, #188]	; (1b670 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   1b5b2:	ea80 0501 	eor.w	r5, r0, r1
   1b5b6:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1b5b8:	0a28      	lsrs	r0, r5, #8
   1b5ba:	b2ed      	uxtb	r5, r5
   1b5bc:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   1b5c0:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1b5c4:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1b5c8:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   1b5cc:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1b5d0:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1b5d4:	ea4c 0c0e 	orr.w	ip, ip, lr
   1b5d8:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1b5da:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   1b5de:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   1b5e2:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   1b5e6:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   1b5ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1b5ee:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1b5f2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1b5f6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   1b5fa:	3c01      	subs	r4, #1
   1b5fc:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   1b5fe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1b602:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1b604:	d1d8      	bne.n	1b5b8 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   1b606:	481b      	ldr	r0, [pc, #108]	; (1b674 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   1b608:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   1b60a:	fba0 5001 	umull	r5, r0, r0, r1
   1b60e:	1a0d      	subs	r5, r1, r0
   1b610:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   1b614:	0940      	lsrs	r0, r0, #5
   1b616:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   1b61a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   1b61e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b620:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   1b624:	f000 0607 	and.w	r6, r0, #7
   1b628:	5d55      	ldrb	r5, [r2, r5]
   1b62a:	4135      	asrs	r5, r6
   1b62c:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   1b62e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b630:	d41a      	bmi.n	1b668 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1b632:	fb01 f303 	mul.w	r3, r1, r3
   1b636:	1e56      	subs	r6, r2, #1
   1b638:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1b63c:	3204      	adds	r2, #4
		bite = *chan_map;
   1b63e:	f104 0508 	add.w	r5, r4, #8
   1b642:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1b646:	4620      	mov	r0, r4
   1b648:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   1b64a:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1b64e:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   1b652:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1b656:	d002      	beq.n	1b65e <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1b658:	b133      	cbz	r3, 1b668 <lll_chan_sel_2+0xbc>
				chan_index--;
   1b65a:	3b01      	subs	r3, #1
   1b65c:	b2db      	uxtb	r3, r3
			chan_next++;
   1b65e:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   1b660:	42a0      	cmp	r0, r4
   1b662:	d1f2      	bne.n	1b64a <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1b664:	42b2      	cmp	r2, r6
   1b666:	d1ea      	bne.n	1b63e <lll_chan_sel_2+0x92>
}
   1b668:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b66a:	bf00      	nop
   1b66c:	00022110 	.word	0x00022110
   1b670:	00088440 	.word	0x00088440
   1b674:	bacf914d 	.word	0xbacf914d

0001b678 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   1b678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b67c:	4688      	mov	r8, r1
	int i;

	if (free) {
   1b67e:	4615      	mov	r5, r2
   1b680:	b10a      	cbz	r2, 1b686 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   1b682:	23ff      	movs	r3, #255	; 0xff
   1b684:	7013      	strb	r3, [r2, #0]
   1b686:	4e17      	ldr	r6, [pc, #92]	; (1b6e4 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1b688:	f000 0701 	and.w	r7, r0, #1
   1b68c:	f106 0902 	add.w	r9, r6, #2
{
   1b690:	2400      	movs	r4, #0
   1b692:	e004      	b.n	1b69e <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1b694:	42ba      	cmp	r2, r7
   1b696:	d014      	beq.n	1b6c2 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   1b698:	3401      	adds	r4, #1
   1b69a:	2c08      	cmp	r4, #8
   1b69c:	d00e      	beq.n	1b6bc <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1b69e:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1b6a2:	07d9      	lsls	r1, r3, #31
   1b6a4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1b6a8:	d4f4      	bmi.n	1b694 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1b6aa:	2d00      	cmp	r5, #0
   1b6ac:	d0f4      	beq.n	1b698 <wl_find+0x20>
   1b6ae:	782b      	ldrb	r3, [r5, #0]
   1b6b0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1b6b2:	bf08      	it	eq
   1b6b4:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   1b6b6:	3401      	adds	r4, #1
   1b6b8:	2c08      	cmp	r4, #8
   1b6ba:	d1f0      	bne.n	1b69e <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   1b6bc:	20ff      	movs	r0, #255	; 0xff
}
   1b6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1b6c2:	2206      	movs	r2, #6
   1b6c4:	4641      	mov	r1, r8
   1b6c6:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   1b6ca:	f00b f95a 	bl	26982 <memcmp>
   1b6ce:	b130      	cbz	r0, 1b6de <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1b6d0:	2d00      	cmp	r5, #0
   1b6d2:	d0e1      	beq.n	1b698 <wl_find+0x20>
   1b6d4:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1b6d8:	07db      	lsls	r3, r3, #31
   1b6da:	d4dd      	bmi.n	1b698 <wl_find+0x20>
   1b6dc:	e7e7      	b.n	1b6ae <wl_find+0x36>
			return i;
   1b6de:	b2e0      	uxtb	r0, r4
   1b6e0:	e7ed      	b.n	1b6be <wl_find+0x46>
   1b6e2:	bf00      	nop
   1b6e4:	20003bcc 	.word	0x20003bcc

0001b6e8 <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   1b6e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6ec:	4f21      	ldr	r7, [pc, #132]	; (1b774 <wl_update+0x8c>)
   1b6ee:	4d22      	ldr	r5, [pc, #136]	; (1b778 <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b6f0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1b77c <wl_update+0x94>
   1b6f4:	f8df a088 	ldr.w	sl, [pc, #136]	; 1b780 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1b6f8:	f1a7 0802 	sub.w	r8, r7, #2
   1b6fc:	f1a5 0b02 	sub.w	fp, r5, #2
{
   1b700:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   1b702:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1b706:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   1b708:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b70c:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   1b70e:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b712:	4629      	mov	r1, r5
   1b714:	f107 0706 	add.w	r7, r7, #6
   1b718:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   1b71c:	d022      	beq.n	1b764 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b71e:	f899 3000 	ldrb.w	r3, [r9]
   1b722:	b163      	cbz	r3, 1b73e <wl_update+0x56>
		j = wl[i].rl_idx;
   1b724:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b728:	2b07      	cmp	r3, #7
   1b72a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1b72e:	d806      	bhi.n	1b73e <wl_update+0x56>
   1b730:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   1b734:	f013 0f04 	tst.w	r3, #4
   1b738:	d001      	beq.n	1b73e <wl_update+0x56>
   1b73a:	06db      	lsls	r3, r3, #27
   1b73c:	d512      	bpl.n	1b764 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1b73e:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b742:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   1b746:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1b74a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b74e:	40a3      	lsls	r3, r4
   1b750:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   1b754:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b758:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   1b75c:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b760:	f00b f91f 	bl	269a2 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   1b764:	3401      	adds	r4, #1
   1b766:	2c08      	cmp	r4, #8
   1b768:	f105 0508 	add.w	r5, r5, #8
   1b76c:	d1c9      	bne.n	1b702 <wl_update+0x1a>
}
   1b76e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b772:	bf00      	nop
   1b774:	20003c0e 	.word	0x20003c0e
   1b778:	20003bce 	.word	0x20003bce
   1b77c:	2000915b 	.word	0x2000915b
   1b780:	20003a54 	.word	0x20003a54

0001b784 <rl_update>:
{
   1b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b788:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1b7ec <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   1b78c:	4d16      	ldr	r5, [pc, #88]	; (1b7e8 <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b78e:	f108 0701 	add.w	r7, r8, #1
   1b792:	1cae      	adds	r6, r5, #2
{
   1b794:	2400      	movs	r4, #0
   1b796:	e002      	b.n	1b79e <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b798:	3401      	adds	r4, #1
   1b79a:	2c08      	cmp	r4, #8
   1b79c:	d021      	beq.n	1b7e2 <rl_update+0x5e>
		if (rl[i].taken) {
   1b79e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b7a2:	00d9      	lsls	r1, r3, #3
   1b7a4:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   1b7a8:	07da      	lsls	r2, r3, #31
   1b7aa:	d5f5      	bpl.n	1b798 <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b7ac:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   1b7ae:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1b7b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   1b7b6:	f04f 0e01 	mov.w	lr, #1
   1b7ba:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b7be:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b7c0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b7c4:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   1b7c6:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b7ca:	4439      	add	r1, r7
   1b7cc:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   1b7d0:	2206      	movs	r2, #6
   1b7d2:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b7d4:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   1b7d6:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1b7da:	f00b f8e2 	bl	269a2 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b7de:	2c08      	cmp	r4, #8
   1b7e0:	d1dd      	bne.n	1b79e <rl_update+0x1a>
}
   1b7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b7e6:	bf00      	nop
   1b7e8:	20003b94 	.word	0x20003b94
   1b7ec:	20003a54 	.word	0x20003a54

0001b7f0 <rl_access_check.part.0>:
static int rl_access_check(bool check_ar)
   1b7f0:	b508      	push	{r3, lr}
		(IS_ENABLED(CONFIG_BT_OBSERVER) && ull_scan_is_enabled(0)))
   1b7f2:	2000      	movs	r0, #0
   1b7f4:	f7fc fb96 	bl	17f24 <ull_scan_is_enabled>
}
   1b7f8:	fab0 f080 	clz	r0, r0
   1b7fc:	0940      	lsrs	r0, r0, #5
   1b7fe:	bd08      	pop	{r3, pc}

0001b800 <ll_wl_size_get>:
}
   1b800:	2008      	movs	r0, #8
   1b802:	4770      	bx	lr

0001b804 <ll_wl_clear>:
{
   1b804:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1b806:	2000      	movs	r0, #0
   1b808:	f7fc f988 	bl	17b1c <ull_adv_filter_pol_get>
   1b80c:	bb00      	cbnz	r0, 1b850 <ll_wl_clear+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b80e:	f7fc fb9d 	bl	17f4c <ull_scan_filter_pol_get>
   1b812:	f010 0001 	ands.w	r0, r0, #1
   1b816:	d11b      	bne.n	1b850 <ll_wl_clear+0x4c>
   1b818:	4a0e      	ldr	r2, [pc, #56]	; (1b854 <ll_wl_clear+0x50>)
			rl[j].wl = 0U;
   1b81a:	4c0f      	ldr	r4, [pc, #60]	; (1b858 <ll_wl_clear+0x54>)
		uint8_t j = wl[i].rl_idx;
   1b81c:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1b820:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1b822:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   1b824:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1b828:	d805      	bhi.n	1b836 <ll_wl_clear+0x32>
			rl[j].wl = 0U;
   1b82a:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1b82e:	f36f 1345 	bfc	r3, #5, #1
   1b832:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   1b836:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1b83a:	f36f 0300 	bfc	r3, #0, #1
   1b83e:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1b842:	3001      	adds	r0, #1
   1b844:	2808      	cmp	r0, #8
   1b846:	d1e9      	bne.n	1b81c <ll_wl_clear+0x18>
	wl_anon = 0U;
   1b848:	4b04      	ldr	r3, [pc, #16]	; (1b85c <ll_wl_clear+0x58>)
   1b84a:	2000      	movs	r0, #0
   1b84c:	7018      	strb	r0, [r3, #0]
}
   1b84e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b850:	200c      	movs	r0, #12
}
   1b852:	bd10      	pop	{r4, pc}
   1b854:	20003bcc 	.word	0x20003bcc
   1b858:	20003a54 	.word	0x20003a54
   1b85c:	2000915c 	.word	0x2000915c

0001b860 <ll_wl_remove>:
{
   1b860:	b538      	push	{r3, r4, r5, lr}
   1b862:	4604      	mov	r4, r0
	if (ull_adv_filter_pol_get(0)) {
   1b864:	2000      	movs	r0, #0
   1b866:	f7fc f959 	bl	17b1c <ull_adv_filter_pol_get>
   1b86a:	b978      	cbnz	r0, 1b88c <ll_wl_remove+0x2c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b86c:	f7fc fb6e 	bl	17f4c <ull_scan_filter_pol_get>
   1b870:	f010 0501 	ands.w	r5, r0, #1
   1b874:	d10a      	bne.n	1b88c <ll_wl_remove+0x2c>
	if (addr->type == ADDR_TYPE_ANON) {
   1b876:	7820      	ldrb	r0, [r4, #0]
   1b878:	28ff      	cmp	r0, #255	; 0xff
   1b87a:	d009      	beq.n	1b890 <ll_wl_remove+0x30>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1b87c:	1c61      	adds	r1, r4, #1
   1b87e:	462a      	mov	r2, r5
   1b880:	f7ff fefa 	bl	1b678 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1b884:	2807      	cmp	r0, #7
   1b886:	d907      	bls.n	1b898 <ll_wl_remove+0x38>
   1b888:	2002      	movs	r0, #2
}
   1b88a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b88c:	200c      	movs	r0, #12
}
   1b88e:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   1b890:	4b0d      	ldr	r3, [pc, #52]	; (1b8c8 <ll_wl_remove+0x68>)
   1b892:	701d      	strb	r5, [r3, #0]
		return 0;
   1b894:	4628      	mov	r0, r5
}
   1b896:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   1b898:	4a0c      	ldr	r2, [pc, #48]	; (1b8cc <ll_wl_remove+0x6c>)
   1b89a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1b89e:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1b8a0:	2b07      	cmp	r3, #7
   1b8a2:	d808      	bhi.n	1b8b6 <ll_wl_remove+0x56>
			rl[j].wl = 0U;
   1b8a4:	490a      	ldr	r1, [pc, #40]	; (1b8d0 <ll_wl_remove+0x70>)
   1b8a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b8aa:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   1b8ae:	f365 1445 	bfi	r4, r5, #5, #1
   1b8b2:	f801 4033 	strb.w	r4, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   1b8b6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1b8ba:	f36f 0300 	bfc	r3, #0, #1
   1b8be:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   1b8c2:	2000      	movs	r0, #0
}
   1b8c4:	bd38      	pop	{r3, r4, r5, pc}
   1b8c6:	bf00      	nop
   1b8c8:	2000915c 	.word	0x2000915c
   1b8cc:	20003bcc 	.word	0x20003bcc
   1b8d0:	20003a54 	.word	0x20003a54

0001b8d4 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b8d4:	2807      	cmp	r0, #7
{
   1b8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b8da:	4604      	mov	r4, r0
   1b8dc:	460d      	mov	r5, r1
   1b8de:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b8e0:	d817      	bhi.n	1b912 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   1b8e2:	4e19      	ldr	r6, [pc, #100]	; (1b948 <ll_rl_id_addr_get+0x74>)
   1b8e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b8e8:	00a7      	lsls	r7, r4, #2
   1b8ea:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1b8ee:	07db      	lsls	r3, r3, #31
   1b8f0:	d51c      	bpl.n	1b92c <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b8f2:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b8f4:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b8f6:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   1b8fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b8fe:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b902:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b904:	4640      	mov	r0, r8
   1b906:	3101      	adds	r1, #1
}
   1b908:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b90c:	2206      	movs	r2, #6
   1b90e:	f00b b848 	b.w	269a2 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b912:	4a0e      	ldr	r2, [pc, #56]	; (1b94c <ll_rl_id_addr_get+0x78>)
   1b914:	490e      	ldr	r1, [pc, #56]	; (1b950 <ll_rl_id_addr_get+0x7c>)
   1b916:	480f      	ldr	r0, [pc, #60]	; (1b954 <ll_rl_id_addr_get+0x80>)
   1b918:	23e9      	movs	r3, #233	; 0xe9
   1b91a:	f008 fdcb 	bl	244b4 <printk>
   1b91e:	4040      	eors	r0, r0
   1b920:	f380 8811 	msr	BASEPRI, r0
   1b924:	f04f 0003 	mov.w	r0, #3
   1b928:	df02      	svc	2
   1b92a:	e7da      	b.n	1b8e2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1b92c:	4a07      	ldr	r2, [pc, #28]	; (1b94c <ll_rl_id_addr_get+0x78>)
   1b92e:	490a      	ldr	r1, [pc, #40]	; (1b958 <ll_rl_id_addr_get+0x84>)
   1b930:	4808      	ldr	r0, [pc, #32]	; (1b954 <ll_rl_id_addr_get+0x80>)
   1b932:	23ea      	movs	r3, #234	; 0xea
   1b934:	f008 fdbe 	bl	244b4 <printk>
   1b938:	4040      	eors	r0, r0
   1b93a:	f380 8811 	msr	BASEPRI, r0
   1b93e:	f04f 0003 	mov.w	r0, #3
   1b942:	df02      	svc	2
   1b944:	e7d5      	b.n	1b8f2 <ll_rl_id_addr_get+0x1e>
   1b946:	bf00      	nop
   1b948:	20003a54 	.word	0x20003a54
   1b94c:	0002ee54 	.word	0x0002ee54
   1b950:	0002ee98 	.word	0x0002ee98
   1b954:	0002e80c 	.word	0x0002e80c
   1b958:	0002eea4 	.word	0x0002eea4

0001b95c <ll_rl_size_get>:
   1b95c:	2008      	movs	r0, #8
   1b95e:	4770      	bx	lr

0001b960 <ll_rl_clear>:
{
   1b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b962:	2000      	movs	r0, #0
   1b964:	f7fc f8ce 	bl	17b04 <ull_adv_is_enabled>
		? 0 : 1;
   1b968:	b108      	cbz	r0, 1b96e <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b96a:	200c      	movs	r0, #12
}
   1b96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b96e:	4604      	mov	r4, r0
   1b970:	f7ff ff3e 	bl	1b7f0 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   1b974:	2800      	cmp	r0, #0
   1b976:	d0f8      	beq.n	1b96a <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   1b978:	4b1a      	ldr	r3, [pc, #104]	; (1b9e4 <ll_rl_clear+0x84>)
	peer_irk_count = 0U;
   1b97a:	491b      	ldr	r1, [pc, #108]	; (1b9e8 <ll_rl_clear+0x88>)
		rl[i].taken = 0U;
   1b97c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   1b980:	f893 c000 	ldrb.w	ip, [r3]
   1b984:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   1b988:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   1b98c:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   1b990:	f893 00c8 	ldrb.w	r0, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   1b994:	700c      	strb	r4, [r1, #0]
		rl[i].taken = 0U;
   1b996:	f364 0200 	bfi	r2, r4, #0, #1
   1b99a:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   1b99e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   1b9a2:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1b9a6:	f364 0000 	bfi	r0, r4, #0, #1
   1b9aa:	f364 0c00 	bfi	ip, r4, #0, #1
   1b9ae:	f364 0700 	bfi	r7, r4, #0, #1
   1b9b2:	f364 0600 	bfi	r6, r4, #0, #1
   1b9b6:	f364 0500 	bfi	r5, r4, #0, #1
   1b9ba:	f364 0100 	bfi	r1, r4, #0, #1
   1b9be:	f364 0200 	bfi	r2, r4, #0, #1
   1b9c2:	f883 00c8 	strb.w	r0, [r3, #200]	; 0xc8
   1b9c6:	f883 c000 	strb.w	ip, [r3]
   1b9ca:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   1b9ce:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   1b9d2:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   1b9d6:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   1b9da:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return 0;
   1b9de:	4620      	mov	r0, r4
}
   1b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9e2:	bf00      	nop
   1b9e4:	20003a54 	.word	0x20003a54
   1b9e8:	2000915a 	.word	0x2000915a

0001b9ec <ll_rl_enable>:
{
   1b9ec:	b538      	push	{r3, r4, r5, lr}
   1b9ee:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b9f0:	2000      	movs	r0, #0
   1b9f2:	f7fc f887 	bl	17b04 <ull_adv_is_enabled>
		? 0 : 1;
   1b9f6:	b108      	cbz	r0, 1b9fc <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b9f8:	200c      	movs	r0, #12
}
   1b9fa:	bd38      	pop	{r3, r4, r5, pc}
   1b9fc:	4604      	mov	r4, r0
   1b9fe:	f7ff fef7 	bl	1b7f0 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   1ba02:	2800      	cmp	r0, #0
   1ba04:	d0f8      	beq.n	1b9f8 <ll_rl_enable+0xc>
	switch (enable) {
   1ba06:	b13d      	cbz	r5, 1ba18 <ll_rl_enable+0x2c>
   1ba08:	2d01      	cmp	r5, #1
   1ba0a:	d001      	beq.n	1ba10 <ll_rl_enable+0x24>
   1ba0c:	2012      	movs	r0, #18
}
   1ba0e:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 1U;
   1ba10:	4b03      	ldr	r3, [pc, #12]	; (1ba20 <ll_rl_enable+0x34>)
   1ba12:	701d      	strb	r5, [r3, #0]
	return 0;
   1ba14:	4620      	mov	r0, r4
}
   1ba16:	bd38      	pop	{r3, r4, r5, pc}
		rl_enable = 0U;
   1ba18:	4b01      	ldr	r3, [pc, #4]	; (1ba20 <ll_rl_enable+0x34>)
   1ba1a:	701d      	strb	r5, [r3, #0]
	return 0;
   1ba1c:	4628      	mov	r0, r5
}
   1ba1e:	bd38      	pop	{r3, r4, r5, pc}
   1ba20:	2000915b 	.word	0x2000915b

0001ba24 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1ba24:	4a03      	ldr	r2, [pc, #12]	; (1ba34 <ll_rl_timeout_set+0x10>)
   1ba26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ba2a:	fb03 f300 	mul.w	r3, r3, r0
   1ba2e:	6013      	str	r3, [r2, #0]
}
   1ba30:	4770      	bx	lr
   1ba32:	bf00      	nop
   1ba34:	20003bc8 	.word	0x20003bc8

0001ba38 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1ba38:	b1b0      	cbz	r0, 1ba68 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1ba3a:	4b0d      	ldr	r3, [pc, #52]	; (1ba70 <ull_filter_adv_scan_state_cb+0x38>)
   1ba3c:	681a      	ldr	r2, [r3, #0]
{
   1ba3e:	b510      	push	{r4, lr}
   1ba40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ba44:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ba48:	2100      	movs	r1, #0
   1ba4a:	fbe3 0102 	umlal	r0, r1, r3, r2
   1ba4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ba52:	2300      	movs	r3, #0
   1ba54:	f7e4 fba4 	bl	1a0 <__aeabi_uldivmod>
}
   1ba58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ba5c:	4602      	mov	r2, r0
   1ba5e:	460b      	mov	r3, r1
   1ba60:	4804      	ldr	r0, [pc, #16]	; (1ba74 <ull_filter_adv_scan_state_cb+0x3c>)
   1ba62:	4905      	ldr	r1, [pc, #20]	; (1ba78 <ull_filter_adv_scan_state_cb+0x40>)
   1ba64:	f008 b982 	b.w	23d6c <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   1ba68:	4803      	ldr	r0, [pc, #12]	; (1ba78 <ull_filter_adv_scan_state_cb+0x40>)
   1ba6a:	f011 bda3 	b.w	2d5b4 <k_delayed_work_cancel>
   1ba6e:	bf00      	nop
   1ba70:	20003bc8 	.word	0x20003bc8
   1ba74:	20001fd8 	.word	0x20001fd8
   1ba78:	200019c0 	.word	0x200019c0

0001ba7c <ull_filter_adv_update>:
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1ba7c:	4a0d      	ldr	r2, [pc, #52]	; (1bab4 <ull_filter_adv_update+0x38>)
{
   1ba7e:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1ba80:	2300      	movs	r3, #0
   1ba82:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   1ba84:	b970      	cbnz	r0, 1baa4 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   1ba86:	4b0c      	ldr	r3, [pc, #48]	; (1bab8 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   1ba88:	4a0c      	ldr	r2, [pc, #48]	; (1babc <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   1ba8a:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1ba8c:	2000      	movs	r0, #0
   1ba8e:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1ba90:	b903      	cbnz	r3, 1ba94 <ull_filter_adv_update+0x18>
}
   1ba92:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   1ba94:	f7fc fa46 	bl	17f24 <ull_scan_is_enabled>
	if (rl_enable &&
   1ba98:	2800      	cmp	r0, #0
   1ba9a:	d1fa      	bne.n	1ba92 <ull_filter_adv_update+0x16>
}
   1ba9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1baa0:	f7ff be70 	b.w	1b784 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   1baa4:	4618      	mov	r0, r3
   1baa6:	f7fc fa51 	bl	17f4c <ull_scan_filter_pol_get>
	if (adv_fp &&
   1baaa:	07c3      	lsls	r3, r0, #31
   1baac:	d4eb      	bmi.n	1ba86 <ull_filter_adv_update+0xa>
		wl_update();
   1baae:	f7ff fe1b 	bl	1b6e8 <wl_update>
   1bab2:	e7e8      	b.n	1ba86 <ull_filter_adv_update+0xa>
   1bab4:	20003c0c 	.word	0x20003c0c
   1bab8:	2000915b 	.word	0x2000915b
   1babc:	20003b94 	.word	0x20003b94

0001bac0 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   1bac0:	4a0e      	ldr	r2, [pc, #56]	; (1bafc <ull_filter_scan_update+0x3c>)
{
   1bac2:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1bac4:	2300      	movs	r3, #0
   1bac6:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   1bac8:	07c2      	lsls	r2, r0, #31
   1baca:	d40e      	bmi.n	1baea <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   1bacc:	4b0c      	ldr	r3, [pc, #48]	; (1bb00 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   1bace:	4a0d      	ldr	r2, [pc, #52]	; (1bb04 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   1bad0:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1bad2:	2000      	movs	r0, #0
   1bad4:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1bad6:	b903      	cbnz	r3, 1bada <ull_filter_scan_update+0x1a>
}
   1bad8:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   1bada:	f7fc f813 	bl	17b04 <ull_adv_is_enabled>
	if (rl_enable &&
   1bade:	2800      	cmp	r0, #0
   1bae0:	d1fa      	bne.n	1bad8 <ull_filter_scan_update+0x18>
}
   1bae2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1bae6:	f7ff be4d 	b.w	1b784 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   1baea:	4618      	mov	r0, r3
   1baec:	f7fc f816 	bl	17b1c <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   1baf0:	2800      	cmp	r0, #0
   1baf2:	d1eb      	bne.n	1bacc <ull_filter_scan_update+0xc>
		wl_update();
   1baf4:	f7ff fdf8 	bl	1b6e8 <wl_update>
   1baf8:	e7e8      	b.n	1bacc <ull_filter_scan_update+0xc>
   1bafa:	bf00      	nop
   1bafc:	20003c0c 	.word	0x20003c0c
   1bb00:	2000915b 	.word	0x2000915b
   1bb04:	20003b94 	.word	0x20003b94

0001bb08 <ull_filter_adv_pdu_update>:
{
   1bb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx = adv->lll.rl_idx;
   1bb0c:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1bb10:	2f07      	cmp	r7, #7
{
   1bb12:	4605      	mov	r5, r0
   1bb14:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   1bb16:	f101 0602 	add.w	r6, r1, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1bb1a:	d845      	bhi.n	1bba8 <ull_filter_adv_pdu_update+0xa0>
   1bb1c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1bc14 <ull_filter_adv_pdu_update+0x10c>
   1bb20:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1bb24:	ea4f 0987 	mov.w	r9, r7, lsl #2
   1bb28:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   1bb2c:	0719      	lsls	r1, r3, #28
   1bb2e:	d529      	bpl.n	1bb84 <ull_filter_adv_pdu_update+0x7c>
		LL_ASSERT(rl[idx].rpas_ready);
   1bb30:	079a      	lsls	r2, r3, #30
   1bb32:	d55b      	bpl.n	1bbec <ull_filter_adv_pdu_update+0xe4>
		pdu->tx_addr = 1;
   1bb34:	7822      	ldrb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1bb36:	eb09 0307 	add.w	r3, r9, r7
   1bb3a:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
		pdu->tx_addr = 1;
   1bb3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1bb42:	6a59      	ldr	r1, [r3, #36]	; 0x24
		pdu->tx_addr = 1;
   1bb44:	7022      	strb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   1bb46:	4630      	mov	r0, r6
   1bb48:	2206      	movs	r2, #6
   1bb4a:	f00a ff2a 	bl	269a2 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bb4e:	7823      	ldrb	r3, [r4, #0]
   1bb50:	f003 030f 	and.w	r3, r3, #15
   1bb54:	2b01      	cmp	r3, #1
   1bb56:	d125      	bne.n	1bba4 <ull_filter_adv_pdu_update+0x9c>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1bb58:	44b9      	add	r9, r7
   1bb5a:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1bb5e:	075b      	lsls	r3, r3, #29
   1bb60:	d434      	bmi.n	1bbcc <ull_filter_adv_pdu_update+0xc4>
			pdu->rx_addr = adv->id_addr_type;
   1bb62:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
   1bb66:	7822      	ldrb	r2, [r4, #0]
   1bb68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1bb6c:	4620      	mov	r0, r4
   1bb6e:	f363 12c7 	bfi	r2, r3, #7, #1
   1bb72:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1bb76:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
   1bb7a:	2206      	movs	r2, #6
}
   1bb7c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1bb80:	f00a bf0f 	b.w	269a2 <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   1bb84:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   1bb88:	7823      	ldrb	r3, [r4, #0]
   1bb8a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1bb8e:	f360 1386 	bfi	r3, r0, #6, #1
   1bb92:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   1bb94:	4631      	mov	r1, r6
   1bb96:	f7f8 fde7 	bl	14768 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bb9a:	7823      	ldrb	r3, [r4, #0]
   1bb9c:	f003 030f 	and.w	r3, r3, #15
   1bba0:	2b01      	cmp	r3, #1
   1bba2:	d0d9      	beq.n	1bb58 <ull_filter_adv_pdu_update+0x50>
}
   1bba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = adv->own_addr_type & 0x1;
   1bba8:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   1bbac:	780b      	ldrb	r3, [r1, #0]
   1bbae:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1bbb2:	f360 1386 	bfi	r3, r0, #6, #1
   1bbb6:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   1bbb8:	4631      	mov	r1, r6
   1bbba:	f7f8 fdd5 	bl	14768 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bbbe:	7823      	ldrb	r3, [r4, #0]
   1bbc0:	f003 030f 	and.w	r3, r3, #15
   1bbc4:	2b01      	cmp	r3, #1
   1bbc6:	d0cc      	beq.n	1bb62 <ull_filter_adv_pdu_update+0x5a>
}
   1bbc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu->rx_addr = 1;
   1bbcc:	7823      	ldrb	r3, [r4, #0]
   1bbce:	4620      	mov	r0, r4
   1bbd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bbd4:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   1bbd8:	2328      	movs	r3, #40	; 0x28
   1bbda:	fb03 8707 	mla	r7, r3, r7, r8
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1bbde:	f107 011e 	add.w	r1, r7, #30
   1bbe2:	2206      	movs	r2, #6
}
   1bbe4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1bbe8:	f00a bedb 	b.w	269a2 <memcpy>
		LL_ASSERT(rl[idx].rpas_ready);
   1bbec:	4a06      	ldr	r2, [pc, #24]	; (1bc08 <ull_filter_adv_pdu_update+0x100>)
   1bbee:	4907      	ldr	r1, [pc, #28]	; (1bc0c <ull_filter_adv_pdu_update+0x104>)
   1bbf0:	4807      	ldr	r0, [pc, #28]	; (1bc10 <ull_filter_adv_pdu_update+0x108>)
   1bbf2:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1bbf6:	f008 fc5d 	bl	244b4 <printk>
   1bbfa:	4040      	eors	r0, r0
   1bbfc:	f380 8811 	msr	BASEPRI, r0
   1bc00:	f04f 0003 	mov.w	r0, #3
   1bc04:	df02      	svc	2
   1bc06:	e795      	b.n	1bb34 <ull_filter_adv_pdu_update+0x2c>
   1bc08:	0002ee54 	.word	0x0002ee54
   1bc0c:	0002eeb8 	.word	0x0002eeb8
   1bc10:	0002e80c 	.word	0x0002e80c
   1bc14:	20003a54 	.word	0x20003a54

0001bc18 <ull_filter_rpa_update>:
{
   1bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc1c:	4682      	mov	sl, r0
   1bc1e:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1bc20:	f011 fd31 	bl	2d686 <z_impl_k_uptime_ticks>
   1bc24:	014b      	lsls	r3, r1, #5
   1bc26:	0142      	lsls	r2, r0, #5
   1bc28:	ebb2 0800 	subs.w	r8, r2, r0
   1bc2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1bc30:	eb63 0301 	sbc.w	r3, r3, r1
   1bc34:	009b      	lsls	r3, r3, #2
   1bc36:	ea4f 0288 	mov.w	r2, r8, lsl #2
   1bc3a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   1bc3e:	eb12 0800 	adds.w	r8, r2, r0
   1bc42:	eb43 0101 	adc.w	r1, r3, r1
   1bc46:	00c9      	lsls	r1, r1, #3
   1bc48:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   1bc4c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1bc50:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   1bc54:	0bce      	lsrs	r6, r1, #15
   1bc56:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   1bc5a:	9601      	str	r6, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1bc5c:	f1ba 0f00 	cmp.w	sl, #0
   1bc60:	d117      	bne.n	1bc92 <ull_filter_rpa_update+0x7a>
   1bc62:	4b76      	ldr	r3, [pc, #472]	; (1be3c <ull_filter_rpa_update+0x224>)
   1bc64:	e9d3 0100 	ldrd	r0, r1, [r3]
   1bc68:	1c4c      	adds	r4, r1, #1
   1bc6a:	bf08      	it	eq
   1bc6c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1bc70:	d00f      	beq.n	1bc92 <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1bc72:	4b73      	ldr	r3, [pc, #460]	; (1be40 <ull_filter_rpa_update+0x228>)
   1bc74:	681a      	ldr	r2, [r3, #0]
   1bc76:	ebb8 0400 	subs.w	r4, r8, r0
   1bc7a:	eb66 0501 	sbc.w	r5, r6, r1
   1bc7e:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1bc80:	4294      	cmp	r4, r2
   1bc82:	eb75 0303 	sbcs.w	r3, r5, r3
   1bc86:	bfac      	ite	ge
   1bc88:	f04f 0901 	movge.w	r9, #1
   1bc8c:	f04f 0900 	movlt.w	r9, #0
   1bc90:	e001      	b.n	1bc96 <ull_filter_rpa_update+0x7e>
   1bc92:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bc96:	4e6b      	ldr	r6, [pc, #428]	; (1be44 <ull_filter_rpa_update+0x22c>)
				LL_ASSERT(!err);
   1bc98:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 1be58 <ull_filter_rpa_update+0x240>
   1bc9c:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   1bca0:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1bca2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1bca6:	00a5      	lsls	r5, r4, #2
   1bca8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1bcac:	07da      	lsls	r2, r3, #31
   1bcae:	d515      	bpl.n	1bcdc <ull_filter_rpa_update+0xc4>
   1bcb0:	f1b9 0f00 	cmp.w	r9, #0
   1bcb4:	d101      	bne.n	1bcba <ull_filter_rpa_update+0xa2>
   1bcb6:	0798      	lsls	r0, r3, #30
   1bcb8:	d410      	bmi.n	1bcdc <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   1bcba:	192b      	adds	r3, r5, r4
   1bcbc:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1bcc0:	0759      	lsls	r1, r3, #29
   1bcc2:	d435      	bmi.n	1bd30 <ull_filter_rpa_update+0x118>
			if (rl[i].lirk) {
   1bcc4:	192b      	adds	r3, r5, r4
   1bcc6:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1bcca:	071a      	lsls	r2, r3, #28
   1bccc:	d419      	bmi.n	1bd02 <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   1bcce:	4425      	add	r5, r4
   1bcd0:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1bcd4:	f043 0302 	orr.w	r3, r3, #2
   1bcd8:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bcdc:	3401      	adds	r4, #1
   1bcde:	2c08      	cmp	r4, #8
   1bce0:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1bce4:	d1dd      	bne.n	1bca2 <ull_filter_rpa_update+0x8a>
	if (all) {
   1bce6:	f1b9 0f00 	cmp.w	r9, #0
   1bcea:	d004      	beq.n	1bcf6 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   1bcec:	4b53      	ldr	r3, [pc, #332]	; (1be3c <ull_filter_rpa_update+0x224>)
   1bcee:	9a01      	ldr	r2, [sp, #4]
   1bcf0:	f8c3 8000 	str.w	r8, [r3]
   1bcf4:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1bcf6:	f1ba 0f00 	cmp.w	sl, #0
   1bcfa:	d13d      	bne.n	1bd78 <ull_filter_rpa_update+0x160>
}
   1bcfc:	b007      	add	sp, #28
   1bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1bd02:	a902      	add	r1, sp, #8
   1bd04:	f1a6 001d 	sub.w	r0, r6, #29
   1bd08:	f00a fedb 	bl	26ac2 <bt_rpa_create>
				LL_ASSERT(!err);
   1bd0c:	2800      	cmp	r0, #0
   1bd0e:	f040 8081 	bne.w	1be14 <ull_filter_rpa_update+0x1fc>
				rl[i].local_rpa = &rpa;
   1bd12:	4a4d      	ldr	r2, [pc, #308]	; (1be48 <ull_filter_rpa_update+0x230>)
   1bd14:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1bd18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   1bd1c:	a902      	add	r1, sp, #8
   1bd1e:	4618      	mov	r0, r3
   1bd20:	2206      	movs	r2, #6
   1bd22:	6031      	str	r1, [r6, #0]
   1bd24:	9300      	str	r3, [sp, #0]
   1bd26:	f00a fe3c 	bl	269a2 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1bd2a:	9b00      	ldr	r3, [sp, #0]
   1bd2c:	6033      	str	r3, [r6, #0]
   1bd2e:	e7ce      	b.n	1bcce <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   1bd30:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   1bd34:	4a45      	ldr	r2, [pc, #276]	; (1be4c <ull_filter_rpa_update+0x234>)
   1bd36:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1bd3a:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1bd3c:	f10d 0307 	add.w	r3, sp, #7
   1bd40:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1bd44:	f812 1901 	ldrb.w	r1, [r2], #-1
   1bd48:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1bd4c:	4283      	cmp	r3, r0
   1bd4e:	d1f9      	bne.n	1bd44 <ull_filter_rpa_update+0x12c>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1bd50:	1fb1      	subs	r1, r6, #6
   1bd52:	a802      	add	r0, sp, #8
   1bd54:	f00a feb5 	bl	26ac2 <bt_rpa_create>
				LL_ASSERT(!err);
   1bd58:	2800      	cmp	r0, #0
   1bd5a:	d0b3      	beq.n	1bcc4 <ull_filter_rpa_update+0xac>
   1bd5c:	493c      	ldr	r1, [pc, #240]	; (1be50 <ull_filter_rpa_update+0x238>)
   1bd5e:	483d      	ldr	r0, [pc, #244]	; (1be54 <ull_filter_rpa_update+0x23c>)
   1bd60:	f240 2316 	movw	r3, #534	; 0x216
   1bd64:	465a      	mov	r2, fp
   1bd66:	f008 fba5 	bl	244b4 <printk>
   1bd6a:	4040      	eors	r0, r0
   1bd6c:	f380 8811 	msr	BASEPRI, r0
   1bd70:	f04f 0003 	mov.w	r0, #3
   1bd74:	df02      	svc	2
   1bd76:	e7a5      	b.n	1bcc4 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   1bd78:	2000      	movs	r0, #0
   1bd7a:	f7fb feb5 	bl	17ae8 <ull_adv_is_enabled_get>
		if (adv) {
   1bd7e:	4604      	mov	r4, r0
   1bd80:	2800      	cmp	r0, #0
   1bd82:	d0bb      	beq.n	1bcfc <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1bd84:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
   1bd88:	075b      	lsls	r3, r3, #29
   1bd8a:	d5b7      	bpl.n	1bcfc <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1bd8c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   1bd90:	2b07      	cmp	r3, #7
   1bd92:	d8b3      	bhi.n	1bcfc <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1bd94:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
	first = pdu->first;
   1bd98:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
   1bd9c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1bda0:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1bda4:	f102 0311 	add.w	r3, r2, #17
   1bda8:	301c      	adds	r0, #28
	if (first == last) {
   1bdaa:	428d      	cmp	r5, r1
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1bdac:	eb00 0603 	add.w	r6, r0, r3
	first = pdu->first;
   1bdb0:	b2cf      	uxtb	r7, r1
	if (first == last) {
   1bdb2:	d007      	beq.n	1bdc4 <ull_filter_rpa_update+0x1ac>
		pdu->last = first;
   1bdb4:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
   1bdb8:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   1bdbc:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
		if (first_latest != first) {
   1bdc0:	428f      	cmp	r7, r1
   1bdc2:	d038      	beq.n	1be36 <ull_filter_rpa_update+0x21e>
		last++;
   1bdc4:	3501      	adds	r5, #1
   1bdc6:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1bdc8:	2d02      	cmp	r5, #2
   1bdca:	d031      	beq.n	1be30 <ull_filter_rpa_update+0x218>
   1bdcc:	2127      	movs	r1, #39	; 0x27
   1bdce:	2202      	movs	r2, #2
   1bdd0:	fb11 2205 	smlabb	r2, r1, r5, r2
	return (void *)pdu->pdu[last];
   1bdd4:	f104 012b 	add.w	r1, r4, #43	; 0x2b
		pdu->chan_sel = prev->chan_sel;
   1bdd8:	5cc3      	ldrb	r3, [r0, r3]
	pdu->type = prev->type;
   1bdda:	5c88      	ldrb	r0, [r1, r2]
		pdu->chan_sel = prev->chan_sel;
   1bddc:	f3c3 1740 	ubfx	r7, r3, #5, #1
	pdu->type = prev->type;
   1bde0:	f3c3 0303 	ubfx	r3, r3, #0, #4
   1bde4:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   1bde8:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   1bdec:	4303      	orrs	r3, r0
   1bdee:	188f      	adds	r7, r1, r2
   1bdf0:	548b      	strb	r3, [r1, r2]
	ull_filter_adv_pdu_update(adv, pdu);
   1bdf2:	4620      	mov	r0, r4
   1bdf4:	4639      	mov	r1, r7
   1bdf6:	f7ff fe87 	bl	1bb08 <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
   1bdfa:	7872      	ldrb	r2, [r6, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   1bdfc:	f107 0008 	add.w	r0, r7, #8
   1be00:	3a06      	subs	r2, #6
   1be02:	f106 0108 	add.w	r1, r6, #8
   1be06:	f00a fdcc 	bl	269a2 <memcpy>
	pdu->len = prev->len;
   1be0a:	7873      	ldrb	r3, [r6, #1]
   1be0c:	707b      	strb	r3, [r7, #1]
	pdu->last = idx;
   1be0e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
   1be12:	e773      	b.n	1bcfc <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   1be14:	490e      	ldr	r1, [pc, #56]	; (1be50 <ull_filter_rpa_update+0x238>)
   1be16:	480f      	ldr	r0, [pc, #60]	; (1be54 <ull_filter_rpa_update+0x23c>)
   1be18:	f240 2323 	movw	r3, #547	; 0x223
   1be1c:	465a      	mov	r2, fp
   1be1e:	f008 fb49 	bl	244b4 <printk>
   1be22:	4040      	eors	r0, r0
   1be24:	f380 8811 	msr	BASEPRI, r0
   1be28:	f04f 0003 	mov.w	r0, #3
   1be2c:	df02      	svc	2
   1be2e:	e770      	b.n	1bd12 <ull_filter_rpa_update+0xfa>
	bool all = timeout || (rpa_last_ms == -1) ||
   1be30:	2202      	movs	r2, #2
			last = 0U;
   1be32:	2500      	movs	r5, #0
   1be34:	e7ce      	b.n	1bdd4 <ull_filter_rpa_update+0x1bc>
   1be36:	3202      	adds	r2, #2
   1be38:	e7cc      	b.n	1bdd4 <ull_filter_rpa_update+0x1bc>
   1be3a:	bf00      	nop
   1be3c:	200019b8 	.word	0x200019b8
   1be40:	20003bc8 	.word	0x20003bc8
   1be44:	20003a78 	.word	0x20003a78
   1be48:	2000399c 	.word	0x2000399c
   1be4c:	200039d4 	.word	0x200039d4
   1be50:	0002e968 	.word	0x0002e968
   1be54:	0002e80c 	.word	0x0002e80c
   1be58:	0002ee54 	.word	0x0002ee54

0001be5c <rpa_timeout>:
{
   1be5c:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1be5e:	2001      	movs	r0, #1
   1be60:	f7ff feda 	bl	1bc18 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1be64:	4b0a      	ldr	r3, [pc, #40]	; (1be90 <rpa_timeout+0x34>)
   1be66:	681a      	ldr	r2, [r3, #0]
   1be68:	f240 30e7 	movw	r0, #999	; 0x3e7
   1be6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1be70:	2100      	movs	r1, #0
   1be72:	fbe3 0102 	umlal	r0, r1, r3, r2
   1be76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1be7a:	2300      	movs	r3, #0
   1be7c:	f7e4 f990 	bl	1a0 <__aeabi_uldivmod>
}
   1be80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1be84:	4602      	mov	r2, r0
   1be86:	460b      	mov	r3, r1
   1be88:	4802      	ldr	r0, [pc, #8]	; (1be94 <rpa_timeout+0x38>)
   1be8a:	4903      	ldr	r1, [pc, #12]	; (1be98 <rpa_timeout+0x3c>)
   1be8c:	f007 bf6e 	b.w	23d6c <k_delayed_work_submit_to_queue>
   1be90:	20003bc8 	.word	0x20003bc8
   1be94:	20001fd8 	.word	0x20001fd8
   1be98:	200019c0 	.word	0x200019c0

0001be9c <ull_filter_rl_find>:
{
   1be9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bea0:	468b      	mov	fp, r1
	if (free) {
   1bea2:	4616      	mov	r6, r2
   1bea4:	b10a      	cbz	r2, 1beaa <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1bea6:	23ff      	movs	r3, #255	; 0xff
   1bea8:	7013      	strb	r3, [r2, #0]
   1beaa:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1bf10 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1beae:	f000 0901 	and.w	r9, r0, #1
   1beb2:	f108 0a01 	add.w	sl, r8, #1
{
   1beb6:	2400      	movs	r4, #0
   1beb8:	e004      	b.n	1bec4 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1beba:	454a      	cmp	r2, r9
   1bebc:	d019      	beq.n	1bef2 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bebe:	3401      	adds	r4, #1
   1bec0:	2c08      	cmp	r4, #8
   1bec2:	d012      	beq.n	1beea <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bec4:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1bec8:	00e8      	lsls	r0, r5, #3
   1beca:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1bece:	07d9      	lsls	r1, r3, #31
   1bed0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1bed4:	b2e7      	uxtb	r7, r4
   1bed6:	d4f0      	bmi.n	1beba <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1bed8:	2e00      	cmp	r6, #0
   1beda:	d0f0      	beq.n	1bebe <ull_filter_rl_find+0x22>
   1bedc:	7833      	ldrb	r3, [r6, #0]
   1bede:	3401      	adds	r4, #1
   1bee0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1bee2:	bf08      	it	eq
   1bee4:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bee6:	2c08      	cmp	r4, #8
   1bee8:	d1ec      	bne.n	1bec4 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   1beea:	27ff      	movs	r7, #255	; 0xff
}
   1beec:	4638      	mov	r0, r7
   1beee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bef2:	4450      	add	r0, sl
   1bef4:	2206      	movs	r2, #6
   1bef6:	4659      	mov	r1, fp
   1bef8:	f00a fd43 	bl	26982 <memcmp>
   1befc:	2800      	cmp	r0, #0
   1befe:	d0f5      	beq.n	1beec <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1bf00:	2e00      	cmp	r6, #0
   1bf02:	d0dc      	beq.n	1bebe <ull_filter_rl_find+0x22>
   1bf04:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1bf08:	07db      	lsls	r3, r3, #31
   1bf0a:	d4d8      	bmi.n	1bebe <ull_filter_rl_find+0x22>
   1bf0c:	e7e6      	b.n	1bedc <ull_filter_rl_find+0x40>
   1bf0e:	bf00      	nop
   1bf10:	20003a54 	.word	0x20003a54

0001bf14 <ll_wl_add>:
{
   1bf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf18:	4605      	mov	r5, r0
   1bf1a:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   1bf1c:	2000      	movs	r0, #0
   1bf1e:	f7fb fdfd 	bl	17b1c <ull_adv_filter_pol_get>
   1bf22:	2800      	cmp	r0, #0
   1bf24:	d140      	bne.n	1bfa8 <ll_wl_add+0x94>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1bf26:	f7fc f811 	bl	17f4c <ull_scan_filter_pol_get>
   1bf2a:	f010 0401 	ands.w	r4, r0, #1
   1bf2e:	d13b      	bne.n	1bfa8 <ll_wl_add+0x94>
	if (addr->type == ADDR_TYPE_ANON) {
   1bf30:	7828      	ldrb	r0, [r5, #0]
   1bf32:	28ff      	cmp	r0, #255	; 0xff
   1bf34:	d03c      	beq.n	1bfb0 <ll_wl_add+0x9c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1bf36:	f105 0801 	add.w	r8, r5, #1
   1bf3a:	4641      	mov	r1, r8
   1bf3c:	f10d 0207 	add.w	r2, sp, #7
   1bf40:	f7ff fb9a 	bl	1b678 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   1bf44:	2807      	cmp	r0, #7
   1bf46:	d92b      	bls.n	1bfa0 <ll_wl_add+0x8c>
	} else if (j >= ARRAY_SIZE(wl)) {
   1bf48:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1bf4c:	2e07      	cmp	r6, #7
   1bf4e:	d836      	bhi.n	1bfbe <ll_wl_add+0xaa>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1bf50:	4f1e      	ldr	r7, [pc, #120]	; (1bfcc <ll_wl_add+0xb8>)
   1bf52:	782a      	ldrb	r2, [r5, #0]
   1bf54:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1bf58:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   1bf5c:	f362 0341 	bfi	r3, r2, #1, #1
   1bf60:	4641      	mov	r1, r8
   1bf62:	2206      	movs	r2, #6
   1bf64:	3002      	adds	r0, #2
   1bf66:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   1bf6a:	f00a fd1a 	bl	269a2 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1bf6e:	7828      	ldrb	r0, [r5, #0]
   1bf70:	4622      	mov	r2, r4
   1bf72:	4641      	mov	r1, r8
   1bf74:	f7ff ff92 	bl	1be9c <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   1bf78:	2807      	cmp	r0, #7
   1bf7a:	d822      	bhi.n	1bfc2 <ll_wl_add+0xae>
		rl[j].wl = 1U;
   1bf7c:	4914      	ldr	r1, [pc, #80]	; (1bfd0 <ll_wl_add+0xbc>)
   1bf7e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   1bf82:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   1bf86:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   1bf8a:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   1bf8c:	f043 0320 	orr.w	r3, r3, #32
   1bf90:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
	wl[i].taken = 1U;
   1bf94:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   1bf98:	f043 0301 	orr.w	r3, r3, #1
   1bf9c:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   1bfa0:	2000      	movs	r0, #0
}
   1bfa2:	b002      	add	sp, #8
   1bfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bfa8:	200c      	movs	r0, #12
}
   1bfaa:	b002      	add	sp, #8
   1bfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   1bfb0:	4b08      	ldr	r3, [pc, #32]	; (1bfd4 <ll_wl_add+0xc0>)
   1bfb2:	2201      	movs	r2, #1
		return 0;
   1bfb4:	4620      	mov	r0, r4
		wl_anon = 1U;
   1bfb6:	701a      	strb	r2, [r3, #0]
}
   1bfb8:	b002      	add	sp, #8
   1bfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bfbe:	2007      	movs	r0, #7
	return wl_add(addr);
   1bfc0:	e7f3      	b.n	1bfaa <ll_wl_add+0x96>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1bfc2:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   1bfc6:	22ff      	movs	r2, #255	; 0xff
   1bfc8:	705a      	strb	r2, [r3, #1]
   1bfca:	e7e3      	b.n	1bf94 <ll_wl_add+0x80>
   1bfcc:	20003bcc 	.word	0x20003bcc
   1bfd0:	20003a54 	.word	0x20003a54
   1bfd4:	2000915c 	.word	0x2000915c

0001bfd8 <ll_rl_add>:
{
   1bfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfdc:	4606      	mov	r6, r0
   1bfde:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1bfe0:	2000      	movs	r0, #0
{
   1bfe2:	460d      	mov	r5, r1
   1bfe4:	4614      	mov	r4, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1bfe6:	f7fb fd8d 	bl	17b04 <ull_adv_is_enabled>
		? 0 : 1;
   1bfea:	b118      	cbz	r0, 1bff4 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bfec:	200c      	movs	r0, #12
}
   1bfee:	b005      	add	sp, #20
   1bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bff4:	f7ff fbfc 	bl	1b7f0 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   1bff8:	2800      	cmp	r0, #0
   1bffa:	d0f7      	beq.n	1bfec <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1bffc:	46b1      	mov	r9, r6
   1bffe:	f10d 020f 	add.w	r2, sp, #15
   1c002:	f819 0b01 	ldrb.w	r0, [r9], #1
   1c006:	4649      	mov	r1, r9
   1c008:	f7ff ff48 	bl	1be9c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1c00c:	2807      	cmp	r0, #7
   1c00e:	f240 8086 	bls.w	1c11e <ll_rl_add+0x146>
	} else if (j >= ARRAY_SIZE(rl)) {
   1c012:	f89d 800f 	ldrb.w	r8, [sp, #15]
   1c016:	f1b8 0f07 	cmp.w	r8, #7
   1c01a:	d879      	bhi.n	1c110 <ll_rl_add+0x138>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1c01c:	eb08 0388 	add.w	r3, r8, r8, lsl #2
   1c020:	4f47      	ldr	r7, [pc, #284]	; (1c140 <ll_rl_add+0x168>)
   1c022:	00db      	lsls	r3, r3, #3
   1c024:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   1c026:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   1c02a:	2206      	movs	r2, #6
   1c02c:	4649      	mov	r1, r9
   1c02e:	4438      	add	r0, r7
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1c030:	9301      	str	r3, [sp, #4]
   1c032:	f00a fcb6 	bl	269a2 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1c036:	7831      	ldrb	r1, [r6, #0]
   1c038:	f817 203a 	ldrb.w	r2, [r7, sl, lsl #3]
   1c03c:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   1c040:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1c044:	4628      	mov	r0, r5
   1c046:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   1c048:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1c04c:	f7f6 ffd2 	bl	12ff4 <mem_nz>
   1c050:	f817 200b 	ldrb.w	r2, [r7, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c054:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1c056:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c05a:	4620      	mov	r0, r4
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1c05c:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c060:	f7f6 ffc8 	bl	12ff4 <mem_nz>
   1c064:	f817 200b 	ldrb.w	r2, [r7, fp]
	if (rl[i].pirk) {
   1c068:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c06a:	f000 0001 	and.w	r0, r0, #1
   1c06e:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   1c072:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1c076:	f807 200b 	strb.w	r2, [r7, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1c07a:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
   1c07e:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   1c082:	d01a      	beq.n	1c0ba <ll_rl_add+0xe2>
		rl[i].pirk_idx = peer_irk_count;
   1c084:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 1c14c <ll_rl_add+0x174>
		peer_irk_rl_ids[peer_irk_count] = i;
   1c088:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 1c150 <ll_rl_add+0x178>
		rl[i].pirk_idx = peer_irk_count;
   1c08c:	f89e 1000 	ldrb.w	r1, [lr]
   1c090:	4a2c      	ldr	r2, [pc, #176]	; (1c144 <ll_rl_add+0x16c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1c092:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   1c096:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1c09a:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1c09e:	3101      	adds	r1, #1
   1c0a0:	f88e 1000 	strb.w	r1, [lr]
	psrc += length - 1;
   1c0a4:	f10c 3cff 	add.w	ip, ip, #4294967295
   1c0a8:	f105 020f 	add.w	r2, r5, #15
	for (; length > 0; length--) {
   1c0ac:	1e69      	subs	r1, r5, #1
		*pdst++ = *psrc--;
   1c0ae:	f812 5901 	ldrb.w	r5, [r2], #-1
   1c0b2:	f80c 5f01 	strb.w	r5, [ip, #1]!
	for (; length > 0; length--) {
   1c0b6:	428a      	cmp	r2, r1
   1c0b8:	d1f9      	bne.n	1c0ae <ll_rl_add+0xd6>
	if (rl[i].lirk) {
   1c0ba:	bb90      	cbnz	r0, 1c122 <ll_rl_add+0x14a>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1c0bc:	f103 0018 	add.w	r0, r3, #24
   1c0c0:	2206      	movs	r2, #6
   1c0c2:	2100      	movs	r1, #0
   1c0c4:	4438      	add	r0, r7
   1c0c6:	f00a fc97 	bl	269f8 <memset>
	rl[i].dev = 0U;
   1c0ca:	eb0b 0308 	add.w	r3, fp, r8
   1c0ce:	00dc      	lsls	r4, r3, #3
	rl[i].rpas_ready = 0U;
   1c0d0:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1c0d4:	f023 0312 	bic.w	r3, r3, #18
   1c0d8:	553b      	strb	r3, [r7, r4]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1c0da:	4649      	mov	r1, r9
   1c0dc:	7830      	ldrb	r0, [r6, #0]
   1c0de:	2200      	movs	r2, #0
   1c0e0:	f7ff faca 	bl	1b678 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1c0e4:	2807      	cmp	r0, #7
   1c0e6:	d815      	bhi.n	1c114 <ll_rl_add+0x13c>
		rl[i].wl = 1U;
   1c0e8:	5d3b      	ldrb	r3, [r7, r4]
		wl[j].rl_idx = i;
   1c0ea:	4a17      	ldr	r2, [pc, #92]	; (1c148 <ll_rl_add+0x170>)
		rl[i].wl = 1U;
   1c0ec:	f043 0320 	orr.w	r3, r3, #32
		wl[j].rl_idx = i;
   1c0f0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   1c0f4:	553b      	strb	r3, [r7, r4]
		wl[j].rl_idx = i;
   1c0f6:	f880 8001 	strb.w	r8, [r0, #1]
	rl[i].taken = 1U;
   1c0fa:	44d8      	add	r8, fp
	return 0;
   1c0fc:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1c0fe:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   1c102:	f043 0301 	orr.w	r3, r3, #1
   1c106:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
}
   1c10a:	b005      	add	sp, #20
   1c10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1c110:	2007      	movs	r0, #7
   1c112:	e76c      	b.n	1bfee <ll_rl_add+0x16>
		rl[i].wl = 0U;
   1c114:	5d3b      	ldrb	r3, [r7, r4]
   1c116:	f36f 1345 	bfc	r3, #5, #1
   1c11a:	553b      	strb	r3, [r7, r4]
   1c11c:	e7ed      	b.n	1c0fa <ll_rl_add+0x122>
		return BT_HCI_ERR_INVALID_PARAM;
   1c11e:	2012      	movs	r0, #18
   1c120:	e765      	b.n	1bfee <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1c122:	1dd8      	adds	r0, r3, #7
   1c124:	4621      	mov	r1, r4
   1c126:	2210      	movs	r2, #16
   1c128:	4438      	add	r0, r7
   1c12a:	9301      	str	r3, [sp, #4]
   1c12c:	f00a fc39 	bl	269a2 <memcpy>
		rl[i].local_rpa = NULL;
   1c130:	eb0b 0208 	add.w	r2, fp, r8
   1c134:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   1c138:	2100      	movs	r1, #0
   1c13a:	9b01      	ldr	r3, [sp, #4]
   1c13c:	6251      	str	r1, [r2, #36]	; 0x24
   1c13e:	e7bd      	b.n	1c0bc <ll_rl_add+0xe4>
   1c140:	20003a54 	.word	0x20003a54
   1c144:	200039d4 	.word	0x200039d4
   1c148:	20003bcc 	.word	0x20003bcc
   1c14c:	2000915a 	.word	0x2000915a
   1c150:	200039cc 	.word	0x200039cc

0001c154 <ll_rl_remove>:
{
   1c154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c158:	4605      	mov	r5, r0
   1c15a:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c15c:	2000      	movs	r0, #0
   1c15e:	f7fb fcd1 	bl	17b04 <ull_adv_is_enabled>
		? 0 : 1;
   1c162:	b118      	cbz	r0, 1c16c <ll_rl_remove+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c164:	200c      	movs	r0, #12
}
   1c166:	b003      	add	sp, #12
   1c168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c16c:	4604      	mov	r4, r0
   1c16e:	f7ff fb3f 	bl	1b7f0 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   1c172:	2800      	cmp	r0, #0
   1c174:	d0f6      	beq.n	1c164 <ll_rl_remove+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c176:	462f      	mov	r7, r5
   1c178:	4622      	mov	r2, r4
   1c17a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1c17e:	4639      	mov	r1, r7
   1c180:	f7ff fe8c 	bl	1be9c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1c184:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c186:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   1c188:	d903      	bls.n	1c192 <ll_rl_remove+0x3e>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c18a:	2002      	movs	r0, #2
}
   1c18c:	b003      	add	sp, #12
   1c18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   1c192:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 1c250 <ll_rl_remove+0xfc>
   1c196:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1c19a:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   1c19e:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   1c1a2:	075b      	lsls	r3, r3, #29
   1c1a4:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1c1a8:	d52e      	bpl.n	1c208 <ll_rl_remove+0xb4>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1c1aa:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 1c254 <ll_rl_remove+0x100>
   1c1ae:	f89a 2000 	ldrb.w	r2, [sl]
   1c1b2:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   1c1b4:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   1c1b8:	d023      	beq.n	1c202 <ll_rl_remove+0xae>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1c1ba:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   1c1bc:	455b      	cmp	r3, fp
   1c1be:	d021      	beq.n	1c204 <ll_rl_remove+0xb0>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   1c1c0:	4820      	ldr	r0, [pc, #128]	; (1c244 <ll_rl_remove+0xf0>)
   1c1c2:	9301      	str	r3, [sp, #4]
   1c1c4:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   1c1c8:	2210      	movs	r2, #16
   1c1ca:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   1c1ce:	f00a fbe8 	bl	269a2 <memcpy>
   1c1d2:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   1c1d4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c1d8:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   1c1dc:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   1c1e0:	f012 0f01 	tst.w	r2, #1
   1c1e4:	b2e0      	uxtb	r0, r4
   1c1e6:	f104 0401 	add.w	r4, r4, #1
   1c1ea:	d004      	beq.n	1c1f6 <ll_rl_remove+0xa2>
   1c1ec:	0752      	lsls	r2, r2, #29
   1c1ee:	d502      	bpl.n	1c1f6 <ll_rl_remove+0xa2>
   1c1f0:	7dca      	ldrb	r2, [r1, #23]
   1c1f2:	455a      	cmp	r2, fp
   1c1f4:	d01f      	beq.n	1c236 <ll_rl_remove+0xe2>
				for (k = 0U;
   1c1f6:	2c08      	cmp	r4, #8
   1c1f8:	d1ec      	bne.n	1c1d4 <ll_rl_remove+0x80>
   1c1fa:	f89a 2000 	ldrb.w	r2, [sl]
   1c1fe:	3a01      	subs	r2, #1
   1c200:	e000      	b.n	1c204 <ll_rl_remove+0xb0>
   1c202:	465a      	mov	r2, fp
			peer_irk_count--;
   1c204:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1c208:	7828      	ldrb	r0, [r5, #0]
   1c20a:	4639      	mov	r1, r7
   1c20c:	2200      	movs	r2, #0
   1c20e:	f7ff fa33 	bl	1b678 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1c212:	2807      	cmp	r0, #7
   1c214:	d804      	bhi.n	1c220 <ll_rl_remove+0xcc>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1c216:	4b0c      	ldr	r3, [pc, #48]	; (1c248 <ll_rl_remove+0xf4>)
   1c218:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1c21c:	23ff      	movs	r3, #255	; 0xff
   1c21e:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   1c220:	444e      	add	r6, r9
		return 0;
   1c222:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1c224:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   1c228:	f36f 0300 	bfc	r3, #0, #1
   1c22c:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   1c230:	b003      	add	sp, #12
   1c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						peer_irk_rl_ids[pi] = k;
   1c236:	4c05      	ldr	r4, [pc, #20]	; (1c24c <ll_rl_remove+0xf8>)
   1c238:	f89a 2000 	ldrb.w	r2, [sl]
   1c23c:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   1c23e:	75cb      	strb	r3, [r1, #23]
						break;
   1c240:	3a01      	subs	r2, #1
   1c242:	e7df      	b.n	1c204 <ll_rl_remove+0xb0>
   1c244:	200039d4 	.word	0x200039d4
   1c248:	20003bcc 	.word	0x20003bcc
   1c24c:	200039cc 	.word	0x200039cc
   1c250:	20003a54 	.word	0x20003a54
   1c254:	2000915a 	.word	0x2000915a

0001c258 <ll_rl_crpa_set>:
{
   1c258:	b538      	push	{r3, r4, r5, lr}
   1c25a:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1c25c:	795b      	ldrb	r3, [r3, #5]
   1c25e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c262:	2b40      	cmp	r3, #64	; 0x40
   1c264:	d000      	beq.n	1c268 <ll_rl_crpa_set+0x10>
}
   1c266:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   1c268:	b119      	cbz	r1, 1c272 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   1c26a:	2200      	movs	r2, #0
   1c26c:	f7ff fe16 	bl	1be9c <ull_filter_rl_find>
   1c270:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1c272:	2a07      	cmp	r2, #7
   1c274:	d8f7      	bhi.n	1c266 <ll_rl_crpa_set+0xe>
   1c276:	4b09      	ldr	r3, [pc, #36]	; (1c29c <ll_rl_crpa_set+0x44>)
   1c278:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1c27c:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   1c280:	07c9      	lsls	r1, r1, #31
   1c282:	d5f0      	bpl.n	1c266 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1c284:	2118      	movs	r1, #24
   1c286:	2028      	movs	r0, #40	; 0x28
   1c288:	fb10 1002 	smlabb	r0, r0, r2, r1
   1c28c:	4418      	add	r0, r3
   1c28e:	4621      	mov	r1, r4
   1c290:	2206      	movs	r2, #6
}
   1c292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1c296:	f00a bb84 	b.w	269a2 <memcpy>
   1c29a:	bf00      	nop
   1c29c:	20003a54 	.word	0x20003a54

0001c2a0 <ll_rl_crpa_get>:
{
   1c2a0:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c2a2:	4603      	mov	r3, r0
{
   1c2a4:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c2a6:	f813 0b01 	ldrb.w	r0, [r3], #1
   1c2aa:	2200      	movs	r2, #0
   1c2ac:	4619      	mov	r1, r3
   1c2ae:	f7ff fdf5 	bl	1be9c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1c2b2:	2807      	cmp	r0, #7
   1c2b4:	d901      	bls.n	1c2ba <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c2b6:	2002      	movs	r0, #2
}
   1c2b8:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1c2ba:	4c09      	ldr	r4, [pc, #36]	; (1c2e0 <ll_rl_crpa_get+0x40>)
   1c2bc:	2328      	movs	r3, #40	; 0x28
   1c2be:	2218      	movs	r2, #24
   1c2c0:	fb13 2000 	smlabb	r0, r3, r0, r2
   1c2c4:	4404      	add	r4, r0
   1c2c6:	4620      	mov	r0, r4
   1c2c8:	2106      	movs	r1, #6
   1c2ca:	f7f6 fe93 	bl	12ff4 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1c2ce:	2800      	cmp	r0, #0
   1c2d0:	d0f1      	beq.n	1c2b6 <ll_rl_crpa_get+0x16>
   1c2d2:	4621      	mov	r1, r4
   1c2d4:	4628      	mov	r0, r5
   1c2d6:	2206      	movs	r2, #6
   1c2d8:	f00a fb63 	bl	269a2 <memcpy>
		return 0;
   1c2dc:	2000      	movs	r0, #0
}
   1c2de:	bd38      	pop	{r3, r4, r5, pc}
   1c2e0:	20003a54 	.word	0x20003a54

0001c2e4 <ll_rl_lrpa_get>:
{
   1c2e4:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c2e6:	4603      	mov	r3, r0
{
   1c2e8:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c2ea:	f813 0b01 	ldrb.w	r0, [r3], #1
   1c2ee:	2200      	movs	r2, #0
   1c2f0:	4619      	mov	r1, r3
   1c2f2:	f7ff fdd3 	bl	1be9c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1c2f6:	2807      	cmp	r0, #7
   1c2f8:	d901      	bls.n	1c2fe <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c2fa:	2002      	movs	r0, #2
}
   1c2fc:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1c2fe:	4b06      	ldr	r3, [pc, #24]	; (1c318 <ll_rl_lrpa_get+0x34>)
   1c300:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c304:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   1c308:	2206      	movs	r2, #6
   1c30a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1c30c:	4620      	mov	r0, r4
   1c30e:	f00a fb48 	bl	269a2 <memcpy>
		return 0;
   1c312:	2000      	movs	r0, #0
}
   1c314:	bd10      	pop	{r4, pc}
   1c316:	bf00      	nop
   1c318:	20003a54 	.word	0x20003a54

0001c31c <ll_priv_mode_set>:
{
   1c31c:	b570      	push	{r4, r5, r6, lr}
   1c31e:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c320:	2000      	movs	r0, #0
{
   1c322:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c324:	f7fb fbee 	bl	17b04 <ull_adv_is_enabled>
		? 0 : 1;
   1c328:	b108      	cbz	r0, 1c32e <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c32a:	200c      	movs	r0, #12
}
   1c32c:	bd70      	pop	{r4, r5, r6, pc}
   1c32e:	4604      	mov	r4, r0
   1c330:	f7ff fa5e 	bl	1b7f0 <rl_access_check.part.0>
	if (!rl_access_check(false)) {
   1c334:	2800      	cmp	r0, #0
   1c336:	d0f8      	beq.n	1c32a <ll_priv_mode_set+0xe>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c338:	4629      	mov	r1, r5
   1c33a:	4622      	mov	r2, r4
   1c33c:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c340:	f7ff fdac 	bl	1be9c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1c344:	2807      	cmp	r0, #7
   1c346:	d81a      	bhi.n	1c37e <ll_priv_mode_set+0x62>
		switch (mode) {
   1c348:	b176      	cbz	r6, 1c368 <ll_priv_mode_set+0x4c>
   1c34a:	2e01      	cmp	r6, #1
   1c34c:	d10a      	bne.n	1c364 <ll_priv_mode_set+0x48>
			rl[i].dev = 1U;
   1c34e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1c352:	490c      	ldr	r1, [pc, #48]	; (1c384 <ll_priv_mode_set+0x68>)
   1c354:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   1c358:	f042 0210 	orr.w	r2, r2, #16
   1c35c:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   1c360:	4620      	mov	r0, r4
}
   1c362:	bd70      	pop	{r4, r5, r6, pc}
		switch (mode) {
   1c364:	2012      	movs	r0, #18
}
   1c366:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   1c368:	4b06      	ldr	r3, [pc, #24]	; (1c384 <ll_priv_mode_set+0x68>)
   1c36a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c36e:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1c372:	f366 1204 	bfi	r2, r6, #4, #1
   1c376:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   1c37a:	4630      	mov	r0, r6
}
   1c37c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c37e:	2002      	movs	r0, #2
}
   1c380:	bd70      	pop	{r4, r5, r6, pc}
   1c382:	bf00      	nop
   1c384:	20003a54 	.word	0x20003a54

0001c388 <ull_filter_reset>:
	wl_anon = 0U;
   1c388:	4a31      	ldr	r2, [pc, #196]	; (1c450 <ull_filter_reset+0xc8>)
   1c38a:	4932      	ldr	r1, [pc, #200]	; (1c454 <ull_filter_reset+0xcc>)
{
   1c38c:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
   1c38e:	2300      	movs	r3, #0
   1c390:	4c31      	ldr	r4, [pc, #196]	; (1c458 <ull_filter_reset+0xd0>)
   1c392:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   1c394:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1c398:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1c39a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1c39c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1c3a0:	d805      	bhi.n	1c3ae <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   1c3a2:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   1c3a6:	f36f 1245 	bfc	r2, #5, #1
   1c3aa:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   1c3ae:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1c3b2:	f36f 0200 	bfc	r2, #0, #1
   1c3b6:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1c3ba:	3301      	adds	r3, #1
   1c3bc:	2b08      	cmp	r3, #8
   1c3be:	d1e9      	bne.n	1c394 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   1c3c0:	780f      	ldrb	r7, [r1, #0]
   1c3c2:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   1c3c6:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   1c3ca:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1c3ce:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   1c3d2:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   1c3d4:	f363 0700 	bfi	r7, r3, #0, #1
   1c3d8:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   1c3da:	4f20      	ldr	r7, [pc, #128]	; (1c45c <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
   1c3dc:	f363 0500 	bfi	r5, r3, #0, #1
   1c3e0:	f363 0400 	bfi	r4, r3, #0, #1
   1c3e4:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   1c3e8:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1c3ea:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   1c3ee:	4f1c      	ldr	r7, [pc, #112]	; (1c460 <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   1c3f0:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   1c3f4:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   1c3f8:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1c3fc:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   1c400:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1c404:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1c406:	f363 0600 	bfi	r6, r3, #0, #1
   1c40a:	f363 0500 	bfi	r5, r3, #0, #1
   1c40e:	f363 0400 	bfi	r4, r3, #0, #1
   1c412:	f363 0200 	bfi	r2, r3, #0, #1
   1c416:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   1c41a:	4b12      	ldr	r3, [pc, #72]	; (1c464 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1c41c:	4e12      	ldr	r6, [pc, #72]	; (1c468 <ull_filter_reset+0xe0>)
   1c41e:	4f13      	ldr	r7, [pc, #76]	; (1c46c <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
   1c420:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   1c424:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   1c428:	f04f 35ff 	mov.w	r5, #4294967295
   1c42c:	f04f 34ff 	mov.w	r4, #4294967295
   1c430:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   1c434:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1c438:	6037      	str	r7, [r6, #0]
	if (init) {
   1c43a:	b120      	cbz	r0, 1c446 <ull_filter_reset+0xbe>
}
   1c43c:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1c43e:	490c      	ldr	r1, [pc, #48]	; (1c470 <ull_filter_reset+0xe8>)
   1c440:	480c      	ldr	r0, [pc, #48]	; (1c474 <ull_filter_reset+0xec>)
   1c442:	f011 b8af 	b.w	2d5a4 <k_delayed_work_init>
}
   1c446:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   1c448:	480a      	ldr	r0, [pc, #40]	; (1c474 <ull_filter_reset+0xec>)
   1c44a:	f011 b8b3 	b.w	2d5b4 <k_delayed_work_cancel>
   1c44e:	bf00      	nop
   1c450:	2000915c 	.word	0x2000915c
   1c454:	20003a54 	.word	0x20003a54
   1c458:	20003bcc 	.word	0x20003bcc
   1c45c:	2000915b 	.word	0x2000915b
   1c460:	2000915a 	.word	0x2000915a
   1c464:	200019b8 	.word	0x200019b8
   1c468:	20003bc8 	.word	0x20003bc8
   1c46c:	000dbba0 	.word	0x000dbba0
   1c470:	0001be5d 	.word	0x0001be5d
   1c474:	200019c0 	.word	0x200019c0

0001c478 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1c478:	2807      	cmp	r0, #7
   1c47a:	d807      	bhi.n	1c48c <ull_filter_lll_lrpa_used+0x14>
   1c47c:	4b04      	ldr	r3, [pc, #16]	; (1c490 <ull_filter_lll_lrpa_used+0x18>)
   1c47e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c482:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1c486:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1c48a:	4770      	bx	lr
   1c48c:	2000      	movs	r0, #0
}
   1c48e:	4770      	bx	lr
   1c490:	20003a54 	.word	0x20003a54

0001c494 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1c494:	2807      	cmp	r0, #7
   1c496:	d80d      	bhi.n	1c4b4 <ull_filter_lll_lrpa_get+0x20>
   1c498:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1c49c:	4906      	ldr	r1, [pc, #24]	; (1c4b8 <ull_filter_lll_lrpa_get+0x24>)
   1c49e:	f811 3030 	ldrb.w	r3, [r1, r0, lsl #3]
   1c4a2:	071a      	lsls	r2, r3, #28
   1c4a4:	ea4f 00c0 	mov.w	r0, r0, lsl #3
   1c4a8:	d504      	bpl.n	1c4b4 <ull_filter_lll_lrpa_get+0x20>
   1c4aa:	079b      	lsls	r3, r3, #30
   1c4ac:	d502      	bpl.n	1c4b4 <ull_filter_lll_lrpa_get+0x20>
	return rl[rl_idx].local_rpa;
   1c4ae:	4408      	add	r0, r1
   1c4b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1c4b2:	4770      	bx	lr
		return NULL;
   1c4b4:	2000      	movs	r0, #0
   1c4b6:	4770      	bx	lr
   1c4b8:	20003a54 	.word	0x20003a54

0001c4bc <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1c4bc:	4b02      	ldr	r3, [pc, #8]	; (1c4c8 <ull_filter_lll_irks_get+0xc>)
   1c4be:	781b      	ldrb	r3, [r3, #0]
   1c4c0:	7003      	strb	r3, [r0, #0]
}
   1c4c2:	4802      	ldr	r0, [pc, #8]	; (1c4cc <ull_filter_lll_irks_get+0x10>)
   1c4c4:	4770      	bx	lr
   1c4c6:	bf00      	nop
   1c4c8:	2000915a 	.word	0x2000915a
   1c4cc:	200039d4 	.word	0x200039d4

0001c4d0 <ull_filter_lll_rl_idx>:
{
   1c4d0:	b538      	push	{r3, r4, r5, lr}
   1c4d2:	460c      	mov	r4, r1
	if (whitelist) {
   1c4d4:	b150      	cbz	r0, 1c4ec <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1c4d6:	2907      	cmp	r1, #7
   1c4d8:	d822      	bhi.n	1c520 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(wl[devmatch_id].taken);
   1c4da:	4d2a      	ldr	r5, [pc, #168]	; (1c584 <ull_filter_lll_rl_idx+0xb4>)
   1c4dc:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1c4e0:	07da      	lsls	r2, r3, #31
   1c4e2:	d52f      	bpl.n	1c544 <ull_filter_lll_rl_idx+0x74>
		i = wl[devmatch_id].rl_idx;
   1c4e4:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1c4e8:	7860      	ldrb	r0, [r4, #1]
}
   1c4ea:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1c4ec:	2907      	cmp	r1, #7
   1c4ee:	d83a      	bhi.n	1c566 <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   1c4f0:	4b25      	ldr	r3, [pc, #148]	; (1c588 <ull_filter_lll_rl_idx+0xb8>)
   1c4f2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c4f6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1c4fa:	07db      	lsls	r3, r3, #31
   1c4fc:	d501      	bpl.n	1c502 <ull_filter_lll_rl_idx+0x32>
   1c4fe:	4620      	mov	r0, r4
}
   1c500:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   1c502:	4a22      	ldr	r2, [pc, #136]	; (1c58c <ull_filter_lll_rl_idx+0xbc>)
   1c504:	4922      	ldr	r1, [pc, #136]	; (1c590 <ull_filter_lll_rl_idx+0xc0>)
   1c506:	4823      	ldr	r0, [pc, #140]	; (1c594 <ull_filter_lll_rl_idx+0xc4>)
   1c508:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   1c50c:	f007 ffd2 	bl	244b4 <printk>
   1c510:	4040      	eors	r0, r0
   1c512:	f380 8811 	msr	BASEPRI, r0
   1c516:	f04f 0003 	mov.w	r0, #3
   1c51a:	df02      	svc	2
   1c51c:	4620      	mov	r0, r4
}
   1c51e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   1c520:	4a1a      	ldr	r2, [pc, #104]	; (1c58c <ull_filter_lll_rl_idx+0xbc>)
   1c522:	491d      	ldr	r1, [pc, #116]	; (1c598 <ull_filter_lll_rl_idx+0xc8>)
   1c524:	481b      	ldr	r0, [pc, #108]	; (1c594 <ull_filter_lll_rl_idx+0xc4>)
   1c526:	f240 23b6 	movw	r3, #694	; 0x2b6
   1c52a:	f007 ffc3 	bl	244b4 <printk>
   1c52e:	4040      	eors	r0, r0
   1c530:	f380 8811 	msr	BASEPRI, r0
   1c534:	f04f 0003 	mov.w	r0, #3
   1c538:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   1c53a:	4d12      	ldr	r5, [pc, #72]	; (1c584 <ull_filter_lll_rl_idx+0xb4>)
   1c53c:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1c540:	07da      	lsls	r2, r3, #31
   1c542:	d4cf      	bmi.n	1c4e4 <ull_filter_lll_rl_idx+0x14>
   1c544:	4a11      	ldr	r2, [pc, #68]	; (1c58c <ull_filter_lll_rl_idx+0xbc>)
   1c546:	4915      	ldr	r1, [pc, #84]	; (1c59c <ull_filter_lll_rl_idx+0xcc>)
   1c548:	4812      	ldr	r0, [pc, #72]	; (1c594 <ull_filter_lll_rl_idx+0xc4>)
   1c54a:	f240 23b7 	movw	r3, #695	; 0x2b7
   1c54e:	f007 ffb1 	bl	244b4 <printk>
   1c552:	4040      	eors	r0, r0
   1c554:	f380 8811 	msr	BASEPRI, r0
   1c558:	f04f 0003 	mov.w	r0, #3
   1c55c:	df02      	svc	2
		i = wl[devmatch_id].rl_idx;
   1c55e:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1c562:	7860      	ldrb	r0, [r4, #1]
   1c564:	e7c1      	b.n	1c4ea <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1c566:	4a09      	ldr	r2, [pc, #36]	; (1c58c <ull_filter_lll_rl_idx+0xbc>)
   1c568:	490d      	ldr	r1, [pc, #52]	; (1c5a0 <ull_filter_lll_rl_idx+0xd0>)
   1c56a:	480a      	ldr	r0, [pc, #40]	; (1c594 <ull_filter_lll_rl_idx+0xc4>)
   1c56c:	f240 23ba 	movw	r3, #698	; 0x2ba
   1c570:	f007 ffa0 	bl	244b4 <printk>
   1c574:	4040      	eors	r0, r0
   1c576:	f380 8811 	msr	BASEPRI, r0
   1c57a:	f04f 0003 	mov.w	r0, #3
   1c57e:	df02      	svc	2
   1c580:	e7b6      	b.n	1c4f0 <ull_filter_lll_rl_idx+0x20>
   1c582:	bf00      	nop
   1c584:	20003bcc 	.word	0x20003bcc
   1c588:	20003a54 	.word	0x20003a54
   1c58c:	0002ee54 	.word	0x0002ee54
   1c590:	0002f02c 	.word	0x0002f02c
   1c594:	0002e80c 	.word	0x0002e80c
   1c598:	0002eecc 	.word	0x0002eecc
   1c59c:	0002ef70 	.word	0x0002ef70
   1c5a0:	0002ef88 	.word	0x0002ef88

0001c5a4 <ull_filter_lll_rl_irk_idx>:
{
   1c5a4:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c5a6:	4b20      	ldr	r3, [pc, #128]	; (1c628 <ull_filter_lll_rl_irk_idx+0x84>)
   1c5a8:	781b      	ldrb	r3, [r3, #0]
   1c5aa:	4283      	cmp	r3, r0
{
   1c5ac:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c5ae:	d90c      	bls.n	1c5ca <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1c5b0:	4b1e      	ldr	r3, [pc, #120]	; (1c62c <ull_filter_lll_rl_irk_idx+0x88>)
   1c5b2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1c5b4:	2c07      	cmp	r4, #7
   1c5b6:	d819      	bhi.n	1c5ec <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1c5b8:	4b1d      	ldr	r3, [pc, #116]	; (1c630 <ull_filter_lll_rl_irk_idx+0x8c>)
   1c5ba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c5be:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1c5c2:	07db      	lsls	r3, r3, #31
   1c5c4:	d520      	bpl.n	1c608 <ull_filter_lll_rl_irk_idx+0x64>
}
   1c5c6:	4620      	mov	r0, r4
   1c5c8:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c5ca:	4a1a      	ldr	r2, [pc, #104]	; (1c634 <ull_filter_lll_rl_irk_idx+0x90>)
   1c5cc:	491a      	ldr	r1, [pc, #104]	; (1c638 <ull_filter_lll_rl_irk_idx+0x94>)
   1c5ce:	481b      	ldr	r0, [pc, #108]	; (1c63c <ull_filter_lll_rl_irk_idx+0x98>)
   1c5d0:	f240 23c6 	movw	r3, #710	; 0x2c6
   1c5d4:	f007 ff6e 	bl	244b4 <printk>
   1c5d8:	4040      	eors	r0, r0
   1c5da:	f380 8811 	msr	BASEPRI, r0
   1c5de:	f04f 0003 	mov.w	r0, #3
   1c5e2:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1c5e4:	4b11      	ldr	r3, [pc, #68]	; (1c62c <ull_filter_lll_rl_irk_idx+0x88>)
   1c5e6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1c5e8:	2c07      	cmp	r4, #7
   1c5ea:	d9e5      	bls.n	1c5b8 <ull_filter_lll_rl_irk_idx+0x14>
   1c5ec:	4a11      	ldr	r2, [pc, #68]	; (1c634 <ull_filter_lll_rl_irk_idx+0x90>)
   1c5ee:	4914      	ldr	r1, [pc, #80]	; (1c640 <ull_filter_lll_rl_irk_idx+0x9c>)
   1c5f0:	4812      	ldr	r0, [pc, #72]	; (1c63c <ull_filter_lll_rl_irk_idx+0x98>)
   1c5f2:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   1c5f6:	f007 ff5d 	bl	244b4 <printk>
   1c5fa:	4040      	eors	r0, r0
   1c5fc:	f380 8811 	msr	BASEPRI, r0
   1c600:	f04f 0003 	mov.w	r0, #3
   1c604:	df02      	svc	2
   1c606:	e7d7      	b.n	1c5b8 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1c608:	4a0a      	ldr	r2, [pc, #40]	; (1c634 <ull_filter_lll_rl_irk_idx+0x90>)
   1c60a:	490e      	ldr	r1, [pc, #56]	; (1c644 <ull_filter_lll_rl_irk_idx+0xa0>)
   1c60c:	480b      	ldr	r0, [pc, #44]	; (1c63c <ull_filter_lll_rl_irk_idx+0x98>)
   1c60e:	f240 23c9 	movw	r3, #713	; 0x2c9
   1c612:	f007 ff4f 	bl	244b4 <printk>
   1c616:	4040      	eors	r0, r0
   1c618:	f380 8811 	msr	BASEPRI, r0
   1c61c:	f04f 0003 	mov.w	r0, #3
   1c620:	df02      	svc	2
}
   1c622:	4620      	mov	r0, r4
   1c624:	bd10      	pop	{r4, pc}
   1c626:	bf00      	nop
   1c628:	2000915a 	.word	0x2000915a
   1c62c:	200039cc 	.word	0x200039cc
   1c630:	20003a54 	.word	0x20003a54
   1c634:	0002ee54 	.word	0x0002ee54
   1c638:	0002f038 	.word	0x0002f038
   1c63c:	0002e80c 	.word	0x0002e80c
   1c640:	0002f058 	.word	0x0002f058
   1c644:	0002f02c 	.word	0x0002f02c

0001c648 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1c648:	2807      	cmp	r0, #7
   1c64a:	d823      	bhi.n	1c694 <ull_filter_lll_irk_whitelisted+0x4c>
{
   1c64c:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1c64e:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1c652:	4e11      	ldr	r6, [pc, #68]	; (1c698 <ull_filter_lll_irk_whitelisted+0x50>)
   1c654:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1c658:	07db      	lsls	r3, r3, #31
   1c65a:	4604      	mov	r4, r0
   1c65c:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1c660:	d505      	bpl.n	1c66e <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   1c662:	442c      	add	r4, r5
   1c664:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c668:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1c66c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1c66e:	4a0b      	ldr	r2, [pc, #44]	; (1c69c <ull_filter_lll_irk_whitelisted+0x54>)
   1c670:	490b      	ldr	r1, [pc, #44]	; (1c6a0 <ull_filter_lll_irk_whitelisted+0x58>)
   1c672:	480c      	ldr	r0, [pc, #48]	; (1c6a4 <ull_filter_lll_irk_whitelisted+0x5c>)
   1c674:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1c678:	f007 ff1c 	bl	244b4 <printk>
   1c67c:	4040      	eors	r0, r0
   1c67e:	f380 8811 	msr	BASEPRI, r0
   1c682:	f04f 0003 	mov.w	r0, #3
   1c686:	df02      	svc	2
	return rl[rl_idx].wl;
   1c688:	442c      	add	r4, r5
   1c68a:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c68e:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1c692:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1c694:	2000      	movs	r0, #0
}
   1c696:	4770      	bx	lr
   1c698:	20003a54 	.word	0x20003a54
   1c69c:	0002ee54 	.word	0x0002ee54
   1c6a0:	0002eea4 	.word	0x0002eea4
   1c6a4:	0002e80c 	.word	0x0002e80c

0001c6a8 <ull_filter_lll_get>:
		return &wl_filter;
   1c6a8:	4a03      	ldr	r2, [pc, #12]	; (1c6b8 <ull_filter_lll_get+0x10>)
   1c6aa:	4b04      	ldr	r3, [pc, #16]	; (1c6bc <ull_filter_lll_get+0x14>)
}
   1c6ac:	2800      	cmp	r0, #0
   1c6ae:	bf0c      	ite	eq
   1c6b0:	4610      	moveq	r0, r2
   1c6b2:	4618      	movne	r0, r3
   1c6b4:	4770      	bx	lr
   1c6b6:	bf00      	nop
   1c6b8:	20003b94 	.word	0x20003b94
   1c6bc:	20003c0c 	.word	0x20003c0c

0001c6c0 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1c6c0:	4b14      	ldr	r3, [pc, #80]	; (1c714 <ull_filter_lll_rl_idx_allowed+0x54>)
   1c6c2:	781b      	ldrb	r3, [r3, #0]
   1c6c4:	b19b      	cbz	r3, 1c6ee <ull_filter_lll_rl_idx_allowed+0x2e>
   1c6c6:	2907      	cmp	r1, #7
{
   1c6c8:	b570      	push	{r4, r5, r6, lr}
   1c6ca:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1c6cc:	d80d      	bhi.n	1c6ea <ull_filter_lll_rl_idx_allowed+0x2a>
   1c6ce:	b960      	cbnz	r0, 1c6ea <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   1c6d0:	4e11      	ldr	r6, [pc, #68]	; (1c718 <ull_filter_lll_rl_idx_allowed+0x58>)
   1c6d2:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1c6d6:	008d      	lsls	r5, r1, #2
   1c6d8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1c6dc:	07da      	lsls	r2, r3, #31
   1c6de:	d50b      	bpl.n	1c6f8 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1c6e0:	442c      	add	r4, r5
   1c6e2:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c6e6:	0743      	lsls	r3, r0, #29
   1c6e8:	d403      	bmi.n	1c6f2 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1c6ea:	2001      	movs	r0, #1
}
   1c6ec:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1c6ee:	2001      	movs	r0, #1
}
   1c6f0:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1c6f2:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1c6f6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1c6f8:	4a08      	ldr	r2, [pc, #32]	; (1c71c <ull_filter_lll_rl_idx_allowed+0x5c>)
   1c6fa:	4909      	ldr	r1, [pc, #36]	; (1c720 <ull_filter_lll_rl_idx_allowed+0x60>)
   1c6fc:	4809      	ldr	r0, [pc, #36]	; (1c724 <ull_filter_lll_rl_idx_allowed+0x64>)
   1c6fe:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   1c702:	f007 fed7 	bl	244b4 <printk>
   1c706:	4040      	eors	r0, r0
   1c708:	f380 8811 	msr	BASEPRI, r0
   1c70c:	f04f 0003 	mov.w	r0, #3
   1c710:	df02      	svc	2
   1c712:	e7e5      	b.n	1c6e0 <ull_filter_lll_rl_idx_allowed+0x20>
   1c714:	2000915b 	.word	0x2000915b
   1c718:	20003a54 	.word	0x20003a54
   1c71c:	0002ee54 	.word	0x0002ee54
   1c720:	0002eea4 	.word	0x0002eea4
   1c724:	0002e80c 	.word	0x0002e80c

0001c728 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1c728:	4b1c      	ldr	r3, [pc, #112]	; (1c79c <ull_filter_lll_rl_addr_allowed+0x74>)
   1c72a:	781b      	ldrb	r3, [r3, #0]
   1c72c:	b1fb      	cbz	r3, 1c76e <ull_filter_lll_rl_addr_allowed+0x46>
   1c72e:	7813      	ldrb	r3, [r2, #0]
   1c730:	2bff      	cmp	r3, #255	; 0xff
   1c732:	d11c      	bne.n	1c76e <ull_filter_lll_rl_addr_allowed+0x46>
{
   1c734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c738:	4d19      	ldr	r5, [pc, #100]	; (1c7a0 <ull_filter_lll_rl_addr_allowed+0x78>)
   1c73a:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1c73c:	2300      	movs	r3, #0
   1c73e:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1c740:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   1c744:	fa5f fe83 	uxtb.w	lr, r3
   1c748:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   1c74c:	f014 0001 	ands.w	r0, r4, #1
   1c750:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   1c754:	d003      	beq.n	1c75e <ull_filter_lll_rl_addr_allowed+0x36>
   1c756:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1c75a:	42b4      	cmp	r4, r6
   1c75c:	d009      	beq.n	1c772 <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c75e:	3301      	adds	r3, #1
   1c760:	2b08      	cmp	r3, #8
   1c762:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1c766:	d1eb      	bne.n	1c740 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   1c768:	2001      	movs	r0, #1
}
   1c76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   1c76e:	2001      	movs	r0, #1
}
   1c770:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1c772:	1fac      	subs	r4, r5, #6
   1c774:	f101 38ff 	add.w	r8, r1, #4294967295
				if (addr[j] != id_addr[j]) {
   1c778:	f814 af01 	ldrb.w	sl, [r4, #1]!
   1c77c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1c780:	45ca      	cmp	sl, r9
   1c782:	d1ec      	bne.n	1c75e <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1c784:	42ac      	cmp	r4, r5
   1c786:	d1f7      	bne.n	1c778 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   1c788:	4463      	add	r3, ip
				*rl_idx = i;
   1c78a:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   1c78e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1c792:	075a      	lsls	r2, r3, #29
   1c794:	d5e9      	bpl.n	1c76a <ull_filter_lll_rl_addr_allowed+0x42>
   1c796:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1c79a:	e7e6      	b.n	1c76a <ull_filter_lll_rl_addr_allowed+0x42>
   1c79c:	2000915b 	.word	0x2000915b
   1c7a0:	20003a5a 	.word	0x20003a5a

0001c7a4 <ull_filter_lll_rl_addr_resolve>:
{
   1c7a4:	b430      	push	{r4, r5}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1c7a6:	4b0e      	ldr	r3, [pc, #56]	; (1c7e0 <ull_filter_lll_rl_addr_resolve+0x3c>)
   1c7a8:	781c      	ldrb	r4, [r3, #0]
   1c7aa:	b174      	cbz	r4, 1c7ca <ull_filter_lll_rl_addr_resolve+0x26>
   1c7ac:	2a07      	cmp	r2, #7
   1c7ae:	d80c      	bhi.n	1c7ca <ull_filter_lll_rl_addr_resolve+0x26>
   1c7b0:	4c0c      	ldr	r4, [pc, #48]	; (1c7e4 <ull_filter_lll_rl_addr_resolve+0x40>)
   1c7b2:	eb02 0582 	add.w	r5, r2, r2, lsl #2
   1c7b6:	f814 5035 	ldrb.w	r5, [r4, r5, lsl #3]
   1c7ba:	072b      	lsls	r3, r5, #28
   1c7bc:	d505      	bpl.n	1c7ca <ull_filter_lll_rl_addr_resolve+0x26>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   1c7be:	b120      	cbz	r0, 1c7ca <ull_filter_lll_rl_addr_resolve+0x26>
   1c7c0:	794b      	ldrb	r3, [r1, #5]
   1c7c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c7c6:	2b40      	cmp	r3, #64	; 0x40
   1c7c8:	d002      	beq.n	1c7d0 <ull_filter_lll_rl_addr_resolve+0x2c>
}
   1c7ca:	2000      	movs	r0, #0
   1c7cc:	bc30      	pop	{r4, r5}
   1c7ce:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1c7d0:	2028      	movs	r0, #40	; 0x28
   1c7d2:	fb00 4002 	mla	r0, r0, r2, r4
   1c7d6:	3007      	adds	r0, #7
}
   1c7d8:	bc30      	pop	{r4, r5}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1c7da:	f00a b95f 	b.w	26a9c <bt_rpa_irk_matches>
   1c7de:	bf00      	nop
   1c7e0:	2000915b 	.word	0x2000915b
   1c7e4:	20003a54 	.word	0x20003a54

0001c7e8 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1c7e8:	4b02      	ldr	r3, [pc, #8]	; (1c7f4 <ull_filter_lll_rl_enabled+0xc>)
   1c7ea:	7818      	ldrb	r0, [r3, #0]
}
   1c7ec:	3800      	subs	r0, #0
   1c7ee:	bf18      	it	ne
   1c7f0:	2001      	movne	r0, #1
   1c7f2:	4770      	bx	lr
   1c7f4:	2000915b 	.word	0x2000915b

0001c7f8 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c7f8:	4668      	mov	r0, sp
   1c7fa:	f020 0107 	bic.w	r1, r0, #7
   1c7fe:	468d      	mov	sp, r1
   1c800:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   1c802:	f002 fbed 	bl	1efe0 <isr_radio>

	ISR_DIRECT_PM();
   1c806:	f7e9 fecf 	bl	65a8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1c80a:	f7ea f85d 	bl	68c8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c80e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c812:	4685      	mov	sp, r0
   1c814:	4770      	bx	lr
   1c816:	bf00      	nop

0001c818 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1c818:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1c81a:	4b09      	ldr	r3, [pc, #36]	; (1c840 <rtc0_nrf5_isr+0x28>)
   1c81c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1c820:	b93a      	cbnz	r2, 1c832 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1c822:	2001      	movs	r0, #1
   1c824:	f7f6 fcc8 	bl	131b8 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   1c828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1c82c:	2002      	movs	r0, #2
   1c82e:	f7f6 bcc3 	b.w	131b8 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1c832:	2000      	movs	r0, #0
   1c834:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1c838:	f7f7 fe70 	bl	1451c <ticker_trigger>
   1c83c:	e7f1      	b.n	1c822 <rtc0_nrf5_isr+0xa>
   1c83e:	bf00      	nop
   1c840:	4000b000 	.word	0x4000b000

0001c844 <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(const void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   1c844:	2000      	movs	r0, #0
   1c846:	f7f6 bcb7 	b.w	131b8 <mayfly_run>
   1c84a:	bf00      	nop

0001c84c <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   1c84c:	f002 bcfa 	b.w	1f244 <radio_status_reset>

0001c850 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1c850:	2801      	cmp	r0, #1
   1c852:	d800      	bhi.n	1c856 <ticker_stop_op_cb+0x6>
   1c854:	4770      	bx	lr
{
   1c856:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1c858:	4a06      	ldr	r2, [pc, #24]	; (1c874 <ticker_stop_op_cb+0x24>)
   1c85a:	4907      	ldr	r1, [pc, #28]	; (1c878 <ticker_stop_op_cb+0x28>)
   1c85c:	4807      	ldr	r0, [pc, #28]	; (1c87c <ticker_stop_op_cb+0x2c>)
   1c85e:	f240 238a 	movw	r3, #650	; 0x28a
   1c862:	f007 fe27 	bl	244b4 <printk>
   1c866:	4040      	eors	r0, r0
   1c868:	f380 8811 	msr	BASEPRI, r0
   1c86c:	f04f 0003 	mov.w	r0, #3
   1c870:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1c872:	bd08      	pop	{r3, pc}
   1c874:	0002f060 	.word	0x0002f060
   1c878:	0002f0a8 	.word	0x0002f0a8
   1c87c:	0002e80c 	.word	0x0002e80c

0001c880 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1c880:	2801      	cmp	r0, #1
   1c882:	d800      	bhi.n	1c886 <ticker_start_op_cb+0x6>
   1c884:	4770      	bx	lr
{
   1c886:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1c888:	4a06      	ldr	r2, [pc, #24]	; (1c8a4 <ticker_start_op_cb+0x24>)
   1c88a:	4907      	ldr	r1, [pc, #28]	; (1c8a8 <ticker_start_op_cb+0x28>)
   1c88c:	4807      	ldr	r0, [pc, #28]	; (1c8ac <ticker_start_op_cb+0x2c>)
   1c88e:	f240 2395 	movw	r3, #661	; 0x295
   1c892:	f007 fe0f 	bl	244b4 <printk>
   1c896:	4040      	eors	r0, r0
   1c898:	f380 8811 	msr	BASEPRI, r0
   1c89c:	f04f 0003 	mov.w	r0, #3
   1c8a0:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1c8a2:	bd08      	pop	{r3, pc}
   1c8a4:	0002f060 	.word	0x0002f060
   1c8a8:	0002f0a8 	.word	0x0002f0a8
   1c8ac:	0002e80c 	.word	0x0002e80c

0001c8b0 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1c8b0:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c8b2:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1c8b4:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   1c8b6:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c8b8:	4c15      	ldr	r4, [pc, #84]	; (1c910 <preempt_ticker_start.isra.0+0x60>)
   1c8ba:	4916      	ldr	r1, [pc, #88]	; (1c914 <preempt_ticker_start.isra.0+0x64>)
   1c8bc:	9208      	str	r2, [sp, #32]
   1c8be:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1c8c2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1c8c6:	9206      	str	r2, [sp, #24]
   1c8c8:	9407      	str	r4, [sp, #28]
   1c8ca:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   1c8cc:	e9d3 5400 	ldrd	r5, r4, [r3]
   1c8d0:	6899      	ldr	r1, [r3, #8]
   1c8d2:	42a5      	cmp	r5, r4
   1c8d4:	bf2c      	ite	cs
   1c8d6:	ebc1 0105 	rsbcs	r1, r1, r5
   1c8da:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1c8de:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c8e0:	9100      	str	r1, [sp, #0]
   1c8e2:	4610      	mov	r0, r2
   1c8e4:	4611      	mov	r1, r2
   1c8e6:	f7f7 fe87 	bl	145f8 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c8ea:	2802      	cmp	r0, #2
   1c8ec:	d801      	bhi.n	1c8f2 <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   1c8ee:	b00b      	add	sp, #44	; 0x2c
   1c8f0:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c8f2:	4a09      	ldr	r2, [pc, #36]	; (1c918 <preempt_ticker_start.isra.0+0x68>)
   1c8f4:	4909      	ldr	r1, [pc, #36]	; (1c91c <preempt_ticker_start.isra.0+0x6c>)
   1c8f6:	480a      	ldr	r0, [pc, #40]	; (1c920 <preempt_ticker_start.isra.0+0x70>)
   1c8f8:	f240 23b3 	movw	r3, #691	; 0x2b3
   1c8fc:	f007 fdda 	bl	244b4 <printk>
   1c900:	4040      	eors	r0, r0
   1c902:	f380 8811 	msr	BASEPRI, r0
   1c906:	f04f 0003 	mov.w	r0, #3
   1c90a:	df02      	svc	2
}
   1c90c:	b00b      	add	sp, #44	; 0x2c
   1c90e:	bd30      	pop	{r4, r5, pc}
   1c910:	0001c881 	.word	0x0001c881
   1c914:	0001cb75 	.word	0x0001cb75
   1c918:	0002f060 	.word	0x0002f060
   1c91c:	0002f0c8 	.word	0x0002f0c8
   1c920:	0002e80c 	.word	0x0002e80c

0001c924 <prepare>:
{
   1c924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c928:	b085      	sub	sp, #20
   1c92a:	4604      	mov	r4, r0
	idx = UINT8_MAX;
   1c92c:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   1c930:	f10d 000f 	add.w	r0, sp, #15
{
   1c934:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1c938:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1c93c:	f88d c00f 	strb.w	ip, [sp, #15]
{
   1c940:	460d      	mov	r5, r1
   1c942:	4616      	mov	r6, r2
   1c944:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1c946:	f7fa fd29 	bl	1739c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1c94a:	b918      	cbnz	r0, 1c954 <prepare+0x30>
   1c94c:	e01e      	b.n	1c98c <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   1c94e:	f7fa fd25 	bl	1739c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1c952:	b1d8      	cbz	r0, 1c98c <prepare+0x68>
   1c954:	f890 3020 	ldrb.w	r3, [r0, #32]
   1c958:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1c95a:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1c95e:	d1f6      	bne.n	1c94e <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   1c960:	4b2d      	ldr	r3, [pc, #180]	; (1ca18 <prepare+0xf4>)
   1c962:	689a      	ldr	r2, [r3, #8]
   1c964:	b9aa      	cbnz	r2, 1c992 <prepare+0x6e>
   1c966:	f1b9 0f00 	cmp.w	r9, #0
   1c96a:	d036      	beq.n	1c9da <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1c96c:	2201      	movs	r2, #1
   1c96e:	9201      	str	r2, [sp, #4]
   1c970:	9700      	str	r7, [sp, #0]
   1c972:	4633      	mov	r3, r6
   1c974:	4629      	mov	r1, r5
   1c976:	4620      	mov	r0, r4
   1c978:	4642      	mov	r2, r8
   1c97a:	f7fa fcc9 	bl	17310 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1c97e:	b9d8      	cbnz	r0, 1c9b8 <prepare+0x94>
		return -EINPROGRESS;
   1c980:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1c984:	4620      	mov	r0, r4
   1c986:	b005      	add	sp, #20
   1c988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   1c98c:	4b22      	ldr	r3, [pc, #136]	; (1ca18 <prepare+0xf4>)
   1c98e:	689a      	ldr	r2, [r3, #8]
   1c990:	b31a      	cbz	r2, 1c9da <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1c992:	e9cd 7900 	strd	r7, r9, [sp]
   1c996:	4633      	mov	r3, r6
   1c998:	4629      	mov	r1, r5
   1c99a:	4620      	mov	r0, r4
   1c99c:	4642      	mov	r2, r8
   1c99e:	f7fa fcb7 	bl	17310 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1c9a2:	b948      	cbnz	r0, 1c9b8 <prepare+0x94>
		if (is_resume) {
   1c9a4:	f1b9 0f00 	cmp.w	r9, #0
   1c9a8:	d1ea      	bne.n	1c980 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   1c9aa:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1c9ae:	f8d8 0000 	ldr.w	r0, [r8]
   1c9b2:	f7ff ff7d 	bl	1c8b0 <preempt_ticker_start.isra.0>
   1c9b6:	e7e3      	b.n	1c980 <prepare+0x5c>
		LL_ASSERT(!err);
   1c9b8:	4a18      	ldr	r2, [pc, #96]	; (1ca1c <prepare+0xf8>)
   1c9ba:	4919      	ldr	r1, [pc, #100]	; (1ca20 <prepare+0xfc>)
   1c9bc:	4819      	ldr	r0, [pc, #100]	; (1ca24 <prepare+0x100>)
   1c9be:	f240 232f 	movw	r3, #559	; 0x22f
   1c9c2:	f007 fd77 	bl	244b4 <printk>
   1c9c6:	4040      	eors	r0, r0
   1c9c8:	f380 8811 	msr	BASEPRI, r0
   1c9cc:	f04f 0003 	mov.w	r0, #3
   1c9d0:	df02      	svc	2
		if (is_resume) {
   1c9d2:	f1b9 0f00 	cmp.w	r9, #0
   1c9d6:	d1d3      	bne.n	1c980 <prepare+0x5c>
   1c9d8:	e7e7      	b.n	1c9aa <prepare+0x86>
	event.curr.param = prepare_param->param;
   1c9da:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1c9de:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   1c9e0:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   1c9e4:	4640      	mov	r0, r8
   1c9e6:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c9e8:	2200      	movs	r2, #0
   1c9ea:	4b0f      	ldr	r3, [pc, #60]	; (1ca28 <prepare+0x104>)
   1c9ec:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   1c9ee:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c9f0:	4611      	mov	r1, r2
   1c9f2:	4610      	mov	r0, r2
   1c9f4:	f7f7 fe6c 	bl	146d0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c9f8:	2802      	cmp	r0, #2
   1c9fa:	d9c3      	bls.n	1c984 <prepare+0x60>
   1c9fc:	4a07      	ldr	r2, [pc, #28]	; (1ca1c <prepare+0xf8>)
   1c9fe:	490b      	ldr	r1, [pc, #44]	; (1ca2c <prepare+0x108>)
   1ca00:	4808      	ldr	r0, [pc, #32]	; (1ca24 <prepare+0x100>)
   1ca02:	f240 2369 	movw	r3, #617	; 0x269
   1ca06:	f007 fd55 	bl	244b4 <printk>
   1ca0a:	4040      	eors	r0, r0
   1ca0c:	f380 8811 	msr	BASEPRI, r0
   1ca10:	f04f 0003 	mov.w	r0, #3
   1ca14:	df02      	svc	2
   1ca16:	e7b5      	b.n	1c984 <prepare+0x60>
   1ca18:	20003c44 	.word	0x20003c44
   1ca1c:	0002f060 	.word	0x0002f060
   1ca20:	0002e968 	.word	0x0002e968
   1ca24:	0002e80c 	.word	0x0002e80c
   1ca28:	0001c851 	.word	0x0001c851
   1ca2c:	0002f0c8 	.word	0x0002f0c8

0001ca30 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1ca30:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1ca32:	4e4b      	ldr	r6, [pc, #300]	; (1cb60 <preempt+0x130>)
   1ca34:	68b3      	ldr	r3, [r6, #8]
{
   1ca36:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1ca38:	b1b3      	cbz	r3, 1ca68 <preempt+0x38>
   1ca3a:	6833      	ldr	r3, [r6, #0]
   1ca3c:	b1a3      	cbz	r3, 1ca68 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   1ca3e:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   1ca40:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   1ca44:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   1ca48:	f7fa fca8 	bl	1739c <ull_prepare_dequeue_iter>
	if (!next) {
   1ca4c:	4604      	mov	r4, r0
   1ca4e:	b158      	cbz	r0, 1ca68 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1ca50:	f894 3020 	ldrb.w	r3, [r4, #32]
   1ca54:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1ca58:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   1ca5c:	d006      	beq.n	1ca6c <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1ca5e:	f7fa fc9d 	bl	1739c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1ca62:	4604      	mov	r4, r0
   1ca64:	2800      	cmp	r0, #0
   1ca66:	d1f3      	bne.n	1ca50 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   1ca68:	b00b      	add	sp, #44	; 0x2c
   1ca6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1ca6c:	ab05      	add	r3, sp, #20
   1ca6e:	e9d6 2700 	ldrd	r2, r7, [r6]
   1ca72:	69e1      	ldr	r1, [r4, #28]
   1ca74:	68e0      	ldr	r0, [r4, #12]
   1ca76:	9300      	str	r3, [sp, #0]
   1ca78:	ab04      	add	r3, sp, #16
   1ca7a:	47b8      	blx	r7
	if (!ret) {
   1ca7c:	4607      	mov	r7, r0
   1ca7e:	2800      	cmp	r0, #0
   1ca80:	d062      	beq.n	1cb48 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   1ca82:	68b3      	ldr	r3, [r6, #8]
   1ca84:	6831      	ldr	r1, [r6, #0]
   1ca86:	4628      	mov	r0, r5
   1ca88:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1ca8a:	f117 0f0b 	cmn.w	r7, #11
   1ca8e:	d01a      	beq.n	1cac6 <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   1ca90:	3748      	adds	r7, #72	; 0x48
   1ca92:	d011      	beq.n	1cab8 <preempt+0x88>
   1ca94:	4a33      	ldr	r2, [pc, #204]	; (1cb64 <preempt+0x134>)
   1ca96:	4934      	ldr	r1, [pc, #208]	; (1cb68 <preempt+0x138>)
   1ca98:	4834      	ldr	r0, [pc, #208]	; (1cb6c <preempt+0x13c>)
   1ca9a:	f240 23ff 	movw	r3, #767	; 0x2ff
   1ca9e:	f007 fd09 	bl	244b4 <printk>
   1caa2:	4040      	eors	r0, r0
   1caa4:	f380 8811 	msr	BASEPRI, r0
   1caa8:	f04f 0003 	mov.w	r0, #3
   1caac:	df02      	svc	2
   1caae:	e003      	b.n	1cab8 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   1cab0:	f890 3020 	ldrb.w	r3, [r0, #32]
   1cab4:	079b      	lsls	r3, r3, #30
   1cab6:	d041      	beq.n	1cb3c <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   1cab8:	f10d 000e 	add.w	r0, sp, #14
   1cabc:	f7fa fc6e 	bl	1739c <ull_prepare_dequeue_iter>
		if (!next) {
   1cac0:	2800      	cmp	r0, #0
   1cac2:	d1f5      	bne.n	1cab0 <preempt+0x80>
   1cac4:	e7d0      	b.n	1ca68 <preempt+0x38>
		iter_idx = UINT8_MAX;
   1cac6:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1cac8:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   1cacc:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1cad0:	f7fa fc64 	bl	1739c <ull_prepare_dequeue_iter>
		while (iter) {
   1cad4:	bb48      	cbnz	r0, 1cb2a <preempt+0xfa>
	prepare_param.param = event.curr.param;
   1cad6:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   1cad8:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1cada:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1cadc:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1cade:	2301      	movs	r3, #1
	event.curr.param = NULL;
   1cae0:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1cae2:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   1cae4:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1cae6:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1caea:	9b04      	ldr	r3, [sp, #16]
   1caec:	aa06      	add	r2, sp, #24
   1caee:	f7fa fc0f 	bl	17310 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1caf2:	2800      	cmp	r0, #0
   1caf4:	d0e0      	beq.n	1cab8 <preempt+0x88>
   1caf6:	4a1b      	ldr	r2, [pc, #108]	; (1cb64 <preempt+0x134>)
   1caf8:	491d      	ldr	r1, [pc, #116]	; (1cb70 <preempt+0x140>)
   1cafa:	481c      	ldr	r0, [pc, #112]	; (1cb6c <preempt+0x13c>)
   1cafc:	f240 23fd 	movw	r3, #765	; 0x2fd
   1cb00:	f007 fcd8 	bl	244b4 <printk>
   1cb04:	4040      	eors	r0, r0
   1cb06:	f380 8811 	msr	BASEPRI, r0
   1cb0a:	f04f 0003 	mov.w	r0, #3
   1cb0e:	df02      	svc	2
   1cb10:	e7d2      	b.n	1cab8 <preempt+0x88>
				iter->is_aborted = 1;
   1cb12:	f043 0302 	orr.w	r3, r3, #2
   1cb16:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1cb1a:	6983      	ldr	r3, [r0, #24]
   1cb1c:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1cb1e:	f10d 000f 	add.w	r0, sp, #15
   1cb22:	f7fa fc3b 	bl	1739c <ull_prepare_dequeue_iter>
		while (iter) {
   1cb26:	2800      	cmp	r0, #0
   1cb28:	d0d5      	beq.n	1cad6 <preempt+0xa6>
			if (!iter->is_aborted &&
   1cb2a:	f890 3020 	ldrb.w	r3, [r0, #32]
   1cb2e:	079a      	lsls	r2, r3, #30
   1cb30:	d4f5      	bmi.n	1cb1e <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   1cb32:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1cb34:	6831      	ldr	r1, [r6, #0]
   1cb36:	4291      	cmp	r1, r2
   1cb38:	d1f1      	bne.n	1cb1e <preempt+0xee>
   1cb3a:	e7ea      	b.n	1cb12 <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   1cb3c:	68c1      	ldr	r1, [r0, #12]
   1cb3e:	6800      	ldr	r0, [r0, #0]
   1cb40:	f7ff feb6 	bl	1c8b0 <preempt_ticker_start.isra.0>
}
   1cb44:	b00b      	add	sp, #44	; 0x2c
   1cb46:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1cb48:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1cb4c:	69a2      	ldr	r2, [r4, #24]
   1cb4e:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1cb50:	f043 0302 	orr.w	r3, r3, #2
   1cb54:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1cb58:	4620      	mov	r0, r4
   1cb5a:	4790      	blx	r2
		goto preempt_next;
   1cb5c:	e7ac      	b.n	1cab8 <preempt+0x88>
   1cb5e:	bf00      	nop
   1cb60:	20003c44 	.word	0x20003c44
   1cb64:	0002f060 	.word	0x0002f060
   1cb68:	0002f0f0 	.word	0x0002f0f0
   1cb6c:	0002e80c 	.word	0x0002e80c
   1cb70:	0002e974 	.word	0x0002e974

0001cb74 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1cb74:	2200      	movs	r2, #0
{
   1cb76:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1cb78:	4611      	mov	r1, r2
   1cb7a:	4b0a      	ldr	r3, [pc, #40]	; (1cba4 <preempt_ticker_cb+0x30>)
   1cb7c:	2001      	movs	r0, #1
   1cb7e:	f7f6 fac7 	bl	13110 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1cb82:	b900      	cbnz	r0, 1cb86 <preempt_ticker_cb+0x12>
}
   1cb84:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1cb86:	4a08      	ldr	r2, [pc, #32]	; (1cba8 <preempt_ticker_cb+0x34>)
   1cb88:	4908      	ldr	r1, [pc, #32]	; (1cbac <preempt_ticker_cb+0x38>)
   1cb8a:	4809      	ldr	r0, [pc, #36]	; (1cbb0 <preempt_ticker_cb+0x3c>)
   1cb8c:	f240 23c1 	movw	r3, #705	; 0x2c1
   1cb90:	f007 fc90 	bl	244b4 <printk>
   1cb94:	4040      	eors	r0, r0
   1cb96:	f380 8811 	msr	BASEPRI, r0
   1cb9a:	f04f 0003 	mov.w	r0, #3
   1cb9e:	df02      	svc	2
}
   1cba0:	bd08      	pop	{r3, pc}
   1cba2:	bf00      	nop
   1cba4:	2000093c 	.word	0x2000093c
   1cba8:	0002f060 	.word	0x0002f060
   1cbac:	0002e974 	.word	0x0002e974
   1cbb0:	0002e80c 	.word	0x0002e80c

0001cbb4 <lll_init>:
{
   1cbb4:	b510      	push	{r4, lr}
   1cbb6:	4815      	ldr	r0, [pc, #84]	; (1cc0c <lll_init+0x58>)
   1cbb8:	f006 f942 	bl	22e40 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1cbbc:	4b14      	ldr	r3, [pc, #80]	; (1cc10 <lll_init+0x5c>)
   1cbbe:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1cbc0:	b300      	cbz	r0, 1cc04 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   1cbc2:	4b14      	ldr	r3, [pc, #80]	; (1cc14 <lll_init+0x60>)
   1cbc4:	2400      	movs	r4, #0
   1cbc6:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1cbc8:	f000 fa24 	bl	1d014 <lll_clock_init>
	if (err < 0) {
   1cbcc:	2800      	cmp	r0, #0
   1cbce:	db18      	blt.n	1cc02 <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1cbd0:	4622      	mov	r2, r4
   1cbd2:	4621      	mov	r1, r4
   1cbd4:	2001      	movs	r0, #1
   1cbd6:	f7e9 fccf 	bl	6578 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1cbda:	4622      	mov	r2, r4
   1cbdc:	4621      	mov	r1, r4
   1cbde:	200b      	movs	r0, #11
   1cbe0:	f7e9 fcca 	bl	6578 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1cbe4:	4622      	mov	r2, r4
   1cbe6:	4621      	mov	r1, r4
   1cbe8:	2018      	movs	r0, #24
   1cbea:	f7e9 fcc5 	bl	6578 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1cbee:	2001      	movs	r0, #1
   1cbf0:	f7e9 fc90 	bl	6514 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1cbf4:	200b      	movs	r0, #11
   1cbf6:	f7e9 fc8d 	bl	6514 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1cbfa:	2018      	movs	r0, #24
   1cbfc:	f7e9 fc8a 	bl	6514 <arch_irq_enable>
	return 0;
   1cc00:	4620      	mov	r0, r4
}
   1cc02:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1cc04:	f06f 0012 	mvn.w	r0, #18
}
   1cc08:	bd10      	pop	{r4, pc}
   1cc0a:	bf00      	nop
   1cc0c:	0002f0fc 	.word	0x0002f0fc
   1cc10:	20003c40 	.word	0x20003c40
   1cc14:	20003c44 	.word	0x20003c44

0001cc18 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1cc18:	4a04      	ldr	r2, [pc, #16]	; (1cc2c <lll_csrand_get+0x14>)
{
   1cc1a:	b410      	push	{r4}
   1cc1c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1cc1e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1cc20:	6884      	ldr	r4, [r0, #8]
   1cc22:	b28a      	uxth	r2, r1
   1cc24:	4619      	mov	r1, r3
   1cc26:	6823      	ldr	r3, [r4, #0]
}
   1cc28:	bc10      	pop	{r4}
   1cc2a:	4718      	bx	r3
   1cc2c:	20003c40 	.word	0x20003c40

0001cc30 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1cc30:	4b08      	ldr	r3, [pc, #32]	; (1cc54 <lll_csrand_isr_get+0x24>)
   1cc32:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1cc34:	689a      	ldr	r2, [r3, #8]
{
   1cc36:	b410      	push	{r4}
   1cc38:	6854      	ldr	r4, [r2, #4]
   1cc3a:	b134      	cbz	r4, 1cc4a <lll_csrand_isr_get+0x1a>
   1cc3c:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1cc3e:	46a4      	mov	ip, r4
   1cc40:	4601      	mov	r1, r0
}
   1cc42:	bc10      	pop	{r4}
   1cc44:	4618      	mov	r0, r3
   1cc46:	2300      	movs	r3, #0
   1cc48:	4760      	bx	ip
   1cc4a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1cc4e:	bc10      	pop	{r4}
   1cc50:	4770      	bx	lr
   1cc52:	bf00      	nop
   1cc54:	20003c40 	.word	0x20003c40

0001cc58 <lll_rand_isr_get>:
   1cc58:	f7ff bfea 	b.w	1cc30 <lll_csrand_isr_get>

0001cc5c <lll_reset>:
}
   1cc5c:	2000      	movs	r0, #0
   1cc5e:	4770      	bx	lr

0001cc60 <lll_prepare>:
{
   1cc60:	b510      	push	{r4, lr}
   1cc62:	b082      	sub	sp, #8
   1cc64:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1cc66:	9400      	str	r4, [sp, #0]
   1cc68:	2400      	movs	r4, #0
   1cc6a:	9401      	str	r4, [sp, #4]
   1cc6c:	f7ff fe5a 	bl	1c924 <prepare>
}
   1cc70:	b002      	add	sp, #8
   1cc72:	bd10      	pop	{r4, pc}

0001cc74 <lll_resume>:
{
   1cc74:	b510      	push	{r4, lr}
   1cc76:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1cc78:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   1cc7a:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1cc7e:	69c3      	ldr	r3, [r0, #28]
   1cc80:	6902      	ldr	r2, [r0, #16]
   1cc82:	f004 0401 	and.w	r4, r4, #1
   1cc86:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1cc8a:	9401      	str	r4, [sp, #4]
   1cc8c:	f7ff fe4a 	bl	1c924 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1cc90:	b108      	cbz	r0, 1cc96 <lll_resume+0x22>
   1cc92:	3044      	adds	r0, #68	; 0x44
   1cc94:	d101      	bne.n	1cc9a <lll_resume+0x26>
}
   1cc96:	b002      	add	sp, #8
   1cc98:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1cc9a:	4a07      	ldr	r2, [pc, #28]	; (1ccb8 <lll_resume+0x44>)
   1cc9c:	4907      	ldr	r1, [pc, #28]	; (1ccbc <lll_resume+0x48>)
   1cc9e:	4808      	ldr	r0, [pc, #32]	; (1ccc0 <lll_resume+0x4c>)
   1cca0:	23e5      	movs	r3, #229	; 0xe5
   1cca2:	f007 fc07 	bl	244b4 <printk>
   1cca6:	4040      	eors	r0, r0
   1cca8:	f380 8811 	msr	BASEPRI, r0
   1ccac:	f04f 0003 	mov.w	r0, #3
   1ccb0:	df02      	svc	2
}
   1ccb2:	b002      	add	sp, #8
   1ccb4:	bd10      	pop	{r4, pc}
   1ccb6:	bf00      	nop
   1ccb8:	0002f060 	.word	0x0002f060
   1ccbc:	0002f100 	.word	0x0002f100
   1ccc0:	0002e80c 	.word	0x0002e80c

0001ccc4 <lll_disable>:
{
   1ccc4:	b510      	push	{r4, lr}
	if (!param || (param == event.curr.param)) {
   1ccc6:	4604      	mov	r4, r0
{
   1ccc8:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
   1ccca:	2800      	cmp	r0, #0
   1cccc:	d033      	beq.n	1cd36 <lll_disable+0x72>
   1ccce:	4b25      	ldr	r3, [pc, #148]	; (1cd64 <lll_disable+0xa0>)
   1ccd0:	681a      	ldr	r2, [r3, #0]
   1ccd2:	4282      	cmp	r2, r0
   1ccd4:	d029      	beq.n	1cd2a <lll_disable+0x66>
		idx = UINT8_MAX;
   1ccd6:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1ccd8:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1ccdc:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1cce0:	f7fa fb5c 	bl	1739c <ull_prepare_dequeue_iter>
		while (next) {
   1cce4:	b940      	cbnz	r0, 1ccf8 <lll_disable+0x34>
   1cce6:	e01c      	b.n	1cd22 <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
   1cce8:	68c3      	ldr	r3, [r0, #12]
   1ccea:	42a3      	cmp	r3, r4
   1ccec:	d01b      	beq.n	1cd26 <lll_disable+0x62>
			next = ull_prepare_dequeue_iter(&idx);
   1ccee:	f10d 0007 	add.w	r0, sp, #7
   1ccf2:	f7fa fb53 	bl	1739c <ull_prepare_dequeue_iter>
		while (next) {
   1ccf6:	b1a0      	cbz	r0, 1cd22 <lll_disable+0x5e>
			if (!next->is_aborted &&
   1ccf8:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ccfc:	079b      	lsls	r3, r3, #30
   1ccfe:	d4f6      	bmi.n	1ccee <lll_disable+0x2a>
   1cd00:	2c00      	cmp	r4, #0
   1cd02:	d1f1      	bne.n	1cce8 <lll_disable+0x24>
   1cd04:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   1cd06:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1cd0a:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1cd0c:	f043 0302 	orr.w	r3, r3, #2
   1cd10:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1cd14:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1cd16:	f10d 0007 	add.w	r0, sp, #7
   1cd1a:	f7fa fb3f 	bl	1739c <ull_prepare_dequeue_iter>
		while (next) {
   1cd1e:	2800      	cmp	r0, #0
   1cd20:	d1ea      	bne.n	1ccf8 <lll_disable+0x34>
}
   1cd22:	b002      	add	sp, #8
   1cd24:	bd10      	pop	{r4, pc}
   1cd26:	4621      	mov	r1, r4
   1cd28:	e7ed      	b.n	1cd06 <lll_disable+0x42>
		if (event.curr.abort_cb && event.curr.param) {
   1cd2a:	689b      	ldr	r3, [r3, #8]
   1cd2c:	b16b      	cbz	r3, 1cd4a <lll_disable+0x86>
   1cd2e:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1cd30:	2000      	movs	r0, #0
   1cd32:	4798      	blx	r3
   1cd34:	e7cf      	b.n	1ccd6 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1cd36:	4a0b      	ldr	r2, [pc, #44]	; (1cd64 <lll_disable+0xa0>)
   1cd38:	6893      	ldr	r3, [r2, #8]
   1cd3a:	2b00      	cmp	r3, #0
   1cd3c:	d0cb      	beq.n	1ccd6 <lll_disable+0x12>
   1cd3e:	6811      	ldr	r1, [r2, #0]
   1cd40:	2900      	cmp	r1, #0
   1cd42:	d0c8      	beq.n	1ccd6 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1cd44:	2000      	movs	r0, #0
   1cd46:	4798      	blx	r3
   1cd48:	e7c5      	b.n	1ccd6 <lll_disable+0x12>
			LL_ASSERT(!param);
   1cd4a:	4a07      	ldr	r2, [pc, #28]	; (1cd68 <lll_disable+0xa4>)
   1cd4c:	4907      	ldr	r1, [pc, #28]	; (1cd6c <lll_disable+0xa8>)
   1cd4e:	4808      	ldr	r0, [pc, #32]	; (1cd70 <lll_disable+0xac>)
   1cd50:	23ef      	movs	r3, #239	; 0xef
   1cd52:	f007 fbaf 	bl	244b4 <printk>
   1cd56:	4040      	eors	r0, r0
   1cd58:	f380 8811 	msr	BASEPRI, r0
   1cd5c:	f04f 0003 	mov.w	r0, #3
   1cd60:	df02      	svc	2
   1cd62:	e7b8      	b.n	1ccd6 <lll_disable+0x12>
   1cd64:	20003c44 	.word	0x20003c44
   1cd68:	0002f060 	.word	0x0002f060
   1cd6c:	0002f114 	.word	0x0002f114
   1cd70:	0002e80c 	.word	0x0002e80c

0001cd74 <lll_prepare_done>:
}
   1cd74:	2000      	movs	r0, #0
   1cd76:	4770      	bx	lr

0001cd78 <lll_done>:
{
   1cd78:	b510      	push	{r4, lr}
   1cd7a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1cd7c:	f7fa fb00 	bl	17380 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1cd80:	b13c      	cbz	r4, 1cd92 <lll_done+0x1a>
   1cd82:	b320      	cbz	r0, 1cdce <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1cd84:	6820      	ldr	r0, [r4, #0]
   1cd86:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1cd88:	f7fa fb36 	bl	173f8 <ull_event_done>
	LL_ASSERT(evdone);
   1cd8c:	b180      	cbz	r0, 1cdb0 <lll_done+0x38>
}
   1cd8e:	2000      	movs	r0, #0
   1cd90:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1cd92:	4c1d      	ldr	r4, [pc, #116]	; (1ce08 <lll_done+0x90>)
   1cd94:	68a3      	ldr	r3, [r4, #8]
   1cd96:	b343      	cbz	r3, 1cdea <lll_done+0x72>
		param = event.curr.param;
   1cd98:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1cd9a:	2300      	movs	r3, #0
   1cd9c:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1cd9e:	6023      	str	r3, [r4, #0]
		if (param) {
   1cda0:	2800      	cmp	r0, #0
   1cda2:	d0f1      	beq.n	1cd88 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1cda4:	6800      	ldr	r0, [r0, #0]
   1cda6:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1cda8:	f7fa fb26 	bl	173f8 <ull_event_done>
	LL_ASSERT(evdone);
   1cdac:	2800      	cmp	r0, #0
   1cdae:	d1ee      	bne.n	1cd8e <lll_done+0x16>
   1cdb0:	4a16      	ldr	r2, [pc, #88]	; (1ce0c <lll_done+0x94>)
   1cdb2:	4917      	ldr	r1, [pc, #92]	; (1ce10 <lll_done+0x98>)
   1cdb4:	4817      	ldr	r0, [pc, #92]	; (1ce14 <lll_done+0x9c>)
   1cdb6:	f44f 73a0 	mov.w	r3, #320	; 0x140
   1cdba:	f007 fb7b 	bl	244b4 <printk>
   1cdbe:	4040      	eors	r0, r0
   1cdc0:	f380 8811 	msr	BASEPRI, r0
   1cdc4:	f04f 0003 	mov.w	r0, #3
   1cdc8:	df02      	svc	2
}
   1cdca:	2000      	movs	r0, #0
   1cdcc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1cdce:	4a0f      	ldr	r2, [pc, #60]	; (1ce0c <lll_done+0x94>)
   1cdd0:	4911      	ldr	r1, [pc, #68]	; (1ce18 <lll_done+0xa0>)
   1cdd2:	4810      	ldr	r0, [pc, #64]	; (1ce14 <lll_done+0x9c>)
   1cdd4:	f44f 7391 	mov.w	r3, #290	; 0x122
   1cdd8:	f007 fb6c 	bl	244b4 <printk>
   1cddc:	4040      	eors	r0, r0
   1cdde:	f380 8811 	msr	BASEPRI, r0
   1cde2:	f04f 0003 	mov.w	r0, #3
   1cde6:	df02      	svc	2
   1cde8:	e7cc      	b.n	1cd84 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1cdea:	4a08      	ldr	r2, [pc, #32]	; (1ce0c <lll_done+0x94>)
   1cdec:	490b      	ldr	r1, [pc, #44]	; (1ce1c <lll_done+0xa4>)
   1cdee:	4809      	ldr	r0, [pc, #36]	; (1ce14 <lll_done+0x9c>)
   1cdf0:	f44f 7394 	mov.w	r3, #296	; 0x128
   1cdf4:	f007 fb5e 	bl	244b4 <printk>
   1cdf8:	4040      	eors	r0, r0
   1cdfa:	f380 8811 	msr	BASEPRI, r0
   1cdfe:	f04f 0003 	mov.w	r0, #3
   1ce02:	df02      	svc	2
   1ce04:	e7c8      	b.n	1cd98 <lll_done+0x20>
   1ce06:	bf00      	nop
   1ce08:	20003c44 	.word	0x20003c44
   1ce0c:	0002f060 	.word	0x0002f060
   1ce10:	0002f140 	.word	0x0002f140
   1ce14:	0002e80c 	.word	0x0002e80c
   1ce18:	0002f11c 	.word	0x0002f11c
   1ce1c:	0002f12c 	.word	0x0002f12c

0001ce20 <lll_is_done>:
	return !event.curr.abort_cb;
   1ce20:	4b02      	ldr	r3, [pc, #8]	; (1ce2c <lll_is_done+0xc>)
   1ce22:	6898      	ldr	r0, [r3, #8]
}
   1ce24:	fab0 f080 	clz	r0, r0
   1ce28:	0940      	lsrs	r0, r0, #5
   1ce2a:	4770      	bx	lr
   1ce2c:	20003c44 	.word	0x20003c44

0001ce30 <lll_is_abort_cb>:
}
   1ce30:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1ce34:	4770      	bx	lr
   1ce36:	bf00      	nop

0001ce38 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1ce38:	6803      	ldr	r3, [r0, #0]
   1ce3a:	2b00      	cmp	r3, #0
		return MAX(evt->ticks_active_to_start,
   1ce3c:	bfb4      	ite	lt
   1ce3e:	e9d0 0301 	ldrdlt	r0, r3, [r0, #4]
		return MAX(evt->ticks_active_to_start,
   1ce42:	6840      	ldrge	r0, [r0, #4]
   1ce44:	4298      	cmp	r0, r3
   1ce46:	bf38      	it	cc
   1ce48:	4618      	movcc	r0, r3
}
   1ce4a:	4770      	bx	lr

0001ce4c <lll_preempt_calc>:
{
   1ce4c:	b510      	push	{r4, lr}
   1ce4e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1ce50:	f7f7 fc84 	bl	1475c <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1ce54:	4621      	mov	r1, r4
   1ce56:	f7f7 fc83 	bl	14760 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1ce5a:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1ce5c:	0203      	lsls	r3, r0, #8
   1ce5e:	d404      	bmi.n	1ce6a <lll_preempt_calc+0x1e>
   1ce60:	2809      	cmp	r0, #9
   1ce62:	bf94      	ite	ls
   1ce64:	2000      	movls	r0, #0
   1ce66:	2001      	movhi	r0, #1
}
   1ce68:	bd10      	pop	{r4, pc}
	return 0;
   1ce6a:	2000      	movs	r0, #0
}
   1ce6c:	bd10      	pop	{r4, pc}
   1ce6e:	bf00      	nop

0001ce70 <lll_chan_set>:
	switch (chan) {
   1ce70:	2826      	cmp	r0, #38	; 0x26
{
   1ce72:	b510      	push	{r4, lr}
   1ce74:	4604      	mov	r4, r0
	switch (chan) {
   1ce76:	d01c      	beq.n	1ceb2 <lll_chan_set+0x42>
   1ce78:	2827      	cmp	r0, #39	; 0x27
   1ce7a:	d012      	beq.n	1cea2 <lll_chan_set+0x32>
   1ce7c:	2825      	cmp	r0, #37	; 0x25
   1ce7e:	d008      	beq.n	1ce92 <lll_chan_set+0x22>
		if (chan < 11) {
   1ce80:	280a      	cmp	r0, #10
   1ce82:	d91e      	bls.n	1cec2 <lll_chan_set+0x52>
		} else if (chan < 40) {
   1ce84:	2827      	cmp	r0, #39	; 0x27
   1ce86:	d821      	bhi.n	1cecc <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1ce88:	3003      	adds	r0, #3
   1ce8a:	0040      	lsls	r0, r0, #1
   1ce8c:	f002 f930 	bl	1f0f0 <radio_freq_chan_set>
   1ce90:	e002      	b.n	1ce98 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1ce92:	2002      	movs	r0, #2
   1ce94:	f002 f92c 	bl	1f0f0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1ce98:	4620      	mov	r0, r4
}
   1ce9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1ce9e:	f002 b92d 	b.w	1f0fc <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1cea2:	2050      	movs	r0, #80	; 0x50
   1cea4:	f002 f924 	bl	1f0f0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1cea8:	4620      	mov	r0, r4
}
   1ceaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1ceae:	f002 b925 	b.w	1f0fc <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1ceb2:	201a      	movs	r0, #26
   1ceb4:	f002 f91c 	bl	1f0f0 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1ceb8:	4620      	mov	r0, r4
}
   1ceba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1cebe:	f002 b91d 	b.w	1f0fc <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1cec2:	3002      	adds	r0, #2
   1cec4:	0040      	lsls	r0, r0, #1
   1cec6:	f002 f913 	bl	1f0f0 <radio_freq_chan_set>
   1ceca:	e7e5      	b.n	1ce98 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1cecc:	4a06      	ldr	r2, [pc, #24]	; (1cee8 <lll_chan_set+0x78>)
   1cece:	4907      	ldr	r1, [pc, #28]	; (1ceec <lll_chan_set+0x7c>)
   1ced0:	4807      	ldr	r0, [pc, #28]	; (1cef0 <lll_chan_set+0x80>)
   1ced2:	f240 13a3 	movw	r3, #419	; 0x1a3
   1ced6:	f007 faed 	bl	244b4 <printk>
   1ceda:	4040      	eors	r0, r0
   1cedc:	f380 8811 	msr	BASEPRI, r0
   1cee0:	f04f 0003 	mov.w	r0, #3
   1cee4:	df02      	svc	2
   1cee6:	e7d7      	b.n	1ce98 <lll_chan_set+0x28>
   1cee8:	0002f060 	.word	0x0002f060
   1ceec:	0002e86c 	.word	0x0002e86c
   1cef0:	0002e80c 	.word	0x0002e80c

0001cef4 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1cef4:	f002 b972 	b.w	1f1dc <radio_rx_ready_delay_get>

0001cef8 <lll_isr_tx_status_reset>:
{
   1cef8:	b508      	push	{r3, lr}
	radio_status_reset();
   1cefa:	f002 f9a3 	bl	1f244 <radio_status_reset>
}
   1cefe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1cf02:	f002 ba6f 	b.w	1f3e4 <radio_tmr_status_reset>
   1cf06:	bf00      	nop

0001cf08 <lll_isr_rx_status_reset>:
{
   1cf08:	b508      	push	{r3, lr}
	radio_status_reset();
   1cf0a:	f002 f99b 	bl	1f244 <radio_status_reset>
	radio_tmr_status_reset();
   1cf0e:	f002 fa69 	bl	1f3e4 <radio_tmr_status_reset>
}
   1cf12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1cf16:	f002 ba15 	b.w	1f344 <radio_rssi_status_reset>
   1cf1a:	bf00      	nop

0001cf1c <lll_isr_status_reset>:
{
   1cf1c:	b508      	push	{r3, lr}
	radio_status_reset();
   1cf1e:	f002 f991 	bl	1f244 <radio_status_reset>
	radio_tmr_status_reset();
   1cf22:	f002 fa5f 	bl	1f3e4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1cf26:	f002 fa45 	bl	1f3b4 <radio_filter_status_reset>
	radio_ar_status_reset();
   1cf2a:	f002 fc6d 	bl	1f808 <radio_ar_status_reset>
}
   1cf2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1cf32:	f002 ba07 	b.w	1f344 <radio_rssi_status_reset>
   1cf36:	bf00      	nop

0001cf38 <lll_isr_cleanup>:
{
   1cf38:	b508      	push	{r3, lr}
   1cf3a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1cf3c:	4815      	ldr	r0, [pc, #84]	; (1cf94 <lll_isr_cleanup+0x5c>)
   1cf3e:	f002 f85f 	bl	1f000 <radio_isr_set>
	if (!radio_is_idle()) {
   1cf42:	f002 f99f 	bl	1f284 <radio_is_idle>
   1cf46:	b150      	cbz	r0, 1cf5e <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1cf48:	f002 fb14 	bl	1f574 <radio_tmr_stop>
	err = lll_hfclock_off();
   1cf4c:	f000 f894 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cf50:	2800      	cmp	r0, #0
   1cf52:	db0c      	blt.n	1cf6e <lll_isr_cleanup+0x36>
}
   1cf54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cf58:	2000      	movs	r0, #0
   1cf5a:	f7ff bf0d 	b.w	1cd78 <lll_done>
		radio_disable();
   1cf5e:	f002 f959 	bl	1f214 <radio_disable>
	radio_tmr_stop();
   1cf62:	f002 fb07 	bl	1f574 <radio_tmr_stop>
	err = lll_hfclock_off();
   1cf66:	f000 f887 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cf6a:	2800      	cmp	r0, #0
   1cf6c:	daf2      	bge.n	1cf54 <lll_isr_cleanup+0x1c>
   1cf6e:	4a0a      	ldr	r2, [pc, #40]	; (1cf98 <lll_isr_cleanup+0x60>)
   1cf70:	490a      	ldr	r1, [pc, #40]	; (1cf9c <lll_isr_cleanup+0x64>)
   1cf72:	480b      	ldr	r0, [pc, #44]	; (1cfa0 <lll_isr_cleanup+0x68>)
   1cf74:	f240 2306 	movw	r3, #518	; 0x206
   1cf78:	f007 fa9c 	bl	244b4 <printk>
   1cf7c:	4040      	eors	r0, r0
   1cf7e:	f380 8811 	msr	BASEPRI, r0
   1cf82:	f04f 0003 	mov.w	r0, #3
   1cf86:	df02      	svc	2
	lll_done(NULL);
   1cf88:	2000      	movs	r0, #0
}
   1cf8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cf8e:	f7ff bef3 	b.w	1cd78 <lll_done>
   1cf92:	bf00      	nop
   1cf94:	0001c84d 	.word	0x0001c84d
   1cf98:	0002f060 	.word	0x0002f060
   1cf9c:	0002f148 	.word	0x0002f148
   1cfa0:	0002e80c 	.word	0x0002e80c

0001cfa4 <lll_isr_abort>:
{
   1cfa4:	b510      	push	{r4, lr}
   1cfa6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1cfa8:	f7ff ffb8 	bl	1cf1c <lll_isr_status_reset>
	lll_isr_cleanup(param);
   1cfac:	4620      	mov	r0, r4
}
   1cfae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1cfb2:	f7ff bfc1 	b.w	1cf38 <lll_isr_cleanup>
   1cfb6:	bf00      	nop

0001cfb8 <clock_ready>:
	z_impl_k_sem_give(sem);
   1cfb8:	f101 0010 	add.w	r0, r1, #16
   1cfbc:	f006 bd7a 	b.w	23ab4 <z_impl_k_sem_give>

0001cfc0 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1cfc0:	b530      	push	{r4, r5, lr}
   1cfc2:	4604      	mov	r4, r0
   1cfc4:	b08b      	sub	sp, #44	; 0x2c
   1cfc6:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cfc8:	2201      	movs	r2, #1
   1cfca:	2100      	movs	r1, #0
   1cfcc:	a804      	add	r0, sp, #16
   1cfce:	f010 fa69 	bl	2d4a4 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1cfd2:	2300      	movs	r3, #0
   1cfd4:	4a0e      	ldr	r2, [pc, #56]	; (1d010 <blocking_on+0x50>)
   1cfd6:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1cfd8:	4620      	mov	r0, r4
   1cfda:	2303      	movs	r3, #3
   1cfdc:	4669      	mov	r1, sp
   1cfde:	9201      	str	r2, [sp, #4]
   1cfe0:	9302      	str	r3, [sp, #8]
   1cfe2:	f007 fae3 	bl	245ac <onoff_request>
	if (err < 0) {
   1cfe6:	2800      	cmp	r0, #0
   1cfe8:	db10      	blt.n	1d00c <blocking_on+0x4c>
   1cfea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1cfee:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cff2:	2100      	movs	r1, #0
   1cff4:	fbe3 0105 	umlal	r0, r1, r3, r5
   1cff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cffc:	2300      	movs	r3, #0
   1cffe:	f7e3 f8cf 	bl	1a0 <__aeabi_uldivmod>
   1d002:	4602      	mov	r2, r0
   1d004:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1d006:	a804      	add	r0, sp, #16
   1d008:	f006 fd7a 	bl	23b00 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1d00c:	b00b      	add	sp, #44	; 0x2c
   1d00e:	bd30      	pop	{r4, r5, pc}
   1d010:	0001cfb9 	.word	0x0001cfb9

0001d014 <lll_clock_init>:

int lll_clock_init(void)
{
   1d014:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1d016:	2001      	movs	r0, #1
   1d018:	f7e8 fe0a 	bl	5c30 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1d01c:	4904      	ldr	r1, [pc, #16]	; (1d030 <lll_clock_init+0x1c>)
   1d01e:	2401      	movs	r4, #1
   1d020:	2300      	movs	r3, #0
   1d022:	608c      	str	r4, [r1, #8]
   1d024:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1d026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d02a:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   1d02c:	f007 babe 	b.w	245ac <onoff_request>
   1d030:	20003c5c 	.word	0x20003c5c

0001d034 <lll_clock_wait>:

int lll_clock_wait(void)
{
   1d034:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1d036:	2001      	movs	r0, #1
   1d038:	f7e8 fdfa 	bl	5c30 <z_nrf_clock_control_get_onoff>

	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
}
   1d03c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1d040:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   1d044:	f7ff bfbc 	b.w	1cfc0 <blocking_on>

0001d048 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1d048:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d04a:	4b0a      	ldr	r3, [pc, #40]	; (1d074 <lll_hfclock_on+0x2c>)
   1d04c:	f3bf 8f5b 	dmb	ish
   1d050:	e853 2f00 	ldrex	r2, [r3]
   1d054:	1c51      	adds	r1, r2, #1
   1d056:	e843 1000 	strex	r0, r1, [r3]
   1d05a:	2800      	cmp	r0, #0
   1d05c:	d1f8      	bne.n	1d050 <lll_hfclock_on+0x8>
   1d05e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1d062:	2a00      	cmp	r2, #0
   1d064:	dd01      	ble.n	1d06a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1d066:	2000      	movs	r0, #0
   1d068:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1d06a:	f7e8 fde9 	bl	5c40 <z_nrf_clock_bt_ctlr_hf_request>
}
   1d06e:	2000      	movs	r0, #0
   1d070:	bd08      	pop	{r3, pc}
   1d072:	bf00      	nop
   1d074:	20003c58 	.word	0x20003c58

0001d078 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1d078:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1d07a:	4b0d      	ldr	r3, [pc, #52]	; (1d0b0 <lll_hfclock_off+0x38>)
   1d07c:	681a      	ldr	r2, [r3, #0]
   1d07e:	2a00      	cmp	r2, #0
   1d080:	dd12      	ble.n	1d0a8 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d082:	f3bf 8f5b 	dmb	ish
   1d086:	e853 2f00 	ldrex	r2, [r3]
   1d08a:	1e51      	subs	r1, r2, #1
   1d08c:	e843 1000 	strex	r0, r1, [r3]
   1d090:	2800      	cmp	r0, #0
   1d092:	d1f8      	bne.n	1d086 <lll_hfclock_off+0xe>
   1d094:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1d098:	2a01      	cmp	r2, #1
   1d09a:	dd01      	ble.n	1d0a0 <lll_hfclock_off+0x28>
		return 0;
   1d09c:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1d09e:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1d0a0:	f7e8 fde4 	bl	5c6c <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1d0a4:	2000      	movs	r0, #0
}
   1d0a6:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1d0a8:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1d0ac:	bd08      	pop	{r3, pc}
   1d0ae:	bf00      	nop
   1d0b0:	20003c58 	.word	0x20003c58

0001d0b4 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1d0b4:	2014      	movs	r0, #20
   1d0b6:	4770      	bx	lr

0001d0b8 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1d0b8:	4b01      	ldr	r3, [pc, #4]	; (1d0c0 <lll_clock_ppm_get+0x8>)
}
   1d0ba:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1d0be:	4770      	bx	lr
   1d0c0:	0002f154 	.word	0x0002f154

0001d0c4 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1d0c4:	b510      	push	{r4, lr}
   1d0c6:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1d0c8:	f7ff ff28 	bl	1cf1c <lll_isr_status_reset>

	radio_filter_disable();
   1d0cc:	f002 f968 	bl	1f3a0 <radio_filter_disable>

	lll_isr_cleanup(param);
   1d0d0:	4620      	mov	r0, r4
}
   1d0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d0d6:	f7ff bf2f 	b.w	1cf38 <lll_isr_cleanup>
   1d0da:	bf00      	nop

0001d0dc <isr_tx>:
{
   1d0dc:	b530      	push	{r4, r5, lr}
   1d0de:	b083      	sub	sp, #12
   1d0e0:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1d0e2:	f7ff ff09 	bl	1cef8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1d0e6:	2096      	movs	r0, #150	; 0x96
   1d0e8:	f002 f98c 	bl	1f404 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1d0ec:	2300      	movs	r3, #0
   1d0ee:	461a      	mov	r2, r3
   1d0f0:	4619      	mov	r1, r3
   1d0f2:	4618      	mov	r0, r3
   1d0f4:	f002 f8fc 	bl	1f2f0 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1d0f8:	f002 f8e8 	bl	1f2cc <radio_pkt_scratch_get>
   1d0fc:	f002 f860 	bl	1f1c0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1d100:	f002 f8ac 	bl	1f25c <radio_is_ready>
   1d104:	b9d8      	cbnz	r0, 1d13e <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   1d106:	481d      	ldr	r0, [pc, #116]	; (1d17c <isr_tx+0xa0>)
   1d108:	4621      	mov	r1, r4
   1d10a:	f001 ff79 	bl	1f000 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1d10e:	f7ff fb6b 	bl	1c7e8 <ull_filter_lll_rl_enabled>
   1d112:	bb48      	cbnz	r0, 1d168 <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1d114:	f002 fa8a 	bl	1f62c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1d118:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1d11a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d11c:	4608      	mov	r0, r1
   1d11e:	f002 f85f 	bl	1f1e0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d122:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1d124:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1d126:	4608      	mov	r0, r1
   1d128:	f002 f856 	bl	1f1d8 <radio_tx_chain_delay_get>
   1d12c:	442c      	add	r4, r5
   1d12e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1d130:	1a20      	subs	r0, r4, r0
   1d132:	f002 fa33 	bl	1f59c <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   1d136:	f002 fa6b 	bl	1f610 <radio_tmr_end_capture>
}
   1d13a:	b003      	add	sp, #12
   1d13c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   1d13e:	4a10      	ldr	r2, [pc, #64]	; (1d180 <isr_tx+0xa4>)
   1d140:	4910      	ldr	r1, [pc, #64]	; (1d184 <isr_tx+0xa8>)
   1d142:	4811      	ldr	r0, [pc, #68]	; (1d188 <isr_tx+0xac>)
   1d144:	f44f 73c3 	mov.w	r3, #390	; 0x186
   1d148:	f007 f9b4 	bl	244b4 <printk>
   1d14c:	4040      	eors	r0, r0
   1d14e:	f380 8811 	msr	BASEPRI, r0
   1d152:	f04f 0003 	mov.w	r0, #3
   1d156:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1d158:	4808      	ldr	r0, [pc, #32]	; (1d17c <isr_tx+0xa0>)
   1d15a:	4621      	mov	r1, r4
   1d15c:	f001 ff50 	bl	1f000 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1d160:	f7ff fb42 	bl	1c7e8 <ull_filter_lll_rl_enabled>
   1d164:	2800      	cmp	r0, #0
   1d166:	d0d5      	beq.n	1d114 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d168:	f10d 0007 	add.w	r0, sp, #7
   1d16c:	f7ff f9a6 	bl	1c4bc <ull_filter_lll_irks_get>
   1d170:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1d172:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1d176:	f002 fb0d 	bl	1f794 <radio_ar_configure>
   1d17a:	e7cb      	b.n	1d114 <isr_tx+0x38>
   1d17c:	0001d615 	.word	0x0001d615
   1d180:	0002f164 	.word	0x0002f164
   1d184:	0002f1b0 	.word	0x0002f1b0
   1d188:	0002e80c 	.word	0x0002e80c

0001d18c <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1d18c:	7b03      	ldrb	r3, [r0, #12]
   1d18e:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   1d192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d196:	2b00      	cmp	r3, #0
   1d198:	4604      	mov	r4, r0
   1d19a:	fa93 f0a3 	rbit	r0, r3
   1d19e:	fab0 f080 	clz	r0, r0
   1d1a2:	bf08      	it	eq
   1d1a4:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1d1a8:	1c45      	adds	r5, r0, #1
   1d1aa:	d053      	beq.n	1d254 <chan_prepare+0xc8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1d1ac:	7b22      	ldrb	r2, [r4, #12]
   1d1ae:	1e59      	subs	r1, r3, #1
   1d1b0:	400b      	ands	r3, r1
   1d1b2:	f363 1206 	bfi	r2, r3, #4, #3
   1d1b6:	7322      	strb	r2, [r4, #12]

	lll_chan_set(36 + chan);
   1d1b8:	f105 0024 	add.w	r0, r5, #36	; 0x24
   1d1bc:	f7ff fe58 	bl	1ce70 <lll_chan_set>
static inline struct pdu_adv *lll_adv_pdu_latest_get(struct lll_adv_pdu *pdu,
						     uint8_t *is_modified)
{
	uint8_t first;

	first = pdu->first;
   1d1c0:	7be2      	ldrb	r2, [r4, #15]
	if (first != pdu->last) {
   1d1c2:	7c21      	ldrb	r1, [r4, #16]
   1d1c4:	428a      	cmp	r2, r1
	first = pdu->first;
   1d1c6:	b2d3      	uxtb	r3, r2
	if (first != pdu->last) {
   1d1c8:	d03e      	beq.n	1d248 <chan_prepare+0xbc>
		first += 1U;
   1d1ca:	3301      	adds	r3, #1
   1d1cc:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1d1ce:	2b02      	cmp	r3, #2
   1d1d0:	d037      	beq.n	1d242 <chan_prepare+0xb6>
   1d1d2:	2627      	movs	r6, #39	; 0x27
   1d1d4:	2202      	movs	r2, #2
   1d1d6:	fb16 2603 	smlabb	r6, r6, r3, r2
			first = 0U;
		}
		pdu->first = first;
   1d1da:	73e3      	strb	r3, [r4, #15]
		*is_modified = 1U;
   1d1dc:	2701      	movs	r7, #1
	}

	return (void *)pdu->pdu[first];
   1d1de:	f104 080f 	add.w	r8, r4, #15
   1d1e2:	eb08 0506 	add.w	r5, r8, r6

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1d1e6:	4628      	mov	r0, r5
   1d1e8:	f001 fff0 	bl	1f1cc <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1d1ec:	f818 3006 	ldrb.w	r3, [r8, r6]
   1d1f0:	f003 030f 	and.w	r3, r3, #15
   1d1f4:	2b02      	cmp	r3, #2
   1d1f6:	d045      	beq.n	1d284 <chan_prepare+0xf8>
	first = pdu->first;
   1d1f8:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
	if (first != pdu->last) {
   1d1fc:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
   1d200:	4290      	cmp	r0, r2
	first = pdu->first;
   1d202:	b2d3      	uxtb	r3, r2
	if (first != pdu->last) {
   1d204:	d037      	beq.n	1d276 <chan_prepare+0xea>
		first += 1U;
   1d206:	3301      	adds	r3, #1
   1d208:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1d20a:	2b02      	cmp	r3, #2
   1d20c:	d043      	beq.n	1d296 <chan_prepare+0x10a>
   1d20e:	2027      	movs	r0, #39	; 0x27
   1d210:	2202      	movs	r2, #2
   1d212:	fb10 2203 	smlabb	r2, r0, r3, r2
		pdu->first = first;
   1d216:	4620      	mov	r0, r4
   1d218:	f800 3f5f 	strb.w	r3, [r0, #95]!
	return (void *)pdu->pdu[first];
   1d21c:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
			/* Copy the address from the adv packet we will send
			 * into the scan response.
			 */
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1d21e:	3002      	adds	r0, #2
   1d220:	2206      	movs	r2, #6
   1d222:	1ca9      	adds	r1, r5, #2
   1d224:	f009 fbbd 	bl	269a2 <memcpy>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1d228:	4621      	mov	r1, r4
   1d22a:	481c      	ldr	r0, [pc, #112]	; (1d29c <chan_prepare+0x110>)
   1d22c:	f001 fee8 	bl	1f000 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d230:	2096      	movs	r0, #150	; 0x96
   1d232:	f002 f8e7 	bl	1f404 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1d236:	2000      	movs	r0, #0
   1d238:	f002 f84c 	bl	1f2d4 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1d23c:	4628      	mov	r0, r5
   1d23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d242:	461e      	mov	r6, r3
			first = 0U;
   1d244:	2300      	movs	r3, #0
   1d246:	e7c8      	b.n	1d1da <chan_prepare+0x4e>
   1d248:	2627      	movs	r6, #39	; 0x27
   1d24a:	2202      	movs	r2, #2
   1d24c:	fb16 2603 	smlabb	r6, r6, r3, r2
	upd = 0U;
   1d250:	2700      	movs	r7, #0
   1d252:	e7c4      	b.n	1d1de <chan_prepare+0x52>
	LL_ASSERT(chan);
   1d254:	4a12      	ldr	r2, [pc, #72]	; (1d2a0 <chan_prepare+0x114>)
   1d256:	4913      	ldr	r1, [pc, #76]	; (1d2a4 <chan_prepare+0x118>)
   1d258:	4813      	ldr	r0, [pc, #76]	; (1d2a8 <chan_prepare+0x11c>)
   1d25a:	f240 237f 	movw	r3, #639	; 0x27f
   1d25e:	f007 f929 	bl	244b4 <printk>
   1d262:	4040      	eors	r0, r0
   1d264:	f380 8811 	msr	BASEPRI, r0
   1d268:	f04f 0003 	mov.w	r0, #3
   1d26c:	df02      	svc	2
   1d26e:	7b23      	ldrb	r3, [r4, #12]
   1d270:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1d274:	e79a      	b.n	1d1ac <chan_prepare+0x20>
		if (upd) {
   1d276:	2f00      	cmp	r7, #0
   1d278:	d0d6      	beq.n	1d228 <chan_prepare+0x9c>
	return (void *)pdu->pdu[first];
   1d27a:	2327      	movs	r3, #39	; 0x27
   1d27c:	fb03 4000 	mla	r0, r3, r0, r4
   1d280:	3061      	adds	r0, #97	; 0x61
   1d282:	e7cc      	b.n	1d21e <chan_prepare+0x92>
		radio_isr_set(isr_done, lll);
   1d284:	4809      	ldr	r0, [pc, #36]	; (1d2ac <chan_prepare+0x120>)
   1d286:	4621      	mov	r1, r4
   1d288:	f001 feba 	bl	1f000 <radio_isr_set>
		radio_switch_complete_and_disable();
   1d28c:	f002 f83c 	bl	1f308 <radio_switch_complete_and_disable>
}
   1d290:	4628      	mov	r0, r5
   1d292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d296:	461a      	mov	r2, r3
			first = 0U;
   1d298:	2300      	movs	r3, #0
   1d29a:	e7bc      	b.n	1d216 <chan_prepare+0x8a>
   1d29c:	0001d0dd 	.word	0x0001d0dd
   1d2a0:	0002f164 	.word	0x0002f164
   1d2a4:	0002f1c4 	.word	0x0002f1c4
   1d2a8:	0002e80c 	.word	0x0002e80c
   1d2ac:	0001d4e1 	.word	0x0001d4e1

0001d2b0 <prepare_cb>:
{
   1d2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1d2b2:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1d2b4:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1d2b6:	f015 0501 	ands.w	r5, r5, #1
{
   1d2ba:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   1d2bc:	d16e      	bne.n	1d39c <prepare_cb+0xec>
	radio_reset();
   1d2be:	4606      	mov	r6, r0
   1d2c0:	f001 febe 	bl	1f040 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d2c4:	4628      	mov	r0, r5
   1d2c6:	f001 ff0d 	bl	1f0e4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1d2ca:	4629      	mov	r1, r5
   1d2cc:	4628      	mov	r0, r5
   1d2ce:	f001 fedd 	bl	1f08c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1d2d2:	462a      	mov	r2, r5
   1d2d4:	2125      	movs	r1, #37	; 0x25
   1d2d6:	2008      	movs	r0, #8
   1d2d8:	f001 ff3c 	bl	1f154 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1d2dc:	4b3b      	ldr	r3, [pc, #236]	; (1d3cc <prepare_cb+0x11c>)
   1d2de:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1d2e0:	a801      	add	r0, sp, #4
   1d2e2:	f001 ff1d 	bl	1f120 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1d2e6:	493a      	ldr	r1, [pc, #232]	; (1d3d0 <prepare_cb+0x120>)
   1d2e8:	f240 605b 	movw	r0, #1627	; 0x65b
   1d2ec:	f001 ffd4 	bl	1f298 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1d2f0:	7b23      	ldrb	r3, [r4, #12]
   1d2f2:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1d2f6:	f362 1306 	bfi	r3, r2, #4, #3
   1d2fa:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1d2fc:	4620      	mov	r0, r4
   1d2fe:	f7ff ff45 	bl	1d18c <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   1d302:	f7ff fa71 	bl	1c7e8 <ull_filter_lll_rl_enabled>
   1d306:	bb50      	cbnz	r0, 1d35e <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1d308:	7b63      	ldrb	r3, [r4, #13]
   1d30a:	079b      	lsls	r3, r3, #30
   1d30c:	d134      	bne.n	1d378 <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   1d30e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1d310:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1d312:	4638      	mov	r0, r7
   1d314:	f7ff fd90 	bl	1ce38 <lll_evt_offset_get>
   1d318:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1d31a:	6872      	ldr	r2, [r6, #4]
   1d31c:	f105 0109 	add.w	r1, r5, #9
   1d320:	2001      	movs	r0, #1
   1d322:	f002 f87b 	bl	1f41c <radio_tmr_start>
	radio_tmr_end_capture();
   1d326:	f002 f973 	bl	1f610 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1d32a:	4620      	mov	r0, r4
   1d32c:	f7fa fbce 	bl	17acc <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1d330:	1c81      	adds	r1, r0, #2
   1d332:	462a      	mov	r2, r5
   1d334:	b2c9      	uxtb	r1, r1
   1d336:	4638      	mov	r0, r7
   1d338:	f7ff fd88 	bl	1ce4c <lll_preempt_calc>
   1d33c:	b930      	cbnz	r0, 1d34c <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   1d33e:	4620      	mov	r0, r4
   1d340:	f7ff fd18 	bl	1cd74 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d344:	b9d0      	cbnz	r0, 1d37c <prepare_cb+0xcc>
}
   1d346:	2000      	movs	r0, #0
   1d348:	b003      	add	sp, #12
   1d34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1d34c:	4821      	ldr	r0, [pc, #132]	; (1d3d4 <prepare_cb+0x124>)
   1d34e:	4621      	mov	r1, r4
   1d350:	f001 fe56 	bl	1f000 <radio_isr_set>
		radio_disable();
   1d354:	f001 ff5e 	bl	1f214 <radio_disable>
}
   1d358:	2000      	movs	r0, #0
   1d35a:	b003      	add	sp, #12
   1d35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1d35e:	7b60      	ldrb	r0, [r4, #13]
   1d360:	f010 0003 	ands.w	r0, r0, #3
   1d364:	bf18      	it	ne
   1d366:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1d368:	f7ff f99e 	bl	1c6a8 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1d36c:	7841      	ldrb	r1, [r0, #1]
   1d36e:	1c82      	adds	r2, r0, #2
   1d370:	7800      	ldrb	r0, [r0, #0]
   1d372:	f001 fff9 	bl	1f368 <radio_filter_configure>
   1d376:	e7ca      	b.n	1d30e <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1d378:	2001      	movs	r0, #1
   1d37a:	e7f5      	b.n	1d368 <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   1d37c:	4a16      	ldr	r2, [pc, #88]	; (1d3d8 <prepare_cb+0x128>)
   1d37e:	4917      	ldr	r1, [pc, #92]	; (1d3dc <prepare_cb+0x12c>)
   1d380:	4817      	ldr	r0, [pc, #92]	; (1d3e0 <prepare_cb+0x130>)
   1d382:	f240 131f 	movw	r3, #287	; 0x11f
   1d386:	f007 f895 	bl	244b4 <printk>
   1d38a:	4040      	eors	r0, r0
   1d38c:	f380 8811 	msr	BASEPRI, r0
   1d390:	f04f 0003 	mov.w	r0, #3
   1d394:	df02      	svc	2
}
   1d396:	2000      	movs	r0, #0
   1d398:	b003      	add	sp, #12
   1d39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   1d39c:	f7ff fe6c 	bl	1d078 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1d3a0:	2800      	cmp	r0, #0
   1d3a2:	db05      	blt.n	1d3b0 <prepare_cb+0x100>
		lll_done(NULL);
   1d3a4:	2000      	movs	r0, #0
   1d3a6:	f7ff fce7 	bl	1cd78 <lll_done>
}
   1d3aa:	2000      	movs	r0, #0
   1d3ac:	b003      	add	sp, #12
   1d3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1d3b0:	4a09      	ldr	r2, [pc, #36]	; (1d3d8 <prepare_cb+0x128>)
   1d3b2:	490c      	ldr	r1, [pc, #48]	; (1d3e4 <prepare_cb+0x134>)
   1d3b4:	480a      	ldr	r0, [pc, #40]	; (1d3e0 <prepare_cb+0x130>)
   1d3b6:	23c0      	movs	r3, #192	; 0xc0
   1d3b8:	f007 f87c 	bl	244b4 <printk>
   1d3bc:	4040      	eors	r0, r0
   1d3be:	f380 8811 	msr	BASEPRI, r0
   1d3c2:	f04f 0003 	mov.w	r0, #3
   1d3c6:	df02      	svc	2
   1d3c8:	e7ec      	b.n	1d3a4 <prepare_cb+0xf4>
   1d3ca:	bf00      	nop
   1d3cc:	8e89bed6 	.word	0x8e89bed6
   1d3d0:	00555555 	.word	0x00555555
   1d3d4:	0001d0c5 	.word	0x0001d0c5
   1d3d8:	0002f164 	.word	0x0002f164
   1d3dc:	0002e974 	.word	0x0002e974
   1d3e0:	0002e80c 	.word	0x0002e80c
   1d3e4:	0002f148 	.word	0x0002f148

0001d3e8 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1d3e8:	68c3      	ldr	r3, [r0, #12]
{
   1d3ea:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1d3ec:	681e      	ldr	r6, [r3, #0]
{
   1d3ee:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1d3f0:	f7f7 f9b4 	bl	1475c <ticker_ticks_now_get>
   1d3f4:	4605      	mov	r5, r0
   1d3f6:	4630      	mov	r0, r6
   1d3f8:	f7ff fd1e 	bl	1ce38 <lll_evt_offset_get>
	p->remainder = 0;
   1d3fc:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1d3fe:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1d400:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1d404:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1d406:	4620      	mov	r0, r4
}
   1d408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1d40c:	f7ff bf50 	b.w	1d2b0 <prepare_cb>

0001d410 <is_abort_cb>:
	if (next != curr) {
   1d410:	4282      	cmp	r2, r0
{
   1d412:	b508      	push	{r3, lr}
	if (next != curr) {
   1d414:	d011      	beq.n	1d43a <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1d416:	7b12      	ldrb	r2, [r2, #12]
   1d418:	07d2      	lsls	r2, r2, #31
   1d41a:	d402      	bmi.n	1d422 <is_abort_cb+0x12>
			return -ECANCELED;
   1d41c:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1d420:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1d422:	4a14      	ldr	r2, [pc, #80]	; (1d474 <is_abort_cb+0x64>)
   1d424:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1d426:	9a02      	ldr	r2, [sp, #8]
   1d428:	2300      	movs	r3, #0
   1d42a:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1d42c:	f7ff fe0c 	bl	1d048 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1d430:	2800      	cmp	r0, #0
   1d432:	db0f      	blt.n	1d454 <is_abort_cb+0x44>
   1d434:	f06f 000a 	mvn.w	r0, #10
}
   1d438:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1d43a:	7bd3      	ldrb	r3, [r2, #15]
   1d43c:	2127      	movs	r1, #39	; 0x27
   1d43e:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1d442:	7c53      	ldrb	r3, [r2, #17]
   1d444:	f003 030f 	and.w	r3, r3, #15
   1d448:	2b01      	cmp	r3, #1
		return 0;
   1d44a:	bf14      	ite	ne
   1d44c:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1d450:	2000      	moveq	r0, #0
}
   1d452:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1d454:	4a08      	ldr	r2, [pc, #32]	; (1d478 <is_abort_cb+0x68>)
   1d456:	4909      	ldr	r1, [pc, #36]	; (1d47c <is_abort_cb+0x6c>)
   1d458:	4809      	ldr	r0, [pc, #36]	; (1d480 <is_abort_cb+0x70>)
   1d45a:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   1d45e:	f007 f829 	bl	244b4 <printk>
   1d462:	4040      	eors	r0, r0
   1d464:	f380 8811 	msr	BASEPRI, r0
   1d468:	f04f 0003 	mov.w	r0, #3
   1d46c:	df02      	svc	2
   1d46e:	f06f 000a 	mvn.w	r0, #10
}
   1d472:	bd08      	pop	{r3, pc}
   1d474:	0001d3e9 	.word	0x0001d3e9
   1d478:	0002f164 	.word	0x0002f164
   1d47c:	0002f148 	.word	0x0002f148
   1d480:	0002e80c 	.word	0x0002e80c

0001d484 <abort_cb>:
{
   1d484:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1d486:	b1d8      	cbz	r0, 1d4c0 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1d488:	460c      	mov	r4, r1
   1d48a:	f7ff fdf5 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d48e:	2800      	cmp	r0, #0
   1d490:	db04      	blt.n	1d49c <abort_cb+0x18>
	lll_done(param);
   1d492:	4620      	mov	r0, r4
}
   1d494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1d498:	f7ff bc6e 	b.w	1cd78 <lll_done>
	LL_ASSERT(err >= 0);
   1d49c:	4a0c      	ldr	r2, [pc, #48]	; (1d4d0 <abort_cb+0x4c>)
   1d49e:	490d      	ldr	r1, [pc, #52]	; (1d4d4 <abort_cb+0x50>)
   1d4a0:	480d      	ldr	r0, [pc, #52]	; (1d4d8 <abort_cb+0x54>)
   1d4a2:	f44f 73b8 	mov.w	r3, #368	; 0x170
   1d4a6:	f007 f805 	bl	244b4 <printk>
   1d4aa:	4040      	eors	r0, r0
   1d4ac:	f380 8811 	msr	BASEPRI, r0
   1d4b0:	f04f 0003 	mov.w	r0, #3
   1d4b4:	df02      	svc	2
	lll_done(param);
   1d4b6:	4620      	mov	r0, r4
}
   1d4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1d4bc:	f7ff bc5c 	b.w	1cd78 <lll_done>
		radio_isr_set(isr_abort, param);
   1d4c0:	4806      	ldr	r0, [pc, #24]	; (1d4dc <abort_cb+0x58>)
   1d4c2:	f001 fd9d 	bl	1f000 <radio_isr_set>
}
   1d4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1d4ca:	f001 bea3 	b.w	1f214 <radio_disable>
   1d4ce:	bf00      	nop
   1d4d0:	0002f164 	.word	0x0002f164
   1d4d4:	0002f148 	.word	0x0002f148
   1d4d8:	0002e80c 	.word	0x0002e80c
   1d4dc:	0001d0c5 	.word	0x0001d0c5

0001d4e0 <isr_done>:
{
   1d4e0:	b510      	push	{r4, lr}
   1d4e2:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1d4e4:	f7ff fd1a 	bl	1cf1c <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1d4e8:	7b23      	ldrb	r3, [r4, #12]
   1d4ea:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1d4ee:	2a01      	cmp	r2, #1
   1d4f0:	d105      	bne.n	1d4fe <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1d4f2:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1d4f6:	f362 1306 	bfi	r3, r2, #4, #3
   1d4fa:	7323      	strb	r3, [r4, #12]
   1d4fc:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   1d4fe:	f013 0f70 	tst.w	r3, #112	; 0x70
   1d502:	d106      	bne.n	1d512 <isr_done+0x32>
	radio_filter_disable();
   1d504:	f001 ff4c 	bl	1f3a0 <radio_filter_disable>
	lll_isr_cleanup(param);
   1d508:	4620      	mov	r0, r4
}
   1d50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d50e:	f7ff bd13 	b.w	1cf38 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1d512:	4620      	mov	r0, r4
   1d514:	f7ff fe3a 	bl	1d18c <chan_prepare>
		radio_tx_enable();
   1d518:	f001 fe76 	bl	1f208 <radio_tx_enable>
}
   1d51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1d520:	f002 b876 	b.w	1f610 <radio_tmr_end_capture>

0001d524 <lll_adv_init>:
}
   1d524:	2000      	movs	r0, #0
   1d526:	4770      	bx	lr

0001d528 <lll_adv_reset>:
   1d528:	2000      	movs	r0, #0
   1d52a:	4770      	bx	lr

0001d52c <lll_adv_prepare>:
{
   1d52c:	b510      	push	{r4, lr}
   1d52e:	b082      	sub	sp, #8
   1d530:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1d532:	f7ff fd89 	bl	1d048 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1d536:	2800      	cmp	r0, #0
   1d538:	db19      	blt.n	1d56e <lll_adv_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1d53a:	4a13      	ldr	r2, [pc, #76]	; (1d588 <lll_adv_prepare+0x5c>)
   1d53c:	4913      	ldr	r1, [pc, #76]	; (1d58c <lll_adv_prepare+0x60>)
   1d53e:	4814      	ldr	r0, [pc, #80]	; (1d590 <lll_adv_prepare+0x64>)
   1d540:	9400      	str	r4, [sp, #0]
   1d542:	2300      	movs	r3, #0
   1d544:	f7ff fb8c 	bl	1cc60 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d548:	b108      	cbz	r0, 1d54e <lll_adv_prepare+0x22>
   1d54a:	3044      	adds	r0, #68	; 0x44
   1d54c:	d101      	bne.n	1d552 <lll_adv_prepare+0x26>
}
   1d54e:	b002      	add	sp, #8
   1d550:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d552:	4a10      	ldr	r2, [pc, #64]	; (1d594 <lll_adv_prepare+0x68>)
   1d554:	4910      	ldr	r1, [pc, #64]	; (1d598 <lll_adv_prepare+0x6c>)
   1d556:	4811      	ldr	r0, [pc, #68]	; (1d59c <lll_adv_prepare+0x70>)
   1d558:	236a      	movs	r3, #106	; 0x6a
   1d55a:	f006 ffab 	bl	244b4 <printk>
   1d55e:	4040      	eors	r0, r0
   1d560:	f380 8811 	msr	BASEPRI, r0
   1d564:	f04f 0003 	mov.w	r0, #3
   1d568:	df02      	svc	2
}
   1d56a:	b002      	add	sp, #8
   1d56c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1d56e:	4a09      	ldr	r2, [pc, #36]	; (1d594 <lll_adv_prepare+0x68>)
   1d570:	490b      	ldr	r1, [pc, #44]	; (1d5a0 <lll_adv_prepare+0x74>)
   1d572:	480a      	ldr	r0, [pc, #40]	; (1d59c <lll_adv_prepare+0x70>)
   1d574:	2367      	movs	r3, #103	; 0x67
   1d576:	f006 ff9d 	bl	244b4 <printk>
   1d57a:	4040      	eors	r0, r0
   1d57c:	f380 8811 	msr	BASEPRI, r0
   1d580:	f04f 0003 	mov.w	r0, #3
   1d584:	df02      	svc	2
   1d586:	e7d8      	b.n	1d53a <lll_adv_prepare+0xe>
   1d588:	0001d2b1 	.word	0x0001d2b1
   1d58c:	0001d485 	.word	0x0001d485
   1d590:	0001d411 	.word	0x0001d411
   1d594:	0002f164 	.word	0x0002f164
   1d598:	0002f1cc 	.word	0x0002f1cc
   1d59c:	0002e80c 	.word	0x0002e80c
   1d5a0:	0002f148 	.word	0x0002f148

0001d5a4 <lll_adv_scan_req_check>:
{
   1d5a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1d5a8:	7b45      	ldrb	r5, [r0, #13]
{
   1d5aa:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1d5ae:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1d5b0:	07ea      	lsls	r2, r5, #31
{
   1d5b2:	4689      	mov	r9, r1
   1d5b4:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1d5b6:	d50a      	bpl.n	1d5ce <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   1d5b8:	f1b8 0f00 	cmp.w	r8, #0
   1d5bc:	d017      	beq.n	1d5ee <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1d5be:	f899 3000 	ldrb.w	r3, [r9]
   1d5c2:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   1d5c6:	d019      	beq.n	1d5fc <lll_adv_scan_req_check+0x58>
{
   1d5c8:	2000      	movs	r0, #0
}
   1d5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d5ce:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1d5d0:	f811 0b02 	ldrb.w	r0, [r1], #2
   1d5d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d5d6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d5da:	f7ff f8a5 	bl	1c728 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1d5de:	2800      	cmp	r0, #0
   1d5e0:	d1ed      	bne.n	1d5be <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   1d5e2:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1d5e4:	07db      	lsls	r3, r3, #31
   1d5e6:	d5ef      	bpl.n	1d5c8 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   1d5e8:	f1b8 0f00 	cmp.w	r8, #0
   1d5ec:	d1e7      	bne.n	1d5be <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1d5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d5f0:	7818      	ldrb	r0, [r3, #0]
   1d5f2:	f7ff f829 	bl	1c648 <ull_filter_lll_irk_whitelisted>
   1d5f6:	2800      	cmp	r0, #0
   1d5f8:	d1e1      	bne.n	1d5be <lll_adv_scan_req_check+0x1a>
   1d5fa:	e7e5      	b.n	1d5c8 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1d5fc:	f109 0108 	add.w	r1, r9, #8
   1d600:	4630      	mov	r0, r6
   1d602:	2206      	movs	r2, #6
   1d604:	f009 f9bd 	bl	26982 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1d608:	fab0 f080 	clz	r0, r0
   1d60c:	0940      	lsrs	r0, r0, #5
}
   1d60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d612:	bf00      	nop

0001d614 <isr_rx>:
{
   1d614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d618:	b085      	sub	sp, #20
   1d61a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1d61c:	f001 fe28 	bl	1f270 <radio_is_done>
	if (trx_done) {
   1d620:	f010 0fff 	tst.w	r0, #255	; 0xff
   1d624:	d10a      	bne.n	1d63c <isr_rx+0x28>
	lll_isr_status_reset();
   1d626:	f7ff fc79 	bl	1cf1c <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1d62a:	48b7      	ldr	r0, [pc, #732]	; (1d908 <isr_rx+0x2f4>)
   1d62c:	4621      	mov	r1, r4
   1d62e:	f001 fce7 	bl	1f000 <radio_isr_set>
	radio_disable();
   1d632:	f001 fdef 	bl	1f214 <radio_disable>
}
   1d636:	b005      	add	sp, #20
   1d638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
   1d63c:	f001 fe38 	bl	1f2b0 <radio_crc_is_valid>
   1d640:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   1d642:	f001 febf 	bl	1f3c4 <radio_filter_has_match>
   1d646:	4605      	mov	r5, r0
		devmatch_id = radio_filter_match_get();
   1d648:	f001 fec6 	bl	1f3d8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1d64c:	f002 f8e8 	bl	1f820 <radio_ar_has_match>
   1d650:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1d652:	f002 f8d3 	bl	1f7fc <radio_ar_match_get>
   1d656:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1d658:	f001 fe7c 	bl	1f354 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1d65c:	f7ff fc5e 	bl	1cf1c <lll_isr_status_reset>
	if (crc_ok) {
   1d660:	f017 0fff 	tst.w	r7, #255	; 0xff
   1d664:	d0e1      	beq.n	1d62a <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1d666:	f016 07ff 	ands.w	r7, r6, #255	; 0xff
   1d66a:	f040 8086 	bne.w	1d77a <isr_rx+0x166>
   1d66e:	20ff      	movs	r0, #255	; 0xff
   1d670:	f88d 000f 	strb.w	r0, [sp, #15]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1d674:	f001 fe2a 	bl	1f2cc <radio_pkt_scratch_get>
   1d678:	f894 800f 	ldrb.w	r8, [r4, #15]
   1d67c:	4606      	mov	r6, r0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d67e:	7800      	ldrb	r0, [r0, #0]
   1d680:	2311      	movs	r3, #17
   1d682:	f04f 0927 	mov.w	r9, #39	; 0x27
   1d686:	fb09 3808 	mla	r8, r9, r8, r3
   1d68a:	f000 030f 	and.w	r3, r0, #15
   1d68e:	eb04 0a08 	add.w	sl, r4, r8
   1d692:	2b03      	cmp	r3, #3
		devmatch_ok = radio_filter_has_match();
   1d694:	b2ed      	uxtb	r5, r5
	addr = pdu_adv->adv_ind.addr;
   1d696:	f10a 0b02 	add.w	fp, sl, #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d69a:	f000 8081 	beq.w	1d7a0 <isr_rx+0x18c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1d69e:	2b05      	cmp	r3, #5
   1d6a0:	d1c3      	bne.n	1d62a <isr_rx+0x16>
   1d6a2:	7873      	ldrb	r3, [r6, #1]
   1d6a4:	2b22      	cmp	r3, #34	; 0x22
   1d6a6:	d1c0      	bne.n	1d62a <isr_rx+0x16>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, uint8_t devmatch_ok,
				   uint8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1d6a8:	f814 2008 	ldrb.w	r2, [r4, r8]
   1d6ac:	f002 020f 	and.w	r2, r2, #15
   1d6b0:	2a01      	cmp	r2, #1
   1d6b2:	f000 80b7 	beq.w	1d824 <isr_rx+0x210>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   1d6b6:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1d6b8:	0799      	lsls	r1, r3, #30
   1d6ba:	d563      	bpl.n	1d784 <isr_rx+0x170>
		(((lll->filter_policy & 0x02) != 0) &&
   1d6bc:	2d00      	cmp	r5, #0
   1d6be:	f000 80a9 	beq.w	1d814 <isr_rx+0x200>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   1d6c2:	f814 3008 	ldrb.w	r3, [r4, r8]
   1d6c6:	7831      	ldrb	r1, [r6, #0]
   1d6c8:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1d6cc:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1d6d0:	d1ab      	bne.n	1d62a <isr_rx+0x16>
   1d6d2:	f003 030f 	and.w	r3, r3, #15
   1d6d6:	2b01      	cmp	r3, #1
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1d6d8:	f106 0508 	add.w	r5, r6, #8
	return (adv->tx_addr == ci->rx_addr) &&
   1d6dc:	f000 80cf 	beq.w	1d87e <isr_rx+0x26a>
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1d6e0:	4629      	mov	r1, r5
   1d6e2:	4658      	mov	r0, fp
   1d6e4:	2206      	movs	r2, #6
   1d6e6:	f009 f94c 	bl	26982 <memcmp>
			 BDADDR_SIZE)) ||
   1d6ea:	fab0 f080 	clz	r0, r0
   1d6ee:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1d6f0:	2800      	cmp	r0, #0
   1d6f2:	d09a      	beq.n	1d62a <isr_rx+0x16>
				   &rl_idx) &&
   1d6f4:	68a3      	ldr	r3, [r4, #8]
   1d6f6:	2b00      	cmp	r3, #0
   1d6f8:	d097      	beq.n	1d62a <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   1d6fa:	2004      	movs	r0, #4
   1d6fc:	f7f9 fdba 	bl	17274 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1d700:	2800      	cmp	r0, #0
   1d702:	d092      	beq.n	1d62a <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   1d704:	4881      	ldr	r0, [pc, #516]	; (1d90c <isr_rx+0x2f8>)
   1d706:	4621      	mov	r1, r4
   1d708:	f001 fc7a 	bl	1f000 <radio_isr_set>
		radio_disable();
   1d70c:	f001 fd82 	bl	1f214 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1d710:	f001 fda4 	bl	1f25c <radio_is_ready>
   1d714:	2800      	cmp	r0, #0
   1d716:	d16f      	bne.n	1d7f8 <isr_rx+0x1e4>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1d718:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1d71a:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1d71e:	07db      	lsls	r3, r3, #31
   1d720:	7122      	strb	r2, [r4, #4]
   1d722:	d45b      	bmi.n	1d7dc <isr_rx+0x1c8>
		rx = ull_pdu_rx_alloc();
   1d724:	f7f9 fdc4 	bl	172b0 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   1d728:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
   1d72c:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1d72e:	220d      	movs	r2, #13
		rx->hdr.handle = 0xffff;
   1d730:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1d732:	4631      	mov	r1, r6
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1d734:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1d736:	2224      	movs	r2, #36	; 0x24
   1d738:	301c      	adds	r0, #28
   1d73a:	f009 f932 	bl	269a2 <memcpy>
		ftr->param = lll;
   1d73e:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1d740:	f001 ff12 	bl	1f568 <radio_tmr_start_get>
   1d744:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1d746:	f001 ff6b 	bl	1f620 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1d74a:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1d74c:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1d74e:	4608      	mov	r0, r1
   1d750:	f001 fd42 	bl	1f1d8 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1d754:	1a24      	subs	r4, r4, r0
   1d756:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1d758:	2f00      	cmp	r7, #0
   1d75a:	d03d      	beq.n	1d7d8 <isr_rx+0x1c4>
   1d75c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1d760:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1d762:	f7f9 fda5 	bl	172b0 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   1d766:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   1d768:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1d76a:	6828      	ldr	r0, [r5, #0]
   1d76c:	f7f9 fdb8 	bl	172e0 <ull_rx_put>
		ull_rx_sched();
   1d770:	f7f9 fdc6 	bl	17300 <ull_rx_sched>
}
   1d774:	b005      	add	sp, #20
   1d776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1d77a:	fa5f f088 	uxtb.w	r0, r8
   1d77e:	f7fe ff11 	bl	1c5a4 <ull_filter_lll_rl_irk_idx>
   1d782:	e775      	b.n	1d670 <isr_rx+0x5c>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1d784:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d788:	f10d 020f 	add.w	r2, sp, #15
   1d78c:	1cb1      	adds	r1, r6, #2
   1d78e:	f7fe ffcb 	bl	1c728 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1d792:	2800      	cmp	r0, #0
   1d794:	d195      	bne.n	1d6c2 <isr_rx+0xae>
		(((lll->filter_policy & 0x02) != 0) &&
   1d796:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1d798:	079a      	lsls	r2, r3, #30
   1d79a:	f57f af46 	bpl.w	1d62a <isr_rx+0x16>
   1d79e:	e78d      	b.n	1d6bc <isr_rx+0xa8>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d7a0:	7873      	ldrb	r3, [r6, #1]
   1d7a2:	2b0c      	cmp	r3, #12
   1d7a4:	f47f af41 	bne.w	1d62a <isr_rx+0x16>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1d7a8:	f814 2008 	ldrb.w	r2, [r4, r8]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1d7ac:	f002 030f 	and.w	r3, r2, #15
   1d7b0:	2b01      	cmp	r3, #1
   1d7b2:	f43f af3a 	beq.w	1d62a <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1d7b6:	f10d 030f 	add.w	r3, sp, #15
   1d7ba:	9301      	str	r3, [sp, #4]
   1d7bc:	9500      	str	r5, [sp, #0]
   1d7be:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1d7c2:	465b      	mov	r3, fp
   1d7c4:	4631      	mov	r1, r6
   1d7c6:	4620      	mov	r0, r4
   1d7c8:	f7ff feec 	bl	1d5a4 <lll_adv_scan_req_check>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   1d7cc:	2800      	cmp	r0, #0
   1d7ce:	d15f      	bne.n	1d890 <isr_rx+0x27c>
   1d7d0:	7830      	ldrb	r0, [r6, #0]
   1d7d2:	f000 030f 	and.w	r3, r0, #15
   1d7d6:	e762      	b.n	1d69e <isr_rx+0x8a>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1d7d8:	23ff      	movs	r3, #255	; 0xff
   1d7da:	e7c1      	b.n	1d760 <isr_rx+0x14c>
		LL_ASSERT(!ret);
   1d7dc:	4a4c      	ldr	r2, [pc, #304]	; (1d910 <isr_rx+0x2fc>)
   1d7de:	494d      	ldr	r1, [pc, #308]	; (1d914 <isr_rx+0x300>)
   1d7e0:	484d      	ldr	r0, [pc, #308]	; (1d918 <isr_rx+0x304>)
   1d7e2:	f240 3317 	movw	r3, #791	; 0x317
   1d7e6:	f006 fe65 	bl	244b4 <printk>
   1d7ea:	4040      	eors	r0, r0
   1d7ec:	f380 8811 	msr	BASEPRI, r0
   1d7f0:	f04f 0003 	mov.w	r0, #3
   1d7f4:	df02      	svc	2
   1d7f6:	e795      	b.n	1d724 <isr_rx+0x110>
		LL_ASSERT(!radio_is_ready());
   1d7f8:	4a45      	ldr	r2, [pc, #276]	; (1d910 <isr_rx+0x2fc>)
   1d7fa:	4948      	ldr	r1, [pc, #288]	; (1d91c <isr_rx+0x308>)
   1d7fc:	4846      	ldr	r0, [pc, #280]	; (1d918 <isr_rx+0x304>)
   1d7fe:	f240 3309 	movw	r3, #777	; 0x309
   1d802:	f006 fe57 	bl	244b4 <printk>
   1d806:	4040      	eors	r0, r0
   1d808:	f380 8811 	msr	BASEPRI, r0
   1d80c:	f04f 0003 	mov.w	r0, #3
   1d810:	df02      	svc	2
   1d812:	e781      	b.n	1d718 <isr_rx+0x104>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1d814:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1d818:	f7fe ff16 	bl	1c648 <ull_filter_lll_irk_whitelisted>
   1d81c:	2800      	cmp	r0, #0
   1d81e:	f47f af50 	bne.w	1d6c2 <isr_rx+0xae>
   1d822:	e702      	b.n	1d62a <isr_rx+0x16>
						      ci->connect_ind.init_addr,
   1d824:	1cb5      	adds	r5, r6, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1d826:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d82a:	4629      	mov	r1, r5
   1d82c:	f10d 020f 	add.w	r2, sp, #15
   1d830:	f7fe ff7a 	bl	1c728 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   1d834:	2800      	cmp	r0, #0
   1d836:	f43f aef8 	beq.w	1d62a <isr_rx+0x16>
	return (adv->tx_addr == ci->rx_addr) &&
   1d83a:	f814 3008 	ldrb.w	r3, [r4, r8]
   1d83e:	7831      	ldrb	r1, [r6, #0]
   1d840:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1d844:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1d848:	f47f aeef 	bne.w	1d62a <isr_rx+0x16>
   1d84c:	f003 030f 	and.w	r3, r3, #15
   1d850:	2b01      	cmp	r3, #1
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1d852:	f106 0908 	add.w	r9, r6, #8
	return (adv->tx_addr == ci->rx_addr) &&
   1d856:	d04e      	beq.n	1d8f6 <isr_rx+0x2e2>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1d858:	4649      	mov	r1, r9
   1d85a:	4658      	mov	r0, fp
   1d85c:	2206      	movs	r2, #6
   1d85e:	f009 f890 	bl	26982 <memcmp>
			 BDADDR_SIZE)) ||
   1d862:	2800      	cmp	r0, #0
   1d864:	f47f aee1 	bne.w	1d62a <isr_rx+0x16>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   1d868:	f89d 000f 	ldrb.w	r0, [sp, #15]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1d86c:	28ff      	cmp	r0, #255	; 0xff
   1d86e:	d02f      	beq.n	1d8d0 <isr_rx+0x2bc>
   1d870:	7ba3      	ldrb	r3, [r4, #14]
   1d872:	2bff      	cmp	r3, #255	; 0xff
   1d874:	d02c      	beq.n	1d8d0 <isr_rx+0x2bc>
		return rl_idx == lll->rl_idx;
   1d876:	1ac5      	subs	r5, r0, r3
   1d878:	4268      	negs	r0, r5
   1d87a:	4168      	adcs	r0, r5
   1d87c:	e738      	b.n	1d6f0 <isr_rx+0xdc>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1d87e:	4629      	mov	r1, r5
   1d880:	2206      	movs	r2, #6
   1d882:	4658      	mov	r0, fp
   1d884:	f009 f87d 	bl	26982 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1d888:	2800      	cmp	r0, #0
   1d88a:	f43f af33 	beq.w	1d6f4 <isr_rx+0xe0>
   1d88e:	e727      	b.n	1d6e0 <isr_rx+0xcc>
		radio_isr_set(isr_done, lll);
   1d890:	481d      	ldr	r0, [pc, #116]	; (1d908 <isr_rx+0x2f4>)
   1d892:	4621      	mov	r1, r4
   1d894:	f001 fbb4 	bl	1f000 <radio_isr_set>
		radio_switch_complete_and_disable();
   1d898:	f001 fd36 	bl	1f308 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1d89c:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   1d8a0:	fb09 4000 	mla	r0, r9, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1d8a4:	3061      	adds	r0, #97	; 0x61
   1d8a6:	f001 fc91 	bl	1f1cc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1d8aa:	f001 fcd7 	bl	1f25c <radio_is_ready>
   1d8ae:	2800      	cmp	r0, #0
   1d8b0:	f43f aec1 	beq.w	1d636 <isr_rx+0x22>
   1d8b4:	4a16      	ldr	r2, [pc, #88]	; (1d910 <isr_rx+0x2fc>)
   1d8b6:	4919      	ldr	r1, [pc, #100]	; (1d91c <isr_rx+0x308>)
   1d8b8:	4817      	ldr	r0, [pc, #92]	; (1d918 <isr_rx+0x304>)
   1d8ba:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1d8be:	f006 fdf9 	bl	244b4 <printk>
   1d8c2:	4040      	eors	r0, r0
   1d8c4:	f380 8811 	msr	BASEPRI, r0
   1d8c8:	f04f 0003 	mov.w	r0, #3
   1d8cc:	df02      	svc	2
		if (!err) {
   1d8ce:	e6b2      	b.n	1d636 <isr_rx+0x22>
	return (adv->rx_addr == ci->tx_addr) &&
   1d8d0:	7833      	ldrb	r3, [r6, #0]
   1d8d2:	f814 2008 	ldrb.w	r2, [r4, r8]
   1d8d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1d8da:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1d8de:	f47f aea4 	bne.w	1d62a <isr_rx+0x16>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1d8e2:	4629      	mov	r1, r5
   1d8e4:	f10a 0008 	add.w	r0, sl, #8
   1d8e8:	2206      	movs	r2, #6
   1d8ea:	f009 f84a 	bl	26982 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   1d8ee:	fab0 f080 	clz	r0, r0
   1d8f2:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(adv, ci) &&
   1d8f4:	e6fc      	b.n	1d6f0 <isr_rx+0xdc>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1d8f6:	4649      	mov	r1, r9
   1d8f8:	2206      	movs	r2, #6
   1d8fa:	4658      	mov	r0, fp
   1d8fc:	f009 f841 	bl	26982 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1d900:	2800      	cmp	r0, #0
   1d902:	d0b1      	beq.n	1d868 <isr_rx+0x254>
   1d904:	e7a8      	b.n	1d858 <isr_rx+0x244>
   1d906:	bf00      	nop
   1d908:	0001d4e1 	.word	0x0001d4e1
   1d90c:	0001d0c5 	.word	0x0001d0c5
   1d910:	0002f164 	.word	0x0002f164
   1d914:	0002e974 	.word	0x0002e974
   1d918:	0002e80c 	.word	0x0002e80c
   1d91c:	0002f1b0 	.word	0x0002f1b0

0001d920 <ticker_stop_cb>:
	lll_done(param);
}

static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder, uint16_t lazy,
			   void *param)
{
   1d920:	b508      	push	{r3, lr}
	radio_isr_set(isr_done_cleanup, param);
   1d922:	4619      	mov	r1, r3
   1d924:	4803      	ldr	r0, [pc, #12]	; (1d934 <ticker_stop_cb+0x14>)
   1d926:	f001 fb6b 	bl	1f000 <radio_isr_set>
	radio_disable();
}
   1d92a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_disable();
   1d92e:	f001 bc71 	b.w	1f214 <radio_disable>
   1d932:	bf00      	nop
   1d934:	0001db45 	.word	0x0001db45

0001d938 <prepare_cb>:
{
   1d938:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1d93a:	68c4      	ldr	r4, [r0, #12]
   1d93c:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1d93e:	f015 0501 	ands.w	r5, r5, #1
{
   1d942:	b08d      	sub	sp, #52	; 0x34
	if (unlikely(lll_is_stop(lll))) {
   1d944:	f040 80ce 	bne.w	1dae4 <prepare_cb+0x1ac>
	lll->state = 0U;
   1d948:	7a23      	ldrb	r3, [r4, #8]
   1d94a:	f365 0300 	bfi	r3, r5, #0, #1
   1d94e:	7223      	strb	r3, [r4, #8]
	radio_reset();
   1d950:	4606      	mov	r6, r0
   1d952:	f001 fb75 	bl	1f040 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d956:	4628      	mov	r0, r5
   1d958:	f001 fbc4 	bl	1f0e4 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1d95c:	4629      	mov	r1, r5
   1d95e:	4628      	mov	r0, r5
   1d960:	f001 fb94 	bl	1f08c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1d964:	462a      	mov	r2, r5
   1d966:	2125      	movs	r1, #37	; 0x25
   1d968:	2008      	movs	r0, #8
   1d96a:	f001 fbf3 	bl	1f154 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d96e:	2001      	movs	r0, #1
   1d970:	f7f9 fc80 	bl	17274 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d974:	4605      	mov	r5, r0
   1d976:	2800      	cmp	r0, #0
   1d978:	f000 80a7 	beq.w	1daca <prepare_cb+0x192>
	radio_pkt_rx_set(node_rx->pdu);
   1d97c:	f105 001c 	add.w	r0, r5, #28
   1d980:	f001 fc1e 	bl	1f1c0 <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1d984:	4b63      	ldr	r3, [pc, #396]	; (1db14 <prepare_cb+0x1dc>)
   1d986:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1d988:	a80b      	add	r0, sp, #44	; 0x2c
   1d98a:	f001 fbc9 	bl	1f120 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1d98e:	4962      	ldr	r1, [pc, #392]	; (1db18 <prepare_cb+0x1e0>)
   1d990:	f240 605b 	movw	r0, #1627	; 0x65b
   1d994:	f001 fc80 	bl	1f298 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1d998:	7a20      	ldrb	r0, [r4, #8]
   1d99a:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1d99e:	3025      	adds	r0, #37	; 0x25
   1d9a0:	f7ff fa66 	bl	1ce70 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1d9a4:	4621      	mov	r1, r4
   1d9a6:	485d      	ldr	r0, [pc, #372]	; (1db1c <prepare_cb+0x1e4>)
   1d9a8:	f001 fb2a 	bl	1f000 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1d9ac:	2096      	movs	r0, #150	; 0x96
   1d9ae:	f001 fd29 	bl	1f404 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1d9b2:	2300      	movs	r3, #0
   1d9b4:	461a      	mov	r2, r3
   1d9b6:	4619      	mov	r1, r3
   1d9b8:	4618      	mov	r0, r3
   1d9ba:	f001 fc99 	bl	1f2f0 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1d9be:	f7fe ff13 	bl	1c7e8 <ull_filter_lll_rl_enabled>
   1d9c2:	bb88      	cbnz	r0, 1da28 <prepare_cb+0xf0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1d9c4:	7a23      	ldrb	r3, [r4, #8]
   1d9c6:	f013 0f18 	tst.w	r3, #24
   1d9ca:	d153      	bne.n	1da74 <prepare_cb+0x13c>
	evt = HDR_LLL2EVT(lll);
   1d9cc:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1d9ce:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1d9d0:	4638      	mov	r0, r7
   1d9d2:	f7ff fa31 	bl	1ce38 <lll_evt_offset_get>
   1d9d6:	4405      	add	r5, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1d9d8:	6872      	ldr	r2, [r6, #4]
   1d9da:	f105 0109 	add.w	r1, r5, #9
   1d9de:	2000      	movs	r0, #0
   1d9e0:	f001 fd1c 	bl	1f41c <radio_tmr_start>
	radio_tmr_end_capture();
   1d9e4:	f001 fe14 	bl	1f610 <radio_tmr_end_capture>
	radio_rssi_measure();
   1d9e8:	f001 fc9c 	bl	1f324 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1d9ec:	4620      	mov	r0, r4
   1d9ee:	f7fa fa83 	bl	17ef8 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_SCAN_BASE +
   1d9f2:	1d01      	adds	r1, r0, #4
   1d9f4:	b2c9      	uxtb	r1, r1
   1d9f6:	4638      	mov	r0, r7
   1d9f8:	462a      	mov	r2, r5
   1d9fa:	f7ff fa27 	bl	1ce4c <lll_preempt_calc>
   1d9fe:	4601      	mov	r1, r0
   1da00:	b948      	cbnz	r0, 1da16 <prepare_cb+0xde>
		if (lll->ticks_window) {
   1da02:	69e3      	ldr	r3, [r4, #28]
   1da04:	2b00      	cmp	r3, #0
   1da06:	d13e      	bne.n	1da86 <prepare_cb+0x14e>
		ret = lll_prepare_done(lll);
   1da08:	4620      	mov	r0, r4
   1da0a:	f7ff f9b3 	bl	1cd74 <lll_prepare_done>
		LL_ASSERT(!ret);
   1da0e:	bb08      	cbnz	r0, 1da54 <prepare_cb+0x11c>
}
   1da10:	2000      	movs	r0, #0
   1da12:	b00d      	add	sp, #52	; 0x34
   1da14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1da16:	4842      	ldr	r0, [pc, #264]	; (1db20 <prepare_cb+0x1e8>)
   1da18:	4621      	mov	r1, r4
   1da1a:	f001 faf1 	bl	1f000 <radio_isr_set>
		radio_disable();
   1da1e:	f001 fbf9 	bl	1f214 <radio_disable>
}
   1da22:	2000      	movs	r0, #0
   1da24:	b00d      	add	sp, #52	; 0x34
   1da26:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy & 0x1));
   1da28:	7a20      	ldrb	r0, [r4, #8]
   1da2a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1da2e:	f7fe fe3b 	bl	1c6a8 <ull_filter_lll_get>
   1da32:	4605      	mov	r5, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1da34:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1da38:	f7fe fd40 	bl	1c4bc <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1da3c:	7869      	ldrb	r1, [r5, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1da3e:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
   1da40:	1caa      	adds	r2, r5, #2
   1da42:	7828      	ldrb	r0, [r5, #0]
   1da44:	f001 fc90 	bl	1f368 <radio_filter_configure>
		radio_ar_configure(count, irks);
   1da48:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1da4c:	4639      	mov	r1, r7
   1da4e:	f001 fea1 	bl	1f794 <radio_ar_configure>
   1da52:	e7bb      	b.n	1d9cc <prepare_cb+0x94>
		LL_ASSERT(!ret);
   1da54:	4a33      	ldr	r2, [pc, #204]	; (1db24 <prepare_cb+0x1ec>)
   1da56:	4934      	ldr	r1, [pc, #208]	; (1db28 <prepare_cb+0x1f0>)
   1da58:	4834      	ldr	r0, [pc, #208]	; (1db2c <prepare_cb+0x1f4>)
   1da5a:	f44f 7391 	mov.w	r3, #290	; 0x122
   1da5e:	f006 fd29 	bl	244b4 <printk>
   1da62:	4040      	eors	r0, r0
   1da64:	f380 8811 	msr	BASEPRI, r0
   1da68:	f04f 0003 	mov.w	r0, #3
   1da6c:	df02      	svc	2
}
   1da6e:	2000      	movs	r0, #0
   1da70:	b00d      	add	sp, #52	; 0x34
   1da72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   1da74:	2001      	movs	r0, #1
   1da76:	f7fe fe17 	bl	1c6a8 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1da7a:	7841      	ldrb	r1, [r0, #1]
   1da7c:	1c82      	adds	r2, r0, #2
   1da7e:	7800      	ldrb	r0, [r0, #0]
   1da80:	f001 fc72 	bl	1f368 <radio_filter_configure>
   1da84:	e7a2      	b.n	1d9cc <prepare_cb+0x94>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1da86:	f44f 7284 	mov.w	r2, #264	; 0x108
   1da8a:	9300      	str	r3, [sp, #0]
   1da8c:	9208      	str	r2, [sp, #32]
   1da8e:	4b28      	ldr	r3, [pc, #160]	; (1db30 <prepare_cb+0x1f8>)
   1da90:	4a28      	ldr	r2, [pc, #160]	; (1db34 <prepare_cb+0x1fc>)
   1da92:	9307      	str	r3, [sp, #28]
   1da94:	9205      	str	r2, [sp, #20]
   1da96:	462b      	mov	r3, r5
   1da98:	e9cd 0003 	strd	r0, r0, [sp, #12]
   1da9c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1daa0:	9406      	str	r4, [sp, #24]
   1daa2:	2203      	movs	r2, #3
   1daa4:	f7f6 fda8 	bl	145f8 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1daa8:	f030 0302 	bics.w	r3, r0, #2
   1daac:	d0ac      	beq.n	1da08 <prepare_cb+0xd0>
   1daae:	4a1d      	ldr	r2, [pc, #116]	; (1db24 <prepare_cb+0x1ec>)
   1dab0:	4921      	ldr	r1, [pc, #132]	; (1db38 <prepare_cb+0x200>)
   1dab2:	481e      	ldr	r0, [pc, #120]	; (1db2c <prepare_cb+0x1f4>)
   1dab4:	f240 1309 	movw	r3, #265	; 0x109
   1dab8:	f006 fcfc 	bl	244b4 <printk>
   1dabc:	4040      	eors	r0, r0
   1dabe:	f380 8811 	msr	BASEPRI, r0
   1dac2:	f04f 0003 	mov.w	r0, #3
   1dac6:	df02      	svc	2
   1dac8:	e79e      	b.n	1da08 <prepare_cb+0xd0>
	LL_ASSERT(node_rx);
   1daca:	4a16      	ldr	r2, [pc, #88]	; (1db24 <prepare_cb+0x1ec>)
   1dacc:	491b      	ldr	r1, [pc, #108]	; (1db3c <prepare_cb+0x204>)
   1dace:	4817      	ldr	r0, [pc, #92]	; (1db2c <prepare_cb+0x1f4>)
   1dad0:	23ac      	movs	r3, #172	; 0xac
   1dad2:	f006 fcef 	bl	244b4 <printk>
   1dad6:	4040      	eors	r0, r0
   1dad8:	f380 8811 	msr	BASEPRI, r0
   1dadc:	f04f 0003 	mov.w	r0, #3
   1dae0:	df02      	svc	2
   1dae2:	e74b      	b.n	1d97c <prepare_cb+0x44>
		err = lll_hfclock_off();
   1dae4:	f7ff fac8 	bl	1d078 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1dae8:	2800      	cmp	r0, #0
   1daea:	db05      	blt.n	1daf8 <prepare_cb+0x1c0>
		lll_done(NULL);
   1daec:	2000      	movs	r0, #0
   1daee:	f7ff f943 	bl	1cd78 <lll_done>
}
   1daf2:	2000      	movs	r0, #0
   1daf4:	b00d      	add	sp, #52	; 0x34
   1daf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1daf8:	4a0a      	ldr	r2, [pc, #40]	; (1db24 <prepare_cb+0x1ec>)
   1dafa:	4911      	ldr	r1, [pc, #68]	; (1db40 <prepare_cb+0x208>)
   1dafc:	480b      	ldr	r0, [pc, #44]	; (1db2c <prepare_cb+0x1f4>)
   1dafe:	238d      	movs	r3, #141	; 0x8d
   1db00:	f006 fcd8 	bl	244b4 <printk>
   1db04:	4040      	eors	r0, r0
   1db06:	f380 8811 	msr	BASEPRI, r0
   1db0a:	f04f 0003 	mov.w	r0, #3
   1db0e:	df02      	svc	2
   1db10:	e7ec      	b.n	1daec <prepare_cb+0x1b4>
   1db12:	bf00      	nop
   1db14:	8e89bed6 	.word	0x8e89bed6
   1db18:	00555555 	.word	0x00555555
   1db1c:	0001de99 	.word	0x0001de99
   1db20:	0001e15d 	.word	0x0001e15d
   1db24:	0002f1e0 	.word	0x0002f1e0
   1db28:	0002e974 	.word	0x0002e974
   1db2c:	0002e80c 	.word	0x0002e80c
   1db30:	0001dd5d 	.word	0x0001dd5d
   1db34:	0001d921 	.word	0x0001d921
   1db38:	0002eafc 	.word	0x0002eafc
   1db3c:	0002f22c 	.word	0x0002f22c
   1db40:	0002f148 	.word	0x0002f148

0001db44 <isr_done_cleanup>:

	isr_cleanup(param);
}

static void isr_done_cleanup(void *param)
{
   1db44:	b538      	push	{r3, r4, r5, lr}
   1db46:	4604      	mov	r4, r0
	if (lll_is_done(param)) {
   1db48:	f7ff f96a 	bl	1ce20 <lll_is_done>
   1db4c:	b100      	cbz	r0, 1db50 <isr_done_cleanup+0xc>

	extra->type = EVENT_DONE_EXTRA_TYPE_SCAN;
#endif  /* CONFIG_BT_CTLR_ADV_EXT */

	isr_cleanup(param);
}
   1db4e:	bd38      	pop	{r3, r4, r5, pc}

static void isr_cleanup(void *param)
{
	struct lll_scan *lll;

	radio_filter_disable();
   1db50:	4605      	mov	r5, r0
   1db52:	f001 fc25 	bl	1f3a0 <radio_filter_disable>

	lll = param;
	if (++lll->chan == 3U) {
   1db56:	7a22      	ldrb	r2, [r4, #8]
   1db58:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1db5c:	3301      	adds	r3, #1
   1db5e:	f003 0303 	and.w	r3, r3, #3
   1db62:	2b03      	cmp	r3, #3
   1db64:	bf14      	ite	ne
   1db66:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1db6a:	f365 0242 	bfieq	r2, r5, #1, #2
   1db6e:	7222      	strb	r2, [r4, #8]
		ull_rx_put(node_rx->link, node_rx);
		ull_rx_sched();
	}
#endif /* CONFIG_BT_CTLR_SCAN_INDICATION */

	lll_isr_cleanup(param);
   1db70:	4620      	mov	r0, r4
}
   1db72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_isr_cleanup(param);
   1db76:	f7ff b9df 	b.w	1cf38 <lll_isr_cleanup>
   1db7a:	bf00      	nop

0001db7c <isr_common_done>:
{
   1db7c:	b530      	push	{r4, r5, lr}
   1db7e:	4604      	mov	r4, r0
   1db80:	b083      	sub	sp, #12
	lll_isr_status_reset();
   1db82:	f7ff f9cb 	bl	1cf1c <lll_isr_status_reset>
	lll->state = 0U;
   1db86:	7a23      	ldrb	r3, [r4, #8]
   1db88:	f36f 0300 	bfc	r3, #0, #1
   1db8c:	7223      	strb	r3, [r4, #8]
	radio_tmr_tifs_set(EVENT_IFS_US);
   1db8e:	2096      	movs	r0, #150	; 0x96
   1db90:	f001 fc38 	bl	1f404 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1db94:	2300      	movs	r3, #0
   1db96:	4618      	mov	r0, r3
   1db98:	461a      	mov	r2, r3
   1db9a:	4619      	mov	r1, r3
   1db9c:	f001 fba8 	bl	1f2f0 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dba0:	2001      	movs	r0, #1
   1dba2:	f7f9 fb67 	bl	17274 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1dba6:	4605      	mov	r5, r0
   1dba8:	b1c0      	cbz	r0, 1dbdc <isr_common_done+0x60>
	radio_pkt_rx_set(node_rx->pdu);
   1dbaa:	f105 001c 	add.w	r0, r5, #28
   1dbae:	f001 fb07 	bl	1f1c0 <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1dbb2:	f7fe fe19 	bl	1c7e8 <ull_filter_lll_rl_enabled>
   1dbb6:	b938      	cbnz	r0, 1dbc8 <isr_common_done+0x4c>
	radio_rssi_measure();
   1dbb8:	f001 fbb4 	bl	1f324 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1dbbc:	480e      	ldr	r0, [pc, #56]	; (1dbf8 <isr_common_done+0x7c>)
   1dbbe:	4621      	mov	r1, r4
   1dbc0:	f001 fa1e 	bl	1f000 <radio_isr_set>
}
   1dbc4:	b003      	add	sp, #12
   1dbc6:	bd30      	pop	{r4, r5, pc}
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1dbc8:	f10d 0007 	add.w	r0, sp, #7
   1dbcc:	f7fe fc76 	bl	1c4bc <ull_filter_lll_irks_get>
   1dbd0:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1dbd2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1dbd6:	f001 fddd 	bl	1f794 <radio_ar_configure>
   1dbda:	e7ed      	b.n	1dbb8 <isr_common_done+0x3c>
	LL_ASSERT(node_rx);
   1dbdc:	4a07      	ldr	r2, [pc, #28]	; (1dbfc <isr_common_done+0x80>)
   1dbde:	4908      	ldr	r1, [pc, #32]	; (1dc00 <isr_common_done+0x84>)
   1dbe0:	4808      	ldr	r0, [pc, #32]	; (1dc04 <isr_common_done+0x88>)
   1dbe2:	f240 2312 	movw	r3, #530	; 0x212
   1dbe6:	f006 fc65 	bl	244b4 <printk>
   1dbea:	4040      	eors	r0, r0
   1dbec:	f380 8811 	msr	BASEPRI, r0
   1dbf0:	f04f 0003 	mov.w	r0, #3
   1dbf4:	df02      	svc	2
   1dbf6:	e7d8      	b.n	1dbaa <isr_common_done+0x2e>
   1dbf8:	0001de99 	.word	0x0001de99
   1dbfc:	0002f1e0 	.word	0x0002f1e0
   1dc00:	0002f22c 	.word	0x0002f22c
   1dc04:	0002e80c 	.word	0x0002e80c

0001dc08 <isr_done>:
{
   1dc08:	b508      	push	{r3, lr}
	isr_common_done(param);
   1dc0a:	f7ff ffb7 	bl	1db7c <isr_common_done>
	radio_rx_enable();
   1dc0e:	f001 faf5 	bl	1f1fc <radio_rx_enable>
}
   1dc12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1dc16:	f001 bcfb 	b.w	1f610 <radio_tmr_end_capture>
   1dc1a:	bf00      	nop

0001dc1c <isr_tx>:
{
   1dc1c:	b570      	push	{r4, r5, r6, lr}
   1dc1e:	b082      	sub	sp, #8
   1dc20:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1dc22:	f7ff f969 	bl	1cef8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1dc26:	2096      	movs	r0, #150	; 0x96
   1dc28:	f001 fbec 	bl	1f404 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   1dc2c:	2300      	movs	r3, #0
   1dc2e:	4618      	mov	r0, r3
   1dc30:	461a      	mov	r2, r3
   1dc32:	4619      	mov	r1, r3
   1dc34:	f001 fb5c 	bl	1f2f0 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dc38:	2001      	movs	r0, #1
   1dc3a:	f7f9 fb1b 	bl	17274 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1dc3e:	4604      	mov	r4, r0
   1dc40:	2800      	cmp	r0, #0
   1dc42:	d03d      	beq.n	1dcc0 <isr_tx+0xa4>
	radio_pkt_rx_set(node_rx->pdu);
   1dc44:	f104 001c 	add.w	r0, r4, #28
   1dc48:	f001 faba 	bl	1f1c0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1dc4c:	f001 fb06 	bl	1f25c <radio_is_ready>
   1dc50:	b9d8      	cbnz	r0, 1dc8a <isr_tx+0x6e>
	if (ull_filter_lll_rl_enabled()) {
   1dc52:	f7fe fdc9 	bl	1c7e8 <ull_filter_lll_rl_enabled>
   1dc56:	bb48      	cbnz	r0, 1dcac <isr_tx+0x90>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1dc58:	f001 fce8 	bl	1f62c <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1dc5c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1dc5e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1dc60:	4608      	mov	r0, r1
   1dc62:	f001 fabd 	bl	1f1e0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1dc66:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1dc68:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1dc6a:	4608      	mov	r0, r1
   1dc6c:	f001 fab4 	bl	1f1d8 <radio_tx_chain_delay_get>
   1dc70:	4434      	add	r4, r6
   1dc72:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1dc74:	1a20      	subs	r0, r4, r0
   1dc76:	f001 fc91 	bl	1f59c <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1dc7a:	f001 fb53 	bl	1f324 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1dc7e:	4817      	ldr	r0, [pc, #92]	; (1dcdc <isr_tx+0xc0>)
   1dc80:	4629      	mov	r1, r5
   1dc82:	f001 f9bd 	bl	1f000 <radio_isr_set>
}
   1dc86:	b002      	add	sp, #8
   1dc88:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!radio_is_ready());
   1dc8a:	4a15      	ldr	r2, [pc, #84]	; (1dce0 <isr_tx+0xc4>)
   1dc8c:	4915      	ldr	r1, [pc, #84]	; (1dce4 <isr_tx+0xc8>)
   1dc8e:	4816      	ldr	r0, [pc, #88]	; (1dce8 <isr_tx+0xcc>)
   1dc90:	f240 13df 	movw	r3, #479	; 0x1df
   1dc94:	f006 fc0e 	bl	244b4 <printk>
   1dc98:	4040      	eors	r0, r0
   1dc9a:	f380 8811 	msr	BASEPRI, r0
   1dc9e:	f04f 0003 	mov.w	r0, #3
   1dca2:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1dca4:	f7fe fda0 	bl	1c7e8 <ull_filter_lll_rl_enabled>
   1dca8:	2800      	cmp	r0, #0
   1dcaa:	d0d5      	beq.n	1dc58 <isr_tx+0x3c>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1dcac:	f10d 0007 	add.w	r0, sp, #7
   1dcb0:	f7fe fc04 	bl	1c4bc <ull_filter_lll_irks_get>
   1dcb4:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1dcb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1dcba:	f001 fd6b 	bl	1f794 <radio_ar_configure>
   1dcbe:	e7cb      	b.n	1dc58 <isr_tx+0x3c>
	LL_ASSERT(node_rx);
   1dcc0:	4a07      	ldr	r2, [pc, #28]	; (1dce0 <isr_tx+0xc4>)
   1dcc2:	490a      	ldr	r1, [pc, #40]	; (1dcec <isr_tx+0xd0>)
   1dcc4:	4808      	ldr	r0, [pc, #32]	; (1dce8 <isr_tx+0xcc>)
   1dcc6:	f240 13db 	movw	r3, #475	; 0x1db
   1dcca:	f006 fbf3 	bl	244b4 <printk>
   1dcce:	4040      	eors	r0, r0
   1dcd0:	f380 8811 	msr	BASEPRI, r0
   1dcd4:	f04f 0003 	mov.w	r0, #3
   1dcd8:	df02      	svc	2
   1dcda:	e7b3      	b.n	1dc44 <isr_tx+0x28>
   1dcdc:	0001de99 	.word	0x0001de99
   1dce0:	0002f1e0 	.word	0x0002f1e0
   1dce4:	0002f1b0 	.word	0x0002f1b0
   1dce8:	0002e80c 	.word	0x0002e80c
   1dcec:	0002f22c 	.word	0x0002f22c

0001dcf0 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1dcf0:	68c3      	ldr	r3, [r0, #12]
{
   1dcf2:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1dcf4:	681e      	ldr	r6, [r3, #0]
{
   1dcf6:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1dcf8:	f7f6 fd30 	bl	1475c <ticker_ticks_now_get>
   1dcfc:	4605      	mov	r5, r0
   1dcfe:	4630      	mov	r0, r6
   1dd00:	f7ff f89a 	bl	1ce38 <lll_evt_offset_get>
	p->remainder = 0;
   1dd04:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1dd06:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1dd08:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1dd0c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1dd0e:	4620      	mov	r0, r4
}
   1dd10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1dd14:	f7ff be10 	b.w	1d938 <prepare_cb>

0001dd18 <isr_window>:
{
   1dd18:	b510      	push	{r4, lr}
   1dd1a:	4604      	mov	r4, r0
	isr_common_done(param);
   1dd1c:	f7ff ff2e 	bl	1db7c <isr_common_done>
	if (++lll->chan == 3U) {
   1dd20:	7a22      	ldrb	r2, [r4, #8]
   1dd22:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1dd26:	3301      	adds	r3, #1
   1dd28:	f003 0303 	and.w	r3, r3, #3
   1dd2c:	2b03      	cmp	r3, #3
   1dd2e:	d010      	beq.n	1dd52 <isr_window+0x3a>
   1dd30:	f363 0242 	bfi	r2, r3, #1, #2
   1dd34:	7222      	strb	r2, [r4, #8]
   1dd36:	f103 0025 	add.w	r0, r3, #37	; 0x25
	lll_chan_set(37 + lll->chan);
   1dd3a:	f7ff f899 	bl	1ce70 <lll_chan_set>
	ticks_at_start = ticker_ticks_now_get() +
   1dd3e:	f7f6 fd0d 	bl	1475c <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
   1dd42:	1cc1      	adds	r1, r0, #3
   1dd44:	2000      	movs	r0, #0
   1dd46:	f001 fbd5 	bl	1f4f4 <radio_tmr_start_tick>
}
   1dd4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_tmr_end_capture();
   1dd4e:	f001 bc5f 	b.w	1f610 <radio_tmr_end_capture>
		lll->chan = 0U;
   1dd52:	f36f 0242 	bfc	r2, #1, #2
   1dd56:	7222      	strb	r2, [r4, #8]
   1dd58:	2025      	movs	r0, #37	; 0x25
   1dd5a:	e7ee      	b.n	1dd3a <isr_window+0x22>

0001dd5c <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1dd5c:	b900      	cbnz	r0, 1dd60 <ticker_op_start_cb+0x4>
   1dd5e:	4770      	bx	lr
{
   1dd60:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1dd62:	4a07      	ldr	r2, [pc, #28]	; (1dd80 <ticker_op_start_cb+0x24>)
   1dd64:	4907      	ldr	r1, [pc, #28]	; (1dd84 <ticker_op_start_cb+0x28>)
   1dd66:	4808      	ldr	r0, [pc, #32]	; (1dd88 <ticker_op_start_cb+0x2c>)
   1dd68:	f44f 73c3 	mov.w	r3, #390	; 0x186
   1dd6c:	f006 fba2 	bl	244b4 <printk>
   1dd70:	4040      	eors	r0, r0
   1dd72:	f380 8811 	msr	BASEPRI, r0
   1dd76:	f04f 0003 	mov.w	r0, #3
   1dd7a:	df02      	svc	2
}
   1dd7c:	bd08      	pop	{r3, pc}
   1dd7e:	bf00      	nop
   1dd80:	0002f1e0 	.word	0x0002f1e0
   1dd84:	0002ec38 	.word	0x0002ec38
   1dd88:	0002e80c 	.word	0x0002e80c

0001dd8c <abort_cb>:
{
   1dd8c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1dd8e:	b1d8      	cbz	r0, 1ddc8 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1dd90:	460c      	mov	r4, r1
   1dd92:	f7ff f971 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1dd96:	2800      	cmp	r0, #0
   1dd98:	db04      	blt.n	1dda4 <abort_cb+0x18>
	lll_done(param);
   1dd9a:	4620      	mov	r0, r4
}
   1dd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1dda0:	f7fe bfea 	b.w	1cd78 <lll_done>
	LL_ASSERT(err >= 0);
   1dda4:	4a0c      	ldr	r2, [pc, #48]	; (1ddd8 <abort_cb+0x4c>)
   1dda6:	490d      	ldr	r1, [pc, #52]	; (1dddc <abort_cb+0x50>)
   1dda8:	480d      	ldr	r0, [pc, #52]	; (1dde0 <abort_cb+0x54>)
   1ddaa:	f44f 73bb 	mov.w	r3, #374	; 0x176
   1ddae:	f006 fb81 	bl	244b4 <printk>
   1ddb2:	4040      	eors	r0, r0
   1ddb4:	f380 8811 	msr	BASEPRI, r0
   1ddb8:	f04f 0003 	mov.w	r0, #3
   1ddbc:	df02      	svc	2
	lll_done(param);
   1ddbe:	4620      	mov	r0, r4
}
   1ddc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1ddc4:	f7fe bfd8 	b.w	1cd78 <lll_done>
			radio_isr_set(isr_abort, param);
   1ddc8:	4806      	ldr	r0, [pc, #24]	; (1dde4 <abort_cb+0x58>)
   1ddca:	f001 f919 	bl	1f000 <radio_isr_set>
}
   1ddce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1ddd2:	f001 ba1f 	b.w	1f214 <radio_disable>
   1ddd6:	bf00      	nop
   1ddd8:	0002f1e0 	.word	0x0002f1e0
   1dddc:	0002f148 	.word	0x0002f148
   1dde0:	0002e80c 	.word	0x0002e80c
   1dde4:	0001e15d 	.word	0x0001e15d

0001dde8 <is_abort_cb>:
	if (next != curr) {
   1dde8:	4282      	cmp	r2, r0
{
   1ddea:	b508      	push	{r3, lr}
	if (next != curr) {
   1ddec:	d107      	bne.n	1ddfe <is_abort_cb+0x16>
		radio_isr_set(isr_window, lll);
   1ddee:	4812      	ldr	r0, [pc, #72]	; (1de38 <is_abort_cb+0x50>)
   1ddf0:	4611      	mov	r1, r2
   1ddf2:	f001 f905 	bl	1f000 <radio_isr_set>
	radio_disable();
   1ddf6:	f001 fa0d 	bl	1f214 <radio_disable>
	return 0;
   1ddfa:	2000      	movs	r0, #0
}
   1ddfc:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1ddfe:	4a0f      	ldr	r2, [pc, #60]	; (1de3c <is_abort_cb+0x54>)
   1de00:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1de02:	9a02      	ldr	r2, [sp, #8]
   1de04:	2300      	movs	r3, #0
   1de06:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1de08:	f7ff f91e 	bl	1d048 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1de0c:	2800      	cmp	r0, #0
   1de0e:	db02      	blt.n	1de16 <is_abort_cb+0x2e>
   1de10:	f06f 000a 	mvn.w	r0, #10
}
   1de14:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1de16:	4a0a      	ldr	r2, [pc, #40]	; (1de40 <is_abort_cb+0x58>)
   1de18:	490a      	ldr	r1, [pc, #40]	; (1de44 <is_abort_cb+0x5c>)
   1de1a:	480b      	ldr	r0, [pc, #44]	; (1de48 <is_abort_cb+0x60>)
   1de1c:	f240 1349 	movw	r3, #329	; 0x149
   1de20:	f006 fb48 	bl	244b4 <printk>
   1de24:	4040      	eors	r0, r0
   1de26:	f380 8811 	msr	BASEPRI, r0
   1de2a:	f04f 0003 	mov.w	r0, #3
   1de2e:	df02      	svc	2
   1de30:	f06f 000a 	mvn.w	r0, #10
}
   1de34:	bd08      	pop	{r3, pc}
   1de36:	bf00      	nop
   1de38:	0001dd19 	.word	0x0001dd19
   1de3c:	0001dcf1 	.word	0x0001dcf1
   1de40:	0002f1e0 	.word	0x0002f1e0
   1de44:	0002f148 	.word	0x0002f148
   1de48:	0002e80c 	.word	0x0002e80c

0001de4c <isr_rx_scan_report.isra.0>:
	return ((sreq->rx_addr == srsp->tx_addr) &&
		(memcmp(&sreq->scan_req.adv_addr[0],
			&srsp->scan_rsp.addr[0], BDADDR_SIZE) == 0));
}

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1de4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de4e:	4607      	mov	r7, r0
				uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;

	node_rx = ull_pdu_rx_alloc_peek(3);
   1de50:	2003      	movs	r0, #3
static int isr_rx_scan_report(struct lll_scan *lll, uint8_t rssi_ready,
   1de52:	460e      	mov	r6, r1
   1de54:	4615      	mov	r5, r2
	node_rx = ull_pdu_rx_alloc_peek(3);
   1de56:	f7f9 fa0d 	bl	17274 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
   1de5a:	b1c8      	cbz	r0, 1de90 <isr_rx_scan_report.isra.0+0x44>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
   1de5c:	4604      	mov	r4, r0
   1de5e:	f7f9 fa27 	bl	172b0 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
   1de62:	f64f 72ff 	movw	r2, #65535	; 0xffff
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1de66:	2304      	movs	r3, #4
	node_rx->hdr.handle = 0xffff;
   1de68:	80e2      	strh	r2, [r4, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   1de6a:	7123      	strb	r3, [r4, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1de6c:	b95f      	cbnz	r7, 1de86 <isr_rx_scan_report.isra.0+0x3a>
   1de6e:	207f      	movs	r0, #127	; 0x7f
   1de70:	7620      	strb	r0, [r4, #24]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
   1de72:	4621      	mov	r1, r4
   1de74:	6820      	ldr	r0, [r4, #0]
	node_rx->hdr.rx_ftr.rl_idx = rl_idx;
   1de76:	76a6      	strb	r6, [r4, #26]
	node_rx->hdr.rx_ftr.direct = dir_report;
   1de78:	76e5      	strb	r5, [r4, #27]
	ull_rx_put(node_rx->hdr.link, node_rx);
   1de7a:	f7f9 fa31 	bl	172e0 <ull_rx_put>
	ull_rx_sched();
   1de7e:	f7f9 fa3f 	bl	17300 <ull_rx_sched>

	return 0;
   1de82:	2000      	movs	r0, #0
}
   1de84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				   (radio_rssi_get() & 0x7f)
   1de86:	f001 fa57 	bl	1f338 <radio_rssi_get>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ?
   1de8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1de8e:	e7ef      	b.n	1de70 <isr_rx_scan_report.isra.0+0x24>
		return -ENOBUFS;
   1de90:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1de94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1de96:	bf00      	nop

0001de98 <isr_rx>:
{
   1de98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1de9c:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1de9e:	f001 f9e7 	bl	1f270 <radio_is_done>
	if (trx_done) {
   1dea2:	f010 0fff 	tst.w	r0, #255	; 0xff
   1dea6:	d109      	bne.n	1debc <isr_rx+0x24>
	lll_isr_status_reset();
   1dea8:	f7ff f838 	bl	1cf1c <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
   1deac:	4621      	mov	r1, r4
   1deae:	48a5      	ldr	r0, [pc, #660]	; (1e144 <isr_rx+0x2ac>)
   1deb0:	f001 f8a6 	bl	1f000 <radio_isr_set>
}
   1deb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	radio_disable();
   1deb8:	f001 b9ac 	b.w	1f214 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1debc:	f001 f9f8 	bl	1f2b0 <radio_crc_is_valid>
   1dec0:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
   1dec2:	f001 fa7f 	bl	1f3c4 <radio_filter_has_match>
   1dec6:	b2c5      	uxtb	r5, r0
		devmatch_id = radio_filter_match_get();
   1dec8:	f001 fa86 	bl	1f3d8 <radio_filter_match_get>
   1decc:	4680      	mov	r8, r0
		irkmatch_ok = radio_ar_has_match();
   1dece:	f001 fca7 	bl	1f820 <radio_ar_has_match>
   1ded2:	b2c7      	uxtb	r7, r0
		irkmatch_id = radio_ar_match_get();
   1ded4:	f001 fc92 	bl	1f7fc <radio_ar_match_get>
   1ded8:	4681      	mov	r9, r0
		rssi_ready = radio_rssi_is_ready();
   1deda:	f001 fa3b 	bl	1f354 <radio_rssi_is_ready>
   1dede:	4682      	mov	sl, r0
	lll_isr_status_reset();
   1dee0:	f7ff f81c 	bl	1cf1c <lll_isr_status_reset>
	rl_idx = devmatch_ok ?
   1dee4:	2d00      	cmp	r5, #0
   1dee6:	d163      	bne.n	1dfb0 <isr_rx+0x118>
   1dee8:	2f00      	cmp	r7, #0
   1deea:	d172      	bne.n	1dfd2 <isr_rx+0x13a>
   1deec:	f04f 08ff 	mov.w	r8, #255	; 0xff
	if (crc_ok && isr_rx_scan_check(lll, irkmatch_ok, devmatch_ok,
   1def0:	2e00      	cmp	r6, #0
   1def2:	d0db      	beq.n	1deac <isr_rx+0x14>
	return (((lll->filter_policy & 0x01) == 0) &&
   1def4:	7a23      	ldrb	r3, [r4, #8]
								rl_idx))) ||
   1def6:	0719      	lsls	r1, r3, #28
   1def8:	d463      	bmi.n	1dfc2 <isr_rx+0x12a>
	return (((lll->filter_policy & 0x01) == 0) &&
   1defa:	2d00      	cmp	r5, #0
   1defc:	d17d      	bne.n	1dffa <isr_rx+0x162>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1defe:	2001      	movs	r0, #1
   1df00:	f7f9 f9b8 	bl	17274 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1df04:	4605      	mov	r5, r0
   1df06:	2800      	cmp	r0, #0
   1df08:	f000 8083 	beq.w	1e012 <isr_rx+0x17a>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1df0c:	7f28      	ldrb	r0, [r5, #28]
   1df0e:	f010 010f 	ands.w	r1, r0, #15
		rssi_ready = radio_rssi_is_ready();
   1df12:	fa5f fa8a 	uxtb.w	sl, sl
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1df16:	d062      	beq.n	1dfde <isr_rx+0x146>
   1df18:	2906      	cmp	r1, #6
   1df1a:	d060      	beq.n	1dfde <isr_rx+0x146>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1df1c:	2902      	cmp	r1, #2
   1df1e:	f000 8086 	beq.w	1e02e <isr_rx+0x196>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
   1df22:	2901      	cmp	r1, #1
   1df24:	d11e      	bne.n	1df64 <isr_rx+0xcc>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   1df26:	7f6b      	ldrb	r3, [r5, #29]
   1df28:	2b0c      	cmp	r3, #12
   1df2a:	d1bf      	bne.n	1deac <isr_rx+0x14>
					   pdu->direct_ind.tgt_addr, rl_idx)) {
   1df2c:	f105 0924 	add.w	r9, r5, #36	; 0x24
	if (ull_filter_lll_rl_addr_resolve(pdu->rx_addr,
   1df30:	09c0      	lsrs	r0, r0, #7
   1df32:	4649      	mov	r1, r9
   1df34:	4642      	mov	r2, r8
   1df36:	f7fe fc35 	bl	1c7a4 <ull_filter_lll_rl_addr_resolve>
   1df3a:	4606      	mov	r6, r0
   1df3c:	2800      	cmp	r0, #0
   1df3e:	f040 80d9 	bne.w	1e0f4 <isr_rx+0x25c>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1df42:	7a23      	ldrb	r3, [r4, #8]
   1df44:	7f28      	ldrb	r0, [r5, #28]
			BDADDR_SIZE))) ||
   1df46:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1df4a:	ebb2 1fd0 	cmp.w	r2, r0, lsr #7
   1df4e:	f000 80e2 	beq.w	1e116 <isr_rx+0x27e>
	if (((lll->filter_policy & 0x02) != 0U) &&
   1df52:	f3c3 03c1 	ubfx	r3, r3, #3, #2
   1df56:	079b      	lsls	r3, r3, #30
   1df58:	d502      	bpl.n	1df60 <isr_rx+0xc8>
   1df5a:	0606      	lsls	r6, r0, #24
   1df5c:	f100 80e5 	bmi.w	1e12a <isr_rx+0x292>
   1df60:	f000 010f 	and.w	r1, r0, #15
					&dir_report))) ||
   1df64:	2904      	cmp	r1, #4
   1df66:	d1a1      	bne.n	1deac <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   1df68:	7f6b      	ldrb	r3, [r5, #29]
   1df6a:	2b25      	cmp	r3, #37	; 0x25
   1df6c:	d89e      	bhi.n	1deac <isr_rx+0x14>
		   (lll->state != 0U) &&
   1df6e:	7a23      	ldrb	r3, [r4, #8]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
   1df70:	07da      	lsls	r2, r3, #31
   1df72:	d59b      	bpl.n	1deac <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
   1df74:	f001 f9aa 	bl	1f2cc <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   1df78:	7f2b      	ldrb	r3, [r5, #28]
   1df7a:	7802      	ldrb	r2, [r0, #0]
   1df7c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1df80:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1df84:	d192      	bne.n	1deac <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
   1df86:	3008      	adds	r0, #8
   1df88:	2206      	movs	r2, #6
   1df8a:	f105 011e 	add.w	r1, r5, #30
   1df8e:	f008 fcf8 	bl	26982 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   1df92:	2800      	cmp	r0, #0
   1df94:	d18a      	bne.n	1deac <isr_rx+0x14>
   1df96:	7f6b      	ldrb	r3, [r5, #29]
   1df98:	4606      	mov	r6, r0
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   1df9a:	2b00      	cmp	r3, #0
   1df9c:	d086      	beq.n	1deac <isr_rx+0x14>
		err = isr_rx_scan_report(lll, rssi_ready,
   1df9e:	2f00      	cmp	r7, #0
   1dfa0:	bf14      	ite	ne
   1dfa2:	4641      	movne	r1, r8
   1dfa4:	21ff      	moveq	r1, #255	; 0xff
   1dfa6:	4632      	mov	r2, r6
   1dfa8:	4650      	mov	r0, sl
   1dfaa:	f7ff ff4f 	bl	1de4c <isr_rx_scan_report.isra.0>
		if (err) {
   1dfae:	e77d      	b.n	1deac <isr_rx+0x14>
		 ull_filter_lll_rl_idx(!!(lll->filter_policy & 0x01),
   1dfb0:	7a20      	ldrb	r0, [r4, #8]
   1dfb2:	fa5f f188 	uxtb.w	r1, r8
   1dfb6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1dfba:	f7fe fa89 	bl	1c4d0 <ull_filter_lll_rl_idx>
   1dfbe:	4680      	mov	r8, r0
   1dfc0:	e796      	b.n	1def0 <isr_rx+0x58>
		(((lll->filter_policy & 0x01) != 0) &&
   1dfc2:	2d00      	cmp	r5, #0
   1dfc4:	d19b      	bne.n	1defe <isr_rx+0x66>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(rl_idx)));
   1dfc6:	4640      	mov	r0, r8
   1dfc8:	f7fe fb3e 	bl	1c648 <ull_filter_lll_irk_whitelisted>
   1dfcc:	2800      	cmp	r0, #0
   1dfce:	d196      	bne.n	1defe <isr_rx+0x66>
   1dfd0:	e76c      	b.n	1deac <isr_rx+0x14>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1dfd2:	fa5f f089 	uxtb.w	r0, r9
   1dfd6:	f7fe fae5 	bl	1c5a4 <ull_filter_lll_rl_irk_idx>
   1dfda:	4680      	mov	r8, r0
   1dfdc:	e788      	b.n	1def0 <isr_rx+0x58>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1dfde:	7f6b      	ldrb	r3, [r5, #29]
   1dfe0:	2b25      	cmp	r3, #37	; 0x25
   1dfe2:	f63f af63 	bhi.w	1deac <isr_rx+0x14>
		   lll->type &&
   1dfe6:	f994 2008 	ldrsb.w	r2, [r4, #8]
   1dfea:	2a00      	cmp	r2, #0
   1dfec:	db25      	blt.n	1e03a <isr_rx+0x1a2>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   1dfee:	f010 060d 	ands.w	r6, r0, #13
   1dff2:	d16d      	bne.n	1e0d0 <isr_rx+0x238>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1dff4:	2b25      	cmp	r3, #37	; 0x25
   1dff6:	d9d0      	bls.n	1df9a <isr_rx+0x102>
   1dff8:	e7b4      	b.n	1df64 <isr_rx+0xcc>
		 (!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1dffa:	4641      	mov	r1, r8
   1dffc:	4638      	mov	r0, r7
   1dffe:	f7fe fb5f 	bl	1c6c0 <ull_filter_lll_rl_idx_allowed>
   1e002:	2800      	cmp	r0, #0
   1e004:	f47f af7b 	bne.w	1defe <isr_rx+0x66>
		(((lll->filter_policy & 0x01) != 0) &&
   1e008:	7a23      	ldrb	r3, [r4, #8]
								rl_idx))) ||
   1e00a:	071b      	lsls	r3, r3, #28
   1e00c:	f57f af4e 	bpl.w	1deac <isr_rx+0x14>
   1e010:	e775      	b.n	1defe <isr_rx+0x66>
	LL_ASSERT(node_rx);
   1e012:	4a4d      	ldr	r2, [pc, #308]	; (1e148 <isr_rx+0x2b0>)
   1e014:	494d      	ldr	r1, [pc, #308]	; (1e14c <isr_rx+0x2b4>)
   1e016:	484e      	ldr	r0, [pc, #312]	; (1e150 <isr_rx+0x2b8>)
   1e018:	f240 23ba 	movw	r3, #698	; 0x2ba
   1e01c:	f006 fa4a 	bl	244b4 <printk>
   1e020:	4040      	eors	r0, r0
   1e022:	f380 8811 	msr	BASEPRI, r0
   1e026:	f04f 0003 	mov.w	r0, #3
   1e02a:	df02      	svc	2
   1e02c:	e76e      	b.n	1df0c <isr_rx+0x74>
   1e02e:	7f6b      	ldrb	r3, [r5, #29]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1e030:	2b25      	cmp	r3, #37	; 0x25
	bool dir_report = false;
   1e032:	bf98      	it	ls
   1e034:	2600      	movls	r6, #0
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1e036:	d9b0      	bls.n	1df9a <isr_rx+0x102>
   1e038:	e738      	b.n	1deac <isr_rx+0x14>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1e03a:	2096      	movs	r0, #150	; 0x96
   1e03c:	f001 f9e2 	bl	1f404 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1e040:	2000      	movs	r0, #0
   1e042:	f001 f947 	bl	1f2d4 <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, rssi_ready,
   1e046:	2f00      	cmp	r7, #0
   1e048:	bf14      	ite	ne
   1e04a:	4641      	movne	r1, r8
   1e04c:	21ff      	moveq	r1, #255	; 0xff
   1e04e:	4650      	mov	r0, sl
   1e050:	2200      	movs	r2, #0
   1e052:	f7ff fefb 	bl	1de4c <isr_rx_scan_report.isra.0>
		if (err) {
   1e056:	2800      	cmp	r0, #0
   1e058:	f47f af28 	bne.w	1deac <isr_rx+0x14>
		pdu_tx = (void *)radio_pkt_scratch_get();
   1e05c:	f001 f936 	bl	1f2cc <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1e060:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1e062:	7802      	ldrb	r2, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
   1e064:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1e068:	01db      	lsls	r3, r3, #7
		pdu_tx = (void *)radio_pkt_scratch_get();
   1e06a:	4606      	mov	r6, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1e06c:	f002 0270 	and.w	r2, r2, #112	; 0x70
   1e070:	f043 0303 	orr.w	r3, r3, #3
   1e074:	4313      	orrs	r3, r2
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1e076:	220c      	movs	r2, #12
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   1e078:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
   1e07a:	7072      	strb	r2, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   1e07c:	4640      	mov	r0, r8
   1e07e:	f7fe fa09 	bl	1c494 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
   1e082:	7a63      	ldrb	r3, [r4, #9]
   1e084:	07da      	lsls	r2, r3, #31
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
   1e086:	4601      	mov	r1, r0
		if (lll->rpa_gen && lrpa) {
   1e088:	d525      	bpl.n	1e0d6 <isr_rx+0x23e>
   1e08a:	b320      	cbz	r0, 1e0d6 <isr_rx+0x23e>
			pdu_tx->tx_addr = 1;
   1e08c:	7833      	ldrb	r3, [r6, #0]
   1e08e:	4630      	mov	r0, r6
   1e090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e094:	f800 3b02 	strb.w	r3, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0], lrpa->val,
   1e098:	2206      	movs	r2, #6
   1e09a:	f008 fc82 	bl	269a2 <memcpy>
		memcpy(&pdu_tx->scan_req.adv_addr[0],
   1e09e:	f105 011e 	add.w	r1, r5, #30
   1e0a2:	2206      	movs	r2, #6
   1e0a4:	f106 0008 	add.w	r0, r6, #8
   1e0a8:	f008 fc7b 	bl	269a2 <memcpy>
		radio_pkt_tx_set(pdu_tx);
   1e0ac:	4630      	mov	r0, r6
   1e0ae:	f001 f88d 	bl	1f1cc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1e0b2:	f001 f8d3 	bl	1f25c <radio_is_ready>
   1e0b6:	bb00      	cbnz	r0, 1e0fa <isr_rx+0x262>
		radio_tmr_end_capture();
   1e0b8:	f001 faaa 	bl	1f610 <radio_tmr_end_capture>
		lll->state = 1U;
   1e0bc:	7a23      	ldrb	r3, [r4, #8]
		radio_isr_set(isr_tx, lll);
   1e0be:	4825      	ldr	r0, [pc, #148]	; (1e154 <isr_rx+0x2bc>)
		lll->state = 1U;
   1e0c0:	f043 0301 	orr.w	r3, r3, #1
   1e0c4:	7223      	strb	r3, [r4, #8]
		radio_isr_set(isr_tx, lll);
   1e0c6:	4621      	mov	r1, r4
}
   1e0c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		radio_isr_set(isr_tx, lll);
   1e0cc:	f000 bf98 	b.w	1f000 <radio_isr_set>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   1e0d0:	2906      	cmp	r1, #6
   1e0d2:	d0ad      	beq.n	1e030 <isr_rx+0x198>
   1e0d4:	e725      	b.n	1df22 <isr_rx+0x8a>
			pdu_tx->tx_addr = lll->init_addr_type;
   1e0d6:	7a23      	ldrb	r3, [r4, #8]
   1e0d8:	7832      	ldrb	r2, [r6, #0]
   1e0da:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1e0de:	4630      	mov	r0, r6
   1e0e0:	f363 1286 	bfi	r2, r3, #6, #1
   1e0e4:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_tx->scan_req.scan_addr[0],
   1e0e8:	f104 010b 	add.w	r1, r4, #11
   1e0ec:	2206      	movs	r2, #6
   1e0ee:	f008 fc58 	bl	269a2 <memcpy>
   1e0f2:	e7d4      	b.n	1e09e <isr_rx+0x206>
   1e0f4:	7f6b      	ldrb	r3, [r5, #29]
	bool dir_report = false;
   1e0f6:	2600      	movs	r6, #0
   1e0f8:	e74f      	b.n	1df9a <isr_rx+0x102>
		LL_ASSERT(!radio_is_ready());
   1e0fa:	4a13      	ldr	r2, [pc, #76]	; (1e148 <isr_rx+0x2b0>)
   1e0fc:	4916      	ldr	r1, [pc, #88]	; (1e158 <isr_rx+0x2c0>)
   1e0fe:	4814      	ldr	r0, [pc, #80]	; (1e150 <isr_rx+0x2b8>)
   1e100:	f44f 736d 	mov.w	r3, #948	; 0x3b4
   1e104:	f006 f9d6 	bl	244b4 <printk>
   1e108:	4040      	eors	r0, r0
   1e10a:	f380 8811 	msr	BASEPRI, r0
   1e10e:	f04f 0003 	mov.w	r0, #3
   1e112:	df02      	svc	2
   1e114:	e7d0      	b.n	1e0b8 <isr_rx+0x220>
		!memcmp(lll->init_addr, pdu->direct_ind.tgt_addr,
   1e116:	4649      	mov	r1, r9
   1e118:	2206      	movs	r2, #6
   1e11a:	f104 000b 	add.w	r0, r4, #11
   1e11e:	f008 fc30 	bl	26982 <memcmp>
	return (((lll->init_addr_type == pdu->rx_addr) &&
   1e122:	b160      	cbz	r0, 1e13e <isr_rx+0x2a6>
   1e124:	7a23      	ldrb	r3, [r4, #8]
   1e126:	7f28      	ldrb	r0, [r5, #28]
   1e128:	e713      	b.n	1df52 <isr_rx+0xba>
	    (pdu->rx_addr != 0) &&
   1e12a:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1e12e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e132:	2b40      	cmp	r3, #64	; 0x40
   1e134:	f47f af14 	bne.w	1df60 <isr_rx+0xc8>
   1e138:	7f6b      	ldrb	r3, [r5, #29]
			*dir_report = true;
   1e13a:	2601      	movs	r6, #1
   1e13c:	e72d      	b.n	1df9a <isr_rx+0x102>
   1e13e:	7f6b      	ldrb	r3, [r5, #29]
   1e140:	e72b      	b.n	1df9a <isr_rx+0x102>
   1e142:	bf00      	nop
   1e144:	0001dc09 	.word	0x0001dc09
   1e148:	0002f1e0 	.word	0x0002f1e0
   1e14c:	0002f22c 	.word	0x0002f22c
   1e150:	0002e80c 	.word	0x0002e80c
   1e154:	0001dc1d 	.word	0x0001dc1d
   1e158:	0002f1b0 	.word	0x0002f1b0

0001e15c <isr_abort>:
{
   1e15c:	b530      	push	{r4, r5, lr}
   1e15e:	b083      	sub	sp, #12
   1e160:	4604      	mov	r4, r0
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1e162:	2500      	movs	r5, #0
	lll_isr_status_reset();
   1e164:	f7fe feda 	bl	1cf1c <lll_isr_status_reset>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1e168:	462b      	mov	r3, r5
   1e16a:	4629      	mov	r1, r5
   1e16c:	2203      	movs	r2, #3
   1e16e:	9500      	str	r5, [sp, #0]
   1e170:	4628      	mov	r0, r5
   1e172:	f7f6 faad 	bl	146d0 <ticker_stop>
	radio_disable();
   1e176:	f001 f84d 	bl	1f214 <radio_disable>
	radio_filter_disable();
   1e17a:	f001 f911 	bl	1f3a0 <radio_filter_disable>
	if (++lll->chan == 3U) {
   1e17e:	7a20      	ldrb	r0, [r4, #8]
   1e180:	f3c0 0241 	ubfx	r2, r0, #1, #2
   1e184:	3201      	adds	r2, #1
   1e186:	f002 0203 	and.w	r2, r2, #3
   1e18a:	2a03      	cmp	r2, #3
   1e18c:	bf14      	ite	ne
   1e18e:	f362 0042 	bfine	r0, r2, #1, #2
		lll->chan = 0U;
   1e192:	f365 0042 	bfieq	r0, r5, #1, #2
   1e196:	7220      	strb	r0, [r4, #8]
	lll_isr_cleanup(param);
   1e198:	4620      	mov	r0, r4
}
   1e19a:	b003      	add	sp, #12
   1e19c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	lll_isr_cleanup(param);
   1e1a0:	f7fe beca 	b.w	1cf38 <lll_isr_cleanup>

0001e1a4 <lll_scan_init>:
}
   1e1a4:	2000      	movs	r0, #0
   1e1a6:	4770      	bx	lr

0001e1a8 <lll_scan_reset>:
   1e1a8:	2000      	movs	r0, #0
   1e1aa:	4770      	bx	lr

0001e1ac <lll_scan_prepare>:
{
   1e1ac:	b510      	push	{r4, lr}
   1e1ae:	b082      	sub	sp, #8
   1e1b0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1e1b2:	f7fe ff49 	bl	1d048 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1e1b6:	2800      	cmp	r0, #0
   1e1b8:	db19      	blt.n	1e1ee <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1e1ba:	4a13      	ldr	r2, [pc, #76]	; (1e208 <lll_scan_prepare+0x5c>)
   1e1bc:	4913      	ldr	r1, [pc, #76]	; (1e20c <lll_scan_prepare+0x60>)
   1e1be:	4814      	ldr	r0, [pc, #80]	; (1e210 <lll_scan_prepare+0x64>)
   1e1c0:	9400      	str	r4, [sp, #0]
   1e1c2:	2300      	movs	r3, #0
   1e1c4:	f7fe fd4c 	bl	1cc60 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e1c8:	b108      	cbz	r0, 1e1ce <lll_scan_prepare+0x22>
   1e1ca:	3044      	adds	r0, #68	; 0x44
   1e1cc:	d101      	bne.n	1e1d2 <lll_scan_prepare+0x26>
}
   1e1ce:	b002      	add	sp, #8
   1e1d0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e1d2:	4a10      	ldr	r2, [pc, #64]	; (1e214 <lll_scan_prepare+0x68>)
   1e1d4:	4910      	ldr	r1, [pc, #64]	; (1e218 <lll_scan_prepare+0x6c>)
   1e1d6:	4811      	ldr	r0, [pc, #68]	; (1e21c <lll_scan_prepare+0x70>)
   1e1d8:	2370      	movs	r3, #112	; 0x70
   1e1da:	f006 f96b 	bl	244b4 <printk>
   1e1de:	4040      	eors	r0, r0
   1e1e0:	f380 8811 	msr	BASEPRI, r0
   1e1e4:	f04f 0003 	mov.w	r0, #3
   1e1e8:	df02      	svc	2
}
   1e1ea:	b002      	add	sp, #8
   1e1ec:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1e1ee:	4a09      	ldr	r2, [pc, #36]	; (1e214 <lll_scan_prepare+0x68>)
   1e1f0:	490b      	ldr	r1, [pc, #44]	; (1e220 <lll_scan_prepare+0x74>)
   1e1f2:	480a      	ldr	r0, [pc, #40]	; (1e21c <lll_scan_prepare+0x70>)
   1e1f4:	236d      	movs	r3, #109	; 0x6d
   1e1f6:	f006 f95d 	bl	244b4 <printk>
   1e1fa:	4040      	eors	r0, r0
   1e1fc:	f380 8811 	msr	BASEPRI, r0
   1e200:	f04f 0003 	mov.w	r0, #3
   1e204:	df02      	svc	2
   1e206:	e7d8      	b.n	1e1ba <lll_scan_prepare+0xe>
   1e208:	0001d939 	.word	0x0001d939
   1e20c:	0001dd8d 	.word	0x0001dd8d
   1e210:	0001dde9 	.word	0x0001dde9
   1e214:	0002f1e0 	.word	0x0002f1e0
   1e218:	0002f1cc 	.word	0x0002f1cc
   1e21c:	0002e80c 	.word	0x0002e80c
   1e220:	0002f148 	.word	0x0002f148

0001e224 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e226:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1e228:	f7fe fe78 	bl	1cf1c <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1e22c:	f7f9 f8d4 	bl	173d8 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1e230:	4604      	mov	r4, r0
   1e232:	2800      	cmp	r0, #0
   1e234:	d033      	beq.n	1e29e <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1e236:	4b21      	ldr	r3, [pc, #132]	; (1e2bc <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1e238:	4921      	ldr	r1, [pc, #132]	; (1e2c0 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1e23a:	4a22      	ldr	r2, [pc, #136]	; (1e2c4 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1e23c:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1e23e:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   1e240:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   1e242:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1e244:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   1e246:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   1e248:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1e24a:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1e24c:	b11b      	cbz	r3, 1e256 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1e24e:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1e252:	2b00      	cmp	r3, #0
   1e254:	db04      	blt.n	1e260 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1e256:	4628      	mov	r0, r5
}
   1e258:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1e25c:	f7fe be6c 	b.w	1cf38 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1e260:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1e264:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1e268:	2b02      	cmp	r3, #2
   1e26a:	d016      	beq.n	1e29a <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1e26c:	2b04      	cmp	r3, #4
   1e26e:	bf14      	ite	ne
   1e270:	2728      	movne	r7, #40	; 0x28
   1e272:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1e276:	f001 f9bf 	bl	1f5f8 <radio_tmr_aa_restore>
   1e27a:	4606      	mov	r6, r0
   1e27c:	f001 f9c2 	bl	1f604 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1e280:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1e282:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   1e284:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1e286:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   1e28a:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   1e28c:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   1e28e:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1e290:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   1e292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1e296:	f7fe be4f 	b.w	1cf38 <lll_isr_cleanup>
	switch (phy) {
   1e29a:	2718      	movs	r7, #24
   1e29c:	e7eb      	b.n	1e276 <isr_done+0x52>
	LL_ASSERT(e);
   1e29e:	4a0a      	ldr	r2, [pc, #40]	; (1e2c8 <isr_done+0xa4>)
   1e2a0:	490a      	ldr	r1, [pc, #40]	; (1e2cc <isr_done+0xa8>)
   1e2a2:	480b      	ldr	r0, [pc, #44]	; (1e2d0 <isr_done+0xac>)
   1e2a4:	f240 236d 	movw	r3, #621	; 0x26d
   1e2a8:	f006 f904 	bl	244b4 <printk>
   1e2ac:	4040      	eors	r0, r0
   1e2ae:	f380 8811 	msr	BASEPRI, r0
   1e2b2:	f04f 0003 	mov.w	r0, #3
   1e2b6:	df02      	svc	2
   1e2b8:	e7bd      	b.n	1e236 <isr_done+0x12>
   1e2ba:	bf00      	nop
   1e2bc:	20009066 	.word	0x20009066
   1e2c0:	2000915e 	.word	0x2000915e
   1e2c4:	2000915f 	.word	0x2000915f
   1e2c8:	0002f234 	.word	0x0002f234
   1e2cc:	0002eadc 	.word	0x0002eadc
   1e2d0:	0002e80c 	.word	0x0002e80c

0001e2d4 <lll_conn_init>:
{
   1e2d4:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1e2d6:	f000 fff5 	bl	1f2c4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1e2da:	7803      	ldrb	r3, [r0, #0]
   1e2dc:	2201      	movs	r2, #1
   1e2de:	f362 0301 	bfi	r3, r2, #0, #2
   1e2e2:	7003      	strb	r3, [r0, #0]
}
   1e2e4:	2000      	movs	r0, #0
   1e2e6:	bd08      	pop	{r3, pc}

0001e2e8 <lll_conn_reset>:
}
   1e2e8:	2000      	movs	r0, #0
   1e2ea:	4770      	bx	lr

0001e2ec <lll_conn_flush>:
}
   1e2ec:	4770      	bx	lr
   1e2ee:	bf00      	nop

0001e2f0 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1e2f0:	4805      	ldr	r0, [pc, #20]	; (1e308 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1e2f2:	4906      	ldr	r1, [pc, #24]	; (1e30c <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1e2f4:	4a06      	ldr	r2, [pc, #24]	; (1e310 <lll_conn_prepare_reset+0x20>)
{
   1e2f6:	b410      	push	{r4}
	trx_cnt = 0U;
   1e2f8:	2300      	movs	r3, #0
   1e2fa:	4c06      	ldr	r4, [pc, #24]	; (1e314 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1e2fc:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1e2fe:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1e300:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1e302:	8023      	strh	r3, [r4, #0]
}
   1e304:	bc10      	pop	{r4}
   1e306:	4770      	bx	lr
   1e308:	2000915e 	.word	0x2000915e
   1e30c:	2000915d 	.word	0x2000915d
   1e310:	2000915f 	.word	0x2000915f
   1e314:	20009066 	.word	0x20009066

0001e318 <lll_conn_abort_cb>:
{
   1e318:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1e31a:	b1d0      	cbz	r0, 1e352 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   1e31c:	460c      	mov	r4, r1
   1e31e:	f7fe feab 	bl	1d078 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1e322:	2800      	cmp	r0, #0
   1e324:	db04      	blt.n	1e330 <lll_conn_abort_cb+0x18>
	lll_done(param);
   1e326:	4620      	mov	r0, r4
}
   1e328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1e32c:	f7fe bd24 	b.w	1cd78 <lll_done>
	LL_ASSERT(err >= 0);
   1e330:	4a0b      	ldr	r2, [pc, #44]	; (1e360 <lll_conn_abort_cb+0x48>)
   1e332:	490c      	ldr	r1, [pc, #48]	; (1e364 <lll_conn_abort_cb+0x4c>)
   1e334:	480c      	ldr	r0, [pc, #48]	; (1e368 <lll_conn_abort_cb+0x50>)
   1e336:	239b      	movs	r3, #155	; 0x9b
   1e338:	f006 f8bc 	bl	244b4 <printk>
   1e33c:	4040      	eors	r0, r0
   1e33e:	f380 8811 	msr	BASEPRI, r0
   1e342:	f04f 0003 	mov.w	r0, #3
   1e346:	df02      	svc	2
	lll_done(param);
   1e348:	4620      	mov	r0, r4
}
   1e34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1e34e:	f7fe bd13 	b.w	1cd78 <lll_done>
		radio_isr_set(isr_done, param);
   1e352:	4806      	ldr	r0, [pc, #24]	; (1e36c <lll_conn_abort_cb+0x54>)
   1e354:	f000 fe54 	bl	1f000 <radio_isr_set>
}
   1e358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1e35c:	f000 bf5a 	b.w	1f214 <radio_disable>
   1e360:	0002f234 	.word	0x0002f234
   1e364:	0002f148 	.word	0x0002f148
   1e368:	0002e80c 	.word	0x0002e80c
   1e36c:	0001e225 	.word	0x0001e225

0001e370 <lll_conn_rx_pkt_set>:
{
   1e370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e372:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e374:	2001      	movs	r0, #1
   1e376:	f7f8 ff7d 	bl	17274 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e37a:	4606      	mov	r6, r0
   1e37c:	b368      	cbz	r0, 1e3da <lll_conn_rx_pkt_set+0x6a>
	phy = lll->phy_rx;
   1e37e:	f895 4049 	ldrb.w	r4, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   1e382:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1e386:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1e38a:	4620      	mov	r0, r4
   1e38c:	2100      	movs	r1, #0
   1e38e:	f000 fe7d 	bl	1f08c <radio_phy_set>
	} else if (lll->enc_rx) {
   1e392:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1e396:	071b      	lsls	r3, r3, #28
   1e398:	d512      	bpl.n	1e3c0 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1e39a:	1d39      	adds	r1, r7, #4
   1e39c:	0062      	lsls	r2, r4, #1
   1e39e:	b2c9      	uxtb	r1, r1
   1e3a0:	f042 0201 	orr.w	r2, r2, #1
   1e3a4:	2008      	movs	r0, #8
   1e3a6:	f000 fed5 	bl	1f154 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1e3aa:	f106 021c 	add.w	r2, r6, #28
   1e3ae:	4621      	mov	r1, r4
   1e3b0:	f105 0063 	add.w	r0, r5, #99	; 0x63
   1e3b4:	f001 f940 	bl	1f638 <radio_ccm_rx_pkt_set>
}
   1e3b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1e3bc:	f000 bf00 	b.w	1f1c0 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1e3c0:	0062      	lsls	r2, r4, #1
   1e3c2:	b2f9      	uxtb	r1, r7
   1e3c4:	2008      	movs	r0, #8
   1e3c6:	f042 0201 	orr.w	r2, r2, #1
   1e3ca:	f000 fec3 	bl	1f154 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1e3ce:	f106 001c 	add.w	r0, r6, #28
}
   1e3d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1e3d6:	f000 bef3 	b.w	1f1c0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1e3da:	4a07      	ldr	r2, [pc, #28]	; (1e3f8 <lll_conn_rx_pkt_set+0x88>)
   1e3dc:	4907      	ldr	r1, [pc, #28]	; (1e3fc <lll_conn_rx_pkt_set+0x8c>)
   1e3de:	4808      	ldr	r0, [pc, #32]	; (1e400 <lll_conn_rx_pkt_set+0x90>)
   1e3e0:	f240 13d5 	movw	r3, #469	; 0x1d5
   1e3e4:	f006 f866 	bl	244b4 <printk>
   1e3e8:	4040      	eors	r0, r0
   1e3ea:	f380 8811 	msr	BASEPRI, r0
   1e3ee:	f04f 0003 	mov.w	r0, #3
   1e3f2:	df02      	svc	2
   1e3f4:	e7c3      	b.n	1e37e <lll_conn_rx_pkt_set+0xe>
   1e3f6:	bf00      	nop
   1e3f8:	0002f234 	.word	0x0002f234
   1e3fc:	0002f22c 	.word	0x0002f22c
   1e400:	0002e80c 	.word	0x0002e80c

0001e404 <lll_conn_isr_tx>:
{
   1e404:	b538      	push	{r3, r4, r5, lr}
   1e406:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1e408:	f7fe fd76 	bl	1cef8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1e40c:	2096      	movs	r0, #150	; 0x96
   1e40e:	f000 fff9 	bl	1f404 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1e412:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1e416:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1e41a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1e41e:	f000 0007 	and.w	r0, r0, #7
   1e422:	f002 0207 	and.w	r2, r2, #7
   1e426:	2100      	movs	r1, #0
   1e428:	f000 ff62 	bl	1f2f0 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1e42c:	4620      	mov	r0, r4
   1e42e:	f7ff ff9f 	bl	1e370 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1e432:	f000 ff13 	bl	1f25c <radio_is_ready>
   1e436:	bb58      	cbnz	r0, 1e490 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1e438:	f001 f8f8 	bl	1f62c <radio_tmr_tifs_base_get>
   1e43c:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1e43e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1e442:	2101      	movs	r1, #1
   1e444:	f000 0007 	and.w	r0, r0, #7
   1e448:	f000 feca 	bl	1f1e0 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1e44c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1e450:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1e454:	4405      	add	r5, r0
   1e456:	2b02      	cmp	r3, #2
   1e458:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1e45c:	d016      	beq.n	1e48c <lll_conn_isr_tx+0x88>
		return 376;
   1e45e:	2b04      	cmp	r3, #4
   1e460:	bf14      	ite	ne
   1e462:	2328      	movne	r3, #40	; 0x28
   1e464:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1e468:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1e46c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1e470:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1e474:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1e476:	f000 feaf 	bl	1f1d8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1e47a:	1a28      	subs	r0, r5, r0
   1e47c:	f001 f88e 	bl	1f59c <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1e480:	4621      	mov	r1, r4
   1e482:	480a      	ldr	r0, [pc, #40]	; (1e4ac <lll_conn_isr_tx+0xa8>)
}
   1e484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1e488:	f000 bdba 	b.w	1f000 <radio_isr_set>
	switch (phy) {
   1e48c:	2318      	movs	r3, #24
   1e48e:	e7eb      	b.n	1e468 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1e490:	4a07      	ldr	r2, [pc, #28]	; (1e4b0 <lll_conn_isr_tx+0xac>)
   1e492:	4908      	ldr	r1, [pc, #32]	; (1e4b4 <lll_conn_isr_tx+0xb0>)
   1e494:	4808      	ldr	r0, [pc, #32]	; (1e4b8 <lll_conn_isr_tx+0xb4>)
   1e496:	f240 13a1 	movw	r3, #417	; 0x1a1
   1e49a:	f006 f80b 	bl	244b4 <printk>
   1e49e:	4040      	eors	r0, r0
   1e4a0:	f380 8811 	msr	BASEPRI, r0
   1e4a4:	f04f 0003 	mov.w	r0, #3
   1e4a8:	df02      	svc	2
   1e4aa:	e7c5      	b.n	1e438 <lll_conn_isr_tx+0x34>
   1e4ac:	0001e5fd 	.word	0x0001e5fd
   1e4b0:	0002f234 	.word	0x0002f234
   1e4b4:	0002f1b0 	.word	0x0002f1b0
   1e4b8:	0002e80c 	.word	0x0002e80c

0001e4bc <lll_conn_tx_pkt_set>:
{
   1e4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4be:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   1e4c0:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1e4c4:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1e4c8:	f001 0507 	and.w	r5, r1, #7
{
   1e4cc:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   1e4ce:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1e4d2:	4628      	mov	r0, r5
   1e4d4:	f000 fdda 	bl	1f08c <radio_phy_set>
	} else if (lll->enc_tx) {
   1e4d8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e4dc:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   1e4de:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   1e4e2:	d50f      	bpl.n	1e504 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1e4e4:	1d39      	adds	r1, r7, #4
   1e4e6:	f042 0201 	orr.w	r2, r2, #1
   1e4ea:	b2c9      	uxtb	r1, r1
   1e4ec:	2008      	movs	r0, #8
   1e4ee:	f000 fe31 	bl	1f154 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1e4f2:	4631      	mov	r1, r6
   1e4f4:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1e4f8:	f001 f8f6 	bl	1f6e8 <radio_ccm_tx_pkt_set>
}
   1e4fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1e500:	f000 be64 	b.w	1f1cc <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1e504:	b2f9      	uxtb	r1, r7
   1e506:	2008      	movs	r0, #8
   1e508:	f042 0201 	orr.w	r2, r2, #1
   1e50c:	f000 fe22 	bl	1f154 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1e510:	4630      	mov	r0, r6
}
   1e512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1e516:	f000 be59 	b.w	1f1cc <radio_pkt_tx_set>
   1e51a:	bf00      	nop

0001e51c <lll_conn_pdu_tx_prep>:
{
   1e51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e520:	4604      	mov	r4, r0
   1e522:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1e524:	aa01      	add	r2, sp, #4
   1e526:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   1e528:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1e52a:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1e52c:	f7f4 fd84 	bl	13038 <memq_peek>
	if (lll->empty || !link) {
   1e530:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e534:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1e536:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1e538:	d432      	bmi.n	1e5a0 <lll_conn_pdu_tx_prep+0x84>
   1e53a:	2800      	cmp	r0, #0
   1e53c:	d04e      	beq.n	1e5dc <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1e53e:	9a01      	ldr	r2, [sp, #4]
   1e540:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   1e544:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1e548:	f102 0804 	add.w	r8, r2, #4
   1e54c:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1e550:	b913      	cbnz	r3, 1e558 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1e552:	786b      	ldrb	r3, [r5, #1]
   1e554:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1e558:	b137      	cbz	r7, 1e568 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1e55a:	f818 2007 	ldrb.w	r2, [r8, r7]
   1e55e:	2101      	movs	r1, #1
   1e560:	f361 0201 	bfi	r2, r1, #0, #2
   1e564:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1e568:	1bdb      	subs	r3, r3, r7
   1e56a:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1e56c:	4620      	mov	r0, r4
   1e56e:	f7fc fe6d 	bl	1b24c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1e572:	786b      	ldrb	r3, [r5, #1]
   1e574:	4283      	cmp	r3, r0
   1e576:	d924      	bls.n	1e5c2 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1e578:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1e57a:	f818 3007 	ldrb.w	r3, [r8, r7]
   1e57e:	f043 0310 	orr.w	r3, r3, #16
   1e582:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1e586:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   1e58a:	2200      	movs	r2, #0
		p->rfu = 0U;
   1e58c:	f36f 1347 	bfc	r3, #5, #3
   1e590:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1e594:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1e596:	f8c9 5000 	str.w	r5, [r9]
}
   1e59a:	b003      	add	sp, #12
   1e59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1e5a0:	f043 0304 	orr.w	r3, r3, #4
   1e5a4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1e5a8:	f000 fe8c 	bl	1f2c4 <radio_pkt_empty_get>
   1e5ac:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1e5ae:	b1e6      	cbz	r6, 1e5ea <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1e5b0:	7803      	ldrb	r3, [r0, #0]
   1e5b2:	f043 0310 	orr.w	r3, r3, #16
   1e5b6:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1e5b8:	f8c9 5000 	str.w	r5, [r9]
}
   1e5bc:	b003      	add	sp, #12
   1e5be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1e5c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e5c4:	6832      	ldr	r2, [r6, #0]
   1e5c6:	429a      	cmp	r2, r3
			p->md = 1U;
   1e5c8:	f818 3007 	ldrb.w	r3, [r8, r7]
   1e5cc:	bf14      	ite	ne
   1e5ce:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1e5d2:	f36f 1304 	bfceq	r3, #4, #1
   1e5d6:	f808 3007 	strb.w	r3, [r8, r7]
   1e5da:	e7d4      	b.n	1e586 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1e5dc:	f043 0304 	orr.w	r3, r3, #4
   1e5e0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1e5e4:	f000 fe6e 	bl	1f2c4 <radio_pkt_empty_get>
   1e5e8:	4605      	mov	r5, r0
			p->md = 0U;
   1e5ea:	782b      	ldrb	r3, [r5, #0]
   1e5ec:	f36f 1304 	bfc	r3, #4, #1
   1e5f0:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1e5f2:	f8c9 5000 	str.w	r5, [r9]
}
   1e5f6:	b003      	add	sp, #12
   1e5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e5fc <lll_conn_isr_rx>:
{
   1e5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e5fe:	b083      	sub	sp, #12
   1e600:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1e602:	f000 fe35 	bl	1f270 <radio_is_done>
	if (trx_done) {
   1e606:	f010 0fff 	tst.w	r0, #255	; 0xff
   1e60a:	d109      	bne.n	1e620 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1e60c:	f7fe fc7c 	bl	1cf08 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1e610:	48ac      	ldr	r0, [pc, #688]	; (1e8c4 <lll_conn_isr_rx+0x2c8>)
   1e612:	4621      	mov	r1, r4
   1e614:	f000 fcf4 	bl	1f000 <radio_isr_set>
		radio_disable();
   1e618:	f000 fdfc 	bl	1f214 <radio_disable>
}
   1e61c:	b003      	add	sp, #12
   1e61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crc_ok = radio_crc_is_valid();
   1e620:	f000 fe46 	bl	1f2b0 <radio_crc_is_valid>
   1e624:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1e626:	f000 fe95 	bl	1f354 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1e62a:	f7fe fc6d 	bl	1cf08 <lll_isr_rx_status_reset>
	trx_cnt++;
   1e62e:	4aa6      	ldr	r2, [pc, #664]	; (1e8c8 <lll_conn_isr_rx+0x2cc>)
   1e630:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e632:	2001      	movs	r0, #1
	trx_cnt++;
   1e634:	4403      	add	r3, r0
   1e636:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e638:	f7f8 fe1c 	bl	17274 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e63c:	4606      	mov	r6, r0
   1e63e:	2800      	cmp	r0, #0
   1e640:	f000 80b6 	beq.w	1e7b0 <lll_conn_isr_rx+0x1b4>
	if (crc_ok) {
   1e644:	2d00      	cmp	r5, #0
   1e646:	d155      	bne.n	1e6f4 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   1e648:	4ba0      	ldr	r3, [pc, #640]	; (1e8cc <lll_conn_isr_rx+0x2d0>)
   1e64a:	781f      	ldrb	r7, [r3, #0]
   1e64c:	2f00      	cmp	r7, #0
   1e64e:	f040 809e 	bne.w	1e78e <lll_conn_isr_rx+0x192>
		crc_expire--;
   1e652:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e654:	a901      	add	r1, sp, #4
   1e656:	4620      	mov	r0, r4
		crc_expire--;
   1e658:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e65a:	f7ff ff5f 	bl	1e51c <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1e65e:	2096      	movs	r0, #150	; 0x96
   1e660:	f000 fed0 	bl	1f404 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1e664:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1e668:	f000 0007 	and.w	r0, r0, #7
   1e66c:	f000 fe32 	bl	1f2d4 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1e670:	4897      	ldr	r0, [pc, #604]	; (1e8d0 <lll_conn_isr_rx+0x2d4>)
   1e672:	4621      	mov	r1, r4
   1e674:	f000 fcc4 	bl	1f000 <radio_isr_set>
		radio_tmr_end_capture();
   1e678:	f000 ffca 	bl	1f610 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1e67c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   1e680:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   1e682:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1e686:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   1e688:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1e68c:	009b      	lsls	r3, r3, #2
   1e68e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1e692:	f020 020c 	bic.w	r2, r0, #12
   1e696:	4313      	orrs	r3, r2
   1e698:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1e69a:	4620      	mov	r0, r4
   1e69c:	f7ff ff0e 	bl	1e4bc <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1e6a0:	f000 fddc 	bl	1f25c <radio_is_ready>
   1e6a4:	2800      	cmp	r0, #0
   1e6a6:	f040 80b2 	bne.w	1e80e <lll_conn_isr_rx+0x212>
	if (!radio_tmr_aa_restore()) {
   1e6aa:	f000 ffa5 	bl	1f5f8 <radio_tmr_aa_restore>
   1e6ae:	b170      	cbz	r0, 1e6ce <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   1e6b0:	b19d      	cbz	r5, 1e6da <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   1e6b2:	8a20      	ldrh	r0, [r4, #16]
   1e6b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e6b8:	4298      	cmp	r0, r3
   1e6ba:	f000 80c1 	beq.w	1e840 <lll_conn_isr_rx+0x244>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1e6be:	4629      	mov	r1, r5
   1e6c0:	f7fc fbec 	bl	1ae9c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1e6c4:	b95f      	cbnz	r7, 1e6de <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   1e6c6:	f7f8 fe1b 	bl	17300 <ull_rx_sched>
}
   1e6ca:	b003      	add	sp, #12
   1e6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1e6ce:	f000 ff87 	bl	1f5e0 <radio_tmr_aa_get>
   1e6d2:	f000 ff8b 	bl	1f5ec <radio_tmr_aa_save>
	if (tx_release) {
   1e6d6:	2d00      	cmp	r5, #0
   1e6d8:	d1eb      	bne.n	1e6b2 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   1e6da:	2f00      	cmp	r7, #0
   1e6dc:	d09e      	beq.n	1e61c <lll_conn_isr_rx+0x20>
		ull_pdu_rx_alloc();
   1e6de:	f7f8 fde7 	bl	172b0 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1e6e2:	2302      	movs	r3, #2
   1e6e4:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1e6e6:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1e6e8:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1e6ea:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1e6ec:	4631      	mov	r1, r6
   1e6ee:	f7f8 fdf7 	bl	172e0 <ull_rx_put>
	if (is_ull_rx) {
   1e6f2:	e7e8      	b.n	1e6c6 <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   1e6f4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e6f8:	7f32      	ldrb	r2, [r6, #28]
   1e6fa:	f003 0101 	and.w	r1, r3, #1
   1e6fe:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1e702:	4288      	cmp	r0, r1
   1e704:	d064      	beq.n	1e7d0 <lll_conn_isr_rx+0x1d4>
		if (lll->role) {
   1e706:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   1e70a:	f081 0101 	eor.w	r1, r1, #1
   1e70e:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1e712:	2a00      	cmp	r2, #0
		lll->sn++;
   1e714:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   1e718:	da05      	bge.n	1e726 <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   1e71a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1e71e:	f043 0301 	orr.w	r3, r3, #1
   1e722:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   1e726:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e72a:	075f      	lsls	r7, r3, #29
   1e72c:	d47d      	bmi.n	1e82a <lll_conn_isr_rx+0x22e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1e72e:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1e732:	aa01      	add	r2, sp, #4
   1e734:	f7f4 fc80 	bl	13038 <memq_peek>
		if (link) {
   1e738:	4607      	mov	r7, r0
   1e73a:	2800      	cmp	r0, #0
   1e73c:	d07b      	beq.n	1e836 <lll_conn_isr_rx+0x23a>
					       lll->packet_tx_head_offset);
   1e73e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   1e742:	9b01      	ldr	r3, [sp, #4]
   1e744:	4413      	add	r3, r2
   1e746:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1e748:	b151      	cbz	r1, 1e760 <lll_conn_isr_rx+0x164>
				if (lll->enc_tx) {
   1e74a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e74e:	06dd      	lsls	r5, r3, #27
   1e750:	d506      	bpl.n	1e760 <lll_conn_isr_rx+0x164>
					lll->ccm_tx.counter++;
   1e752:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1e756:	3301      	adds	r3, #1
   1e758:	f140 0000 	adc.w	r0, r0, #0
   1e75c:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   1e760:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1e764:	440a      	add	r2, r1
   1e766:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1e768:	429a      	cmp	r2, r3
   1e76a:	d378      	bcc.n	1e85e <lll_conn_isr_rx+0x262>
			} else if (offset == lll->packet_tx_head_len) {
   1e76c:	d163      	bne.n	1e836 <lll_conn_isr_rx+0x23a>
				lll->packet_tx_head_len = 0;
   1e76e:	2200      	movs	r2, #0
   1e770:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1e774:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1e776:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1e77a:	f7f4 fc65 	bl	13048 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1e77e:	9d01      	ldr	r5, [sp, #4]
   1e780:	7f32      	ldrb	r2, [r6, #28]
   1e782:	682b      	ldr	r3, [r5, #0]
   1e784:	603b      	str	r3, [r7, #0]
				tx->next = link;
   1e786:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e78a:	602f      	str	r7, [r5, #0]
				*tx_release = tx;
   1e78c:	e021      	b.n	1e7d2 <lll_conn_isr_rx+0x1d6>
		crc_expire--;
   1e78e:	3f01      	subs	r7, #1
   1e790:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e792:	a901      	add	r1, sp, #4
   1e794:	4620      	mov	r0, r4
		crc_expire--;
   1e796:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e798:	f7ff fec0 	bl	1e51c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1e79c:	2f00      	cmp	r7, #0
   1e79e:	f040 80dc 	bne.w	1e95a <lll_conn_isr_rx+0x35e>
		radio_isr_set(isr_done, param);
   1e7a2:	4848      	ldr	r0, [pc, #288]	; (1e8c4 <lll_conn_isr_rx+0x2c8>)
   1e7a4:	4621      	mov	r1, r4
   1e7a6:	f000 fc2b 	bl	1f000 <radio_isr_set>
			radio_switch_complete_and_disable();
   1e7aa:	f000 fdad 	bl	1f308 <radio_switch_complete_and_disable>
   1e7ae:	e765      	b.n	1e67c <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   1e7b0:	4a48      	ldr	r2, [pc, #288]	; (1e8d4 <lll_conn_isr_rx+0x2d8>)
   1e7b2:	4949      	ldr	r1, [pc, #292]	; (1e8d8 <lll_conn_isr_rx+0x2dc>)
   1e7b4:	4849      	ldr	r0, [pc, #292]	; (1e8dc <lll_conn_isr_rx+0x2e0>)
   1e7b6:	23d0      	movs	r3, #208	; 0xd0
   1e7b8:	f005 fe7c 	bl	244b4 <printk>
   1e7bc:	4040      	eors	r0, r0
   1e7be:	f380 8811 	msr	BASEPRI, r0
   1e7c2:	f04f 0003 	mov.w	r0, #3
   1e7c6:	df02      	svc	2
	if (crc_ok) {
   1e7c8:	2d00      	cmp	r5, #0
   1e7ca:	f43f af3d 	beq.w	1e648 <lll_conn_isr_rx+0x4c>
   1e7ce:	e791      	b.n	1e6f4 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   1e7d0:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   1e7d2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1e7d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1e7da:	429a      	cmp	r2, r3
   1e7dc:	d046      	beq.n	1e86c <lll_conn_isr_rx+0x270>
	is_rx_enqueue = 0U;
   1e7de:	2700      	movs	r7, #0
		crc_expire = 0U;
   1e7e0:	4a3a      	ldr	r2, [pc, #232]	; (1e8cc <lll_conn_isr_rx+0x2d0>)
		crc_valid = 1U;
   1e7e2:	4b3f      	ldr	r3, [pc, #252]	; (1e8e0 <lll_conn_isr_rx+0x2e4>)
		crc_expire = 0U;
   1e7e4:	2100      	movs	r1, #0
   1e7e6:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e7e8:	4620      	mov	r0, r4
		crc_valid = 1U;
   1e7ea:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e7ec:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1e7ee:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e7f0:	f7ff fe94 	bl	1e51c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1e7f4:	7f33      	ldrb	r3, [r6, #28]
   1e7f6:	06d9      	lsls	r1, r3, #27
   1e7f8:	f53f af31 	bmi.w	1e65e <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1e7fc:	9b01      	ldr	r3, [sp, #4]
   1e7fe:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1e800:	06d2      	lsls	r2, r2, #27
   1e802:	f53f af2c 	bmi.w	1e65e <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1e806:	785b      	ldrb	r3, [r3, #1]
   1e808:	2b00      	cmp	r3, #0
   1e80a:	d0ca      	beq.n	1e7a2 <lll_conn_isr_rx+0x1a6>
   1e80c:	e727      	b.n	1e65e <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   1e80e:	4a31      	ldr	r2, [pc, #196]	; (1e8d4 <lll_conn_isr_rx+0x2d8>)
   1e810:	4934      	ldr	r1, [pc, #208]	; (1e8e4 <lll_conn_isr_rx+0x2e8>)
   1e812:	4832      	ldr	r0, [pc, #200]	; (1e8dc <lll_conn_isr_rx+0x2e0>)
   1e814:	f44f 739e 	mov.w	r3, #316	; 0x13c
   1e818:	f005 fe4c 	bl	244b4 <printk>
   1e81c:	4040      	eors	r0, r0
   1e81e:	f380 8811 	msr	BASEPRI, r0
   1e822:	f04f 0003 	mov.w	r0, #3
   1e826:	df02      	svc	2
   1e828:	e73f      	b.n	1e6aa <lll_conn_isr_rx+0xae>
			lll->empty = 0;
   1e82a:	f36f 0382 	bfc	r3, #2, #1
   1e82e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1e832:	f000 fd47 	bl	1f2c4 <radio_pkt_empty_get>
		if (link) {
   1e836:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e83a:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   1e83c:	2500      	movs	r5, #0
   1e83e:	e7c8      	b.n	1e7d2 <lll_conn_isr_rx+0x1d6>
		LL_ASSERT(lll->handle != 0xFFFF);
   1e840:	4a24      	ldr	r2, [pc, #144]	; (1e8d4 <lll_conn_isr_rx+0x2d8>)
   1e842:	4929      	ldr	r1, [pc, #164]	; (1e8e8 <lll_conn_isr_rx+0x2ec>)
   1e844:	4825      	ldr	r0, [pc, #148]	; (1e8dc <lll_conn_isr_rx+0x2e0>)
   1e846:	f240 134b 	movw	r3, #331	; 0x14b
   1e84a:	f005 fe33 	bl	244b4 <printk>
   1e84e:	4040      	eors	r0, r0
   1e850:	f380 8811 	msr	BASEPRI, r0
   1e854:	f04f 0003 	mov.w	r0, #3
   1e858:	df02      	svc	2
   1e85a:	8a20      	ldrh	r0, [r4, #16]
   1e85c:	e72f      	b.n	1e6be <lll_conn_isr_rx+0xc2>
				lll->packet_tx_head_offset = offset;
   1e85e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   1e862:	7f32      	ldrb	r2, [r6, #28]
   1e864:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	tx_release = NULL;
   1e868:	2500      	movs	r5, #0
   1e86a:	e7b2      	b.n	1e7d2 <lll_conn_isr_rx+0x1d6>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1e86c:	2003      	movs	r0, #3
   1e86e:	f7f8 fd01 	bl	17274 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1e872:	2800      	cmp	r0, #0
   1e874:	d0b3      	beq.n	1e7de <lll_conn_isr_rx+0x1e2>
		lll->nesn++;
   1e876:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e87a:	f083 0302 	eor.w	r3, r3, #2
   1e87e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   1e882:	7f73      	ldrb	r3, [r6, #29]
   1e884:	2b00      	cmp	r3, #0
   1e886:	d0aa      	beq.n	1e7de <lll_conn_isr_rx+0x1e2>
			if (lll->enc_rx) {
   1e888:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1e88c:	0718      	lsls	r0, r3, #28
   1e88e:	d401      	bmi.n	1e894 <lll_conn_isr_rx+0x298>
			*is_rx_enqueue = 1U;
   1e890:	2701      	movs	r7, #1
   1e892:	e7a5      	b.n	1e7e0 <lll_conn_isr_rx+0x1e4>
				done = radio_ccm_is_done();
   1e894:	f000 ff52 	bl	1f73c <radio_ccm_is_done>
				LL_ASSERT(done);
   1e898:	2800      	cmp	r0, #0
   1e89a:	d050      	beq.n	1e93e <lll_conn_isr_rx+0x342>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1e89c:	f000 ff70 	bl	1f780 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1e8a0:	2800      	cmp	r0, #0
   1e8a2:	d13c      	bne.n	1e91e <lll_conn_isr_rx+0x322>
				    lll->ccm_rx.counter == 0 &&
   1e8a4:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1e8a8:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1e8ac:	4313      	orrs	r3, r2
   1e8ae:	d104      	bne.n	1e8ba <lll_conn_isr_rx+0x2be>
				    (pdu_data_rx->ll_id ==
   1e8b0:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1e8b2:	f003 0303 	and.w	r3, r3, #3
   1e8b6:	2b03      	cmp	r3, #3
   1e8b8:	d01a      	beq.n	1e8f0 <lll_conn_isr_rx+0x2f4>
					mic_state = LLL_CONN_MIC_FAIL;
   1e8ba:	4b0c      	ldr	r3, [pc, #48]	; (1e8ec <lll_conn_isr_rx+0x2f0>)
   1e8bc:	2202      	movs	r2, #2
   1e8be:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1e8c0:	2700      	movs	r7, #0
   1e8c2:	e6f2      	b.n	1e6aa <lll_conn_isr_rx+0xae>
   1e8c4:	0001e225 	.word	0x0001e225
   1e8c8:	20009066 	.word	0x20009066
   1e8cc:	2000915d 	.word	0x2000915d
   1e8d0:	0001e405 	.word	0x0001e405
   1e8d4:	0002f234 	.word	0x0002f234
   1e8d8:	0002f22c 	.word	0x0002f22c
   1e8dc:	0002e80c 	.word	0x0002e80c
   1e8e0:	2000915e 	.word	0x2000915e
   1e8e4:	0002f1b0 	.word	0x0002f1b0
   1e8e8:	0002f288 	.word	0x0002f288
   1e8ec:	2000915f 	.word	0x2000915f
						radio_pkt_scratch_get();
   1e8f0:	f000 fcec 	bl	1f2cc <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1e8f4:	7842      	ldrb	r2, [r0, #1]
   1e8f6:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   1e8f8:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1e8fa:	d8de      	bhi.n	1e8ba <lll_conn_isr_rx+0x2be>
						memcpy(pdu_data_rx,
   1e8fc:	3203      	adds	r2, #3
   1e8fe:	f106 001c 	add.w	r0, r6, #28
   1e902:	f008 f84e 	bl	269a2 <memcpy>
						lll->ccm_rx.counter--;
   1e906:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1e90a:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1e90e:	f113 33ff 	adds.w	r3, r3, #4294967295
   1e912:	f142 32ff 	adc.w	r2, r2, #4294967295
   1e916:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1e91a:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1e91e:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1e922:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   1e926:	490e      	ldr	r1, [pc, #56]	; (1e960 <lll_conn_isr_rx+0x364>)
				lll->ccm_rx.counter++;
   1e928:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   1e92a:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1e92e:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   1e932:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1e934:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1e938:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   1e93a:	6042      	str	r2, [r0, #4]
		if (err) {
   1e93c:	e750      	b.n	1e7e0 <lll_conn_isr_rx+0x1e4>
				LL_ASSERT(done);
   1e93e:	4a09      	ldr	r2, [pc, #36]	; (1e964 <lll_conn_isr_rx+0x368>)
   1e940:	4909      	ldr	r1, [pc, #36]	; (1e968 <lll_conn_isr_rx+0x36c>)
   1e942:	480a      	ldr	r0, [pc, #40]	; (1e96c <lll_conn_isr_rx+0x370>)
   1e944:	f240 330d 	movw	r3, #781	; 0x30d
   1e948:	f005 fdb4 	bl	244b4 <printk>
   1e94c:	4040      	eors	r0, r0
   1e94e:	f380 8811 	msr	BASEPRI, r0
   1e952:	f04f 0003 	mov.w	r0, #3
   1e956:	df02      	svc	2
   1e958:	e7a0      	b.n	1e89c <lll_conn_isr_rx+0x2a0>
	is_rx_enqueue = 0U;
   1e95a:	462f      	mov	r7, r5
   1e95c:	e67f      	b.n	1e65e <lll_conn_isr_rx+0x62>
   1e95e:	bf00      	nop
   1e960:	2000915f 	.word	0x2000915f
   1e964:	0002f234 	.word	0x0002f234
   1e968:	0002f280 	.word	0x0002f280
   1e96c:	0002e80c 	.word	0x0002e80c

0001e970 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1e970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1e974:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1e976:	8a22      	ldrh	r2, [r4, #16]
   1e978:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e97c:	429a      	cmp	r2, r3
{
   1e97e:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1e980:	f000 80c3 	beq.w	1eb0a <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1e984:	4605      	mov	r5, r0
   1e986:	f7ff fcb3 	bl	1e2f0 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1e98a:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1e98c:	8b60      	ldrh	r0, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1e98e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1e992:	1e4a      	subs	r2, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1e994:	4401      	add	r1, r0
   1e996:	8361      	strh	r1, [r4, #26]
	lll->latency_prepare = 0;
   1e998:	2100      	movs	r1, #0
	lll->latency_event = lll->latency_prepare - 1;
   1e99a:	b292      	uxth	r2, r2
	lll->latency_prepare = 0;
   1e99c:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1e99e:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1e9a0:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   1e9a2:	f100 808f 	bmi.w	1eac4 <prepare_cb+0x154>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1e9a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e9aa:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1e9ae:	9300      	str	r3, [sp, #0]
   1e9b0:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1e9b4:	f104 031c 	add.w	r3, r4, #28
   1e9b8:	f7fc fdbc 	bl	1b534 <lll_chan_sel_1>
   1e9bc:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1e9be:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   1e9c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1e9c4:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   1e9c8:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1e9ca:	428a      	cmp	r2, r1
   1e9cc:	bf28      	it	cs
   1e9ce:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   1e9d0:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   1e9d2:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   1e9d4:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   1e9d6:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   1e9d8:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1e9da:	63a6      	str	r6, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   1e9dc:	f000 fb30 	bl	1f040 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e9e0:	4630      	mov	r0, r6
   1e9e2:	f000 fb7f 	bl	1f0e4 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1e9e6:	4620      	mov	r0, r4
   1e9e8:	f7ff fcc2 	bl	1e370 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1e9ec:	f104 0008 	add.w	r0, r4, #8
   1e9f0:	f000 fb96 	bl	1f120 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1e9f4:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1e9f6:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   1e9f8:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1e9fa:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1e9fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1ea00:	4319      	orrs	r1, r3
   1ea02:	f240 605b 	movw	r0, #1627	; 0x65b
   1ea06:	f000 fc47 	bl	1f298 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1ea0a:	4638      	mov	r0, r7
   1ea0c:	f7fe fa30 	bl	1ce70 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1ea10:	4621      	mov	r1, r4
   1ea12:	484a      	ldr	r0, [pc, #296]	; (1eb3c <prepare_cb+0x1cc>)
   1ea14:	f000 faf4 	bl	1f000 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1ea18:	2096      	movs	r0, #150	; 0x96
   1ea1a:	f000 fcf3 	bl	1f404 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1ea1e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1ea22:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1ea26:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1ea2a:	4631      	mov	r1, r6
   1ea2c:	f002 0207 	and.w	r2, r2, #7
   1ea30:	f000 0007 	and.w	r0, r0, #7
   1ea34:	f000 fc5c 	bl	1f2f0 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1ea38:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1ea3c:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1ea3e:	4640      	mov	r0, r8
   1ea40:	f7fe f9fa 	bl	1ce38 <lll_evt_offset_get>
   1ea44:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1ea46:	686a      	ldr	r2, [r5, #4]
   1ea48:	f107 0109 	add.w	r1, r7, #9
   1ea4c:	4630      	mov	r0, r6
   1ea4e:	f000 fce5 	bl	1f41c <radio_tmr_start>
   1ea52:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1ea54:	f000 fdb0 	bl	1f5b8 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1ea58:	4630      	mov	r0, r6
   1ea5a:	f000 fdc7 	bl	1f5ec <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1ea5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   1ea60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1ea62:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1ea66:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   1ea68:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1ea6c:	f000 0007 	and.w	r0, r0, #7
   1ea70:	2101      	movs	r1, #1
	hcto = remainder_us +
   1ea72:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1ea74:	f000 fbb2 	bl	1f1dc <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1ea78:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   1ea7c:	f002 0207 	and.w	r2, r2, #7
   1ea80:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1ea82:	4405      	add	r5, r0
   1ea84:	d03f      	beq.n	1eb06 <prepare_cb+0x196>
		return 40;
   1ea86:	2a04      	cmp	r2, #4
   1ea88:	bf0c      	ite	eq
   1ea8a:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1ea8e:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1ea90:	4610      	mov	r0, r2
   1ea92:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1ea94:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1ea96:	f000 fba3 	bl	1f1e0 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1ea9a:	4428      	add	r0, r5
   1ea9c:	f000 fd7e 	bl	1f59c <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1eaa0:	7c21      	ldrb	r1, [r4, #16]
   1eaa2:	3105      	adds	r1, #5
   1eaa4:	463a      	mov	r2, r7
   1eaa6:	4640      	mov	r0, r8
   1eaa8:	b2c9      	uxtb	r1, r1
   1eaaa:	f7fe f9cf 	bl	1ce4c <lll_preempt_calc>
   1eaae:	b1a0      	cbz	r0, 1eada <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1eab0:	4823      	ldr	r0, [pc, #140]	; (1eb40 <prepare_cb+0x1d0>)
   1eab2:	4621      	mov	r1, r4
   1eab4:	f000 faa4 	bl	1f000 <radio_isr_set>
		radio_disable();
   1eab8:	f000 fbac 	bl	1f214 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1eabc:	2000      	movs	r0, #0
   1eabe:	b002      	add	sp, #8
   1eac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1eac4:	4410      	add	r0, r2
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1eac6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1eac8:	b280      	uxth	r0, r0
   1eaca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1eace:	f104 021c 	add.w	r2, r4, #28
   1ead2:	f7fc fd6b 	bl	1b5ac <lll_chan_sel_2>
   1ead6:	4607      	mov	r7, r0
   1ead8:	e771      	b.n	1e9be <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   1eada:	4620      	mov	r0, r4
   1eadc:	f7fe f94a 	bl	1cd74 <lll_prepare_done>
		LL_ASSERT(!ret);
   1eae0:	2800      	cmp	r0, #0
   1eae2:	d0eb      	beq.n	1eabc <prepare_cb+0x14c>
   1eae4:	4a17      	ldr	r2, [pc, #92]	; (1eb44 <prepare_cb+0x1d4>)
   1eae6:	4918      	ldr	r1, [pc, #96]	; (1eb48 <prepare_cb+0x1d8>)
   1eae8:	4818      	ldr	r0, [pc, #96]	; (1eb4c <prepare_cb+0x1dc>)
   1eaea:	f240 1313 	movw	r3, #275	; 0x113
   1eaee:	f005 fce1 	bl	244b4 <printk>
   1eaf2:	4040      	eors	r0, r0
   1eaf4:	f380 8811 	msr	BASEPRI, r0
   1eaf8:	f04f 0003 	mov.w	r0, #3
   1eafc:	df02      	svc	2
}
   1eafe:	2000      	movs	r0, #0
   1eb00:	b002      	add	sp, #8
   1eb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1eb06:	2318      	movs	r3, #24
   1eb08:	e7c2      	b.n	1ea90 <prepare_cb+0x120>
		err = lll_hfclock_off();
   1eb0a:	f7fe fab5 	bl	1d078 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1eb0e:	2800      	cmp	r0, #0
   1eb10:	db06      	blt.n	1eb20 <prepare_cb+0x1b0>
		lll_done(NULL);
   1eb12:	2000      	movs	r0, #0
   1eb14:	f7fe f930 	bl	1cd78 <lll_done>
}
   1eb18:	2000      	movs	r0, #0
   1eb1a:	b002      	add	sp, #8
   1eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   1eb20:	4a08      	ldr	r2, [pc, #32]	; (1eb44 <prepare_cb+0x1d4>)
   1eb22:	490b      	ldr	r1, [pc, #44]	; (1eb50 <prepare_cb+0x1e0>)
   1eb24:	4809      	ldr	r0, [pc, #36]	; (1eb4c <prepare_cb+0x1dc>)
   1eb26:	237d      	movs	r3, #125	; 0x7d
   1eb28:	f005 fcc4 	bl	244b4 <printk>
   1eb2c:	4040      	eors	r0, r0
   1eb2e:	f380 8811 	msr	BASEPRI, r0
   1eb32:	f04f 0003 	mov.w	r0, #3
   1eb36:	df02      	svc	2
   1eb38:	e7eb      	b.n	1eb12 <prepare_cb+0x1a2>
   1eb3a:	bf00      	nop
   1eb3c:	0001e5fd 	.word	0x0001e5fd
   1eb40:	0001cfa5 	.word	0x0001cfa5
   1eb44:	0002f2a0 	.word	0x0002f2a0
   1eb48:	0002e974 	.word	0x0002e974
   1eb4c:	0002e80c 	.word	0x0002e80c
   1eb50:	0002f148 	.word	0x0002f148

0001eb54 <lll_slave_prepare>:
{
   1eb54:	b570      	push	{r4, r5, r6, lr}
   1eb56:	b082      	sub	sp, #8
   1eb58:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1eb5a:	f7fe fa75 	bl	1d048 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1eb5e:	2800      	cmp	r0, #0
   1eb60:	db29      	blt.n	1ebb6 <lll_slave_prepare+0x62>
	lll = p->param;
   1eb62:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   1eb64:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   1eb66:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   1eb68:	6b0d      	ldr	r5, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1eb6a:	8ace      	ldrh	r6, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1eb6c:	4a18      	ldr	r2, [pc, #96]	; (1ebd0 <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   1eb6e:	3301      	adds	r3, #1
   1eb70:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1eb72:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   1eb76:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1eb78:	42a8      	cmp	r0, r5
   1eb7a:	bf28      	it	cs
   1eb7c:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   1eb7e:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   1eb80:	6308      	str	r0, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1eb82:	82cb      	strh	r3, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1eb84:	4813      	ldr	r0, [pc, #76]	; (1ebd4 <lll_slave_prepare+0x80>)
   1eb86:	4914      	ldr	r1, [pc, #80]	; (1ebd8 <lll_slave_prepare+0x84>)
   1eb88:	9400      	str	r4, [sp, #0]
   1eb8a:	2300      	movs	r3, #0
   1eb8c:	f7fe f868 	bl	1cc60 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1eb90:	b108      	cbz	r0, 1eb96 <lll_slave_prepare+0x42>
   1eb92:	3044      	adds	r0, #68	; 0x44
   1eb94:	d101      	bne.n	1eb9a <lll_slave_prepare+0x46>
}
   1eb96:	b002      	add	sp, #8
   1eb98:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1eb9a:	4a10      	ldr	r2, [pc, #64]	; (1ebdc <lll_slave_prepare+0x88>)
   1eb9c:	4910      	ldr	r1, [pc, #64]	; (1ebe0 <lll_slave_prepare+0x8c>)
   1eb9e:	4811      	ldr	r0, [pc, #68]	; (1ebe4 <lll_slave_prepare+0x90>)
   1eba0:	235f      	movs	r3, #95	; 0x5f
   1eba2:	f005 fc87 	bl	244b4 <printk>
   1eba6:	4040      	eors	r0, r0
   1eba8:	f380 8811 	msr	BASEPRI, r0
   1ebac:	f04f 0003 	mov.w	r0, #3
   1ebb0:	df02      	svc	2
}
   1ebb2:	b002      	add	sp, #8
   1ebb4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   1ebb6:	4a09      	ldr	r2, [pc, #36]	; (1ebdc <lll_slave_prepare+0x88>)
   1ebb8:	490b      	ldr	r1, [pc, #44]	; (1ebe8 <lll_slave_prepare+0x94>)
   1ebba:	480a      	ldr	r0, [pc, #40]	; (1ebe4 <lll_slave_prepare+0x90>)
   1ebbc:	2348      	movs	r3, #72	; 0x48
   1ebbe:	f005 fc79 	bl	244b4 <printk>
   1ebc2:	4040      	eors	r0, r0
   1ebc4:	f380 8811 	msr	BASEPRI, r0
   1ebc8:	f04f 0003 	mov.w	r0, #3
   1ebcc:	df02      	svc	2
   1ebce:	e7c8      	b.n	1eb62 <lll_slave_prepare+0xe>
   1ebd0:	0001e971 	.word	0x0001e971
   1ebd4:	0001ce31 	.word	0x0001ce31
   1ebd8:	0001e319 	.word	0x0001e319
   1ebdc:	0002f2a0 	.word	0x0002f2a0
   1ebe0:	0002f1cc 	.word	0x0002f1cc
   1ebe4:	0002e80c 	.word	0x0002e80c
   1ebe8:	0002f148 	.word	0x0002f148

0001ebec <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1ebec:	4b05      	ldr	r3, [pc, #20]	; (1ec04 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1ebee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ebf2:	2100      	movs	r1, #0
   1ebf4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1ebf8:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1ebfc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1ec00:	4770      	bx	lr
   1ec02:	bf00      	nop
   1ec04:	4000b000 	.word	0x4000b000

0001ec08 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1ec08:	4b05      	ldr	r3, [pc, #20]	; (1ec20 <cntr_start+0x18>)
   1ec0a:	7818      	ldrb	r0, [r3, #0]
   1ec0c:	1c42      	adds	r2, r0, #1
   1ec0e:	701a      	strb	r2, [r3, #0]
   1ec10:	b918      	cbnz	r0, 1ec1a <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ec12:	4b04      	ldr	r3, [pc, #16]	; (1ec24 <cntr_start+0x1c>)
   1ec14:	2201      	movs	r2, #1
   1ec16:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1ec18:	4770      	bx	lr
		return 1;
   1ec1a:	2001      	movs	r0, #1
}
   1ec1c:	4770      	bx	lr
   1ec1e:	bf00      	nop
   1ec20:	20009160 	.word	0x20009160
   1ec24:	4000b000 	.word	0x4000b000

0001ec28 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1ec28:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1ec2a:	4c0d      	ldr	r4, [pc, #52]	; (1ec60 <cntr_stop+0x38>)
   1ec2c:	7820      	ldrb	r0, [r4, #0]
   1ec2e:	b148      	cbz	r0, 1ec44 <cntr_stop+0x1c>

	if (--_refcount) {
   1ec30:	3801      	subs	r0, #1
   1ec32:	b2c0      	uxtb	r0, r0
   1ec34:	7020      	strb	r0, [r4, #0]
   1ec36:	b918      	cbnz	r0, 1ec40 <cntr_stop+0x18>
   1ec38:	4b0a      	ldr	r3, [pc, #40]	; (1ec64 <cntr_stop+0x3c>)
   1ec3a:	2201      	movs	r2, #1
   1ec3c:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1ec3e:	bd10      	pop	{r4, pc}
		return 1;
   1ec40:	2001      	movs	r0, #1
}
   1ec42:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1ec44:	4a08      	ldr	r2, [pc, #32]	; (1ec68 <cntr_stop+0x40>)
   1ec46:	4909      	ldr	r1, [pc, #36]	; (1ec6c <cntr_stop+0x44>)
   1ec48:	4809      	ldr	r0, [pc, #36]	; (1ec70 <cntr_stop+0x48>)
   1ec4a:	232e      	movs	r3, #46	; 0x2e
   1ec4c:	f005 fc32 	bl	244b4 <printk>
   1ec50:	4040      	eors	r0, r0
   1ec52:	f380 8811 	msr	BASEPRI, r0
   1ec56:	f04f 0003 	mov.w	r0, #3
   1ec5a:	df02      	svc	2
   1ec5c:	7820      	ldrb	r0, [r4, #0]
   1ec5e:	e7e7      	b.n	1ec30 <cntr_stop+0x8>
   1ec60:	20009160 	.word	0x20009160
   1ec64:	4000b004 	.word	0x4000b004
   1ec68:	0002f2ec 	.word	0x0002f2ec
   1ec6c:	0002f338 	.word	0x0002f338
   1ec70:	0002e80c 	.word	0x0002e80c

0001ec74 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1ec74:	4b01      	ldr	r3, [pc, #4]	; (1ec7c <cntr_cnt_get+0x8>)
   1ec76:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1ec7a:	4770      	bx	lr
   1ec7c:	4000b000 	.word	0x4000b000

0001ec80 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1ec80:	4b02      	ldr	r3, [pc, #8]	; (1ec8c <cntr_cmp_set+0xc>)
   1ec82:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1ec86:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1ec8a:	4770      	bx	lr
   1ec8c:	4000b000 	.word	0x4000b000

0001ec90 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1ec90:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1ec92:	4b12      	ldr	r3, [pc, #72]	; (1ecdc <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec94:	4d12      	ldr	r5, [pc, #72]	; (1ece0 <do_ecb+0x50>)
   1ec96:	2601      	movs	r6, #1
   1ec98:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1ec9a:	2100      	movs	r1, #0
   1ec9c:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1ec9e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1eca2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1eca6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1ecaa:	601c      	str	r4, [r3, #0]
}
   1ecac:	e005      	b.n	1ecba <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1ecae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1ecb2:	b932      	cbnz	r2, 1ecc2 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1ecb4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1ecb8:	b11a      	cbz	r2, 1ecc2 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1ecba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1ecbe:	2a00      	cmp	r2, #0
   1ecc0:	d0f5      	beq.n	1ecae <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecc2:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1ecc4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1ecc8:	2a00      	cmp	r2, #0
   1ecca:	d1e7      	bne.n	1ec9c <do_ecb+0xc>
   1eccc:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1ecd0:	2f00      	cmp	r7, #0
   1ecd2:	d0e3      	beq.n	1ec9c <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   1ecd4:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1ecd6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1ecda:	4770      	bx	lr
   1ecdc:	4000e000 	.word	0x4000e000
   1ece0:	4000e004 	.word	0x4000e004

0001ece4 <ecb_encrypt_be>:

void ecb_encrypt_be(uint8_t const *const key_be, uint8_t const *const clear_text_be,
		    uint8_t * const cipher_text_be)
{
   1ece4:	b530      	push	{r4, r5, lr}
   1ece6:	b08d      	sub	sp, #52	; 0x34
   1ece8:	460d      	mov	r5, r1
   1ecea:	4614      	mov	r4, r2
	struct ecb_param ecb;

	memcpy(&ecb.key[0], key_be, sizeof(ecb.key));
   1ecec:	4601      	mov	r1, r0
   1ecee:	2210      	movs	r2, #16
   1ecf0:	4668      	mov	r0, sp
   1ecf2:	f007 fe56 	bl	269a2 <memcpy>
	memcpy(&ecb.clear_text[0], clear_text_be, sizeof(ecb.clear_text));
   1ecf6:	2210      	movs	r2, #16
   1ecf8:	4629      	mov	r1, r5
   1ecfa:	eb0d 0002 	add.w	r0, sp, r2
   1ecfe:	f007 fe50 	bl	269a2 <memcpy>

	do_ecb(&ecb);
   1ed02:	4668      	mov	r0, sp
   1ed04:	f7ff ffc4 	bl	1ec90 <do_ecb>

	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
   1ed08:	4620      	mov	r0, r4
   1ed0a:	2210      	movs	r2, #16
   1ed0c:	a908      	add	r1, sp, #32
   1ed0e:	f007 fe48 	bl	269a2 <memcpy>
}
   1ed12:	b00d      	add	sp, #52	; 0x34
   1ed14:	bd30      	pop	{r4, r5, pc}
   1ed16:	bf00      	nop

0001ed18 <ecb_encrypt>:

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1ed18:	b570      	push	{r4, r5, r6, lr}
   1ed1a:	b08c      	sub	sp, #48	; 0x30
   1ed1c:	460e      	mov	r6, r1
   1ed1e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ed20:	4601      	mov	r1, r0
   1ed22:	2210      	movs	r2, #16
   1ed24:	4668      	mov	r0, sp
{
   1ed26:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ed28:	f7f4 f956 	bl	12fd8 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1ed2c:	2210      	movs	r2, #16
   1ed2e:	eb0d 0002 	add.w	r0, sp, r2
   1ed32:	4631      	mov	r1, r6
   1ed34:	f7f4 f950 	bl	12fd8 <mem_rcopy>

	do_ecb(&ecb);
   1ed38:	4668      	mov	r0, sp
   1ed3a:	f7ff ffa9 	bl	1ec90 <do_ecb>

	if (cipher_text_le) {
   1ed3e:	b125      	cbz	r5, 1ed4a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1ed40:	4628      	mov	r0, r5
   1ed42:	2210      	movs	r2, #16
   1ed44:	a908      	add	r1, sp, #32
   1ed46:	f7f4 f947 	bl	12fd8 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1ed4a:	b124      	cbz	r4, 1ed56 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1ed4c:	4620      	mov	r0, r4
   1ed4e:	2210      	movs	r2, #16
   1ed50:	a908      	add	r1, sp, #32
   1ed52:	f007 fe26 	bl	269a2 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1ed56:	b00c      	add	sp, #48	; 0x30
   1ed58:	bd70      	pop	{r4, r5, r6, pc}
   1ed5a:	bf00      	nop

0001ed5c <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1ed5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1ed60:	4e94      	ldr	r6, [pc, #592]	; (1efb4 <sw_switch.isra.0+0x258>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ed62:	f8df 8268 	ldr.w	r8, [pc, #616]	; 1efcc <sw_switch.isra.0+0x270>
   1ed66:	f996 3000 	ldrsb.w	r3, [r6]
   1ed6a:	4c93      	ldr	r4, [pc, #588]	; (1efb8 <sw_switch.isra.0+0x25c>)
   1ed6c:	7835      	ldrb	r5, [r6, #0]
   1ed6e:	f8c8 4560 	str.w	r4, [r8, #1376]	; 0x560
   1ed72:	f103 040b 	add.w	r4, r3, #11
   1ed76:	b2e4      	uxtb	r4, r4
   1ed78:	00e4      	lsls	r4, r4, #3
   1ed7a:	f104 4780 	add.w	r7, r4, #1073741824	; 0x40000000
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ed7e:	f8df e250 	ldr.w	lr, [pc, #592]	; 1efd0 <sw_switch.isra.0+0x274>
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ed82:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
   1ed86:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
   1ed8a:	f10c 4480 	add.w	r4, ip, #1073741824	; 0x40000000
   1ed8e:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ed92:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ed96:	f8c8 4564 	str.w	r4, [r8, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ed9a:	f8c7 e510 	str.w	lr, [r7, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   1ed9e:	b308      	cbz	r0, 1ede4 <sw_switch.isra.0+0x88>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1eda0:	2a02      	cmp	r2, #2
   1eda2:	ea4f 0885 	mov.w	r8, r5, lsl #2
   1eda6:	d057      	beq.n	1ee58 <sw_switch.isra.0+0xfc>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   1eda8:	f24a 543c 	movw	r4, #42300	; 0xa53c
   1edac:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   1edb0:	2a04      	cmp	r2, #4
   1edb2:	bf18      	it	ne
   1edb4:	4604      	movne	r4, r0
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1edb6:	2902      	cmp	r1, #2
   1edb8:	f000 80c7 	beq.w	1ef4a <sw_switch.isra.0+0x1ee>
   1edbc:	2904      	cmp	r1, #4
   1edbe:	f040 80bc 	bne.w	1ef3a <sw_switch.isra.0+0x1de>
   1edc2:	487e      	ldr	r0, [pc, #504]	; (1efbc <sw_switch.isra.0+0x260>)
   1edc4:	f504 44eb 	add.w	r4, r4, #30080	; 0x7580
   1edc8:	3414      	adds	r4, #20
   1edca:	fba0 0404 	umull	r0, r4, r0, r4
   1edce:	09a4      	lsrs	r4, r4, #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1edd0:	487b      	ldr	r0, [pc, #492]	; (1efc0 <sw_switch.isra.0+0x264>)
   1edd2:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
		uint8_t ppi_en =
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   1edd6:	f103 0010 	add.w	r0, r3, #16
		uint8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1edda:	f103 0708 	add.w	r7, r3, #8
		uint8_t ppi_en =
   1edde:	b2c0      	uxtb	r0, r0
		uint8_t ppi_dis =
   1ede0:	b2ff      	uxtb	r7, r7
			    sw_tifs_toggle);

		if (phy_curr & BIT(2)) {
   1ede2:	e04c      	b.n	1ee7e <sw_switch.isra.0+0x122>

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
		if (1) {
			uint8_t ppi_en =
				HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(
   1ede4:	f103 0210 	add.w	r2, r3, #16
					sw_tifs_toggle);
			uint8_t ppi_dis =
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1ede8:	3308      	adds	r3, #8
   1edea:	b2d2      	uxtb	r2, r2
   1edec:	b2db      	uxtb	r3, r3
   1edee:	00d2      	lsls	r2, r2, #3
   1edf0:	00db      	lsls	r3, r3, #3
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1edf2:	4974      	ldr	r1, [pc, #464]	; (1efc4 <sw_switch.isra.0+0x268>)
   1edf4:	4c74      	ldr	r4, [pc, #464]	; (1efc8 <sw_switch.isra.0+0x26c>)
   1edf6:	f8c7 4514 	str.w	r4, [r7, #1300]	; 0x514
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1edfa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1edfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ee02:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
   1ee06:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1ee0a:	4461      	add	r1, ip
		ppi_en) = 0;
   1ee0c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
		delay = HAL_RADIO_NS2US_CEIL(
   1ee10:	2428      	movs	r4, #40	; 0x28
		ppi_en) = 0;
   1ee12:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
		ppi_dis) =
   1ee16:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
		ppi_dis) =
   1ee1a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   1ee1e:	00ab      	lsls	r3, r5, #2
   1ee20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ee24:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   1ee28:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   1ee2c:	42a2      	cmp	r2, r4
   1ee2e:	d80d      	bhi.n	1ee4c <sw_switch.isra.0+0xf0>

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1ee30:	2201      	movs	r2, #1
   1ee32:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   1ee36:	4b65      	ldr	r3, [pc, #404]	; (1efcc <sw_switch.isra.0+0x270>)
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   1ee38:	3501      	adds	r5, #1
	sw_tifs_toggle &= 1;
   1ee3a:	f005 0501 	and.w	r5, r5, #1
   1ee3e:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1ee42:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1ee46:	7035      	strb	r5, [r6, #0]
}
   1ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1ee4c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1ee50:	1b14      	subs	r4, r2, r4
   1ee52:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
}
   1ee56:	e7ee      	b.n	1ee36 <sw_switch.isra.0+0xda>
   1ee58:	2902      	cmp	r1, #2
   1ee5a:	f000 80a0 	beq.w	1ef9e <sw_switch.isra.0+0x242>
   1ee5e:	2904      	cmp	r1, #4
   1ee60:	f000 809b 	beq.w	1ef9a <sw_switch.isra.0+0x23e>
   1ee64:	2431      	movs	r4, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ee66:	4856      	ldr	r0, [pc, #344]	; (1efc0 <sw_switch.isra.0+0x264>)
   1ee68:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   1ee6c:	f011 0f04 	tst.w	r1, #4
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   1ee70:	f103 0010 	add.w	r0, r3, #16
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1ee74:	f103 0708 	add.w	r7, r3, #8
		uint8_t ppi_en =
   1ee78:	b2c0      	uxtb	r0, r0
		uint8_t ppi_dis =
   1ee7a:	b2ff      	uxtb	r7, r7
		if (phy_curr & BIT(2)) {
   1ee7c:	d074      	beq.n	1ef68 <sw_switch.isra.0+0x20c>
	switch (phy) {
   1ee7e:	2a02      	cmp	r2, #2
   1ee80:	f000 8088 	beq.w	1ef94 <sw_switch.isra.0+0x238>
   1ee84:	f24a 19b8 	movw	r9, #41400	; 0xa1b8
   1ee88:	f24a 7e30 	movw	lr, #42800	; 0xa730
   1ee8c:	2a04      	cmp	r2, #4
   1ee8e:	bf14      	ite	ne
   1ee90:	464a      	movne	r2, r9
   1ee92:	4672      	moveq	r2, lr
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   1ee94:	3302      	adds	r3, #2
   1ee96:	fa5f f983 	uxtb.w	r9, r3
   1ee9a:	ea4f 0e89 	mov.w	lr, r9, lsl #2
				SW_SWITCH_TIMER->CC[cc];
   1ee9e:	f8df b13c 	ldr.w	fp, [pc, #316]	; 1efdc <sw_switch.isra.0+0x280>
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1eea2:	f8df a118 	ldr.w	sl, [pc, #280]	; 1efbc <sw_switch.isra.0+0x260>
   1eea6:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
				SW_SWITCH_TIMER->CC[cc];
   1eeaa:	f505 73a8 	add.w	r3, r5, #336	; 0x150
   1eeae:	f50e 4e10 	add.w	lr, lr, #36864	; 0x9000
   1eeb2:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   1eeb6:	f8ce 3540 	str.w	r3, [lr, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   1eeba:	f246 0b18 	movw	fp, #24600	; 0x6018
   1eebe:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1eec2:	2904      	cmp	r1, #4
   1eec4:	bf14      	ite	ne
   1eec6:	4619      	movne	r1, r3
   1eec8:	4659      	moveq	r1, fp
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1eeca:	440a      	add	r2, r1
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1eecc:	f8de 3540 	ldr.w	r3, [lr, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1eed0:	fbaa 1202 	umull	r1, r2, sl, r2
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   1eed4:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1eed8:	bf88      	it	hi
   1eeda:	f8de 3540 	ldrhi.w	r3, [lr, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   1eede:	ea4f 1192 	mov.w	r1, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   1eee2:	bf8c      	ite	hi
   1eee4:	1a5b      	subhi	r3, r3, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   1eee6:	2301      	movls	r3, #1
   1eee8:	00c0      	lsls	r0, r0, #3
   1eeea:	00ff      	lsls	r7, r7, #3
   1eeec:	f8ce 3540 	str.w	r3, [lr, #1344]	; 0x540
   1eef0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1eef4:	4b36      	ldr	r3, [pc, #216]	; (1efd0 <sw_switch.isra.0+0x274>)
	    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1eef6:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 1efc4 <sw_switch.isra.0+0x268>
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1eefa:	4936      	ldr	r1, [pc, #216]	; (1efd4 <sw_switch.isra.0+0x278>)
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1eefc:	4a33      	ldr	r2, [pc, #204]	; (1efcc <sw_switch.isra.0+0x270>)
   1eefe:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   1ef02:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   1ef06:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   1ef0a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1ef0e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1efc0 <sw_switch.isra.0+0x264>
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   1ef12:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
	    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1ef16:	44e6      	add	lr, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   1ef18:	f8c0 9514 	str.w	r9, [r0, #1300]	; 0x514
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   1ef1c:	4441      	add	r1, r8
	    ppi_dis)	=
   1ef1e:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1ef22:	482d      	ldr	r0, [pc, #180]	; (1efd8 <sw_switch.isra.0+0x27c>)
	    ppi_dis) =
   1ef24:	f8c7 e514 	str.w	lr, [r7, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1ef28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   1ef2c:	f8c2 05a0 	str.w	r0, [r2, #1440]	; 0x5a0
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   1ef30:	f8c2 15a4 	str.w	r1, [r2, #1444]	; 0x5a4
   1ef34:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1ef38:	e771      	b.n	1ee1e <sw_switch.isra.0+0xc2>
   1ef3a:	4820      	ldr	r0, [pc, #128]	; (1efbc <sw_switch.isra.0+0x260>)
   1ef3c:	f504 541a 	add.w	r4, r4, #9856	; 0x2680
   1ef40:	342c      	adds	r4, #44	; 0x2c
   1ef42:	fba0 0404 	umull	r0, r4, r0, r4
   1ef46:	09a4      	lsrs	r4, r4, #6
   1ef48:	e78d      	b.n	1ee66 <sw_switch.isra.0+0x10a>
		delay = HAL_RADIO_NS2US_ROUND(
   1ef4a:	4a1c      	ldr	r2, [pc, #112]	; (1efbc <sw_switch.isra.0+0x260>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ef4c:	491c      	ldr	r1, [pc, #112]	; (1efc0 <sw_switch.isra.0+0x264>)
   1ef4e:	f8c7 1514 	str.w	r1, [r7, #1300]	; 0x514
   1ef52:	f504 54ab 	add.w	r4, r4, #5472	; 0x1560
   1ef56:	341c      	adds	r4, #28
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   1ef58:	f103 0010 	add.w	r0, r3, #16
		delay = HAL_RADIO_NS2US_ROUND(
   1ef5c:	fba2 2404 	umull	r2, r4, r2, r4
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1ef60:	3308      	adds	r3, #8
		delay = HAL_RADIO_NS2US_ROUND(
   1ef62:	09a4      	lsrs	r4, r4, #6
		uint8_t ppi_en =
   1ef64:	b2c0      	uxtb	r0, r0
		uint8_t ppi_dis =
   1ef66:	b2df      	uxtb	r7, r3
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1ef68:	00c0      	lsls	r0, r0, #3
   1ef6a:	00ff      	lsls	r7, r7, #3
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1ef6c:	4b15      	ldr	r3, [pc, #84]	; (1efc4 <sw_switch.isra.0+0x268>)
   1ef6e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1ef72:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   1ef76:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   1ef7a:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
		ppi_en) = 0;
   1ef7e:	2200      	movs	r2, #0
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   1ef80:	4463      	add	r3, ip
		ppi_en) = 0;
   1ef82:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
		ppi_en) = 0;
   1ef86:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
		ppi_dis) =
   1ef8a:	f8c7 e510 	str.w	lr, [r7, #1296]	; 0x510
		ppi_dis) =
   1ef8e:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			group_index);
}
   1ef92:	e744      	b.n	1ee1e <sw_switch.isra.0+0xc2>
	switch (phy) {
   1ef94:	f649 6234 	movw	r2, #40500	; 0x9e34
   1ef98:	e77c      	b.n	1ee94 <sw_switch.isra.0+0x138>
	switch (phy) {
   1ef9a:	2446      	movs	r4, #70	; 0x46
   1ef9c:	e718      	b.n	1edd0 <sw_switch.isra.0+0x74>
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   1ef9e:	f103 0010 	add.w	r0, r3, #16
   1efa2:	4a07      	ldr	r2, [pc, #28]	; (1efc0 <sw_switch.isra.0+0x264>)
   1efa4:	f8c7 2514 	str.w	r2, [r7, #1300]	; 0x514
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1efa8:	3308      	adds	r3, #8
		uint8_t ppi_en =
   1efaa:	b2c0      	uxtb	r0, r0
		uint8_t ppi_dis =
   1efac:	b2df      	uxtb	r7, r3
   1efae:	242d      	movs	r4, #45	; 0x2d
   1efb0:	e7da      	b.n	1ef68 <sw_switch.isra.0+0x20c>
   1efb2:	bf00      	nop
   1efb4:	20009161 	.word	0x20009161
   1efb8:	4000110c 	.word	0x4000110c
   1efbc:	10624dd3 	.word	0x10624dd3
   1efc0:	40001000 	.word	0x40001000
   1efc4:	4001f004 	.word	0x4001f004
   1efc8:	40001004 	.word	0x40001004
   1efcc:	4001f000 	.word	0x4001f000
   1efd0:	40009140 	.word	0x40009140
   1efd4:	40009040 	.word	0x40009040
   1efd8:	40001150 	.word	0x40001150
   1efdc:	40009000 	.word	0x40009000

0001efe0 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1efe0:	4b04      	ldr	r3, [pc, #16]	; (1eff4 <isr_radio+0x14>)
   1efe2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1efe6:	b123      	cbz	r3, 1eff2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1efe8:	4a03      	ldr	r2, [pc, #12]	; (1eff8 <isr_radio+0x18>)
   1efea:	4b04      	ldr	r3, [pc, #16]	; (1effc <isr_radio+0x1c>)
   1efec:	6810      	ldr	r0, [r2, #0]
   1efee:	681b      	ldr	r3, [r3, #0]
   1eff0:	4718      	bx	r3
}
   1eff2:	4770      	bx	lr
   1eff4:	40001000 	.word	0x40001000
   1eff8:	20003e88 	.word	0x20003e88
   1effc:	20003e84 	.word	0x20003e84

0001f000 <radio_isr_set>:
{
   1f000:	b538      	push	{r3, r4, r5, lr}
   1f002:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1f004:	2001      	movs	r0, #1
{
   1f006:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1f008:	f7e7 fa94 	bl	6534 <arch_irq_disable>
	isr_cb_param = param;
   1f00c:	4a08      	ldr	r2, [pc, #32]	; (1f030 <radio_isr_set+0x30>)
	isr_cb = cb;
   1f00e:	4809      	ldr	r0, [pc, #36]	; (1f034 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f010:	4b09      	ldr	r3, [pc, #36]	; (1f038 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1f012:	490a      	ldr	r1, [pc, #40]	; (1f03c <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1f014:	6015      	str	r5, [r2, #0]
   1f016:	2510      	movs	r5, #16
   1f018:	2202      	movs	r2, #2
	isr_cb = cb;
   1f01a:	6004      	str	r4, [r0, #0]
   1f01c:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1f020:	2001      	movs	r0, #1
   1f022:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1f026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1f02a:	f7e7 ba73 	b.w	6514 <arch_irq_enable>
   1f02e:	bf00      	nop
   1f030:	20003e88 	.word	0x20003e88
   1f034:	20003e84 	.word	0x20003e84
   1f038:	e000e100 	.word	0xe000e100
   1f03c:	40001000 	.word	0x40001000

0001f040 <radio_reset>:
{
   1f040:	b538      	push	{r3, r4, r5, lr}
	irq_disable(RADIO_IRQn);
   1f042:	2001      	movs	r0, #1
   1f044:	f7e7 fa76 	bl	6534 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1f048:	4b0b      	ldr	r3, [pc, #44]	; (1f078 <radio_reset+0x38>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1f04a:	490c      	ldr	r1, [pc, #48]	; (1f07c <radio_reset+0x3c>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1f04c:	4a0c      	ldr	r2, [pc, #48]	; (1f080 <radio_reset+0x40>)
   1f04e:	4c0d      	ldr	r4, [pc, #52]	; (1f084 <radio_reset+0x44>)
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1f050:	480d      	ldr	r0, [pc, #52]	; (1f088 <radio_reset+0x48>)
   1f052:	2500      	movs	r5, #0
   1f054:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1f058:	2501      	movs	r5, #1
   1f05a:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   1f05e:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   1f060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1f064:	f023 0301 	bic.w	r3, r3, #1
   1f068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1f06c:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1f06e:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1f072:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1f076:	bd38      	pop	{r3, r4, r5, pc}
   1f078:	40001000 	.word	0x40001000
   1f07c:	40001774 	.word	0x40001774
   1f080:	4001f000 	.word	0x4001f000
   1f084:	00010900 	.word	0x00010900
   1f088:	00021200 	.word	0x00021200

0001f08c <radio_phy_set>:
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1f08c:	4a13      	ldr	r2, [pc, #76]	; (1f0dc <radio_phy_set+0x50>)
	switch (phy) {
   1f08e:	2802      	cmp	r0, #2
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1f090:	6813      	ldr	r3, [r2, #0]
	switch (phy) {
   1f092:	d00f      	beq.n	1f0b4 <radio_phy_set+0x28>
   1f094:	2804      	cmp	r0, #4
   1f096:	d012      	beq.n	1f0be <radio_phy_set+0x32>
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1f098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1f09c:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   1f09e:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1f0a0:	4b0f      	ldr	r3, [pc, #60]	; (1f0e0 <radio_phy_set+0x54>)
   1f0a2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1f0a6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1f0aa:	f042 0201 	orr.w	r2, r2, #1
   1f0ae:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1f0b2:	4770      	bx	lr
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1f0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1f0b8:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1f0ba:	2104      	movs	r1, #4
		break;
   1f0bc:	e7f0      	b.n	1f0a0 <radio_phy_set+0x14>
		*(volatile uint32_t *)0x4000173c |= 0x80000000;
   1f0be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1f0c2:	6013      	str	r3, [r2, #0]
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1f0c4:	6813      	ldr	r3, [r2, #0]
   1f0c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1f0ca:	f001 0101 	and.w	r1, r1, #1
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   1f0ce:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   1f0d2:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile uint32_t *)0x4000173c =
   1f0d6:	6013      	str	r3, [r2, #0]
		break;
   1f0d8:	e7e2      	b.n	1f0a0 <radio_phy_set+0x14>
   1f0da:	bf00      	nop
   1f0dc:	4000173c 	.word	0x4000173c
   1f0e0:	40001000 	.word	0x40001000

0001f0e4 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1f0e4:	4b01      	ldr	r3, [pc, #4]	; (1f0ec <radio_tx_power_set+0x8>)
   1f0e6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1f0ea:	4770      	bx	lr
   1f0ec:	40001000 	.word	0x40001000

0001f0f0 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1f0f0:	4b01      	ldr	r3, [pc, #4]	; (1f0f8 <radio_freq_chan_set+0x8>)
   1f0f2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1f0f6:	4770      	bx	lr
   1f0f8:	40001000 	.word	0x40001000

0001f0fc <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1f0fc:	4b07      	ldr	r3, [pc, #28]	; (1f11c <radio_whiten_iv_set+0x20>)
   1f0fe:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1f102:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1f106:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1f10a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1f10e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1f112:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1f116:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1f11a:	4770      	bx	lr
   1f11c:	40001000 	.word	0x40001000

0001f120 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1f120:	4a0b      	ldr	r2, [pc, #44]	; (1f150 <radio_aa_set+0x30>)
   1f122:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1f124:	2301      	movs	r3, #1
{
   1f126:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1f128:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1f12c:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1f130:	78c3      	ldrb	r3, [r0, #3]
   1f132:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1f136:	7843      	ldrb	r3, [r0, #1]
   1f138:	7884      	ldrb	r4, [r0, #2]
   1f13a:	7801      	ldrb	r1, [r0, #0]
   1f13c:	041b      	lsls	r3, r3, #16
   1f13e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1f142:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1f146:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1f148:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1f14c:	4770      	bx	lr
   1f14e:	bf00      	nop
   1f150:	40001000 	.word	0x40001000

0001f154 <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   1f154:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   1f158:	2b02      	cmp	r3, #2
{
   1f15a:	b410      	push	{r4}
	uint8_t dc = flags & 0x01; /* Adv or Data channel */
   1f15c:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   1f160:	d024      	beq.n	1f1ac <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   1f162:	2b04      	cmp	r3, #4
   1f164:	bf14      	ite	ne
   1f166:	2400      	movne	r4, #0
   1f168:	f04f 44c7 	moveq.w	r4, #1669332992	; 0x63800000
	if (dc) {
   1f16c:	b10a      	cbz	r2, 1f172 <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1f16e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1f172:	f1c0 0308 	rsb	r3, r0, #8
   1f176:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1f178:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1f17c:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1f17e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1f182:	4a0d      	ldr	r2, [pc, #52]	; (1f1b8 <radio_pkt_configure+0x64>)
}
   1f184:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1f186:	4303      	orrs	r3, r0
   1f188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1f18c:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1f190:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1f194:	4809      	ldr	r0, [pc, #36]	; (1f1bc <radio_pkt_configure+0x68>)
   1f196:	4018      	ands	r0, r3
   1f198:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1f19c:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1f1a0:	4319      	orrs	r1, r3
   1f1a2:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1f1a6:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1f1aa:	4770      	bx	lr
	switch (phy) {
   1f1ac:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if (dc) {
   1f1b0:	2a00      	cmp	r2, #0
   1f1b2:	d0de      	beq.n	1f172 <radio_pkt_configure+0x1e>
   1f1b4:	e7db      	b.n	1f16e <radio_pkt_configure+0x1a>
   1f1b6:	bf00      	nop
   1f1b8:	40001000 	.word	0x40001000
   1f1bc:	fef80000 	.word	0xfef80000

0001f1c0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1f1c0:	4b01      	ldr	r3, [pc, #4]	; (1f1c8 <radio_pkt_rx_set+0x8>)
   1f1c2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1f1c6:	4770      	bx	lr
   1f1c8:	40001000 	.word	0x40001000

0001f1cc <radio_pkt_tx_set>:
   1f1cc:	4b01      	ldr	r3, [pc, #4]	; (1f1d4 <radio_pkt_tx_set+0x8>)
   1f1ce:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1f1d2:	4770      	bx	lr
   1f1d4:	40001000 	.word	0x40001000

0001f1d8 <radio_tx_chain_delay_get>:
}
   1f1d8:	2001      	movs	r0, #1
   1f1da:	4770      	bx	lr

0001f1dc <radio_rx_ready_delay_get>:
}
   1f1dc:	2029      	movs	r0, #41	; 0x29
   1f1de:	4770      	bx	lr

0001f1e0 <radio_rx_chain_delay_get>:
	switch (phy) {
   1f1e0:	2802      	cmp	r0, #2
   1f1e2:	d009      	beq.n	1f1f8 <radio_rx_chain_delay_get+0x18>
   1f1e4:	2804      	cmp	r0, #4
   1f1e6:	d105      	bne.n	1f1f4 <radio_rx_chain_delay_get+0x14>
		if (flags & 0x01) {
   1f1e8:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   1f1ec:	bf14      	ite	ne
   1f1ee:	201e      	movne	r0, #30
   1f1f0:	2019      	moveq	r0, #25
   1f1f2:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   1f1f4:	200a      	movs	r0, #10
}
   1f1f6:	4770      	bx	lr
	switch (phy) {
   1f1f8:	2005      	movs	r0, #5
   1f1fa:	4770      	bx	lr

0001f1fc <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f1fc:	4b01      	ldr	r3, [pc, #4]	; (1f204 <radio_rx_enable+0x8>)
   1f1fe:	2201      	movs	r2, #1
   1f200:	601a      	str	r2, [r3, #0]
}
   1f202:	4770      	bx	lr
   1f204:	40001004 	.word	0x40001004

0001f208 <radio_tx_enable>:
   1f208:	4b01      	ldr	r3, [pc, #4]	; (1f210 <radio_tx_enable+0x8>)
   1f20a:	2201      	movs	r2, #1
   1f20c:	601a      	str	r2, [r3, #0]
}
   1f20e:	4770      	bx	lr
   1f210:	40001000 	.word	0x40001000

0001f214 <radio_disable>:
{
   1f214:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1f216:	4a08      	ldr	r2, [pc, #32]	; (1f238 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   1f218:	4808      	ldr	r0, [pc, #32]	; (1f23c <radio_disable+0x28>)
   1f21a:	4909      	ldr	r1, [pc, #36]	; (1f240 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1f21c:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1f21e:	f44f 6590 	mov.w	r5, #1152	; 0x480
   1f222:	2400      	movs	r4, #0
   1f224:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1f228:	6053      	str	r3, [r2, #4]
   1f22a:	60d3      	str	r3, [r2, #12]
   1f22c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1f230:	bc30      	pop	{r4, r5}
   1f232:	600b      	str	r3, [r1, #0]
   1f234:	4770      	bx	lr
   1f236:	bf00      	nop
   1f238:	4001f000 	.word	0x4001f000
   1f23c:	40001000 	.word	0x40001000
   1f240:	40001010 	.word	0x40001010

0001f244 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1f244:	4b04      	ldr	r3, [pc, #16]	; (1f258 <radio_status_reset+0x14>)
   1f246:	2200      	movs	r2, #0
   1f248:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1f24c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1f250:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1f254:	4770      	bx	lr
   1f256:	bf00      	nop
   1f258:	40001000 	.word	0x40001000

0001f25c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1f25c:	4b03      	ldr	r3, [pc, #12]	; (1f26c <radio_is_ready+0x10>)
   1f25e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1f262:	3800      	subs	r0, #0
   1f264:	bf18      	it	ne
   1f266:	2001      	movne	r0, #1
   1f268:	4770      	bx	lr
   1f26a:	bf00      	nop
   1f26c:	40001000 	.word	0x40001000

0001f270 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1f270:	4b03      	ldr	r3, [pc, #12]	; (1f280 <radio_is_done+0x10>)
   1f272:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1f276:	3800      	subs	r0, #0
   1f278:	bf18      	it	ne
   1f27a:	2001      	movne	r0, #1
   1f27c:	4770      	bx	lr
   1f27e:	bf00      	nop
   1f280:	40001000 	.word	0x40001000

0001f284 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1f284:	4b03      	ldr	r3, [pc, #12]	; (1f294 <radio_is_idle+0x10>)
   1f286:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1f28a:	fab0 f080 	clz	r0, r0
   1f28e:	0940      	lsrs	r0, r0, #5
   1f290:	4770      	bx	lr
   1f292:	bf00      	nop
   1f294:	40001000 	.word	0x40001000

0001f298 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   1f298:	4b04      	ldr	r3, [pc, #16]	; (1f2ac <radio_crc_configure+0x14>)
   1f29a:	f240 1203 	movw	r2, #259	; 0x103
   1f29e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   1f2a2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1f2a6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1f2aa:	4770      	bx	lr
   1f2ac:	40001000 	.word	0x40001000

0001f2b0 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   1f2b0:	4b03      	ldr	r3, [pc, #12]	; (1f2c0 <radio_crc_is_valid+0x10>)
   1f2b2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1f2b6:	3800      	subs	r0, #0
   1f2b8:	bf18      	it	ne
   1f2ba:	2001      	movne	r0, #1
   1f2bc:	4770      	bx	lr
   1f2be:	bf00      	nop
   1f2c0:	40001000 	.word	0x40001000

0001f2c4 <radio_pkt_empty_get>:
}
   1f2c4:	4800      	ldr	r0, [pc, #0]	; (1f2c8 <radio_pkt_empty_get+0x4>)
   1f2c6:	4770      	bx	lr
   1f2c8:	20003d7c 	.word	0x20003d7c

0001f2cc <radio_pkt_scratch_get>:
}
   1f2cc:	4800      	ldr	r0, [pc, #0]	; (1f2d0 <radio_pkt_scratch_get+0x4>)
   1f2ce:	4770      	bx	lr
   1f2d0:	20003d80 	.word	0x20003d80

0001f2d4 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f2d4:	4b05      	ldr	r3, [pc, #20]	; (1f2ec <radio_switch_complete_and_rx+0x18>)
{
   1f2d6:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   1f2d8:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f2da:	2403      	movs	r4, #3
{
   1f2dc:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f2de:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   1f2e2:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f2e4:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   1f2e6:	f7ff bd39 	b.w	1ed5c <sw_switch.isra.0>
   1f2ea:	bf00      	nop
   1f2ec:	40001000 	.word	0x40001000

0001f2f0 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f2f0:	4b04      	ldr	r3, [pc, #16]	; (1f304 <radio_switch_complete_and_tx+0x14>)
{
   1f2f2:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f2f4:	2403      	movs	r4, #3
{
   1f2f6:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1f2f8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1f2fc:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f2fe:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   1f300:	f7ff bd2c 	b.w	1ed5c <sw_switch.isra.0>
   1f304:	40001000 	.word	0x40001000

0001f308 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1f308:	4904      	ldr	r1, [pc, #16]	; (1f31c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1f30a:	4b05      	ldr	r3, [pc, #20]	; (1f320 <radio_switch_complete_and_disable+0x18>)
   1f30c:	2003      	movs	r0, #3
   1f30e:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1f312:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1f316:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f31a:	4770      	bx	lr
   1f31c:	40001000 	.word	0x40001000
   1f320:	4001f000 	.word	0x4001f000

0001f324 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1f324:	4a03      	ldr	r2, [pc, #12]	; (1f334 <radio_rssi_measure+0x10>)
   1f326:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1f32a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1f32e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1f332:	4770      	bx	lr
   1f334:	40001000 	.word	0x40001000

0001f338 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1f338:	4b01      	ldr	r3, [pc, #4]	; (1f340 <radio_rssi_get+0x8>)
   1f33a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1f33e:	4770      	bx	lr
   1f340:	40001000 	.word	0x40001000

0001f344 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1f344:	4b02      	ldr	r3, [pc, #8]	; (1f350 <radio_rssi_status_reset+0xc>)
   1f346:	2200      	movs	r2, #0
   1f348:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1f34c:	4770      	bx	lr
   1f34e:	bf00      	nop
   1f350:	40001000 	.word	0x40001000

0001f354 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1f354:	4b03      	ldr	r3, [pc, #12]	; (1f364 <radio_rssi_is_ready+0x10>)
   1f356:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1f35a:	3800      	subs	r0, #0
   1f35c:	bf18      	it	ne
   1f35e:	2001      	movne	r0, #1
   1f360:	4770      	bx	lr
   1f362:	bf00      	nop
   1f364:	40001000 	.word	0x40001000

0001f368 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1f368:	b430      	push	{r4, r5}
   1f36a:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1f36c:	00a3      	lsls	r3, r4, #2
   1f36e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1f376:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1f378:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1f37c:	3401      	adds	r4, #1
   1f37e:	8895      	ldrh	r5, [r2, #4]
   1f380:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1f384:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1f386:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1f38a:	d1ef      	bne.n	1f36c <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1f38c:	4b03      	ldr	r3, [pc, #12]	; (1f39c <radio_filter_configure+0x34>)
   1f38e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1f392:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1f394:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1f398:	4770      	bx	lr
   1f39a:	bf00      	nop
   1f39c:	40001000 	.word	0x40001000

0001f3a0 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1f3a0:	4a03      	ldr	r2, [pc, #12]	; (1f3b0 <radio_filter_disable+0x10>)
   1f3a2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1f3a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1f3aa:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1f3ae:	4770      	bx	lr
   1f3b0:	40001000 	.word	0x40001000

0001f3b4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1f3b4:	4b02      	ldr	r3, [pc, #8]	; (1f3c0 <radio_filter_status_reset+0xc>)
   1f3b6:	2200      	movs	r2, #0
   1f3b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1f3bc:	4770      	bx	lr
   1f3be:	bf00      	nop
   1f3c0:	40001000 	.word	0x40001000

0001f3c4 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1f3c4:	4b03      	ldr	r3, [pc, #12]	; (1f3d4 <radio_filter_has_match+0x10>)
   1f3c6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1f3ca:	3800      	subs	r0, #0
   1f3cc:	bf18      	it	ne
   1f3ce:	2001      	movne	r0, #1
   1f3d0:	4770      	bx	lr
   1f3d2:	bf00      	nop
   1f3d4:	40001000 	.word	0x40001000

0001f3d8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1f3d8:	4b01      	ldr	r3, [pc, #4]	; (1f3e0 <radio_filter_match_get+0x8>)
   1f3da:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1f3de:	4770      	bx	lr
   1f3e0:	40001000 	.word	0x40001000

0001f3e4 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1f3e4:	4904      	ldr	r1, [pc, #16]	; (1f3f8 <radio_tmr_status_reset+0x14>)
   1f3e6:	4b05      	ldr	r3, [pc, #20]	; (1f3fc <radio_tmr_status_reset+0x18>)
   1f3e8:	4a05      	ldr	r2, [pc, #20]	; (1f400 <radio_tmr_status_reset+0x1c>)
   1f3ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1f3ee:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1f3f2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1f3f6:	4770      	bx	lr
   1f3f8:	4000b000 	.word	0x4000b000
   1f3fc:	4001f000 	.word	0x4001f000
   1f400:	0e742060 	.word	0x0e742060

0001f404 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1f404:	4b03      	ldr	r3, [pc, #12]	; (1f414 <radio_tmr_tifs_set+0x10>)
    p_reg->CC[cc_channel] = cc_value;
   1f406:	4a04      	ldr	r2, [pc, #16]	; (1f418 <radio_tmr_tifs_set+0x14>)
   1f408:	781b      	ldrb	r3, [r3, #0]
   1f40a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1f40e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f412:	4770      	bx	lr
   1f414:	20009161 	.word	0x20009161
   1f418:	40009000 	.word	0x40009000

0001f41c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1f41c:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1f41e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1f422:	4d2a      	ldr	r5, [pc, #168]	; (1f4cc <radio_tmr_start+0xb0>)
   1f424:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1f428:	42ab      	cmp	r3, r5
{
   1f42a:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1f42c:	d906      	bls.n	1f43c <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   1f42e:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1f432:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1f436:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1f43a:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f43c:	4d24      	ldr	r5, [pc, #144]	; (1f4d0 <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1f43e:	4b25      	ldr	r3, [pc, #148]	; (1f4d4 <radio_tmr_start+0xb8>)
	remainder /= 1000000UL;
   1f440:	4825      	ldr	r0, [pc, #148]	; (1f4d8 <radio_tmr_start+0xbc>)
   1f442:	2601      	movs	r6, #1
   1f444:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1f446:	2600      	movs	r6, #0
   1f448:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   1f44c:	4d23      	ldr	r5, [pc, #140]	; (1f4dc <radio_tmr_start+0xc0>)
	remainder /= 1000000UL;
   1f44e:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1f452:	2604      	movs	r6, #4
   1f454:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1f458:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1f45a:	2602      	movs	r6, #2
   1f45c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f460:	4a1f      	ldr	r2, [pc, #124]	; (1f4e0 <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   1f462:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1f466:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1f46a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1f46e:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1f472:	491c      	ldr	r1, [pc, #112]	; (1f4e4 <radio_tmr_start+0xc8>)
   1f474:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1f478:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f47a:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1f47e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1f482:	b1e4      	cbz	r4, 1f4be <radio_tmr_start+0xa2>
    p_reg->CHENCLR = mask;
   1f484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1f488:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1f48c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1f490:	4a13      	ldr	r2, [pc, #76]	; (1f4e0 <radio_tmr_start+0xc4>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1f492:	4b15      	ldr	r3, [pc, #84]	; (1f4e8 <radio_tmr_start+0xcc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f494:	4915      	ldr	r1, [pc, #84]	; (1f4ec <radio_tmr_start+0xd0>)
   1f496:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   1f49a:	2500      	movs	r5, #0
   1f49c:	2401      	movs	r4, #1
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f49e:	4e14      	ldr	r6, [pc, #80]	; (1f4f0 <radio_tmr_start+0xd4>)
   1f4a0:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1f4a2:	2704      	movs	r7, #4
	SW_SWITCH_TIMER->MODE = 0;
   1f4a4:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1f4a8:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1f4ac:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
   1f4b0:	601c      	str	r4, [r3, #0]
   1f4b2:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1f4b6:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f4b8:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
   1f4bc:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1f4be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1f4c2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1f4c6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   1f4ca:	e7e1      	b.n	1f490 <radio_tmr_start+0x74>
   1f4cc:	7ff0bdbf 	.word	0x7ff0bdbf
   1f4d0:	4000800c 	.word	0x4000800c
   1f4d4:	40008000 	.word	0x40008000
   1f4d8:	431bde83 	.word	0x431bde83
   1f4dc:	4000b000 	.word	0x4000b000
   1f4e0:	4001f000 	.word	0x4001f000
   1f4e4:	4000b148 	.word	0x4000b148
   1f4e8:	40009000 	.word	0x40009000
   1f4ec:	4000900c 	.word	0x4000900c
   1f4f0:	4000110c 	.word	0x4000110c

0001f4f4 <radio_tmr_start_tick>:

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1f4f4:	b4f0      	push	{r4, r5, r6, r7}
    p_reg->CC[cc_channel] = cc_value;
   1f4f6:	4c16      	ldr	r4, [pc, #88]	; (1f550 <radio_tmr_start_tick+0x5c>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4f8:	4f16      	ldr	r7, [pc, #88]	; (1f554 <radio_tmr_start_tick+0x60>)
   1f4fa:	4e17      	ldr	r6, [pc, #92]	; (1f558 <radio_tmr_start_tick+0x64>)
    p_reg->CC[ch] = cc_val;
   1f4fc:	4d17      	ldr	r5, [pc, #92]	; (1f55c <radio_tmr_start_tick+0x68>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f4fe:	4b18      	ldr	r3, [pc, #96]	; (1f560 <radio_tmr_start_tick+0x6c>)
   1f500:	2201      	movs	r2, #1
   1f502:	603a      	str	r2, [r7, #0]
   1f504:	6032      	str	r2, [r6, #0]
    p_reg->CC[cc_channel] = cc_value;
   1f506:	f8c4 2540 	str.w	r2, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1f50a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    p_reg->CC[ch] = cc_val;
   1f50e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1f512:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
   1f516:	4913      	ldr	r1, [pc, #76]	; (1f564 <radio_tmr_start_tick+0x70>)
   1f518:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1f51c:	2220      	movs	r2, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f51e:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   1f522:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1f526:	b158      	cbz	r0, 1f540 <radio_tmr_start_tick+0x4c>
    p_reg->CHENCLR = mask;
   1f528:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1f52c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1f530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1f534:	4a0a      	ldr	r2, [pc, #40]	; (1f560 <radio_tmr_start_tick+0x6c>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1f536:	2001      	movs	r0, #1
   1f538:	bcf0      	pop	{r4, r5, r6, r7}
   1f53a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1f53e:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1f540:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1f544:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1f548:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1f54c:	e7f2      	b.n	1f534 <radio_tmr_start_tick+0x40>
   1f54e:	bf00      	nop
   1f550:	40008000 	.word	0x40008000
   1f554:	40008004 	.word	0x40008004
   1f558:	4000800c 	.word	0x4000800c
   1f55c:	4000b000 	.word	0x4000b000
   1f560:	4001f000 	.word	0x4001f000
   1f564:	4000b148 	.word	0x4000b148

0001f568 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1f568:	4b01      	ldr	r3, [pc, #4]	; (1f570 <radio_tmr_start_get+0x8>)
   1f56a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1f56e:	4770      	bx	lr
   1f570:	4000b000 	.word	0x4000b000

0001f574 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1f574:	b410      	push	{r4}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f576:	4805      	ldr	r0, [pc, #20]	; (1f58c <radio_tmr_stop+0x18>)
   1f578:	4c05      	ldr	r4, [pc, #20]	; (1f590 <radio_tmr_stop+0x1c>)
   1f57a:	4906      	ldr	r1, [pc, #24]	; (1f594 <radio_tmr_stop+0x20>)
   1f57c:	4a06      	ldr	r2, [pc, #24]	; (1f598 <radio_tmr_stop+0x24>)
   1f57e:	2301      	movs	r3, #1
   1f580:	6023      	str	r3, [r4, #0]
   1f582:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f584:	bc10      	pop	{r4}
   1f586:	600b      	str	r3, [r1, #0]
   1f588:	6013      	str	r3, [r2, #0]
   1f58a:	4770      	bx	lr
   1f58c:	40008010 	.word	0x40008010
   1f590:	40008004 	.word	0x40008004
   1f594:	40009004 	.word	0x40009004
   1f598:	40009010 	.word	0x40009010

0001f59c <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1f59c:	4904      	ldr	r1, [pc, #16]	; (1f5b0 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1f59e:	4b05      	ldr	r3, [pc, #20]	; (1f5b4 <radio_tmr_hcto_configure+0x18>)
   1f5a0:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1f5a4:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1f5a8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1f5ac:	4770      	bx	lr
   1f5ae:	bf00      	nop
   1f5b0:	40008000 	.word	0x40008000
   1f5b4:	4001f000 	.word	0x4001f000

0001f5b8 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f5b8:	4b05      	ldr	r3, [pc, #20]	; (1f5d0 <radio_tmr_aa_capture+0x18>)
   1f5ba:	4806      	ldr	r0, [pc, #24]	; (1f5d4 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f5bc:	4906      	ldr	r1, [pc, #24]	; (1f5d8 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1f5be:	4a07      	ldr	r2, [pc, #28]	; (1f5dc <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f5c0:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f5c4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1f5c8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1f5cc:	4770      	bx	lr
   1f5ce:	bf00      	nop
   1f5d0:	4001f000 	.word	0x4001f000
   1f5d4:	40001100 	.word	0x40001100
   1f5d8:	40008040 	.word	0x40008040
   1f5dc:	04000040 	.word	0x04000040

0001f5e0 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1f5e0:	4b01      	ldr	r3, [pc, #4]	; (1f5e8 <radio_tmr_aa_get+0x8>)
   1f5e2:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1f5e6:	4770      	bx	lr
   1f5e8:	40008000 	.word	0x40008000

0001f5ec <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1f5ec:	4b01      	ldr	r3, [pc, #4]	; (1f5f4 <radio_tmr_aa_save+0x8>)
   1f5ee:	6018      	str	r0, [r3, #0]
}
   1f5f0:	4770      	bx	lr
   1f5f2:	bf00      	nop
   1f5f4:	20003e8c 	.word	0x20003e8c

0001f5f8 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1f5f8:	4b01      	ldr	r3, [pc, #4]	; (1f600 <radio_tmr_aa_restore+0x8>)
}
   1f5fa:	6818      	ldr	r0, [r3, #0]
   1f5fc:	4770      	bx	lr
   1f5fe:	bf00      	nop
   1f600:	20003e8c 	.word	0x20003e8c

0001f604 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1f604:	4b01      	ldr	r3, [pc, #4]	; (1f60c <radio_tmr_ready_get+0x8>)
   1f606:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1f60a:	4770      	bx	lr
   1f60c:	40008000 	.word	0x40008000

0001f610 <radio_tmr_end_capture>:
   1f610:	4b02      	ldr	r3, [pc, #8]	; (1f61c <radio_tmr_end_capture+0xc>)
   1f612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1f616:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1f61a:	4770      	bx	lr
   1f61c:	4001f000 	.word	0x4001f000

0001f620 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1f620:	4b01      	ldr	r3, [pc, #4]	; (1f628 <radio_tmr_end_get+0x8>)
   1f622:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1f626:	4770      	bx	lr
   1f628:	40008000 	.word	0x40008000

0001f62c <radio_tmr_tifs_base_get>:
   1f62c:	4b01      	ldr	r3, [pc, #4]	; (1f634 <radio_tmr_tifs_base_get+0x8>)
   1f62e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1f632:	4770      	bx	lr
   1f634:	40008000 	.word	0x40008000

0001f638 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   1f638:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f63a:	4b21      	ldr	r3, [pc, #132]	; (1f6c0 <radio_ccm_rx_pkt_set+0x88>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1f63c:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f63e:	2500      	movs	r5, #0
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   1f640:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f642:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
{
   1f646:	4606      	mov	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1f648:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   1f64c:	d035      	beq.n	1f6ba <radio_ccm_rx_pkt_set+0x82>
   1f64e:	2904      	cmp	r1, #4
   1f650:	d131      	bne.n	1f6b6 <radio_ccm_rx_pkt_set+0x7e>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f652:	491c      	ldr	r1, [pc, #112]	; (1f6c4 <radio_ccm_rx_pkt_set+0x8c>)
   1f654:	4c1c      	ldr	r4, [pc, #112]	; (1f6c8 <radio_ccm_rx_pkt_set+0x90>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f656:	481d      	ldr	r0, [pc, #116]	; (1f6cc <radio_ccm_rx_pkt_set+0x94>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   1f658:	2503      	movs	r5, #3
   1f65a:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f65e:	f8c1 4578 	str.w	r4, [r1, #1400]	; 0x578
    p_reg->CHENSET = mask;
   1f662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   1f666:	4c1a      	ldr	r4, [pc, #104]	; (1f6d0 <radio_ccm_rx_pkt_set+0x98>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f668:	f8c1 057c 	str.w	r0, [r1, #1404]	; 0x57c
    p_reg->CHENSET = mask;
   1f66c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1f670:	4918      	ldr	r1, [pc, #96]	; (1f6d4 <radio_ccm_rx_pkt_set+0x9c>)
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1f672:	4b13      	ldr	r3, [pc, #76]	; (1f6c0 <radio_ccm_rx_pkt_set+0x88>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1f674:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1f678:	4817      	ldr	r0, [pc, #92]	; (1f6d8 <radio_ccm_rx_pkt_set+0xa0>)
   1f67a:	4d12      	ldr	r5, [pc, #72]	; (1f6c4 <radio_ccm_rx_pkt_set+0x8c>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1f67c:	4f17      	ldr	r7, [pc, #92]	; (1f6dc <radio_ccm_rx_pkt_set+0xa4>)
   1f67e:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   1f680:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   1f684:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->SHORTS = 0;
   1f688:	2100      	movs	r1, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1f68a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   1f68e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1f692:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1f696:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f69a:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1f69c:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   1f6a0:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1f6a4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1f6a8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1f6ac:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1f6b0:	bcf0      	pop	{r4, r5, r6, r7}
   1f6b2:	601a      	str	r2, [r3, #0]
   1f6b4:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1f6b6:	4c0a      	ldr	r4, [pc, #40]	; (1f6e0 <radio_ccm_rx_pkt_set+0xa8>)
   1f6b8:	e7da      	b.n	1f670 <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   1f6ba:	4c0a      	ldr	r4, [pc, #40]	; (1f6e4 <radio_ccm_rx_pkt_set+0xac>)
   1f6bc:	e7d8      	b.n	1f670 <radio_ccm_rx_pkt_set+0x38>
   1f6be:	bf00      	nop
   1f6c0:	4000f000 	.word	0x4000f000
   1f6c4:	4001f000 	.word	0x4001f000
   1f6c8:	40001150 	.word	0x40001150
   1f6cc:	4000f00c 	.word	0x4000f00c
   1f6d0:	01020001 	.word	0x01020001
   1f6d4:	40001000 	.word	0x40001000
   1f6d8:	20003d80 	.word	0x20003d80
   1f6dc:	20003c70 	.word	0x20003c70
   1f6e0:	01000001 	.word	0x01000001
   1f6e4:	01010001 	.word	0x01010001

0001f6e8 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1f6e8:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f6ea:	4b10      	ldr	r3, [pc, #64]	; (1f72c <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1f6ec:	4d10      	ldr	r5, [pc, #64]	; (1f730 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   1f6ee:	4e11      	ldr	r6, [pc, #68]	; (1f734 <radio_ccm_tx_pkt_set+0x4c>)
{
   1f6f0:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f6f2:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1f6f4:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f6f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1f6fa:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   1f6fe:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1f702:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1f706:	4e0c      	ldr	r6, [pc, #48]	; (1f738 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1f708:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1f70c:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1f70e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1f712:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1f714:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1f718:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1f71c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1f720:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1f724:	601c      	str	r4, [r3, #0]
}
   1f726:	bc70      	pop	{r4, r5, r6}
   1f728:	4770      	bx	lr
   1f72a:	bf00      	nop
   1f72c:	4000f000 	.word	0x4000f000
   1f730:	20003d80 	.word	0x20003d80
   1f734:	01010000 	.word	0x01010000
   1f738:	20003c70 	.word	0x20003c70

0001f73c <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1f73c:	4a0e      	ldr	r2, [pc, #56]	; (1f778 <radio_ccm_is_done+0x3c>)
   1f73e:	2302      	movs	r3, #2
   1f740:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1f744:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1f748:	b933      	cbnz	r3, 1f758 <radio_ccm_is_done+0x1c>
		__WFE();
   1f74a:	bf20      	wfe
		__SEV();
   1f74c:	bf40      	sev
		__WFE();
   1f74e:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1f750:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1f754:	2b00      	cmp	r3, #0
   1f756:	d0f8      	beq.n	1f74a <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1f758:	4b07      	ldr	r3, [pc, #28]	; (1f778 <radio_ccm_is_done+0x3c>)
   1f75a:	4a08      	ldr	r2, [pc, #32]	; (1f77c <radio_ccm_is_done+0x40>)
   1f75c:	2002      	movs	r0, #2
   1f75e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1f762:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1f766:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1f76a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1f76e:	fab0 f080 	clz	r0, r0
   1f772:	0940      	lsrs	r0, r0, #5
   1f774:	4770      	bx	lr
   1f776:	bf00      	nop
   1f778:	4000f000 	.word	0x4000f000
   1f77c:	e000e100 	.word	0xe000e100

0001f780 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1f780:	4b03      	ldr	r3, [pc, #12]	; (1f790 <radio_ccm_mic_is_valid+0x10>)
   1f782:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1f786:	3800      	subs	r0, #0
   1f788:	bf18      	it	ne
   1f78a:	2001      	movne	r0, #1
   1f78c:	4770      	bx	lr
   1f78e:	bf00      	nop
   1f790:	4000f000 	.word	0x4000f000

0001f794 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1f794:	4b15      	ldr	r3, [pc, #84]	; (1f7ec <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1f796:	4a16      	ldr	r2, [pc, #88]	; (1f7f0 <radio_ar_configure+0x5c>)
{
   1f798:	b430      	push	{r4, r5}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1f79a:	2403      	movs	r4, #3
   1f79c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   1f7a0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1f7a4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1f7a8:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1f7ac:	4d11      	ldr	r5, [pc, #68]	; (1f7f4 <radio_ar_configure+0x60>)
   1f7ae:	4c12      	ldr	r4, [pc, #72]	; (1f7f8 <radio_ar_configure+0x64>)
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1f7b0:	3801      	subs	r0, #1
   1f7b2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   1f7b6:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   1f7b8:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1f7ba:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1f7be:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1f7c2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1f7c6:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1f7ca:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1f7ce:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1f7d2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1f7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f7da:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1f7de:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   1f7e2:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1f7e6:	bc30      	pop	{r4, r5}
   1f7e8:	4770      	bx	lr
   1f7ea:	bf00      	nop
   1f7ec:	4000f000 	.word	0x4000f000
   1f7f0:	40001000 	.word	0x40001000
   1f7f4:	20003c6c 	.word	0x20003c6c
   1f7f8:	4001f000 	.word	0x4001f000

0001f7fc <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1f7fc:	4b01      	ldr	r3, [pc, #4]	; (1f804 <radio_ar_match_get+0x8>)
   1f7fe:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1f802:	4770      	bx	lr
   1f804:	4000f000 	.word	0x4000f000

0001f808 <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1f808:	4903      	ldr	r1, [pc, #12]	; (1f818 <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1f80a:	4a04      	ldr	r2, [pc, #16]	; (1f81c <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1f80c:	2300      	movs	r3, #0
   1f80e:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1f812:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1f816:	4770      	bx	lr
   1f818:	40001000 	.word	0x40001000
   1f81c:	4000f000 	.word	0x4000f000

0001f820 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1f820:	4b08      	ldr	r3, [pc, #32]	; (1f844 <radio_ar_has_match+0x24>)
   1f822:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1f826:	b160      	cbz	r0, 1f842 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1f828:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1f82c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1f830:	b138      	cbz	r0, 1f842 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1f832:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1f836:	b120      	cbz	r0, 1f842 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1f838:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1f83c:	fab0 f080 	clz	r0, r0
   1f840:	0940      	lsrs	r0, r0, #5
}
   1f842:	4770      	bx	lr
   1f844:	40001000 	.word	0x40001000

0001f848 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1f848:	2902      	cmp	r1, #2
{
   1f84a:	b510      	push	{r4, lr}
   1f84c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1f84e:	d00b      	beq.n	1f868 <mayfly_enable_cb+0x20>
   1f850:	4a0a      	ldr	r2, [pc, #40]	; (1f87c <mayfly_enable_cb+0x34>)
   1f852:	490b      	ldr	r1, [pc, #44]	; (1f880 <mayfly_enable_cb+0x38>)
   1f854:	480b      	ldr	r0, [pc, #44]	; (1f884 <mayfly_enable_cb+0x3c>)
   1f856:	231f      	movs	r3, #31
   1f858:	f004 fe2c 	bl	244b4 <printk>
   1f85c:	4040      	eors	r0, r0
   1f85e:	f380 8811 	msr	BASEPRI, r0
   1f862:	f04f 0003 	mov.w	r0, #3
   1f866:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1f868:	200b      	movs	r0, #11
	if (enable) {
   1f86a:	b11c      	cbz	r4, 1f874 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1f86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1f870:	f7e6 be50 	b.w	6514 <arch_irq_enable>
}
   1f874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1f878:	f7e6 be5c 	b.w	6534 <arch_irq_disable>
   1f87c:	0002f348 	.word	0x0002f348
   1f880:	0002f398 	.word	0x0002f398
   1f884:	0002e80c 	.word	0x0002e80c

0001f888 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1f888:	b129      	cbz	r1, 1f896 <mayfly_is_enabled+0xe>
   1f88a:	3901      	subs	r1, #1
   1f88c:	2901      	cmp	r1, #1
   1f88e:	d805      	bhi.n	1f89c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1f890:	200b      	movs	r0, #11
   1f892:	f7e6 be63 	b.w	655c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1f896:	2018      	movs	r0, #24
   1f898:	f7e6 be60 	b.w	655c <arch_irq_is_enabled>
{
   1f89c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1f89e:	4a07      	ldr	r2, [pc, #28]	; (1f8bc <mayfly_is_enabled+0x34>)
   1f8a0:	4907      	ldr	r1, [pc, #28]	; (1f8c0 <mayfly_is_enabled+0x38>)
   1f8a2:	4808      	ldr	r0, [pc, #32]	; (1f8c4 <mayfly_is_enabled+0x3c>)
   1f8a4:	2337      	movs	r3, #55	; 0x37
   1f8a6:	f004 fe05 	bl	244b4 <printk>
   1f8aa:	4040      	eors	r0, r0
   1f8ac:	f380 8811 	msr	BASEPRI, r0
   1f8b0:	f04f 0003 	mov.w	r0, #3
   1f8b4:	df02      	svc	2
		break;
	}

	return 0;
}
   1f8b6:	2000      	movs	r0, #0
   1f8b8:	bd08      	pop	{r3, pc}
   1f8ba:	bf00      	nop
   1f8bc:	0002f348 	.word	0x0002f348
   1f8c0:	0002e86c 	.word	0x0002e86c
   1f8c4:	0002e80c 	.word	0x0002e80c

0001f8c8 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1f8c8:	4288      	cmp	r0, r1
   1f8ca:	d013      	beq.n	1f8f4 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   1f8cc:	b928      	cbnz	r0, 1f8da <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   1f8ce:	1e48      	subs	r0, r1, #1
   1f8d0:	2801      	cmp	r0, #1
   1f8d2:	bf8c      	ite	hi
   1f8d4:	2000      	movhi	r0, #0
   1f8d6:	2001      	movls	r0, #1
   1f8d8:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1f8da:	2801      	cmp	r0, #1
   1f8dc:	d106      	bne.n	1f8ec <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1f8de:	b159      	cbz	r1, 1f8f8 <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1f8e0:	f1a1 0002 	sub.w	r0, r1, #2
   1f8e4:	fab0 f080 	clz	r0, r0
   1f8e8:	0940      	lsrs	r0, r0, #5
   1f8ea:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   1f8ec:	2802      	cmp	r0, #2
   1f8ee:	d004      	beq.n	1f8fa <mayfly_prio_is_equal+0x32>
   1f8f0:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1f8f2:	4770      	bx	lr
   1f8f4:	2001      	movs	r0, #1
   1f8f6:	4770      	bx	lr
#endif
	       0;
}
   1f8f8:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1f8fa:	2901      	cmp	r1, #1
   1f8fc:	bf8c      	ite	hi
   1f8fe:	2000      	movhi	r0, #0
   1f900:	2001      	movls	r0, #1
   1f902:	4770      	bx	lr

0001f904 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1f904:	2901      	cmp	r1, #1
{
   1f906:	b508      	push	{r3, lr}
	switch (callee_id) {
   1f908:	d00f      	beq.n	1f92a <mayfly_pend+0x26>
   1f90a:	2902      	cmp	r1, #2
   1f90c:	d00d      	beq.n	1f92a <mayfly_pend+0x26>
   1f90e:	b191      	cbz	r1, 1f936 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1f910:	4a0c      	ldr	r2, [pc, #48]	; (1f944 <mayfly_pend+0x40>)
   1f912:	490d      	ldr	r1, [pc, #52]	; (1f948 <mayfly_pend+0x44>)
   1f914:	480d      	ldr	r0, [pc, #52]	; (1f94c <mayfly_pend+0x48>)
   1f916:	2368      	movs	r3, #104	; 0x68
   1f918:	f004 fdcc 	bl	244b4 <printk>
   1f91c:	4040      	eors	r0, r0
   1f91e:	f380 8811 	msr	BASEPRI, r0
   1f922:	f04f 0003 	mov.w	r0, #3
   1f926:	df02      	svc	2
		break;
	}
}
   1f928:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f92a:	4b09      	ldr	r3, [pc, #36]	; (1f950 <mayfly_pend+0x4c>)
   1f92c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f930:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f934:	bd08      	pop	{r3, pc}
   1f936:	4b06      	ldr	r3, [pc, #24]	; (1f950 <mayfly_pend+0x4c>)
   1f938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1f93c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f940:	bd08      	pop	{r3, pc}
   1f942:	bf00      	nop
   1f944:	0002f348 	.word	0x0002f348
   1f948:	0002e86c 	.word	0x0002e86c
   1f94c:	0002e80c 	.word	0x0002e80c
   1f950:	e000e100 	.word	0xe000e100

0001f954 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1f954:	2803      	cmp	r0, #3
{
   1f956:	b510      	push	{r4, lr}
   1f958:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1f95a:	d804      	bhi.n	1f966 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1f95c:	4b11      	ldr	r3, [pc, #68]	; (1f9a4 <hal_ticker_instance0_caller_id_get+0x50>)
   1f95e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1f960:	b18c      	cbz	r4, 1f986 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1f962:	4620      	mov	r0, r4
   1f964:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1f966:	4a10      	ldr	r2, [pc, #64]	; (1f9a8 <hal_ticker_instance0_caller_id_get+0x54>)
   1f968:	4910      	ldr	r1, [pc, #64]	; (1f9ac <hal_ticker_instance0_caller_id_get+0x58>)
   1f96a:	4811      	ldr	r0, [pc, #68]	; (1f9b0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1f96c:	232b      	movs	r3, #43	; 0x2b
   1f96e:	f004 fda1 	bl	244b4 <printk>
   1f972:	4040      	eors	r0, r0
   1f974:	f380 8811 	msr	BASEPRI, r0
   1f978:	f04f 0003 	mov.w	r0, #3
   1f97c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1f97e:	4b09      	ldr	r3, [pc, #36]	; (1f9a4 <hal_ticker_instance0_caller_id_get+0x50>)
   1f980:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1f982:	2c00      	cmp	r4, #0
   1f984:	d1ed      	bne.n	1f962 <hal_ticker_instance0_caller_id_get+0xe>
   1f986:	4a08      	ldr	r2, [pc, #32]	; (1f9a8 <hal_ticker_instance0_caller_id_get+0x54>)
   1f988:	490a      	ldr	r1, [pc, #40]	; (1f9b4 <hal_ticker_instance0_caller_id_get+0x60>)
   1f98a:	4809      	ldr	r0, [pc, #36]	; (1f9b0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1f98c:	232e      	movs	r3, #46	; 0x2e
   1f98e:	f004 fd91 	bl	244b4 <printk>
   1f992:	4040      	eors	r0, r0
   1f994:	f380 8811 	msr	BASEPRI, r0
   1f998:	f04f 0003 	mov.w	r0, #3
   1f99c:	df02      	svc	2
}
   1f99e:	4620      	mov	r0, r4
   1f9a0:	bd10      	pop	{r4, pc}
   1f9a2:	bf00      	nop
   1f9a4:	0002f428 	.word	0x0002f428
   1f9a8:	0002f3a8 	.word	0x0002f3a8
   1f9ac:	0002f3f8 	.word	0x0002f3f8
   1f9b0:	0002e80c 	.word	0x0002e80c
   1f9b4:	0002f418 	.word	0x0002f418

0001f9b8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1f9b8:	3801      	subs	r0, #1
{
   1f9ba:	b510      	push	{r4, lr}
   1f9bc:	461c      	mov	r4, r3
   1f9be:	2804      	cmp	r0, #4
   1f9c0:	d855      	bhi.n	1fa6e <hal_ticker_instance0_sched+0xb6>
   1f9c2:	e8df f000 	tbb	[pc, r0]
   1f9c6:	1a12      	.short	0x1a12
   1f9c8:	1e16      	.short	0x1e16
   1f9ca:	03          	.byte	0x03
   1f9cb:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1f9cc:	2904      	cmp	r1, #4
   1f9ce:	d01e      	beq.n	1fa0e <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1f9d0:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1f9d2:	4a28      	ldr	r2, [pc, #160]	; (1fa74 <hal_ticker_instance0_sched+0xbc>)
   1f9d4:	4928      	ldr	r1, [pc, #160]	; (1fa78 <hal_ticker_instance0_sched+0xc0>)
   1f9d6:	4829      	ldr	r0, [pc, #164]	; (1fa7c <hal_ticker_instance0_sched+0xc4>)
   1f9d8:	f004 fd6c 	bl	244b4 <printk>
   1f9dc:	4040      	eors	r0, r0
   1f9de:	f380 8811 	msr	BASEPRI, r0
   1f9e2:	f04f 0003 	mov.w	r0, #3
   1f9e6:	df02      	svc	2
		break;
	}
}
   1f9e8:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1f9ea:	2904      	cmp	r1, #4
   1f9ec:	d01f      	beq.n	1fa2e <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1f9ee:	234e      	movs	r3, #78	; 0x4e
   1f9f0:	e7ef      	b.n	1f9d2 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1f9f2:	2904      	cmp	r1, #4
   1f9f4:	d013      	beq.n	1fa1e <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1f9f6:	237c      	movs	r3, #124	; 0x7c
   1f9f8:	e7eb      	b.n	1f9d2 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1f9fa:	2903      	cmp	r1, #3
   1f9fc:	d01f      	beq.n	1fa3e <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1f9fe:	2365      	movs	r3, #101	; 0x65
   1fa00:	e7e7      	b.n	1f9d2 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1fa02:	2903      	cmp	r1, #3
   1fa04:	d02b      	beq.n	1fa5e <hal_ticker_instance0_sched+0xa6>
   1fa06:	2904      	cmp	r1, #4
   1fa08:	d021      	beq.n	1fa4e <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1fa0a:	23a2      	movs	r3, #162	; 0xa2
   1fa0c:	e7e1      	b.n	1f9d2 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1fa0e:	4b1c      	ldr	r3, [pc, #112]	; (1fa80 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1fa10:	2102      	movs	r1, #2
			m.param = instance;
   1fa12:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1fa14:	2003      	movs	r0, #3
}
   1fa16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1fa1a:	f7f3 bb79 	b.w	13110 <mayfly_enqueue>
			m.param = instance;
   1fa1e:	4b19      	ldr	r3, [pc, #100]	; (1fa84 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1fa20:	2102      	movs	r1, #2
			m.param = instance;
   1fa22:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1fa24:	2001      	movs	r0, #1
}
   1fa26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1fa2a:	f7f3 bb71 	b.w	13110 <mayfly_enqueue>
			m.param = instance;
   1fa2e:	4b16      	ldr	r3, [pc, #88]	; (1fa88 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1fa30:	2102      	movs	r1, #2
			m.param = instance;
   1fa32:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1fa34:	2000      	movs	r0, #0
}
   1fa36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1fa3a:	f7f3 bb69 	b.w	13110 <mayfly_enqueue>
			m.param = instance;
   1fa3e:	4b13      	ldr	r3, [pc, #76]	; (1fa8c <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1fa40:	2101      	movs	r1, #1
			m.param = instance;
   1fa42:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1fa44:	4608      	mov	r0, r1
}
   1fa46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1fa4a:	f7f3 bb61 	b.w	13110 <mayfly_enqueue>
			m.param = instance;
   1fa4e:	4b10      	ldr	r3, [pc, #64]	; (1fa90 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1fa50:	2102      	movs	r1, #2
			m.param = instance;
   1fa52:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1fa54:	4608      	mov	r0, r1
}
   1fa56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1fa5a:	f7f3 bb59 	b.w	13110 <mayfly_enqueue>
			m.param = instance;
   1fa5e:	4b0d      	ldr	r3, [pc, #52]	; (1fa94 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1fa60:	2101      	movs	r1, #1
			m.param = instance;
   1fa62:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1fa64:	2002      	movs	r0, #2
}
   1fa66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1fa6a:	f7f3 bb51 	b.w	13110 <mayfly_enqueue>
		LL_ASSERT(0);
   1fa6e:	23c0      	movs	r3, #192	; 0xc0
   1fa70:	e7af      	b.n	1f9d2 <hal_ticker_instance0_sched+0x1a>
   1fa72:	bf00      	nop
   1fa74:	0002f3a8 	.word	0x0002f3a8
   1fa78:	0002e86c 	.word	0x0002e86c
   1fa7c:	0002e80c 	.word	0x0002e80c
   1fa80:	2000099c 	.word	0x2000099c
   1fa84:	2000096c 	.word	0x2000096c
   1fa88:	2000094c 	.word	0x2000094c
   1fa8c:	2000095c 	.word	0x2000095c
   1fa90:	2000098c 	.word	0x2000098c
   1fa94:	2000097c 	.word	0x2000097c

0001fa98 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1fa98:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1fa9a:	2000      	movs	r0, #0
   1fa9c:	f7ff b8f0 	b.w	1ec80 <cntr_cmp_set>

0001faa0 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1faa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1faa4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1faa8:	3201      	adds	r2, #1
   1faaa:	d008      	beq.n	1fabe <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1faac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fab0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1fab4:	f013 0301 	ands.w	r3, r3, #1
   1fab8:	d10f      	bne.n	1fada <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1faba:	2000      	movs	r0, #0
   1fabc:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1fabe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1fac2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1fac6:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1fac8:	4293      	cmp	r3, r2
   1faca:	d0f6      	beq.n	1faba <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1facc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fad0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1fad4:	f013 0301 	ands.w	r3, r3, #1
   1fad8:	d0ef      	beq.n	1faba <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1fada:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1fade:	0c19      	lsrs	r1, r3, #16
{
   1fae0:	b510      	push	{r4, lr}
	dst[0] = val;
   1fae2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1fae4:	0a0c      	lsrs	r4, r1, #8
   1fae6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1faea:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1faec:	70c4      	strb	r4, [r0, #3]
   1faee:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1faf0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1faf4:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1faf6:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1fafa:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1fafe:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1fb00:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1fb04:	3301      	adds	r3, #1
   1fb06:	d035      	beq.n	1fb74 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1fb08:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1fb0c:	3301      	adds	r3, #1
   1fb0e:	d031      	beq.n	1fb74 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1fb10:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1fb14:	3301      	adds	r3, #1
   1fb16:	d02d      	beq.n	1fb74 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1fb18:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1fb1c:	3301      	adds	r3, #1
   1fb1e:	d029      	beq.n	1fb74 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1fb20:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1fb24:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1fb26:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1fb28:	0a0c      	lsrs	r4, r1, #8
   1fb2a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fb2e:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1fb30:	7244      	strb	r4, [r0, #9]
   1fb32:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1fb34:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1fb38:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1fb3a:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1fb3c:	0a0c      	lsrs	r4, r1, #8
   1fb3e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fb42:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1fb44:	7344      	strb	r4, [r0, #13]
   1fb46:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1fb48:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1fb4c:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1fb4e:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1fb50:	0a0c      	lsrs	r4, r1, #8
   1fb52:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fb56:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1fb58:	7444      	strb	r4, [r0, #17]
   1fb5a:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1fb5c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1fb60:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1fb62:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1fb64:	0a11      	lsrs	r1, r2, #8
   1fb66:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fb6a:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1fb6c:	7541      	strb	r1, [r0, #21]
   1fb6e:	74c3      	strb	r3, [r0, #19]
		return 1;
   1fb70:	2001      	movs	r0, #1
}
   1fb72:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1fb74:	2210      	movs	r2, #16
   1fb76:	2100      	movs	r1, #0
   1fb78:	3006      	adds	r0, #6
   1fb7a:	f006 ff3d 	bl	269f8 <memset>
		return 1;
   1fb7e:	2001      	movs	r0, #1
}
   1fb80:	bd10      	pop	{r4, pc}
   1fb82:	bf00      	nop

0001fb84 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1fb84:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1fb86:	2210      	movs	r2, #16
{
   1fb88:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1fb8a:	2100      	movs	r1, #0
   1fb8c:	f006 ff34 	bl	269f8 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1fb90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fb94:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1fb98:	3201      	adds	r2, #1
   1fb9a:	d034      	beq.n	1fc06 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1fb9c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1fba0:	3201      	adds	r2, #1
   1fba2:	d030      	beq.n	1fc06 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1fba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1fba8:	3201      	adds	r2, #1
   1fbaa:	d02c      	beq.n	1fc06 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1fbac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1fbb0:	3201      	adds	r2, #1
   1fbb2:	d028      	beq.n	1fc06 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1fbb4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1fbb8:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1fbba:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1fbbc:	0a08      	lsrs	r0, r1, #8
   1fbbe:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1fbc2:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1fbc4:	70e0      	strb	r0, [r4, #3]
   1fbc6:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1fbc8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1fbcc:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1fbce:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1fbd0:	0a08      	lsrs	r0, r1, #8
   1fbd2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1fbd6:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1fbd8:	71e0      	strb	r0, [r4, #7]
   1fbda:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1fbdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1fbe0:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1fbe2:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1fbe4:	0a08      	lsrs	r0, r1, #8
   1fbe6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1fbea:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1fbec:	7262      	strb	r2, [r4, #9]
   1fbee:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1fbf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1fbf4:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1fbf6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1fbf8:	0a11      	lsrs	r1, r2, #8
   1fbfa:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fbfe:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1fc00:	73e1      	strb	r1, [r4, #15]
   1fc02:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1fc04:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1fc06:	4620      	mov	r0, r4
   1fc08:	2210      	movs	r2, #16
}
   1fc0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1fc0e:	2100      	movs	r1, #0
   1fc10:	f006 bef2 	b.w	269f8 <memset>

0001fc14 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1fc14:	4b02      	ldr	r3, [pc, #8]	; (1fc20 <net_buf_pool_get+0xc>)
   1fc16:	2228      	movs	r2, #40	; 0x28
   1fc18:	fb02 3000 	mla	r0, r2, r0, r3
   1fc1c:	4770      	bx	lr
   1fc1e:	bf00      	nop
   1fc20:	20000e5c 	.word	0x20000e5c

0001fc24 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fc24:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   1fc26:	4a05      	ldr	r2, [pc, #20]	; (1fc3c <net_buf_id+0x18>)
   1fc28:	2128      	movs	r1, #40	; 0x28
   1fc2a:	fb01 2303 	mla	r3, r1, r3, r2
   1fc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fc30:	1ac0      	subs	r0, r0, r3
}
   1fc32:	4b03      	ldr	r3, [pc, #12]	; (1fc40 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1fc34:	10c0      	asrs	r0, r0, #3
}
   1fc36:	4358      	muls	r0, r3
   1fc38:	4770      	bx	lr
   1fc3a:	bf00      	nop
   1fc3c:	20000e5c 	.word	0x20000e5c
   1fc40:	aaaaaaab 	.word	0xaaaaaaab

0001fc44 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1fc44:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc46:	4a0a      	ldr	r2, [pc, #40]	; (1fc70 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fc48:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc4a:	2428      	movs	r4, #40	; 0x28
   1fc4c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1fc50:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc52:	6a1b      	ldr	r3, [r3, #32]
   1fc54:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1fc56:	6823      	ldr	r3, [r4, #0]
   1fc58:	429a      	cmp	r2, r3
   1fc5a:	bf94      	ite	ls
   1fc5c:	600a      	strls	r2, [r1, #0]
   1fc5e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1fc60:	f7ff ffe0 	bl	1fc24 <net_buf_id>
   1fc64:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1fc68:	fb02 3000 	mla	r0, r2, r0, r3
   1fc6c:	bd10      	pop	{r4, pc}
   1fc6e:	bf00      	nop
   1fc70:	20000e5c 	.word	0x20000e5c

0001fc74 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1fc74:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1fc78:	4605      	mov	r5, r0
   1fc7a:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1fc7c:	4610      	mov	r0, r2
   1fc7e:	4619      	mov	r1, r3
{
   1fc80:	4616      	mov	r6, r2
   1fc82:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1fc84:	f00d fd01 	bl	2d68a <z_timeout_end_calc>
   1fc88:	4680      	mov	r8, r0
   1fc8a:	4689      	mov	r9, r1
	__asm__ volatile(
   1fc8c:	f04f 0320 	mov.w	r3, #32
   1fc90:	f3ef 8a11 	mrs	sl, BASEPRI
   1fc94:	f383 8811 	msr	BASEPRI, r3
   1fc98:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1fc9c:	8b6b      	ldrh	r3, [r5, #26]
   1fc9e:	2b00      	cmp	r3, #0
   1fca0:	d054      	beq.n	1fd4c <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1fca2:	8b2a      	ldrh	r2, [r5, #24]
   1fca4:	429a      	cmp	r2, r3
   1fca6:	d93d      	bls.n	1fd24 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1fca8:	2200      	movs	r2, #0
   1fcaa:	2300      	movs	r3, #0
   1fcac:	4628      	mov	r0, r5
   1fcae:	f003 fb49 	bl	23344 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1fcb2:	4604      	mov	r4, r0
   1fcb4:	2800      	cmp	r0, #0
   1fcb6:	d035      	beq.n	1fd24 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1fcb8:	f38a 8811 	msr	BASEPRI, sl
   1fcbc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1fcc0:	9b01      	ldr	r3, [sp, #4]
   1fcc2:	2b00      	cmp	r3, #0
   1fcc4:	d052      	beq.n	1fd6c <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1fcc6:	ea56 0307 	orrs.w	r3, r6, r7
   1fcca:	d010      	beq.n	1fcee <net_buf_alloc_len+0x7a>
   1fccc:	1c7b      	adds	r3, r7, #1
   1fcce:	bf08      	it	eq
   1fcd0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1fcd4:	d00b      	beq.n	1fcee <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1fcd6:	f004 f9ef 	bl	240b8 <z_tick_get>
   1fcda:	ebb8 0600 	subs.w	r6, r8, r0
   1fcde:	eb69 0701 	sbc.w	r7, r9, r1
   1fce2:	2e00      	cmp	r6, #0
   1fce4:	f177 0300 	sbcs.w	r3, r7, #0
   1fce8:	bfbc      	itt	lt
   1fcea:	2600      	movlt	r6, #0
   1fcec:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fcee:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1fcf0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1fd84 <net_buf_alloc_len+0x110>
   1fcf4:	2228      	movs	r2, #40	; 0x28
   1fcf6:	fb02 8303 	mla	r3, r2, r3, r8
   1fcfa:	a901      	add	r1, sp, #4
   1fcfc:	6a1b      	ldr	r3, [r3, #32]
   1fcfe:	681b      	ldr	r3, [r3, #0]
   1fd00:	4632      	mov	r2, r6
   1fd02:	681d      	ldr	r5, [r3, #0]
   1fd04:	4620      	mov	r0, r4
   1fd06:	463b      	mov	r3, r7
   1fd08:	47a8      	blx	r5
   1fd0a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1fd0c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1fd0e:	bb70      	cbnz	r0, 1fd6e <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1fd10:	79a0      	ldrb	r0, [r4, #6]
   1fd12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1fd16:	4621      	mov	r1, r4
   1fd18:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1fd1c:	f00d faa8 	bl	2d270 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1fd20:	462c      	mov	r4, r5
}
   1fd22:	e01f      	b.n	1fd64 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1fd24:	8b68      	ldrh	r0, [r5, #26]
   1fd26:	1e43      	subs	r3, r0, #1
   1fd28:	836b      	strh	r3, [r5, #26]
   1fd2a:	f38a 8811 	msr	BASEPRI, sl
   1fd2e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1fd32:	8b2c      	ldrh	r4, [r5, #24]
   1fd34:	1a24      	subs	r4, r4, r0
   1fd36:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1fd38:	2318      	movs	r3, #24
   1fd3a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1fd3e:	4811      	ldr	r0, [pc, #68]	; (1fd84 <net_buf_alloc_len+0x110>)
   1fd40:	4b11      	ldr	r3, [pc, #68]	; (1fd88 <net_buf_alloc_len+0x114>)
   1fd42:	1a2d      	subs	r5, r5, r0
   1fd44:	10ed      	asrs	r5, r5, #3
   1fd46:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1fd48:	71a5      	strb	r5, [r4, #6]
		goto success;
   1fd4a:	e7b9      	b.n	1fcc0 <net_buf_alloc_len+0x4c>
   1fd4c:	f38a 8811 	msr	BASEPRI, sl
   1fd50:	f3bf 8f6f 	isb	sy
   1fd54:	4632      	mov	r2, r6
   1fd56:	463b      	mov	r3, r7
   1fd58:	4628      	mov	r0, r5
   1fd5a:	f003 faf3 	bl	23344 <z_impl_k_queue_get>
	if (!buf) {
   1fd5e:	4604      	mov	r4, r0
   1fd60:	2800      	cmp	r0, #0
   1fd62:	d1ad      	bne.n	1fcc0 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1fd64:	4620      	mov	r0, r4
   1fd66:	b002      	add	sp, #8
   1fd68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1fd6c:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1fd6e:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1fd70:	2201      	movs	r2, #1
	buf->frags = NULL;
   1fd72:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1fd74:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1fd76:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1fd78:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1fd7a:	6923      	ldr	r3, [r4, #16]
   1fd7c:	81e2      	strh	r2, [r4, #14]
   1fd7e:	60a3      	str	r3, [r4, #8]
	return buf;
   1fd80:	e7f0      	b.n	1fd64 <net_buf_alloc_len+0xf0>
   1fd82:	bf00      	nop
   1fd84:	20000e5c 	.word	0x20000e5c
   1fd88:	cccccccd 	.word	0xcccccccd

0001fd8c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1fd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd90:	4d17      	ldr	r5, [pc, #92]	; (1fdf0 <net_buf_unref+0x64>)
   1fd92:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1fd94:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1fd96:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1fd98:	b90c      	cbnz	r4, 1fd9e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1fd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1fd9e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1fda0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1fda4:	3b01      	subs	r3, #1
   1fda6:	b2db      	uxtb	r3, r3
   1fda8:	7123      	strb	r3, [r4, #4]
   1fdaa:	2b00      	cmp	r3, #0
   1fdac:	d1f5      	bne.n	1fd9a <net_buf_unref+0xe>
		if (buf->__buf) {
   1fdae:	6921      	ldr	r1, [r4, #16]
   1fdb0:	b159      	cbz	r1, 1fdca <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1fdb2:	7963      	ldrb	r3, [r4, #5]
   1fdb4:	079b      	lsls	r3, r3, #30
   1fdb6:	d407      	bmi.n	1fdc8 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1fdb8:	79a3      	ldrb	r3, [r4, #6]
   1fdba:	fb07 5303 	mla	r3, r7, r3, r5
   1fdbe:	4620      	mov	r0, r4
   1fdc0:	6a1b      	ldr	r3, [r3, #32]
   1fdc2:	681b      	ldr	r3, [r3, #0]
   1fdc4:	689b      	ldr	r3, [r3, #8]
   1fdc6:	4798      	blx	r3
			buf->__buf = NULL;
   1fdc8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1fdca:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1fdcc:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1fdce:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1fdd2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1fdd4:	69db      	ldr	r3, [r3, #28]
   1fdd6:	b11b      	cbz	r3, 1fde0 <net_buf_unref+0x54>
			pool->destroy(buf);
   1fdd8:	4620      	mov	r0, r4
   1fdda:	4798      	blx	r3
{
   1fddc:	4644      	mov	r4, r8
   1fdde:	e7db      	b.n	1fd98 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1fde0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1fde4:	4621      	mov	r1, r4
   1fde6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1fdea:	f00d fa41 	bl	2d270 <k_queue_prepend>
}
   1fdee:	e7f5      	b.n	1fddc <net_buf_unref+0x50>
   1fdf0:	20000e5c 	.word	0x20000e5c

0001fdf4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1fdf4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1fdf6:	4b09      	ldr	r3, [pc, #36]	; (1fe1c <gpio_nrfx_init+0x28>)
   1fdf8:	781a      	ldrb	r2, [r3, #0]
   1fdfa:	b96a      	cbnz	r2, 1fe18 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1fdfc:	2101      	movs	r1, #1
   1fdfe:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1fe00:	2006      	movs	r0, #6
   1fe02:	2105      	movs	r1, #5
   1fe04:	f7e6 fbb8 	bl	6578 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1fe08:	2006      	movs	r0, #6
   1fe0a:	f7e6 fb83 	bl	6514 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1fe0e:	4b04      	ldr	r3, [pc, #16]	; (1fe20 <gpio_nrfx_init+0x2c>)
   1fe10:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1fe14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1fe18:	2000      	movs	r0, #0
   1fe1a:	bd08      	pop	{r3, pc}
   1fe1c:	20009162 	.word	0x20009162
   1fe20:	40006000 	.word	0x40006000

0001fe24 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1fe24:	4b2b      	ldr	r3, [pc, #172]	; (1fed4 <gpio_nrfx_config+0xb0>)
{
   1fe26:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fe28:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1fe2a:	482b      	ldr	r0, [pc, #172]	; (1fed8 <gpio_nrfx_config+0xb4>)
   1fe2c:	4013      	ands	r3, r2
   1fe2e:	4283      	cmp	r3, r0
   1fe30:	d041      	beq.n	1feb6 <gpio_nrfx_config+0x92>
   1fe32:	d80d      	bhi.n	1fe50 <gpio_nrfx_config+0x2c>
   1fe34:	2b06      	cmp	r3, #6
   1fe36:	d015      	beq.n	1fe64 <gpio_nrfx_config+0x40>
   1fe38:	d805      	bhi.n	1fe46 <gpio_nrfx_config+0x22>
   1fe3a:	b19b      	cbz	r3, 1fe64 <gpio_nrfx_config+0x40>
   1fe3c:	2b02      	cmp	r3, #2
   1fe3e:	d03c      	beq.n	1feba <gpio_nrfx_config+0x96>
   1fe40:	f06f 0015 	mvn.w	r0, #21
   1fe44:	e036      	b.n	1feb4 <gpio_nrfx_config+0x90>
   1fe46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1fe4a:	d1f9      	bne.n	1fe40 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1fe4c:	2301      	movs	r3, #1
   1fe4e:	e009      	b.n	1fe64 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1fe50:	4822      	ldr	r0, [pc, #136]	; (1fedc <gpio_nrfx_config+0xb8>)
   1fe52:	4283      	cmp	r3, r0
   1fe54:	d033      	beq.n	1febe <gpio_nrfx_config+0x9a>
   1fe56:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1fe5a:	d032      	beq.n	1fec2 <gpio_nrfx_config+0x9e>
   1fe5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1fe60:	d1ee      	bne.n	1fe40 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1fe62:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1fe64:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1fe66:	bf54      	ite	pl
   1fe68:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1fe6c:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1fe6e:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1fe72:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1fe74:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1fe78:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1fe7c:	d507      	bpl.n	1fe8e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1fe7e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fe82:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1fe84:	d01f      	beq.n	1fec6 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1fe86:	2201      	movs	r2, #1
   1fe88:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1fe8a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1fe8e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1fe90:	4c13      	ldr	r4, [pc, #76]	; (1fee0 <gpio_nrfx_config+0xbc>)
   1fe92:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1fe94:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1fe98:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1fe9c:	bf18      	it	ne
   1fe9e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1fea2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1fea6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1feaa:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1feae:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1feb2:	2000      	movs	r0, #0
}
   1feb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1feb6:	2307      	movs	r3, #7
   1feb8:	e7d4      	b.n	1fe64 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1feba:	2304      	movs	r3, #4
   1febc:	e7d2      	b.n	1fe64 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1febe:	2305      	movs	r3, #5
   1fec0:	e7d0      	b.n	1fe64 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1fec2:	2303      	movs	r3, #3
   1fec4:	e7ce      	b.n	1fe64 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1fec6:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1fec8:	bf42      	ittt	mi
   1feca:	2201      	movmi	r2, #1
   1fecc:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1fece:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1fed2:	e7dc      	b.n	1fe8e <gpio_nrfx_config+0x6a>
   1fed4:	00f00006 	.word	0x00f00006
   1fed8:	00100006 	.word	0x00100006
   1fedc:	00400002 	.word	0x00400002
   1fee0:	50000300 	.word	0x50000300

0001fee4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1fee4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1fee8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1feea:	4b08      	ldr	r3, [pc, #32]	; (1ff0c <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1feec:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1feee:	bf18      	it	ne
   1fef0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1fef4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1fef8:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1fefc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1ff00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1ff04:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1ff08:	4770      	bx	lr
   1ff0a:	bf00      	nop
   1ff0c:	50000300 	.word	0x50000300

0001ff10 <gpio_nrfx_pin_interrupt_configure>:
{
   1ff10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff12:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ff14:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1ff16:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1ff18:	7a08      	ldrb	r0, [r1, #8]
   1ff1a:	f005 061f 	and.w	r6, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1ff1e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1ff22:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
   1ff26:	d110      	bne.n	1ff4a <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   1ff28:	0970      	lsrs	r0, r6, #5
        case 1: return NRF_P1;
   1ff2a:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1ff2c:	f006 011f 	and.w	r1, r6, #31
        case 1: return NRF_P1;
   1ff30:	486b      	ldr	r0, [pc, #428]	; (200e0 <gpio_nrfx_pin_interrupt_configure+0x1d0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1ff32:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   1ff36:	bf18      	it	ne
   1ff38:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1ff3c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1ff40:	07cc      	lsls	r4, r1, #31
   1ff42:	d507      	bpl.n	1ff54 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   1ff44:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1ff48:	e0bd      	b.n	200c6 <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1ff4a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1ff4e:	68f9      	ldr	r1, [r7, #12]
   1ff50:	f000 80aa 	beq.w	200a8 <gpio_nrfx_pin_interrupt_configure+0x198>
   1ff54:	68f8      	ldr	r0, [r7, #12]
   1ff56:	2101      	movs	r1, #1
   1ff58:	40a9      	lsls	r1, r5
   1ff5a:	4301      	orrs	r1, r0
   1ff5c:	6978      	ldr	r0, [r7, #20]
   1ff5e:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1ff60:	2101      	movs	r1, #1
   1ff62:	40a9      	lsls	r1, r5
   1ff64:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1ff68:	69ba      	ldr	r2, [r7, #24]
   1ff6a:	bf0c      	ite	eq
   1ff6c:	4308      	orreq	r0, r1
   1ff6e:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1ff70:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1ff74:	bf0c      	ite	eq
   1ff76:	430a      	orreq	r2, r1
   1ff78:	438a      	bicne	r2, r1
   1ff7a:	61ba      	str	r2, [r7, #24]
   1ff7c:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1ff7e:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1ff80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1ff84:	bf0c      	ite	eq
   1ff86:	4311      	orreq	r1, r2
   1ff88:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1ff8c:	4a55      	ldr	r2, [pc, #340]	; (200e4 <gpio_nrfx_pin_interrupt_configure+0x1d4>)
   1ff8e:	6139      	str	r1, [r7, #16]
   1ff90:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1ff94:	2300      	movs	r3, #0
   1ff96:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1ff98:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1ff9c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   1ffa0:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1ffa4:	4286      	cmp	r6, r0
   1ffa6:	f040 8084 	bne.w	200b2 <gpio_nrfx_pin_interrupt_configure+0x1a2>
		    && (intenset & BIT(i))) {
   1ffaa:	fa21 f003 	lsr.w	r0, r1, r3
   1ffae:	07c0      	lsls	r0, r0, #31
   1ffb0:	d57f      	bpl.n	200b2 <gpio_nrfx_pin_interrupt_configure+0x1a2>
			(void)atomic_and(mask, ~BIT(i));
   1ffb2:	2101      	movs	r1, #1
   1ffb4:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ffb6:	484c      	ldr	r0, [pc, #304]	; (200e8 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
   1ffb8:	f3bf 8f5b 	dmb	ish
   1ffbc:	43cc      	mvns	r4, r1
   1ffbe:	e850 cf00 	ldrex	ip, [r0]
   1ffc2:	ea0c 0c04 	and.w	ip, ip, r4
   1ffc6:	e840 ce00 	strex	lr, ip, [r0]
   1ffca:	f1be 0f00 	cmp.w	lr, #0
   1ffce:	d1f6      	bne.n	1ffbe <gpio_nrfx_pin_interrupt_configure+0xae>
   1ffd0:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1ffd4:	009b      	lsls	r3, r3, #2
   1ffd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ffda:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1ffde:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1ffe2:	f020 0001 	bic.w	r0, r0, #1
   1ffe6:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1ffea:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1ffee:	2100      	movs	r1, #0
   1fff0:	4630      	mov	r0, r6
   1fff2:	f7ff ff77 	bl	1fee4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1fff6:	68fb      	ldr	r3, [r7, #12]
   1fff8:	40eb      	lsrs	r3, r5
   1fffa:	f013 0301 	ands.w	r3, r3, #1
   1fffe:	d051      	beq.n	200a4 <gpio_nrfx_pin_interrupt_configure+0x194>
		if (data->trig_edge & BIT(pin)) {
   20000:	697b      	ldr	r3, [r7, #20]
   20002:	40eb      	lsrs	r3, r5
   20004:	f013 0401 	ands.w	r4, r3, #1
   20008:	d05e      	beq.n	200c8 <gpio_nrfx_pin_interrupt_configure+0x1b8>
			if (data->double_edge & BIT(pin)) {
   2000a:	69bb      	ldr	r3, [r7, #24]
   2000c:	40eb      	lsrs	r3, r5
   2000e:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   20010:	bf5f      	itttt	pl
   20012:	6939      	ldrpl	r1, [r7, #16]
   20014:	fa21 f505 	lsrpl.w	r5, r1, r5
   20018:	f005 0501 	andpl.w	r5, r5, #1
   2001c:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20020:	4931      	ldr	r1, [pc, #196]	; (200e8 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
   20022:	bf54      	ite	pl
   20024:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   20026:	2503      	movmi	r5, #3
   20028:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   2002a:	2701      	movs	r7, #1
   2002c:	fa07 f402 	lsl.w	r4, r7, r2
   20030:	f3bf 8f5b 	dmb	ish
   20034:	e851 0f00 	ldrex	r0, [r1]
   20038:	ea40 0304 	orr.w	r3, r0, r4
   2003c:	e841 3c00 	strex	ip, r3, [r1]
   20040:	f1bc 0f00 	cmp.w	ip, #0
   20044:	d1f6      	bne.n	20034 <gpio_nrfx_pin_interrupt_configure+0x124>
   20046:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   2004a:	40d0      	lsrs	r0, r2
   2004c:	f010 0301 	ands.w	r3, r0, #1
   20050:	d134      	bne.n	200bc <gpio_nrfx_pin_interrupt_configure+0x1ac>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   20052:	0091      	lsls	r1, r2, #2
   20054:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20058:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   2005c:	3240      	adds	r2, #64	; 0x40
   2005e:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   20062:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   20066:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   2006a:	0092      	lsls	r2, r2, #2
   2006c:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20070:	0236      	lsls	r6, r6, #8
    return ((uint32_t)p_reg + event);
   20072:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20074:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   20078:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
   2007c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20080:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   20084:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   20088:	4306      	orrs	r6, r0
   2008a:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2008e:	6013      	str	r3, [r2, #0]
   20090:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   20092:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   20096:	f042 0201 	orr.w	r2, r2, #1
   2009a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   2009e:	4a11      	ldr	r2, [pc, #68]	; (200e4 <gpio_nrfx_pin_interrupt_configure+0x1d4>)
   200a0:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
	int res = 0;
   200a4:	4618      	mov	r0, r3
   200a6:	e00e      	b.n	200c6 <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   200a8:	2001      	movs	r0, #1
   200aa:	40a8      	lsls	r0, r5
   200ac:	ea21 0100 	bic.w	r1, r1, r0
   200b0:	e754      	b.n	1ff5c <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   200b2:	3301      	adds	r3, #1
   200b4:	2b08      	cmp	r3, #8
   200b6:	f47f af6f 	bne.w	1ff98 <gpio_nrfx_pin_interrupt_configure+0x88>
   200ba:	e798      	b.n	1ffee <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   200bc:	3201      	adds	r2, #1
   200be:	2a08      	cmp	r2, #8
   200c0:	d1b4      	bne.n	2002c <gpio_nrfx_pin_interrupt_configure+0x11c>
	return -ENODEV;
   200c2:	f06f 0012 	mvn.w	r0, #18
}
   200c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   200c8:	6939      	ldr	r1, [r7, #16]
   200ca:	40e9      	lsrs	r1, r5
   200cc:	f001 0101 	and.w	r1, r1, #1
   200d0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   200d4:	4630      	mov	r0, r6
   200d6:	b2c9      	uxtb	r1, r1
   200d8:	f7ff ff04 	bl	1fee4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   200dc:	4620      	mov	r0, r4
   200de:	e7f2      	b.n	200c6 <gpio_nrfx_pin_interrupt_configure+0x1b6>
   200e0:	50000300 	.word	0x50000300
   200e4:	40006000 	.word	0x40006000
   200e8:	20003ef8 	.word	0x20003ef8

000200ec <gpiote_event_handler>:
{
   200ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   200ee:	2600      	movs	r6, #0
   200f0:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   200f4:	4d26      	ldr	r5, [pc, #152]	; (20190 <gpiote_event_handler+0xa4>)
   200f6:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   200f8:	b14c      	cbz	r4, 2010e <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   200fa:	4826      	ldr	r0, [pc, #152]	; (20194 <gpiote_event_handler+0xa8>)
   200fc:	f00c f8e4 	bl	2c2c8 <check_level_trigger_pins>
		fired_triggers[0] =
   20100:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
   20102:	4825      	ldr	r0, [pc, #148]	; (20198 <gpiote_event_handler+0xac>)
   20104:	f00c f8e0 	bl	2c2c8 <check_level_trigger_pins>
		fired_triggers[1] =
   20108:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2010a:	602e      	str	r6, [r5, #0]
   2010c:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   2010e:	4d23      	ldr	r5, [pc, #140]	; (2019c <gpiote_event_handler+0xb0>)
{
   20110:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   20112:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   20114:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   20116:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   2011a:	fa06 f102 	lsl.w	r1, r6, r2
   2011e:	4219      	tst	r1, r3
   20120:	d01b      	beq.n	2015a <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20122:	0091      	lsls	r1, r2, #2
   20124:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   20128:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   2012c:	680b      	ldr	r3, [r1, #0]
   2012e:	b1a3      	cbz	r3, 2015a <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   20130:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   20134:	af02      	add	r7, sp, #8
   20136:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2013a:	f8c1 c000 	str.w	ip, [r1]
   2013e:	f3c3 3040 	ubfx	r0, r3, #13, #1
   20142:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   20146:	f3c3 2304 	ubfx	r3, r3, #8, #5
   2014a:	f850 7c08 	ldr.w	r7, [r0, #-8]
   2014e:	fa06 f303 	lsl.w	r3, r6, r3
   20152:	433b      	orrs	r3, r7
   20154:	f840 3c08 	str.w	r3, [r0, #-8]
   20158:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2015a:	3201      	adds	r2, #1
   2015c:	2a08      	cmp	r2, #8
   2015e:	d1da      	bne.n	20116 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   20160:	9a00      	ldr	r2, [sp, #0]
   20162:	b11a      	cbz	r2, 2016c <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   20164:	490b      	ldr	r1, [pc, #44]	; (20194 <gpiote_event_handler+0xa8>)
   20166:	480e      	ldr	r0, [pc, #56]	; (201a0 <gpiote_event_handler+0xb4>)
   20168:	f00c f84b 	bl	2c202 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   2016c:	9a01      	ldr	r2, [sp, #4]
   2016e:	b11a      	cbz	r2, 20178 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   20170:	4909      	ldr	r1, [pc, #36]	; (20198 <gpiote_event_handler+0xac>)
   20172:	480c      	ldr	r0, [pc, #48]	; (201a4 <gpiote_event_handler+0xb8>)
   20174:	f00c f845 	bl	2c202 <gpio_fire_callbacks>
	if (port_event) {
   20178:	b144      	cbz	r4, 2018c <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   2017a:	4806      	ldr	r0, [pc, #24]	; (20194 <gpiote_event_handler+0xa8>)
   2017c:	f00c f8cd 	bl	2c31a <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   20180:	4805      	ldr	r0, [pc, #20]	; (20198 <gpiote_event_handler+0xac>)
}
   20182:	b003      	add	sp, #12
   20184:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   20188:	f00c b8c7 	b.w	2c31a <cfg_level_pins>
}
   2018c:	b003      	add	sp, #12
   2018e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20190:	4000617c 	.word	0x4000617c
   20194:	20000c60 	.word	0x20000c60
   20198:	20000c70 	.word	0x20000c70
   2019c:	40006000 	.word	0x40006000
   201a0:	20003ec4 	.word	0x20003ec4
   201a4:	20003ee0 	.word	0x20003ee0

000201a8 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   201a8:	b510      	push	{r4, lr}
   201aa:	4604      	mov	r4, r0
   201ac:	2200      	movs	r2, #0
   201ae:	2101      	movs	r1, #1
   201b0:	2003      	movs	r0, #3
   201b2:	f7e6 f9e1 	bl	6578 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   201b6:	6860      	ldr	r0, [r4, #4]
   201b8:	68e3      	ldr	r3, [r4, #12]
   201ba:	4a06      	ldr	r2, [pc, #24]	; (201d4 <twim_0_init+0x2c>)
   201bc:	f100 0108 	add.w	r1, r0, #8
   201c0:	f002 fb42 	bl	22848 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   201c4:	4b04      	ldr	r3, [pc, #16]	; (201d8 <twim_0_init+0x30>)
   201c6:	4298      	cmp	r0, r3
I2C_NRFX_TWIM_DEVICE(0);
   201c8:	bf14      	ite	ne
   201ca:	f06f 000f 	mvnne.w	r0, #15
   201ce:	2000      	moveq	r0, #0
   201d0:	bd10      	pop	{r4, pc}
   201d2:	bf00      	nop
   201d4:	000201dd 	.word	0x000201dd
   201d8:	0bad0000 	.word	0x0bad0000

000201dc <event_handler>:
	switch (p_event->type) {
   201dc:	7803      	ldrb	r3, [r0, #0]
   201de:	2b01      	cmp	r3, #1
   201e0:	d008      	beq.n	201f4 <event_handler+0x18>
   201e2:	2b02      	cmp	r3, #2
   201e4:	d008      	beq.n	201f8 <event_handler+0x1c>
   201e6:	b94b      	cbnz	r3, 201fc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   201e8:	4b05      	ldr	r3, [pc, #20]	; (20200 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   201ea:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   201ec:	f101 0018 	add.w	r0, r1, #24
   201f0:	f003 bc60 	b.w	23ab4 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   201f4:	4b03      	ldr	r3, [pc, #12]	; (20204 <event_handler+0x28>)
   201f6:	e7f8      	b.n	201ea <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   201f8:	4b03      	ldr	r3, [pc, #12]	; (20208 <event_handler+0x2c>)
   201fa:	e7f6      	b.n	201ea <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   201fc:	4b03      	ldr	r3, [pc, #12]	; (2020c <event_handler+0x30>)
   201fe:	e7f4      	b.n	201ea <event_handler+0xe>
   20200:	0bad0000 	.word	0x0bad0000
   20204:	0bae0001 	.word	0x0bae0001
   20208:	0bae0002 	.word	0x0bae0002
   2020c:	0bad0001 	.word	0x0bad0001

00020210 <i2c_nrfx_twim_transfer>:
{
   20210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   20214:	68c4      	ldr	r4, [r0, #12]
{
   20216:	b089      	sub	sp, #36	; 0x24
   20218:	461d      	mov	r5, r3
   2021a:	4606      	mov	r6, r0
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   2021c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   2021e:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   20222:	9300      	str	r3, [sp, #0]
{
   20224:	4689      	mov	r9, r1
   20226:	4692      	mov	sl, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   20228:	2100      	movs	r1, #0
   2022a:	2214      	movs	r2, #20
   2022c:	a803      	add	r0, sp, #12
   2022e:	f006 fbe3 	bl	269f8 <memset>
   20232:	f88d 500d 	strb.w	r5, [sp, #13]
	return z_impl_k_sem_take(sem, timeout);
   20236:	f04f 32ff 	mov.w	r2, #4294967295
   2023a:	f04f 33ff 	mov.w	r3, #4294967295
   2023e:	4620      	mov	r0, r4
   20240:	f003 fc5e 	bl	23b00 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   20244:	68f0      	ldr	r0, [r6, #12]
   20246:	3018      	adds	r0, #24
   20248:	2200      	movs	r2, #0
   2024a:	2300      	movs	r3, #0
   2024c:	f003 fc58 	bl	23b00 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   20250:	6870      	ldr	r0, [r6, #4]
		if (res != NRFX_SUCCESS) {
   20252:	f8df b124 	ldr.w	fp, [pc, #292]	; 20378 <i2c_nrfx_twim_transfer+0x168>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   20256:	f002 fb51 	bl	228fc <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   2025a:	2700      	movs	r7, #0
   2025c:	464d      	mov	r5, r9
	uint32_t concat_len = 0;
   2025e:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   20260:	4557      	cmp	r7, sl
   20262:	d301      	bcc.n	20268 <i2c_nrfx_twim_transfer+0x58>
   20264:	2400      	movs	r4, #0
   20266:	e02e      	b.n	202c6 <i2c_nrfx_twim_transfer+0xb6>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   20268:	7a29      	ldrb	r1, [r5, #8]
   2026a:	070b      	lsls	r3, r1, #28
   2026c:	d478      	bmi.n	20360 <i2c_nrfx_twim_transfer+0x150>
			&& ((msgs[i].flags & I2C_MSG_READ)
   2026e:	9b00      	ldr	r3, [sp, #0]
   20270:	b16b      	cbz	r3, 2028e <i2c_nrfx_twim_transfer+0x7e>
			&& ((i + 1) < num_msgs)
   20272:	1c7b      	adds	r3, r7, #1
   20274:	4553      	cmp	r3, sl
   20276:	d20a      	bcs.n	2028e <i2c_nrfx_twim_transfer+0x7e>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   20278:	0788      	lsls	r0, r1, #30
   2027a:	d408      	bmi.n	2028e <i2c_nrfx_twim_transfer+0x7e>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   2027c:	7d2b      	ldrb	r3, [r5, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   2027e:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   20282:	f002 0201 	and.w	r2, r2, #1
   20286:	f003 0304 	and.w	r3, r3, #4
   2028a:	4313      	orrs	r3, r2
   2028c:	d025      	beq.n	202da <i2c_nrfx_twim_transfer+0xca>
		if (concat_next || (concat_len != 0)) {
   2028e:	2c00      	cmp	r4, #0
   20290:	d13c      	bne.n	2030c <i2c_nrfx_twim_transfer+0xfc>
			cur_xfer.p_primary_buf = msgs[i].buf;
   20292:	682b      	ldr	r3, [r5, #0]
   20294:	9306      	str	r3, [sp, #24]
			cur_xfer.primary_length = msgs[i].len;
   20296:	686b      	ldr	r3, [r5, #4]
   20298:	9304      	str	r3, [sp, #16]
   2029a:	2400      	movs	r4, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   2029c:	7a2b      	ldrb	r3, [r5, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   2029e:	6870      	ldr	r0, [r6, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   202a0:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   202a4:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   202a8:	f88d 200c 	strb.w	r2, [sp, #12]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   202ac:	a903      	add	r1, sp, #12
   202ae:	bf0c      	ite	eq
   202b0:	2220      	moveq	r2, #32
   202b2:	2200      	movne	r2, #0
   202b4:	f002 fb4e 	bl	22954 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   202b8:	4558      	cmp	r0, fp
   202ba:	d029      	beq.n	20310 <i2c_nrfx_twim_transfer+0x100>
			if (res == NRFX_ERROR_BUSY) {
   202bc:	4b2d      	ldr	r3, [pc, #180]	; (20374 <i2c_nrfx_twim_transfer+0x164>)
   202be:	4298      	cmp	r0, r3
   202c0:	d054      	beq.n	2036c <i2c_nrfx_twim_transfer+0x15c>
				ret = -EIO;
   202c2:	f06f 0404 	mvn.w	r4, #4
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   202c6:	6870      	ldr	r0, [r6, #4]
   202c8:	f002 fb28 	bl	2291c <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   202cc:	68f0      	ldr	r0, [r6, #12]
	z_impl_k_sem_give(sem);
   202ce:	f003 fbf1 	bl	23ab4 <z_impl_k_sem_give>
}
   202d2:	4620      	mov	r0, r4
   202d4:	b009      	add	sp, #36	; 0x24
   202d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   202da:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   202dc:	686a      	ldr	r2, [r5, #4]
   202de:	9800      	ldr	r0, [sp, #0]
   202e0:	eb02 0c04 	add.w	ip, r2, r4
   202e4:	4584      	cmp	ip, r0
   202e6:	d83e      	bhi.n	20366 <i2c_nrfx_twim_transfer+0x156>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   202e8:	07c9      	lsls	r1, r1, #31
   202ea:	d406      	bmi.n	202fa <i2c_nrfx_twim_transfer+0xea>
				memcpy(concat_buf + concat_len,
   202ec:	6829      	ldr	r1, [r5, #0]
   202ee:	9301      	str	r3, [sp, #4]
   202f0:	eb08 0004 	add.w	r0, r8, r4
   202f4:	f006 fb55 	bl	269a2 <memcpy>
   202f8:	9b01      	ldr	r3, [sp, #4]
			concat_len += msgs[i].len;
   202fa:	686a      	ldr	r2, [r5, #4]
   202fc:	4414      	add	r4, r2
		if (concat_next) {
   202fe:	b9c3      	cbnz	r3, 20332 <i2c_nrfx_twim_transfer+0x122>
		if (concat_len == 0) {
   20300:	2c00      	cmp	r4, #0
   20302:	d0c6      	beq.n	20292 <i2c_nrfx_twim_transfer+0x82>
			cur_xfer.p_primary_buf = concat_buf;
   20304:	f8cd 8018 	str.w	r8, [sp, #24]
			cur_xfer.primary_length = concat_len;
   20308:	9404      	str	r4, [sp, #16]
   2030a:	e7c7      	b.n	2029c <i2c_nrfx_twim_transfer+0x8c>
			&& ((msgs[i].flags & I2C_MSG_READ)
   2030c:	2300      	movs	r3, #0
   2030e:	e7e5      	b.n	202dc <i2c_nrfx_twim_transfer+0xcc>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   20310:	68f0      	ldr	r0, [r6, #12]
   20312:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   20314:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20318:	2300      	movs	r3, #0
   2031a:	f003 fbf1 	bl	23b00 <z_impl_k_sem_take>
		if (ret != 0) {
   2031e:	2800      	cmp	r0, #0
   20320:	d1cf      	bne.n	202c2 <i2c_nrfx_twim_transfer+0xb2>
		res = get_dev_data(dev)->res;
   20322:	68f3      	ldr	r3, [r6, #12]
   20324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   20326:	455b      	cmp	r3, fp
   20328:	d1cb      	bne.n	202c2 <i2c_nrfx_twim_transfer+0xb2>
		if ((msgs[i].flags & I2C_MSG_READ)
   2032a:	7a2b      	ldrb	r3, [r5, #8]
   2032c:	07db      	lsls	r3, r3, #31
   2032e:	d403      	bmi.n	20338 <i2c_nrfx_twim_transfer+0x128>
		concat_len = 0;
   20330:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   20332:	3701      	adds	r7, #1
   20334:	350c      	adds	r5, #12
   20336:	e793      	b.n	20260 <i2c_nrfx_twim_transfer+0x50>
		    && cur_xfer.p_primary_buf == concat_buf) {
   20338:	9b06      	ldr	r3, [sp, #24]
   2033a:	4598      	cmp	r8, r3
   2033c:	d1f8      	bne.n	20330 <i2c_nrfx_twim_transfer+0x120>
			while (concat_len >= msgs[j].len) {
   2033e:	230c      	movs	r3, #12
   20340:	fb03 9307 	mla	r3, r3, r7, r9
   20344:	685a      	ldr	r2, [r3, #4]
   20346:	4294      	cmp	r4, r2
   20348:	f1a3 030c 	sub.w	r3, r3, #12
   2034c:	d3f0      	bcc.n	20330 <i2c_nrfx_twim_transfer+0x120>
				concat_len -= msgs[j].len;
   2034e:	1aa4      	subs	r4, r4, r2
				memcpy(msgs[j].buf,
   20350:	68d8      	ldr	r0, [r3, #12]
   20352:	9301      	str	r3, [sp, #4]
   20354:	eb08 0104 	add.w	r1, r8, r4
   20358:	f006 fb23 	bl	269a2 <memcpy>
   2035c:	9b01      	ldr	r3, [sp, #4]
				j--;
   2035e:	e7f1      	b.n	20344 <i2c_nrfx_twim_transfer+0x134>
			ret = -ENOTSUP;
   20360:	f06f 0422 	mvn.w	r4, #34	; 0x22
   20364:	e7af      	b.n	202c6 <i2c_nrfx_twim_transfer+0xb6>
				ret = -ENOSPC;
   20366:	f06f 041b 	mvn.w	r4, #27
   2036a:	e7ac      	b.n	202c6 <i2c_nrfx_twim_transfer+0xb6>
				ret = -EBUSY;
   2036c:	f06f 040f 	mvn.w	r4, #15
   20370:	e7a9      	b.n	202c6 <i2c_nrfx_twim_transfer+0xb6>
   20372:	bf00      	nop
   20374:	0bad000b 	.word	0x0bad000b
   20378:	0bad0000 	.word	0x0bad0000

0002037c <apds9960_init>:
	return ret;
}
#endif

static int apds9960_init(const struct device *dev)
{
   2037c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct apds9960_config *config = dev->config;
   20380:	6846      	ldr	r6, [r0, #4]
	struct apds9960_data *data = dev->data;
   20382:	68c5      	ldr	r5, [r0, #12]
{
   20384:	b08b      	sub	sp, #44	; 0x2c
   20386:	4604      	mov	r4, r0
	return z_impl_k_sleep(timeout);
   20388:	2100      	movs	r1, #0
   2038a:	20c5      	movs	r0, #197	; 0xc5
   2038c:	f003 fb6c 	bl	23a68 <z_impl_k_sleep>

	/* Initialize time 5.7ms */
	k_sleep(K_MSEC(6));
	data->i2c = device_get_binding(config->i2c_name);
   20390:	6830      	ldr	r0, [r6, #0]
   20392:	f002 fd55 	bl	22e40 <z_impl_device_get_binding>
   20396:	6028      	str	r0, [r5, #0]

	if (data->i2c == NULL) {
   20398:	2800      	cmp	r0, #0
   2039a:	f000 8185 	beq.w	206a8 <apds9960_init+0x32c>
		LOG_ERR("Failed to get pointer to %s device!",
			config->i2c_name);
		return -EINVAL;
	}

	(void)memset(data->sample_crgb, 0, sizeof(data->sample_crgb));
   2039e:	2208      	movs	r2, #8
   203a0:	2100      	movs	r1, #0
   203a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
   203a6:	f006 fb27 	bl	269f8 <memset>
	data->pdata = 0U;
   203aa:	2300      	movs	r3, #0
   203ac:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	const struct apds9960_config *config = dev->config;
   203b0:	6866      	ldr	r6, [r4, #4]
	struct apds9960_data *data = dev->data;
   203b2:	68e5      	ldr	r5, [r4, #12]
	if (i2c_reg_read_byte(data->i2c, config->i2c_address,
   203b4:	7c31      	ldrb	r1, [r6, #16]
   203b6:	6828      	ldr	r0, [r5, #0]
   203b8:	ab03      	add	r3, sp, #12
   203ba:	2292      	movs	r2, #146	; 0x92
   203bc:	f00c f841 	bl	2c442 <i2c_reg_read_byte>
   203c0:	2800      	cmp	r0, #0
   203c2:	d149      	bne.n	20458 <apds9960_init+0xdc>
	if (!((chip_id == APDS9960_ID_1) || (chip_id == APDS9960_ID_2))) {
   203c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   203c8:	2bab      	cmp	r3, #171	; 0xab
   203ca:	d001      	beq.n	203d0 <apds9960_init+0x54>
   203cc:	2b9c      	cmp	r3, #156	; 0x9c
   203ce:	d143      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   203d0:	2300      	movs	r3, #0
   203d2:	7c31      	ldrb	r1, [r6, #16]
   203d4:	6828      	ldr	r0, [r5, #0]
   203d6:	2280      	movs	r2, #128	; 0x80
   203d8:	f00c f820 	bl	2c41c <i2c_reg_write_byte>
   203dc:	4603      	mov	r3, r0
   203de:	2800      	cmp	r0, #0
   203e0:	d13a      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   203e2:	7c31      	ldrb	r1, [r6, #16]
   203e4:	6828      	ldr	r0, [r5, #0]
   203e6:	22e7      	movs	r2, #231	; 0xe7
   203e8:	f00c f818 	bl	2c41c <i2c_reg_write_byte>
   203ec:	4603      	mov	r3, r0
   203ee:	2800      	cmp	r0, #0
   203f0:	d132      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   203f2:	7c31      	ldrb	r1, [r6, #16]
   203f4:	6828      	ldr	r0, [r5, #0]
   203f6:	22ab      	movs	r2, #171	; 0xab
   203f8:	f00c f810 	bl	2c41c <i2c_reg_write_byte>
   203fc:	bb60      	cbnz	r0, 20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   203fe:	7c31      	ldrb	r1, [r6, #16]
   20400:	6828      	ldr	r0, [r5, #0]
   20402:	23ff      	movs	r3, #255	; 0xff
   20404:	2283      	movs	r2, #131	; 0x83
   20406:	f00c f809 	bl	2c41c <i2c_reg_write_byte>
   2040a:	bb28      	cbnz	r0, 20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   2040c:	7c31      	ldrb	r1, [r6, #16]
   2040e:	6828      	ldr	r0, [r5, #0]
   20410:	2360      	movs	r3, #96	; 0x60
   20412:	228d      	movs	r2, #141	; 0x8d
   20414:	f00c f802 	bl	2c41c <i2c_reg_write_byte>
   20418:	b9f0      	cbnz	r0, 20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   2041a:	7c31      	ldrb	r1, [r6, #16]
   2041c:	6828      	ldr	r0, [r5, #0]
   2041e:	2341      	movs	r3, #65	; 0x41
   20420:	2290      	movs	r2, #144	; 0x90
   20422:	f00b fffb 	bl	2c41c <i2c_reg_write_byte>
   20426:	b9b8      	cbnz	r0, 20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   20428:	7c31      	ldrb	r1, [r6, #16]
   2042a:	6828      	ldr	r0, [r5, #0]
   2042c:	2310      	movs	r3, #16
   2042e:	229f      	movs	r2, #159	; 0x9f
   20430:	f00b fff4 	bl	2c41c <i2c_reg_write_byte>
   20434:	b980      	cbnz	r0, 20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   20436:	2310      	movs	r3, #16
   20438:	7c31      	ldrb	r1, [r6, #16]
   2043a:	6828      	ldr	r0, [r5, #0]
   2043c:	228c      	movs	r2, #140	; 0x8c
   2043e:	f00b ffed 	bl	2c41c <i2c_reg_write_byte>
   20442:	4603      	mov	r3, r0
   20444:	b940      	cbnz	r0, 20458 <apds9960_init+0xdc>
	const struct apds9960_config *config = dev->config;
   20446:	6865      	ldr	r5, [r4, #4]
	struct apds9960_data *data = dev->data;
   20448:	68e6      	ldr	r6, [r4, #12]
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   2044a:	7c29      	ldrb	r1, [r5, #16]
   2044c:	6830      	ldr	r0, [r6, #0]
   2044e:	229d      	movs	r2, #157	; 0x9d
   20450:	f00b ffe4 	bl	2c41c <i2c_reg_write_byte>
   20454:	4603      	mov	r3, r0
   20456:	b128      	cbz	r0, 20464 <apds9960_init+0xe8>
		return -EIO;
	}

	if (apds9960_init_interrupt(dev) < 0) {
		LOG_ERR("Failed to initialize interrupt!");
		return -EIO;
   20458:	f06f 0604 	mvn.w	r6, #4
	}

	return 0;
}
   2045c:	4630      	mov	r0, r6
   2045e:	b00b      	add	sp, #44	; 0x2c
   20460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   20464:	7c29      	ldrb	r1, [r5, #16]
   20466:	6830      	ldr	r0, [r6, #0]
   20468:	229e      	movs	r2, #158	; 0x9e
   2046a:	f00b ffd7 	bl	2c41c <i2c_reg_write_byte>
   2046e:	2800      	cmp	r0, #0
   20470:	d1f2      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   20472:	7ceb      	ldrb	r3, [r5, #19]
   20474:	7c29      	ldrb	r1, [r5, #16]
   20476:	6830      	ldr	r0, [r6, #0]
   20478:	228e      	movs	r2, #142	; 0x8e
   2047a:	f00b ffcf 	bl	2c41c <i2c_reg_write_byte>
   2047e:	2800      	cmp	r0, #0
   20480:	d1ea      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   20482:	7c29      	ldrb	r1, [r5, #16]
   20484:	9000      	str	r0, [sp, #0]
   20486:	6830      	ldr	r0, [r6, #0]
   20488:	23c0      	movs	r3, #192	; 0xc0
   2048a:	228f      	movs	r2, #143	; 0x8f
   2048c:	f00b fff2 	bl	2c474 <i2c_reg_update_byte>
   20490:	2800      	cmp	r0, #0
   20492:	d1e1      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   20494:	7d2b      	ldrb	r3, [r5, #20]
   20496:	7c29      	ldrb	r1, [r5, #16]
   20498:	9300      	str	r3, [sp, #0]
   2049a:	6830      	ldr	r0, [r6, #0]
   2049c:	2330      	movs	r3, #48	; 0x30
   2049e:	2290      	movs	r2, #144	; 0x90
   204a0:	f00b ffe8 	bl	2c474 <i2c_reg_update_byte>
   204a4:	2800      	cmp	r0, #0
   204a6:	d1d7      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   204a8:	7c6b      	ldrb	r3, [r5, #17]
   204aa:	7c29      	ldrb	r1, [r5, #16]
   204ac:	f003 030c 	and.w	r3, r3, #12
   204b0:	9300      	str	r3, [sp, #0]
   204b2:	6830      	ldr	r0, [r6, #0]
   204b4:	230c      	movs	r3, #12
   204b6:	228f      	movs	r2, #143	; 0x8f
   204b8:	f00b ffdc 	bl	2c474 <i2c_reg_update_byte>
   204bc:	4603      	mov	r3, r0
   204be:	2800      	cmp	r0, #0
   204c0:	d1ca      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   204c2:	7c29      	ldrb	r1, [r5, #16]
   204c4:	6830      	ldr	r0, [r6, #0]
   204c6:	2289      	movs	r2, #137	; 0x89
   204c8:	f00b ffa8 	bl	2c41c <i2c_reg_write_byte>
   204cc:	2800      	cmp	r0, #0
   204ce:	d1c3      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   204d0:	7c29      	ldrb	r1, [r5, #16]
   204d2:	6830      	ldr	r0, [r6, #0]
   204d4:	2301      	movs	r3, #1
   204d6:	228b      	movs	r2, #139	; 0x8b
   204d8:	f00b ffa0 	bl	2c41c <i2c_reg_write_byte>
   204dc:	2800      	cmp	r0, #0
   204de:	d1bb      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   204e0:	2304      	movs	r3, #4
   204e2:	7c29      	ldrb	r1, [r5, #16]
   204e4:	9300      	str	r3, [sp, #0]
   204e6:	6830      	ldr	r0, [r6, #0]
   204e8:	2280      	movs	r2, #128	; 0x80
   204ea:	f00b ffc3 	bl	2c474 <i2c_reg_update_byte>
   204ee:	2800      	cmp	r0, #0
   204f0:	d1b2      	bne.n	20458 <apds9960_init+0xdc>
	const struct apds9960_config *config = dev->config;
   204f2:	6865      	ldr	r5, [r4, #4]
	struct apds9960_data *data = dev->data;
   204f4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   204f8:	7c29      	ldrb	r1, [r5, #16]
   204fa:	f8d8 0000 	ldr.w	r0, [r8]
   204fe:	23db      	movs	r3, #219	; 0xdb
   20500:	2281      	movs	r2, #129	; 0x81
   20502:	f00b ff8b 	bl	2c41c <i2c_reg_write_byte>
   20506:	2800      	cmp	r0, #0
   20508:	d1a6      	bne.n	20458 <apds9960_init+0xdc>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   2050a:	7cab      	ldrb	r3, [r5, #18]
   2050c:	7c29      	ldrb	r1, [r5, #16]
   2050e:	f003 0303 	and.w	r3, r3, #3
   20512:	9300      	str	r3, [sp, #0]
   20514:	228f      	movs	r2, #143	; 0x8f
   20516:	f8d8 0000 	ldr.w	r0, [r8]
   2051a:	2303      	movs	r3, #3
   2051c:	f00b ffaa 	bl	2c474 <i2c_reg_update_byte>
   20520:	4602      	mov	r2, r0
   20522:	2800      	cmp	r0, #0
   20524:	d198      	bne.n	20458 <apds9960_init+0xdc>
	th = sys_cpu_to_le16(APDS9960_DEFAULT_AILT);
   20526:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2052a:	2184      	movs	r1, #132	; 0x84
	if (i2c_burst_write(data->i2c, config->i2c_address,
   2052c:	f8d8 0000 	ldr.w	r0, [r8]
	th = sys_cpu_to_le16(APDS9960_DEFAULT_AILT);
   20530:	f8ad 300e 	strh.w	r3, [sp, #14]
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
   20534:	f10d 070d 	add.w	r7, sp, #13
	if (i2c_burst_write(data->i2c, config->i2c_address,
   20538:	7c2b      	ldrb	r3, [r5, #16]
   2053a:	f88d 100d 	strb.w	r1, [sp, #13]
	msg[0].len = 1U;
	msg[0].flags = I2C_MSG_WRITE;
   2053e:	f88d 2018 	strb.w	r2, [sp, #24]
	msg[0].len = 1U;
   20542:	2101      	movs	r1, #1

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
   20544:	2202      	movs	r2, #2
	msg[1].buf = (uint8_t *)buf;
   20546:	f10d 060e 	add.w	r6, sp, #14
	msg[0].buf = &start_addr;
   2054a:	9704      	str	r7, [sp, #16]
	msg[0].len = 1U;
   2054c:	9105      	str	r1, [sp, #20]
	msg[1].buf = (uint8_t *)buf;
   2054e:	9607      	str	r6, [sp, #28]
	msg[1].len = num_bytes;
   20550:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20552:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
   20556:	6881      	ldr	r1, [r0, #8]
   20558:	f8d1 9004 	ldr.w	r9, [r1, #4]
   2055c:	a904      	add	r1, sp, #16
   2055e:	47c8      	blx	r9
   20560:	2800      	cmp	r0, #0
   20562:	f47f af79 	bne.w	20458 <apds9960_init+0xdc>
	th = sys_cpu_to_le16(APDS9960_DEFAULT_AIHT);
   20566:	2186      	movs	r1, #134	; 0x86
	if (i2c_burst_write(data->i2c, config->i2c_address,
   20568:	f8d8 0000 	ldr.w	r0, [r8]
   2056c:	7c2b      	ldrb	r3, [r5, #16]
   2056e:	f88d 100d 	strb.w	r1, [sp, #13]
	th = sys_cpu_to_le16(APDS9960_DEFAULT_AIHT);
   20572:	2200      	movs	r2, #0
	msg[0].len = 1U;
   20574:	2101      	movs	r1, #1
	msg[1].buf = (uint8_t *)buf;
   20576:	9607      	str	r6, [sp, #28]
	msg[1].len = num_bytes;
   20578:	2602      	movs	r6, #2
   2057a:	f8ad 200e 	strh.w	r2, [sp, #14]
	msg[0].buf = &start_addr;
   2057e:	9704      	str	r7, [sp, #16]
	msg[0].len = 1U;
   20580:	9105      	str	r1, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   20582:	f88d 2018 	strb.w	r2, [sp, #24]
	msg[1].len = num_bytes;
   20586:	9608      	str	r6, [sp, #32]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20588:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
   2058c:	6882      	ldr	r2, [r0, #8]
   2058e:	a904      	add	r1, sp, #16
   20590:	6857      	ldr	r7, [r2, #4]
   20592:	4632      	mov	r2, r6
   20594:	47b8      	blx	r7
	if (i2c_burst_write(data->i2c, config->i2c_address,
   20596:	2800      	cmp	r0, #0
   20598:	f47f af5e 	bne.w	20458 <apds9960_init+0xdc>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   2059c:	7c29      	ldrb	r1, [r5, #16]
   2059e:	9600      	str	r6, [sp, #0]
   205a0:	4633      	mov	r3, r6
   205a2:	f8d8 0000 	ldr.w	r0, [r8]
   205a6:	2280      	movs	r2, #128	; 0x80
   205a8:	f00b ff64 	bl	2c474 <i2c_reg_update_byte>
   205ac:	4606      	mov	r6, r0
   205ae:	2800      	cmp	r0, #0
   205b0:	f47f af52 	bne.w	20458 <apds9960_init+0xdc>
	const struct apds9960_config *config = dev->config;
   205b4:	f8d4 8004 	ldr.w	r8, [r4, #4]
	struct apds9960_data *drv_data = dev->data;
   205b8:	68e4      	ldr	r4, [r4, #12]
	drv_data->gpio = device_get_binding(config->gpio_name);
   205ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
   205be:	f002 fc3f 	bl	22e40 <z_impl_device_get_binding>
   205c2:	4605      	mov	r5, r0
   205c4:	6060      	str	r0, [r4, #4]
	if (drv_data->gpio == NULL) {
   205c6:	2800      	cmp	r0, #0
   205c8:	f43f af46 	beq.w	20458 <apds9960_init+0xdc>
	drv_data->gpio_pin = config->gpio_pin;
   205cc:	f898 b008 	ldrb.w	fp, [r8, #8]
   205d0:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
			   GPIO_INPUT | config->gpio_flags);
   205d4:	f8d8 300c 	ldr.w	r3, [r8, #12]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   205d8:	04da      	lsls	r2, r3, #19
	struct gpio_driver_data *data =
   205da:	e9d0 a902 	ldrd	sl, r9, [r0, #8]
	gpio_pin_configure(drv_data->gpio, config->gpio_pin,
   205de:	f443 7780 	orr.w	r7, r3, #256	; 0x100
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   205e2:	d506      	bpl.n	205f2 <apds9960_init+0x276>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   205e4:	f413 6f40 	tst.w	r3, #3072	; 0xc00
   205e8:	d003      	beq.n	205f2 <apds9960_init+0x276>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   205ea:	07d8      	lsls	r0, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   205ec:	bf48      	it	mi
   205ee:	f487 57e0 	eormi.w	r7, r7, #7168	; 0x1c00
	return api->pin_configure(port, pin, flags);
   205f2:	68ab      	ldr	r3, [r5, #8]
   205f4:	463a      	mov	r2, r7
   205f6:	681b      	ldr	r3, [r3, #0]
   205f8:	4659      	mov	r1, fp
   205fa:	4628      	mov	r0, r5
   205fc:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   205fe:	b9b0      	cbnz	r0, 2062e <apds9960_init+0x2b2>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   20600:	f8d9 3000 	ldr.w	r3, [r9]
   20604:	2201      	movs	r2, #1
   20606:	07f9      	lsls	r1, r7, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20608:	fa02 f20b 	lsl.w	r2, r2, fp
   2060c:	bf4c      	ite	mi
   2060e:	4313      	orrmi	r3, r2
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   20610:	4393      	bicpl	r3, r2
	}
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
   20612:	f417 4fc0 	tst.w	r7, #24576	; 0x6000
   20616:	f8c9 3000 	str.w	r3, [r9]
   2061a:	d008      	beq.n	2062e <apds9960_init+0x2b2>
	    && (api->pin_interrupt_configure != NULL)) {
   2061c:	f8da 3018 	ldr.w	r3, [sl, #24]
   20620:	b12b      	cbz	r3, 2062e <apds9960_init+0x2b2>
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   20622:	f427 2200 	bic.w	r2, r7, #524288	; 0x80000
   20626:	4659      	mov	r1, fp
   20628:	4628      	mov	r0, r5
   2062a:	f00b feb5 	bl	2c398 <z_impl_gpio_pin_interrupt_configure>
			   BIT(config->gpio_pin));
   2062e:	f898 3008 	ldrb.w	r3, [r8, #8]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   20632:	4a1f      	ldr	r2, [pc, #124]	; (206b0 <apds9960_init+0x334>)
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   20634:	6860      	ldr	r0, [r4, #4]
			   BIT(config->gpio_pin));
   20636:	2501      	movs	r5, #1
   20638:	fa05 f303 	lsl.w	r3, r5, r3
	callback->pin_mask = pin_mask;
   2063c:	e9c4 2303 	strd	r2, r3, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   20640:	6883      	ldr	r3, [r0, #8]
   20642:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&drv_data->gpio_cb,
   20644:	f104 0108 	add.w	r1, r4, #8
   20648:	2b00      	cmp	r3, #0
   2064a:	f43f af05 	beq.w	20458 <apds9960_init+0xdc>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2064e:	462a      	mov	r2, r5
   20650:	4798      	blx	r3
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   20652:	2800      	cmp	r0, #0
   20654:	f6ff af00 	blt.w	20458 <apds9960_init+0xdc>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20658:	f04f 32ff 	mov.w	r2, #4294967295
   2065c:	2100      	movs	r1, #0
   2065e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   20662:	f00c ff1f 	bl	2d4a4 <z_impl_k_sem_init>
{
	unsigned int flags = enable
		? GPIO_INT_EDGE_TO_ACTIVE
		: GPIO_INT_DISABLE;

	gpio_pin_interrupt_configure(drv_data->gpio,
   20666:	6860      	ldr	r0, [r4, #4]
   20668:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   2066c:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   20670:	f00b fe92 	bl	2c398 <z_impl_gpio_pin_interrupt_configure>
	if (gpio_pin_get(drv_data->gpio, drv_data->gpio_pin) > 0) {
   20674:	6860      	ldr	r0, [r4, #4]
   20676:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
	const struct gpio_driver_data *const data =
   2067a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	return api->port_get_raw(port, value);
   2067e:	6883      	ldr	r3, [r0, #8]
   20680:	a904      	add	r1, sp, #16
   20682:	685b      	ldr	r3, [r3, #4]
   20684:	4798      	blx	r3
	if (ret == 0) {
   20686:	b940      	cbnz	r0, 2069a <apds9960_init+0x31e>
		*value ^= data->invert;
   20688:	f8d8 2000 	ldr.w	r2, [r8]
   2068c:	9b04      	ldr	r3, [sp, #16]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   2068e:	40bd      	lsls	r5, r7
		*value ^= data->invert;
   20690:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   20692:	422b      	tst	r3, r5
   20694:	bf14      	ite	ne
   20696:	2001      	movne	r0, #1
   20698:	2000      	moveq	r0, #0
   2069a:	2800      	cmp	r0, #0
   2069c:	f77f aede 	ble.w	2045c <apds9960_init+0xe0>
		apds9960_handle_cb(drv_data);
   206a0:	4620      	mov	r0, r4
   206a2:	f00b fea8 	bl	2c3f6 <apds9960_handle_cb>
   206a6:	e6d9      	b.n	2045c <apds9960_init+0xe0>
		return -EINVAL;
   206a8:	f06f 0615 	mvn.w	r6, #21
   206ac:	e6d6      	b.n	2045c <apds9960_init+0xe0>
   206ae:	bf00      	nop
   206b0:	0002c415 	.word	0x0002c415

000206b4 <fxos8700_channel_get>:
#endif

static int fxos8700_channel_get(const struct device *dev,
				enum sensor_channel chan,
				struct sensor_value *val)
{
   206b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct fxos8700_config *config = dev->config;
	struct fxos8700_data *data = dev->data;
   206b8:	68c6      	ldr	r6, [r0, #12]
	const struct fxos8700_config *config = dev->config;
   206ba:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   206be:	460d      	mov	r5, r1
   206c0:	4614      	mov	r4, r2
	int num_channels;
	int16_t *raw;
	int ret;
	int i;

	k_sem_take(&data->sem, K_FOREVER);
   206c2:	1d37      	adds	r7, r6, #4
	return z_impl_k_sem_take(sem, timeout);
   206c4:	f04f 32ff 	mov.w	r2, #4294967295
   206c8:	f04f 33ff 	mov.w	r3, #4294967295
   206cc:	4638      	mov	r0, r7
   206ce:	f003 fa17 	bl	23b00 <z_impl_k_sem_take>

	/* If we're in an accelerometer-enabled mode (accel-only or hybrid),
	 * then convert raw accelerometer data to the normalized sensor_value
	 * type.
	 */
	if (config->mode != FXOS8700_MODE_MAGN) {
   206d2:	f898 e012 	ldrb.w	lr, [r8, #18]
   206d6:	f1be 0f01 	cmp.w	lr, #1
   206da:	d06a      	beq.n	207b2 <fxos8700_channel_get+0xfe>
		switch (chan) {
   206dc:	2d03      	cmp	r5, #3
   206de:	bf98      	it	ls
   206e0:	4b3c      	ldrls	r3, [pc, #240]	; (207d4 <fxos8700_channel_get+0x120>)
	micro_ms2 = (raw * SENSOR_G) >> frac_bits;
   206e2:	f8df 9104 	ldr.w	r9, [pc, #260]	; 207e8 <fxos8700_channel_get+0x134>
   206e6:	bf9b      	ittet	ls
   206e8:	575a      	ldrsbls	r2, [r3, r5]
   206ea:	4b3b      	ldrls	r3, [pc, #236]	; (207d8 <fxos8700_channel_get+0x124>)
	if (config->mode != FXOS8700_MODE_MAGN) {
   206ec:	f04f 0c00 	movhi.w	ip, #0
   206f0:	f913 c005 	ldrsbls.w	ip, [r3, r5]
   206f4:	bf88      	it	hi
   206f6:	4662      	movhi	r2, ip
			start_channel = 0;
			num_channels = 0;
			break;
		}

		raw = &data->raw[start_channel];
   206f8:	f502 721b 	add.w	r2, r2, #620	; 0x26c
   206fc:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
   20700:	eb06 0242 	add.w	r2, r6, r2, lsl #1
		for (i = 0; i < num_channels; i++) {
   20704:	9301      	str	r3, [sp, #4]
   20706:	9b01      	ldr	r3, [sp, #4]
   20708:	429c      	cmp	r4, r3
   2070a:	d12b      	bne.n	20764 <fxos8700_channel_get+0xb0>
			fxos8700_accel_convert(val++, *raw++, config->range);
		}

		if (num_channels > 0) {
			ret = 0;
   2070c:	f1bc 0f00 	cmp.w	ip, #0
   20710:	bf0c      	ite	eq
   20712:	f06f 0822 	mvneq.w	r8, #34	; 0x22
   20716:	f04f 0800 	movne.w	r8, #0
	}

	/* If we're in an magnetometer-enabled mode (mag-only or hybrid), then
	 * convert raw magnetometer data to the normalized sensor_value type.
	 */
	if (config->mode != FXOS8700_MODE_ACCEL) {
   2071a:	f1be 0f00 	cmp.w	lr, #0
   2071e:	d01a      	beq.n	20756 <fxos8700_channel_get+0xa2>
		switch (chan) {
   20720:	3d08      	subs	r5, #8
   20722:	b2ad      	uxth	r5, r5
   20724:	2d03      	cmp	r5, #3
   20726:	bf98      	it	ls
   20728:	4b2c      	ldrls	r3, [pc, #176]	; (207dc <fxos8700_channel_get+0x128>)
	val->val1 = micro_g / 1000000;
   2072a:	482d      	ldr	r0, [pc, #180]	; (207e0 <fxos8700_channel_get+0x12c>)
   2072c:	bf9b      	ittet	ls
   2072e:	575a      	ldrsbls	r2, [r3, r5]
   20730:	4b2c      	ldrls	r3, [pc, #176]	; (207e4 <fxos8700_channel_get+0x130>)
   20732:	2300      	movhi	r3, #0
   20734:	575b      	ldrsbls	r3, [r3, r5]
   20736:	bf88      	it	hi
   20738:	461a      	movhi	r2, r3
			start_channel = 0;
			num_channels = 0;
			break;
		}

		raw = &data->raw[start_channel];
   2073a:	f502 721b 	add.w	r2, r2, #620	; 0x26c
   2073e:	eb06 0642 	add.w	r6, r6, r2, lsl #1
		for (i = 0; i < num_channels; i++) {
   20742:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
	micro_g = raw * 1000;
   20746:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		for (i = 0; i < num_channels; i++) {
   2074a:	42a5      	cmp	r5, r4
   2074c:	d134      	bne.n	207b8 <fxos8700_channel_get+0x104>
			fxos8700_magn_convert(val++, *raw++);
		}

		if (num_channels > 0) {
			ret = 0;
   2074e:	2b00      	cmp	r3, #0
   20750:	bf18      	it	ne
   20752:	f04f 0800 	movne.w	r8, #0
	z_impl_k_sem_give(sem);
   20756:	4638      	mov	r0, r7
   20758:	f003 f9ac 	bl	23ab4 <z_impl_k_sem_give>
	}

	k_sem_give(&data->sem);

	return ret;
}
   2075c:	4640      	mov	r0, r8
   2075e:	b003      	add	sp, #12
   20760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frac_bits = 14 - range;
   20764:	f898 3014 	ldrb.w	r3, [r8, #20]
	micro_ms2 = (raw * SENSOR_G) >> frac_bits;
   20768:	f932 0b02 	ldrsh.w	r0, [r2], #2
	frac_bits = 14 - range;
   2076c:	f1c3 030e 	rsb	r3, r3, #14
	micro_ms2 = (raw * SENSOR_G) >> frac_bits;
   20770:	17c1      	asrs	r1, r0, #31
   20772:	fba0 ab09 	umull	sl, fp, r0, r9
   20776:	b2db      	uxtb	r3, r3
   20778:	fb09 bb01 	mla	fp, r9, r1, fp
   2077c:	f1c3 0020 	rsb	r0, r3, #32
   20780:	f1b3 0120 	subs.w	r1, r3, #32
   20784:	fa0b f000 	lsl.w	r0, fp, r0
   20788:	fa2a f303 	lsr.w	r3, sl, r3
   2078c:	ea43 0300 	orr.w	r3, r3, r0
   20790:	bf58      	it	pl
   20792:	fa4b f101 	asrpl.w	r1, fp, r1
	val->val1 = (int32_t) micro_ms2 / 1000000;
   20796:	4812      	ldr	r0, [pc, #72]	; (207e0 <fxos8700_channel_get+0x12c>)
			fxos8700_accel_convert(val++, *raw++, config->range);
   20798:	f104 0408 	add.w	r4, r4, #8
	micro_ms2 = (raw * SENSOR_G) >> frac_bits;
   2079c:	bf58      	it	pl
   2079e:	430b      	orrpl	r3, r1
	val->val1 = (int32_t) micro_ms2 / 1000000;
   207a0:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = (int32_t) micro_ms2 % 1000000;
   207a4:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = (int32_t) micro_ms2 / 1000000;
   207a8:	f844 1c08 	str.w	r1, [r4, #-8]
	val->val2 = (int32_t) micro_ms2 % 1000000;
   207ac:	f844 3c04 	str.w	r3, [r4, #-4]
		for (i = 0; i < num_channels; i++) {
   207b0:	e7a9      	b.n	20706 <fxos8700_channel_get+0x52>
	ret = -ENOTSUP;
   207b2:	f06f 0822 	mvn.w	r8, #34	; 0x22
   207b6:	e7b3      	b.n	20720 <fxos8700_channel_get+0x6c>
	micro_g = raw * 1000;
   207b8:	f836 2b02 	ldrh.w	r2, [r6], #2
   207bc:	fb12 f10c 	smulbb	r1, r2, ip
	val->val1 = micro_g / 1000000;
   207c0:	fb91 f2f0 	sdiv	r2, r1, r0
   207c4:	f844 2b08 	str.w	r2, [r4], #8
	val->val2 = micro_g % 1000000;
   207c8:	fb00 1212 	mls	r2, r0, r2, r1
   207cc:	f844 2c04 	str.w	r2, [r4, #-4]
		for (i = 0; i < num_channels; i++) {
   207d0:	e7bb      	b.n	2074a <fxos8700_channel_get+0x96>
   207d2:	bf00      	nop
   207d4:	0003373d 	.word	0x0003373d
   207d8:	00033741 	.word	0x00033741
   207dc:	00033745 	.word	0x00033745
   207e0:	000f4240 	.word	0x000f4240
   207e4:	00033741 	.word	0x00033741
   207e8:	0095a33a 	.word	0x0095a33a

000207ec <fxos8700_set_odr>:
	int32_t dr = val->val1;
   207ec:	680b      	ldr	r3, [r1, #0]
	if (val->val1 == 800 && val->val2 == 0) {
   207ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
{
   207f2:	b507      	push	{r0, r1, r2, lr}
	const struct fxos8700_config *config = dev->config;
   207f4:	6842      	ldr	r2, [r0, #4]
	struct fxos8700_data *data = dev->data;
   207f6:	68c0      	ldr	r0, [r0, #12]
	if (val->val1 == 800 && val->val2 == 0) {
   207f8:	d105      	bne.n	20806 <fxos8700_set_odr+0x1a>
   207fa:	684b      	ldr	r3, [r1, #4]
   207fc:	2b00      	cmp	r3, #0
   207fe:	d036      	beq.n	2086e <fxos8700_set_odr+0x82>
		return -EINVAL;
   20800:	f06f 0015 	mvn.w	r0, #21
   20804:	e03b      	b.n	2087e <fxos8700_set_odr+0x92>
	} else if (val->val1 == 400 && val->val2 == 0) {
   20806:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   2080a:	d104      	bne.n	20816 <fxos8700_set_odr+0x2a>
   2080c:	684b      	ldr	r3, [r1, #4]
   2080e:	2b00      	cmp	r3, #0
   20810:	d1f6      	bne.n	20800 <fxos8700_set_odr+0x14>
		dr = FXOS8700_CTRLREG1_DR_RATE_400;
   20812:	2308      	movs	r3, #8
   20814:	e02b      	b.n	2086e <fxos8700_set_odr+0x82>
	} else if (val->val1 == 200 && val->val2 == 0) {
   20816:	2bc8      	cmp	r3, #200	; 0xc8
   20818:	d104      	bne.n	20824 <fxos8700_set_odr+0x38>
   2081a:	684b      	ldr	r3, [r1, #4]
   2081c:	2b00      	cmp	r3, #0
   2081e:	d1ef      	bne.n	20800 <fxos8700_set_odr+0x14>
		dr = FXOS8700_CTRLREG1_DR_RATE_200;
   20820:	2310      	movs	r3, #16
   20822:	e024      	b.n	2086e <fxos8700_set_odr+0x82>
	} else if (val->val1 == 100 && val->val2 == 0) {
   20824:	2b64      	cmp	r3, #100	; 0x64
   20826:	d104      	bne.n	20832 <fxos8700_set_odr+0x46>
   20828:	684b      	ldr	r3, [r1, #4]
   2082a:	2b00      	cmp	r3, #0
   2082c:	d1e8      	bne.n	20800 <fxos8700_set_odr+0x14>
		dr = FXOS8700_CTRLREG1_DR_RATE_100;
   2082e:	2318      	movs	r3, #24
   20830:	e01d      	b.n	2086e <fxos8700_set_odr+0x82>
	} else if (val->val1 == 50 && val->val2 == 0) {
   20832:	2b32      	cmp	r3, #50	; 0x32
   20834:	d104      	bne.n	20840 <fxos8700_set_odr+0x54>
   20836:	684b      	ldr	r3, [r1, #4]
   20838:	2b00      	cmp	r3, #0
   2083a:	d1e1      	bne.n	20800 <fxos8700_set_odr+0x14>
		dr = FXOS8700_CTRLREG1_DR_RATE_50;
   2083c:	2320      	movs	r3, #32
   2083e:	e016      	b.n	2086e <fxos8700_set_odr+0x82>
	} else if (val->val1 == 12 && val->val2 == 500000) {
   20840:	2b0c      	cmp	r3, #12
   20842:	d105      	bne.n	20850 <fxos8700_set_odr+0x64>
   20844:	6849      	ldr	r1, [r1, #4]
   20846:	4b0f      	ldr	r3, [pc, #60]	; (20884 <fxos8700_set_odr+0x98>)
   20848:	4299      	cmp	r1, r3
   2084a:	d1d9      	bne.n	20800 <fxos8700_set_odr+0x14>
		dr = FXOS8700_CTRLREG1_DR_RATE_12_5;
   2084c:	2328      	movs	r3, #40	; 0x28
   2084e:	e00e      	b.n	2086e <fxos8700_set_odr+0x82>
	} else if (val->val1 == 6 && val->val2 == 250000) {
   20850:	2b06      	cmp	r3, #6
   20852:	d105      	bne.n	20860 <fxos8700_set_odr+0x74>
   20854:	6849      	ldr	r1, [r1, #4]
   20856:	4b0c      	ldr	r3, [pc, #48]	; (20888 <fxos8700_set_odr+0x9c>)
   20858:	4299      	cmp	r1, r3
   2085a:	d1d1      	bne.n	20800 <fxos8700_set_odr+0x14>
		dr = FXOS8700_CTRLREG1_DR_RATE_6_25;
   2085c:	2330      	movs	r3, #48	; 0x30
   2085e:	e006      	b.n	2086e <fxos8700_set_odr+0x82>
	} else if (val->val1 == 1 && val->val2 == 562500) {
   20860:	2b01      	cmp	r3, #1
   20862:	d1cd      	bne.n	20800 <fxos8700_set_odr+0x14>
   20864:	6849      	ldr	r1, [r1, #4]
   20866:	4b09      	ldr	r3, [pc, #36]	; (2088c <fxos8700_set_odr+0xa0>)
   20868:	4299      	cmp	r1, r3
   2086a:	d1c9      	bne.n	20800 <fxos8700_set_odr+0x14>
		dr = FXOS8700_CTRLREG1_DR_RATE_1_56;
   2086c:	2338      	movs	r3, #56	; 0x38
	return i2c_reg_update_byte(data->i2c, config->i2c_address,
   2086e:	b2db      	uxtb	r3, r3
   20870:	7a91      	ldrb	r1, [r2, #10]
   20872:	9300      	str	r3, [sp, #0]
   20874:	6800      	ldr	r0, [r0, #0]
   20876:	2338      	movs	r3, #56	; 0x38
   20878:	222a      	movs	r2, #42	; 0x2a
   2087a:	f00b fed7 	bl	2c62c <i2c_reg_update_byte>
}
   2087e:	b003      	add	sp, #12
   20880:	f85d fb04 	ldr.w	pc, [sp], #4
   20884:	0007a120 	.word	0x0007a120
   20888:	0003d090 	.word	0x0003d090
   2088c:	00089544 	.word	0x00089544

00020890 <fxos8700_init>:
				   FXOS8700_CTRLREG1_ACTIVE_MASK,
				   power);
}

static int fxos8700_init(const struct device *dev)
{
   20890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct fxos8700_config *config = dev->config;
	struct fxos8700_data *data = dev->data;
	struct sensor_value odr = {.val1 = 6, .val2 = 250000};
   20894:	4b5c      	ldr	r3, [pc, #368]	; (20a08 <fxos8700_init+0x178>)
	const struct fxos8700_config *config = dev->config;
   20896:	6844      	ldr	r4, [r0, #4]
	struct fxos8700_data *data = dev->data;
   20898:	68c5      	ldr	r5, [r0, #12]
{
   2089a:	4607      	mov	r7, r0
	struct sensor_value odr = {.val1 = 6, .val2 = 250000};
   2089c:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   208a0:	b087      	sub	sp, #28
	struct sensor_value odr = {.val1 = 6, .val2 = 250000};
   208a2:	f10d 0910 	add.w	r9, sp, #16
   208a6:	e889 0003 	stmia.w	r9, {r0, r1}
	const struct device *rst;

	/* Get the I2C device */
	data->i2c = device_get_binding(config->i2c_name);
   208aa:	6820      	ldr	r0, [r4, #0]
   208ac:	f002 fac8 	bl	22e40 <z_impl_device_get_binding>
   208b0:	6028      	str	r0, [r5, #0]
	if (data->i2c == NULL) {
   208b2:	b928      	cbnz	r0, 208c0 <fxos8700_init+0x30>
		LOG_ERR("Could not find I2C device");
		return -EINVAL;
   208b4:	f06f 0415 	mvn.w	r4, #21
	k_sem_give(&data->sem);

	LOG_DBG("Init complete");

	return 0;
}
   208b8:	4620      	mov	r0, r4
   208ba:	b007      	add	sp, #28
   208bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (config->reset_name) {
   208c0:	68e3      	ldr	r3, [r4, #12]
   208c2:	2b00      	cmp	r3, #0
   208c4:	d047      	beq.n	20956 <fxos8700_init+0xc6>
   208c6:	4618      	mov	r0, r3
   208c8:	f002 faba 	bl	22e40 <z_impl_device_get_binding>
		if (!rst) {
   208cc:	4606      	mov	r6, r0
   208ce:	2800      	cmp	r0, #0
   208d0:	d0f0      	beq.n	208b4 <fxos8700_init+0x24>
				   GPIO_OUTPUT_INACTIVE | config->reset_flags);
   208d2:	f894 8011 	ldrb.w	r8, [r4, #17]
		gpio_pin_configure(rst, config->reset_pin,
   208d6:	f894 b010 	ldrb.w	fp, [r4, #16]
	struct gpio_driver_data *data =
   208da:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   208de:	f018 0f01 	tst.w	r8, #1
   208e2:	bf0c      	ite	eq
   208e4:	f448 58b0 	orreq.w	r8, r8, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   208e8:	f488 6820 	eorne.w	r8, r8, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   208ec:	6883      	ldr	r3, [r0, #8]
   208ee:	4642      	mov	r2, r8
   208f0:	681b      	ldr	r3, [r3, #0]
   208f2:	4659      	mov	r1, fp
   208f4:	4798      	blx	r3
	if (ret != 0) {
   208f6:	b958      	cbnz	r0, 20910 <fxos8700_init+0x80>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   208f8:	f8da 3000 	ldr.w	r3, [sl]
   208fc:	2201      	movs	r2, #1
   208fe:	fa02 f10b 	lsl.w	r1, r2, fp
   20902:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20906:	bf14      	ite	ne
   20908:	430b      	orrne	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2090a:	438b      	biceq	r3, r1
   2090c:	f8ca 3000 	str.w	r3, [sl]
		gpio_pin_set(rst, config->reset_pin, 1);
   20910:	7c21      	ldrb	r1, [r4, #16]
   20912:	2201      	movs	r2, #1
   20914:	4630      	mov	r0, r6
   20916:	f00b fe50 	bl	2c5ba <gpio_pin_set>
	z_impl_k_busy_wait(usec_to_wait);
   2091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2091e:	f00c fdd7 	bl	2d4d0 <z_impl_k_busy_wait>
		gpio_pin_set(rst, config->reset_pin, 0);
   20922:	7c21      	ldrb	r1, [r4, #16]
   20924:	2200      	movs	r2, #0
   20926:	4630      	mov	r0, r6
   20928:	f00b fe47 	bl	2c5ba <gpio_pin_set>
   2092c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   20930:	f00c fdce 	bl	2d4d0 <z_impl_k_busy_wait>
	if (i2c_reg_read_byte(data->i2c, config->i2c_address,
   20934:	230d      	movs	r3, #13
   20936:	6828      	ldr	r0, [r5, #0]
   20938:	f88d 300f 	strb.w	r3, [sp, #15]
 */
static inline int i2c_reg_read_byte(const struct device *dev,
				    uint16_t dev_addr,
				    uint8_t reg_addr, uint8_t *value)
{
	return i2c_write_read(dev, dev_addr,
   2093c:	2301      	movs	r3, #1
   2093e:	7aa1      	ldrb	r1, [r4, #10]
   20940:	9300      	str	r3, [sp, #0]
   20942:	f10d 020f 	add.w	r2, sp, #15
   20946:	f205 43e4 	addw	r3, r5, #1252	; 0x4e4
   2094a:	f00b fe46 	bl	2c5da <i2c_write_read.constprop.0>
   2094e:	b140      	cbz	r0, 20962 <fxos8700_init+0xd2>
	switch (data->whoami) {
   20950:	f06f 0404 	mvn.w	r4, #4
   20954:	e7b0      	b.n	208b8 <fxos8700_init+0x28>
		i2c_reg_write_byte(data->i2c, config->i2c_address,
   20956:	7aa1      	ldrb	r1, [r4, #10]
   20958:	2340      	movs	r3, #64	; 0x40
   2095a:	222b      	movs	r2, #43	; 0x2b
   2095c:	f00b fe53 	bl	2c606 <i2c_reg_write_byte>
   20960:	e7e4      	b.n	2092c <fxos8700_init+0x9c>
	switch (data->whoami) {
   20962:	f895 34e4 	ldrb.w	r3, [r5, #1252]	; 0x4e4
   20966:	2bc7      	cmp	r3, #199	; 0xc7
   20968:	d009      	beq.n	2097e <fxos8700_init+0xee>
   2096a:	d8f1      	bhi.n	20950 <fxos8700_init+0xc0>
   2096c:	2b4a      	cmp	r3, #74	; 0x4a
   2096e:	d003      	beq.n	20978 <fxos8700_init+0xe8>
   20970:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   20974:	2b1a      	cmp	r3, #26
   20976:	d1eb      	bne.n	20950 <fxos8700_init+0xc0>
		if (config->mode != FXOS8700_MODE_ACCEL) {
   20978:	7ca3      	ldrb	r3, [r4, #18]
   2097a:	2b00      	cmp	r3, #0
   2097c:	d1e8      	bne.n	20950 <fxos8700_init+0xc0>
	if (fxos8700_set_odr(dev, &odr)) {
   2097e:	4649      	mov	r1, r9
   20980:	4638      	mov	r0, r7
   20982:	f7ff ff33 	bl	207ec <fxos8700_set_odr>
   20986:	2800      	cmp	r0, #0
   20988:	d1e2      	bne.n	20950 <fxos8700_init+0xc0>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   2098a:	7ce3      	ldrb	r3, [r4, #19]
   2098c:	7aa1      	ldrb	r1, [r4, #10]
   2098e:	9300      	str	r3, [sp, #0]
   20990:	6828      	ldr	r0, [r5, #0]
   20992:	2303      	movs	r3, #3
   20994:	222b      	movs	r2, #43	; 0x2b
   20996:	f00b fe49 	bl	2c62c <i2c_reg_update_byte>
   2099a:	2800      	cmp	r0, #0
   2099c:	d1d8      	bne.n	20950 <fxos8700_init+0xc0>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   2099e:	7ca3      	ldrb	r3, [r4, #18]
   209a0:	7aa1      	ldrb	r1, [r4, #10]
   209a2:	9300      	str	r3, [sp, #0]
   209a4:	6828      	ldr	r0, [r5, #0]
   209a6:	2303      	movs	r3, #3
   209a8:	225b      	movs	r2, #91	; 0x5b
   209aa:	f00b fe3f 	bl	2c62c <i2c_reg_update_byte>
   209ae:	2800      	cmp	r0, #0
   209b0:	d1ce      	bne.n	20950 <fxos8700_init+0xc0>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   209b2:	2320      	movs	r3, #32
   209b4:	7aa1      	ldrb	r1, [r4, #10]
   209b6:	9300      	str	r3, [sp, #0]
   209b8:	6828      	ldr	r0, [r5, #0]
   209ba:	225c      	movs	r2, #92	; 0x5c
   209bc:	f00b fe36 	bl	2c62c <i2c_reg_update_byte>
   209c0:	2800      	cmp	r0, #0
   209c2:	d1c5      	bne.n	20950 <fxos8700_init+0xc0>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   209c4:	7d23      	ldrb	r3, [r4, #20]
   209c6:	7aa1      	ldrb	r1, [r4, #10]
   209c8:	9300      	str	r3, [sp, #0]
   209ca:	6828      	ldr	r0, [r5, #0]
   209cc:	2303      	movs	r3, #3
   209ce:	220e      	movs	r2, #14
   209d0:	f00b fe2c 	bl	2c62c <i2c_reg_update_byte>
   209d4:	4601      	mov	r1, r0
   209d6:	2800      	cmp	r0, #0
   209d8:	d1ba      	bne.n	20950 <fxos8700_init+0xc0>
	k_sem_init(&data->sem, 0, UINT_MAX);
   209da:	3504      	adds	r5, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   209dc:	f04f 32ff 	mov.w	r2, #4294967295
   209e0:	4628      	mov	r0, r5
   209e2:	f00c fd5f 	bl	2d4a4 <z_impl_k_sem_init>
	if (fxos8700_trigger_init(dev)) {
   209e6:	4638      	mov	r0, r7
   209e8:	f000 f89e 	bl	20b28 <fxos8700_trigger_init>
   209ec:	2800      	cmp	r0, #0
   209ee:	d1af      	bne.n	20950 <fxos8700_init+0xc0>
	if (fxos8700_set_power(dev, FXOS8700_POWER_ACTIVE)) {
   209f0:	2101      	movs	r1, #1
   209f2:	4638      	mov	r0, r7
   209f4:	f00b fe9c 	bl	2c730 <fxos8700_set_power>
   209f8:	4604      	mov	r4, r0
   209fa:	2800      	cmp	r0, #0
   209fc:	d1a8      	bne.n	20950 <fxos8700_init+0xc0>
	z_impl_k_sem_give(sem);
   209fe:	4628      	mov	r0, r5
   20a00:	f003 f858 	bl	23ab4 <z_impl_k_sem_give>
}
   20a04:	e758      	b.n	208b8 <fxos8700_init+0x28>
   20a06:	bf00      	nop
   20a08:	0002dcdc 	.word	0x0002dcdc

00020a0c <fxos8700_thread_main>:
				     GPIO_INT_EDGE_TO_ACTIVE);
}

#ifdef CONFIG_FXOS8700_TRIGGER_OWN_THREAD
static void fxos8700_thread_main(struct fxos8700_data *data)
{
   20a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a10:	b08b      	sub	sp, #44	; 0x2c
	while (true) {
		k_sem_take(&data->trig_sem, K_FOREVER);
   20a12:	f500 6398 	add.w	r3, r0, #1216	; 0x4c0
{
   20a16:	4605      	mov	r5, r0
		k_sem_take(&data->trig_sem, K_FOREVER);
   20a18:	9301      	str	r3, [sp, #4]
	return z_impl_k_sem_take(sem, timeout);
   20a1a:	f04f 32ff 	mov.w	r2, #4294967295
   20a1e:	9801      	ldr	r0, [sp, #4]
   20a20:	f04f 33ff 	mov.w	r3, #4294967295
   20a24:	f003 f86c 	bl	23b00 <z_impl_k_sem_take>
		fxos8700_handle_int(data->dev);
   20a28:	69ec      	ldr	r4, [r5, #28]
	struct fxos8700_data *data = dev->data;
   20a2a:	68e6      	ldr	r6, [r4, #12]
	const struct fxos8700_config *config = dev->config;
   20a2c:	f8d4 8004 	ldr.w	r8, [r4, #4]
	k_sem_take(&data->sem, K_FOREVER);
   20a30:	1d37      	adds	r7, r6, #4
   20a32:	f04f 32ff 	mov.w	r2, #4294967295
   20a36:	f04f 33ff 	mov.w	r3, #4294967295
   20a3a:	4638      	mov	r0, r7
   20a3c:	f003 f860 	bl	23b00 <z_impl_k_sem_take>
	if (i2c_reg_read_byte(data->i2c, config->i2c_address,
   20a40:	220c      	movs	r2, #12
   20a42:	6830      	ldr	r0, [r6, #0]
   20a44:	f898 300a 	ldrb.w	r3, [r8, #10]
   20a48:	f88d 200c 	strb.w	r2, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
   20a4c:	eb0d 0a02 	add.w	sl, sp, r2
	msg[1].buf = (uint8_t *)read_buf;
   20a50:	f10d 0109 	add.w	r1, sp, #9
	msg[0].len = num_write;
   20a54:	2201      	movs	r2, #1
	msg[1].len = num_read;
   20a56:	e9cd 1207 	strd	r1, r2, [sp, #28]
	msg[0].len = num_write;
   20a5a:	9205      	str	r2, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   20a5c:	f04f 0900 	mov.w	r9, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20a60:	2207      	movs	r2, #7
	msg[0].buf = (uint8_t *)write_buf;
   20a62:	f8cd a010 	str.w	sl, [sp, #16]
	msg[0].flags = I2C_MSG_WRITE;
   20a66:	f88d 9018 	strb.w	r9, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20a6a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
   20a6e:	6882      	ldr	r2, [r0, #8]
   20a70:	a904      	add	r1, sp, #16
   20a72:	f8d2 b004 	ldr.w	fp, [r2, #4]
   20a76:	2202      	movs	r2, #2
   20a78:	47d8      	blx	fp
   20a7a:	b108      	cbz	r0, 20a80 <fxos8700_thread_main+0x74>
		int_source = 0U;
   20a7c:	f88d 9009 	strb.w	r9, [sp, #9]
	z_impl_k_sem_give(sem);
   20a80:	4638      	mov	r0, r7
   20a82:	f003 f817 	bl	23ab4 <z_impl_k_sem_give>
	if (int_source & FXOS8700_DRDY_MASK) {
   20a86:	f89d 3009 	ldrb.w	r3, [sp, #9]
   20a8a:	07da      	lsls	r2, r3, #31
   20a8c:	d507      	bpl.n	20a9e <fxos8700_thread_main+0x92>
	struct fxos8700_data *data = dev->data;
   20a8e:	68e3      	ldr	r3, [r4, #12]
	struct sensor_trigger drdy_trig = {
   20a90:	4a24      	ldr	r2, [pc, #144]	; (20b24 <fxos8700_thread_main+0x118>)
	if (data->drdy_handler) {
   20a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	struct sensor_trigger drdy_trig = {
   20a94:	9204      	str	r2, [sp, #16]
	if (data->drdy_handler) {
   20a96:	b113      	cbz	r3, 20a9e <fxos8700_thread_main+0x92>
		data->drdy_handler(dev, &drdy_trig);
   20a98:	a904      	add	r1, sp, #16
   20a9a:	4620      	mov	r0, r4
   20a9c:	4798      	blx	r3
	if (int_source & FXOS8700_MOTION_MASK) {
   20a9e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   20aa2:	075b      	lsls	r3, r3, #29
   20aa4:	d536      	bpl.n	20b14 <fxos8700_thread_main+0x108>
	const struct fxos8700_config *config = dev->config;
   20aa6:	6863      	ldr	r3, [r4, #4]
	struct fxos8700_data *data = dev->data;
   20aa8:	68e7      	ldr	r7, [r4, #12]
	const struct fxos8700_config *config = dev->config;
   20aaa:	9300      	str	r3, [sp, #0]
	struct sensor_trigger motion_trig = {
   20aac:	2100      	movs	r1, #0
   20aae:	2338      	movs	r3, #56	; 0x38
	sensor_trigger_handler_t handler = data->motion_handler;
   20ab0:	f8d7 9038 	ldr.w	r9, [r7, #56]	; 0x38
	struct sensor_trigger motion_trig = {
   20ab4:	f8ad 100c 	strh.w	r1, [sp, #12]
   20ab8:	f8ad 300e 	strh.w	r3, [sp, #14]
	k_sem_take(&data->sem, K_FOREVER);
   20abc:	f107 0b04 	add.w	fp, r7, #4
	return z_impl_k_sem_take(sem, timeout);
   20ac0:	f04f 32ff 	mov.w	r2, #4294967295
   20ac4:	f04f 33ff 	mov.w	r3, #4294967295
   20ac8:	4658      	mov	r0, fp
   20aca:	f003 f819 	bl	23b00 <z_impl_k_sem_take>
	if (i2c_reg_read_byte(data->i2c, config->i2c_address,
   20ace:	9b00      	ldr	r3, [sp, #0]
   20ad0:	6838      	ldr	r0, [r7, #0]
   20ad2:	7a9b      	ldrb	r3, [r3, #10]
   20ad4:	2216      	movs	r2, #22
   20ad6:	f88d 200b 	strb.w	r2, [sp, #11]
	msg[0].flags = I2C_MSG_WRITE;
   20ada:	2100      	movs	r1, #0
	msg[0].buf = (uint8_t *)write_buf;
   20adc:	f10d 020b 	add.w	r2, sp, #11
   20ae0:	9204      	str	r2, [sp, #16]
	msg[0].flags = I2C_MSG_WRITE;
   20ae2:	f88d 1018 	strb.w	r1, [sp, #24]
	msg[0].len = num_write;
   20ae6:	2201      	movs	r2, #1
	msg[1].buf = (uint8_t *)read_buf;
   20ae8:	f10d 010a 	add.w	r1, sp, #10
	msg[1].len = num_read;
   20aec:	e9cd 1207 	strd	r1, r2, [sp, #28]
	msg[0].len = num_write;
   20af0:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   20af2:	2207      	movs	r2, #7
   20af4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
   20af8:	6882      	ldr	r2, [r0, #8]
   20afa:	a904      	add	r1, sp, #16
   20afc:	6857      	ldr	r7, [r2, #4]
   20afe:	2202      	movs	r2, #2
   20b00:	47b8      	blx	r7
	z_impl_k_sem_give(sem);
   20b02:	4658      	mov	r0, fp
   20b04:	f002 ffd6 	bl	23ab4 <z_impl_k_sem_give>
	if (handler) {
   20b08:	f1b9 0f00 	cmp.w	r9, #0
   20b0c:	d002      	beq.n	20b14 <fxos8700_thread_main+0x108>
		handler(dev, &motion_trig);
   20b0e:	4651      	mov	r1, sl
   20b10:	4620      	mov	r0, r4
   20b12:	47c8      	blx	r9
	gpio_pin_interrupt_configure(data->gpio, config->gpio_pin,
   20b14:	6a30      	ldr	r0, [r6, #32]
   20b16:	f898 1008 	ldrb.w	r1, [r8, #8]
   20b1a:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   20b1e:	f00b fe15 	bl	2c74c <z_impl_gpio_pin_interrupt_configure>
	while (true) {
   20b22:	e77a      	b.n	20a1a <fxos8700_thread_main+0xe>
   20b24:	00380001 	.word	0x00380001

00020b28 <fxos8700_trigger_init>:
	return 0;
}
#endif

int fxos8700_trigger_init(const struct device *dev)
{
   20b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct fxos8700_config *config = dev->config;
	struct fxos8700_data *data = dev->data;
   20b2c:	68c4      	ldr	r4, [r0, #12]
	const struct fxos8700_config *config = dev->config;
   20b2e:	6846      	ldr	r6, [r0, #4]
	uint8_t ctrl_reg5;

	data->dev = dev;
   20b30:	61e0      	str	r0, [r4, #28]
{
   20b32:	b08c      	sub	sp, #48	; 0x30
   20b34:	4605      	mov	r5, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   20b36:	f04f 32ff 	mov.w	r2, #4294967295
   20b3a:	2100      	movs	r1, #0
   20b3c:	f504 6098 	add.w	r0, r4, #1216	; 0x4c0
   20b40:	f00c fcb0 	bl	2d4a4 <z_impl_k_sem_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20b44:	2200      	movs	r2, #0
   20b46:	2300      	movs	r3, #0
   20b48:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20b4c:	2700      	movs	r7, #0
   20b4e:	f06f 0305 	mvn.w	r3, #5
   20b52:	e9cd 3703 	strd	r3, r7, [sp, #12]
   20b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20b5a:	4b3d      	ldr	r3, [pc, #244]	; (20c50 <fxos8700_trigger_init+0x128>)
   20b5c:	9400      	str	r4, [sp, #0]
   20b5e:	f104 0140 	add.w	r1, r4, #64	; 0x40
   20b62:	e9cd 7701 	strd	r7, r7, [sp, #4]
   20b66:	f504 6088 	add.w	r0, r4, #1088	; 0x440
   20b6a:	f003 f83b 	bl	23be4 <z_impl_k_thread_create>
#endif
#if CONFIG_FXOS8700_MOTION_INT1
	ctrl_reg5 |= FXOS8700_MOTION_MASK;
#endif

	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   20b6e:	7ab1      	ldrb	r1, [r6, #10]
   20b70:	6820      	ldr	r0, [r4, #0]
   20b72:	463b      	mov	r3, r7
   20b74:	222e      	movs	r2, #46	; 0x2e
   20b76:	f00b fdfd 	bl	2c774 <i2c_reg_write_byte>
   20b7a:	b128      	cbz	r0, 20b88 <fxos8700_trigger_init+0x60>
			       FXOS8700_REG_CTRLREG5, ctrl_reg5)) {
		LOG_ERR("Could not configure interrupt pin routing");
		return -EIO;
   20b7c:	f06f 0504 	mvn.w	r5, #4

	gpio_pin_interrupt_configure(data->gpio, config->gpio_pin,
				     GPIO_INT_EDGE_TO_ACTIVE);

	return 0;
}
   20b80:	4628      	mov	r0, r5
   20b82:	b00c      	add	sp, #48	; 0x30
   20b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	const struct fxos8700_config *config = dev->config;
   20b88:	f8d5 8004 	ldr.w	r8, [r5, #4]
	struct fxos8700_data *data = dev->data;
   20b8c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   20b90:	f898 300a 	ldrb.w	r3, [r8, #10]
   20b94:	f8d9 0000 	ldr.w	r0, [r9]
	msg.len = num_bytes;
   20b98:	2502      	movs	r5, #2
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   20b9a:	f64f 0215 	movw	r2, #63509	; 0xf815
	msg.buf = (uint8_t *)buf;
   20b9e:	af08      	add	r7, sp, #32
	uint8_t tx_buf[2] = {reg_addr, value};
   20ba0:	f8ad 2020 	strh.w	r2, [sp, #32]
	msg.buf = (uint8_t *)buf;
   20ba4:	9709      	str	r7, [sp, #36]	; 0x24
	msg.len = num_bytes;
   20ba6:	950a      	str	r5, [sp, #40]	; 0x28
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20ba8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
	return api->transfer(dev, msgs, num_msgs, addr);
   20bac:	6882      	ldr	r2, [r0, #8]
   20bae:	a909      	add	r1, sp, #36	; 0x24
   20bb0:	f8d2 a004 	ldr.w	sl, [r2, #4]
   20bb4:	2201      	movs	r2, #1
   20bb6:	47d0      	blx	sl
   20bb8:	2800      	cmp	r0, #0
   20bba:	d1df      	bne.n	20b7c <fxos8700_trigger_init+0x54>
	uint8_t tx_buf[2] = {reg_addr, value};
   20bbc:	f241 7217 	movw	r2, #5911	; 0x1717
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   20bc0:	f8d9 0000 	ldr.w	r0, [r9]
   20bc4:	f898 300a 	ldrb.w	r3, [r8, #10]
   20bc8:	f8ad 2020 	strh.w	r2, [sp, #32]
	msg.len = num_bytes;
   20bcc:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   20bd0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
	return api->transfer(dev, msgs, num_msgs, addr);
   20bd4:	6882      	ldr	r2, [r0, #8]
   20bd6:	a909      	add	r1, sp, #36	; 0x24
   20bd8:	6855      	ldr	r5, [r2, #4]
   20bda:	2201      	movs	r2, #1
   20bdc:	47a8      	blx	r5
   20bde:	4605      	mov	r5, r0
   20be0:	2800      	cmp	r0, #0
   20be2:	d1cb      	bne.n	20b7c <fxos8700_trigger_init+0x54>
	data->gpio = device_get_binding(config->gpio_name);
   20be4:	6870      	ldr	r0, [r6, #4]
   20be6:	f002 f92b 	bl	22e40 <z_impl_device_get_binding>
   20bea:	6220      	str	r0, [r4, #32]
	if (data->gpio == NULL) {
   20bec:	b368      	cbz	r0, 20c4a <fxos8700_trigger_init+0x122>
	data->gpio_pin = config->gpio_pin;
   20bee:	f896 9008 	ldrb.w	r9, [r6, #8]
   20bf2:	f884 9024 	strb.w	r9, [r4, #36]	; 0x24
			   GPIO_INPUT | config->gpio_flags);
   20bf6:	f896 8009 	ldrb.w	r8, [r6, #9]
	struct gpio_driver_data *data =
   20bfa:	68c7      	ldr	r7, [r0, #12]
	return api->pin_configure(port, pin, flags);
   20bfc:	6883      	ldr	r3, [r0, #8]
   20bfe:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   20c02:	681b      	ldr	r3, [r3, #0]
   20c04:	4649      	mov	r1, r9
   20c06:	4798      	blx	r3
	if (ret != 0) {
   20c08:	b950      	cbnz	r0, 20c20 <fxos8700_trigger_init+0xf8>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   20c0a:	683a      	ldr	r2, [r7, #0]
   20c0c:	2301      	movs	r3, #1
   20c0e:	fa03 f109 	lsl.w	r1, r3, r9
   20c12:	f018 0f01 	tst.w	r8, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20c16:	bf14      	ite	ne
   20c18:	4311      	orrne	r1, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   20c1a:	ea22 0101 	biceq.w	r1, r2, r1
   20c1e:	6039      	str	r1, [r7, #0]
			   BIT(config->gpio_pin));
   20c20:	7a33      	ldrb	r3, [r6, #8]
	callback->handler = handler;
   20c22:	480c      	ldr	r0, [pc, #48]	; (20c54 <fxos8700_trigger_init+0x12c>)
   20c24:	2201      	movs	r2, #1
   20c26:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
   20c2a:	e9c4 030b 	strd	r0, r3, [r4, #44]	; 0x2c
	gpio_add_callback(data->gpio, &data->gpio_cb);
   20c2e:	6a20      	ldr	r0, [r4, #32]
	if (api->manage_callback == NULL) {
   20c30:	6883      	ldr	r3, [r0, #8]
   20c32:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&data->gpio_cb, fxos8700_gpio_callback,
   20c34:	f104 0128 	add.w	r1, r4, #40	; 0x28
   20c38:	b103      	cbz	r3, 20c3c <fxos8700_trigger_init+0x114>
	return api->manage_callback(port, callback, true);
   20c3a:	4798      	blx	r3
	gpio_pin_interrupt_configure(data->gpio, config->gpio_pin,
   20c3c:	6a20      	ldr	r0, [r4, #32]
   20c3e:	7a31      	ldrb	r1, [r6, #8]
   20c40:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   20c44:	f00b fd82 	bl	2c74c <z_impl_gpio_pin_interrupt_configure>
   20c48:	e79a      	b.n	20b80 <fxos8700_trigger_init+0x58>
		return -EINVAL;
   20c4a:	f06f 0515 	mvn.w	r5, #21
   20c4e:	e797      	b.n	20b80 <fxos8700_trigger_init+0x58>
   20c50:	00020a0d 	.word	0x00020a0d
   20c54:	0002c79b 	.word	0x0002c79b

00020c58 <ti_hdc_channel_get>:
	/*
	 * See datasheet "Temperature Register" and "Humidity
	 * Register" sections for more details on processing
	 * sample data.
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   20c58:	290d      	cmp	r1, #13
	struct ti_hdc_data *drv_data = dev->data;
   20c5a:	68c3      	ldr	r3, [r0, #12]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   20c5c:	d112      	bne.n	20c84 <ti_hdc_channel_get+0x2c>
		/* val = -40 + 165 * sample / 2^16 */
		tmp = (uint64_t)drv_data->t_sample * 165U;
   20c5e:	8898      	ldrh	r0, [r3, #4]
   20c60:	23a5      	movs	r3, #165	; 0xa5
   20c62:	fba0 0103 	umull	r0, r1, r0, r3
		val->val1 = (int32_t)(tmp >> 16) - 40;
   20c66:	0c03      	lsrs	r3, r0, #16
   20c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   20c6c:	3b28      	subs	r3, #40	; 0x28
   20c6e:	6013      	str	r3, [r2, #0]
		val->val2 = ((tmp & 0xFFFF) * 1000000U) >> 16;
   20c70:	4b0f      	ldr	r3, [pc, #60]	; (20cb0 <ti_hdc_channel_get+0x58>)
   20c72:	b280      	uxth	r0, r0
   20c74:	fba0 0103 	umull	r0, r1, r0, r3
   20c78:	0c03      	lsrs	r3, r0, #16
   20c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
		/* val = 100 * sample / 2^16 */
		tmp = (uint64_t)drv_data->rh_sample * 100U;
		val->val1 = tmp >> 16;
		/* x * 1000000 / 65536 == x * 15625 / 1024 */
		val->val2 = ((tmp & 0xFFFF) * 15625U) >> 10;
   20c7e:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
   20c80:	2000      	movs	r0, #0
   20c82:	4770      	bx	lr
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   20c84:	2910      	cmp	r1, #16
   20c86:	d110      	bne.n	20caa <ti_hdc_channel_get+0x52>
		tmp = (uint64_t)drv_data->rh_sample * 100U;
   20c88:	88d8      	ldrh	r0, [r3, #6]
   20c8a:	2364      	movs	r3, #100	; 0x64
   20c8c:	fba0 0103 	umull	r0, r1, r0, r3
		val->val1 = tmp >> 16;
   20c90:	0c03      	lsrs	r3, r0, #16
   20c92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   20c96:	6013      	str	r3, [r2, #0]
		val->val2 = ((tmp & 0xFFFF) * 15625U) >> 10;
   20c98:	b280      	uxth	r0, r0
   20c9a:	f643 5309 	movw	r3, #15625	; 0x3d09
   20c9e:	fba0 0103 	umull	r0, r1, r0, r3
   20ca2:	0a83      	lsrs	r3, r0, #10
   20ca4:	ea43 5381 	orr.w	r3, r3, r1, lsl #22
   20ca8:	e7e9      	b.n	20c7e <ti_hdc_channel_get+0x26>
		return -ENOTSUP;
   20caa:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   20cae:	4770      	bx	lr
   20cb0:	000f4240 	.word	0x000f4240

00020cb4 <ti_hdc_init>:
	}
	return (buf[0] << 8 | buf[1]);
}

static int ti_hdc_init(const struct device *dev)
{
   20cb4:	b538      	push	{r3, r4, r5, lr}
	struct ti_hdc_data *drv_data = dev->data;
   20cb6:	68c4      	ldr	r4, [r0, #12]
   20cb8:	4825      	ldr	r0, [pc, #148]	; (20d50 <ti_hdc_init+0x9c>)
   20cba:	f002 f8c1 	bl	22e40 <z_impl_device_get_binding>
	uint16_t tmp;

	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
   20cbe:	6020      	str	r0, [r4, #0]

	if (drv_data->i2c == NULL) {
   20cc0:	b910      	cbnz	r0, 20cc8 <ti_hdc_init+0x14>
		LOG_DBG("Failed to get pointer to %s device!",
			DT_INST_BUS_LABEL(0));
		return -EINVAL;
   20cc2:	f06f 0015 	mvn.w	r0, #21
#endif

	LOG_INF("Initialized device successfully");

	return 0;
}
   20cc6:	bd38      	pop	{r3, r4, r5, pc}
	if (read16(drv_data->i2c, DT_INST_REG_ADDR(0),
   20cc8:	21fe      	movs	r1, #254	; 0xfe
   20cca:	f00b fe04 	bl	2c8d6 <read16.constprop.0>
   20cce:	f245 4349 	movw	r3, #21577	; 0x5449
   20cd2:	4298      	cmp	r0, r3
   20cd4:	d1f5      	bne.n	20cc2 <ti_hdc_init+0xe>
	tmp = read16(drv_data->i2c, DT_INST_REG_ADDR(0),
   20cd6:	6820      	ldr	r0, [r4, #0]
   20cd8:	21ff      	movs	r1, #255	; 0xff
   20cda:	f00b fdfc 	bl	2c8d6 <read16.constprop.0>
	if (tmp != TI_HDC1000_DEVID && tmp != TI_HDC1050_DEVID) {
   20cde:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   20ce2:	d003      	beq.n	20cec <ti_hdc_init+0x38>
   20ce4:	f241 0350 	movw	r3, #4176	; 0x1050
   20ce8:	4298      	cmp	r0, r3
   20cea:	d1ea      	bne.n	20cc2 <ti_hdc_init+0xe>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20cec:	f04f 32ff 	mov.w	r2, #4294967295
   20cf0:	2100      	movs	r1, #0
   20cf2:	f104 0018 	add.w	r0, r4, #24
   20cf6:	f00c fbd5 	bl	2d4a4 <z_impl_k_sem_init>
   20cfa:	4816      	ldr	r0, [pc, #88]	; (20d54 <ti_hdc_init+0xa0>)
   20cfc:	f002 f8a0 	bl	22e40 <z_impl_device_get_binding>
	drv_data->gpio = device_get_binding(
   20d00:	60a0      	str	r0, [r4, #8]
	if (drv_data->gpio == NULL) {
   20d02:	2800      	cmp	r0, #0
   20d04:	d0dd      	beq.n	20cc2 <ti_hdc_init+0xe>
	struct gpio_driver_data *data =
   20d06:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
   20d08:	6883      	ldr	r3, [r0, #8]
   20d0a:	f240 1211 	movw	r2, #273	; 0x111
   20d0e:	681b      	ldr	r3, [r3, #0]
   20d10:	2116      	movs	r1, #22
   20d12:	4798      	blx	r3
	if (ret != 0) {
   20d14:	b918      	cbnz	r0, 20d1e <ti_hdc_init+0x6a>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20d16:	682b      	ldr	r3, [r5, #0]
   20d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   20d1c:	602b      	str	r3, [r5, #0]
	callback->handler = handler;
   20d1e:	4b0e      	ldr	r3, [pc, #56]	; (20d58 <ti_hdc_init+0xa4>)
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   20d20:	68a0      	ldr	r0, [r4, #8]
   20d22:	6123      	str	r3, [r4, #16]
	callback->pin_mask = pin_mask;
   20d24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   20d28:	6163      	str	r3, [r4, #20]
	if (api->manage_callback == NULL) {
   20d2a:	6883      	ldr	r3, [r0, #8]
   20d2c:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&drv_data->gpio_cb,
   20d2e:	f104 010c 	add.w	r1, r4, #12
   20d32:	b913      	cbnz	r3, 20d3a <ti_hdc_init+0x86>
		return -EIO;
   20d34:	f06f 0004 	mvn.w	r0, #4
   20d38:	e7c5      	b.n	20cc6 <ti_hdc_init+0x12>
	return api->manage_callback(port, callback, true);
   20d3a:	2201      	movs	r2, #1
   20d3c:	4798      	blx	r3
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
   20d3e:	2800      	cmp	r0, #0
   20d40:	dbf8      	blt.n	20d34 <ti_hdc_init+0x80>
	gpio_pin_interrupt_configure(drv_data->gpio,
   20d42:	68a0      	ldr	r0, [r4, #8]
   20d44:	f44f 21b8 	mov.w	r1, #376832	; 0x5c000
   20d48:	f00b fdb2 	bl	2c8b0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	return 0;
   20d4c:	2000      	movs	r0, #0
   20d4e:	e7ba      	b.n	20cc6 <ti_hdc_init+0x12>
   20d50:	00033724 	.word	0x00033724
   20d54:	0002fa59 	.word	0x0002fa59
   20d58:	0002c917 	.word	0x0002c917

00020d5c <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   20d5c:	b538      	push	{r3, r4, r5, lr}
   20d5e:	4604      	mov	r4, r0
   20d60:	2200      	movs	r2, #0
   20d62:	2101      	movs	r1, #1
   20d64:	2004      	movs	r0, #4
   20d66:	f7e5 fc07 	bl	6578 <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   20d6a:	68e3      	ldr	r3, [r4, #12]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   20d6c:	4a09      	ldr	r2, [pc, #36]	; (20d94 <spi_1_init+0x38>)
	dev_data->dev = dev;
   20d6e:	661c      	str	r4, [r3, #96]	; 0x60
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   20d70:	6860      	ldr	r0, [r4, #4]
   20d72:	f100 0108 	add.w	r1, r0, #8
   20d76:	f001 faa9 	bl	222cc <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   20d7a:	4b07      	ldr	r3, [pc, #28]	; (20d98 <spi_1_init+0x3c>)
   20d7c:	4298      	cmp	r0, r3
		return -EBUSY;
   20d7e:	bf08      	it	eq
   20d80:	2500      	moveq	r5, #0
SPI_NRFX_SPI_DEVICE(1);
   20d82:	68e0      	ldr	r0, [r4, #12]
		return -EBUSY;
   20d84:	bf18      	it	ne
   20d86:	f06f 050f 	mvnne.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
   20d8a:	f00b fe4e 	bl	2ca2a <spi_context_unlock_unconditionally>
   20d8e:	4628      	mov	r0, r5
   20d90:	bd38      	pop	{r3, r4, r5, pc}
   20d92:	bf00      	nop
   20d94:	0002ca8d 	.word	0x0002ca8d
   20d98:	0bad0000 	.word	0x0bad0000

00020d9c <transfer_next_chunk>:
{
   20d9c:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   20d9e:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   20da0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   20da2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
{
   20da4:	b085      	sub	sp, #20
   20da6:	b99b      	cbnz	r3, 20dd0 <transfer_next_chunk+0x34>
	if (chunk_len > 0) {
   20da8:	bb89      	cbnz	r1, 20e0e <transfer_next_chunk+0x72>
	int error = 0;
   20daa:	460c      	mov	r4, r1
	_spi_context_cs_control(ctx, on, false);
   20dac:	2200      	movs	r2, #0
   20dae:	4611      	mov	r1, r2
   20db0:	4628      	mov	r0, r5
   20db2:	f00b fe15 	bl	2c9e0 <_spi_context_cs_control.isra.0>
	if (!ctx->asynchronous) {
   20db6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   20dba:	bb83      	cbnz	r3, 20e1e <transfer_next_chunk+0x82>
		ctx->sync_status = status;
   20dbc:	636c      	str	r4, [r5, #52]	; 0x34
	z_impl_k_sem_give(sem);
   20dbe:	f105 001c 	add.w	r0, r5, #28
   20dc2:	f002 fe77 	bl	23ab4 <z_impl_k_sem_give>
	dev_data->busy = false;
   20dc6:	2300      	movs	r3, #0
   20dc8:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
}
   20dcc:	b005      	add	sp, #20
   20dce:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   20dd0:	b1f9      	cbz	r1, 20e12 <transfer_next_chunk+0x76>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   20dd2:	4299      	cmp	r1, r3
   20dd4:	460a      	mov	r2, r1
   20dd6:	bf28      	it	cs
   20dd8:	461a      	movcs	r2, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   20dda:	6d2c      	ldr	r4, [r5, #80]	; 0x50
		dev_data->chunk_len = chunk_len;
   20ddc:	666a      	str	r2, [r5, #100]	; 0x64
		xfer.p_tx_buffer = ctx->tx_buf;
   20dde:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   20de0:	b1cc      	cbz	r4, 20e16 <transfer_next_chunk+0x7a>
   20de2:	2b00      	cmp	r3, #0
   20de4:	bf18      	it	ne
   20de6:	4613      	movne	r3, r2
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   20de8:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   20dea:	6dab      	ldr	r3, [r5, #88]	; 0x58
   20dec:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   20dee:	b1a3      	cbz	r3, 20e1a <transfer_next_chunk+0x7e>
   20df0:	2900      	cmp	r1, #0
   20df2:	bf18      	it	ne
   20df4:	4611      	movne	r1, r2
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   20df6:	9103      	str	r1, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   20df8:	6840      	ldr	r0, [r0, #4]
   20dfa:	2200      	movs	r2, #0
   20dfc:	4669      	mov	r1, sp
   20dfe:	f001 fb07 	bl	22410 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   20e02:	4b0c      	ldr	r3, [pc, #48]	; (20e34 <transfer_next_chunk+0x98>)
   20e04:	4298      	cmp	r0, r3
   20e06:	d0e1      	beq.n	20dcc <transfer_next_chunk+0x30>
		error = -EIO;
   20e08:	f06f 0404 	mvn.w	r4, #4
   20e0c:	e7ce      	b.n	20dac <transfer_next_chunk+0x10>
   20e0e:	460a      	mov	r2, r1
   20e10:	e7e3      	b.n	20dda <transfer_next_chunk+0x3e>
   20e12:	461a      	mov	r2, r3
   20e14:	e7e1      	b.n	20dda <transfer_next_chunk+0x3e>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   20e16:	4623      	mov	r3, r4
   20e18:	e7e6      	b.n	20de8 <transfer_next_chunk+0x4c>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   20e1a:	4619      	mov	r1, r3
   20e1c:	e7eb      	b.n	20df6 <transfer_next_chunk+0x5a>
		if (ctx->signal) {
   20e1e:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   20e20:	b110      	cbz	r0, 20e28 <transfer_next_chunk+0x8c>
	return z_impl_k_poll_signal_raise(signal, result);
   20e22:	4621      	mov	r1, r4
   20e24:	f003 f9c2 	bl	241ac <z_impl_k_poll_signal_raise>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
   20e28:	682b      	ldr	r3, [r5, #0]
   20e2a:	889b      	ldrh	r3, [r3, #4]
   20e2c:	045b      	lsls	r3, r3, #17
   20e2e:	d4ca      	bmi.n	20dc6 <transfer_next_chunk+0x2a>
	z_impl_k_sem_give(sem);
   20e30:	1d28      	adds	r0, r5, #4
   20e32:	e7c6      	b.n	20dc2 <transfer_next_chunk+0x26>
   20e34:	0bad0000 	.word	0x0bad0000

00020e38 <transceive>:
{
   20e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   20e3c:	68c4      	ldr	r4, [r0, #12]
{
   20e3e:	4680      	mov	r8, r0
   20e40:	468a      	mov	sl, r1
   20e42:	4617      	mov	r7, r2
   20e44:	461e      	mov	r6, r3
	k_sem_take(&ctx->lock, K_FOREVER);
   20e46:	f104 0904 	add.w	r9, r4, #4
	return z_impl_k_sem_take(sem, timeout);
   20e4a:	f04f 32ff 	mov.w	r2, #4294967295
   20e4e:	f04f 33ff 	mov.w	r3, #4294967295
   20e52:	4648      	mov	r0, r9
   20e54:	f002 fe54 	bl	23b00 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   20e58:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   20e5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	ctx->signal = signal;
   20e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20e62:	63a3      	str	r3, [r4, #56]	; 0x38
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   20e64:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   20e68:	6813      	ldr	r3, [r2, #0]
   20e6a:	459a      	cmp	sl, r3
   20e6c:	d067      	beq.n	20f3e <transceive+0x106>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   20e6e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   20e72:	f641 0109 	movw	r1, #6153	; 0x1809
   20e76:	420b      	tst	r3, r1
   20e78:	f040 80bd 	bne.w	20ff6 <transceive+0x1be>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   20e7c:	f3c3 1345 	ubfx	r3, r3, #5, #6
   20e80:	2b08      	cmp	r3, #8
   20e82:	f040 80b8 	bne.w	20ff6 <transceive+0x1be>
	if (spi_cfg->frequency < 125000) {
   20e86:	f8da 1000 	ldr.w	r1, [sl]
   20e8a:	4b5c      	ldr	r3, [pc, #368]	; (20ffc <transceive+0x1c4>)
   20e8c:	4299      	cmp	r1, r3
   20e8e:	f240 80b2 	bls.w	20ff6 <transceive+0x1be>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   20e92:	f8da 3008 	ldr.w	r3, [sl, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   20e96:	f8d8 b004 	ldr.w	fp, [r8, #4]
	ctx->config = spi_cfg;
   20e9a:	f8c2 a000 	str.w	sl, [r2]
   20e9e:	b1e3      	cbz	r3, 20eda <transceive+0xa2>
   20ea0:	6818      	ldr	r0, [r3, #0]
   20ea2:	b1d0      	cbz	r0, 20eda <transceive+0xa2>
				   ctx->config->cs->gpio_dt_flags |
   20ea4:	7a5a      	ldrb	r2, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   20ea6:	7a19      	ldrb	r1, [r3, #8]
	struct gpio_driver_data *data =
   20ea8:	68c5      	ldr	r5, [r0, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   20eaa:	07d3      	lsls	r3, r2, #31
   20eac:	bf54      	ite	pl
   20eae:	f442 52b0 	orrpl.w	r2, r2, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   20eb2:	f482 6220 	eormi.w	r2, r2, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   20eb6:	6883      	ldr	r3, [r0, #8]
   20eb8:	681b      	ldr	r3, [r3, #0]
   20eba:	e9cd 1200 	strd	r1, r2, [sp]
   20ebe:	4798      	blx	r3
	if (ret != 0) {
   20ec0:	b958      	cbnz	r0, 20eda <transceive+0xa2>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   20ec2:	9900      	ldr	r1, [sp, #0]
   20ec4:	9a01      	ldr	r2, [sp, #4]
   20ec6:	6828      	ldr	r0, [r5, #0]
   20ec8:	2301      	movs	r3, #1
   20eca:	fa03 f101 	lsl.w	r1, r3, r1
   20ece:	07d3      	lsls	r3, r2, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20ed0:	bf4c      	ite	mi
   20ed2:	4301      	orrmi	r1, r0
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   20ed4:	ea20 0101 	bicpl.w	r1, r0, r1
   20ed8:	6029      	str	r1, [r5, #0]
	nrf_spi_configure(spi->p_reg,
   20eda:	f8ba 5004 	ldrh.w	r5, [sl, #4]
   20ede:	f8db 2000 	ldr.w	r2, [fp]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   20ee2:	07a9      	lsls	r1, r5, #30
   20ee4:	f005 0304 	and.w	r3, r5, #4
   20ee8:	d562      	bpl.n	20fb0 <transceive+0x178>
			return NRF_SPI_MODE_2;
   20eea:	2b00      	cmp	r3, #0
   20eec:	bf14      	ite	ne
   20eee:	2303      	movne	r3, #3
   20ef0:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   20ef2:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   20ef4:	f3c5 1500 	ubfx	r5, r5, #4, #1
   20ef8:	d05e      	beq.n	20fb8 <transceive+0x180>
   20efa:	2b03      	cmp	r3, #3
   20efc:	d05f      	beq.n	20fbe <transceive+0x186>
   20efe:	2b01      	cmp	r3, #1
   20f00:	d101      	bne.n	20f06 <transceive+0xce>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   20f02:	f045 0502 	orr.w	r5, r5, #2
	nrf_spi_frequency_set(spi->p_reg,
   20f06:	f8da 1000 	ldr.w	r1, [sl]
	if (frequency < 250000) {
   20f0a:	4b3d      	ldr	r3, [pc, #244]	; (21000 <transceive+0x1c8>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   20f0c:	f8c2 5554 	str.w	r5, [r2, #1364]	; 0x554
   20f10:	4299      	cmp	r1, r3
   20f12:	d957      	bls.n	20fc4 <transceive+0x18c>
	} else if (frequency < 500000) {
   20f14:	4b3b      	ldr	r3, [pc, #236]	; (21004 <transceive+0x1cc>)
   20f16:	4299      	cmp	r1, r3
   20f18:	d957      	bls.n	20fca <transceive+0x192>
	} else if (frequency < 1000000) {
   20f1a:	4b3b      	ldr	r3, [pc, #236]	; (21008 <transceive+0x1d0>)
   20f1c:	4299      	cmp	r1, r3
   20f1e:	d957      	bls.n	20fd0 <transceive+0x198>
	} else if (frequency < 2000000) {
   20f20:	4b3a      	ldr	r3, [pc, #232]	; (2100c <transceive+0x1d4>)
   20f22:	4299      	cmp	r1, r3
   20f24:	d957      	bls.n	20fd6 <transceive+0x19e>
	} else if (frequency < 4000000) {
   20f26:	4b3a      	ldr	r3, [pc, #232]	; (21010 <transceive+0x1d8>)
   20f28:	4299      	cmp	r1, r3
   20f2a:	d957      	bls.n	20fdc <transceive+0x1a4>
		return NRF_SPI_FREQ_8M;
   20f2c:	4b39      	ldr	r3, [pc, #228]	; (21014 <transceive+0x1dc>)
   20f2e:	4299      	cmp	r1, r3
   20f30:	bf34      	ite	cc
   20f32:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   20f36:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   20f3a:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   20f3e:	2301      	movs	r3, #1
   20f40:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	if (tx_bufs) {
   20f44:	2f00      	cmp	r7, #0
   20f46:	d04c      	beq.n	20fe2 <transceive+0x1aa>
		ctx->current_tx = tx_bufs->buffers;
   20f48:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   20f4a:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   20f4c:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count = tx_bufs->count;
   20f4e:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   20f50:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   20f52:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   20f54:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->tx_len = ctx->current_tx->len / dfs;
   20f56:	6563      	str	r3, [r4, #84]	; 0x54
	if (rx_bufs) {
   20f58:	2e00      	cmp	r6, #0
   20f5a:	d047      	beq.n	20fec <transceive+0x1b4>
		ctx->current_rx = rx_bufs->buffers;
   20f5c:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   20f5e:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   20f60:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_count = rx_bufs->count;
   20f62:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   20f64:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   20f66:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   20f68:	65a2      	str	r2, [r4, #88]	; 0x58
		ctx->rx_len = ctx->current_rx->len / dfs;
   20f6a:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   20f6c:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
   20f6e:	462a      	mov	r2, r5
   20f70:	2101      	movs	r1, #1
   20f72:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   20f74:	6365      	str	r5, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
   20f76:	f00b fd33 	bl	2c9e0 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   20f7a:	4640      	mov	r0, r8
   20f7c:	f7ff ff0e 	bl	20d9c <transfer_next_chunk>
	if (!ctx->asynchronous) {
   20f80:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   20f84:	b943      	cbnz	r3, 20f98 <transceive+0x160>
   20f86:	f04f 32ff 	mov.w	r2, #4294967295
   20f8a:	f04f 33ff 	mov.w	r3, #4294967295
   20f8e:	f104 001c 	add.w	r0, r4, #28
   20f92:	f002 fdb5 	bl	23b00 <z_impl_k_sem_take>
		status = ctx->sync_status;
   20f96:	6b65      	ldr	r5, [r4, #52]	; 0x34
	if (!ctx->asynchronous || (status < 0)) {
   20f98:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   20f9c:	b10b      	cbz	r3, 20fa2 <transceive+0x16a>
   20f9e:	2d00      	cmp	r5, #0
   20fa0:	da02      	bge.n	20fa8 <transceive+0x170>
	z_impl_k_sem_give(sem);
   20fa2:	4648      	mov	r0, r9
   20fa4:	f002 fd86 	bl	23ab4 <z_impl_k_sem_give>
}
   20fa8:	4628      	mov	r0, r5
   20faa:	b003      	add	sp, #12
   20fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return NRF_SPI_MODE_0;
   20fb0:	3b00      	subs	r3, #0
   20fb2:	bf18      	it	ne
   20fb4:	2301      	movne	r3, #1
   20fb6:	e79c      	b.n	20ef2 <transceive+0xba>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   20fb8:	f045 0504 	orr.w	r5, r5, #4
        break;
   20fbc:	e7a3      	b.n	20f06 <transceive+0xce>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   20fbe:	f045 0506 	orr.w	r5, r5, #6
        break;
   20fc2:	e7a0      	b.n	20f06 <transceive+0xce>
		return NRF_SPI_FREQ_125K;
   20fc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   20fc8:	e7b7      	b.n	20f3a <transceive+0x102>
		return NRF_SPI_FREQ_250K;
   20fca:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   20fce:	e7b4      	b.n	20f3a <transceive+0x102>
		return NRF_SPI_FREQ_500K;
   20fd0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   20fd4:	e7b1      	b.n	20f3a <transceive+0x102>
		return NRF_SPI_FREQ_1M;
   20fd6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   20fda:	e7ae      	b.n	20f3a <transceive+0x102>
		return NRF_SPI_FREQ_2M;
   20fdc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   20fe0:	e7ab      	b.n	20f3a <transceive+0x102>
		ctx->tx_count = 0;
   20fe2:	e9c4 7710 	strd	r7, r7, [r4, #64]	; 0x40
		ctx->tx_len = 0;
   20fe6:	e9c4 7714 	strd	r7, r7, [r4, #80]	; 0x50
   20fea:	e7b5      	b.n	20f58 <transceive+0x120>
		ctx->rx_count = 0;
   20fec:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
		ctx->rx_len = 0;
   20ff0:	e9c4 6616 	strd	r6, r6, [r4, #88]	; 0x58
   20ff4:	e7ba      	b.n	20f6c <transceive+0x134>
		return -EINVAL;
   20ff6:	f06f 0515 	mvn.w	r5, #21
   20ffa:	e7cd      	b.n	20f98 <transceive+0x160>
   20ffc:	0001e847 	.word	0x0001e847
   21000:	0003d08f 	.word	0x0003d08f
   21004:	0007a11f 	.word	0x0007a11f
   21008:	000f423f 	.word	0x000f423f
   2100c:	001e847f 	.word	0x001e847f
   21010:	003d08ff 	.word	0x003d08ff
   21014:	007a1200 	.word	0x007a1200

00021018 <spi_3_init>:
#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(2);
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(3);
   21018:	b538      	push	{r3, r4, r5, lr}
   2101a:	4604      	mov	r4, r0
   2101c:	2200      	movs	r2, #0
   2101e:	2101      	movs	r1, #1
   21020:	202f      	movs	r0, #47	; 0x2f
   21022:	f7e5 faa9 	bl	6578 <z_arm_irq_priority_set>
	struct spi_nrfx_data *data = get_dev_data(dev);
   21026:	68e3      	ldr	r3, [r4, #12]
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   21028:	4a09      	ldr	r2, [pc, #36]	; (21050 <spi_3_init+0x38>)
	data->dev = dev;
   2102a:	661c      	str	r4, [r3, #96]	; 0x60
	result = nrfx_spim_init(&get_dev_config(dev)->spim,
   2102c:	6860      	ldr	r0, [r4, #4]
   2102e:	f100 010c 	add.w	r1, r0, #12
   21032:	f001 fa99 	bl	22568 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
   21036:	4b07      	ldr	r3, [pc, #28]	; (21054 <spi_3_init+0x3c>)
   21038:	4298      	cmp	r0, r3
		return -EBUSY;
   2103a:	bf08      	it	eq
   2103c:	2500      	moveq	r5, #0
SPI_NRFX_SPIM_DEVICE(3);
   2103e:	68e0      	ldr	r0, [r4, #12]
		return -EBUSY;
   21040:	bf18      	it	ne
   21042:	f06f 050f 	mvnne.w	r5, #15
SPI_NRFX_SPIM_DEVICE(3);
   21046:	f00b fd90 	bl	2cb6a <spi_context_unlock_unconditionally>
   2104a:	4628      	mov	r0, r5
   2104c:	bd38      	pop	{r3, r4, r5, pc}
   2104e:	bf00      	nop
   21050:	0002cbcd 	.word	0x0002cbcd
   21054:	0bad0000 	.word	0x0bad0000

00021058 <transfer_next_chunk>:
{
   21058:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2105a:	68c5      	ldr	r5, [r0, #12]
	if (!ctx->tx_len) {
   2105c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   2105e:	6dec      	ldr	r4, [r5, #92]	; 0x5c
{
   21060:	b085      	sub	sp, #20
   21062:	b99b      	cbnz	r3, 2108c <transfer_next_chunk+0x34>
	if (chunk_len > 0) {
   21064:	b9bc      	cbnz	r4, 21096 <transfer_next_chunk+0x3e>
	_spi_context_cs_control(ctx, on, false);
   21066:	2200      	movs	r2, #0
   21068:	4611      	mov	r1, r2
   2106a:	4628      	mov	r0, r5
   2106c:	f00b fd58 	bl	2cb20 <_spi_context_cs_control.isra.0>
	if (!ctx->asynchronous) {
   21070:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   21074:	2b00      	cmp	r3, #0
   21076:	d143      	bne.n	21100 <transfer_next_chunk+0xa8>
		ctx->sync_status = status;
   21078:	636c      	str	r4, [r5, #52]	; 0x34
   2107a:	f105 001c 	add.w	r0, r5, #28
   2107e:	f002 fd19 	bl	23ab4 <z_impl_k_sem_give>
	dev_data->busy = false;
   21082:	2300      	movs	r3, #0
   21084:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
}
   21088:	b005      	add	sp, #20
   2108a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
   2108c:	2c00      	cmp	r4, #0
   2108e:	d035      	beq.n	210fc <transfer_next_chunk+0xa4>
	return MIN(ctx->tx_len, ctx->rx_len);
   21090:	429c      	cmp	r4, r3
   21092:	bf28      	it	cs
   21094:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
   21096:	6d29      	ldr	r1, [r5, #80]	; 0x50
	const struct spi_nrfx_config *dev_config = get_dev_config(dev);
   21098:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
   2109a:	b179      	cbz	r1, 210bc <transfer_next_chunk+0x64>
   2109c:	b173      	cbz	r3, 210bc <transfer_next_chunk+0x64>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2109e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   210a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   210a6:	d009      	beq.n	210bc <transfer_next_chunk+0x64>
			if (chunk_len > sizeof(dev_data->buffer)) {
   210a8:	2c08      	cmp	r4, #8
   210aa:	bf28      	it	cs
   210ac:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
   210ae:	f105 0769 	add.w	r7, r5, #105	; 0x69
   210b2:	4622      	mov	r2, r4
   210b4:	4638      	mov	r0, r7
   210b6:	f005 fc74 	bl	269a2 <memcpy>
			tx_buf = dev_data->buffer;
   210ba:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
   210bc:	68b2      	ldr	r2, [r6, #8]
   210be:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.p_tx_buffer = tx_buf;
   210c0:	9100      	str	r1, [sp, #0]
   210c2:	4294      	cmp	r4, r2
   210c4:	bf28      	it	cs
   210c6:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
   210c8:	666c      	str	r4, [r5, #100]	; 0x64
   210ca:	b11b      	cbz	r3, 210d4 <transfer_next_chunk+0x7c>
   210cc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   210ce:	2b00      	cmp	r3, #0
   210d0:	bf18      	it	ne
   210d2:	4623      	movne	r3, r4
   210d4:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   210d6:	6dab      	ldr	r3, [r5, #88]	; 0x58
   210d8:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   210da:	b11b      	cbz	r3, 210e4 <transfer_next_chunk+0x8c>
   210dc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   210de:	2b00      	cmp	r3, #0
   210e0:	bf18      	it	ne
   210e2:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   210e4:	2200      	movs	r2, #0
   210e6:	4669      	mov	r1, sp
   210e8:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   210ea:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   210ec:	f001 faf0 	bl	226d0 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   210f0:	4b09      	ldr	r3, [pc, #36]	; (21118 <transfer_next_chunk+0xc0>)
   210f2:	4298      	cmp	r0, r3
   210f4:	d0c8      	beq.n	21088 <transfer_next_chunk+0x30>
			error = -EIO;
   210f6:	f06f 0404 	mvn.w	r4, #4
   210fa:	e7b4      	b.n	21066 <transfer_next_chunk+0xe>
   210fc:	461c      	mov	r4, r3
   210fe:	e7ca      	b.n	21096 <transfer_next_chunk+0x3e>
		if (ctx->signal) {
   21100:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   21102:	b110      	cbz	r0, 2110a <transfer_next_chunk+0xb2>
	return z_impl_k_poll_signal_raise(signal, result);
   21104:	4621      	mov	r1, r4
   21106:	f003 f851 	bl	241ac <z_impl_k_poll_signal_raise>
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
   2110a:	682b      	ldr	r3, [r5, #0]
   2110c:	889b      	ldrh	r3, [r3, #4]
   2110e:	045b      	lsls	r3, r3, #17
   21110:	d4b7      	bmi.n	21082 <transfer_next_chunk+0x2a>
	z_impl_k_sem_give(sem);
   21112:	1d28      	adds	r0, r5, #4
   21114:	e7b3      	b.n	2107e <transfer_next_chunk+0x26>
   21116:	bf00      	nop
   21118:	0bad0000 	.word	0x0bad0000

0002111c <transceive>:
{
   2111c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   21120:	68c4      	ldr	r4, [r0, #12]
{
   21122:	4680      	mov	r8, r0
   21124:	468a      	mov	sl, r1
   21126:	4617      	mov	r7, r2
   21128:	461e      	mov	r6, r3
	k_sem_take(&ctx->lock, K_FOREVER);
   2112a:	f104 0904 	add.w	r9, r4, #4
	return z_impl_k_sem_take(sem, timeout);
   2112e:	f04f 32ff 	mov.w	r2, #4294967295
   21132:	f04f 33ff 	mov.w	r3, #4294967295
   21136:	4648      	mov	r0, r9
   21138:	f002 fce2 	bl	23b00 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
   2113c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   21140:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	ctx->signal = signal;
   21144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   21146:	63a3      	str	r3, [r4, #56]	; 0x38
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   21148:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   2114c:	6813      	ldr	r3, [r2, #0]
   2114e:	459a      	cmp	sl, r3
   21150:	d06d      	beq.n	2122e <transceive+0x112>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   21152:	f8ba 3004 	ldrh.w	r3, [sl, #4]
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   21156:	f641 0109 	movw	r1, #6153	; 0x1809
   2115a:	420b      	tst	r3, r1
   2115c:	f040 80c9 	bne.w	212f2 <transceive+0x1d6>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   21160:	f3c3 1345 	ubfx	r3, r3, #5, #6
   21164:	2b08      	cmp	r3, #8
   21166:	f040 80c4 	bne.w	212f2 <transceive+0x1d6>
	if (spi_cfg->frequency < 125000) {
   2116a:	f8da 1000 	ldr.w	r1, [sl]
   2116e:	4b62      	ldr	r3, [pc, #392]	; (212f8 <transceive+0x1dc>)
   21170:	4299      	cmp	r1, r3
   21172:	f240 80be 	bls.w	212f2 <transceive+0x1d6>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   21176:	f8da 3008 	ldr.w	r3, [sl, #8]
	const nrfx_spim_t *spim = &get_dev_config(dev)->spim;
   2117a:	f8d8 b004 	ldr.w	fp, [r8, #4]
	ctx->config = spi_cfg;
   2117e:	f8c2 a000 	str.w	sl, [r2]
   21182:	b1e3      	cbz	r3, 211be <transceive+0xa2>
   21184:	6818      	ldr	r0, [r3, #0]
   21186:	b1d0      	cbz	r0, 211be <transceive+0xa2>
				   ctx->config->cs->gpio_dt_flags |
   21188:	7a5a      	ldrb	r2, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   2118a:	7a19      	ldrb	r1, [r3, #8]
	struct gpio_driver_data *data =
   2118c:	68c5      	ldr	r5, [r0, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2118e:	07d3      	lsls	r3, r2, #31
   21190:	bf54      	ite	pl
   21192:	f442 52b0 	orrpl.w	r2, r2, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   21196:	f482 6220 	eormi.w	r2, r2, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   2119a:	6883      	ldr	r3, [r0, #8]
   2119c:	681b      	ldr	r3, [r3, #0]
   2119e:	e9cd 1200 	strd	r1, r2, [sp]
   211a2:	4798      	blx	r3
	if (ret != 0) {
   211a4:	b958      	cbnz	r0, 211be <transceive+0xa2>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   211a6:	9900      	ldr	r1, [sp, #0]
   211a8:	9a01      	ldr	r2, [sp, #4]
   211aa:	6828      	ldr	r0, [r5, #0]
   211ac:	2301      	movs	r3, #1
   211ae:	fa03 f101 	lsl.w	r1, r3, r1
   211b2:	07d3      	lsls	r3, r2, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   211b4:	bf4c      	ite	mi
   211b6:	4301      	orrmi	r1, r0
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   211b8:	ea20 0101 	bicpl.w	r1, r0, r1
   211bc:	6029      	str	r1, [r5, #0]
	nrf_spim_configure(spim->p_reg,
   211be:	f8ba 5004 	ldrh.w	r5, [sl, #4]
   211c2:	f8db 2000 	ldr.w	r2, [fp]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   211c6:	07a9      	lsls	r1, r5, #30
   211c8:	f005 0304 	and.w	r3, r5, #4
   211cc:	d568      	bpl.n	212a0 <transceive+0x184>
			return NRF_SPIM_MODE_2;
   211ce:	2b00      	cmp	r3, #0
   211d0:	bf14      	ite	ne
   211d2:	2303      	movne	r3, #3
   211d4:	2302      	moveq	r3, #2
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   211d6:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   211d8:	f3c5 1500 	ubfx	r5, r5, #4, #1
   211dc:	d064      	beq.n	212a8 <transceive+0x18c>
   211de:	2b03      	cmp	r3, #3
   211e0:	d065      	beq.n	212ae <transceive+0x192>
   211e2:	2b01      	cmp	r3, #1
   211e4:	d101      	bne.n	211ea <transceive+0xce>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   211e6:	f045 0502 	orr.w	r5, r5, #2
	nrf_spim_frequency_set(spim->p_reg,
   211ea:	f8da 1000 	ldr.w	r1, [sl]
	if (frequency < 250000) {
   211ee:	4b43      	ldr	r3, [pc, #268]	; (212fc <transceive+0x1e0>)
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   211f0:	f8c2 5554 	str.w	r5, [r2, #1364]	; 0x554
   211f4:	4299      	cmp	r1, r3
   211f6:	d95d      	bls.n	212b4 <transceive+0x198>
	} else if (frequency < 500000) {
   211f8:	4b41      	ldr	r3, [pc, #260]	; (21300 <transceive+0x1e4>)
   211fa:	4299      	cmp	r1, r3
   211fc:	d95d      	bls.n	212ba <transceive+0x19e>
	} else if (frequency < 1000000) {
   211fe:	4b41      	ldr	r3, [pc, #260]	; (21304 <transceive+0x1e8>)
   21200:	4299      	cmp	r1, r3
   21202:	d95d      	bls.n	212c0 <transceive+0x1a4>
	} else if (frequency < 2000000) {
   21204:	4b40      	ldr	r3, [pc, #256]	; (21308 <transceive+0x1ec>)
   21206:	4299      	cmp	r1, r3
   21208:	d95d      	bls.n	212c6 <transceive+0x1aa>
	} else if (frequency < 4000000) {
   2120a:	4b40      	ldr	r3, [pc, #256]	; (2130c <transceive+0x1f0>)
   2120c:	4299      	cmp	r1, r3
   2120e:	d95d      	bls.n	212cc <transceive+0x1b0>
	} else if (frequency < 8000000) {
   21210:	4b3f      	ldr	r3, [pc, #252]	; (21310 <transceive+0x1f4>)
   21212:	4299      	cmp	r1, r3
   21214:	d35d      	bcc.n	212d2 <transceive+0x1b6>
	} else if (frequency < 16000000) {
   21216:	4b3f      	ldr	r3, [pc, #252]	; (21314 <transceive+0x1f8>)
   21218:	4299      	cmp	r1, r3
   2121a:	d35d      	bcc.n	212d8 <transceive+0x1bc>
		return NRF_SPIM_FREQ_32M;
   2121c:	4b3e      	ldr	r3, [pc, #248]	; (21318 <transceive+0x1fc>)
   2121e:	4299      	cmp	r1, r3
   21220:	bf34      	ite	cc
   21222:	f04f 6120 	movcc.w	r1, #167772160	; 0xa000000
   21226:	f04f 51a0 	movcs.w	r1, #335544320	; 0x14000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   2122a:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   2122e:	2301      	movs	r3, #1
   21230:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	if (tx_bufs) {
   21234:	2f00      	cmp	r7, #0
   21236:	d052      	beq.n	212de <transceive+0x1c2>
		ctx->current_tx = tx_bufs->buffers;
   21238:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   2123a:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   2123c:	6423      	str	r3, [r4, #64]	; 0x40
		ctx->tx_count = tx_bufs->count;
   2123e:	6462      	str	r2, [r4, #68]	; 0x44
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   21240:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   21242:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   21244:	6522      	str	r2, [r4, #80]	; 0x50
		ctx->tx_len = ctx->current_tx->len / dfs;
   21246:	6563      	str	r3, [r4, #84]	; 0x54
	if (rx_bufs) {
   21248:	2e00      	cmp	r6, #0
   2124a:	d04d      	beq.n	212e8 <transceive+0x1cc>
		ctx->current_rx = rx_bufs->buffers;
   2124c:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   2124e:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   21250:	64a3      	str	r3, [r4, #72]	; 0x48
		ctx->rx_count = rx_bufs->count;
   21252:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   21254:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   21256:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   21258:	65a2      	str	r2, [r4, #88]	; 0x58
		ctx->rx_len = ctx->current_rx->len / dfs;
   2125a:	65e3      	str	r3, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   2125c:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
   2125e:	462a      	mov	r2, r5
   21260:	2101      	movs	r1, #1
   21262:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   21264:	6365      	str	r5, [r4, #52]	; 0x34
	_spi_context_cs_control(ctx, on, false);
   21266:	f00b fc5b 	bl	2cb20 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   2126a:	4640      	mov	r0, r8
   2126c:	f7ff fef4 	bl	21058 <transfer_next_chunk>
	if (!ctx->asynchronous) {
   21270:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   21274:	b943      	cbnz	r3, 21288 <transceive+0x16c>
   21276:	f04f 32ff 	mov.w	r2, #4294967295
   2127a:	f04f 33ff 	mov.w	r3, #4294967295
   2127e:	f104 001c 	add.w	r0, r4, #28
   21282:	f002 fc3d 	bl	23b00 <z_impl_k_sem_take>
		status = ctx->sync_status;
   21286:	6b65      	ldr	r5, [r4, #52]	; 0x34
	if (!ctx->asynchronous || (status < 0)) {
   21288:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2128c:	b10b      	cbz	r3, 21292 <transceive+0x176>
   2128e:	2d00      	cmp	r5, #0
   21290:	da02      	bge.n	21298 <transceive+0x17c>
	z_impl_k_sem_give(sem);
   21292:	4648      	mov	r0, r9
   21294:	f002 fc0e 	bl	23ab4 <z_impl_k_sem_give>
}
   21298:	4628      	mov	r0, r5
   2129a:	b003      	add	sp, #12
   2129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return NRF_SPIM_MODE_0;
   212a0:	3b00      	subs	r3, #0
   212a2:	bf18      	it	ne
   212a4:	2301      	movne	r3, #1
   212a6:	e796      	b.n	211d6 <transceive+0xba>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   212a8:	f045 0504 	orr.w	r5, r5, #4
        break;
   212ac:	e79d      	b.n	211ea <transceive+0xce>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   212ae:	f045 0506 	orr.w	r5, r5, #6
        break;
   212b2:	e79a      	b.n	211ea <transceive+0xce>
		return NRF_SPIM_FREQ_125K;
   212b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   212b8:	e7b7      	b.n	2122a <transceive+0x10e>
		return NRF_SPIM_FREQ_250K;
   212ba:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   212be:	e7b4      	b.n	2122a <transceive+0x10e>
		return NRF_SPIM_FREQ_500K;
   212c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   212c4:	e7b1      	b.n	2122a <transceive+0x10e>
		return NRF_SPIM_FREQ_1M;
   212c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   212ca:	e7ae      	b.n	2122a <transceive+0x10e>
		return NRF_SPIM_FREQ_2M;
   212cc:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   212d0:	e7ab      	b.n	2122a <transceive+0x10e>
		return NRF_SPIM_FREQ_4M;
   212d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   212d6:	e7a8      	b.n	2122a <transceive+0x10e>
		return NRF_SPIM_FREQ_8M;
   212d8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   212dc:	e7a5      	b.n	2122a <transceive+0x10e>
		ctx->tx_count = 0;
   212de:	e9c4 7710 	strd	r7, r7, [r4, #64]	; 0x40
		ctx->tx_len = 0;
   212e2:	e9c4 7714 	strd	r7, r7, [r4, #80]	; 0x50
   212e6:	e7af      	b.n	21248 <transceive+0x12c>
		ctx->rx_count = 0;
   212e8:	e9c4 6612 	strd	r6, r6, [r4, #72]	; 0x48
		ctx->rx_len = 0;
   212ec:	e9c4 6616 	strd	r6, r6, [r4, #88]	; 0x58
   212f0:	e7b4      	b.n	2125c <transceive+0x140>
		return -EINVAL;
   212f2:	f06f 0515 	mvn.w	r5, #21
   212f6:	e7c7      	b.n	21288 <transceive+0x16c>
   212f8:	0001e847 	.word	0x0001e847
   212fc:	0003d08f 	.word	0x0003d08f
   21300:	0007a11f 	.word	0x0007a11f
   21304:	000f423f 	.word	0x000f423f
   21308:	001e847f 	.word	0x001e847f
   2130c:	003d08ff 	.word	0x003d08ff
   21310:	007a1200 	.word	0x007a1200
   21314:	00f42400 	.word	0x00f42400
   21318:	01e84800 	.word	0x01e84800

0002131c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2131c:	4b02      	ldr	r3, [pc, #8]	; (21328 <flash_nrf_pages_layout+0xc>)
   2131e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   21320:	2301      	movs	r3, #1
   21322:	6013      	str	r3, [r2, #0]
}
   21324:	4770      	bx	lr
   21326:	bf00      	nop
   21328:	20003f74 	.word	0x20003f74

0002132c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2132c:	4800      	ldr	r0, [pc, #0]	; (21330 <flash_nrf_get_parameters+0x4>)
   2132e:	4770      	bx	lr
   21330:	0002f574 	.word	0x0002f574

00021334 <flash_nrf_erase>:
{
   21334:	b5f0      	push	{r4, r5, r6, r7, lr}
   21336:	b087      	sub	sp, #28
   21338:	460e      	mov	r6, r1
   2133a:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2133c:	f00b fdaf 	bl	2ce9e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   21340:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   21342:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   21344:	4630      	mov	r0, r6
   21346:	f00b fc7d 	bl	2cc44 <is_regular_addr_valid>
   2134a:	b3c8      	cbz	r0, 213c0 <flash_nrf_erase+0x8c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2134c:	fbb6 f3f7 	udiv	r3, r6, r7
   21350:	fb07 6313 	mls	r3, r7, r3, r6
   21354:	bba3      	cbnz	r3, 213c0 <flash_nrf_erase+0x8c>
   21356:	fbb5 f4f7 	udiv	r4, r5, r7
   2135a:	fb07 5414 	mls	r4, r7, r4, r5
   2135e:	bb7c      	cbnz	r4, 213c0 <flash_nrf_erase+0x8c>
		if (!n_pages) {
   21360:	42af      	cmp	r7, r5
   21362:	d822      	bhi.n	213aa <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   21364:	f04f 32ff 	mov.w	r2, #4294967295
   21368:	f04f 33ff 	mov.w	r3, #4294967295
   2136c:	4816      	ldr	r0, [pc, #88]	; (213c8 <flash_nrf_erase+0x94>)
   2136e:	f002 fbc7 	bl	23b00 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   21372:	f00b fcb5 	bl	2cce0 <nrf_flash_sync_is_required>
   21376:	ab02      	add	r3, sp, #8
   21378:	4601      	mov	r1, r0

#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE

static int erase_synchronously(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   2137a:	2210      	movs	r2, #16
	if (nrf_flash_sync_is_required()) {
   2137c:	b1c0      	cbz	r0, 213b0 <flash_nrf_erase+0x7c>
	struct flash_context context = {
   2137e:	4621      	mov	r1, r4
   21380:	4618      	mov	r0, r3
   21382:	f005 fb39 	bl	269f8 <memset>
   21386:	2201      	movs	r2, #1
   21388:	f88d 2014 	strb.w	r2, [sp, #20]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	struct flash_op_desc flash_op_desc = {
   2138c:	4a0f      	ldr	r2, [pc, #60]	; (213cc <flash_nrf_erase+0x98>)
   2138e:	e9cd 2000 	strd	r2, r0, [sp]
		.handler = erase_op,
		.context = &context
	};

	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   21392:	480f      	ldr	r0, [pc, #60]	; (213d0 <flash_nrf_erase+0x9c>)
	struct flash_context context = {
   21394:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   21398:	f000 f91c 	bl	215d4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   2139c:	4668      	mov	r0, sp
   2139e:	f7e1 fedb 	bl	3158 <nrf_flash_sync_exe>
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   213a2:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   213a4:	4808      	ldr	r0, [pc, #32]	; (213c8 <flash_nrf_erase+0x94>)
   213a6:	f002 fb85 	bl	23ab4 <z_impl_k_sem_give>
}
   213aa:	4620      	mov	r0, r4
   213ac:	b007      	add	sp, #28
   213ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   213b0:	4618      	mov	r0, r3
   213b2:	f005 fb21 	bl	269f8 <memset>
   213b6:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   213ba:	f00b fc56 	bl	2cc6a <erase_op>
   213be:	e7f0      	b.n	213a2 <flash_nrf_erase+0x6e>
		return -EINVAL;
   213c0:	f06f 0415 	mvn.w	r4, #21
   213c4:	e7f1      	b.n	213aa <flash_nrf_erase+0x76>
   213c6:	bf00      	nop
   213c8:	20003f7c 	.word	0x20003f7c
   213cc:	0002cc6b 	.word	0x0002cc6b
   213d0:	00015e64 	.word	0x00015e64

000213d4 <nrf_flash_init>:
{
   213d4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   213d6:	2201      	movs	r2, #1
   213d8:	4611      	mov	r1, r2
   213da:	4807      	ldr	r0, [pc, #28]	; (213f8 <nrf_flash_init+0x24>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   213dc:	4c07      	ldr	r4, [pc, #28]	; (213fc <nrf_flash_init+0x28>)
   213de:	f00c f861 	bl	2d4a4 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   213e2:	f000 f8ed 	bl	215c0 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   213e6:	f00b fd5e 	bl	2cea6 <nrfx_nvmc_flash_page_count_get>
   213ea:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   213ec:	f00b fd57 	bl	2ce9e <nrfx_nvmc_flash_page_size_get>
   213f0:	6060      	str	r0, [r4, #4]
}
   213f2:	2000      	movs	r0, #0
   213f4:	bd10      	pop	{r4, pc}
   213f6:	bf00      	nop
   213f8:	20003f7c 	.word	0x20003f7c
   213fc:	20003f74 	.word	0x20003f74

00021400 <write_op>:
{
   21400:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   21402:	7b03      	ldrb	r3, [r0, #12]
{
   21404:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   21406:	b10b      	cbz	r3, 2140c <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   21408:	f000 f8ec 	bl	215e4 <nrf_flash_sync_get_timestamp_begin>
{
   2140c:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   2140e:	68a3      	ldr	r3, [r4, #8]
   21410:	2b03      	cmp	r3, #3
   21412:	d806      	bhi.n	21422 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   21414:	4a12      	ldr	r2, [pc, #72]	; (21460 <write_op+0x60>)
   21416:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2141a:	07db      	lsls	r3, r3, #31
   2141c:	d5fb      	bpl.n	21416 <write_op+0x16>
	return FLASH_OP_DONE;
   2141e:	2000      	movs	r0, #0
}
   21420:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   21422:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   21424:	6860      	ldr	r0, [r4, #4]
   21426:	6819      	ldr	r1, [r3, #0]
   21428:	f000 fef6 	bl	22218 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   2142c:	6863      	ldr	r3, [r4, #4]
   2142e:	3304      	adds	r3, #4
   21430:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   21432:	6823      	ldr	r3, [r4, #0]
   21434:	3304      	adds	r3, #4
   21436:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   21438:	68a3      	ldr	r3, [r4, #8]
   2143a:	3b04      	subs	r3, #4
   2143c:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   2143e:	7b23      	ldrb	r3, [r4, #12]
		i++;
   21440:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   21442:	2b00      	cmp	r3, #0
   21444:	d0e3      	beq.n	2140e <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   21446:	4628      	mov	r0, r5
   21448:	f7e1 ff02 	bl	3250 <nrf_flash_sync_check_time_limit>
   2144c:	2800      	cmp	r0, #0
   2144e:	d0de      	beq.n	2140e <write_op+0xe>
   21450:	4a03      	ldr	r2, [pc, #12]	; (21460 <write_op+0x60>)
   21452:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   21456:	07d9      	lsls	r1, r3, #31
   21458:	d5fb      	bpl.n	21452 <write_op+0x52>
				return FLASH_OP_ONGOING;
   2145a:	f04f 30ff 	mov.w	r0, #4294967295
   2145e:	e7df      	b.n	21420 <write_op+0x20>
   21460:	4001e000 	.word	0x4001e000

00021464 <flash_nrf_write>:
{
   21464:	b570      	push	{r4, r5, r6, lr}
   21466:	460d      	mov	r5, r1
   21468:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   2146a:	4619      	mov	r1, r3
   2146c:	4628      	mov	r0, r5
{
   2146e:	4616      	mov	r6, r2
   21470:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   21472:	f00b fbe7 	bl	2cc44 <is_regular_addr_valid>
   21476:	b360      	cbz	r0, 214d2 <flash_nrf_write+0x6e>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   21478:	ea45 0304 	orr.w	r3, r5, r4
   2147c:	079b      	lsls	r3, r3, #30
   2147e:	d128      	bne.n	214d2 <flash_nrf_write+0x6e>
	if (!len) {
   21480:	b1fc      	cbz	r4, 214c2 <flash_nrf_write+0x5e>
	return z_impl_k_sem_take(sem, timeout);
   21482:	f04f 33ff 	mov.w	r3, #4294967295
   21486:	f04f 32ff 	mov.w	r2, #4294967295
   2148a:	4813      	ldr	r0, [pc, #76]	; (214d8 <flash_nrf_write+0x74>)
   2148c:	f002 fb38 	bl	23b00 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   21490:	f00b fc26 	bl	2cce0 <nrf_flash_sync_is_required>
   21494:	4603      	mov	r3, r0
	struct flash_context context = {
   21496:	e9cd 6502 	strd	r6, r5, [sp, #8]
   2149a:	a802      	add	r0, sp, #8
   2149c:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   2149e:	b19b      	cbz	r3, 214c8 <flash_nrf_write+0x64>
	struct flash_context context = {
   214a0:	2301      	movs	r3, #1
   214a2:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   214a6:	4b0d      	ldr	r3, [pc, #52]	; (214dc <flash_nrf_write+0x78>)
   214a8:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   214ac:	f641 504c 	movw	r0, #7500	; 0x1d4c
   214b0:	f000 f890 	bl	215d4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   214b4:	4668      	mov	r0, sp
   214b6:	f7e1 fe4f 	bl	3158 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   214ba:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   214bc:	4806      	ldr	r0, [pc, #24]	; (214d8 <flash_nrf_write+0x74>)
   214be:	f002 faf9 	bl	23ab4 <z_impl_k_sem_give>
}
   214c2:	4620      	mov	r0, r4
   214c4:	b006      	add	sp, #24
   214c6:	bd70      	pop	{r4, r5, r6, pc}
	struct flash_context context = {
   214c8:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   214cc:	f7ff ff98 	bl	21400 <write_op>
   214d0:	e7f3      	b.n	214ba <flash_nrf_write+0x56>
		return -EINVAL;
   214d2:	f06f 0415 	mvn.w	r4, #21
   214d6:	e7f4      	b.n	214c2 <flash_nrf_write+0x5e>
   214d8:	20003f7c 	.word	0x20003f7c
   214dc:	00021401 	.word	0x00021401

000214e0 <time_slot_callback_work>:
{
   214e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   214e2:	e9d3 2000 	ldrd	r2, r0, [r3]
   214e6:	4790      	blx	r2
   214e8:	4604      	mov	r4, r0
   214ea:	b998      	cbnz	r0, 21514 <time_slot_callback_work+0x34>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   214ec:	f10d 010f 	add.w	r1, sp, #15
   214f0:	f10d 000e 	add.w	r0, sp, #14
   214f4:	f7f5 fdf0 	bl	170d8 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   214f8:	4623      	mov	r3, r4
   214fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   214fe:	f89d 000e 	ldrb.w	r0, [sp, #14]
   21502:	9400      	str	r4, [sp, #0]
   21504:	4621      	mov	r1, r4
   21506:	f7f3 f8e3 	bl	146d0 <ticker_stop>
		_ticker_sync_context.result = 0;
   2150a:	4b03      	ldr	r3, [pc, #12]	; (21518 <time_slot_callback_work+0x38>)
   2150c:	60dc      	str	r4, [r3, #12]
   2150e:	4803      	ldr	r0, [pc, #12]	; (2151c <time_slot_callback_work+0x3c>)
   21510:	f002 fad0 	bl	23ab4 <z_impl_k_sem_give>
}
   21514:	b004      	add	sp, #16
   21516:	bd10      	pop	{r4, pc}
   21518:	20003f94 	.word	0x20003f94
   2151c:	20003fa4 	.word	0x20003fa4

00021520 <time_slot_delay>:
{
   21520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21524:	b08d      	sub	sp, #52	; 0x34
   21526:	4606      	mov	r6, r0
   21528:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   2152a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   2152e:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   21532:	4690      	mov	r8, r2
   21534:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   21536:	f7f5 fdcf 	bl	170d8 <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   2153a:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   2153e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   21542:	9700      	str	r7, [sp, #0]
   21544:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   21546:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   21548:	4633      	mov	r3, r6
   2154a:	e9cd 4407 	strd	r4, r4, [sp, #28]
   2154e:	e9cd 8905 	strd	r8, r9, [sp, #20]
   21552:	e9cd 4403 	strd	r4, r4, [sp, #12]
   21556:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2155a:	b2ea      	uxtb	r2, r5
   2155c:	4621      	mov	r1, r4
   2155e:	f7f3 f84b 	bl	145f8 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   21562:	f030 0302 	bics.w	r3, r0, #2
   21566:	d00d      	beq.n	21584 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   21568:	4b08      	ldr	r3, [pc, #32]	; (2158c <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   2156a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   2156e:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   21570:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   21574:	9400      	str	r4, [sp, #0]
   21576:	4623      	mov	r3, r4
   21578:	4621      	mov	r1, r4
   2157a:	f7f3 f8a9 	bl	146d0 <ticker_stop>
   2157e:	4804      	ldr	r0, [pc, #16]	; (21590 <time_slot_delay+0x70>)
   21580:	f002 fa98 	bl	23ab4 <z_impl_k_sem_give>
}
   21584:	b00d      	add	sp, #52	; 0x34
   21586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2158a:	bf00      	nop
   2158c:	20003f94 	.word	0x20003f94
   21590:	20003fa4 	.word	0x20003fa4

00021594 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   21594:	4a01      	ldr	r2, [pc, #4]	; (2159c <time_slot_callback_prepare+0x8>)
   21596:	2131      	movs	r1, #49	; 0x31
   21598:	f7ff bfc2 	b.w	21520 <time_slot_delay>
   2159c:	000215a1 	.word	0x000215a1

000215a0 <time_slot_callback_abort>:
{
   215a0:	b570      	push	{r4, r5, r6, lr}
   215a2:	4604      	mov	r4, r0
   215a4:	461d      	mov	r5, r3
	ll_radio_state_abort();
   215a6:	f7f5 fd9d 	bl	170e4 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   215aa:	462b      	mov	r3, r5
   215ac:	4620      	mov	r0, r4
   215ae:	4a03      	ldr	r2, [pc, #12]	; (215bc <time_slot_callback_abort+0x1c>)
}
   215b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   215b4:	2106      	movs	r1, #6
   215b6:	f7ff bfb3 	b.w	21520 <time_slot_delay>
   215ba:	bf00      	nop
   215bc:	000214e1 	.word	0x000214e1

000215c0 <nrf_flash_sync_init>:
{
   215c0:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   215c2:	2201      	movs	r2, #1
   215c4:	2100      	movs	r1, #0
   215c6:	4802      	ldr	r0, [pc, #8]	; (215d0 <nrf_flash_sync_init+0x10>)
   215c8:	f00b ff6c 	bl	2d4a4 <z_impl_k_sem_init>
}
   215cc:	2000      	movs	r0, #0
   215ce:	bd08      	pop	{r3, pc}
   215d0:	20003fa4 	.word	0x20003fa4

000215d4 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   215d4:	4b02      	ldr	r3, [pc, #8]	; (215e0 <nrf_flash_sync_set_context+0xc>)
   215d6:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   215da:	e9c3 2000 	strd	r2, r0, [r3]
}
   215de:	4770      	bx	lr
   215e0:	20003f94 	.word	0x20003f94

000215e4 <nrf_flash_sync_get_timestamp_begin>:
{
   215e4:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   215e6:	f7f3 f8b9 	bl	1475c <ticker_ticks_now_get>
   215ea:	4b01      	ldr	r3, [pc, #4]	; (215f0 <nrf_flash_sync_get_timestamp_begin+0xc>)
   215ec:	6098      	str	r0, [r3, #8]
}
   215ee:	bd08      	pop	{r3, pc}
   215f0:	20003f94 	.word	0x20003f94

000215f4 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   215f4:	4b06      	ldr	r3, [pc, #24]	; (21610 <uart_nrfx_poll_in+0x1c>)
   215f6:	681a      	ldr	r2, [r3, #0]
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   215f8:	b13a      	cbz	r2, 2160a <uart_nrfx_poll_in+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   215fa:	2000      	movs	r0, #0
   215fc:	6018      	str	r0, [r3, #0]
   215fe:	681b      	ldr	r3, [r3, #0]
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   21600:	4b04      	ldr	r3, [pc, #16]	; (21614 <uart_nrfx_poll_in+0x20>)
   21602:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   21606:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   21608:	4770      	bx	lr
		return -1;
   2160a:	f04f 30ff 	mov.w	r0, #4294967295
}
   2160e:	4770      	bx	lr
   21610:	40002108 	.word	0x40002108
   21614:	40002000 	.word	0x40002000

00021618 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   21618:	4b02      	ldr	r3, [pc, #8]	; (21624 <uart_nrfx_err_check+0xc>)
   2161a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2161e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   21622:	4770      	bx	lr
   21624:	40002000 	.word	0x40002000

00021628 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   21628:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2162a:	794b      	ldrb	r3, [r1, #5]
   2162c:	2b01      	cmp	r3, #1
   2162e:	d022      	beq.n	21676 <uart_nrfx_configure+0x4e>
   21630:	2b03      	cmp	r3, #3
   21632:	d11d      	bne.n	21670 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   21634:	2210      	movs	r2, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   21636:	798b      	ldrb	r3, [r1, #6]
   21638:	2b03      	cmp	r3, #3
   2163a:	d119      	bne.n	21670 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2163c:	79cb      	ldrb	r3, [r1, #7]
   2163e:	b9bb      	cbnz	r3, 21670 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   21640:	790c      	ldrb	r4, [r1, #4]
   21642:	b114      	cbz	r4, 2164a <uart_nrfx_configure+0x22>
   21644:	2c02      	cmp	r4, #2
   21646:	d113      	bne.n	21670 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   21648:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2164a:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   2164c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   21650:	d061      	beq.n	21716 <uart_nrfx_configure+0xee>
   21652:	d82d      	bhi.n	216b0 <uart_nrfx_configure+0x88>
   21654:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   21658:	d05f      	beq.n	2171a <uart_nrfx_configure+0xf2>
   2165a:	d816      	bhi.n	2168a <uart_nrfx_configure+0x62>
   2165c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   21660:	d05d      	beq.n	2171e <uart_nrfx_configure+0xf6>
   21662:	d80a      	bhi.n	2167a <uart_nrfx_configure+0x52>
   21664:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   21668:	d05c      	beq.n	21724 <uart_nrfx_configure+0xfc>
   2166a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2166e:	d05c      	beq.n	2172a <uart_nrfx_configure+0x102>
   21670:	f06f 0022 	mvn.w	r0, #34	; 0x22
   21674:	e04e      	b.n	21714 <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   21676:	2200      	movs	r2, #0
   21678:	e7dd      	b.n	21636 <uart_nrfx_configure+0xe>
	switch (baudrate) {
   2167a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2167e:	d057      	beq.n	21730 <uart_nrfx_configure+0x108>
   21680:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   21684:	d1f4      	bne.n	21670 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   21686:	4b34      	ldr	r3, [pc, #208]	; (21758 <uart_nrfx_configure+0x130>)
   21688:	e039      	b.n	216fe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2168a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2168e:	d052      	beq.n	21736 <uart_nrfx_configure+0x10e>
   21690:	d807      	bhi.n	216a2 <uart_nrfx_configure+0x7a>
   21692:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   21696:	d050      	beq.n	2173a <uart_nrfx_configure+0x112>
   21698:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2169c:	d1e8      	bne.n	21670 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   2169e:	4b2f      	ldr	r3, [pc, #188]	; (2175c <uart_nrfx_configure+0x134>)
   216a0:	e02d      	b.n	216fe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   216a2:	f647 2512 	movw	r5, #31250	; 0x7a12
   216a6:	42ab      	cmp	r3, r5
   216a8:	d1e2      	bne.n	21670 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   216aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   216ae:	e026      	b.n	216fe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   216b0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   216b4:	d044      	beq.n	21740 <uart_nrfx_configure+0x118>
   216b6:	d811      	bhi.n	216dc <uart_nrfx_configure+0xb4>
   216b8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   216bc:	d042      	beq.n	21744 <uart_nrfx_configure+0x11c>
   216be:	d808      	bhi.n	216d2 <uart_nrfx_configure+0xaa>
   216c0:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   216c4:	42ab      	cmp	r3, r5
   216c6:	d03f      	beq.n	21748 <uart_nrfx_configure+0x120>
   216c8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   216cc:	d1d0      	bne.n	21670 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   216ce:	4b24      	ldr	r3, [pc, #144]	; (21760 <uart_nrfx_configure+0x138>)
   216d0:	e015      	b.n	216fe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   216d2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   216d6:	d1cb      	bne.n	21670 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   216d8:	4b22      	ldr	r3, [pc, #136]	; (21764 <uart_nrfx_configure+0x13c>)
   216da:	e010      	b.n	216fe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   216dc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   216e0:	d035      	beq.n	2174e <uart_nrfx_configure+0x126>
   216e2:	d807      	bhi.n	216f4 <uart_nrfx_configure+0xcc>
   216e4:	4d20      	ldr	r5, [pc, #128]	; (21768 <uart_nrfx_configure+0x140>)
   216e6:	42ab      	cmp	r3, r5
   216e8:	d033      	beq.n	21752 <uart_nrfx_configure+0x12a>
   216ea:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   216ee:	d1bf      	bne.n	21670 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   216f0:	4b1e      	ldr	r3, [pc, #120]	; (2176c <uart_nrfx_configure+0x144>)
   216f2:	e004      	b.n	216fe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   216f4:	4d1e      	ldr	r5, [pc, #120]	; (21770 <uart_nrfx_configure+0x148>)
   216f6:	42ab      	cmp	r3, r5
   216f8:	d1ba      	bne.n	21670 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   216fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   216fe:	4d1d      	ldr	r5, [pc, #116]	; (21774 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   21700:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   21702:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   21706:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   2170a:	68c3      	ldr	r3, [r0, #12]
   2170c:	c903      	ldmia	r1, {r0, r1}
   2170e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   21712:	2000      	movs	r0, #0
}
   21714:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   21716:	4b18      	ldr	r3, [pc, #96]	; (21778 <uart_nrfx_configure+0x150>)
   21718:	e7f1      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   2171a:	4b18      	ldr	r3, [pc, #96]	; (2177c <uart_nrfx_configure+0x154>)
   2171c:	e7ef      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   2171e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   21722:	e7ec      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   21724:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   21728:	e7e9      	b.n	216fe <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   2172a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2172e:	e7e6      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   21730:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   21734:	e7e3      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   21736:	4b12      	ldr	r3, [pc, #72]	; (21780 <uart_nrfx_configure+0x158>)
   21738:	e7e1      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   2173a:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   2173e:	e7de      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   21740:	4b10      	ldr	r3, [pc, #64]	; (21784 <uart_nrfx_configure+0x15c>)
   21742:	e7dc      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   21744:	4b10      	ldr	r3, [pc, #64]	; (21788 <uart_nrfx_configure+0x160>)
   21746:	e7da      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   21748:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2174c:	e7d7      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   2174e:	4b0f      	ldr	r3, [pc, #60]	; (2178c <uart_nrfx_configure+0x164>)
   21750:	e7d5      	b.n	216fe <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   21752:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   21756:	e7d2      	b.n	216fe <uart_nrfx_configure+0xd6>
   21758:	0013b000 	.word	0x0013b000
   2175c:	004ea000 	.word	0x004ea000
   21760:	00ebf000 	.word	0x00ebf000
   21764:	01d7e000 	.word	0x01d7e000
   21768:	0003d090 	.word	0x0003d090
   2176c:	075f7000 	.word	0x075f7000
   21770:	000f4240 	.word	0x000f4240
   21774:	40002000 	.word	0x40002000
   21778:	009d5000 	.word	0x009d5000
   2177c:	00275000 	.word	0x00275000
   21780:	0075f000 	.word	0x0075f000
   21784:	03afb000 	.word	0x03afb000
   21788:	013a9000 	.word	0x013a9000
   2178c:	0ebed000 	.word	0x0ebed000

00021790 <uart_nrfx_poll_out>:
{
   21790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21792:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   21794:	f00b fe96 	bl	2d4c4 <k_is_in_isr>
   21798:	4d19      	ldr	r5, [pc, #100]	; (21800 <uart_nrfx_poll_out+0x70>)
   2179a:	bb70      	cbnz	r0, 217fa <uart_nrfx_poll_out+0x6a>
   2179c:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2179e:	2701      	movs	r7, #1
   217a0:	f3bf 8f5b 	dmb	ish
   217a4:	e855 3f00 	ldrex	r3, [r5]
   217a8:	2b00      	cmp	r3, #0
   217aa:	d103      	bne.n	217b4 <uart_nrfx_poll_out+0x24>
   217ac:	e845 7200 	strex	r2, r7, [r5]
   217b0:	2a00      	cmp	r2, #0
   217b2:	d1f7      	bne.n	217a4 <uart_nrfx_poll_out+0x14>
   217b4:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   217b8:	d007      	beq.n	217ca <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   217ba:	2021      	movs	r0, #33	; 0x21
   217bc:	2100      	movs	r1, #0
   217be:	3c01      	subs	r4, #1
   217c0:	f002 f952 	bl	23a68 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   217c4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   217c8:	d1ea      	bne.n	217a0 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   217ca:	4c0e      	ldr	r4, [pc, #56]	; (21804 <uart_nrfx_poll_out+0x74>)
   217cc:	2200      	movs	r2, #0
   217ce:	6022      	str	r2, [r4, #0]
   217d0:	6822      	ldr	r2, [r4, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   217d2:	4a0d      	ldr	r2, [pc, #52]	; (21808 <uart_nrfx_poll_out+0x78>)
   217d4:	2101      	movs	r1, #1
   217d6:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   217d8:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   217dc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   217e0:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   217e2:	b923      	cbnz	r3, 217ee <uart_nrfx_poll_out+0x5e>
   217e4:	2001      	movs	r0, #1
   217e6:	f00b fb48 	bl	2ce7a <nrfx_busy_wait>
   217ea:	3e01      	subs	r6, #1
   217ec:	d1f8      	bne.n	217e0 <uart_nrfx_poll_out+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   217ee:	4b07      	ldr	r3, [pc, #28]	; (2180c <uart_nrfx_poll_out+0x7c>)
   217f0:	2201      	movs	r2, #1
   217f2:	601a      	str	r2, [r3, #0]
	*lock = 0;
   217f4:	2300      	movs	r3, #0
   217f6:	602b      	str	r3, [r5, #0]
}
   217f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   217fa:	2301      	movs	r3, #1
   217fc:	602b      	str	r3, [r5, #0]
   217fe:	e7e4      	b.n	217ca <uart_nrfx_poll_out+0x3a>
   21800:	20003fbc 	.word	0x20003fbc
   21804:	4000211c 	.word	0x4000211c
   21808:	40002008 	.word	0x40002008
   2180c:	4000200c 	.word	0x4000200c

00021810 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   21810:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   21812:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   21816:	4c12      	ldr	r4, [pc, #72]	; (21860 <uart_nrfx_init+0x50>)
   21818:	2200      	movs	r2, #0
   2181a:	2140      	movs	r1, #64	; 0x40
   2181c:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   21820:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21824:	2103      	movs	r1, #3
   21826:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   2182a:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    p_reg->PSEL.RXD = pselrxd;
   2182e:	2308      	movs	r3, #8
   21830:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   21834:	2306      	movs	r3, #6
   21836:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
   2183a:	f04f 33ff 	mov.w	r3, #4294967295
   2183e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   21842:	68c1      	ldr	r1, [r0, #12]
    p_reg->PSEL.CTS = pselcts;
   21844:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   21848:	f7ff feee 	bl	21628 <uart_nrfx_configure>
	if (err) {
   2184c:	b938      	cbnz	r0, 2185e <uart_nrfx_init+0x4e>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   2184e:	2304      	movs	r3, #4
   21850:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21854:	4b03      	ldr	r3, [pc, #12]	; (21864 <uart_nrfx_init+0x54>)
   21856:	6018      	str	r0, [r3, #0]
   21858:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2185a:	2301      	movs	r3, #1
   2185c:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   2185e:	bd10      	pop	{r4, pc}
   21860:	40002000 	.word	0x40002000
   21864:	40002108 	.word	0x40002108

00021868 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   21868:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2186a:	794b      	ldrb	r3, [r1, #5]
   2186c:	2b01      	cmp	r3, #1
   2186e:	d029      	beq.n	218c4 <uarte_nrfx_configure+0x5c>
   21870:	2b03      	cmp	r3, #3
   21872:	d124      	bne.n	218be <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   21874:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   21876:	798b      	ldrb	r3, [r1, #6]
   21878:	2b03      	cmp	r3, #3
   2187a:	d120      	bne.n	218be <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2187c:	79cc      	ldrb	r4, [r1, #7]
   2187e:	b124      	cbz	r4, 2188a <uarte_nrfx_configure+0x22>
   21880:	2c01      	cmp	r4, #1
   21882:	d11c      	bne.n	218be <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   21884:	6843      	ldr	r3, [r0, #4]
   21886:	791b      	ldrb	r3, [r3, #4]
   21888:	b1cb      	cbz	r3, 218be <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2188a:	790a      	ldrb	r2, [r1, #4]
   2188c:	b112      	cbz	r2, 21894 <uarte_nrfx_configure+0x2c>
   2188e:	2a02      	cmp	r2, #2
   21890:	d115      	bne.n	218be <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   21892:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   21894:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   21896:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   21898:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2189c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2189e:	d065      	beq.n	2196c <uarte_nrfx_configure+0x104>
   218a0:	d82d      	bhi.n	218fe <uarte_nrfx_configure+0x96>
   218a2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   218a6:	d064      	beq.n	21972 <uarte_nrfx_configure+0x10a>
   218a8:	d816      	bhi.n	218d8 <uarte_nrfx_configure+0x70>
   218aa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   218ae:	d062      	beq.n	21976 <uarte_nrfx_configure+0x10e>
   218b0:	d80a      	bhi.n	218c8 <uarte_nrfx_configure+0x60>
   218b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   218b6:	d061      	beq.n	2197c <uarte_nrfx_configure+0x114>
   218b8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   218bc:	d061      	beq.n	21982 <uarte_nrfx_configure+0x11a>
   218be:	f06f 0022 	mvn.w	r0, #34	; 0x22
   218c2:	e052      	b.n	2196a <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   218c4:	2600      	movs	r6, #0
   218c6:	e7d6      	b.n	21876 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   218c8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   218cc:	d05c      	beq.n	21988 <uarte_nrfx_configure+0x120>
   218ce:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   218d2:	d1f4      	bne.n	218be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   218d4:	4b37      	ldr	r3, [pc, #220]	; (219b4 <uarte_nrfx_configure+0x14c>)
   218d6:	e03c      	b.n	21952 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   218d8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   218dc:	d057      	beq.n	2198e <uarte_nrfx_configure+0x126>
   218de:	d807      	bhi.n	218f0 <uarte_nrfx_configure+0x88>
   218e0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   218e4:	d055      	beq.n	21992 <uarte_nrfx_configure+0x12a>
   218e6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   218ea:	d1e8      	bne.n	218be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   218ec:	4b32      	ldr	r3, [pc, #200]	; (219b8 <uarte_nrfx_configure+0x150>)
   218ee:	e030      	b.n	21952 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   218f0:	f647 2712 	movw	r7, #31250	; 0x7a12
   218f4:	42bb      	cmp	r3, r7
   218f6:	d1e2      	bne.n	218be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   218f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   218fc:	e029      	b.n	21952 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   218fe:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   21902:	d048      	beq.n	21996 <uarte_nrfx_configure+0x12e>
   21904:	d813      	bhi.n	2192e <uarte_nrfx_configure+0xc6>
   21906:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2190a:	d047      	beq.n	2199c <uarte_nrfx_configure+0x134>
   2190c:	d809      	bhi.n	21922 <uarte_nrfx_configure+0xba>
   2190e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   21912:	42bb      	cmp	r3, r7
   21914:	d044      	beq.n	219a0 <uarte_nrfx_configure+0x138>
   21916:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2191a:	d1d0      	bne.n	218be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2191c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   21920:	e017      	b.n	21952 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   21922:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   21926:	d1ca      	bne.n	218be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   21928:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2192c:	e011      	b.n	21952 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   2192e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   21932:	d038      	beq.n	219a6 <uarte_nrfx_configure+0x13e>
   21934:	d808      	bhi.n	21948 <uarte_nrfx_configure+0xe0>
   21936:	4f21      	ldr	r7, [pc, #132]	; (219bc <uarte_nrfx_configure+0x154>)
   21938:	42bb      	cmp	r3, r7
   2193a:	d037      	beq.n	219ac <uarte_nrfx_configure+0x144>
   2193c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   21940:	d1bd      	bne.n	218be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   21942:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   21946:	e004      	b.n	21952 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   21948:	4f1d      	ldr	r7, [pc, #116]	; (219c0 <uarte_nrfx_configure+0x158>)
   2194a:	42bb      	cmp	r3, r7
   2194c:	d1b7      	bne.n	218be <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2194e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   21952:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   21956:	68c3      	ldr	r3, [r0, #12]
   21958:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   2195a:	4334      	orrs	r4, r6
   2195c:	4322      	orrs	r2, r4
   2195e:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   21960:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   21964:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   21968:	2000      	movs	r0, #0
}
   2196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2196c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   21970:	e7ef      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   21972:	4b14      	ldr	r3, [pc, #80]	; (219c4 <uarte_nrfx_configure+0x15c>)
   21974:	e7ed      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   21976:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2197a:	e7ea      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   2197c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   21980:	e7e7      	b.n	21952 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   21982:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   21986:	e7e4      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   21988:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2198c:	e7e1      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2198e:	4b0e      	ldr	r3, [pc, #56]	; (219c8 <uarte_nrfx_configure+0x160>)
   21990:	e7df      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   21992:	4b0e      	ldr	r3, [pc, #56]	; (219cc <uarte_nrfx_configure+0x164>)
   21994:	e7dd      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   21996:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2199a:	e7da      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2199c:	4b0c      	ldr	r3, [pc, #48]	; (219d0 <uarte_nrfx_configure+0x168>)
   2199e:	e7d8      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   219a0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   219a4:	e7d5      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   219a6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   219aa:	e7d2      	b.n	21952 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   219ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   219b0:	e7cf      	b.n	21952 <uarte_nrfx_configure+0xea>
   219b2:	bf00      	nop
   219b4:	0013b000 	.word	0x0013b000
   219b8:	004ea000 	.word	0x004ea000
   219bc:	0003d090 	.word	0x0003d090
   219c0:	000f4240 	.word	0x000f4240
   219c4:	00275000 	.word	0x00275000
   219c8:	0075c000 	.word	0x0075c000
   219cc:	003af000 	.word	0x003af000
   219d0:	013a9000 	.word	0x013a9000

000219d4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   219d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   219d8:	68c7      	ldr	r7, [r0, #12]
{
   219da:	4606      	mov	r6, r0
   219dc:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   219de:	f00b fd71 	bl	2d4c4 <k_is_in_isr>
   219e2:	b9b8      	cbnz	r0, 21a14 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   219e4:	4b28      	ldr	r3, [pc, #160]	; (21a88 <uarte_nrfx_poll_out+0xb4>)
   219e6:	781b      	ldrb	r3, [r3, #0]
   219e8:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   219ec:	6872      	ldr	r2, [r6, #4]
   219ee:	6815      	ldr	r5, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	int key;

	if (isr_mode) {
   219f0:	b193      	cbz	r3, 21a18 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   219f2:	f04f 0320 	mov.w	r3, #32
   219f6:	f3ef 8411 	mrs	r4, BASEPRI
   219fa:	f383 8811 	msr	BASEPRI, r3
   219fe:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   21a02:	4630      	mov	r0, r6
   21a04:	f00b fa16 	bl	2ce34 <is_tx_ready>
   21a08:	bb38      	cbnz	r0, 21a5a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   21a0a:	f384 8811 	msr	BASEPRI, r4
   21a0e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   21a12:	e7ee      	b.n	219f2 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21a14:	2301      	movs	r3, #1
   21a16:	e7e9      	b.n	219ec <uarte_nrfx_poll_out+0x18>
   21a18:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   21a1a:	4630      	mov	r0, r6
   21a1c:	f00b fa0a 	bl	2ce34 <is_tx_ready>
   21a20:	b970      	cbnz	r0, 21a40 <uarte_nrfx_poll_out+0x6c>
   21a22:	2001      	movs	r0, #1
   21a24:	f00b fa29 	bl	2ce7a <nrfx_busy_wait>
   21a28:	3c01      	subs	r4, #1
   21a2a:	d1f6      	bne.n	21a1a <uarte_nrfx_poll_out+0x46>
   21a2c:	2100      	movs	r1, #0
   21a2e:	2021      	movs	r0, #33	; 0x21
   21a30:	f002 f81a 	bl	23a68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   21a34:	e7f0      	b.n	21a18 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   21a36:	f384 8811 	msr	BASEPRI, r4
   21a3a:	f3bf 8f6f 	isb	sy
}
   21a3e:	e7f5      	b.n	21a2c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   21a40:	f04f 0320 	mov.w	r3, #32
   21a44:	f3ef 8411 	mrs	r4, BASEPRI
   21a48:	f383 8811 	msr	BASEPRI, r3
   21a4c:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
   21a50:	4630      	mov	r0, r6
   21a52:	f00b f9ef 	bl	2ce34 <is_tx_ready>
   21a56:	2800      	cmp	r0, #0
   21a58:	d0ed      	beq.n	21a36 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   21a5a:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   21a5e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a60:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21a62:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21a66:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21a6a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   21a6e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   21a72:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   21a76:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21a7a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   21a7c:	f384 8811 	msr	BASEPRI, r4
   21a80:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   21a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a88:	20009163 	.word	0x20009163

00021a8c <nrf_gpio_cfg_output>:
    *p_pin = pin_number & 0x1F;
   21a8c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   21a90:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21a92:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   21a94:	4b04      	ldr	r3, [pc, #16]	; (21aa8 <nrf_gpio_cfg_output+0x1c>)
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21a96:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   21a9a:	bf18      	it	ne
   21a9c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21aa0:	2103      	movs	r1, #3
   21aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   21aa6:	4770      	bx	lr
   21aa8:	50000300 	.word	0x50000300

00021aac <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
   21aac:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
   21ab0:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21ab2:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   21ab4:	4b04      	ldr	r3, [pc, #16]	; (21ac8 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21ab6:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
   21aba:	bf18      	it	ne
   21abc:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21ac0:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   21ac2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   21ac6:	4770      	bx	lr
   21ac8:	50000300 	.word	0x50000300

00021acc <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   21acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ace:	2200      	movs	r2, #0
   21ad0:	4605      	mov	r5, r0
   21ad2:	2101      	movs	r1, #1
   21ad4:	2028      	movs	r0, #40	; 0x28
   21ad6:	f7e4 fd4f 	bl	6578 <z_arm_irq_priority_set>
   21ada:	2028      	movs	r0, #40	; 0x28
   21adc:	f7e4 fd1a 	bl	6514 <arch_irq_enable>
	return config->uarte_regs;
   21ae0:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   21ae2:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   21ae4:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   21ae6:	2700      	movs	r7, #0
   21ae8:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
        nrf_gpio_pin_set(pin_number);
   21aec:	2022      	movs	r0, #34	; 0x22
	data->dev = dev;
   21aee:	6035      	str	r5, [r6, #0]
   21af0:	f7ff ffdc 	bl	21aac <nrf_gpio_pin_set>
	nrf_gpio_cfg_output(config->pseltxd);
   21af4:	2022      	movs	r0, #34	; 0x22
   21af6:	f7ff ffc9 	bl	21a8c <nrf_gpio_cfg_output>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   21afa:	4b2c      	ldr	r3, [pc, #176]	; (21bac <uarte_1_init+0xe0>)
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   21afc:	68e9      	ldr	r1, [r5, #12]
   21afe:	f8c3 7704 	str.w	r7, [r3, #1796]	; 0x704
    p_reg->PSEL.TXD = pseltxd;
   21b02:	2322      	movs	r3, #34	; 0x22
   21b04:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   21b08:	2321      	movs	r3, #33	; 0x21
   21b0a:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.RTS = pselrts;
   21b0e:	f04f 33ff 	mov.w	r3, #4294967295
   21b12:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
   21b16:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   21b18:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   21b1c:	4628      	mov	r0, r5
   21b1e:	f7ff fea3 	bl	21868 <uarte_nrfx_configure>
	if (err) {
   21b22:	4607      	mov	r7, r0
   21b24:	2800      	cmp	r0, #0
   21b26:	d13c      	bne.n	21ba2 <uarte_1_init+0xd6>
	if (get_dev_config(dev)->ppi_endtx) {
   21b28:	686b      	ldr	r3, [r5, #4]
   21b2a:	799b      	ldrb	r3, [r3, #6]
   21b2c:	b1cb      	cbz	r3, 21b62 <uarte_1_init+0x96>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   21b2e:	f106 000e 	add.w	r0, r6, #14
   21b32:	f000 fb83 	bl	2223c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   21b36:	4b1e      	ldr	r3, [pc, #120]	; (21bb0 <uarte_1_init+0xe4>)
   21b38:	4298      	cmp	r0, r3
   21b3a:	d134      	bne.n	21ba6 <uarte_1_init+0xda>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   21b3c:	7bb0      	ldrb	r0, [r6, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   21b3e:	00c3      	lsls	r3, r0, #3
   21b40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21b44:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   21b48:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   21b4c:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   21b50:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   21b54:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   21b58:	4a16      	ldr	r2, [pc, #88]	; (21bb4 <uarte_1_init+0xe8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   21b5a:	2301      	movs	r3, #1
   21b5c:	4083      	lsls	r3, r0
   21b5e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21b62:	2308      	movs	r3, #8
   21b64:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21b68:	2300      	movs	r3, #0
   21b6a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   21b6e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   21b72:	f106 030d 	add.w	r3, r6, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21b76:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   21b7a:	2301      	movs	r3, #1
   21b7c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21b80:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   21b82:	686b      	ldr	r3, [r5, #4]
   21b84:	799b      	ldrb	r3, [r3, #6]
   21b86:	b91b      	cbnz	r3, 21b90 <uarte_1_init+0xc4>
    p_reg->INTENSET = mask;
   21b88:	f44f 7380 	mov.w	r3, #256	; 0x100
   21b8c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   21b90:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   21b92:	360c      	adds	r6, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   21b94:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   21b98:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21b9c:	2301      	movs	r3, #1
   21b9e:	60a3      	str	r3, [r4, #8]
   21ba0:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(1);
   21ba2:	4638      	mov	r0, r7
   21ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
   21ba6:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(1);
   21baa:	e7fa      	b.n	21ba2 <uarte_1_init+0xd6>
   21bac:	50000300 	.word	0x50000300
   21bb0:	0bad0000 	.word	0x0bad0000
   21bb4:	4001f000 	.word	0x4001f000

00021bb8 <random_byte_get>:
	__asm__ volatile(
   21bb8:	f04f 0320 	mov.w	r3, #32
   21bbc:	f3ef 8211 	mrs	r2, BASEPRI
   21bc0:	f383 8811 	msr	BASEPRI, r3
   21bc4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21bc8:	4b08      	ldr	r3, [pc, #32]	; (21bec <random_byte_get+0x34>)
   21bca:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   21bcc:	b159      	cbz	r1, 21be6 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   21bce:	4908      	ldr	r1, [pc, #32]	; (21bf0 <random_byte_get+0x38>)
   21bd0:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21bd4:	2100      	movs	r1, #0
   21bd6:	6019      	str	r1, [r3, #0]
   21bd8:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   21bda:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   21bdc:	f382 8811 	msr	BASEPRI, r2
   21be0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   21be4:	4770      	bx	lr
	int retval = -EAGAIN;
   21be6:	f06f 000a 	mvn.w	r0, #10
   21bea:	e7f7      	b.n	21bdc <random_byte_get+0x24>
   21bec:	4000d100 	.word	0x4000d100
   21bf0:	4000d000 	.word	0x4000d000

00021bf4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   21bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21bf6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   21bf8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   21bfa:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   21bfc:	f04f 0520 	mov.w	r5, #32
   21c00:	f3ef 8011 	mrs	r0, BASEPRI
   21c04:	f385 8811 	msr	BASEPRI, r5
   21c08:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   21c0c:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   21c0e:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   21c12:	1ba4      	subs	r4, r4, r6
   21c14:	403c      	ands	r4, r7
	if (available < len) {
   21c16:	42a2      	cmp	r2, r4
		len = available;
   21c18:	bf88      	it	hi
   21c1a:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   21c1c:	eb06 0c02 	add.w	ip, r6, r2
   21c20:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   21c24:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   21c26:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   21c2a:	f380 8811 	msr	BASEPRI, r0
   21c2e:	f3bf 8f6f 	isb	sy
   21c32:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   21c34:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   21c36:	4282      	cmp	r2, r0
   21c38:	d119      	bne.n	21c6e <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   21c3a:	4576      	cmp	r6, lr
   21c3c:	d10d      	bne.n	21c5a <rng_pool_get+0x66>
	__asm__ volatile(
   21c3e:	f04f 0520 	mov.w	r5, #32
   21c42:	f3ef 8211 	mrs	r2, BASEPRI
   21c46:	f385 8811 	msr	BASEPRI, r5
   21c4a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   21c4e:	781d      	ldrb	r5, [r3, #0]
   21c50:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   21c52:	f382 8811 	msr	BASEPRI, r2
   21c56:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   21c5a:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   21c5c:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   21c5e:	b288      	uxth	r0, r1
	available = available - len;
   21c60:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   21c62:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21c64:	bf22      	ittt	cs
   21c66:	4b06      	ldrcs	r3, [pc, #24]	; (21c80 <rng_pool_get+0x8c>)
   21c68:	2201      	movcs	r2, #1
   21c6a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   21c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   21c6e:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   21c72:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   21c74:	f89c c005 	ldrb.w	ip, [ip, #5]
   21c78:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   21c7c:	403d      	ands	r5, r7
   21c7e:	e7da      	b.n	21c36 <rng_pool_get+0x42>
   21c80:	4000d000 	.word	0x4000d000

00021c84 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21c84:	43db      	mvns	r3, r3
{
   21c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21c8a:	f013 0501 	ands.w	r5, r3, #1
{
   21c8e:	460e      	mov	r6, r1
   21c90:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   21c92:	d004      	beq.n	21c9e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   21c94:	4821      	ldr	r0, [pc, #132]	; (21d1c <entropy_nrf5_get_entropy_isr+0x98>)
   21c96:	f7ff ffad 	bl	21bf4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   21c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   21c9e:	2a00      	cmp	r2, #0
   21ca0:	d033      	beq.n	21d0a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   21ca2:	f04f 0320 	mov.w	r3, #32
   21ca6:	f3ef 8811 	mrs	r8, BASEPRI
   21caa:	f383 8811 	msr	BASEPRI, r3
   21cae:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   21cb2:	200d      	movs	r0, #13
   21cb4:	f7e4 fc52 	bl	655c <arch_irq_is_enabled>
   21cb8:	4607      	mov	r7, r0
		irq_disable(IRQN);
   21cba:	200d      	movs	r0, #13
   21cbc:	f7e4 fc3a 	bl	6534 <arch_irq_disable>
	__asm__ volatile(
   21cc0:	f388 8811 	msr	BASEPRI, r8
   21cc4:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21cc8:	4a15      	ldr	r2, [pc, #84]	; (21d20 <entropy_nrf5_get_entropy_isr+0x9c>)
   21cca:	6015      	str	r5, [r2, #0]
   21ccc:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21cce:	4b15      	ldr	r3, [pc, #84]	; (21d24 <entropy_nrf5_get_entropy_isr+0xa0>)
   21cd0:	2101      	movs	r1, #1
   21cd2:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21cd4:	4914      	ldr	r1, [pc, #80]	; (21d28 <entropy_nrf5_get_entropy_isr+0xa4>)
   21cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   21cda:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   21cde:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   21ce0:	4691      	mov	r9, r2
   21ce2:	468a      	mov	sl, r1
   21ce4:	4698      	mov	r8, r3
   21ce6:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   21cea:	b183      	cbz	r3, 21d0e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   21cec:	f7ff ff64 	bl	21bb8 <random_byte_get>
			if (byte < 0) {
   21cf0:	1e03      	subs	r3, r0, #0
   21cf2:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   21cf6:	dbf6      	blt.n	21ce6 <entropy_nrf5_get_entropy_isr+0x62>
   21cf8:	3d01      	subs	r5, #1
   21cfa:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   21cfc:	5573      	strb	r3, [r6, r5]
		} while (len);
   21cfe:	2d00      	cmp	r5, #0
   21d00:	d1f1      	bne.n	21ce6 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   21d02:	b117      	cbz	r7, 21d0a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   21d04:	200d      	movs	r0, #13
   21d06:	f7e4 fc05 	bl	6514 <arch_irq_enable>
	return cnt;
   21d0a:	4620      	mov	r0, r4
   21d0c:	e7c5      	b.n	21c9a <entropy_nrf5_get_entropy_isr+0x16>
   21d0e:	f3bf 8f4f 	dsb	sy
				__WFE();
   21d12:	bf20      	wfe
				__SEV();
   21d14:	bf40      	sev
				__WFE();
   21d16:	bf20      	wfe
   21d18:	e7e5      	b.n	21ce6 <entropy_nrf5_get_entropy_isr+0x62>
   21d1a:	bf00      	nop
   21d1c:	20003ff0 	.word	0x20003ff0
   21d20:	4000d100 	.word	0x4000d100
   21d24:	4000d000 	.word	0x4000d000
   21d28:	e000e100 	.word	0xe000e100

00021d2c <entropy_nrf5_get_entropy>:
{
   21d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   21d30:	4f13      	ldr	r7, [pc, #76]	; (21d80 <entropy_nrf5_get_entropy+0x54>)
   21d32:	460d      	mov	r5, r1
   21d34:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21d36:	f107 0845 	add.w	r8, r7, #69	; 0x45
   21d3a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   21d3e:	b914      	cbnz	r4, 21d46 <entropy_nrf5_get_entropy+0x1a>
}
   21d40:	4620      	mov	r0, r4
   21d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21d46:	f04f 33ff 	mov.w	r3, #4294967295
   21d4a:	f04f 32ff 	mov.w	r2, #4294967295
   21d4e:	4638      	mov	r0, r7
   21d50:	f001 fed6 	bl	23b00 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   21d54:	4622      	mov	r2, r4
   21d56:	4629      	mov	r1, r5
   21d58:	4640      	mov	r0, r8
   21d5a:	f7ff ff4b 	bl	21bf4 <rng_pool_get>
   21d5e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   21d60:	4638      	mov	r0, r7
   21d62:	f001 fea7 	bl	23ab4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   21d66:	b93e      	cbnz	r6, 21d78 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   21d68:	f04f 32ff 	mov.w	r2, #4294967295
   21d6c:	f04f 33ff 	mov.w	r3, #4294967295
   21d70:	4648      	mov	r0, r9
   21d72:	f001 fec5 	bl	23b00 <z_impl_k_sem_take>
			continue;
   21d76:	e7e2      	b.n	21d3e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   21d78:	1ba4      	subs	r4, r4, r6
   21d7a:	b2a4      	uxth	r4, r4
		buf += bytes;
   21d7c:	4435      	add	r5, r6
   21d7e:	e7de      	b.n	21d3e <entropy_nrf5_get_entropy+0x12>
   21d80:	20003fc0 	.word	0x20003fc0

00021d84 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   21d84:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   21d86:	4c19      	ldr	r4, [pc, #100]	; (21dec <entropy_nrf5_init+0x68>)
   21d88:	2201      	movs	r2, #1
   21d8a:	4611      	mov	r1, r2
   21d8c:	4620      	mov	r0, r4
   21d8e:	f00b fb89 	bl	2d4a4 <z_impl_k_sem_init>
   21d92:	2201      	movs	r2, #1
   21d94:	2100      	movs	r1, #0
   21d96:	f104 0018 	add.w	r0, r4, #24
   21d9a:	f00b fb83 	bl	2d4a4 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   21d9e:	f240 4307 	movw	r3, #1031	; 0x407
   21da2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   21da6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   21daa:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   21dac:	230c      	movs	r3, #12
   21dae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   21db2:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   21db4:	4b0e      	ldr	r3, [pc, #56]	; (21df0 <entropy_nrf5_init+0x6c>)
   21db6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   21dba:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   21dbe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   21dc2:	f042 0201 	orr.w	r2, r2, #1
   21dc6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21dca:	4a0a      	ldr	r2, [pc, #40]	; (21df4 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   21dcc:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   21dce:	6015      	str	r5, [r2, #0]
   21dd0:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   21dd2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   21dd6:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21dd8:	6019      	str	r1, [r3, #0]
   21dda:	200d      	movs	r0, #13
   21ddc:	f7e4 fbcc 	bl	6578 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   21de0:	200d      	movs	r0, #13
   21de2:	f7e4 fb97 	bl	6514 <arch_irq_enable>

	return 0;
}
   21de6:	4628      	mov	r0, r5
   21de8:	bd38      	pop	{r3, r4, r5, pc}
   21dea:	bf00      	nop
   21dec:	20003fc0 	.word	0x20003fc0
   21df0:	4000d000 	.word	0x4000d000
   21df4:	4000d100 	.word	0x4000d100

00021df8 <isr>:
{
   21df8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   21dfa:	f7ff fedd 	bl	21bb8 <random_byte_get>
	if (byte < 0) {
   21dfe:	2800      	cmp	r0, #0
   21e00:	db20      	blt.n	21e44 <isr+0x4c>
	uint8_t last  = rngp->last;
   21e02:	4b17      	ldr	r3, [pc, #92]	; (21e60 <isr+0x68>)
   21e04:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   21e08:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   21e0c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   21e10:	1a51      	subs	r1, r2, r1
   21e12:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   21e16:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   21e18:	d10d      	bne.n	21e36 <isr+0x3e>
	uint8_t last  = rngp->last;
   21e1a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   21e1e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   21e22:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   21e26:	1a51      	subs	r1, r2, r1
   21e28:	ea34 0101 	bics.w	r1, r4, r1
   21e2c:	d10b      	bne.n	21e46 <isr+0x4e>
   21e2e:	4b0d      	ldr	r3, [pc, #52]	; (21e64 <isr+0x6c>)
   21e30:	2201      	movs	r2, #1
   21e32:	601a      	str	r2, [r3, #0]
}
   21e34:	e00e      	b.n	21e54 <isr+0x5c>
	rngp->buffer[last] = byte;
   21e36:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   21e38:	3201      	adds	r2, #1
   21e3a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   21e3c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   21e40:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   21e44:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   21e46:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   21e48:	3201      	adds	r2, #1
   21e4a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   21e4c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   21e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   21e54:	4804      	ldr	r0, [pc, #16]	; (21e68 <isr+0x70>)
}
   21e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21e5a:	f001 be2b 	b.w	23ab4 <z_impl_k_sem_give>
   21e5e:	bf00      	nop
   21e60:	20003fc0 	.word	0x20003fc0
   21e64:	4000d004 	.word	0x4000d004
   21e68:	20003fd8 	.word	0x20003fd8

00021e6c <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21e6c:	4b03      	ldr	r3, [pc, #12]	; (21e7c <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   21e6e:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   21e70:	f1a0 0308 	sub.w	r3, r0, #8
   21e74:	4258      	negs	r0, r3
   21e76:	4158      	adcs	r0, r3
   21e78:	4770      	bx	lr
   21e7a:	bf00      	nop
   21e7c:	10000130 	.word	0x10000130

00021e80 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   21e80:	4b06      	ldr	r3, [pc, #24]	; (21e9c <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   21e82:	681b      	ldr	r3, [r3, #0]
   21e84:	2b08      	cmp	r3, #8
   21e86:	d106      	bne.n	21e96 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   21e88:	4b05      	ldr	r3, [pc, #20]	; (21ea0 <nrf52_errata_103+0x20>)
   21e8a:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   21e8c:	2b03      	cmp	r3, #3
   21e8e:	d802      	bhi.n	21e96 <nrf52_errata_103+0x16>
   21e90:	4a04      	ldr	r2, [pc, #16]	; (21ea4 <nrf52_errata_103+0x24>)
   21e92:	5cd0      	ldrb	r0, [r2, r3]
   21e94:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   21e96:	2000      	movs	r0, #0
    #endif
}
   21e98:	4770      	bx	lr
   21e9a:	bf00      	nop
   21e9c:	10000130 	.word	0x10000130
   21ea0:	10000134 	.word	0x10000134
   21ea4:	00033762 	.word	0x00033762

00021ea8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   21ea8:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   21eaa:	f7ff ffdf 	bl	21e6c <nrf52_errata_136>
   21eae:	b140      	cbz	r0, 21ec2 <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
   21eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21eb4:	2200      	movs	r2, #0
   21eb6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   21eba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   21ebe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   21ec2:	f7ff ffd3 	bl	21e6c <nrf52_errata_136>
   21ec6:	2800      	cmp	r0, #0
   21ec8:	d046      	beq.n	21f58 <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   21eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21ece:	4b58      	ldr	r3, [pc, #352]	; (22030 <SystemInit+0x188>)
   21ed0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   21ed4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   21ed8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   21edc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   21ee0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   21ee4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   21ee8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   21eec:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   21ef0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   21ef4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   21ef8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   21efc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   21f00:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   21f04:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   21f08:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   21f0c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   21f10:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   21f14:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   21f18:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   21f1c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   21f20:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   21f24:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   21f28:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   21f2c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   21f30:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   21f34:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   21f38:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   21f3c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   21f40:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   21f44:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   21f48:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   21f4c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   21f50:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   21f54:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
   21f58:	f7ff ff92 	bl	21e80 <nrf52_errata_103>
   21f5c:	b110      	cbz	r0, 21f64 <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   21f5e:	4b35      	ldr	r3, [pc, #212]	; (22034 <SystemInit+0x18c>)
   21f60:	4a35      	ldr	r2, [pc, #212]	; (22038 <SystemInit+0x190>)
   21f62:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
   21f64:	f7ff ff8c 	bl	21e80 <nrf52_errata_103>
   21f68:	b118      	cbz	r0, 21f72 <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   21f6a:	4b34      	ldr	r3, [pc, #208]	; (2203c <SystemInit+0x194>)
   21f6c:	22fb      	movs	r2, #251	; 0xfb
   21f6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
   21f72:	f7ff ff85 	bl	21e80 <nrf52_errata_103>
   21f76:	b148      	cbz	r0, 21f8c <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   21f78:	4931      	ldr	r1, [pc, #196]	; (22040 <SystemInit+0x198>)
   21f7a:	4b32      	ldr	r3, [pc, #200]	; (22044 <SystemInit+0x19c>)
   21f7c:	680a      	ldr	r2, [r1, #0]
   21f7e:	681b      	ldr	r3, [r3, #0]
   21f80:	f022 020f 	bic.w	r2, r2, #15
   21f84:	f003 030f 	and.w	r3, r3, #15
   21f88:	4313      	orrs	r3, r2
   21f8a:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
   21f8c:	f7ff ff78 	bl	21e80 <nrf52_errata_103>
   21f90:	b118      	cbz	r0, 21f9a <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   21f92:	4b2d      	ldr	r3, [pc, #180]	; (22048 <SystemInit+0x1a0>)
   21f94:	f44f 7200 	mov.w	r2, #512	; 0x200
   21f98:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   21f9a:	f7ff ff67 	bl	21e6c <nrf52_errata_136>
   21f9e:	b148      	cbz	r0, 21fb4 <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   21fa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21fa4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   21fa8:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   21faa:	bf44      	itt	mi
   21fac:	f06f 0201 	mvnmi.w	r2, #1
   21fb0:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   21fb4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   21fb8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   21fbc:	2a00      	cmp	r2, #0
   21fbe:	db03      	blt.n	21fc8 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   21fc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   21fc4:	2b00      	cmp	r3, #0
   21fc6:	da2f      	bge.n	22028 <SystemInit+0x180>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   21fc8:	4b20      	ldr	r3, [pc, #128]	; (2204c <SystemInit+0x1a4>)
   21fca:	2201      	movs	r2, #1
   21fcc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   21fd0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   21fd4:	2a00      	cmp	r2, #0
   21fd6:	d0fb      	beq.n	21fd0 <SystemInit+0x128>
            NRF_UICR->PSELRESET[0] = 18;
   21fd8:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   21fdc:	2112      	movs	r1, #18
   21fde:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   21fe2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   21fe6:	2a00      	cmp	r2, #0
   21fe8:	d0fb      	beq.n	21fe2 <SystemInit+0x13a>
            NRF_UICR->PSELRESET[1] = 18;
   21fea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   21fee:	2212      	movs	r2, #18
   21ff0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   21ff4:	4b15      	ldr	r3, [pc, #84]	; (2204c <SystemInit+0x1a4>)
   21ff6:	461a      	mov	r2, r3
   21ff8:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   21ffc:	2900      	cmp	r1, #0
   21ffe:	d0fb      	beq.n	21ff8 <SystemInit+0x150>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   22000:	2100      	movs	r1, #0
   22002:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   22006:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2200a:	2b00      	cmp	r3, #0
   2200c:	d0fb      	beq.n	22006 <SystemInit+0x15e>
   2200e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22012:	490f      	ldr	r1, [pc, #60]	; (22050 <SystemInit+0x1a8>)
   22014:	4b0f      	ldr	r3, [pc, #60]	; (22054 <SystemInit+0x1ac>)
   22016:	68ca      	ldr	r2, [r1, #12]
   22018:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2201c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2201e:	60cb      	str	r3, [r1, #12]
   22020:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   22024:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22026:	e7fd      	b.n	22024 <SystemInit+0x17c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   22028:	4b0b      	ldr	r3, [pc, #44]	; (22058 <SystemInit+0x1b0>)
   2202a:	4a0c      	ldr	r2, [pc, #48]	; (2205c <SystemInit+0x1b4>)
   2202c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   2202e:	bd08      	pop	{r3, pc}
   22030:	4000c000 	.word	0x4000c000
   22034:	4000568c 	.word	0x4000568c
   22038:	00038148 	.word	0x00038148
   2203c:	4000f000 	.word	0x4000f000
   22040:	40000ee4 	.word	0x40000ee4
   22044:	10000258 	.word	0x10000258
   22048:	40029640 	.word	0x40029640
   2204c:	4001e000 	.word	0x4001e000
   22050:	e000ed00 	.word	0xe000ed00
   22054:	05fa0004 	.word	0x05fa0004
   22058:	20000ae4 	.word	0x20000ae4
   2205c:	03d09000 	.word	0x03d09000

00022060 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   22060:	4b04      	ldr	r3, [pc, #16]	; (22074 <nrfx_clock_init+0x14>)
   22062:	791a      	ldrb	r2, [r3, #4]
   22064:	b922      	cbnz	r2, 22070 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   22066:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   22068:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2206a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   2206c:	4802      	ldr	r0, [pc, #8]	; (22078 <nrfx_clock_init+0x18>)
   2206e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   22070:	4802      	ldr	r0, [pc, #8]	; (2207c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22072:	4770      	bx	lr
   22074:	20004014 	.word	0x20004014
   22078:	0bad0000 	.word	0x0bad0000
   2207c:	0bad000c 	.word	0x0bad000c

00022080 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   22080:	b110      	cbz	r0, 22088 <nrfx_clock_start+0x8>
   22082:	2801      	cmp	r0, #1
   22084:	d020      	beq.n	220c8 <nrfx_clock_start+0x48>
   22086:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   22088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2208c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   22090:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   22094:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   22098:	4619      	mov	r1, r3
   2209a:	d011      	beq.n	220c0 <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2209c:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   220a0:	2a01      	cmp	r2, #1
   220a2:	d10d      	bne.n	220c0 <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   220a4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220a8:	4b0c      	ldr	r3, [pc, #48]	; (220dc <nrfx_clock_start+0x5c>)
   220aa:	2200      	movs	r2, #0
   220ac:	601a      	str	r2, [r3, #0]
   220ae:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   220b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   220b4:	2202      	movs	r2, #2
   220b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220ba:	2201      	movs	r2, #1
   220bc:	609a      	str	r2, [r3, #8]
}
   220be:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   220c0:	2300      	movs	r3, #0
   220c2:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   220c6:	e7ef      	b.n	220a8 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220c8:	4b05      	ldr	r3, [pc, #20]	; (220e0 <nrfx_clock_start+0x60>)
   220ca:	2200      	movs	r2, #0
   220cc:	601a      	str	r2, [r3, #0]
   220ce:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   220d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   220d4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220d8:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   220da:	4770      	bx	lr
   220dc:	40000104 	.word	0x40000104
   220e0:	40000100 	.word	0x40000100

000220e4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   220e4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   220e6:	b110      	cbz	r0, 220ee <nrfx_clock_stop+0xa>
   220e8:	2801      	cmp	r0, #1
   220ea:	d018      	beq.n	2211e <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   220ec:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   220ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   220f2:	2202      	movs	r2, #2
   220f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220f8:	4a18      	ldr	r2, [pc, #96]	; (2215c <nrfx_clock_stop+0x78>)
   220fa:	6010      	str	r0, [r2, #0]
   220fc:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   220fe:	4a18      	ldr	r2, [pc, #96]	; (22160 <nrfx_clock_stop+0x7c>)
   22100:	2101      	movs	r1, #1
   22102:	6011      	str	r1, [r2, #0]
   22104:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   22108:	461c      	mov	r4, r3
   2210a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   2210e:	03db      	lsls	r3, r3, #15
   22110:	d5ec      	bpl.n	220ec <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   22112:	2001      	movs	r0, #1
   22114:	f00a feb1 	bl	2ce7a <nrfx_busy_wait>
   22118:	3d01      	subs	r5, #1
   2211a:	d1f6      	bne.n	2210a <nrfx_clock_stop+0x26>
   2211c:	e7e6      	b.n	220ec <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2211e:	4b11      	ldr	r3, [pc, #68]	; (22164 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   22120:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22124:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   22126:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2212a:	601a      	str	r2, [r3, #0]
   2212c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2212e:	4b0e      	ldr	r3, [pc, #56]	; (22168 <nrfx_clock_stop+0x84>)
   22130:	f242 7510 	movw	r5, #10000	; 0x2710
   22134:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   22136:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2213a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   2213e:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   22140:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   22144:	d505      	bpl.n	22152 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   22146:	b123      	cbz	r3, 22152 <nrfx_clock_stop+0x6e>
   22148:	2001      	movs	r0, #1
   2214a:	f00a fe96 	bl	2ce7a <nrfx_busy_wait>
   2214e:	3d01      	subs	r5, #1
   22150:	d1f1      	bne.n	22136 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   22152:	4b06      	ldr	r3, [pc, #24]	; (2216c <nrfx_clock_stop+0x88>)
   22154:	2200      	movs	r2, #0
   22156:	715a      	strb	r2, [r3, #5]
   22158:	e7c8      	b.n	220ec <nrfx_clock_stop+0x8>
   2215a:	bf00      	nop
   2215c:	40000104 	.word	0x40000104
   22160:	4000000c 	.word	0x4000000c
   22164:	40000100 	.word	0x40000100
   22168:	40000004 	.word	0x40000004
   2216c:	20004014 	.word	0x20004014

00022170 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22170:	4b16      	ldr	r3, [pc, #88]	; (221cc <nrfx_power_clock_irq_handler+0x5c>)
   22172:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   22174:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   22176:	b16a      	cbz	r2, 22194 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22178:	2200      	movs	r2, #0
   2217a:	601a      	str	r2, [r3, #0]
   2217c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2217e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22182:	2201      	movs	r2, #1
   22184:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   22188:	4b11      	ldr	r3, [pc, #68]	; (221d0 <nrfx_power_clock_irq_handler+0x60>)
   2218a:	7958      	ldrb	r0, [r3, #5]
   2218c:	b910      	cbnz	r0, 22194 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   2218e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22190:	681b      	ldr	r3, [r3, #0]
   22192:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   22194:	4b0f      	ldr	r3, [pc, #60]	; (221d4 <nrfx_power_clock_irq_handler+0x64>)
   22196:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   22198:	b172      	cbz	r2, 221b8 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2219a:	2200      	movs	r2, #0
   2219c:	601a      	str	r2, [r3, #0]
   2219e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   221a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   221a4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   221a8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   221ac:	0792      	lsls	r2, r2, #30
   221ae:	d104      	bne.n	221ba <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   221b0:	2201      	movs	r2, #1
   221b2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   221b6:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   221b8:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   221ba:	2202      	movs	r2, #2
   221bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   221c0:	4b03      	ldr	r3, [pc, #12]	; (221d0 <nrfx_power_clock_irq_handler+0x60>)
}
   221c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   221c6:	681b      	ldr	r3, [r3, #0]
   221c8:	2001      	movs	r0, #1
   221ca:	4718      	bx	r3
   221cc:	40000100 	.word	0x40000100
   221d0:	20004014 	.word	0x20004014
   221d4:	40000104 	.word	0x40000104

000221d8 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   221d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   221dc:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   221de:	fbb0 f3f2 	udiv	r3, r0, r2
   221e2:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   221e6:	b973      	cbnz	r3, 22206 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   221e8:	4b08      	ldr	r3, [pc, #32]	; (2220c <nrfx_nvmc_page_erase+0x34>)
   221ea:	2202      	movs	r2, #2
   221ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   221f0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   221f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   221f8:	07d2      	lsls	r2, r2, #31
   221fa:	d5fb      	bpl.n	221f4 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   221fc:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   221fe:	4804      	ldr	r0, [pc, #16]	; (22210 <nrfx_nvmc_page_erase+0x38>)
   22200:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   22204:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   22206:	4803      	ldr	r0, [pc, #12]	; (22214 <nrfx_nvmc_page_erase+0x3c>)
}
   22208:	4770      	bx	lr
   2220a:	bf00      	nop
   2220c:	4001e000 	.word	0x4001e000
   22210:	0bad0000 	.word	0x0bad0000
   22214:	0bad000a 	.word	0x0bad000a

00022218 <nrfx_nvmc_word_write>:
   22218:	4b07      	ldr	r3, [pc, #28]	; (22238 <nrfx_nvmc_word_write+0x20>)
   2221a:	2201      	movs	r2, #1
   2221c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   22220:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   22224:	07d2      	lsls	r2, r2, #31
   22226:	d5fb      	bpl.n	22220 <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   22228:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   2222a:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   2222e:	2200      	movs	r2, #0
   22230:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   22234:	4770      	bx	lr
   22236:	bf00      	nop
   22238:	4001e000 	.word	0x4001e000

0002223c <nrfx_ppi_channel_alloc>:
    nrfx_err_t err_code = NRFX_SUCCESS;
    nrf_ppi_channel_t channel;
    uint32_t mask = 0;
    err_code = NRFX_ERROR_NO_MEM;

    mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   2223c:	4b18      	ldr	r3, [pc, #96]	; (222a0 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   2223e:	f8df c06c 	ldr.w	ip, [pc, #108]	; 222ac <nrfx_ppi_channel_alloc+0x70>
    mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   22242:	681b      	ldr	r3, [r3, #0]
{
   22244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   22248:	43db      	mvns	r3, r3
{
   2224a:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   2224c:	4f15      	ldr	r7, [pc, #84]	; (222a4 <nrfx_ppi_channel_alloc+0x68>)
    err_code = NRFX_ERROR_NO_MEM;
   2224e:	4816      	ldr	r0, [pc, #88]	; (222a8 <nrfx_ppi_channel_alloc+0x6c>)
    mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   22250:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (channel = NRF_PPI_CHANNEL0;
   22254:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   22256:	f04f 0e01 	mov.w	lr, #1
   2225a:	b2e6      	uxtb	r6, r4
   2225c:	b90b      	cbnz	r3, 22262 <nrfx_ppi_channel_alloc+0x26>
        }
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2225e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   22262:	f04f 0220 	mov.w	r2, #32
   22266:	f3ef 8811 	mrs	r8, BASEPRI
   2226a:	f382 8811 	msr	BASEPRI, r2
   2226e:	f3bf 8f6f 	isb	sy
   22272:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   22276:	4213      	tst	r3, r2
   22278:	d006      	beq.n	22288 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   2227a:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   2227c:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   2227e:	bf01      	itttt	eq
   22280:	4311      	orreq	r1, r2
   22282:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   22284:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   22286:	4660      	moveq	r0, ip
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   22288:	f388 8811 	msr	BASEPRI, r8
   2228c:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   22290:	4560      	cmp	r0, ip
   22292:	f104 0401 	add.w	r4, r4, #1
   22296:	d0e2      	beq.n	2225e <nrfx_ppi_channel_alloc+0x22>
         mask &= ~nrfx_ppi_channel_to_mask(channel), channel++)
   22298:	ea23 0302 	bic.w	r3, r3, r2
   2229c:	e7dd      	b.n	2225a <nrfx_ppi_channel_alloc+0x1e>
   2229e:	bf00      	nop
   222a0:	0002f344 	.word	0x0002f344
   222a4:	2000401c 	.word	0x2000401c
   222a8:	0bad0002 	.word	0x0bad0002
   222ac:	0bad0000 	.word	0x0bad0000

000222b0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   222b0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   222b2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   222b6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   222b8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   222ba:	6002      	str	r2, [r0, #0]
}
   222bc:	4802      	ldr	r0, [pc, #8]	; (222c8 <nrf_gpio_pin_port_decode+0x18>)
   222be:	bf18      	it	ne
   222c0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   222c4:	4770      	bx	lr
   222c6:	bf00      	nop
   222c8:	50000300 	.word	0x50000300

000222cc <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   222cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   222d0:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   222d2:	4c4c      	ldr	r4, [pc, #304]	; (22404 <nrfx_spi_init+0x138>)
{
   222d4:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   222d6:	2028      	movs	r0, #40	; 0x28
   222d8:	4370      	muls	r0, r6
   222da:	1825      	adds	r5, r4, r0
   222dc:	7f2f      	ldrb	r7, [r5, #28]
   222de:	2f00      	cmp	r7, #0
   222e0:	f040 808e 	bne.w	22400 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   222e4:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
   222e6:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   222e8:	7b0b      	ldrb	r3, [r1, #12]
   222ea:	7808      	ldrb	r0, [r1, #0]
   222ec:	2b01      	cmp	r3, #1
   222ee:	d878      	bhi.n	223e2 <nrfx_spi_init+0x116>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   222f0:	f00a fdea 	bl	2cec8 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   222f4:	780b      	ldrb	r3, [r1, #0]
   222f6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   222f8:	a801      	add	r0, sp, #4
   222fa:	f7ff ffd9 	bl	222b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   222fe:	9b01      	ldr	r3, [sp, #4]
   22300:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22304:	2201      	movs	r2, #1
   22306:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   2230a:	784d      	ldrb	r5, [r1, #1]
   2230c:	2dff      	cmp	r5, #255	; 0xff
   2230e:	d06b      	beq.n	223e8 <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   22310:	4628      	mov	r0, r5
   22312:	f00a fdd9 	bl	2cec8 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22316:	a801      	add	r0, sp, #4
   22318:	9501      	str	r5, [sp, #4]
   2231a:	f7ff ffc9 	bl	222b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2231e:	9b01      	ldr	r3, [sp, #4]
   22320:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22324:	2203      	movs	r2, #3
   22326:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   2232a:	788f      	ldrb	r7, [r1, #2]
   2232c:	2fff      	cmp	r7, #255	; 0xff
   2232e:	d05e      	beq.n	223ee <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22330:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   22332:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   22336:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22338:	f7ff ffba 	bl	222b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2233c:	9b01      	ldr	r3, [sp, #4]
   2233e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   22342:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22346:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2234a:	78c8      	ldrb	r0, [r1, #3]
   2234c:	28ff      	cmp	r0, #255	; 0xff
   2234e:	d00c      	beq.n	2236a <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   22350:	f00a fdad 	bl	2ceae <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22354:	a801      	add	r0, sp, #4
        nrf_gpio_cfg_output(p_config->ss_pin);
   22356:	78cb      	ldrb	r3, [r1, #3]
   22358:	9301      	str	r3, [sp, #4]
   2235a:	f7ff ffa9 	bl	222b0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2235e:	9b01      	ldr	r3, [sp, #4]
   22360:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22364:	2203      	movs	r2, #3
   22366:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   2236a:	f898 2004 	ldrb.w	r2, [r8, #4]
   2236e:	78c8      	ldrb	r0, [r1, #3]
   22370:	2328      	movs	r3, #40	; 0x28
   22372:	fb03 4302 	mla	r3, r3, r2, r4
   22376:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   22378:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   2237c:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   2237e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   22382:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   22384:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   22388:	f8c0 7510 	str.w	r7, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   2238c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   22390:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   22392:	7b0d      	ldrb	r5, [r1, #12]
   22394:	3b00      	subs	r3, #0
   22396:	bf18      	it	ne
   22398:	2301      	movne	r3, #1
    switch (spi_mode)
   2239a:	2d02      	cmp	r5, #2
   2239c:	d02a      	beq.n	223f4 <nrfx_spi_init+0x128>
   2239e:	2d03      	cmp	r5, #3
   223a0:	d02b      	beq.n	223fa <nrfx_spi_init+0x12e>
   223a2:	2d01      	cmp	r5, #1
   223a4:	d101      	bne.n	223aa <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   223a6:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   223aa:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   223ae:	2328      	movs	r3, #40	; 0x28
   223b0:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   223b4:	4373      	muls	r3, r6
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   223b6:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
   223b8:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   223ba:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   223bc:	2201      	movs	r2, #1
   223be:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   223c2:	b11b      	cbz	r3, 223cc <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   223c4:	f340 3007 	sbfx	r0, r0, #12, #8
   223c8:	f7e4 f8a4 	bl	6514 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   223cc:	2328      	movs	r3, #40	; 0x28
   223ce:	fb03 4406 	mla	r4, r3, r6, r4
   223d2:	2300      	movs	r3, #0
   223d4:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   223d6:	480c      	ldr	r0, [pc, #48]	; (22408 <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   223d8:	2301      	movs	r3, #1
   223da:	7723      	strb	r3, [r4, #28]
}
   223dc:	b003      	add	sp, #12
   223de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   223e2:	f00a fd64 	bl	2ceae <nrf_gpio_pin_set>
   223e6:	e785      	b.n	222f4 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   223e8:	f04f 35ff 	mov.w	r5, #4294967295
   223ec:	e79d      	b.n	2232a <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   223ee:	f04f 37ff 	mov.w	r7, #4294967295
   223f2:	e7aa      	b.n	2234a <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   223f4:	f043 0304 	orr.w	r3, r3, #4
        break;
   223f8:	e7d7      	b.n	223aa <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   223fa:	f043 0306 	orr.w	r3, r3, #6
        break;
   223fe:	e7d4      	b.n	223aa <nrfx_spi_init+0xde>
        return err_code;
   22400:	4802      	ldr	r0, [pc, #8]	; (2240c <nrfx_spi_init+0x140>)
   22402:	e7eb      	b.n	223dc <nrfx_spi_init+0x110>
   22404:	20004020 	.word	0x20004020
   22408:	0bad0000 	.word	0x0bad0000
   2240c:	0bad0005 	.word	0x0bad0005

00022410 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   22410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   22414:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   22416:	4d39      	ldr	r5, [pc, #228]	; (224fc <nrfx_spi_xfer+0xec>)
   22418:	2328      	movs	r3, #40	; 0x28
   2241a:	4363      	muls	r3, r4
{
   2241c:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   2241e:	18ea      	adds	r2, r5, r3
{
   22420:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   22422:	7f51      	ldrb	r1, [r2, #29]
{
   22424:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   22426:	2900      	cmp	r1, #0
   22428:	d165      	bne.n	224f6 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   2242a:	58eb      	ldr	r3, [r5, r3]
   2242c:	b10b      	cbz	r3, 22432 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   2242e:	2301      	movs	r3, #1
   22430:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   22432:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   22436:	2628      	movs	r6, #40	; 0x28
   22438:	fb06 5604 	mla	r6, r6, r4, r5
   2243c:	f106 0c0c 	add.w	ip, r6, #12
   22440:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22444:	7fb0      	ldrb	r0, [r6, #30]
    p_cb->abort = false;
   22446:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22448:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   2244a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   2244e:	d001      	beq.n	22454 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   22450:	f00a fd3a 	bl	2cec8 <nrf_gpio_pin_clear>
    }
    if (flags)
   22454:	2328      	movs	r3, #40	; 0x28
   22456:	f1b8 0f00 	cmp.w	r8, #0
   2245a:	d006      	beq.n	2246a <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   2245c:	fb03 5404 	mla	r4, r3, r4, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   22460:	4827      	ldr	r0, [pc, #156]	; (22500 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   22462:	2300      	movs	r3, #0
   22464:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   22466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   2246a:	f8d9 6000 	ldr.w	r6, [r9]
    p_cb->bytes_transferred = 0;
   2246e:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->INTENCLR = mask;
   22472:	2204      	movs	r2, #4
   22474:	f8c6 2308 	str.w	r2, [r6, #776]	; 0x308
   22478:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2247c:	f8c6 8108 	str.w	r8, [r6, #264]	; 0x108
   22480:	f8d6 2108 	ldr.w	r2, [r6, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   22484:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   22486:	b192      	cbz	r2, 224ae <nrfx_spi_xfer+0x9e>
   22488:	683b      	ldr	r3, [r7, #0]
   2248a:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   2248c:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   22490:	2a01      	cmp	r2, #1
   22492:	d90e      	bls.n	224b2 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   22494:	683b      	ldr	r3, [r7, #0]
   22496:	785b      	ldrb	r3, [r3, #1]
   22498:	f8c6 351c 	str.w	r3, [r6, #1308]	; 0x51c
    if (p_cb->handler)
   2249c:	2328      	movs	r3, #40	; 0x28
   2249e:	4363      	muls	r3, r4
   224a0:	58ef      	ldr	r7, [r5, r3]
   224a2:	b177      	cbz	r7, 224c2 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   224a4:	2304      	movs	r3, #4
   224a6:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   224aa:	4816      	ldr	r0, [pc, #88]	; (22504 <nrfx_spi_xfer+0xf4>)
   224ac:	e7db      	b.n	22466 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   224ae:	7fdb      	ldrb	r3, [r3, #31]
   224b0:	e7ec      	b.n	2248c <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   224b2:	68fb      	ldr	r3, [r7, #12]
   224b4:	2b01      	cmp	r3, #1
   224b6:	d9f1      	bls.n	2249c <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   224b8:	2328      	movs	r3, #40	; 0x28
   224ba:	fb03 5304 	mla	r3, r3, r4, r5
    p_reg->TXD = data;
   224be:	7fdb      	ldrb	r3, [r3, #31]
   224c0:	e7ea      	b.n	22498 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   224c2:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   224c6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224ca:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   224ce:	2b00      	cmp	r3, #0
   224d0:	d0fb      	beq.n	224ca <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   224d2:	f8c6 7108 	str.w	r7, [r6, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   224d6:	4630      	mov	r0, r6
   224d8:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
   224dc:	f00a fd01 	bl	2cee2 <transfer_byte>
   224e0:	2800      	cmp	r0, #0
   224e2:	d1f2      	bne.n	224ca <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   224e4:	2328      	movs	r3, #40	; 0x28
   224e6:	fb03 5404 	mla	r4, r3, r4, r5
   224ea:	7fa0      	ldrb	r0, [r4, #30]
   224ec:	28ff      	cmp	r0, #255	; 0xff
   224ee:	d0dc      	beq.n	224aa <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
   224f0:	f00a fcdd 	bl	2ceae <nrf_gpio_pin_set>
   224f4:	e7d9      	b.n	224aa <nrfx_spi_xfer+0x9a>
        return err_code;
   224f6:	4804      	ldr	r0, [pc, #16]	; (22508 <nrfx_spi_xfer+0xf8>)
   224f8:	e7b5      	b.n	22466 <nrfx_spi_xfer+0x56>
   224fa:	bf00      	nop
   224fc:	20004020 	.word	0x20004020
   22500:	0bad0003 	.word	0x0bad0003
   22504:	0bad0000 	.word	0x0bad0000
   22508:	0bad000b 	.word	0x0bad000b

0002250c <nrfx_spi_1_irq_handler>:
   2250c:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   22510:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   22512:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   22514:	490b      	ldr	r1, [pc, #44]	; (22544 <nrfx_spi_1_irq_handler+0x38>)
   22516:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   2251a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   2251e:	f00a fce0 	bl	2cee2 <transfer_byte>
   22522:	b968      	cbnz	r0, 22540 <nrfx_spi_1_irq_handler+0x34>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   22524:	7f88      	ldrb	r0, [r1, #30]
   22526:	28ff      	cmp	r0, #255	; 0xff
   22528:	d001      	beq.n	2252e <nrfx_spi_1_irq_handler+0x22>
        nrf_gpio_pin_set(p_cb->ss_pin);
   2252a:	f00a fcc0 	bl	2ceae <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   2252e:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   22530:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   22532:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   22534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   22538:	e9d1 3100 	ldrd	r3, r1, [r1]
   2253c:	4802      	ldr	r0, [pc, #8]	; (22548 <nrfx_spi_1_irq_handler+0x3c>)
   2253e:	4718      	bx	r3
}
   22540:	bd10      	pop	{r4, pc}
   22542:	bf00      	nop
   22544:	20004020 	.word	0x20004020
   22548:	20004028 	.word	0x20004028

0002254c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   2254c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   2254e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   22552:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22554:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   22556:	6002      	str	r2, [r0, #0]
}
   22558:	4802      	ldr	r0, [pc, #8]	; (22564 <nrf_gpio_pin_port_decode+0x18>)
   2255a:	bf18      	it	ne
   2255c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   22560:	4770      	bx	lr
   22562:	bf00      	nop
   22564:	50000300 	.word	0x50000300

00022568 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
   22568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2256c:	4d54      	ldr	r5, [pc, #336]	; (226c0 <nrfx_spim_init+0x158>)
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2256e:	7904      	ldrb	r4, [r0, #4]
{
   22570:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   22572:	2024      	movs	r0, #36	; 0x24
   22574:	fb00 5004 	mla	r0, r0, r4, r5
   22578:	7f00      	ldrb	r0, [r0, #28]
   2257a:	2800      	cmp	r0, #0
   2257c:	f040 809b 	bne.w	226b6 <nrfx_spim_init+0x14e>
        return err_code;
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // Check if SPIM instance supports the extended features.
    if (
   22580:	2c00      	cmp	r4, #0
   22582:	f040 809a 	bne.w	226ba <nrfx_spim_init+0x152>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif

    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   22586:	f8d8 4000 	ldr.w	r4, [r8]
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;
   2258a:	e9c5 2300 	strd	r2, r3, [r5]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPIM_MODE_1)
   2258e:	7b0b      	ldrb	r3, [r1, #12]
   22590:	7808      	ldrb	r0, [r1, #0]
   22592:	2b01      	cmp	r3, #1
   22594:	d87d      	bhi.n	22692 <nrfx_spim_init+0x12a>
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   22596:	f00a fcf2 	bl	2cf7e <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   2259a:	780b      	ldrb	r3, [r1, #0]
   2259c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2259e:	a801      	add	r0, sp, #4
   225a0:	f7ff ffd4 	bl	2254c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   225a4:	9b01      	ldr	r3, [sp, #4]
   225a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   225aa:	2201      	movs	r2, #1
   225ac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   225b0:	784e      	ldrb	r6, [r1, #1]
   225b2:	2eff      	cmp	r6, #255	; 0xff
   225b4:	d070      	beq.n	22698 <nrfx_spim_init+0x130>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   225b6:	4630      	mov	r0, r6
   225b8:	f00a fce1 	bl	2cf7e <nrf_gpio_pin_clear>
        nrf_gpio_cfg_output(mosi_pin);
   225bc:	4630      	mov	r0, r6
   225be:	f00a fcc3 	bl	2cf48 <nrf_gpio_cfg_output>
    else
    {
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   225c2:	788f      	ldrb	r7, [r1, #2]
   225c4:	2fff      	cmp	r7, #255	; 0xff
   225c6:	d06a      	beq.n	2269e <nrfx_spim_init+0x136>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   225c8:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   225ca:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   225ce:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   225d0:	f7ff ffbc 	bl	2254c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   225d4:	9b01      	ldr	r3, [sp, #4]
   225d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   225da:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   225de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).

    // 'p_cb->ss_pin' variable is used during transfers to check if SS pin should be toggled,
    // so this field needs to be initialized even if the pin is not used.
    p_cb->ss_pin = p_config->ss_pin;
   225e2:	78c8      	ldrb	r0, [r1, #3]
   225e4:	f885 0020 	strb.w	r0, [r5, #32]

    if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   225e8:	28ff      	cmp	r0, #255	; 0xff
   225ea:	d015      	beq.n	22618 <nrfx_spim_init+0xb0>
    {
        if (p_config->ss_active_high)
   225ec:	790b      	ldrb	r3, [r1, #4]
   225ee:	2b00      	cmp	r3, #0
   225f0:	d058      	beq.n	226a4 <nrfx_spim_init+0x13c>
        {
            nrf_gpio_pin_clear(p_config->ss_pin);
   225f2:	f00a fcc4 	bl	2cf7e <nrf_gpio_pin_clear>
        }
        else
        {
            nrf_gpio_pin_set(p_config->ss_pin);
        }
        nrf_gpio_cfg_output(p_config->ss_pin);
   225f6:	78c8      	ldrb	r0, [r1, #3]
   225f8:	f00a fca6 	bl	2cf48 <nrf_gpio_cfg_output>
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (p_config->use_hw_ss)
   225fc:	7c4a      	ldrb	r2, [r1, #17]
   225fe:	790b      	ldrb	r3, [r1, #4]
   22600:	b14a      	cbz	r2, 22616 <nrfx_spim_init+0xae>
        {
            p_cb->use_hw_ss = p_config->use_hw_ss;
   22602:	2201      	movs	r2, #1
   22604:	77aa      	strb	r2, [r5, #30]
            nrf_spim_csn_configure(p_spim,
   22606:	78c8      	ldrb	r0, [r1, #3]
   22608:	7c8a      	ldrb	r2, [r1, #18]
    p_reg->PSEL.CSN = pin;
   2260a:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   2260e:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   22612:	f8c4 2564 	str.w	r2, [r4, #1380]	; 0x564
                                   (p_config->ss_active_high == true ?
                                        NRF_SPIM_CSN_POL_HIGH : NRF_SPIM_CSN_POL_LOW),
                                   p_config->ss_duration);
        }
#endif
        p_cb->ss_active_high = p_config->ss_active_high;
   22616:	77eb      	strb	r3, [r5, #31]
    }

#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    // - DCX (optional) - output.
    if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   22618:	7bc8      	ldrb	r0, [r1, #15]
   2261a:	28ff      	cmp	r0, #255	; 0xff
   2261c:	d007      	beq.n	2262e <nrfx_spim_init+0xc6>
    {
        nrf_gpio_pin_set(p_config->dcx_pin);
   2261e:	f00a fca1 	bl	2cf64 <nrf_gpio_pin_set>
        nrf_gpio_cfg_output(p_config->dcx_pin);
   22622:	7bc8      	ldrb	r0, [r1, #15]
   22624:	f00a fc90 	bl	2cf48 <nrf_gpio_cfg_output>
        nrf_spim_dcx_pin_set(p_spim, p_config->dcx_pin);
   22628:	7bcb      	ldrb	r3, [r1, #15]
    p_reg->PSELDCX = dcx_pin;
   2262a:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
    }

    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   2262e:	7c0b      	ldrb	r3, [r1, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
   22630:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
#endif


    nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   22634:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK  = sck_pin;
   22636:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   2263a:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   2263c:	f8c4 650c 	str.w	r6, [r4, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   22640:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   22644:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   22648:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   2264a:	7b0a      	ldrb	r2, [r1, #12]
   2264c:	3b00      	subs	r3, #0
   2264e:	bf18      	it	ne
   22650:	2301      	movne	r3, #1
    switch (spi_mode)
   22652:	2a02      	cmp	r2, #2
   22654:	d029      	beq.n	226aa <nrfx_spim_init+0x142>
   22656:	2a03      	cmp	r2, #3
   22658:	d02a      	beq.n	226b0 <nrfx_spim_init+0x148>
   2265a:	2a01      	cmp	r2, #1
   2265c:	d101      	bne.n	22662 <nrfx_spim_init+0xfa>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   2265e:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   22662:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   22666:	798b      	ldrb	r3, [r1, #6]
   22668:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   2266c:	2307      	movs	r3, #7
   2266e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
   22672:	682b      	ldr	r3, [r5, #0]
   22674:	b12b      	cbz	r3, 22682 <nrfx_spim_init+0x11a>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   22676:	f8d8 0000 	ldr.w	r0, [r8]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2267a:	f340 3007 	sbfx	r0, r0, #12, #8
   2267e:	f7e3 ff49 	bl	6514 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   22682:	2300      	movs	r3, #0
   22684:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   22686:	480f      	ldr	r0, [pc, #60]	; (226c4 <nrfx_spim_init+0x15c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22688:	2301      	movs	r3, #1
   2268a:	772b      	strb	r3, [r5, #28]
}
   2268c:	b003      	add	sp, #12
   2268e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   22692:	f00a fc67 	bl	2cf64 <nrf_gpio_pin_set>
   22696:	e780      	b.n	2259a <nrfx_spim_init+0x32>
        mosi_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   22698:	f04f 36ff 	mov.w	r6, #4294967295
   2269c:	e791      	b.n	225c2 <nrfx_spim_init+0x5a>
        miso_pin = NRF_SPIM_PIN_NOT_CONNECTED;
   2269e:	f04f 37ff 	mov.w	r7, #4294967295
   226a2:	e79e      	b.n	225e2 <nrfx_spim_init+0x7a>
            nrf_gpio_pin_set(p_config->ss_pin);
   226a4:	f00a fc5e 	bl	2cf64 <nrf_gpio_pin_set>
   226a8:	e7a5      	b.n	225f6 <nrfx_spim_init+0x8e>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   226aa:	f043 0304 	orr.w	r3, r3, #4
        break;
   226ae:	e7d8      	b.n	22662 <nrfx_spim_init+0xfa>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   226b0:	f043 0306 	orr.w	r3, r3, #6
        break;
   226b4:	e7d5      	b.n	22662 <nrfx_spim_init+0xfa>
        return err_code;
   226b6:	4804      	ldr	r0, [pc, #16]	; (226c8 <nrfx_spim_init+0x160>)
   226b8:	e7e8      	b.n	2268c <nrfx_spim_init+0x124>
        return err_code;
   226ba:	4804      	ldr	r0, [pc, #16]	; (226cc <nrfx_spim_init+0x164>)
   226bc:	e7e6      	b.n	2268c <nrfx_spim_init+0x124>
   226be:	bf00      	nop
   226c0:	20004048 	.word	0x20004048
   226c4:	0bad0000 	.word	0x0bad0000
   226c8:	0bad0005 	.word	0x0bad0005
   226cc:	0bad0003 	.word	0x0bad0003

000226d0 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   226d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   226d4:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   226d6:	4f44      	ldr	r7, [pc, #272]	; (227e8 <nrfx_spim_xfer+0x118>)
   226d8:	2324      	movs	r3, #36	; 0x24
   226da:	4373      	muls	r3, r6
{
   226dc:	4614      	mov	r4, r2
    if (p_cb->transfer_in_progress)
   226de:	18fa      	adds	r2, r7, r3
{
   226e0:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
   226e2:	7f51      	ldrb	r1, [r2, #29]
{
   226e4:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
   226e6:	2900      	cmp	r1, #0
   226e8:	d17c      	bne.n	227e4 <nrfx_spim_xfer+0x114>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   226ea:	58fb      	ldr	r3, [r7, r3]
   226ec:	b123      	cbz	r3, 226f8 <nrfx_spim_xfer+0x28>
   226ee:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
   226f2:	bf04      	itt	eq
   226f4:	2301      	moveq	r3, #1
   226f6:	7753      	strbeq	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   226f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   226fc:	f04f 0c24 	mov.w	ip, #36	; 0x24
   22700:	fb0c 7c06 	mla	ip, ip, r6, r7
   22704:	f10c 0e0c 	add.w	lr, ip, #12
   22708:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}

    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2270c:	f89c 0020 	ldrb.w	r0, [ip, #32]
   22710:	28ff      	cmp	r0, #255	; 0xff
   22712:	d007      	beq.n	22724 <nrfx_spim_xfer+0x54>
    {
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
        if (!p_cb->use_hw_ss)
   22714:	f89c 301e 	ldrb.w	r3, [ip, #30]
   22718:	b923      	cbnz	r3, 22724 <nrfx_spim_xfer+0x54>
#endif
        {
            if (p_cb->ss_active_high)
   2271a:	f89c 301f 	ldrb.w	r3, [ip, #31]
   2271e:	b1bb      	cbz	r3, 22750 <nrfx_spim_xfer+0x80>
            {
                nrf_gpio_pin_set(p_cb->ss_pin);
   22720:	f00a fc20 	bl	2cf64 <nrf_gpio_pin_set>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   22724:	6829      	ldr	r1, [r5, #0]
   22726:	b121      	cbz	r1, 22732 <nrfx_spim_xfer+0x62>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   22728:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
   2272c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22730:	d106      	bne.n	22740 <nrfx_spim_xfer+0x70>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   22732:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   22734:	b17a      	cbz	r2, 22756 <nrfx_spim_xfer+0x86>
   22736:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2273a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2273e:	d00a      	beq.n	22756 <nrfx_spim_xfer+0x86>
        p_cb->transfer_in_progress = false;
   22740:	2324      	movs	r3, #36	; 0x24
   22742:	fb03 7606 	mla	r6, r3, r6, r7
        return err_code;
   22746:	4829      	ldr	r0, [pc, #164]	; (227ec <nrfx_spim_xfer+0x11c>)
        p_cb->transfer_in_progress = false;
   22748:	2300      	movs	r3, #0
   2274a:	7773      	strb	r3, [r6, #29]
            }
        }
    }

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
   2274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                nrf_gpio_pin_clear(p_cb->ss_pin);
   22750:	f00a fc15 	bl	2cf7e <nrf_gpio_pin_clear>
   22754:	e7e6      	b.n	22724 <nrfx_spim_xfer+0x54>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   22756:	f8d8 3000 	ldr.w	r3, [r8]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   2275a:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2275c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   22760:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
   22762:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22766:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2276a:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
   2276c:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22770:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   22774:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   22778:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   2277c:	bf18      	it	ne
   2277e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   22780:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   22784:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   22788:	bf18      	it	ne
   2278a:	2201      	movne	r2, #1
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2278c:	f014 0108 	ands.w	r1, r4, #8
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   22790:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22794:	bf04      	itt	eq
   22796:	2201      	moveq	r2, #1
   22798:	611a      	streq	r2, [r3, #16]
    if (!p_cb->handler)
   2279a:	2224      	movs	r2, #36	; 0x24
   2279c:	4372      	muls	r2, r6
   2279e:	58ba      	ldr	r2, [r7, r2]
   227a0:	b9b2      	cbnz	r2, 227d0 <nrfx_spim_xfer+0x100>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   227a2:	b919      	cbnz	r1, 227ac <nrfx_spim_xfer+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227a4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   227a8:	2a00      	cmp	r2, #0
   227aa:	d0fb      	beq.n	227a4 <nrfx_spim_xfer+0xd4>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   227ac:	2324      	movs	r3, #36	; 0x24
   227ae:	fb03 7606 	mla	r6, r3, r6, r7
   227b2:	f896 0020 	ldrb.w	r0, [r6, #32]
   227b6:	28ff      	cmp	r0, #255	; 0xff
   227b8:	d005      	beq.n	227c6 <nrfx_spim_xfer+0xf6>
            if (!p_cb->use_hw_ss)
   227ba:	7fb3      	ldrb	r3, [r6, #30]
   227bc:	b91b      	cbnz	r3, 227c6 <nrfx_spim_xfer+0xf6>
                if (p_cb->ss_active_high)
   227be:	7ff3      	ldrb	r3, [r6, #31]
   227c0:	b11b      	cbz	r3, 227ca <nrfx_spim_xfer+0xfa>
                    nrf_gpio_pin_clear(p_cb->ss_pin);
   227c2:	f00a fbdc 	bl	2cf7e <nrf_gpio_pin_clear>
    return err_code;
   227c6:	480a      	ldr	r0, [pc, #40]	; (227f0 <nrfx_spim_xfer+0x120>)
   227c8:	e7c0      	b.n	2274c <nrfx_spim_xfer+0x7c>
                    nrf_gpio_pin_set(p_cb->ss_pin);
   227ca:	f00a fbcb 	bl	2cf64 <nrf_gpio_pin_set>
   227ce:	e7fa      	b.n	227c6 <nrfx_spim_xfer+0xf6>
    if (!enable)
   227d0:	f014 0f04 	tst.w	r4, #4
   227d4:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
   227d8:	bf14      	ite	ne
   227da:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
   227de:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
   227e2:	e7f0      	b.n	227c6 <nrfx_spim_xfer+0xf6>
        return err_code;
   227e4:	4803      	ldr	r0, [pc, #12]	; (227f4 <nrfx_spim_xfer+0x124>)
   227e6:	e7b1      	b.n	2274c <nrfx_spim_xfer+0x7c>
   227e8:	20004048 	.word	0x20004048
   227ec:	0bad000a 	.word	0x0bad000a
   227f0:	0bad0000 	.word	0x0bad0000
   227f4:	0bad000b 	.word	0x0bad000b

000227f8 <nrfx_spim_3_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   227f8:	4b10      	ldr	r3, [pc, #64]	; (2283c <nrfx_spim_3_irq_handler+0x44>)
   227fa:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
}
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   227fe:	b510      	push	{r4, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   22800:	b1da      	cbz	r2, 2283a <nrfx_spim_3_irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   22802:	490f      	ldr	r1, [pc, #60]	; (22840 <nrfx_spim_3_irq_handler+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22804:	2200      	movs	r2, #0
   22806:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   2280a:	f891 0020 	ldrb.w	r0, [r1, #32]
   2280e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
   22812:	28ff      	cmp	r0, #255	; 0xff
   22814:	d005      	beq.n	22822 <nrfx_spim_3_irq_handler+0x2a>
        if (!p_cb->use_hw_ss)
   22816:	7f8b      	ldrb	r3, [r1, #30]
   22818:	b91b      	cbnz	r3, 22822 <nrfx_spim_3_irq_handler+0x2a>
            if (p_cb->ss_active_high)
   2281a:	7fcb      	ldrb	r3, [r1, #31]
   2281c:	b153      	cbz	r3, 22834 <nrfx_spim_3_irq_handler+0x3c>
                nrf_gpio_pin_clear(p_cb->ss_pin);
   2281e:	f00a fbae 	bl	2cf7e <nrf_gpio_pin_clear>
    p_cb->transfer_in_progress = false;
   22822:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   22824:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   22826:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
}
   22828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   2282c:	e9d1 3100 	ldrd	r3, r1, [r1]
   22830:	4804      	ldr	r0, [pc, #16]	; (22844 <nrfx_spim_3_irq_handler+0x4c>)
   22832:	4718      	bx	r3
                nrf_gpio_pin_set(p_cb->ss_pin);
   22834:	f00a fb96 	bl	2cf64 <nrf_gpio_pin_set>
   22838:	e7f3      	b.n	22822 <nrfx_spim_3_irq_handler+0x2a>
}
   2283a:	bd10      	pop	{r4, pc}
   2283c:	4002f000 	.word	0x4002f000
   22840:	20004048 	.word	0x20004048
   22844:	20004050 	.word	0x20004050

00022848 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   22848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   2284c:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2284e:	4d27      	ldr	r5, [pc, #156]	; (228ec <nrfx_twim_init+0xa4>)
   22850:	f04f 0c34 	mov.w	ip, #52	; 0x34
   22854:	fb0c fc06 	mul.w	ip, ip, r6
   22858:	eb05 040c 	add.w	r4, r5, ip
   2285c:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   22860:	2f00      	cmp	r7, #0
   22862:	d140      	bne.n	228e6 <nrfx_twim_init+0x9e>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   22864:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   22866:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   2286a:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
   2286e:	680f      	ldr	r7, [r1, #0]
    p_cb->p_context       = p_context;
   22870:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   22872:	7b4b      	ldrb	r3, [r1, #13]
   22874:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->handler         = event_handler;
   22878:	f845 200c 	str.w	r2, [r5, ip]
        case 1: return NRF_P1;
   2287c:	4b1c      	ldr	r3, [pc, #112]	; (228f0 <nrfx_twim_init+0xa8>)
    TWIM_PIN_INIT(p_config->sda);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   2287e:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   22880:	ea4f 1c57 	mov.w	ip, r7, lsr #5
        case 1: return NRF_P1;
   22884:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   22888:	f007 041f 	and.w	r4, r7, #31
        case 1: return NRF_P1;
   2288c:	bf0c      	ite	eq
   2288e:	469c      	moveq	ip, r3
   22890:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   22894:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   22898:	f240 6e0c 	movw	lr, #1548	; 0x60c
   2289c:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
   228a0:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   228a2:	ea4f 1854 	mov.w	r8, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   228a6:	f004 0c1f 	and.w	ip, r4, #31
        case 1: return NRF_P1;
   228aa:	f1b8 0f01 	cmp.w	r8, #1
   228ae:	bf18      	it	ne
   228b0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   228b4:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   228b8:	f843 e02c 	str.w	lr, [r3, ip, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   228bc:	688b      	ldr	r3, [r1, #8]

NRF_STATIC_INLINE void nrf_twim_pins_set(NRF_TWIM_Type * p_reg,
                                         uint32_t scl_pin,
                                         uint32_t sda_pin)
{
    p_reg->PSEL.SCL = scl_pin;
   228be:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   228c2:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   228c6:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   228ca:	b11a      	cbz	r2, 228d4 <nrfx_twim_init+0x8c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   228cc:	f340 3007 	sbfx	r0, r0, #12, #8
   228d0:	f7e3 fe20 	bl	6514 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   228d4:	2334      	movs	r3, #52	; 0x34
   228d6:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   228da:	4806      	ldr	r0, [pc, #24]	; (228f4 <nrfx_twim_init+0xac>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   228dc:	2301      	movs	r3, #1
   228de:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   228e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   228e6:	4804      	ldr	r0, [pc, #16]	; (228f8 <nrfx_twim_init+0xb0>)
   228e8:	e7fb      	b.n	228e2 <nrfx_twim_init+0x9a>
   228ea:	bf00      	nop
   228ec:	2000406c 	.word	0x2000406c
   228f0:	50000300 	.word	0x50000300
   228f4:	0bad0000 	.word	0x0bad0000
   228f8:	0bad0005 	.word	0x0bad0005

000228fc <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   228fc:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   228fe:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   22900:	2106      	movs	r1, #6
   22902:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   22906:	4a04      	ldr	r2, [pc, #16]	; (22918 <nrfx_twim_enable+0x1c>)
   22908:	2134      	movs	r1, #52	; 0x34
   2290a:	fb01 2303 	mla	r3, r1, r3, r2
   2290e:	2202      	movs	r2, #2
   22910:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   22914:	4770      	bx	lr
   22916:	bf00      	nop
   22918:	2000406c 	.word	0x2000406c

0002291c <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2291c:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   2291e:	490b      	ldr	r1, [pc, #44]	; (2294c <nrfx_twim_disable+0x30>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   22920:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   22922:	2034      	movs	r0, #52	; 0x34
   22924:	fb00 1303 	mla	r3, r0, r3, r1
    p_reg->INTENCLR = mask;
   22928:	4909      	ldr	r1, [pc, #36]	; (22950 <nrfx_twim_disable+0x34>)
   2292a:	2000      	movs	r0, #0
   2292c:	6098      	str	r0, [r3, #8]
   2292e:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   22932:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   22936:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
   2293a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2293e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   22942:	2201      	movs	r2, #1
   22944:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   22948:	4770      	bx	lr
   2294a:	bf00      	nop
   2294c:	2000406c 	.word	0x2000406c
   22950:	019c0202 	.word	0x019c0202

00022954 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   22954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   22958:	4fb0      	ldr	r7, [pc, #704]	; (22c1c <nrfx_twim_xfer+0x2c8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2295a:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   2295e:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   22960:	2634      	movs	r6, #52	; 0x34
   22962:	fb06 760e 	mla	r6, r6, lr, r7
   22966:	2300      	movs	r3, #0
   22968:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   2296c:	68cb      	ldr	r3, [r1, #12]
   2296e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   22972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   22976:	460d      	mov	r5, r1
   22978:	4694      	mov	ip, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   2297a:	d003      	beq.n	22984 <nrfx_twim_xfer+0x30>
        return err_code;
   2297c:	4ea8      	ldr	r6, [pc, #672]	; (22c20 <nrfx_twim_xfer+0x2cc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2297e:	4630      	mov	r0, r6
   22980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
   22984:	4ba7      	ldr	r3, [pc, #668]	; (22c24 <nrfx_twim_xfer+0x2d0>)
   22986:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   2298a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   2298e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   22992:	b123      	cbz	r3, 2299e <nrfx_twim_xfer+0x4a>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22994:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   22996:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   2299a:	4ea3      	ldr	r6, [pc, #652]	; (22c28 <nrfx_twim_xfer+0x2d4>)
   2299c:	e7ef      	b.n	2297e <nrfx_twim_xfer+0x2a>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   2299e:	f012 0f14 	tst.w	r2, #20
   229a2:	bf0c      	ite	eq
   229a4:	2301      	moveq	r3, #1
   229a6:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   229a8:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   229ac:	4689      	mov	r9, r1
   229ae:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   229b2:	f106 080c 	add.w	r8, r6, #12
   229b6:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   229ba:	f8d9 3000 	ldr.w	r3, [r9]
   229be:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   229c2:	f3cc 1300 	ubfx	r3, ip, #4, #1
   229c6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   229ca:	f8c6 c020 	str.w	ip, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   229ce:	786b      	ldrb	r3, [r5, #1]
   229d0:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   229d4:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   229d8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   229dc:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   229e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   229e4:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   229e8:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   229ec:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   229f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   229f4:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   229f8:	bf18      	it	ne
   229fa:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   229fc:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   22a00:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   22a04:	bf18      	it	ne
   22a06:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   22a08:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   22a0c:	782b      	ldrb	r3, [r5, #0]
   22a0e:	2b03      	cmp	r3, #3
   22a10:	f200 80b2 	bhi.w	22b78 <nrfx_twim_xfer+0x224>
   22a14:	e8df f003 	tbb	[pc, r3]
   22a18:	02669d81 	.word	0x02669d81
   22a1c:	692a      	ldr	r2, [r5, #16]
   22a1e:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   22a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   22a26:	d1a9      	bne.n	2297c <nrfx_twim_xfer+0x28>
    p_reg->SHORTS = mask;
   22a28:	f44f 7380 	mov.w	r3, #256	; 0x100
   22a2c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22a30:	68e9      	ldr	r1, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22a32:	686b      	ldr	r3, [r5, #4]
   22a34:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22a38:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a3c:	2300      	movs	r3, #0
   22a3e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   22a42:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a46:	2101      	movs	r1, #1
   22a48:	6221      	str	r1, [r4, #32]
   22a4a:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a4c:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   22a50:	2900      	cmp	r1, #0
   22a52:	d0fb      	beq.n	22a4c <nrfx_twim_xfer+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22a54:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   22a58:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   22a5c:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22a5e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22a62:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   22a66:	2334      	movs	r3, #52	; 0x34
   22a68:	fb03 730e 	mla	r3, r3, lr, r7
   22a6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   22a70:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   22a72:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   22a74:	4e6d      	ldr	r6, [pc, #436]	; (22c2c <nrfx_twim_xfer+0x2d8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   22a76:	f01c 0f08 	tst.w	ip, #8
   22a7a:	d104      	bne.n	22a86 <nrfx_twim_xfer+0x132>
   22a7c:	782a      	ldrb	r2, [r5, #0]
   22a7e:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22a80:	bf1c      	itt	ne
   22a82:	2201      	movne	r2, #1
   22a84:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
   22a86:	2334      	movs	r3, #52	; 0x34
   22a88:	fb03 f30e 	mul.w	r3, r3, lr
   22a8c:	18fa      	adds	r2, r7, r3
   22a8e:	58fb      	ldr	r3, [r7, r3]
   22a90:	2b00      	cmp	r3, #0
   22a92:	d174      	bne.n	22b7e <nrfx_twim_xfer+0x22a>
                transmission_finished = true;
   22a94:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22a96:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   22a9a:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22a9e:	2900      	cmp	r1, #0
   22aa0:	f040 8087 	bne.w	22bb2 <nrfx_twim_xfer+0x25e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   22aa4:	3a00      	subs	r2, #0
   22aa6:	bf18      	it	ne
   22aa8:	2201      	movne	r2, #1
   22aaa:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22aae:	2900      	cmp	r1, #0
   22ab0:	f000 8085 	beq.w	22bbe <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22ab4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   22ab8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22abc:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   22ac0:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   22ac4:	b110      	cbz	r0, 22acc <nrfx_twim_xfer+0x178>
   22ac6:	f411 7f00 	tst.w	r1, #512	; 0x200
   22aca:	d104      	bne.n	22ad6 <nrfx_twim_xfer+0x182>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22acc:	6225      	str	r5, [r4, #32]
   22ace:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   22ad0:	2800      	cmp	r0, #0
   22ad2:	d0e0      	beq.n	22a96 <nrfx_twim_xfer+0x142>
                    transmission_finished = false;
   22ad4:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   22ad6:	05c9      	lsls	r1, r1, #23
   22ad8:	d571      	bpl.n	22bbe <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22ada:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   22ade:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   22ae2:	e7d8      	b.n	22a96 <nrfx_twim_xfer+0x142>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22ae4:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22ae6:	68ea      	ldr	r2, [r5, #12]
   22ae8:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22aec:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   22af0:	692b      	ldr	r3, [r5, #16]
   22af2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   22af6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   22afa:	f47f af3f 	bne.w	2297c <nrfx_twim_xfer+0x28>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   22afe:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22b00:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   22b04:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   22b08:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   22b0c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22b10:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22b12:	fb03 730e 	mla	r3, r3, lr, r7
   22b16:	2202      	movs	r2, #2
   22b18:	e012      	b.n	22b40 <nrfx_twim_xfer+0x1ec>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22b1a:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22b1c:	68ea      	ldr	r2, [r5, #12]
   22b1e:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   22b22:	f01c 0f20 	tst.w	ip, #32
    p_reg->TXD.MAXCNT = length;
   22b26:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   22b2a:	f04f 0334 	mov.w	r3, #52	; 0x34
   22b2e:	d00b      	beq.n	22b48 <nrfx_twim_xfer+0x1f4>
    p_reg->SHORTS = mask;
   22b30:	f44f 7280 	mov.w	r2, #256	; 0x100
   22b34:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   22b38:	fb03 730e 	mla	r3, r3, lr, r7
   22b3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22b40:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22b42:	2301      	movs	r3, #1
   22b44:	6223      	str	r3, [r4, #32]
   22b46:	e794      	b.n	22a72 <nrfx_twim_xfer+0x11e>
    p_reg->SHORTS = mask;
   22b48:	f44f 7200 	mov.w	r2, #512	; 0x200
   22b4c:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   22b50:	e7df      	b.n	22b12 <nrfx_twim_xfer+0x1be>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   22b52:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22b54:	68ea      	ldr	r2, [r5, #12]
   22b56:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22b5a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   22b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   22b62:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22b66:	2334      	movs	r3, #52	; 0x34
   22b68:	fb03 730e 	mla	r3, r3, lr, r7
   22b6c:	2202      	movs	r2, #2
   22b6e:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22b70:	2301      	movs	r3, #1
   22b72:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   22b74:	2300      	movs	r3, #0
   22b76:	e77d      	b.n	22a74 <nrfx_twim_xfer+0x120>
    switch (p_xfer_desc->type)
   22b78:	4e2d      	ldr	r6, [pc, #180]	; (22c30 <nrfx_twim_xfer+0x2dc>)
   22b7a:	2308      	movs	r3, #8
   22b7c:	e77b      	b.n	22a76 <nrfx_twim_xfer+0x122>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   22b7e:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
   22b82:	bf1c      	itt	ne
   22b84:	2300      	movne	r3, #0
   22b86:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   22b88:	f01c 0f40 	tst.w	ip, #64	; 0x40
   22b8c:	d106      	bne.n	22b9c <nrfx_twim_xfer+0x248>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   22b8e:	2334      	movs	r3, #52	; 0x34
   22b90:	fb03 730e 	mla	r3, r3, lr, r7
   22b94:	689a      	ldr	r2, [r3, #8]
   22b96:	f042 0202 	orr.w	r2, r2, #2
   22b9a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   22b9c:	2334      	movs	r3, #52	; 0x34
   22b9e:	fb03 770e 	mla	r7, r3, lr, r7
   22ba2:	68bb      	ldr	r3, [r7, #8]
   22ba4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   22ba8:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22baa:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   22bac:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   22bb0:	e6e5      	b.n	2297e <nrfx_twim_xfer+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22bb2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   22bb6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   22bba:	2201      	movs	r2, #1
   22bbc:	e775      	b.n	22aaa <nrfx_twim_xfer+0x156>
        } while (!transmission_finished);
   22bbe:	2a00      	cmp	r2, #0
   22bc0:	f43f af69 	beq.w	22a96 <nrfx_twim_xfer+0x142>
        p_cb->busy = false;
   22bc4:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   22bc6:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   22bca:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   22bce:	fb01 720e 	mla	r2, r1, lr, r7
   22bd2:	2000      	movs	r0, #0
   22bd4:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   22bd8:	b18b      	cbz	r3, 22bfe <nrfx_twim_xfer+0x2aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   22bda:	4a16      	ldr	r2, [pc, #88]	; (22c34 <nrfx_twim_xfer+0x2e0>)
   22bdc:	4e16      	ldr	r6, [pc, #88]	; (22c38 <nrfx_twim_xfer+0x2e4>)
   22bde:	f013 0f01 	tst.w	r3, #1
   22be2:	bf18      	it	ne
   22be4:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   22be6:	f013 0f02 	tst.w	r3, #2
   22bea:	f102 0201 	add.w	r2, r2, #1
   22bee:	bf18      	it	ne
   22bf0:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   22bf2:	f013 0f04 	tst.w	r3, #4
   22bf6:	4b11      	ldr	r3, [pc, #68]	; (22c3c <nrfx_twim_xfer+0x2e8>)
   22bf8:	bf18      	it	ne
   22bfa:	461e      	movne	r6, r3
   22bfc:	e6bf      	b.n	2297e <nrfx_twim_xfer+0x2a>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   22bfe:	f01c 0f40 	tst.w	ip, #64	; 0x40
   22c02:	f47f aebc 	bne.w	2297e <nrfx_twim_xfer+0x2a>
                !xfer_completeness_check(p_twim, p_cb))
   22c06:	fb0e 7101 	mla	r1, lr, r1, r7
   22c0a:	4620      	mov	r0, r4
   22c0c:	f00a f9c4 	bl	2cf98 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   22c10:	4b09      	ldr	r3, [pc, #36]	; (22c38 <nrfx_twim_xfer+0x2e4>)
   22c12:	2800      	cmp	r0, #0
   22c14:	bf08      	it	eq
   22c16:	461e      	moveq	r6, r3
   22c18:	e6b1      	b.n	2297e <nrfx_twim_xfer+0x2a>
   22c1a:	bf00      	nop
   22c1c:	2000406c 	.word	0x2000406c
   22c20:	0bad000a 	.word	0x0bad000a
   22c24:	019c0202 	.word	0x019c0202
   22c28:	0bad000b 	.word	0x0bad000b
   22c2c:	0bad0000 	.word	0x0bad0000
   22c30:	0bad0004 	.word	0x0bad0004
   22c34:	0bae0000 	.word	0x0bae0000
   22c38:	0bad0001 	.word	0x0bad0001
   22c3c:	0bae0002 	.word	0x0bae0002

00022c40 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   22c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c42:	4b5b      	ldr	r3, [pc, #364]	; (22db0 <nrfx_twim_0_irq_handler+0x170>)
   22c44:	4c5b      	ldr	r4, [pc, #364]	; (22db4 <nrfx_twim_0_irq_handler+0x174>)
   22c46:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   22c4a:	b087      	sub	sp, #28
   22c4c:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   22c4e:	b1fa      	cbz	r2, 22c90 <nrfx_twim_0_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22c50:	2200      	movs	r2, #0
   22c52:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   22c56:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22c5e:	b9ba      	cbnz	r2, 22c90 <nrfx_twim_0_irq_handler+0x50>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   22c60:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   22c62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   22c66:	2202      	movs	r2, #2
   22c68:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22c6a:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   22c6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c70:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   22c74:	b11a      	cbz	r2, 22c7e <nrfx_twim_0_irq_handler+0x3e>
    return p_reg->SHORTS;
   22c76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   22c7a:	059e      	lsls	r6, r3, #22
   22c7c:	d403      	bmi.n	22c86 <nrfx_twim_0_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22c7e:	4b4c      	ldr	r3, [pc, #304]	; (22db0 <nrfx_twim_0_irq_handler+0x170>)
   22c80:	2201      	movs	r2, #1
   22c82:	621a      	str	r2, [r3, #32]
   22c84:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   22c86:	2301      	movs	r3, #1
   22c88:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
   22c8c:	b007      	add	sp, #28
   22c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c90:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   22c94:	2b00      	cmp	r3, #0
   22c96:	d053      	beq.n	22d40 <nrfx_twim_0_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22c98:	2300      	movs	r3, #0
   22c9a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   22c9e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   22ca2:	6a23      	ldr	r3, [r4, #32]
   22ca4:	065d      	lsls	r5, r3, #25
   22ca6:	d40a      	bmi.n	22cbe <nrfx_twim_0_irq_handler+0x7e>
   22ca8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22cac:	b93b      	cbnz	r3, 22cbe <nrfx_twim_0_irq_handler+0x7e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   22cae:	4941      	ldr	r1, [pc, #260]	; (22db4 <nrfx_twim_0_irq_handler+0x174>)
   22cb0:	483f      	ldr	r0, [pc, #252]	; (22db0 <nrfx_twim_0_irq_handler+0x170>)
   22cb2:	f00a f971 	bl	2cf98 <xfer_completeness_check>
   22cb6:	f080 0001 	eor.w	r0, r0, #1
   22cba:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   22cbe:	6a23      	ldr	r3, [r4, #32]
   22cc0:	f013 0704 	ands.w	r7, r3, #4
   22cc4:	d121      	bne.n	22d0a <nrfx_twim_0_irq_handler+0xca>
            event.xfer_desc = p_cb->xfer_desc;
   22cc6:	4e3c      	ldr	r6, [pc, #240]	; (22db8 <nrfx_twim_0_irq_handler+0x178>)
   22cc8:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   22ccc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   22cce:	ad01      	add	r5, sp, #4
   22cd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   22cd2:	6833      	ldr	r3, [r6, #0]
   22cd4:	602b      	str	r3, [r5, #0]
   22cd6:	4b36      	ldr	r3, [pc, #216]	; (22db0 <nrfx_twim_0_irq_handler+0x170>)
   22cd8:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   22cdc:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   22ce0:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   22ce4:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   22ce8:	f1bc 0f00 	cmp.w	ip, #0
   22cec:	d002      	beq.n	22cf4 <nrfx_twim_0_irq_handler+0xb4>
   22cee:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   22cf2:	b152      	cbz	r2, 22d0a <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   22cf4:	2200      	movs	r2, #0
   22cf6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   22cfa:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   22cfc:	4a2f      	ldr	r2, [pc, #188]	; (22dbc <nrfx_twim_0_irq_handler+0x17c>)
   22cfe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22d02:	4b2f      	ldr	r3, [pc, #188]	; (22dc0 <nrfx_twim_0_irq_handler+0x180>)
   22d04:	2208      	movs	r2, #8
   22d06:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   22d0a:	4a29      	ldr	r2, [pc, #164]	; (22db0 <nrfx_twim_0_irq_handler+0x170>)
   22d0c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   22d10:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   22d14:	0798      	lsls	r0, r3, #30
   22d16:	d53c      	bpl.n	22d92 <nrfx_twim_0_irq_handler+0x152>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   22d18:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   22d1a:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   22d1e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22d22:	b90b      	cbnz	r3, 22d28 <nrfx_twim_0_irq_handler+0xe8>
        p_cb->busy = false;
   22d24:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   22d28:	6a23      	ldr	r3, [r4, #32]
   22d2a:	075b      	lsls	r3, r3, #29
   22d2c:	d503      	bpl.n	22d36 <nrfx_twim_0_irq_handler+0xf6>
   22d2e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22d32:	2b00      	cmp	r3, #0
   22d34:	d0aa      	beq.n	22c8c <nrfx_twim_0_irq_handler+0x4c>
        p_cb->handler(&event, p_cb->p_context);
   22d36:	e9d4 3100 	ldrd	r3, r1, [r4]
   22d3a:	4668      	mov	r0, sp
   22d3c:	4798      	blx	r3
}
   22d3e:	e7a5      	b.n	22c8c <nrfx_twim_0_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22d40:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   22d44:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   22d48:	7b23      	ldrb	r3, [r4, #12]
   22d4a:	b983      	cbnz	r3, 22d6e <nrfx_twim_0_irq_handler+0x12e>
            event.xfer_desc = p_cb->xfer_desc;
   22d4c:	4f1a      	ldr	r7, [pc, #104]	; (22db8 <nrfx_twim_0_irq_handler+0x178>)
   22d4e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   22d50:	ae01      	add	r6, sp, #4
   22d52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   22d54:	683b      	ldr	r3, [r7, #0]
   22d56:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   22d58:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   22d5c:	2b00      	cmp	r3, #0
   22d5e:	d1d4      	bne.n	22d0a <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   22d60:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   22d64:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22d66:	4b15      	ldr	r3, [pc, #84]	; (22dbc <nrfx_twim_0_irq_handler+0x17c>)
   22d68:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   22d6c:	e7c9      	b.n	22d02 <nrfx_twim_0_irq_handler+0xc2>
    p_reg->SHORTS = mask;
   22d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
   22d72:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   22d76:	f240 2302 	movw	r3, #514	; 0x202
   22d7a:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   22d7c:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   22d80:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   22d84:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   22d86:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22d8a:	2301      	movs	r3, #1
   22d8c:	60ab      	str	r3, [r5, #8]
   22d8e:	622b      	str	r3, [r5, #32]
            return;
   22d90:	e77c      	b.n	22c8c <nrfx_twim_0_irq_handler+0x4c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   22d92:	0759      	lsls	r1, r3, #29
   22d94:	d501      	bpl.n	22d9a <nrfx_twim_0_irq_handler+0x15a>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   22d96:	2302      	movs	r3, #2
   22d98:	e7bf      	b.n	22d1a <nrfx_twim_0_irq_handler+0xda>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   22d9a:	07da      	lsls	r2, r3, #31
   22d9c:	d501      	bpl.n	22da2 <nrfx_twim_0_irq_handler+0x162>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   22d9e:	2303      	movs	r3, #3
   22da0:	e7bb      	b.n	22d1a <nrfx_twim_0_irq_handler+0xda>
    else if (p_cb->error)
   22da2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   22da6:	2b00      	cmp	r3, #0
   22da8:	d0b7      	beq.n	22d1a <nrfx_twim_0_irq_handler+0xda>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   22daa:	2304      	movs	r3, #4
   22dac:	e7b5      	b.n	22d1a <nrfx_twim_0_irq_handler+0xda>
   22dae:	bf00      	nop
   22db0:	40003000 	.word	0x40003000
   22db4:	2000406c 	.word	0x2000406c
   22db8:	20004078 	.word	0x20004078
   22dbc:	019c0202 	.word	0x019c0202
   22dc0:	e000e100 	.word	0xe000e100

00022dc4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   22dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22dc6:	4b10      	ldr	r3, [pc, #64]	; (22e08 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   22dc8:	4f10      	ldr	r7, [pc, #64]	; (22e0c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22dca:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   22dce:	3001      	adds	r0, #1
   22dd0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   22dd4:	42ae      	cmp	r6, r5
   22dd6:	d800      	bhi.n	22dda <z_sys_init_run_level+0x16>
		}
	}
}
   22dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   22dda:	e9d5 3400 	ldrd	r3, r4, [r5]
   22dde:	4620      	mov	r0, r4
   22de0:	4798      	blx	r3
   22de2:	b170      	cbz	r0, 22e02 <z_sys_init_run_level+0x3e>
   22de4:	b16c      	cbz	r4, 22e02 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   22de6:	1be4      	subs	r4, r4, r7
   22de8:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22dea:	0961      	lsrs	r1, r4, #5
   22dec:	4a08      	ldr	r2, [pc, #32]	; (22e10 <z_sys_init_run_level+0x4c>)
   22dee:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   22df2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   22df6:	2301      	movs	r3, #1
   22df8:	fa03 f404 	lsl.w	r4, r3, r4
   22dfc:	4304      	orrs	r4, r0
   22dfe:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   22e02:	3508      	adds	r5, #8
   22e04:	e7e6      	b.n	22dd4 <z_sys_init_run_level+0x10>
   22e06:	bf00      	nop
   22e08:	0002f5b4 	.word	0x0002f5b4
   22e0c:	20000c10 	.word	0x20000c10
   22e10:	20000d00 	.word	0x20000d00

00022e14 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   22e14:	4b08      	ldr	r3, [pc, #32]	; (22e38 <z_device_ready+0x24>)
   22e16:	1ac0      	subs	r0, r0, r3
   22e18:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   22e1a:	4b08      	ldr	r3, [pc, #32]	; (22e3c <z_device_ready+0x28>)
   22e1c:	0942      	lsrs	r2, r0, #5
   22e1e:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   22e22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   22e26:	2301      	movs	r3, #1
   22e28:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   22e2c:	4210      	tst	r0, r2
}
   22e2e:	bf0c      	ite	eq
   22e30:	4618      	moveq	r0, r3
   22e32:	2000      	movne	r0, #0
   22e34:	4770      	bx	lr
   22e36:	bf00      	nop
   22e38:	20000c10 	.word	0x20000c10
   22e3c:	20000d00 	.word	0x20000d00

00022e40 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   22e40:	4911      	ldr	r1, [pc, #68]	; (22e88 <z_impl_device_get_binding+0x48>)
{
   22e42:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   22e44:	4c11      	ldr	r4, [pc, #68]	; (22e8c <z_impl_device_get_binding+0x4c>)
{
   22e46:	4605      	mov	r5, r0
   22e48:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   22e4a:	428c      	cmp	r4, r1
   22e4c:	d104      	bne.n	22e58 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   22e4e:	4c0f      	ldr	r4, [pc, #60]	; (22e8c <z_impl_device_get_binding+0x4c>)
   22e50:	42b4      	cmp	r4, r6
   22e52:	d10a      	bne.n	22e6a <z_impl_device_get_binding+0x2a>
	return NULL;
   22e54:	2400      	movs	r4, #0
   22e56:	e014      	b.n	22e82 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   22e58:	4620      	mov	r0, r4
   22e5a:	f7ff ffdb 	bl	22e14 <z_device_ready>
   22e5e:	b110      	cbz	r0, 22e66 <z_impl_device_get_binding+0x26>
   22e60:	6823      	ldr	r3, [r4, #0]
   22e62:	42ab      	cmp	r3, r5
   22e64:	d00d      	beq.n	22e82 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   22e66:	3410      	adds	r4, #16
   22e68:	e7ef      	b.n	22e4a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   22e6a:	4620      	mov	r0, r4
   22e6c:	f7ff ffd2 	bl	22e14 <z_device_ready>
   22e70:	b908      	cbnz	r0, 22e76 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   22e72:	3410      	adds	r4, #16
   22e74:	e7ec      	b.n	22e50 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   22e76:	6821      	ldr	r1, [r4, #0]
   22e78:	4628      	mov	r0, r5
   22e7a:	f003 fd5e 	bl	2693a <strcmp>
   22e7e:	2800      	cmp	r0, #0
   22e80:	d1f7      	bne.n	22e72 <z_impl_device_get_binding+0x32>
}
   22e82:	4620      	mov	r0, r4
   22e84:	bd70      	pop	{r4, r5, r6, pc}
   22e86:	bf00      	nop
   22e88:	20000d00 	.word	0x20000d00
   22e8c:	20000c10 	.word	0x20000c10

00022e90 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   22e90:	4b01      	ldr	r3, [pc, #4]	; (22e98 <z_impl_z_errno+0x8>)
   22e92:	6898      	ldr	r0, [r3, #8]
}
   22e94:	3064      	adds	r0, #100	; 0x64
   22e96:	4770      	bx	lr
   22e98:	200040a0 	.word	0x200040a0

00022e9c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   22e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   22e9e:	4e1c      	ldr	r6, [pc, #112]	; (22f10 <idle+0x74>)
{
   22ea0:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   22ea2:	2700      	movs	r7, #0
	__asm__ volatile(
   22ea4:	f04f 0220 	mov.w	r2, #32
   22ea8:	f3ef 8311 	mrs	r3, BASEPRI
   22eac:	f382 8811 	msr	BASEPRI, r2
   22eb0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   22eb4:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   22eb6:	b188      	cbz	r0, 22edc <idle+0x40>
			cpu->pending_abort = NULL;
   22eb8:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   22eba:	f383 8811 	msr	BASEPRI, r3
   22ebe:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   22ec2:	f000 fc35 	bl	23730 <z_thread_single_abort>
	__asm__ volatile(
   22ec6:	f04f 0320 	mov.w	r3, #32
   22eca:	f3ef 8011 	mrs	r0, BASEPRI
   22ece:	f383 8811 	msr	BASEPRI, r3
   22ed2:	f3bf 8f6f 	isb	sy
   22ed6:	f00a fa1a 	bl	2d30e <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   22eda:	e7e3      	b.n	22ea4 <idle+0x8>
	__asm__ volatile(
   22edc:	f383 8811 	msr	BASEPRI, r3
   22ee0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22ee4:	f04f 0220 	mov.w	r2, #32
   22ee8:	f3ef 8311 	mrs	r3, BASEPRI
   22eec:	f382 8811 	msr	BASEPRI, r2
   22ef0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   22ef4:	f00a fb99 	bl	2d62a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   22ef8:	2101      	movs	r1, #1
   22efa:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   22efc:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   22efe:	bfd8      	it	le
   22f00:	4608      	movle	r0, r1
   22f02:	f00a fba2 	bl	2d64a <z_set_timeout_expiry>
	_kernel.idle = ticks;
   22f06:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   22f08:	f7e3 fb96 	bl	6638 <arch_cpu_idle>
}
   22f0c:	e7ca      	b.n	22ea4 <idle+0x8>
   22f0e:	bf00      	nop
   22f10:	200040a0 	.word	0x200040a0

00022f14 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   22f14:	4802      	ldr	r0, [pc, #8]	; (22f20 <z_bss_zero+0xc>)
   22f16:	4a03      	ldr	r2, [pc, #12]	; (22f24 <z_bss_zero+0x10>)
   22f18:	2100      	movs	r1, #0
   22f1a:	1a12      	subs	r2, r2, r0
   22f1c:	f003 bd6c 	b.w	269f8 <memset>
   22f20:	20000fa0 	.word	0x20000fa0
   22f24:	20009164 	.word	0x20009164

00022f28 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   22f28:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   22f2a:	4806      	ldr	r0, [pc, #24]	; (22f44 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   22f2c:	4a06      	ldr	r2, [pc, #24]	; (22f48 <z_data_copy+0x20>)
   22f2e:	4907      	ldr	r1, [pc, #28]	; (22f4c <z_data_copy+0x24>)
   22f30:	1a12      	subs	r2, r2, r0
   22f32:	f003 fd36 	bl	269a2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22f36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   22f3a:	4a05      	ldr	r2, [pc, #20]	; (22f50 <z_data_copy+0x28>)
   22f3c:	4905      	ldr	r1, [pc, #20]	; (22f54 <z_data_copy+0x2c>)
   22f3e:	4806      	ldr	r0, [pc, #24]	; (22f58 <z_data_copy+0x30>)
   22f40:	f003 bd2f 	b.w	269a2 <memcpy>
   22f44:	20000000 	.word	0x20000000
   22f48:	20000f9c 	.word	0x20000f9c
   22f4c:	000337b0 	.word	0x000337b0
   22f50:	00000000 	.word	0x00000000
   22f54:	000337b0 	.word	0x000337b0
   22f58:	20000000 	.word	0x20000000

00022f5c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   22f5c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   22f5e:	4b0c      	ldr	r3, [pc, #48]	; (22f90 <bg_thread_main+0x34>)
   22f60:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22f62:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   22f64:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   22f66:	f7ff ff2d 	bl	22dc4 <z_sys_init_run_level>
#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
			STRINGIFY(BUILD_VERSION), BOOT_DELAY_BANNER);
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
   22f6a:	4a0a      	ldr	r2, [pc, #40]	; (22f94 <bg_thread_main+0x38>)
   22f6c:	490a      	ldr	r1, [pc, #40]	; (22f98 <bg_thread_main+0x3c>)
   22f6e:	480b      	ldr	r0, [pc, #44]	; (22f9c <bg_thread_main+0x40>)
   22f70:	f001 faa0 	bl	244b4 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   22f74:	2003      	movs	r0, #3
   22f76:	f7ff ff25 	bl	22dc4 <z_sys_init_run_level>

	z_init_static_threads();
   22f7a:	f000 fe5f 	bl	23c3c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   22f7e:	f001 f959 	bl	24234 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   22f82:	4a07      	ldr	r2, [pc, #28]	; (22fa0 <bg_thread_main+0x44>)
   22f84:	7b13      	ldrb	r3, [r2, #12]
   22f86:	f023 0301 	bic.w	r3, r3, #1
   22f8a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   22f8c:	bd08      	pop	{r3, pc}
   22f8e:	bf00      	nop
   22f90:	20009163 	.word	0x20009163
   22f94:	000334c6 	.word	0x000334c6
   22f98:	00033766 	.word	0x00033766
   22f9c:	0003376d 	.word	0x0003376d
   22fa0:	20001f58 	.word	0x20001f58

00022fa4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   22fa4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   22fa8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 230a0 <z_cstart+0xfc>
   22fac:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   22fae:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   22fb2:	4d33      	ldr	r5, [pc, #204]	; (23080 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   22fb4:	4e33      	ldr	r6, [pc, #204]	; (23084 <z_cstart+0xe0>)
   22fb6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   22fb8:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 230a4 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   22fbc:	4f32      	ldr	r7, [pc, #200]	; (23088 <z_cstart+0xe4>)
   22fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22fc2:	2400      	movs	r4, #0
   22fc4:	616b      	str	r3, [r5, #20]
   22fc6:	23e0      	movs	r3, #224	; 0xe0
   22fc8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   22fcc:	77ec      	strb	r4, [r5, #31]
   22fce:	762c      	strb	r4, [r5, #24]
   22fd0:	766c      	strb	r4, [r5, #25]
   22fd2:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   22fd4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   22fd6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   22fda:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   22fdc:	f7e3 fc6c 	bl	68b8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   22fe0:	f7e3 fb24 	bl	662c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   22fe4:	f04f 33ff 	mov.w	r3, #4294967295
   22fe8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   22fea:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   22fec:	4d27      	ldr	r5, [pc, #156]	; (2308c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   22fee:	f240 1301 	movw	r3, #257	; 0x101
   22ff2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   22ff6:	ab06      	add	r3, sp, #24
   22ff8:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   22ffa:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   22ffc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   23000:	f7ff fee0 	bl	22dc4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   23004:	2001      	movs	r0, #1
   23006:	f7ff fedd 	bl	22dc4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2300a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   2300e:	f000 fcd3 	bl	239b8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23012:	4b1f      	ldr	r3, [pc, #124]	; (23090 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   23014:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23016:	491f      	ldr	r1, [pc, #124]	; (23094 <z_cstart+0xf0>)
   23018:	9305      	str	r3, [sp, #20]
   2301a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2301e:	4653      	mov	r3, sl
   23020:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   23024:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23028:	9400      	str	r4, [sp, #0]
   2302a:	4630      	mov	r0, r6
   2302c:	f000 fdaa 	bl	23b84 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23030:	7b73      	ldrb	r3, [r6, #13]
   23032:	4680      	mov	r8, r0
   23034:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   23038:	4630      	mov	r0, r6
   2303a:	7373      	strb	r3, [r6, #13]
   2303c:	f00a f9a5 	bl	2d38a <z_ready_thread>
	z_setup_new_thread(thread, stack,
   23040:	230f      	movs	r3, #15
   23042:	e9cd 4302 	strd	r4, r3, [sp, #8]
   23046:	4914      	ldr	r1, [pc, #80]	; (23098 <z_cstart+0xf4>)
   23048:	4b14      	ldr	r3, [pc, #80]	; (2309c <z_cstart+0xf8>)
   2304a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2304e:	e9cd b404 	strd	fp, r4, [sp, #16]
   23052:	e9cd 5400 	strd	r5, r4, [sp]
   23056:	4638      	mov	r0, r7
   23058:	f000 fd94 	bl	23b84 <z_setup_new_thread>
   2305c:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2305e:	60ef      	str	r7, [r5, #12]
   23060:	f023 0304 	bic.w	r3, r3, #4
   23064:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   23066:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   2306a:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   2306e:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   23070:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   23074:	4652      	mov	r2, sl
   23076:	4641      	mov	r1, r8
   23078:	4630      	mov	r0, r6
   2307a:	f7e3 fabf 	bl	65fc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2307e:	bf00      	nop
   23080:	e000ed00 	.word	0xe000ed00
   23084:	20001f58 	.word	0x20001f58
   23088:	20001ed8 	.word	0x20001ed8
   2308c:	200040a0 	.word	0x200040a0
   23090:	00033796 	.word	0x00033796
   23094:	2000af40 	.word	0x2000af40
   23098:	2000b340 	.word	0x2000b340
   2309c:	00022e9d 	.word	0x00022e9d
   230a0:	2000bc80 	.word	0x2000bc80
   230a4:	00022f5d 	.word	0x00022f5d

000230a8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   230a8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   230aa:	4c06      	ldr	r4, [pc, #24]	; (230c4 <statics_init+0x1c>)
   230ac:	4d06      	ldr	r5, [pc, #24]	; (230c8 <statics_init+0x20>)
   230ae:	42ac      	cmp	r4, r5
   230b0:	d301      	bcc.n	230b6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   230b2:	2000      	movs	r0, #0
   230b4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   230b6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   230ba:	4620      	mov	r0, r4
   230bc:	f009 ffc5 	bl	2d04a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   230c0:	3414      	adds	r4, #20
   230c2:	e7f4      	b.n	230ae <statics_init+0x6>
   230c4:	20000d74 	.word	0x20000d74
   230c8:	20000d88 	.word	0x20000d88

000230cc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   230cc:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   230ce:	4b0e      	ldr	r3, [pc, #56]	; (23108 <init_mem_slab_module+0x3c>)
   230d0:	4c0e      	ldr	r4, [pc, #56]	; (2310c <init_mem_slab_module+0x40>)
   230d2:	42a3      	cmp	r3, r4
   230d4:	d301      	bcc.n	230da <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   230d6:	2000      	movs	r0, #0
	return rc;
}
   230d8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   230da:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   230de:	ea41 0200 	orr.w	r2, r1, r0
   230e2:	f012 0203 	ands.w	r2, r2, #3
   230e6:	d10b      	bne.n	23100 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   230e8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   230ea:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   230ec:	42aa      	cmp	r2, r5
   230ee:	d101      	bne.n	230f4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   230f0:	331c      	adds	r3, #28
   230f2:	e7ee      	b.n	230d2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   230f4:	695e      	ldr	r6, [r3, #20]
   230f6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   230f8:	3201      	adds	r2, #1
		slab->free_list = p;
   230fa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   230fc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   230fe:	e7f5      	b.n	230ec <init_mem_slab_module+0x20>
		return -EINVAL;
   23100:	f06f 0015 	mvn.w	r0, #21
	return rc;
   23104:	e7e8      	b.n	230d8 <init_mem_slab_module+0xc>
   23106:	bf00      	nop
   23108:	20000d04 	.word	0x20000d04
   2310c:	20000d74 	.word	0x20000d74

00023110 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   23110:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   23112:	460c      	mov	r4, r1
   23114:	4616      	mov	r6, r2
   23116:	461f      	mov	r7, r3
   23118:	f04f 0320 	mov.w	r3, #32
   2311c:	f3ef 8111 	mrs	r1, BASEPRI
   23120:	f383 8811 	msr	BASEPRI, r3
   23124:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   23128:	6943      	ldr	r3, [r0, #20]
   2312a:	b15b      	cbz	r3, 23144 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   2312c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2312e:	681b      	ldr	r3, [r3, #0]
   23130:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   23132:	6983      	ldr	r3, [r0, #24]
   23134:	3301      	adds	r3, #1
   23136:	6183      	str	r3, [r0, #24]
		result = 0;
   23138:	2000      	movs	r0, #0
	__asm__ volatile(
   2313a:	f381 8811 	msr	BASEPRI, r1
   2313e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   23142:	e011      	b.n	23168 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23144:	ea56 0207 	orrs.w	r2, r6, r7
   23148:	d103      	bne.n	23152 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   2314a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   2314c:	f06f 000b 	mvn.w	r0, #11
   23150:	e7f3      	b.n	2313a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   23152:	4602      	mov	r2, r0
   23154:	e9cd 6700 	strd	r6, r7, [sp]
   23158:	4804      	ldr	r0, [pc, #16]	; (2316c <k_mem_slab_alloc+0x5c>)
   2315a:	f000 fbab 	bl	238b4 <z_pend_curr>
		if (result == 0) {
   2315e:	b918      	cbnz	r0, 23168 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   23160:	4b03      	ldr	r3, [pc, #12]	; (23170 <k_mem_slab_alloc+0x60>)
   23162:	689b      	ldr	r3, [r3, #8]
   23164:	695b      	ldr	r3, [r3, #20]
   23166:	6023      	str	r3, [r4, #0]
}
   23168:	b002      	add	sp, #8
   2316a:	bdd0      	pop	{r4, r6, r7, pc}
   2316c:	20009164 	.word	0x20009164
   23170:	200040a0 	.word	0x200040a0

00023174 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   23174:	b570      	push	{r4, r5, r6, lr}
   23176:	4604      	mov	r4, r0
   23178:	460d      	mov	r5, r1
	__asm__ volatile(
   2317a:	f04f 0320 	mov.w	r3, #32
   2317e:	f3ef 8611 	mrs	r6, BASEPRI
   23182:	f383 8811 	msr	BASEPRI, r3
   23186:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2318a:	f00a f956 	bl	2d43a <z_unpend_first_thread>

	if (pending_thread != NULL) {
   2318e:	b158      	cbz	r0, 231a8 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23190:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23192:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23194:	2100      	movs	r1, #0
   23196:	67c1      	str	r1, [r0, #124]	; 0x7c
		z_ready_thread(pending_thread);
   23198:	f00a f8f7 	bl	2d38a <z_ready_thread>
		z_reschedule(&lock, key);
   2319c:	4631      	mov	r1, r6
   2319e:	4809      	ldr	r0, [pc, #36]	; (231c4 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   231a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   231a4:	f000 b944 	b.w	23430 <z_reschedule>
		**(char ***)mem = slab->free_list;
   231a8:	682b      	ldr	r3, [r5, #0]
   231aa:	6962      	ldr	r2, [r4, #20]
   231ac:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   231ae:	682b      	ldr	r3, [r5, #0]
   231b0:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   231b2:	69a3      	ldr	r3, [r4, #24]
   231b4:	3b01      	subs	r3, #1
   231b6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   231b8:	f386 8811 	msr	BASEPRI, r6
   231bc:	f3bf 8f6f 	isb	sy
}
   231c0:	bd70      	pop	{r4, r5, r6, pc}
   231c2:	bf00      	nop
   231c4:	20009164 	.word	0x20009164

000231c8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   231c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   231cc:	4604      	mov	r4, r0
   231ce:	4616      	mov	r6, r2
   231d0:	461f      	mov	r7, r3
	__asm__ volatile(
   231d2:	f04f 0320 	mov.w	r3, #32
   231d6:	f3ef 8811 	mrs	r8, BASEPRI
   231da:	f383 8811 	msr	BASEPRI, r3
   231de:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   231e2:	68c3      	ldr	r3, [r0, #12]
   231e4:	4a32      	ldr	r2, [pc, #200]	; (232b0 <z_impl_k_mutex_lock+0xe8>)
   231e6:	b16b      	cbz	r3, 23204 <z_impl_k_mutex_lock+0x3c>
   231e8:	6880      	ldr	r0, [r0, #8]
   231ea:	6891      	ldr	r1, [r2, #8]
   231ec:	4288      	cmp	r0, r1
   231ee:	d019      	beq.n	23224 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   231f0:	ea56 0307 	orrs.w	r3, r6, r7
   231f4:	d118      	bne.n	23228 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   231f6:	f388 8811 	msr	BASEPRI, r8
   231fa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   231fe:	f06f 000f 	mvn.w	r0, #15
   23202:	e00c      	b.n	2321e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   23204:	6891      	ldr	r1, [r2, #8]
   23206:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2320a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2320c:	3301      	adds	r3, #1
   2320e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   23210:	6893      	ldr	r3, [r2, #8]
   23212:	60a3      	str	r3, [r4, #8]
   23214:	f388 8811 	msr	BASEPRI, r8
   23218:	f3bf 8f6f 	isb	sy
		return 0;
   2321c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   2321e:	b002      	add	sp, #8
   23220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   23224:	6921      	ldr	r1, [r4, #16]
   23226:	e7f0      	b.n	2320a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   23228:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2322c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   23230:	4299      	cmp	r1, r3
   23232:	bfa8      	it	ge
   23234:	4619      	movge	r1, r3
   23236:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2323a:	4299      	cmp	r1, r3
   2323c:	da2c      	bge.n	23298 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   2323e:	f000 fb7b 	bl	23938 <z_set_prio>
   23242:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   23244:	e9cd 6700 	strd	r6, r7, [sp]
   23248:	481a      	ldr	r0, [pc, #104]	; (232b4 <z_impl_k_mutex_lock+0xec>)
   2324a:	4622      	mov	r2, r4
   2324c:	4641      	mov	r1, r8
   2324e:	f000 fb31 	bl	238b4 <z_pend_curr>
	if (got_mutex == 0) {
   23252:	2800      	cmp	r0, #0
   23254:	d0e3      	beq.n	2321e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   23256:	f04f 0320 	mov.w	r3, #32
   2325a:	f3ef 8611 	mrs	r6, BASEPRI
   2325e:	f383 8811 	msr	BASEPRI, r3
   23262:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   23266:	6823      	ldr	r3, [r4, #0]
   23268:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2326a:	42a3      	cmp	r3, r4
   2326c:	d007      	beq.n	2327e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2326e:	b133      	cbz	r3, 2327e <z_impl_k_mutex_lock+0xb6>
   23270:	f993 300e 	ldrsb.w	r3, [r3, #14]
   23274:	4299      	cmp	r1, r3
   23276:	bfa8      	it	ge
   23278:	4619      	movge	r1, r3
   2327a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2327e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   23280:	f990 300e 	ldrsb.w	r3, [r0, #14]
   23284:	4299      	cmp	r1, r3
   23286:	d109      	bne.n	2329c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   23288:	b16d      	cbz	r5, 232a6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2328a:	480a      	ldr	r0, [pc, #40]	; (232b4 <z_impl_k_mutex_lock+0xec>)
   2328c:	4631      	mov	r1, r6
   2328e:	f000 f8cf 	bl	23430 <z_reschedule>
	return -EAGAIN;
   23292:	f06f 000a 	mvn.w	r0, #10
   23296:	e7c2      	b.n	2321e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   23298:	2500      	movs	r5, #0
   2329a:	e7d3      	b.n	23244 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   2329c:	f000 fb4c 	bl	23938 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   232a0:	2800      	cmp	r0, #0
   232a2:	d1f2      	bne.n	2328a <z_impl_k_mutex_lock+0xc2>
   232a4:	e7f0      	b.n	23288 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   232a6:	f386 8811 	msr	BASEPRI, r6
   232aa:	f3bf 8f6f 	isb	sy
   232ae:	e7f0      	b.n	23292 <z_impl_k_mutex_lock+0xca>
   232b0:	200040a0 	.word	0x200040a0
   232b4:	20009164 	.word	0x20009164

000232b8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   232b8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   232ba:	6883      	ldr	r3, [r0, #8]
{
   232bc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   232be:	2b00      	cmp	r3, #0
   232c0:	d036      	beq.n	23330 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   232c2:	4a1e      	ldr	r2, [pc, #120]	; (2333c <z_impl_k_mutex_unlock+0x84>)
   232c4:	6892      	ldr	r2, [r2, #8]
   232c6:	4293      	cmp	r3, r2
   232c8:	d135      	bne.n	23336 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   232ca:	7bda      	ldrb	r2, [r3, #15]
   232cc:	3a01      	subs	r2, #1
   232ce:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   232d0:	68c3      	ldr	r3, [r0, #12]
   232d2:	2b01      	cmp	r3, #1
   232d4:	d005      	beq.n	232e2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   232d6:	3b01      	subs	r3, #1
   232d8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   232da:	f000 f90d 	bl	234f8 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   232de:	2000      	movs	r0, #0
}
   232e0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   232e2:	f04f 0320 	mov.w	r3, #32
   232e6:	f3ef 8511 	mrs	r5, BASEPRI
   232ea:	f383 8811 	msr	BASEPRI, r3
   232ee:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   232f2:	6901      	ldr	r1, [r0, #16]
   232f4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   232f6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   232fa:	4299      	cmp	r1, r3
   232fc:	d001      	beq.n	23302 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   232fe:	f000 fb1b 	bl	23938 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   23302:	4620      	mov	r0, r4
   23304:	f00a f899 	bl	2d43a <z_unpend_first_thread>
	mutex->owner = new_owner;
   23308:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2330a:	b158      	cbz	r0, 23324 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   2330c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   23310:	6122      	str	r2, [r4, #16]
   23312:	2200      	movs	r2, #0
   23314:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   23316:	f00a f838 	bl	2d38a <z_ready_thread>
		z_reschedule(&lock, key);
   2331a:	4809      	ldr	r0, [pc, #36]	; (23340 <z_impl_k_mutex_unlock+0x88>)
   2331c:	4629      	mov	r1, r5
   2331e:	f000 f887 	bl	23430 <z_reschedule>
   23322:	e7da      	b.n	232da <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   23324:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   23326:	f385 8811 	msr	BASEPRI, r5
   2332a:	f3bf 8f6f 	isb	sy
   2332e:	e7d4      	b.n	232da <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   23330:	f06f 0015 	mvn.w	r0, #21
   23334:	e7d4      	b.n	232e0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   23336:	f04f 30ff 	mov.w	r0, #4294967295
   2333a:	e7d1      	b.n	232e0 <z_impl_k_mutex_unlock+0x28>
   2333c:	200040a0 	.word	0x200040a0
   23340:	20009164 	.word	0x20009164

00023344 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   23344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23346:	4616      	mov	r6, r2
   23348:	461f      	mov	r7, r3
	__asm__ volatile(
   2334a:	f04f 0320 	mov.w	r3, #32
   2334e:	f3ef 8511 	mrs	r5, BASEPRI
   23352:	f383 8811 	msr	BASEPRI, r3
   23356:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   2335a:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2335c:	b19c      	cbz	r4, 23386 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2335e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23360:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   23362:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   23366:	4294      	cmp	r4, r2
	list->head = node;
   23368:	6003      	str	r3, [r0, #0]
	list->tail = node;
   2336a:	bf08      	it	eq
   2336c:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2336e:	2101      	movs	r1, #1
   23370:	4620      	mov	r0, r4
   23372:	f009 ff5a 	bl	2d22a <z_queue_node_peek>
   23376:	4604      	mov	r4, r0
	__asm__ volatile(
   23378:	f385 8811 	msr	BASEPRI, r5
   2337c:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   23380:	4620      	mov	r0, r4
   23382:	b003      	add	sp, #12
   23384:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23386:	ea56 0307 	orrs.w	r3, r6, r7
   2338a:	d0f5      	beq.n	23378 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2338c:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   23390:	e9cd 6700 	strd	r6, r7, [sp]
   23394:	4629      	mov	r1, r5
   23396:	4610      	mov	r0, r2
   23398:	f000 fa8c 	bl	238b4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2339c:	2800      	cmp	r0, #0
   2339e:	d1ef      	bne.n	23380 <z_impl_k_queue_get+0x3c>
   233a0:	4b01      	ldr	r3, [pc, #4]	; (233a8 <z_impl_k_queue_get+0x64>)
   233a2:	689b      	ldr	r3, [r3, #8]
   233a4:	695c      	ldr	r4, [r3, #20]
   233a6:	e7eb      	b.n	23380 <z_impl_k_queue_get+0x3c>
   233a8:	200040a0 	.word	0x200040a0

000233ac <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   233ac:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   233ae:	4c08      	ldr	r4, [pc, #32]	; (233d0 <z_reset_time_slice+0x24>)
   233b0:	6823      	ldr	r3, [r4, #0]
   233b2:	b15b      	cbz	r3, 233cc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   233b4:	f7e2 feb4 	bl	6120 <z_clock_elapsed>
   233b8:	4603      	mov	r3, r0
   233ba:	6820      	ldr	r0, [r4, #0]
   233bc:	4a05      	ldr	r2, [pc, #20]	; (233d4 <z_reset_time_slice+0x28>)
   233be:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   233c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   233c4:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   233c6:	2100      	movs	r1, #0
   233c8:	f00a b93f 	b.w	2d64a <z_set_timeout_expiry>
}
   233cc:	bd10      	pop	{r4, pc}
   233ce:	bf00      	nop
   233d0:	200040dc 	.word	0x200040dc
   233d4:	200040a0 	.word	0x200040a0

000233d8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   233d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233da:	4605      	mov	r5, r0
   233dc:	460c      	mov	r4, r1
	__asm__ volatile(
   233de:	f04f 0320 	mov.w	r3, #32
   233e2:	f3ef 8611 	mrs	r6, BASEPRI
   233e6:	f383 8811 	msr	BASEPRI, r3
   233ea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   233ee:	4b0d      	ldr	r3, [pc, #52]	; (23424 <k_sched_time_slice_set+0x4c>)
   233f0:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   233f2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   233f6:	f240 30e7 	movw	r0, #999	; 0x3e7
   233fa:	2100      	movs	r1, #0
   233fc:	615a      	str	r2, [r3, #20]
   233fe:	fbe7 0105 	umlal	r0, r1, r7, r5
   23402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23406:	2300      	movs	r3, #0
   23408:	f7dc feca 	bl	1a0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2340c:	4b06      	ldr	r3, [pc, #24]	; (23428 <k_sched_time_slice_set+0x50>)
   2340e:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   23410:	4b06      	ldr	r3, [pc, #24]	; (2342c <k_sched_time_slice_set+0x54>)
   23412:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   23414:	f7ff ffca 	bl	233ac <z_reset_time_slice>
	__asm__ volatile(
   23418:	f386 8811 	msr	BASEPRI, r6
   2341c:	f3bf 8f6f 	isb	sy
	}
}
   23420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23422:	bf00      	nop
   23424:	200040a0 	.word	0x200040a0
   23428:	200040dc 	.word	0x200040dc
   2342c:	200040d8 	.word	0x200040d8

00023430 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   23430:	b949      	cbnz	r1, 23446 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23432:	f3ef 8005 	mrs	r0, IPSR
   23436:	b930      	cbnz	r0, 23446 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   23438:	4b05      	ldr	r3, [pc, #20]	; (23450 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2343a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2343c:	689b      	ldr	r3, [r3, #8]
   2343e:	429a      	cmp	r2, r3
   23440:	d001      	beq.n	23446 <z_reschedule+0x16>
	ret = arch_swap(key);
   23442:	f7e3 b819 	b.w	6478 <arch_swap>
   23446:	f381 8811 	msr	BASEPRI, r1
   2344a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2344e:	4770      	bx	lr
   23450:	200040a0 	.word	0x200040a0

00023454 <k_sched_lock>:
	__asm__ volatile(
   23454:	f04f 0320 	mov.w	r3, #32
   23458:	f3ef 8111 	mrs	r1, BASEPRI
   2345c:	f383 8811 	msr	BASEPRI, r3
   23460:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   23464:	4b04      	ldr	r3, [pc, #16]	; (23478 <k_sched_lock+0x24>)
   23466:	689a      	ldr	r2, [r3, #8]
   23468:	7bd3      	ldrb	r3, [r2, #15]
   2346a:	3b01      	subs	r3, #1
   2346c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2346e:	f381 8811 	msr	BASEPRI, r1
   23472:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   23476:	4770      	bx	lr
   23478:	200040a0 	.word	0x200040a0

0002347c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   2347c:	4b09      	ldr	r3, [pc, #36]	; (234a4 <z_priq_dumb_remove+0x28>)
   2347e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   23482:	4282      	cmp	r2, r0
   23484:	d105      	bne.n	23492 <z_priq_dumb_remove+0x16>
   23486:	689b      	ldr	r3, [r3, #8]
   23488:	428b      	cmp	r3, r1
   2348a:	d102      	bne.n	23492 <z_priq_dumb_remove+0x16>
   2348c:	7b4b      	ldrb	r3, [r1, #13]
   2348e:	06db      	lsls	r3, r3, #27
   23490:	d106      	bne.n	234a0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   23492:	e9d1 3200 	ldrd	r3, r2, [r1]
   23496:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   23498:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2349a:	2300      	movs	r3, #0
	node->prev = NULL;
   2349c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   234a0:	4770      	bx	lr
   234a2:	bf00      	nop
   234a4:	200040a0 	.word	0x200040a0

000234a8 <update_cache>:
{
   234a8:	b538      	push	{r3, r4, r5, lr}
   234aa:	4c12      	ldr	r4, [pc, #72]	; (234f4 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   234ac:	6923      	ldr	r3, [r4, #16]
   234ae:	68a2      	ldr	r2, [r4, #8]
{
   234b0:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   234b2:	b10b      	cbz	r3, 234b8 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   234b4:	68e5      	ldr	r5, [r4, #12]
   234b6:	e00c      	b.n	234d2 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   234b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   234bc:	f009 ff5f 	bl	2d37e <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   234c0:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   234c2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   234c4:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   234c6:	bf44      	itt	mi
   234c8:	f043 0308 	orrmi.w	r3, r3, #8
   234cc:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   234ce:	2d00      	cmp	r5, #0
   234d0:	d0f0      	beq.n	234b4 <update_cache+0xc>
	if (preempt_ok != 0) {
   234d2:	b949      	cbnz	r1, 234e8 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   234d4:	7b53      	ldrb	r3, [r2, #13]
   234d6:	06db      	lsls	r3, r3, #27
   234d8:	d106      	bne.n	234e8 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   234da:	69ab      	ldr	r3, [r5, #24]
   234dc:	b923      	cbnz	r3, 234e8 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   234de:	89d3      	ldrh	r3, [r2, #14]
   234e0:	2b7f      	cmp	r3, #127	; 0x7f
   234e2:	d901      	bls.n	234e8 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   234e4:	62a2      	str	r2, [r4, #40]	; 0x28
}
   234e6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   234e8:	4295      	cmp	r5, r2
   234ea:	d001      	beq.n	234f0 <update_cache+0x48>
			z_reset_time_slice();
   234ec:	f7ff ff5e 	bl	233ac <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   234f0:	62a5      	str	r5, [r4, #40]	; 0x28
}
   234f2:	e7f8      	b.n	234e6 <update_cache+0x3e>
   234f4:	200040a0 	.word	0x200040a0

000234f8 <k_sched_unlock>:
{
   234f8:	b510      	push	{r4, lr}
	__asm__ volatile(
   234fa:	f04f 0320 	mov.w	r3, #32
   234fe:	f3ef 8411 	mrs	r4, BASEPRI
   23502:	f383 8811 	msr	BASEPRI, r3
   23506:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2350a:	4b08      	ldr	r3, [pc, #32]	; (2352c <k_sched_unlock+0x34>)
   2350c:	689a      	ldr	r2, [r3, #8]
   2350e:	7bd3      	ldrb	r3, [r2, #15]
   23510:	3301      	adds	r3, #1
   23512:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   23514:	2000      	movs	r0, #0
   23516:	f7ff ffc7 	bl	234a8 <update_cache>
	__asm__ volatile(
   2351a:	f384 8811 	msr	BASEPRI, r4
   2351e:	f3bf 8f6f 	isb	sy
}
   23522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   23526:	f009 befe 	b.w	2d326 <z_reschedule_unlocked>
   2352a:	bf00      	nop
   2352c:	200040a0 	.word	0x200040a0

00023530 <ready_thread>:
{
   23530:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   23532:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   23536:	7b43      	ldrb	r3, [r0, #13]
   23538:	2a00      	cmp	r2, #0
   2353a:	db29      	blt.n	23590 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2353c:	06db      	lsls	r3, r3, #27
   2353e:	d127      	bne.n	23590 <ready_thread+0x60>
   23540:	6983      	ldr	r3, [r0, #24]
   23542:	bb2b      	cbnz	r3, 23590 <ready_thread+0x60>
	return list->head == list;
   23544:	4a13      	ldr	r2, [pc, #76]	; (23594 <ready_thread+0x64>)
   23546:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2354a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   2354e:	428b      	cmp	r3, r1
   23550:	d018      	beq.n	23584 <ready_thread+0x54>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23552:	b1bb      	cbz	r3, 23584 <ready_thread+0x54>
	if (thread_1->base.prio < thread_2->base.prio) {
   23554:	f990 500e 	ldrsb.w	r5, [r0, #14]
   23558:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2355c:	42ae      	cmp	r6, r5
   2355e:	dd0c      	ble.n	2357a <ready_thread+0x4a>
	node->prev = successor->prev;
   23560:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   23562:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   23566:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   23568:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   2356a:	7b43      	ldrb	r3, [r0, #13]
   2356c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23570:	7343      	strb	r3, [r0, #13]
}
   23572:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   23574:	2000      	movs	r0, #0
   23576:	f7ff bf97 	b.w	234a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2357a:	429c      	cmp	r4, r3
   2357c:	d002      	beq.n	23584 <ready_thread+0x54>
   2357e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23580:	2b00      	cmp	r3, #0
   23582:	d1e9      	bne.n	23558 <ready_thread+0x28>
	node->prev = list->tail;
   23584:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   23588:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2358a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   2358c:	6310      	str	r0, [r2, #48]	; 0x30
}
   2358e:	e7ec      	b.n	2356a <ready_thread+0x3a>
}
   23590:	bc70      	pop	{r4, r5, r6}
   23592:	4770      	bx	lr
   23594:	200040a0 	.word	0x200040a0

00023598 <z_sched_start>:
{
   23598:	b510      	push	{r4, lr}
	__asm__ volatile(
   2359a:	f04f 0220 	mov.w	r2, #32
   2359e:	f3ef 8411 	mrs	r4, BASEPRI
   235a2:	f382 8811 	msr	BASEPRI, r2
   235a6:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   235aa:	7b42      	ldrb	r2, [r0, #13]
   235ac:	0751      	lsls	r1, r2, #29
   235ae:	d404      	bmi.n	235ba <z_sched_start+0x22>
	__asm__ volatile(
   235b0:	f384 8811 	msr	BASEPRI, r4
   235b4:	f3bf 8f6f 	isb	sy
}
   235b8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   235ba:	f022 0204 	bic.w	r2, r2, #4
   235be:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   235c0:	f7ff ffb6 	bl	23530 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   235c4:	4621      	mov	r1, r4
   235c6:	4802      	ldr	r0, [pc, #8]	; (235d0 <z_sched_start+0x38>)
}
   235c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   235cc:	f7ff bf30 	b.w	23430 <z_reschedule>
   235d0:	20009164 	.word	0x20009164

000235d4 <move_thread_to_end_of_prio_q>:
{
   235d4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   235d6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   235da:	2b00      	cmp	r3, #0
{
   235dc:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   235de:	da02      	bge.n	235e6 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   235e0:	4816      	ldr	r0, [pc, #88]	; (2363c <move_thread_to_end_of_prio_q+0x68>)
   235e2:	f7ff ff4b 	bl	2347c <z_priq_dumb_remove>
	return list->head == list;
   235e6:	4a16      	ldr	r2, [pc, #88]	; (23640 <move_thread_to_end_of_prio_q+0x6c>)
   235e8:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   235ec:	f102 002c 	add.w	r0, r2, #44	; 0x2c
   235f0:	4283      	cmp	r3, r0
   235f2:	d01c      	beq.n	2362e <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   235f4:	b1db      	cbz	r3, 2362e <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   235f6:	f991 500e 	ldrsb.w	r5, [r1, #14]
   235fa:	f993 600e 	ldrsb.w	r6, [r3, #14]
   235fe:	42ae      	cmp	r6, r5
   23600:	dd10      	ble.n	23624 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
   23602:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   23604:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   23608:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2360a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   2360c:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   2360e:	6890      	ldr	r0, [r2, #8]
   23610:	f063 037f 	orn	r3, r3, #127	; 0x7f
   23614:	734b      	strb	r3, [r1, #13]
   23616:	1a43      	subs	r3, r0, r1
   23618:	4258      	negs	r0, r3
}
   2361a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2361e:	4158      	adcs	r0, r3
   23620:	f7ff bf42 	b.w	234a8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   23624:	429c      	cmp	r4, r3
   23626:	d002      	beq.n	2362e <move_thread_to_end_of_prio_q+0x5a>
   23628:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2362a:	2b00      	cmp	r3, #0
   2362c:	d1e5      	bne.n	235fa <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
   2362e:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   23632:	6b13      	ldr	r3, [r2, #48]	; 0x30
   23634:	6019      	str	r1, [r3, #0]
	list->tail = node;
   23636:	6311      	str	r1, [r2, #48]	; 0x30
}
   23638:	e7e8      	b.n	2360c <move_thread_to_end_of_prio_q+0x38>
   2363a:	bf00      	nop
   2363c:	200040cc 	.word	0x200040cc
   23640:	200040a0 	.word	0x200040a0

00023644 <z_time_slice>:
{
   23644:	b570      	push	{r4, r5, r6, lr}
   23646:	4601      	mov	r1, r0
	__asm__ volatile(
   23648:	f04f 0320 	mov.w	r3, #32
   2364c:	f3ef 8411 	mrs	r4, BASEPRI
   23650:	f383 8811 	msr	BASEPRI, r3
   23654:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   23658:	4b16      	ldr	r3, [pc, #88]	; (236b4 <z_time_slice+0x70>)
   2365a:	4a17      	ldr	r2, [pc, #92]	; (236b8 <z_time_slice+0x74>)
   2365c:	6898      	ldr	r0, [r3, #8]
   2365e:	6815      	ldr	r5, [r2, #0]
   23660:	42a8      	cmp	r0, r5
   23662:	461d      	mov	r5, r3
   23664:	d106      	bne.n	23674 <z_time_slice+0x30>
			z_reset_time_slice();
   23666:	f7ff fea1 	bl	233ac <z_reset_time_slice>
	__asm__ volatile(
   2366a:	f384 8811 	msr	BASEPRI, r4
   2366e:	f3bf 8f6f 	isb	sy
}
   23672:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   23674:	2600      	movs	r6, #0
   23676:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   23678:	4a10      	ldr	r2, [pc, #64]	; (236bc <z_time_slice+0x78>)
   2367a:	6812      	ldr	r2, [r2, #0]
   2367c:	b1ba      	cbz	r2, 236ae <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   2367e:	89c2      	ldrh	r2, [r0, #14]
   23680:	2a7f      	cmp	r2, #127	; 0x7f
   23682:	d814      	bhi.n	236ae <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   23684:	7b42      	ldrb	r2, [r0, #13]
   23686:	06d2      	lsls	r2, r2, #27
   23688:	d111      	bne.n	236ae <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2368a:	4a0d      	ldr	r2, [pc, #52]	; (236c0 <z_time_slice+0x7c>)
   2368c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   23690:	6812      	ldr	r2, [r2, #0]
   23692:	4296      	cmp	r6, r2
   23694:	db0b      	blt.n	236ae <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   23696:	4a0b      	ldr	r2, [pc, #44]	; (236c4 <z_time_slice+0x80>)
   23698:	4290      	cmp	r0, r2
   2369a:	d008      	beq.n	236ae <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   2369c:	695a      	ldr	r2, [r3, #20]
   2369e:	428a      	cmp	r2, r1
   236a0:	dc02      	bgt.n	236a8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   236a2:	f7ff ff97 	bl	235d4 <move_thread_to_end_of_prio_q>
   236a6:	e7de      	b.n	23666 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   236a8:	1a52      	subs	r2, r2, r1
   236aa:	615a      	str	r2, [r3, #20]
   236ac:	e7dd      	b.n	2366a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   236ae:	2300      	movs	r3, #0
   236b0:	616b      	str	r3, [r5, #20]
   236b2:	e7da      	b.n	2366a <z_time_slice+0x26>
   236b4:	200040a0 	.word	0x200040a0
   236b8:	200040d4 	.word	0x200040d4
   236bc:	200040dc 	.word	0x200040dc
   236c0:	200040d8 	.word	0x200040d8
   236c4:	20001ed8 	.word	0x20001ed8

000236c8 <z_impl_k_thread_suspend>:
{
   236c8:	b570      	push	{r4, r5, r6, lr}
   236ca:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   236cc:	3018      	adds	r0, #24
   236ce:	f009 ff86 	bl	2d5de <z_abort_timeout>
	__asm__ volatile(
   236d2:	f04f 0320 	mov.w	r3, #32
   236d6:	f3ef 8611 	mrs	r6, BASEPRI
   236da:	f383 8811 	msr	BASEPRI, r3
   236de:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   236e2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   236e6:	2b00      	cmp	r3, #0
   236e8:	da07      	bge.n	236fa <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   236ea:	480f      	ldr	r0, [pc, #60]	; (23728 <z_impl_k_thread_suspend+0x60>)
   236ec:	4621      	mov	r1, r4
   236ee:	f7ff fec5 	bl	2347c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   236f2:	7b63      	ldrb	r3, [r4, #13]
   236f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   236f8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   236fa:	4d0c      	ldr	r5, [pc, #48]	; (2372c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   236fc:	7b63      	ldrb	r3, [r4, #13]
   236fe:	68a8      	ldr	r0, [r5, #8]
   23700:	f043 0310 	orr.w	r3, r3, #16
   23704:	7363      	strb	r3, [r4, #13]
   23706:	1b03      	subs	r3, r0, r4
   23708:	4258      	negs	r0, r3
   2370a:	4158      	adcs	r0, r3
   2370c:	f7ff fecc 	bl	234a8 <update_cache>
	__asm__ volatile(
   23710:	f386 8811 	msr	BASEPRI, r6
   23714:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   23718:	68ab      	ldr	r3, [r5, #8]
   2371a:	42a3      	cmp	r3, r4
   2371c:	d103      	bne.n	23726 <z_impl_k_thread_suspend+0x5e>
}
   2371e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   23722:	f009 be00 	b.w	2d326 <z_reschedule_unlocked>
}
   23726:	bd70      	pop	{r4, r5, r6, pc}
   23728:	200040cc 	.word	0x200040cc
   2372c:	200040a0 	.word	0x200040a0

00023730 <z_thread_single_abort>:
{
   23730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23734:	4604      	mov	r4, r0
	__asm__ volatile(
   23736:	f04f 0320 	mov.w	r3, #32
   2373a:	f3ef 8211 	mrs	r2, BASEPRI
   2373e:	f383 8811 	msr	BASEPRI, r3
   23742:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   23746:	7b43      	ldrb	r3, [r0, #13]
   23748:	f013 0f28 	tst.w	r3, #40	; 0x28
   2374c:	d005      	beq.n	2375a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   2374e:	f382 8811 	msr	BASEPRI, r2
   23752:	f3bf 8f6f 	isb	sy
}
   23756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   2375a:	f043 0320 	orr.w	r3, r3, #32
   2375e:	7343      	strb	r3, [r0, #13]
   23760:	f382 8811 	msr	BASEPRI, r2
   23764:	f3bf 8f6f 	isb	sy
   23768:	3018      	adds	r0, #24
   2376a:	f009 ff38 	bl	2d5de <z_abort_timeout>
	__asm__ volatile(
   2376e:	f04f 0320 	mov.w	r3, #32
   23772:	f3ef 8611 	mrs	r6, BASEPRI
   23776:	f383 8811 	msr	BASEPRI, r3
   2377a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2377e:	7b63      	ldrb	r3, [r4, #13]
   23780:	06d8      	lsls	r0, r3, #27
   23782:	d116      	bne.n	237b2 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   23784:	69a2      	ldr	r2, [r4, #24]
   23786:	b9a2      	cbnz	r2, 237b2 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   23788:	0619      	lsls	r1, r3, #24
   2378a:	d507      	bpl.n	2379c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   2378c:	4826      	ldr	r0, [pc, #152]	; (23828 <z_thread_single_abort+0xf8>)
   2378e:	4621      	mov	r1, r4
   23790:	f7ff fe74 	bl	2347c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23794:	7b63      	ldrb	r3, [r4, #13]
   23796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2379a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2379c:	4b23      	ldr	r3, [pc, #140]	; (2382c <z_thread_single_abort+0xfc>)
   2379e:	6898      	ldr	r0, [r3, #8]
   237a0:	1b02      	subs	r2, r0, r4
   237a2:	4250      	negs	r0, r2
   237a4:	4150      	adcs	r0, r2
   237a6:	f7ff fe7f 	bl	234a8 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   237aa:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   237ae:	2700      	movs	r7, #0
   237b0:	e01d      	b.n	237ee <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
   237b2:	079b      	lsls	r3, r3, #30
   237b4:	d5f9      	bpl.n	237aa <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   237b6:	68a0      	ldr	r0, [r4, #8]
   237b8:	4621      	mov	r1, r4
   237ba:	f7ff fe5f 	bl	2347c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   237be:	7b63      	ldrb	r3, [r4, #13]
   237c0:	f023 0302 	bic.w	r3, r3, #2
   237c4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   237c6:	2300      	movs	r3, #0
   237c8:	60a3      	str	r3, [r4, #8]
   237ca:	e7ee      	b.n	237aa <z_thread_single_abort+0x7a>
   237cc:	f105 0018 	add.w	r0, r5, #24
   237d0:	f009 ff05 	bl	2d5de <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   237d4:	68a8      	ldr	r0, [r5, #8]
   237d6:	4629      	mov	r1, r5
   237d8:	f7ff fe50 	bl	2347c <z_priq_dumb_remove>
   237dc:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   237de:	60af      	str	r7, [r5, #8]
   237e0:	f023 0302 	bic.w	r3, r3, #2
   237e4:	736b      	strb	r3, [r5, #13]
   237e6:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   237e8:	4628      	mov	r0, r5
   237ea:	f7ff fea1 	bl	23530 <ready_thread>
	return list->head == list;
   237ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   237f0:	4545      	cmp	r5, r8
   237f2:	d001      	beq.n	237f8 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   237f4:	2d00      	cmp	r5, #0
   237f6:	d1e9      	bne.n	237cc <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   237f8:	4b0c      	ldr	r3, [pc, #48]	; (2382c <z_thread_single_abort+0xfc>)
   237fa:	689a      	ldr	r2, [r3, #8]
   237fc:	4b0c      	ldr	r3, [pc, #48]	; (23830 <z_thread_single_abort+0x100>)
   237fe:	429a      	cmp	r2, r3
   23800:	d102      	bne.n	23808 <z_thread_single_abort+0xd8>
			update_cache(1);
   23802:	2001      	movs	r0, #1
   23804:	f7ff fe50 	bl	234a8 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   23808:	7b63      	ldrb	r3, [r4, #13]
   2380a:	f043 0308 	orr.w	r3, r3, #8
   2380e:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   23810:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   23812:	f386 8811 	msr	BASEPRI, r6
   23816:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   2381a:	2b00      	cmp	r3, #0
   2381c:	d09b      	beq.n	23756 <z_thread_single_abort+0x26>
		fn_abort(thread);
   2381e:	4620      	mov	r0, r4
}
   23820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   23824:	4718      	bx	r3
   23826:	bf00      	nop
   23828:	200040cc 	.word	0x200040cc
   2382c:	200040a0 	.word	0x200040a0
   23830:	20001ed8 	.word	0x20001ed8

00023834 <unready_thread>:
{
   23834:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   23836:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2383a:	2b00      	cmp	r3, #0
{
   2383c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2383e:	da06      	bge.n	2384e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   23840:	4807      	ldr	r0, [pc, #28]	; (23860 <unready_thread+0x2c>)
   23842:	f7ff fe1b 	bl	2347c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   23846:	7b4b      	ldrb	r3, [r1, #13]
   23848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2384c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   2384e:	4b05      	ldr	r3, [pc, #20]	; (23864 <unready_thread+0x30>)
   23850:	6898      	ldr	r0, [r3, #8]
   23852:	1a43      	subs	r3, r0, r1
   23854:	4258      	negs	r0, r3
   23856:	4158      	adcs	r0, r3
}
   23858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2385c:	f7ff be24 	b.w	234a8 <update_cache>
   23860:	200040cc 	.word	0x200040cc
   23864:	200040a0 	.word	0x200040a0

00023868 <pend>:
{
   23868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2386c:	4606      	mov	r6, r0
   2386e:	4614      	mov	r4, r2
   23870:	461d      	mov	r5, r3
	__asm__ volatile(
   23872:	f04f 0320 	mov.w	r3, #32
   23876:	f3ef 8711 	mrs	r7, BASEPRI
   2387a:	f383 8811 	msr	BASEPRI, r3
   2387e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   23882:	f009 fdb2 	bl	2d3ea <add_to_waitq_locked>
	__asm__ volatile(
   23886:	f387 8811 	msr	BASEPRI, r7
   2388a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2388e:	1c6b      	adds	r3, r5, #1
   23890:	bf08      	it	eq
   23892:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   23896:	d008      	beq.n	238aa <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   23898:	4622      	mov	r2, r4
   2389a:	462b      	mov	r3, r5
   2389c:	f106 0018 	add.w	r0, r6, #24
   238a0:	4903      	ldr	r1, [pc, #12]	; (238b0 <pend+0x48>)
}
   238a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   238a6:	f000 bb13 	b.w	23ed0 <z_add_timeout>
   238aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   238ae:	bf00      	nop
   238b0:	0002d3ab 	.word	0x0002d3ab

000238b4 <z_pend_curr>:
{
   238b4:	b510      	push	{r4, lr}
	pending_current = _current;
   238b6:	4b07      	ldr	r3, [pc, #28]	; (238d4 <z_pend_curr+0x20>)
   238b8:	6898      	ldr	r0, [r3, #8]
   238ba:	4b07      	ldr	r3, [pc, #28]	; (238d8 <z_pend_curr+0x24>)
{
   238bc:	460c      	mov	r4, r1
	pending_current = _current;
   238be:	6018      	str	r0, [r3, #0]
{
   238c0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   238c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   238c6:	f7ff ffcf 	bl	23868 <pend>
   238ca:	4620      	mov	r0, r4
}
   238cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   238d0:	f7e2 bdd2 	b.w	6478 <arch_swap>
   238d4:	200040a0 	.word	0x200040a0
   238d8:	200040d4 	.word	0x200040d4

000238dc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   238dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   238de:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   238e0:	f009 fecd 	bl	2d67e <z_tick_get_32>
   238e4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   238e6:	f04f 0320 	mov.w	r3, #32
   238ea:	f3ef 8711 	mrs	r7, BASEPRI
   238ee:	f383 8811 	msr	BASEPRI, r3
   238f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   238f6:	4e0d      	ldr	r6, [pc, #52]	; (2392c <z_tick_sleep.part.0+0x50>)
   238f8:	4b0d      	ldr	r3, [pc, #52]	; (23930 <z_tick_sleep.part.0+0x54>)
   238fa:	68b0      	ldr	r0, [r6, #8]
   238fc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   238fe:	f7ff ff99 	bl	23834 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   23902:	68b0      	ldr	r0, [r6, #8]
   23904:	490b      	ldr	r1, [pc, #44]	; (23934 <z_tick_sleep.part.0+0x58>)
   23906:	462a      	mov	r2, r5
   23908:	17eb      	asrs	r3, r5, #31
   2390a:	3018      	adds	r0, #24
   2390c:	f000 fae0 	bl	23ed0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   23910:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   23912:	7b53      	ldrb	r3, [r2, #13]
   23914:	f043 0310 	orr.w	r3, r3, #16
   23918:	7353      	strb	r3, [r2, #13]
   2391a:	4638      	mov	r0, r7
   2391c:	f7e2 fdac 	bl	6478 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   23920:	f009 fead 	bl	2d67e <z_tick_get_32>
   23924:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   23926:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2392a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2392c:	200040a0 	.word	0x200040a0
   23930:	200040d4 	.word	0x200040d4
   23934:	0002d3ab 	.word	0x0002d3ab

00023938 <z_set_prio>:
{
   23938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2393a:	4604      	mov	r4, r0
   2393c:	f04f 0320 	mov.w	r3, #32
   23940:	f3ef 8711 	mrs	r7, BASEPRI
   23944:	f383 8811 	msr	BASEPRI, r3
   23948:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2394c:	7b43      	ldrb	r3, [r0, #13]
   2394e:	06db      	lsls	r3, r3, #27
   23950:	b24e      	sxtb	r6, r1
   23952:	d12c      	bne.n	239ae <z_set_prio+0x76>
		if (need_sched) {
   23954:	6983      	ldr	r3, [r0, #24]
   23956:	bb53      	cbnz	r3, 239ae <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   23958:	4d16      	ldr	r5, [pc, #88]	; (239b4 <z_set_prio+0x7c>)
   2395a:	4621      	mov	r1, r4
   2395c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   23960:	f7ff fd8c 	bl	2347c <z_priq_dumb_remove>
	return list->head == list;
   23964:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				thread->base.prio = prio;
   23966:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23968:	4283      	cmp	r3, r0
   2396a:	462a      	mov	r2, r5
   2396c:	d018      	beq.n	239a0 <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2396e:	b1bb      	cbz	r3, 239a0 <z_set_prio+0x68>
   23970:	6b29      	ldr	r1, [r5, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   23972:	f993 500e 	ldrsb.w	r5, [r3, #14]
   23976:	42b5      	cmp	r5, r6
   23978:	dd0d      	ble.n	23996 <z_set_prio+0x5e>
	node->prev = successor->prev;
   2397a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2397c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   23980:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   23982:	605c      	str	r4, [r3, #4]
			update_cache(1);
   23984:	2001      	movs	r0, #1
   23986:	f7ff fd8f 	bl	234a8 <update_cache>
   2398a:	2001      	movs	r0, #1
	__asm__ volatile(
   2398c:	f387 8811 	msr	BASEPRI, r7
   23990:	f3bf 8f6f 	isb	sy
}
   23994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   23996:	428b      	cmp	r3, r1
   23998:	d002      	beq.n	239a0 <z_set_prio+0x68>
   2399a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2399c:	2b00      	cmp	r3, #0
   2399e:	d1e8      	bne.n	23972 <z_set_prio+0x3a>
	node->prev = list->tail;
   239a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   239a2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   239a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
	node->next = list;
   239a6:	6020      	str	r0, [r4, #0]
	list->tail->next = node;
   239a8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   239aa:	6314      	str	r4, [r2, #48]	; 0x30
}
   239ac:	e7ea      	b.n	23984 <z_set_prio+0x4c>
			thread->base.prio = prio;
   239ae:	73a6      	strb	r6, [r4, #14]
   239b0:	2000      	movs	r0, #0
   239b2:	e7eb      	b.n	2398c <z_set_prio+0x54>
   239b4:	200040a0 	.word	0x200040a0

000239b8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   239b8:	4b04      	ldr	r3, [pc, #16]	; (239cc <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   239ba:	2100      	movs	r1, #0
   239bc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   239c0:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   239c4:	4608      	mov	r0, r1
   239c6:	f7ff bd07 	b.w	233d8 <k_sched_time_slice_set>
   239ca:	bf00      	nop
   239cc:	200040a0 	.word	0x200040a0

000239d0 <z_impl_k_yield>:
{
   239d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   239d2:	4c23      	ldr	r4, [pc, #140]	; (23a60 <z_impl_k_yield+0x90>)
   239d4:	4b23      	ldr	r3, [pc, #140]	; (23a64 <z_impl_k_yield+0x94>)
   239d6:	68a2      	ldr	r2, [r4, #8]
   239d8:	429a      	cmp	r2, r3
   239da:	d028      	beq.n	23a2e <z_impl_k_yield+0x5e>
	__asm__ volatile(
   239dc:	f04f 0320 	mov.w	r3, #32
   239e0:	f3ef 8511 	mrs	r5, BASEPRI
   239e4:	f383 8811 	msr	BASEPRI, r3
   239e8:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   239ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   239f0:	68a1      	ldr	r1, [r4, #8]
   239f2:	f7ff fd43 	bl	2347c <z_priq_dumb_remove>
	return list->head == list;
   239f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   239f8:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   239fa:	4282      	cmp	r2, r0
   239fc:	d028      	beq.n	23a50 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   239fe:	b33a      	cbz	r2, 23a50 <z_impl_k_yield+0x80>
   23a00:	6b26      	ldr	r6, [r4, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   23a02:	f993 100e 	ldrsb.w	r1, [r3, #14]
   23a06:	f992 700e 	ldrsb.w	r7, [r2, #14]
   23a0a:	428f      	cmp	r7, r1
   23a0c:	dd1b      	ble.n	23a46 <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   23a0e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   23a10:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   23a14:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   23a16:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   23a18:	7b5a      	ldrb	r2, [r3, #13]
   23a1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   23a1e:	735a      	strb	r2, [r3, #13]
			update_cache(1);
   23a20:	2001      	movs	r0, #1
   23a22:	f7ff fd41 	bl	234a8 <update_cache>
	__asm__ volatile(
   23a26:	f385 8811 	msr	BASEPRI, r5
   23a2a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23a2e:	f04f 0320 	mov.w	r3, #32
   23a32:	f3ef 8011 	mrs	r0, BASEPRI
   23a36:	f383 8811 	msr	BASEPRI, r3
   23a3a:	f3bf 8f6f 	isb	sy
}
   23a3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23a42:	f7e2 bd19 	b.w	6478 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   23a46:	4296      	cmp	r6, r2
   23a48:	d002      	beq.n	23a50 <z_impl_k_yield+0x80>
   23a4a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   23a4c:	2a00      	cmp	r2, #0
   23a4e:	d1da      	bne.n	23a06 <z_impl_k_yield+0x36>
	node->prev = list->tail;
   23a50:	6b22      	ldr	r2, [r4, #48]	; 0x30
   23a52:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   23a54:	6b22      	ldr	r2, [r4, #48]	; 0x30
	node->next = list;
   23a56:	6018      	str	r0, [r3, #0]
	list->tail->next = node;
   23a58:	6013      	str	r3, [r2, #0]
	list->tail = node;
   23a5a:	6323      	str	r3, [r4, #48]	; 0x30
}
   23a5c:	e7dc      	b.n	23a18 <z_impl_k_yield+0x48>
   23a5e:	bf00      	nop
   23a60:	200040a0 	.word	0x200040a0
   23a64:	20001ed8 	.word	0x20001ed8

00023a68 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   23a68:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23a6a:	3301      	adds	r3, #1
   23a6c:	bf08      	it	eq
   23a6e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   23a72:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23a74:	d106      	bne.n	23a84 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   23a76:	4b0b      	ldr	r3, [pc, #44]	; (23aa4 <z_impl_k_sleep+0x3c>)
   23a78:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   23a7a:	f7ff fe25 	bl	236c8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   23a7e:	f04f 30ff 	mov.w	r0, #4294967295
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   23a82:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   23a84:	4604      	mov	r4, r0
	if (ticks == 0) {
   23a86:	b948      	cbnz	r0, 23a9c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   23a88:	f7ff ffa2 	bl	239d0 <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   23a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   23a90:	fb84 3400 	smull	r3, r4, r4, r0
   23a94:	0bd8      	lsrs	r0, r3, #15
   23a96:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   23a9a:	e7f2      	b.n	23a82 <z_impl_k_sleep+0x1a>
   23a9c:	f7ff ff1e 	bl	238dc <z_tick_sleep.part.0>
   23aa0:	4604      	mov	r4, r0
   23aa2:	e7f3      	b.n	23a8c <z_impl_k_sleep+0x24>
   23aa4:	200040a0 	.word	0x200040a0

00023aa8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   23aa8:	4b01      	ldr	r3, [pc, #4]	; (23ab0 <z_impl_k_current_get+0x8>)
   23aaa:	6898      	ldr	r0, [r3, #8]
   23aac:	4770      	bx	lr
   23aae:	bf00      	nop
   23ab0:	200040a0 	.word	0x200040a0

00023ab4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   23ab4:	b538      	push	{r3, r4, r5, lr}
   23ab6:	4604      	mov	r4, r0
   23ab8:	f04f 0320 	mov.w	r3, #32
   23abc:	f3ef 8511 	mrs	r5, BASEPRI
   23ac0:	f383 8811 	msr	BASEPRI, r3
   23ac4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   23ac8:	f009 fcb7 	bl	2d43a <z_unpend_first_thread>

	if (thread != NULL) {
   23acc:	b148      	cbz	r0, 23ae2 <z_impl_k_sem_give+0x2e>
   23ace:	2200      	movs	r2, #0
   23ad0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   23ad2:	f009 fc5a 	bl	2d38a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   23ad6:	4629      	mov	r1, r5
   23ad8:	4808      	ldr	r0, [pc, #32]	; (23afc <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   23ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   23ade:	f7ff bca7 	b.w	23430 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   23ae2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23ae6:	429a      	cmp	r2, r3
   23ae8:	bf18      	it	ne
   23aea:	3301      	addne	r3, #1
   23aec:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   23aee:	2102      	movs	r1, #2
   23af0:	f104 0010 	add.w	r0, r4, #16
   23af4:	f009 feff 	bl	2d8f6 <z_handle_obj_poll_events>
}
   23af8:	e7ed      	b.n	23ad6 <z_impl_k_sem_give+0x22>
   23afa:	bf00      	nop
   23afc:	20009164 	.word	0x20009164

00023b00 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   23b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23b02:	4614      	mov	r4, r2
   23b04:	461d      	mov	r5, r3
   23b06:	f04f 0320 	mov.w	r3, #32
   23b0a:	f3ef 8111 	mrs	r1, BASEPRI
   23b0e:	f383 8811 	msr	BASEPRI, r3
   23b12:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   23b16:	6883      	ldr	r3, [r0, #8]
   23b18:	b143      	cbz	r3, 23b2c <z_impl_k_sem_take+0x2c>
		sem->count--;
   23b1a:	3b01      	subs	r3, #1
   23b1c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   23b1e:	f381 8811 	msr	BASEPRI, r1
   23b22:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   23b26:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   23b28:	b003      	add	sp, #12
   23b2a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23b2c:	ea54 0305 	orrs.w	r3, r4, r5
   23b30:	d106      	bne.n	23b40 <z_impl_k_sem_take+0x40>
   23b32:	f381 8811 	msr	BASEPRI, r1
   23b36:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   23b3a:	f06f 000f 	mvn.w	r0, #15
   23b3e:	e7f3      	b.n	23b28 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   23b40:	4602      	mov	r2, r0
   23b42:	e9cd 4500 	strd	r4, r5, [sp]
   23b46:	4802      	ldr	r0, [pc, #8]	; (23b50 <z_impl_k_sem_take+0x50>)
   23b48:	f7ff feb4 	bl	238b4 <z_pend_curr>
	return ret;
   23b4c:	e7ec      	b.n	23b28 <z_impl_k_sem_take+0x28>
   23b4e:	bf00      	nop
   23b50:	20009164 	.word	0x20009164

00023b54 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   23b54:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   23b56:	4c08      	ldr	r4, [pc, #32]	; (23b78 <k_sys_work_q_init+0x24>)
   23b58:	4908      	ldr	r1, [pc, #32]	; (23b7c <k_sys_work_q_init+0x28>)
   23b5a:	f04f 33ff 	mov.w	r3, #4294967295
   23b5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   23b62:	4620      	mov	r0, r4
   23b64:	f000 f8dc 	bl	23d20 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   23b68:	4905      	ldr	r1, [pc, #20]	; (23b80 <k_sys_work_q_init+0x2c>)
   23b6a:	f104 0018 	add.w	r0, r4, #24
   23b6e:	f009 fcb3 	bl	2d4d8 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   23b72:	2000      	movs	r0, #0
   23b74:	bd10      	pop	{r4, pc}
   23b76:	bf00      	nop
   23b78:	20001fd8 	.word	0x20001fd8
   23b7c:	2000bc80 	.word	0x2000bc80
   23b80:	0003379b 	.word	0x0003379b

00023b84 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23b84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   23b88:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   23b8c:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   23b90:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23b92:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   23b94:	2504      	movs	r5, #4
   23b96:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23b98:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
   23b9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23b9c:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
   23ba0:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23ba2:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   23ba6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   23baa:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
   23bae:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   23bb0:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23bb2:	9202      	str	r2, [sp, #8]
   23bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23bb6:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   23bb8:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23bbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23bbe:	9200      	str	r2, [sp, #0]
   23bc0:	4642      	mov	r2, r8
{
   23bc2:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23bc4:	f7e2 fcfe 	bl	65c4 <arch_new_thread>
	if (!_current) {
   23bc8:	4b05      	ldr	r3, [pc, #20]	; (23be0 <z_setup_new_thread+0x5c>)
   23bca:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   23bcc:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   23bd0:	b103      	cbz	r3, 23bd4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   23bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   23bd4:	6763      	str	r3, [r4, #116]	; 0x74
}
   23bd6:	4640      	mov	r0, r8
   23bd8:	b004      	add	sp, #16
   23bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23bde:	bf00      	nop
   23be0:	200040a0 	.word	0x200040a0

00023be4 <z_impl_k_thread_create>:
{
   23be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23be6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23be8:	2500      	movs	r5, #0
   23bea:	9505      	str	r5, [sp, #20]
   23bec:	9d10      	ldr	r5, [sp, #64]	; 0x40
   23bee:	9504      	str	r5, [sp, #16]
   23bf0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   23bf2:	9503      	str	r5, [sp, #12]
   23bf4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23bf6:	9502      	str	r5, [sp, #8]
{
   23bf8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23bfc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23bfe:	9501      	str	r5, [sp, #4]
   23c00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23c02:	9500      	str	r5, [sp, #0]
{
   23c04:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23c06:	f7ff ffbd 	bl	23b84 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23c0a:	1c7b      	adds	r3, r7, #1
   23c0c:	bf08      	it	eq
   23c0e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   23c12:	d005      	beq.n	23c20 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23c14:	ea56 0307 	orrs.w	r3, r6, r7
   23c18:	d105      	bne.n	23c26 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   23c1a:	4620      	mov	r0, r4
   23c1c:	f7ff fcbc 	bl	23598 <z_sched_start>
}
   23c20:	4620      	mov	r0, r4
   23c22:	b007      	add	sp, #28
   23c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23c26:	4904      	ldr	r1, [pc, #16]	; (23c38 <z_impl_k_thread_create+0x54>)
   23c28:	4632      	mov	r2, r6
   23c2a:	463b      	mov	r3, r7
   23c2c:	f104 0018 	add.w	r0, r4, #24
   23c30:	f000 f94e 	bl	23ed0 <z_add_timeout>
   23c34:	e7f4      	b.n	23c20 <z_impl_k_thread_create+0x3c>
   23c36:	bf00      	nop
   23c38:	0002d3ab 	.word	0x0002d3ab

00023c3c <z_init_static_threads>:
{
   23c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   23c40:	4e2a      	ldr	r6, [pc, #168]	; (23cec <z_init_static_threads+0xb0>)
   23c42:	4d2b      	ldr	r5, [pc, #172]	; (23cf0 <z_init_static_threads+0xb4>)
{
   23c44:	b086      	sub	sp, #24
   23c46:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   23c48:	42b5      	cmp	r5, r6
   23c4a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   23c4e:	d310      	bcc.n	23c72 <z_init_static_threads+0x36>
	k_sched_lock();
   23c50:	f7ff fc00 	bl	23454 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   23c54:	4c26      	ldr	r4, [pc, #152]	; (23cf0 <z_init_static_threads+0xb4>)
   23c56:	f8df a09c 	ldr.w	sl, [pc, #156]	; 23cf4 <z_init_static_threads+0xb8>
   23c5a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   23c5e:	f240 36e7 	movw	r6, #999	; 0x3e7
   23c62:	2700      	movs	r7, #0
   23c64:	4544      	cmp	r4, r8
   23c66:	d321      	bcc.n	23cac <z_init_static_threads+0x70>
}
   23c68:	b006      	add	sp, #24
   23c6a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   23c6e:	f7ff bc43 	b.w	234f8 <k_sched_unlock>
		z_setup_new_thread(
   23c72:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23c76:	9305      	str	r3, [sp, #20]
   23c78:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23c7c:	9304      	str	r3, [sp, #16]
   23c7e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23c82:	9303      	str	r3, [sp, #12]
   23c84:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23c88:	9302      	str	r3, [sp, #8]
   23c8a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23c8e:	9301      	str	r3, [sp, #4]
   23c90:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23c94:	9300      	str	r3, [sp, #0]
   23c96:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23c9a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23c9e:	f7ff ff71 	bl	23b84 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23ca2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23ca6:	65dd      	str	r5, [r3, #92]	; 0x5c
   23ca8:	4625      	mov	r5, r4
   23caa:	e7cd      	b.n	23c48 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23cae:	1c5a      	adds	r2, r3, #1
   23cb0:	d00d      	beq.n	23cce <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   23cb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23cb6:	4630      	mov	r0, r6
   23cb8:	4639      	mov	r1, r7
   23cba:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23cbe:	42b9      	cmp	r1, r7
   23cc0:	bf08      	it	eq
   23cc2:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   23cc4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23cc6:	d104      	bne.n	23cd2 <z_init_static_threads+0x96>
	z_sched_start(thread);
   23cc8:	4628      	mov	r0, r5
   23cca:	f7ff fc65 	bl	23598 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   23cce:	3430      	adds	r4, #48	; 0x30
   23cd0:	e7c8      	b.n	23c64 <z_init_static_threads+0x28>
   23cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23cd6:	2300      	movs	r3, #0
   23cd8:	f7dc fa62 	bl	1a0 <__aeabi_uldivmod>
   23cdc:	4602      	mov	r2, r0
   23cde:	460b      	mov	r3, r1
   23ce0:	f105 0018 	add.w	r0, r5, #24
   23ce4:	4651      	mov	r1, sl
   23ce6:	f000 f8f3 	bl	23ed0 <z_add_timeout>
   23cea:	e7f0      	b.n	23cce <z_init_static_threads+0x92>
   23cec:	20000d04 	.word	0x20000d04
   23cf0:	20000d04 	.word	0x20000d04
   23cf4:	0002d3ab 	.word	0x0002d3ab

00023cf8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   23cf8:	b508      	push	{r3, lr}
	__asm__ volatile(
   23cfa:	f04f 0320 	mov.w	r3, #32
   23cfe:	f3ef 8411 	mrs	r4, BASEPRI
   23d02:	f383 8811 	msr	BASEPRI, r3
   23d06:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   23d0a:	4b04      	ldr	r3, [pc, #16]	; (23d1c <z_self_abort+0x24>)
   23d0c:	6898      	ldr	r0, [r3, #8]
   23d0e:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   23d10:	f7ff fcda 	bl	236c8 <z_impl_k_thread_suspend>
   23d14:	4620      	mov	r0, r4
   23d16:	f7e2 fbaf 	bl	6478 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   23d1a:	bf00      	nop
   23d1c:	200040a0 	.word	0x200040a0

00023d20 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   23d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d24:	4604      	mov	r4, r0
   23d26:	b088      	sub	sp, #32
   23d28:	460d      	mov	r5, r1
   23d2a:	4616      	mov	r6, r2
   23d2c:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   23d2e:	f009 fa88 	bl	2d242 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   23d32:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23d36:	2200      	movs	r2, #0
   23d38:	2300      	movs	r3, #0
   23d3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23d3e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   23d42:	e9cd 2201 	strd	r2, r2, [sp, #4]
   23d46:	4b07      	ldr	r3, [pc, #28]	; (23d64 <k_work_q_start+0x44>)
   23d48:	9400      	str	r4, [sp, #0]
   23d4a:	4632      	mov	r2, r6
   23d4c:	4629      	mov	r1, r5
   23d4e:	4640      	mov	r0, r8
   23d50:	f7ff ff48 	bl	23be4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   23d54:	4904      	ldr	r1, [pc, #16]	; (23d68 <k_work_q_start+0x48>)
   23d56:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   23d58:	b008      	add	sp, #32
   23d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23d5e:	f009 bbbb 	b.w	2d4d8 <z_impl_k_thread_name_set>
   23d62:	bf00      	nop
   23d64:	00024653 	.word	0x00024653
   23d68:	000337a4 	.word	0x000337a4

00023d6c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   23d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23d70:	4606      	mov	r6, r0
   23d72:	460d      	mov	r5, r1
   23d74:	4690      	mov	r8, r2
   23d76:	4699      	mov	r9, r3
   23d78:	f04f 0320 	mov.w	r3, #32
   23d7c:	f3ef 8711 	mrs	r7, BASEPRI
   23d80:	f383 8811 	msr	BASEPRI, r3
   23d84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   23d88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   23d8a:	b17b      	cbz	r3, 23dac <k_delayed_work_submit_to_queue+0x40>
   23d8c:	4283      	cmp	r3, r0
   23d8e:	d128      	bne.n	23de2 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   23d90:	4628      	mov	r0, r5
   23d92:	f009 fbc1 	bl	2d518 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   23d96:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   23d9a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   23d9c:	d008      	beq.n	23db0 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   23d9e:	2800      	cmp	r0, #0
   23da0:	da07      	bge.n	23db2 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   23da2:	f387 8811 	msr	BASEPRI, r7
   23da6:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   23daa:	e00f      	b.n	23dcc <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   23dac:	2800      	cmp	r0, #0
   23dae:	d0ef      	beq.n	23d90 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   23db0:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23db2:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   23db6:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23db8:	d10b      	bne.n	23dd2 <k_delayed_work_submit_to_queue+0x66>
   23dba:	f387 8811 	msr	BASEPRI, r7
   23dbe:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   23dc2:	4629      	mov	r1, r5
   23dc4:	4630      	mov	r0, r6
   23dc6:	f009 fb8a 	bl	2d4de <k_work_submit_to_queue>
		return 0;
   23dca:	2400      	movs	r4, #0
}
   23dcc:	4620      	mov	r0, r4
   23dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   23dd2:	4905      	ldr	r1, [pc, #20]	; (23de8 <k_delayed_work_submit_to_queue+0x7c>)
   23dd4:	4642      	mov	r2, r8
   23dd6:	464b      	mov	r3, r9
   23dd8:	f105 0010 	add.w	r0, r5, #16
   23ddc:	f000 f878 	bl	23ed0 <z_add_timeout>
   23de0:	e7df      	b.n	23da2 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   23de2:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   23de6:	e7dc      	b.n	23da2 <k_delayed_work_submit_to_queue+0x36>
   23de8:	0002d50f 	.word	0x0002d50f

00023dec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   23dec:	4b03      	ldr	r3, [pc, #12]	; (23dfc <elapsed+0x10>)
   23dee:	681b      	ldr	r3, [r3, #0]
   23df0:	b90b      	cbnz	r3, 23df6 <elapsed+0xa>
   23df2:	f7e2 b995 	b.w	6120 <z_clock_elapsed>
}
   23df6:	2000      	movs	r0, #0
   23df8:	4770      	bx	lr
   23dfa:	bf00      	nop
   23dfc:	200040e0 	.word	0x200040e0

00023e00 <remove_timeout>:
{
   23e00:	b530      	push	{r4, r5, lr}
   23e02:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23e04:	b168      	cbz	r0, 23e22 <remove_timeout+0x22>
   23e06:	4a0a      	ldr	r2, [pc, #40]	; (23e30 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   23e08:	6852      	ldr	r2, [r2, #4]
   23e0a:	4290      	cmp	r0, r2
   23e0c:	d009      	beq.n	23e22 <remove_timeout+0x22>
	if (next(t) != NULL) {
   23e0e:	b143      	cbz	r3, 23e22 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   23e10:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23e14:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23e18:	1912      	adds	r2, r2, r4
   23e1a:	eb45 0101 	adc.w	r1, r5, r1
   23e1e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   23e22:	6842      	ldr	r2, [r0, #4]
   23e24:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   23e26:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23e28:	2300      	movs	r3, #0
	node->prev = NULL;
   23e2a:	e9c0 3300 	strd	r3, r3, [r0]
}
   23e2e:	bd30      	pop	{r4, r5, pc}
   23e30:	20000ae8 	.word	0x20000ae8

00023e34 <next_timeout>:

static int32_t next_timeout(void)
{
   23e34:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   23e36:	4b11      	ldr	r3, [pc, #68]	; (23e7c <next_timeout+0x48>)
   23e38:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e3a:	429c      	cmp	r4, r3
   23e3c:	bf08      	it	eq
   23e3e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   23e40:	f7ff ffd4 	bl	23dec <elapsed>
   23e44:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   23e46:	b1ac      	cbz	r4, 23e74 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   23e48:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   23e4c:	1b40      	subs	r0, r0, r5
   23e4e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   23e52:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   23e56:	f171 0300 	sbcs.w	r3, r1, #0
   23e5a:	da0b      	bge.n	23e74 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   23e5c:	2800      	cmp	r0, #0
   23e5e:	f171 0300 	sbcs.w	r3, r1, #0
   23e62:	da00      	bge.n	23e66 <next_timeout+0x32>
   23e64:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   23e66:	4b06      	ldr	r3, [pc, #24]	; (23e80 <next_timeout+0x4c>)
   23e68:	695b      	ldr	r3, [r3, #20]
   23e6a:	b113      	cbz	r3, 23e72 <next_timeout+0x3e>
   23e6c:	4298      	cmp	r0, r3
   23e6e:	bfa8      	it	ge
   23e70:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   23e72:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   23e74:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   23e78:	e7f5      	b.n	23e66 <next_timeout+0x32>
   23e7a:	bf00      	nop
   23e7c:	20000ae8 	.word	0x20000ae8
   23e80:	200040a0 	.word	0x200040a0

00023e84 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   23e84:	6803      	ldr	r3, [r0, #0]
{
   23e86:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   23e88:	b1eb      	cbz	r3, 23ec6 <timeout_rem+0x42>
	return list->head == list;
   23e8a:	4a10      	ldr	r2, [pc, #64]	; (23ecc <timeout_rem+0x48>)
   23e8c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23e8e:	4293      	cmp	r3, r2
   23e90:	d016      	beq.n	23ec0 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23e92:	6851      	ldr	r1, [r2, #4]
   23e94:	2400      	movs	r4, #0
   23e96:	2500      	movs	r5, #0
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   23e98:	b93b      	cbnz	r3, 23eaa <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   23e9a:	f7ff ffa7 	bl	23dec <elapsed>
   23e9e:	1a24      	subs	r4, r4, r0
   23ea0:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   23ea4:	4620      	mov	r0, r4
   23ea6:	4629      	mov	r1, r5
   23ea8:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   23eaa:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   23eae:	18a4      	adds	r4, r4, r2
   23eb0:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   23eb4:	4283      	cmp	r3, r0
   23eb6:	d0f0      	beq.n	23e9a <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   23eb8:	428b      	cmp	r3, r1
   23eba:	d0ee      	beq.n	23e9a <timeout_rem+0x16>
   23ebc:	681b      	ldr	r3, [r3, #0]
   23ebe:	e7eb      	b.n	23e98 <timeout_rem+0x14>
   23ec0:	2400      	movs	r4, #0
   23ec2:	2500      	movs	r5, #0
   23ec4:	e7e9      	b.n	23e9a <timeout_rem+0x16>
		return 0;
   23ec6:	2400      	movs	r4, #0
   23ec8:	2500      	movs	r5, #0
   23eca:	e7eb      	b.n	23ea4 <timeout_rem+0x20>
   23ecc:	20000ae8 	.word	0x20000ae8

00023ed0 <z_add_timeout>:
{
   23ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ed4:	9101      	str	r1, [sp, #4]
   23ed6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23ed8:	1c4b      	adds	r3, r1, #1
   23eda:	bf08      	it	eq
   23edc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   23ee0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23ee2:	d06c      	beq.n	23fbe <z_add_timeout+0xee>
	k_ticks_t ticks = timeout.ticks + 1;
   23ee4:	1c54      	adds	r4, r2, #1
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   23ee6:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   23eea:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   23eee:	f04f 3bff 	mov.w	fp, #4294967295
   23ef2:	ebb3 0804 	subs.w	r8, r3, r4
   23ef6:	eb6b 0905 	sbc.w	r9, fp, r5
   23efa:	f1b8 0f00 	cmp.w	r8, #0
   23efe:	f179 0300 	sbcs.w	r3, r9, #0
   23f02:	db0f      	blt.n	23f24 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   23f04:	f7ff ff72 	bl	23dec <elapsed>
   23f08:	4a33      	ldr	r2, [pc, #204]	; (23fd8 <z_add_timeout+0x108>)
   23f0a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   23f0e:	f06f 0301 	mvn.w	r3, #1
   23f12:	1a5b      	subs	r3, r3, r1
   23f14:	eb6b 020c 	sbc.w	r2, fp, ip
   23f18:	1b1e      	subs	r6, r3, r4
   23f1a:	eb62 0705 	sbc.w	r7, r2, r5
   23f1e:	1a34      	subs	r4, r6, r0
   23f20:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	to->fn = fn;
   23f24:	9b01      	ldr	r3, [sp, #4]
   23f26:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   23f2a:	f04f 0320 	mov.w	r3, #32
   23f2e:	f3ef 8611 	mrs	r6, BASEPRI
   23f32:	f383 8811 	msr	BASEPRI, r3
   23f36:	f3bf 8f6f 	isb	sy
		to->dticks = ticks + elapsed();
   23f3a:	f7ff ff57 	bl	23dec <elapsed>
	ticks = MAX(1, ticks);
   23f3e:	2c01      	cmp	r4, #1
   23f40:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   23f44:	4b25      	ldr	r3, [pc, #148]	; (23fdc <z_add_timeout+0x10c>)
   23f46:	bfb8      	it	lt
   23f48:	2401      	movlt	r4, #1
   23f4a:	681a      	ldr	r2, [r3, #0]
   23f4c:	bfb8      	it	lt
   23f4e:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   23f50:	1824      	adds	r4, r4, r0
   23f52:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23f56:	429a      	cmp	r2, r3
   23f58:	e9ca 4504 	strd	r4, r5, [sl, #16]
   23f5c:	d001      	beq.n	23f62 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23f5e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   23f60:	b952      	cbnz	r2, 23f78 <z_add_timeout+0xa8>
	node->prev = list->tail;
   23f62:	685a      	ldr	r2, [r3, #4]
   23f64:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   23f68:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   23f6a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   23f6e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   23f72:	f8c3 a004 	str.w	sl, [r3, #4]
}
   23f76:	e014      	b.n	23fa2 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   23f78:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   23f7c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   23f80:	4544      	cmp	r4, r8
   23f82:	eb75 0109 	sbcs.w	r1, r5, r9
   23f86:	da1d      	bge.n	23fc4 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   23f88:	ebb8 0004 	subs.w	r0, r8, r4
   23f8c:	eb69 0105 	sbc.w	r1, r9, r5
   23f90:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   23f94:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   23f96:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   23f9a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   23f9e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   23fa2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23fa4:	429a      	cmp	r2, r3
   23fa6:	d006      	beq.n	23fb6 <z_add_timeout+0xe6>
		if (to == first()) {
   23fa8:	4592      	cmp	sl, r2
   23faa:	d104      	bne.n	23fb6 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   23fac:	f7ff ff42 	bl	23e34 <next_timeout>
   23fb0:	2100      	movs	r1, #0
   23fb2:	f7e2 f853 	bl	605c <z_clock_set_timeout>
	__asm__ volatile(
   23fb6:	f386 8811 	msr	BASEPRI, r6
   23fba:	f3bf 8f6f 	isb	sy
}
   23fbe:	b003      	add	sp, #12
   23fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   23fc4:	ebb4 0008 	subs.w	r0, r4, r8
   23fc8:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   23fcc:	42ba      	cmp	r2, r7
   23fce:	e9ca 0104 	strd	r0, r1, [sl, #16]
   23fd2:	d0c6      	beq.n	23f62 <z_add_timeout+0x92>
   23fd4:	6812      	ldr	r2, [r2, #0]
   23fd6:	e7c3      	b.n	23f60 <z_add_timeout+0x90>
   23fd8:	20002070 	.word	0x20002070
   23fdc:	20000ae8 	.word	0x20000ae8

00023fe0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   23fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fe4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   23fe6:	f7ff fb2d 	bl	23644 <z_time_slice>
	__asm__ volatile(
   23fea:	f04f 0320 	mov.w	r3, #32
   23fee:	f3ef 8411 	mrs	r4, BASEPRI
   23ff2:	f383 8811 	msr	BASEPRI, r3
   23ff6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   23ffa:	4d2c      	ldr	r5, [pc, #176]	; (240ac <z_clock_announce+0xcc>)
   23ffc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 240b0 <z_clock_announce+0xd0>
	return list->head == list;
   24000:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 240b4 <z_clock_announce+0xd4>
   24004:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   24006:	4651      	mov	r1, sl
   24008:	f8d5 c000 	ldr.w	ip, [r5]
   2400c:	f8db 0000 	ldr.w	r0, [fp]
   24010:	4662      	mov	r2, ip
   24012:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24014:	4558      	cmp	r0, fp
   24016:	e9da 8900 	ldrd	r8, r9, [sl]
   2401a:	e9cd 2300 	strd	r2, r3, [sp]
   2401e:	d00d      	beq.n	2403c <z_clock_announce+0x5c>
   24020:	b160      	cbz	r0, 2403c <z_clock_announce+0x5c>
   24022:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   24026:	45b4      	cmp	ip, r6
   24028:	41bb      	sbcs	r3, r7
   2402a:	da1e      	bge.n	2406a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2402c:	9b00      	ldr	r3, [sp, #0]
   2402e:	ebb6 0c03 	subs.w	ip, r6, r3
   24032:	9b01      	ldr	r3, [sp, #4]
   24034:	eb67 0603 	sbc.w	r6, r7, r3
   24038:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   2403c:	9b00      	ldr	r3, [sp, #0]
   2403e:	eb13 0208 	adds.w	r2, r3, r8
   24042:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   24044:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   24048:	eb43 0309 	adc.w	r3, r3, r9
   2404c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   24050:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   24052:	f7ff feef 	bl	23e34 <next_timeout>
   24056:	4631      	mov	r1, r6
   24058:	f7e2 f800 	bl	605c <z_clock_set_timeout>
	__asm__ volatile(
   2405c:	f384 8811 	msr	BASEPRI, r4
   24060:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   24064:	b003      	add	sp, #12
   24066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   2406a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   2406e:	f04f 0200 	mov.w	r2, #0
   24072:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   24076:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   2407a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   2407e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   24082:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   24086:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   24088:	f7ff feba 	bl	23e00 <remove_timeout>
   2408c:	f384 8811 	msr	BASEPRI, r4
   24090:	f3bf 8f6f 	isb	sy
		t->fn(t);
   24094:	6883      	ldr	r3, [r0, #8]
   24096:	4798      	blx	r3
	__asm__ volatile(
   24098:	f04f 0320 	mov.w	r3, #32
   2409c:	f3ef 8411 	mrs	r4, BASEPRI
   240a0:	f383 8811 	msr	BASEPRI, r3
   240a4:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   240a8:	4901      	ldr	r1, [pc, #4]	; (240b0 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   240aa:	e7ad      	b.n	24008 <z_clock_announce+0x28>
   240ac:	200040e0 	.word	0x200040e0
   240b0:	20002070 	.word	0x20002070
   240b4:	20000ae8 	.word	0x20000ae8

000240b8 <z_tick_get>:

int64_t z_tick_get(void)
{
   240b8:	b510      	push	{r4, lr}
   240ba:	f04f 0320 	mov.w	r3, #32
   240be:	f3ef 8411 	mrs	r4, BASEPRI
   240c2:	f383 8811 	msr	BASEPRI, r3
   240c6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   240ca:	f7e2 f829 	bl	6120 <z_clock_elapsed>
   240ce:	4b06      	ldr	r3, [pc, #24]	; (240e8 <z_tick_get+0x30>)
   240d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   240d4:	1812      	adds	r2, r2, r0
   240d6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   240da:	f384 8811 	msr	BASEPRI, r4
   240de:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   240e2:	4610      	mov	r0, r2
   240e4:	4619      	mov	r1, r3
   240e6:	bd10      	pop	{r4, pc}
   240e8:	20002070 	.word	0x20002070

000240ec <z_impl_k_poll>:
#error CONFIG_POLL and CONFIG_KERNEL_COHERENCE are not compatible
#endif

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   240ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   240f0:	b089      	sub	sp, #36	; 0x24
   240f2:	461f      	mov	r7, r3
	k_spinlock_key_t key;

	/* FIXME: this shared data is stack-allocated and needs
	 * proper treatment to be compatible with KERNEL_COHERENCE.
	 */
	struct _poller poller = { .is_polling = true,
   240f4:	2301      	movs	r3, #1
   240f6:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   240fa:	4b29      	ldr	r3, [pc, #164]	; (241a0 <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
   240fc:	689b      	ldr	r3, [r3, #8]
   240fe:	9306      	str	r3, [sp, #24]
   24100:	4b28      	ldr	r3, [pc, #160]	; (241a4 <z_impl_k_poll+0xb8>)
   24102:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   24104:	ea52 0307 	orrs.w	r3, r2, r7
{
   24108:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
   2410a:	bf0c      	ite	eq
   2410c:	2301      	moveq	r3, #1
   2410e:	2300      	movne	r3, #0
   24110:	aa05      	add	r2, sp, #20
{
   24112:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
   24114:	f009 fb7f 	bl	2d816 <register_events>
   24118:	4680      	mov	r8, r0
	__asm__ volatile(
   2411a:	f04f 0320 	mov.w	r3, #32
   2411e:	f3ef 8911 	mrs	r9, BASEPRI
   24122:	f383 8811 	msr	BASEPRI, r3
   24126:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   2412a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2412e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   24132:	b963      	cbnz	r3, 2414e <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   24134:	4601      	mov	r1, r0
   24136:	464a      	mov	r2, r9
   24138:	4628      	mov	r0, r5
   2413a:	f009 facf 	bl	2d6dc <clear_event_registrations>
	__asm__ volatile(
   2413e:	f389 8811 	msr	BASEPRI, r9
   24142:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   24146:	4620      	mov	r0, r4
   24148:	b009      	add	sp, #36	; 0x24
   2414a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   2414e:	2300      	movs	r3, #0
   24150:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24154:	ea56 0307 	orrs.w	r3, r6, r7
   24158:	d106      	bne.n	24168 <z_impl_k_poll+0x7c>
   2415a:	f389 8811 	msr	BASEPRI, r9
   2415e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   24162:	f06f 040a 	mvn.w	r4, #10
   24166:	e7ee      	b.n	24146 <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   24168:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2416a:	e9cd 6700 	strd	r6, r7, [sp]
   2416e:	4649      	mov	r1, r9
   24170:	480d      	ldr	r0, [pc, #52]	; (241a8 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   24172:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   24176:	f7ff fb9d 	bl	238b4 <z_pend_curr>
   2417a:	4604      	mov	r4, r0
	__asm__ volatile(
   2417c:	f04f 0320 	mov.w	r3, #32
   24180:	f3ef 8611 	mrs	r6, BASEPRI
   24184:	f383 8811 	msr	BASEPRI, r3
   24188:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2418c:	4632      	mov	r2, r6
   2418e:	4641      	mov	r1, r8
   24190:	4628      	mov	r0, r5
   24192:	f009 faa3 	bl	2d6dc <clear_event_registrations>
	__asm__ volatile(
   24196:	f386 8811 	msr	BASEPRI, r6
   2419a:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2419e:	e7d2      	b.n	24146 <z_impl_k_poll+0x5a>
   241a0:	200040a0 	.word	0x200040a0
   241a4:	0002d769 	.word	0x0002d769
   241a8:	20009164 	.word	0x20009164

000241ac <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   241ac:	b538      	push	{r3, r4, r5, lr}
   241ae:	4603      	mov	r3, r0
	__asm__ volatile(
   241b0:	f04f 0220 	mov.w	r2, #32
   241b4:	f3ef 8511 	mrs	r5, BASEPRI
   241b8:	f382 8811 	msr	BASEPRI, r2
   241bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   241c0:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   241c2:	2101      	movs	r1, #1
   241c4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   241c6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   241c8:	4283      	cmp	r3, r0
   241ca:	d106      	bne.n	241da <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   241cc:	f385 8811 	msr	BASEPRI, r5
   241d0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   241d4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   241d6:	4620      	mov	r0, r4
   241d8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   241da:	e9d0 3200 	ldrd	r3, r2, [r0]
   241de:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   241e0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   241e2:	2300      	movs	r3, #0
	node->prev = NULL;
   241e4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   241e8:	f009 faa3 	bl	2d732 <signal_poll_event>
	z_reschedule(&lock, key);
   241ec:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   241ee:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   241f0:	4801      	ldr	r0, [pc, #4]	; (241f8 <z_impl_k_poll_signal_raise+0x4c>)
   241f2:	f7ff f91d 	bl	23430 <z_reschedule>
	return rc;
   241f6:	e7ee      	b.n	241d6 <z_impl_k_poll_signal_raise+0x2a>
   241f8:	20009164 	.word	0x20009164

000241fc <k_malloc>:
K_MEM_POOL_DEFINE(_heap_mem_pool, CONFIG_HEAP_MEM_POOL_MIN_SIZE,
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
   241fc:	4601      	mov	r1, r0
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   241fe:	4801      	ldr	r0, [pc, #4]	; (24204 <k_malloc+0x8>)
   24200:	f009 bb87 	b.w	2d912 <k_mem_pool_malloc>
   24204:	20000af0 	.word	0x20000af0

00024208 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   24208:	b510      	push	{r4, lr}
   2420a:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   2420c:	f009 f95a 	bl	2d4c4 <k_is_in_isr>
   24210:	b948      	cbnz	r0, 24226 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   24212:	4b06      	ldr	r3, [pc, #24]	; (2422c <z_thread_malloc+0x24>)
   24214:	689b      	ldr	r3, [r3, #8]
   24216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   24218:	b13b      	cbz	r3, 2422a <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   2421a:	4621      	mov	r1, r4
   2421c:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   2421e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   24222:	f009 bb76 	b.w	2d912 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   24226:	4b02      	ldr	r3, [pc, #8]	; (24230 <z_thread_malloc+0x28>)
   24228:	e7f7      	b.n	2421a <z_thread_malloc+0x12>
}
   2422a:	bd10      	pop	{r4, pc}
   2422c:	200040a0 	.word	0x200040a0
   24230:	20000af0 	.word	0x20000af0

00024234 <main>:

#include "mesh.h"

void main(void)
{
	mesh_start();
   24234:	f7df b96c 	b.w	3510 <mesh_start>

00024238 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   24238:	0413      	lsls	r3, r2, #16
{
   2423a:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   2423c:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2423e:	d507      	bpl.n	24250 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   24240:	68c5      	ldr	r5, [r0, #12]
   24242:	2301      	movs	r3, #1
   24244:	682d      	ldr	r5, [r5, #0]
   24246:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   24248:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2424a:	bf18      	it	ne
   2424c:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   24250:	69a4      	ldr	r4, [r4, #24]
   24252:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   24256:	46a4      	mov	ip, r4
   24258:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   2425c:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2425e:	4760      	bx	ip

00024260 <gpio_pin_configure>:
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   24260:	04d3      	lsls	r3, r2, #19
{
   24262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct gpio_driver_data *data =
   24266:	e9d0 8702 	ldrd	r8, r7, [r0, #8]
{
   2426a:	4605      	mov	r5, r0
   2426c:	460e      	mov	r6, r1
   2426e:	4614      	mov	r4, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   24270:	d506      	bpl.n	24280 <gpio_pin_configure+0x20>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   24272:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   24276:	d003      	beq.n	24280 <gpio_pin_configure+0x20>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   24278:	07d0      	lsls	r0, r2, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   2427a:	bf48      	it	mi
   2427c:	f482 54e0 	eormi.w	r4, r2, #7168	; 0x1c00
	return api->pin_configure(port, pin, flags);
   24280:	68ab      	ldr	r3, [r5, #8]
   24282:	4622      	mov	r2, r4
   24284:	681b      	ldr	r3, [r3, #0]
   24286:	4631      	mov	r1, r6
   24288:	4628      	mov	r0, r5
   2428a:	4798      	blx	r3
	if (ret != 0) {
   2428c:	b9b0      	cbnz	r0, 242bc <gpio_pin_configure+0x5c>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2428e:	683b      	ldr	r3, [r7, #0]
   24290:	2201      	movs	r2, #1
   24292:	07e1      	lsls	r1, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   24294:	fa02 f206 	lsl.w	r2, r2, r6
   24298:	bf4c      	ite	mi
   2429a:	4313      	orrmi	r3, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2429c:	4393      	bicpl	r3, r2
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
   2429e:	f414 4fc0 	tst.w	r4, #24576	; 0x6000
   242a2:	603b      	str	r3, [r7, #0]
   242a4:	d00a      	beq.n	242bc <gpio_pin_configure+0x5c>
	    && (api->pin_interrupt_configure != NULL)) {
   242a6:	f8d8 3018 	ldr.w	r3, [r8, #24]
   242aa:	b13b      	cbz	r3, 242bc <gpio_pin_configure+0x5c>
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   242ac:	f424 2200 	bic.w	r2, r4, #524288	; 0x80000
   242b0:	4631      	mov	r1, r6
   242b2:	4628      	mov	r0, r5
}
   242b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   242b8:	f7ff bfbe 	b.w	24238 <z_impl_gpio_pin_interrupt_configure>
}
   242bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000242c0 <first_name_len>:
{
   242c0:	4602      	mov	r2, r0
	for (len = 0; *name; name++, len++) {
   242c2:	2000      	movs	r0, #0
   242c4:	5c13      	ldrb	r3, [r2, r0]
   242c6:	b903      	cbnz	r3, 242ca <first_name_len+0xa>
}
   242c8:	4770      	bx	lr
		switch (*name) {
   242ca:	2b20      	cmp	r3, #32
   242cc:	d0fc      	beq.n	242c8 <first_name_len+0x8>
   242ce:	2b2c      	cmp	r3, #44	; 0x2c
   242d0:	d0fa      	beq.n	242c8 <first_name_len+0x8>
   242d2:	2b0a      	cmp	r3, #10
   242d4:	d0f8      	beq.n	242c8 <first_name_len+0x8>
	for (len = 0; *name; name++, len++) {
   242d6:	3001      	adds	r0, #1
   242d8:	e7f4      	b.n	242c4 <first_name_len+0x4>

000242da <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   242da:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   242dc:	f04f 0c0a 	mov.w	ip, #10
{
   242e0:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   242e2:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   242e4:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   242e6:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   242e8:	b111      	cbz	r1, 242f0 <u8_to_dec+0x16>
   242ea:	3e01      	subs	r6, #1
   242ec:	d101      	bne.n	242f2 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   242ee:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   242f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   242f2:	42a2      	cmp	r2, r4
		digit = value / divisor;
   242f4:	fbb2 f7f4 	udiv	r7, r2, r4
   242f8:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   242fa:	d202      	bcs.n	24302 <u8_to_dec+0x28>
   242fc:	2c01      	cmp	r4, #1
   242fe:	d000      	beq.n	24302 <u8_to_dec+0x28>
   24300:	b130      	cbz	r0, 24310 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   24302:	3330      	adds	r3, #48	; 0x30
   24304:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   24308:	3901      	subs	r1, #1
			num_digits++;
   2430a:	1c43      	adds	r3, r0, #1
			buflen--;
   2430c:	b2c9      	uxtb	r1, r1
			num_digits++;
   2430e:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   24310:	fb04 2217 	mls	r2, r4, r7, r2
   24314:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   24316:	fbb4 f4fc 	udiv	r4, r4, ip
   2431a:	e7e5      	b.n	242e8 <u8_to_dec+0xe>

0002431c <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2431c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   24320:	b2db      	uxtb	r3, r3
   24322:	2b09      	cmp	r3, #9
   24324:	d802      	bhi.n	2432c <char2hex+0x10>
		*x = c - '0';
   24326:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   24328:	2000      	movs	r0, #0
   2432a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2432c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   24330:	2b05      	cmp	r3, #5
   24332:	d802      	bhi.n	2433a <char2hex+0x1e>
		*x = c - 'a' + 10;
   24334:	3857      	subs	r0, #87	; 0x57
   24336:	7008      	strb	r0, [r1, #0]
   24338:	e7f6      	b.n	24328 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2433a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2433e:	2b05      	cmp	r3, #5
   24340:	d801      	bhi.n	24346 <char2hex+0x2a>
		*x = c - 'A' + 10;
   24342:	3837      	subs	r0, #55	; 0x37
   24344:	e7f7      	b.n	24336 <char2hex+0x1a>
		return -EINVAL;
   24346:	f06f 0015 	mvn.w	r0, #21
}
   2434a:	4770      	bx	lr

0002434c <hex2char>:

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   2434c:	2809      	cmp	r0, #9
   2434e:	d803      	bhi.n	24358 <hex2char+0xc>
		*c = x + '0';
   24350:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   24352:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   24354:	2000      	movs	r0, #0
   24356:	4770      	bx	lr
	} else  if (x <= 15) {
   24358:	280f      	cmp	r0, #15
   2435a:	d801      	bhi.n	24360 <hex2char+0x14>
		*c = x - 10 + 'a';
   2435c:	3057      	adds	r0, #87	; 0x57
   2435e:	e7f8      	b.n	24352 <hex2char+0x6>
		return -EINVAL;
   24360:	f06f 0015 	mvn.w	r0, #21
}
   24364:	4770      	bx	lr

00024366 <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
	if ((hexlen + 1) < buflen * 2) {
   24366:	3301      	adds	r3, #1
   24368:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   2436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24370:	460c      	mov	r4, r1
	if ((hexlen + 1) < buflen * 2) {
   24372:	ea4f 0641 	mov.w	r6, r1, lsl #1
   24376:	d203      	bcs.n	24380 <bin2hex+0x1a>
		return 0;
   24378:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   2437a:	4630      	mov	r0, r6
   2437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24380:	4603      	mov	r3, r0
   24382:	1c55      	adds	r5, r2, #1
   24384:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < buflen; i++) {
   24386:	42bb      	cmp	r3, r7
   24388:	d103      	bne.n	24392 <bin2hex+0x2c>
	hex[2 * buflen] = '\0';
   2438a:	2300      	movs	r3, #0
   2438c:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   24390:	e7f3      	b.n	2437a <bin2hex+0x14>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   24392:	7818      	ldrb	r0, [r3, #0]
   24394:	1e69      	subs	r1, r5, #1
   24396:	0900      	lsrs	r0, r0, #4
   24398:	4698      	mov	r8, r3
   2439a:	f7ff ffd7 	bl	2434c <hex2char>
   2439e:	2800      	cmp	r0, #0
   243a0:	dbea      	blt.n	24378 <bin2hex+0x12>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   243a2:	f898 0000 	ldrb.w	r0, [r8]
   243a6:	4629      	mov	r1, r5
   243a8:	f000 000f 	and.w	r0, r0, #15
   243ac:	3301      	adds	r3, #1
   243ae:	f7ff ffcd 	bl	2434c <hex2char>
   243b2:	2800      	cmp	r0, #0
   243b4:	f105 0502 	add.w	r5, r5, #2
   243b8:	dae5      	bge.n	24386 <bin2hex+0x20>
   243ba:	e7dd      	b.n	24378 <bin2hex+0x12>

000243bc <hex2bin>:

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   243bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   243be:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   243c0:	f001 0001 	and.w	r0, r1, #1
   243c4:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   243c8:	429d      	cmp	r5, r3
   243ca:	ea4f 0651 	mov.w	r6, r1, lsr #1
   243ce:	d903      	bls.n	243d8 <hex2bin+0x1c>
		return 0;
   243d0:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   243d2:	4628      	mov	r0, r5
   243d4:	b003      	add	sp, #12
   243d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   243d8:	b158      	cbz	r0, 243f2 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   243da:	7820      	ldrb	r0, [r4, #0]
   243dc:	f10d 0107 	add.w	r1, sp, #7
   243e0:	f7ff ff9c 	bl	2431c <char2hex>
   243e4:	2800      	cmp	r0, #0
   243e6:	dbf3      	blt.n	243d0 <hex2bin+0x14>
		buf[0] = dec;
   243e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   243ec:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   243f0:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   243f2:	3401      	adds	r4, #1
   243f4:	4416      	add	r6, r2
   243f6:	42b2      	cmp	r2, r6
   243f8:	d0eb      	beq.n	243d2 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   243fa:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   243fe:	f10d 0107 	add.w	r1, sp, #7
   24402:	f7ff ff8b 	bl	2431c <char2hex>
   24406:	2800      	cmp	r0, #0
   24408:	dbe2      	blt.n	243d0 <hex2bin+0x14>
		buf[i] = dec << 4;
   2440a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2440e:	011b      	lsls	r3, r3, #4
   24410:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   24412:	f814 0b02 	ldrb.w	r0, [r4], #2
   24416:	f10d 0107 	add.w	r1, sp, #7
   2441a:	f7ff ff7f 	bl	2431c <char2hex>
   2441e:	2800      	cmp	r0, #0
   24420:	dbd6      	blt.n	243d0 <hex2bin+0x14>
		buf[i] += dec;
   24422:	7813      	ldrb	r3, [r2, #0]
   24424:	f89d 1007 	ldrb.w	r1, [sp, #7]
   24428:	440b      	add	r3, r1
   2442a:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2442e:	e7e2      	b.n	243f6 <hex2bin+0x3a>

00024430 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   24430:	4603      	mov	r3, r0
   24432:	b140      	cbz	r0, 24446 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24434:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24436:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2443a:	2a02      	cmp	r2, #2
   2443c:	d006      	beq.n	2444c <sys_notify_validate+0x1c>
   2443e:	2a03      	cmp	r2, #3
   24440:	d004      	beq.n	2444c <sys_notify_validate+0x1c>
   24442:	2a01      	cmp	r2, #1
   24444:	d005      	beq.n	24452 <sys_notify_validate+0x22>
		return -EINVAL;
   24446:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2444a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2444c:	681a      	ldr	r2, [r3, #0]
   2444e:	2a00      	cmp	r2, #0
   24450:	d0f9      	beq.n	24446 <sys_notify_validate+0x16>
		notify->result = 0;
   24452:	2000      	movs	r0, #0
   24454:	6098      	str	r0, [r3, #8]
   24456:	4770      	bx	lr

00024458 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24458:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2445a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2445e:	2a02      	cmp	r2, #2
{
   24460:	b510      	push	{r4, lr}
   24462:	4603      	mov	r3, r0
	notify->result = res;
   24464:	6081      	str	r1, [r0, #8]
	switch (method) {
   24466:	d00a      	beq.n	2447e <sys_notify_finalize+0x26>
   24468:	2a03      	cmp	r2, #3
   2446a:	d10b      	bne.n	24484 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2446c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2446e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24470:	2200      	movs	r2, #0
   24472:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24474:	b108      	cbz	r0, 2447a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   24476:	f7ff fe99 	bl	241ac <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2447a:	4620      	mov	r0, r4
   2447c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2447e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   24480:	2400      	movs	r4, #0
		break;
   24482:	e7f5      	b.n	24470 <sys_notify_finalize+0x18>
	switch (method) {
   24484:	2400      	movs	r4, #0
   24486:	4620      	mov	r0, r4
   24488:	e7f2      	b.n	24470 <sys_notify_finalize+0x18>

0002448a <arch_printk_char_out>:
}
   2448a:	2000      	movs	r0, #0
   2448c:	4770      	bx	lr

0002448e <str_out>:
{
   2448e:	b530      	push	{r4, r5, lr}
   24490:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24492:	680c      	ldr	r4, [r1, #0]
   24494:	1c55      	adds	r5, r2, #1
   24496:	b114      	cbz	r4, 2449e <str_out+0x10>
   24498:	684b      	ldr	r3, [r1, #4]
   2449a:	4293      	cmp	r3, r2
   2449c:	dc01      	bgt.n	244a2 <str_out+0x14>
		ctx->count++;
   2449e:	608d      	str	r5, [r1, #8]
}
   244a0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   244a2:	3b01      	subs	r3, #1
   244a4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   244a6:	bf08      	it	eq
   244a8:	2200      	moveq	r2, #0
   244aa:	608d      	str	r5, [r1, #8]
   244ac:	bf0c      	ite	eq
   244ae:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   244b0:	54a0      	strbne	r0, [r4, r2]
   244b2:	e7f5      	b.n	244a0 <str_out+0x12>

000244b4 <printk>:
{
   244b4:	b40f      	push	{r0, r1, r2, r3}
   244b6:	b507      	push	{r0, r1, r2, lr}
   244b8:	a904      	add	r1, sp, #16
   244ba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   244be:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   244c0:	f7df fe1e 	bl	4100 <vprintk>
}
   244c4:	b003      	add	sp, #12
   244c6:	f85d eb04 	ldr.w	lr, [sp], #4
   244ca:	b004      	add	sp, #16
   244cc:	4770      	bx	lr

000244ce <snprintk>:
{
   244ce:	b40c      	push	{r2, r3}
   244d0:	b507      	push	{r0, r1, r2, lr}
   244d2:	ab04      	add	r3, sp, #16
   244d4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   244d8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   244da:	f7df fe1f 	bl	411c <vsnprintk>
}
   244de:	b003      	add	sp, #12
   244e0:	f85d eb04 	ldr.w	lr, [sp], #4
   244e4:	b002      	add	sp, #8
   244e6:	4770      	bx	lr

000244e8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   244e8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   244ea:	f013 0307 	ands.w	r3, r3, #7
   244ee:	d105      	bne.n	244fc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   244f0:	6803      	ldr	r3, [r0, #0]
   244f2:	2b00      	cmp	r3, #0
		evt = EVT_START;
   244f4:	bf0c      	ite	eq
   244f6:	2000      	moveq	r0, #0
   244f8:	2003      	movne	r0, #3
   244fa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   244fc:	2b02      	cmp	r3, #2
   244fe:	d105      	bne.n	2450c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24500:	8b43      	ldrh	r3, [r0, #26]
   24502:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   24504:	bf14      	ite	ne
   24506:	2000      	movne	r0, #0
   24508:	2004      	moveq	r0, #4
   2450a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2450c:	2b01      	cmp	r3, #1
   2450e:	d105      	bne.n	2451c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24510:	6803      	ldr	r3, [r0, #0]
   24512:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   24514:	bf0c      	ite	eq
   24516:	2000      	moveq	r0, #0
   24518:	2005      	movne	r0, #5
   2451a:	4770      	bx	lr
	int evt = EVT_NOP;
   2451c:	2000      	movs	r0, #0
}
   2451e:	4770      	bx	lr

00024520 <notify_one>:
{
   24520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24524:	460d      	mov	r5, r1
   24526:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24528:	4619      	mov	r1, r3
   2452a:	1d28      	adds	r0, r5, #4
{
   2452c:	4690      	mov	r8, r2
   2452e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24530:	f7ff ff92 	bl	24458 <sys_notify_finalize>
	if (cb) {
   24534:	4604      	mov	r4, r0
   24536:	b138      	cbz	r0, 24548 <notify_one+0x28>
		cb(mgr, cli, state, res);
   24538:	4633      	mov	r3, r6
   2453a:	4642      	mov	r2, r8
   2453c:	4629      	mov	r1, r5
   2453e:	4638      	mov	r0, r7
   24540:	46a4      	mov	ip, r4
}
   24542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   24546:	4760      	bx	ip
}
   24548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002454c <transition_complete>:
{
   2454c:	b410      	push	{r4}
	__asm__ volatile(
   2454e:	f04f 0420 	mov.w	r4, #32
   24552:	f3ef 8211 	mrs	r2, BASEPRI
   24556:	f384 8811 	msr	BASEPRI, r4
   2455a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2455e:	6141      	str	r1, [r0, #20]
}
   24560:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   24562:	2101      	movs	r1, #1
   24564:	f7df bdee 	b.w	4144 <process_event>

00024568 <validate_args>:
{
   24568:	b510      	push	{r4, lr}
   2456a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2456c:	b140      	cbz	r0, 24580 <validate_args+0x18>
   2456e:	b139      	cbz	r1, 24580 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   24570:	1d08      	adds	r0, r1, #4
   24572:	f7ff ff5d 	bl	24430 <sys_notify_validate>
	if ((rv == 0)
   24576:	b928      	cbnz	r0, 24584 <validate_args+0x1c>
	    && ((cli->notify.flags
   24578:	68a3      	ldr	r3, [r4, #8]
   2457a:	f033 0303 	bics.w	r3, r3, #3
   2457e:	d001      	beq.n	24584 <validate_args+0x1c>
		rv = -EINVAL;
   24580:	f06f 0015 	mvn.w	r0, #21
}
   24584:	bd10      	pop	{r4, pc}

00024586 <onoff_manager_init>:
{
   24586:	b538      	push	{r3, r4, r5, lr}
   24588:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2458a:	4605      	mov	r5, r0
   2458c:	b158      	cbz	r0, 245a6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2458e:	b151      	cbz	r1, 245a6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   24590:	680b      	ldr	r3, [r1, #0]
   24592:	b143      	cbz	r3, 245a6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   24594:	684b      	ldr	r3, [r1, #4]
   24596:	b133      	cbz	r3, 245a6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24598:	221c      	movs	r2, #28
   2459a:	2100      	movs	r1, #0
   2459c:	f002 fa2c 	bl	269f8 <memset>
   245a0:	612c      	str	r4, [r5, #16]
	return 0;
   245a2:	2000      	movs	r0, #0
}
   245a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   245a6:	f06f 0015 	mvn.w	r0, #21
   245aa:	e7fb      	b.n	245a4 <onoff_manager_init+0x1e>

000245ac <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   245ac:	b570      	push	{r4, r5, r6, lr}
   245ae:	4604      	mov	r4, r0
   245b0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   245b2:	f7ff ffd9 	bl	24568 <validate_args>

	if (rv < 0) {
   245b6:	1e05      	subs	r5, r0, #0
   245b8:	db31      	blt.n	2461e <onoff_request+0x72>
   245ba:	f04f 0320 	mov.w	r3, #32
   245be:	f3ef 8111 	mrs	r1, BASEPRI
   245c2:	f383 8811 	msr	BASEPRI, r3
   245c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   245ca:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   245cc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   245ce:	f64f 75ff 	movw	r5, #65535	; 0xffff
   245d2:	42ab      	cmp	r3, r5
   245d4:	f000 0207 	and.w	r2, r0, #7
   245d8:	d02e      	beq.n	24638 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   245da:	2a02      	cmp	r2, #2
   245dc:	d10e      	bne.n	245fc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   245de:	3301      	adds	r3, #1
   245e0:	8363      	strh	r3, [r4, #26]
	rv = state;
   245e2:	4615      	mov	r5, r2
		notify = true;
   245e4:	2301      	movs	r3, #1
	__asm__ volatile(
   245e6:	f381 8811 	msr	BASEPRI, r1
   245ea:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   245ee:	b1b3      	cbz	r3, 2461e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   245f0:	2300      	movs	r3, #0
   245f2:	4631      	mov	r1, r6
   245f4:	4620      	mov	r0, r4
   245f6:	f7ff ff93 	bl	24520 <notify_one>
   245fa:	e010      	b.n	2461e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   245fc:	0783      	lsls	r3, r0, #30
   245fe:	d001      	beq.n	24604 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   24600:	2a06      	cmp	r2, #6
   24602:	d10e      	bne.n	24622 <onoff_request+0x76>
	parent->next = child;
   24604:	2300      	movs	r3, #0
   24606:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   24608:	6863      	ldr	r3, [r4, #4]
   2460a:	b993      	cbnz	r3, 24632 <onoff_request+0x86>
	list->head = node;
   2460c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   24610:	4615      	mov	r5, r2
   24612:	b962      	cbnz	r2, 2462e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   24614:	460a      	mov	r2, r1
   24616:	4620      	mov	r0, r4
   24618:	2102      	movs	r1, #2
   2461a:	f7df fd93 	bl	4144 <process_event>
		}
	}

	return rv;
}
   2461e:	4628      	mov	r0, r5
   24620:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   24622:	2a05      	cmp	r2, #5
   24624:	bf0c      	ite	eq
   24626:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   2462a:	f06f 0504 	mvnne.w	r5, #4
   2462e:	2300      	movs	r3, #0
   24630:	e7d9      	b.n	245e6 <onoff_request+0x3a>
	parent->next = child;
   24632:	601e      	str	r6, [r3, #0]
	list->tail = node;
   24634:	6066      	str	r6, [r4, #4]
}
   24636:	e7eb      	b.n	24610 <onoff_request+0x64>
		rv = -EAGAIN;
   24638:	f06f 050a 	mvn.w	r5, #10
   2463c:	e7f7      	b.n	2462e <onoff_request+0x82>

0002463e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2463e:	4604      	mov	r4, r0
   24640:	b508      	push	{r3, lr}
   24642:	4608      	mov	r0, r1
   24644:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   24646:	461a      	mov	r2, r3
   24648:	47a0      	blx	r4
	return z_impl_k_current_get();
   2464a:	f7ff fa2d 	bl	23aa8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   2464e:	f7e2 f955 	bl	68fc <z_impl_k_thread_abort>

00024652 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   24652:	b510      	push	{r4, lr}
   24654:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   24656:	f04f 33ff 	mov.w	r3, #4294967295
   2465a:	f04f 32ff 	mov.w	r2, #4294967295
   2465e:	4620      	mov	r0, r4
   24660:	f7fe fe70 	bl	23344 <z_impl_k_queue_get>
   24664:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   24666:	2800      	cmp	r0, #0
   24668:	d0f5      	beq.n	24656 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2466a:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   2466c:	6842      	ldr	r2, [r0, #4]
   2466e:	f3bf 8f5b 	dmb	ish
   24672:	e853 1f00 	ldrex	r1, [r3]
   24676:	f021 0c01 	bic.w	ip, r1, #1
   2467a:	e843 ce00 	strex	lr, ip, [r3]
   2467e:	f1be 0f00 	cmp.w	lr, #0
   24682:	d1f6      	bne.n	24672 <z_work_q_main+0x20>
   24684:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   24688:	07cb      	lsls	r3, r1, #31
   2468a:	d500      	bpl.n	2468e <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   2468c:	4790      	blx	r2
	z_impl_k_yield();
   2468e:	f7ff f99f 	bl	239d0 <z_impl_k_yield>
   24692:	e7e0      	b.n	24656 <z_work_q_main+0x4>

00024694 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   24694:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   24696:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2469a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2469e:	bf2c      	ite	cs
   246a0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   246a4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   246a8:	4770      	bx	lr

000246aa <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   246aa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   246ae:	6880      	ldr	r0, [r0, #8]
   246b0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   246b4:	bf2c      	ite	cs
   246b6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   246ba:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   246be:	4770      	bx	lr

000246c0 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   246c0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   246c2:	2201      	movs	r2, #1
   246c4:	f7ff ffe6 	bl	24694 <chunk_field>
}
   246c8:	0840      	lsrs	r0, r0, #1
   246ca:	bd08      	pop	{r3, pc}

000246cc <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   246cc:	6883      	ldr	r3, [r0, #8]
   246ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   246d2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   246d6:	d308      	bcc.n	246ea <set_chunk_used+0x1e>
		if (used) {
   246d8:	684b      	ldr	r3, [r1, #4]
   246da:	b11a      	cbz	r2, 246e4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   246dc:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   246e0:	604b      	str	r3, [r1, #4]
   246e2:	4770      	bx	lr
   246e4:	f023 0301 	bic.w	r3, r3, #1
   246e8:	e7fa      	b.n	246e0 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   246ea:	884b      	ldrh	r3, [r1, #2]
   246ec:	b11a      	cbz	r2, 246f6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   246ee:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   246f2:	804b      	strh	r3, [r1, #2]
		}
	}
}
   246f4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   246f6:	f023 0301 	bic.w	r3, r3, #1
   246fa:	e7fa      	b.n	246f2 <set_chunk_used+0x26>

000246fc <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   246fc:	0053      	lsls	r3, r2, #1
   246fe:	2201      	movs	r2, #1
   24700:	f7ff bfd3 	b.w	246aa <chunk_set>

00024704 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   24704:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   24706:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24708:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   2470c:	bf2c      	ite	cs
   2470e:	2002      	movcs	r0, #2
   24710:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   24712:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   24714:	fab0 f080 	clz	r0, r0
}
   24718:	f1c0 001f 	rsb	r0, r0, #31
   2471c:	4770      	bx	lr

0002471e <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   2471e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24722:	4616      	mov	r6, r2
   24724:	4604      	mov	r4, r0
   24726:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   24728:	f7ff ffca 	bl	246c0 <chunk_size>
   2472c:	4631      	mov	r1, r6
   2472e:	4605      	mov	r5, r0
   24730:	4620      	mov	r0, r4
   24732:	f7ff ffc5 	bl	246c0 <chunk_size>
   24736:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   24738:	462a      	mov	r2, r5
   2473a:	4639      	mov	r1, r7
   2473c:	4620      	mov	r0, r4
   2473e:	f7ff ffdd 	bl	246fc <set_chunk_size>
	return c + chunk_size(h, c);
   24742:	4631      	mov	r1, r6
   24744:	4620      	mov	r0, r4
   24746:	f7ff ffbb 	bl	246c0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2474a:	462b      	mov	r3, r5
   2474c:	1831      	adds	r1, r6, r0
   2474e:	2200      	movs	r2, #0
   24750:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   24752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24756:	f7ff bfa8 	b.w	246aa <chunk_set>

0002475a <split_chunks>:
{
   2475a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2475e:	4614      	mov	r4, r2
   24760:	4605      	mov	r5, r0
   24762:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   24764:	f7ff ffac 	bl	246c0 <chunk_size>
	size_t lsz = rc - lc;
   24768:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   2476c:	1b37      	subs	r7, r6, r4
   2476e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   24770:	4642      	mov	r2, r8
   24772:	4631      	mov	r1, r6
   24774:	4628      	mov	r0, r5
   24776:	f7ff ffc1 	bl	246fc <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2477a:	463a      	mov	r2, r7
   2477c:	4621      	mov	r1, r4
   2477e:	4628      	mov	r0, r5
   24780:	f7ff ffbc 	bl	246fc <set_chunk_size>
   24784:	4643      	mov	r3, r8
   24786:	2200      	movs	r2, #0
   24788:	4621      	mov	r1, r4
   2478a:	4628      	mov	r0, r5
   2478c:	f7ff ff8d 	bl	246aa <chunk_set>
	return c + chunk_size(h, c);
   24790:	4621      	mov	r1, r4
   24792:	4628      	mov	r0, r5
   24794:	f7ff ff94 	bl	246c0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   24798:	463b      	mov	r3, r7
   2479a:	1821      	adds	r1, r4, r0
   2479c:	2200      	movs	r2, #0
   2479e:	4628      	mov	r0, r5
}
   247a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   247a4:	f7ff bf81 	b.w	246aa <chunk_set>

000247a8 <free_list_remove_bidx>:
{
   247a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247ac:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   247ae:	2203      	movs	r2, #3
   247b0:	460e      	mov	r6, r1
   247b2:	4604      	mov	r4, r0
   247b4:	f7ff ff6e 	bl	24694 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   247b8:	4286      	cmp	r6, r0
   247ba:	4605      	mov	r5, r0
   247bc:	f107 0804 	add.w	r8, r7, #4
   247c0:	d10b      	bne.n	247da <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   247c2:	2301      	movs	r3, #1
   247c4:	fa03 f707 	lsl.w	r7, r3, r7
   247c8:	68e3      	ldr	r3, [r4, #12]
   247ca:	ea23 0307 	bic.w	r3, r3, r7
   247ce:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   247d0:	2300      	movs	r3, #0
   247d2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   247d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   247da:	4631      	mov	r1, r6
   247dc:	2202      	movs	r2, #2
   247de:	4620      	mov	r0, r4
   247e0:	f7ff ff58 	bl	24694 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   247e4:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   247e6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   247e8:	4601      	mov	r1, r0
		b->next = second;
   247ea:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   247ee:	4620      	mov	r0, r4
   247f0:	2203      	movs	r2, #3
   247f2:	f7ff ff5a 	bl	246aa <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   247f6:	4633      	mov	r3, r6
   247f8:	4629      	mov	r1, r5
   247fa:	4620      	mov	r0, r4
   247fc:	2202      	movs	r2, #2
}
   247fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24802:	f7ff bf52 	b.w	246aa <chunk_set>

00024806 <free_list_remove>:
{
   24806:	b538      	push	{r3, r4, r5, lr}
   24808:	4604      	mov	r4, r0
   2480a:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   2480c:	f7ff ff58 	bl	246c0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   24810:	68a3      	ldr	r3, [r4, #8]
   24812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24816:	4601      	mov	r1, r0
   24818:	d301      	bcc.n	2481e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   2481a:	2801      	cmp	r0, #1
   2481c:	d009      	beq.n	24832 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2481e:	4620      	mov	r0, r4
   24820:	f7ff ff70 	bl	24704 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   24824:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   24826:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   24828:	4620      	mov	r0, r4
}
   2482a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   2482e:	f7ff bfbb 	b.w	247a8 <free_list_remove_bidx>
}
   24832:	bd38      	pop	{r3, r4, r5, pc}

00024834 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   24834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24838:	4604      	mov	r4, r0
   2483a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   2483c:	f7ff ff62 	bl	24704 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   24840:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   24842:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   24844:	4620      	mov	r0, r4
   24846:	f7ff ff5d 	bl	24704 <bucket_idx>
   2484a:	42a8      	cmp	r0, r5
   2484c:	da03      	bge.n	24856 <alloc_chunk+0x22>
		return 0;
   2484e:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   24850:	4630      	mov	r0, r6
   24852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   24856:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   2485a:	f8da 9010 	ldr.w	r9, [sl, #16]
   2485e:	f1b9 0f00 	cmp.w	r9, #0
   24862:	d019      	beq.n	24898 <alloc_chunk+0x64>
   24864:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   24866:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   2486a:	4620      	mov	r0, r4
   2486c:	4631      	mov	r1, r6
   2486e:	f7ff ff27 	bl	246c0 <chunk_size>
   24872:	4540      	cmp	r0, r8
   24874:	d305      	bcc.n	24882 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   24876:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   24878:	4631      	mov	r1, r6
   2487a:	4620      	mov	r0, r4
   2487c:	f7ff ff94 	bl	247a8 <free_list_remove_bidx>
		return c;
   24880:	e7e6      	b.n	24850 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   24882:	2203      	movs	r2, #3
   24884:	4631      	mov	r1, r6
   24886:	4620      	mov	r0, r4
   24888:	f7ff ff04 	bl	24694 <chunk_field>
		} while (--i && b->next != first);
   2488c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   2488e:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   24892:	d001      	beq.n	24898 <alloc_chunk+0x64>
   24894:	4581      	cmp	r9, r0
   24896:	d1e6      	bne.n	24866 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   24898:	68e3      	ldr	r3, [r4, #12]
   2489a:	3501      	adds	r5, #1
   2489c:	f04f 32ff 	mov.w	r2, #4294967295
   248a0:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   248a2:	401a      	ands	r2, r3
   248a4:	d0d3      	beq.n	2484e <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   248a6:	fa92 f2a2 	rbit	r2, r2
   248aa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   248ae:	1d13      	adds	r3, r2, #4
   248b0:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   248b4:	e7e0      	b.n	24878 <alloc_chunk+0x44>

000248b6 <free_list_add>:
{
   248b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248ba:	4604      	mov	r4, r0
   248bc:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   248be:	f7ff feff 	bl	246c0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   248c2:	68a3      	ldr	r3, [r4, #8]
   248c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   248c8:	4601      	mov	r1, r0
   248ca:	d301      	bcc.n	248d0 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   248cc:	2801      	cmp	r0, #1
   248ce:	d035      	beq.n	2493c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   248d0:	4620      	mov	r0, r4
   248d2:	f7ff ff17 	bl	24704 <bucket_idx>
	if (b->next == 0U) {
   248d6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   248da:	6916      	ldr	r6, [r2, #16]
   248dc:	b99e      	cbnz	r6, 24906 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   248de:	2301      	movs	r3, #1
   248e0:	fa03 f000 	lsl.w	r0, r3, r0
   248e4:	68e3      	ldr	r3, [r4, #12]
   248e6:	4303      	orrs	r3, r0
   248e8:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   248ea:	4629      	mov	r1, r5
		b->next = c;
   248ec:	6115      	str	r5, [r2, #16]
   248ee:	462b      	mov	r3, r5
   248f0:	2202      	movs	r2, #2
   248f2:	4620      	mov	r0, r4
   248f4:	f7ff fed9 	bl	246aa <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   248f8:	2203      	movs	r2, #3
   248fa:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   248fc:	4620      	mov	r0, r4
}
   248fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24902:	f7ff bed2 	b.w	246aa <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   24906:	2202      	movs	r2, #2
   24908:	4631      	mov	r1, r6
   2490a:	4620      	mov	r0, r4
   2490c:	f7ff fec2 	bl	24694 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   24910:	2202      	movs	r2, #2
   24912:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   24914:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   24916:	4629      	mov	r1, r5
   24918:	4620      	mov	r0, r4
   2491a:	f7ff fec6 	bl	246aa <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2491e:	4633      	mov	r3, r6
   24920:	2203      	movs	r2, #3
   24922:	4629      	mov	r1, r5
   24924:	4620      	mov	r0, r4
   24926:	f7ff fec0 	bl	246aa <chunk_set>
   2492a:	2203      	movs	r2, #3
   2492c:	4639      	mov	r1, r7
   2492e:	462b      	mov	r3, r5
   24930:	4620      	mov	r0, r4
   24932:	f7ff feba 	bl	246aa <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   24936:	2202      	movs	r2, #2
   24938:	4631      	mov	r1, r6
   2493a:	e7df      	b.n	248fc <free_list_add+0x46>
   2493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024940 <sys_heap_free>:
{
   24940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   24942:	2900      	cmp	r1, #0
   24944:	d04e      	beq.n	249e4 <sys_heap_free+0xa4>
	struct z_heap *h = heap->heap;
   24946:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   24948:	68ab      	ldr	r3, [r5, #8]
   2494a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2494e:	bf2c      	ite	cs
   24950:	2408      	movcs	r4, #8
   24952:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24954:	1b0c      	subs	r4, r1, r4
   24956:	1b64      	subs	r4, r4, r5
   24958:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   2495a:	2200      	movs	r2, #0
   2495c:	4621      	mov	r1, r4
   2495e:	4628      	mov	r0, r5
   24960:	f7ff feb4 	bl	246cc <set_chunk_used>
	return c + chunk_size(h, c);
   24964:	4621      	mov	r1, r4
   24966:	f7ff feab 	bl	246c0 <chunk_size>
   2496a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2496c:	2201      	movs	r2, #1
   2496e:	4631      	mov	r1, r6
   24970:	4628      	mov	r0, r5
   24972:	f7ff fe8f 	bl	24694 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   24976:	07c3      	lsls	r3, r0, #31
   24978:	d40c      	bmi.n	24994 <sys_heap_free+0x54>
		free_list_remove(h, right_chunk(h, c));
   2497a:	4631      	mov	r1, r6
   2497c:	4628      	mov	r0, r5
   2497e:	f7ff ff42 	bl	24806 <free_list_remove>
	return c + chunk_size(h, c);
   24982:	4621      	mov	r1, r4
   24984:	4628      	mov	r0, r5
   24986:	f7ff fe9b 	bl	246c0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2498a:	4621      	mov	r1, r4
   2498c:	1822      	adds	r2, r4, r0
   2498e:	4628      	mov	r0, r5
   24990:	f7ff fec5 	bl	2471e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   24994:	2200      	movs	r2, #0
   24996:	4621      	mov	r1, r4
   24998:	4628      	mov	r0, r5
   2499a:	f7ff fe7b 	bl	24694 <chunk_field>
   2499e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   249a0:	2201      	movs	r2, #1
   249a2:	4639      	mov	r1, r7
   249a4:	4628      	mov	r0, r5
   249a6:	f7ff fe75 	bl	24694 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   249aa:	f010 0601 	ands.w	r6, r0, #1
   249ae:	d113      	bne.n	249d8 <sys_heap_free+0x98>
		free_list_remove(h, left_chunk(h, c));
   249b0:	4639      	mov	r1, r7
   249b2:	4628      	mov	r0, r5
   249b4:	f7ff ff27 	bl	24806 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   249b8:	4621      	mov	r1, r4
   249ba:	4632      	mov	r2, r6
   249bc:	4628      	mov	r0, r5
   249be:	f7ff fe69 	bl	24694 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   249c2:	4622      	mov	r2, r4
   249c4:	1a21      	subs	r1, r4, r0
   249c6:	4628      	mov	r0, r5
   249c8:	f7ff fea9 	bl	2471e <merge_chunks>
   249cc:	4621      	mov	r1, r4
   249ce:	4632      	mov	r2, r6
   249d0:	4628      	mov	r0, r5
   249d2:	f7ff fe5f 	bl	24694 <chunk_field>
   249d6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   249d8:	4621      	mov	r1, r4
   249da:	4628      	mov	r0, r5
}
   249dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   249e0:	f7ff bf69 	b.w	248b6 <free_list_add>
}
   249e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000249e6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   249e6:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   249e8:	b909      	cbnz	r1, 249ee <sys_heap_alloc+0x8>
		return NULL;
   249ea:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   249ec:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   249ee:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   249f0:	68ab      	ldr	r3, [r5, #8]
   249f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   249f6:	bf2c      	ite	cs
   249f8:	2208      	movcs	r2, #8
   249fa:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   249fc:	1dcc      	adds	r4, r1, #7
   249fe:	4414      	add	r4, r2
   24a00:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   24a02:	4621      	mov	r1, r4
   24a04:	4628      	mov	r0, r5
   24a06:	f7ff ff15 	bl	24834 <alloc_chunk>
	if (c == 0U) {
   24a0a:	4606      	mov	r6, r0
   24a0c:	2800      	cmp	r0, #0
   24a0e:	d0ec      	beq.n	249ea <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   24a10:	4601      	mov	r1, r0
   24a12:	4628      	mov	r0, r5
   24a14:	f7ff fe54 	bl	246c0 <chunk_size>
   24a18:	42a0      	cmp	r0, r4
   24a1a:	d909      	bls.n	24a30 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   24a1c:	4434      	add	r4, r6
   24a1e:	4631      	mov	r1, r6
   24a20:	4628      	mov	r0, r5
   24a22:	4622      	mov	r2, r4
   24a24:	f7ff fe99 	bl	2475a <split_chunks>
		free_list_add(h, c + chunk_sz);
   24a28:	4621      	mov	r1, r4
   24a2a:	4628      	mov	r0, r5
   24a2c:	f7ff ff43 	bl	248b6 <free_list_add>
	set_chunk_used(h, c, true);
   24a30:	4628      	mov	r0, r5
   24a32:	2201      	movs	r2, #1
   24a34:	4631      	mov	r1, r6
   24a36:	f7ff fe49 	bl	246cc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   24a3a:	68ab      	ldr	r3, [r5, #8]
   24a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24a40:	bf2c      	ite	cs
   24a42:	2008      	movcs	r0, #8
   24a44:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   24a46:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   24a4a:	4428      	add	r0, r5
	return chunk_mem(h, c);
   24a4c:	e7ce      	b.n	249ec <sys_heap_alloc+0x6>

00024a4e <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   24a4e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   24a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a54:	bf2c      	ite	cs
   24a56:	2508      	movcs	r5, #8
   24a58:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   24a5a:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24a5c:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24a5e:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24a60:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24a64:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   24a68:	2200      	movs	r2, #0
   24a6a:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   24a6c:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   24a6e:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   24a70:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   24a72:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   24a76:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24a78:	4629      	mov	r1, r5
	h->len = buf_sz;
   24a7a:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   24a7c:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24a7e:	4620      	mov	r0, r4
   24a80:	f7ff fe40 	bl	24704 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   24a84:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   24a86:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24a88:	1c41      	adds	r1, r0, #1
   24a8a:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   24a8c:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   24a90:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   24a92:	428b      	cmp	r3, r1
   24a94:	db29      	blt.n	24aea <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   24a96:	4632      	mov	r2, r6
   24a98:	4620      	mov	r0, r4
   24a9a:	2100      	movs	r1, #0
   24a9c:	f7ff fe2e 	bl	246fc <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   24aa0:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   24aa2:	4620      	mov	r0, r4
   24aa4:	2201      	movs	r2, #1
   24aa6:	2100      	movs	r1, #0
   24aa8:	f7ff fe10 	bl	246cc <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   24aac:	463a      	mov	r2, r7
   24aae:	4631      	mov	r1, r6
   24ab0:	f7ff fe24 	bl	246fc <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   24ab4:	4633      	mov	r3, r6
   24ab6:	4631      	mov	r1, r6
   24ab8:	4620      	mov	r0, r4
   24aba:	2200      	movs	r2, #0
   24abc:	f7ff fdf5 	bl	246aa <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   24ac0:	4629      	mov	r1, r5
   24ac2:	4620      	mov	r0, r4
   24ac4:	2200      	movs	r2, #0
   24ac6:	f7ff fe19 	bl	246fc <set_chunk_size>
   24aca:	463b      	mov	r3, r7
   24acc:	4629      	mov	r1, r5
   24ace:	4620      	mov	r0, r4
   24ad0:	2200      	movs	r2, #0
   24ad2:	f7ff fdea 	bl	246aa <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   24ad6:	4629      	mov	r1, r5
   24ad8:	4620      	mov	r0, r4
   24ada:	2201      	movs	r2, #1
   24adc:	f7ff fdf6 	bl	246cc <set_chunk_used>

	free_list_add(h, chunk0_size);
   24ae0:	4631      	mov	r1, r6
}
   24ae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   24ae6:	f7ff bee6 	b.w	248b6 <free_list_add>
		h->buckets[i].next = 0;
   24aea:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   24aee:	3301      	adds	r3, #1
   24af0:	e7cf      	b.n	24a92 <sys_heap_init+0x44>

00024af2 <_to_x>:
{
   24af2:	b5f0      	push	{r4, r5, r6, r7, lr}
   24af4:	4603      	mov	r3, r0
   24af6:	4614      	mov	r4, r2
   24af8:	4602      	mov	r2, r0
		unsigned int d = n % base;
   24afa:	fbb1 f0f4 	udiv	r0, r1, r4
   24afe:	fb04 1510 	mls	r5, r4, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   24b02:	2d09      	cmp	r5, #9
   24b04:	460f      	mov	r7, r1
   24b06:	bf8c      	ite	hi
   24b08:	2627      	movhi	r6, #39	; 0x27
   24b0a:	2600      	movls	r6, #0
		n /= base;
   24b0c:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   24b0e:	3530      	adds	r5, #48	; 0x30
   24b10:	4610      	mov	r0, r2
   24b12:	4435      	add	r5, r6
	} while (n);
   24b14:	42a7      	cmp	r7, r4
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   24b16:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
   24b1a:	d205      	bcs.n	24b28 <_to_x+0x36>
	*buf = 0;
   24b1c:	2100      	movs	r1, #0
   24b1e:	7001      	strb	r1, [r0, #0]
	len = buf - start;
   24b20:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
   24b22:	429a      	cmp	r2, r3
   24b24:	d802      	bhi.n	24b2c <_to_x+0x3a>
}
   24b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24b28:	4602      	mov	r2, r0
   24b2a:	e7e6      	b.n	24afa <_to_x+0x8>
		char tmp = *buf;
   24b2c:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
   24b2e:	781c      	ldrb	r4, [r3, #0]
   24b30:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
   24b34:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
   24b38:	e7f3      	b.n	24b22 <_to_x+0x30>

00024b3a <_rlrshift>:
{
   24b3a:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   24b3c:	e9d0 6500 	ldrd	r6, r5, [r0]
   24b40:	0872      	lsrs	r2, r6, #1
   24b42:	f006 0301 	and.w	r3, r6, #1
   24b46:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   24b4a:	189b      	adds	r3, r3, r2
   24b4c:	f04f 0100 	mov.w	r1, #0
   24b50:	ea4f 0455 	mov.w	r4, r5, lsr #1
   24b54:	eb44 0101 	adc.w	r1, r4, r1
   24b58:	e9c0 3100 	strd	r3, r1, [r0]
}
   24b5c:	bd70      	pop	{r4, r5, r6, pc}

00024b5e <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   24b5e:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   24b62:	b5f0      	push	{r4, r5, r6, r7, lr}
	rem += 2U;
   24b64:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
   24b66:	f04f 0705 	mov.w	r7, #5
   24b6a:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
   24b6e:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
   24b72:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
   24b76:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
   24b7a:	fb07 f10e 	mul.w	r1, r7, lr
   24b7e:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   24b82:	08f2      	lsrs	r2, r6, #3
   24b84:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   24b88:	fbb2 f1f7 	udiv	r1, r2, r7
   24b8c:	00ca      	lsls	r2, r1, #3
		quot += q;
   24b8e:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   24b92:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   24b96:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
   24b9a:	fba2 2307 	umull	r2, r3, r2, r7
   24b9e:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   24ba0:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   24ba4:	18e4      	adds	r4, r4, r3
   24ba6:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   24baa:	e9c0 4500 	strd	r4, r5, [r0]
}
   24bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024bb0 <_get_digit>:
	if (*digit_count > 0) {
   24bb0:	680b      	ldr	r3, [r1, #0]
   24bb2:	2b00      	cmp	r3, #0
{
   24bb4:	b570      	push	{r4, r5, r6, lr}
   24bb6:	4604      	mov	r4, r0
	if (*digit_count > 0) {
   24bb8:	dd0f      	ble.n	24bda <_get_digit+0x2a>
		*fr = *fr * 10U;
   24bba:	6822      	ldr	r2, [r4, #0]
   24bbc:	6840      	ldr	r0, [r0, #4]
		*digit_count -= 1;
   24bbe:	3b01      	subs	r3, #1
   24bc0:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   24bc2:	210a      	movs	r1, #10
   24bc4:	fba2 5601 	umull	r5, r6, r2, r1
   24bc8:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   24bcc:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   24bd0:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
   24bd4:	0f30      	lsrs	r0, r6, #28
   24bd6:	3030      	adds	r0, #48	; 0x30
}
   24bd8:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   24bda:	2030      	movs	r0, #48	; 0x30
   24bdc:	e7fc      	b.n	24bd8 <_get_digit+0x28>

00024bde <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   24bde:	4770      	bx	lr

00024be0 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   24be0:	6883      	ldr	r3, [r0, #8]
   24be2:	68db      	ldr	r3, [r3, #12]
   24be4:	4718      	bx	r3

00024be6 <nvs_flash_rd>:
{
   24be6:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   24be8:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24bea:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   24bec:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24bee:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   24bf0:	fa16 f181 	uxtah	r1, r6, r1
   24bf4:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   24bf8:	6884      	ldr	r4, [r0, #8]
   24bfa:	6824      	ldr	r4, [r4, #0]
   24bfc:	46a4      	mov	ip, r4
}
   24bfe:	bc70      	pop	{r4, r5, r6}
   24c00:	4760      	bx	ip

00024c02 <nvs_flash_block_cmp>:
{
   24c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24c06:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24c08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   24c0a:	681d      	ldr	r5, [r3, #0]
   24c0c:	426d      	negs	r5, r5
{
   24c0e:	b089      	sub	sp, #36	; 0x24
   24c10:	4681      	mov	r9, r0
   24c12:	460e      	mov	r6, r1
   24c14:	4617      	mov	r7, r2
	block_size =
   24c16:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   24c1a:	b91c      	cbnz	r4, 24c24 <nvs_flash_block_cmp+0x22>
	return 0;
   24c1c:	4620      	mov	r0, r4
}
   24c1e:	b009      	add	sp, #36	; 0x24
   24c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   24c24:	42ac      	cmp	r4, r5
   24c26:	46a0      	mov	r8, r4
   24c28:	bf28      	it	cs
   24c2a:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   24c2c:	4643      	mov	r3, r8
   24c2e:	466a      	mov	r2, sp
   24c30:	4631      	mov	r1, r6
   24c32:	4648      	mov	r0, r9
   24c34:	f7ff ffd7 	bl	24be6 <nvs_flash_rd>
		if (rc) {
   24c38:	2800      	cmp	r0, #0
   24c3a:	d1f0      	bne.n	24c1e <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   24c3c:	4642      	mov	r2, r8
   24c3e:	4669      	mov	r1, sp
   24c40:	4638      	mov	r0, r7
   24c42:	f001 fe9e 	bl	26982 <memcmp>
		if (rc) {
   24c46:	b920      	cbnz	r0, 24c52 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   24c48:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   24c4c:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   24c4e:	4447      	add	r7, r8
   24c50:	e7e3      	b.n	24c1a <nvs_flash_block_cmp+0x18>
			return 1;
   24c52:	2001      	movs	r0, #1
   24c54:	e7e3      	b.n	24c1e <nvs_flash_block_cmp+0x1c>

00024c56 <nvs_flash_cmp_const>:
{
   24c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24c5a:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   24c5c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   24c5e:	681d      	ldr	r5, [r3, #0]
   24c60:	426d      	negs	r5, r5
{
   24c62:	b088      	sub	sp, #32
	block_size =
   24c64:	f005 0520 	and.w	r5, r5, #32
{
   24c68:	4607      	mov	r7, r0
   24c6a:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   24c6c:	4668      	mov	r0, sp
{
   24c6e:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   24c70:	462a      	mov	r2, r5
   24c72:	f001 fec1 	bl	269f8 <memset>
	while (len) {
   24c76:	b91c      	cbnz	r4, 24c80 <nvs_flash_cmp_const+0x2a>
	return 0;
   24c78:	4620      	mov	r0, r4
}
   24c7a:	b008      	add	sp, #32
   24c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   24c80:	42ac      	cmp	r4, r5
   24c82:	46a0      	mov	r8, r4
   24c84:	bf28      	it	cs
   24c86:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   24c88:	4643      	mov	r3, r8
   24c8a:	466a      	mov	r2, sp
   24c8c:	4631      	mov	r1, r6
   24c8e:	4638      	mov	r0, r7
   24c90:	f7ff ffb7 	bl	24c02 <nvs_flash_block_cmp>
		if (rc) {
   24c94:	2800      	cmp	r0, #0
   24c96:	d1f0      	bne.n	24c7a <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   24c98:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   24c9c:	4446      	add	r6, r8
   24c9e:	e7ea      	b.n	24c76 <nvs_flash_cmp_const+0x20>

00024ca0 <nvs_ate_crc8_check>:
{
   24ca0:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24ca2:	4601      	mov	r1, r0
{
   24ca4:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24ca6:	2207      	movs	r2, #7
   24ca8:	20ff      	movs	r0, #255	; 0xff
   24caa:	f7df f88d 	bl	3dc8 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   24cae:	79e3      	ldrb	r3, [r4, #7]
}
   24cb0:	1a18      	subs	r0, r3, r0
   24cb2:	bf18      	it	ne
   24cb4:	2001      	movne	r0, #1
   24cb6:	bd10      	pop	{r4, pc}

00024cb8 <nvs_ate_crc8_update>:
{
   24cb8:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24cba:	4601      	mov	r1, r0
{
   24cbc:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   24cbe:	2207      	movs	r2, #7
   24cc0:	20ff      	movs	r0, #255	; 0xff
   24cc2:	f7df f881 	bl	3dc8 <crc8_ccitt>
	entry->crc8 = crc8;
   24cc6:	71e0      	strb	r0, [r4, #7]
}
   24cc8:	bd10      	pop	{r4, pc}

00024cca <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   24cca:	7800      	ldrb	r0, [r0, #0]
   24ccc:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   24cce:	bf81      	itttt	hi
   24cd0:	1809      	addhi	r1, r1, r0
   24cd2:	f101 31ff 	addhi.w	r1, r1, #4294967295
   24cd6:	4240      	neghi	r0, r0
   24cd8:	4001      	andhi	r1, r0
}
   24cda:	4608      	mov	r0, r1
   24cdc:	4770      	bx	lr

00024cde <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   24cde:	680b      	ldr	r3, [r1, #0]
   24ce0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   24ce4:	0c1a      	lsrs	r2, r3, #16
   24ce6:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   24cea:	bf08      	it	eq
   24cec:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   24cf0:	600b      	str	r3, [r1, #0]
}
   24cf2:	4770      	bx	lr

00024cf4 <nvs_flash_erase_sector>:
{
   24cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   24cf8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   24cfa:	8983      	ldrh	r3, [r0, #12]
   24cfc:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   24cfe:	0c0e      	lsrs	r6, r1, #16
   24d00:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   24d02:	4631      	mov	r1, r6
{
   24d04:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   24d06:	f7ff ffa6 	bl	24c56 <nvs_flash_cmp_const>
	if (rc <= 0) {
   24d0a:	1e04      	subs	r4, r0, #0
   24d0c:	dd17      	ble.n	24d3e <nvs_flash_erase_sector+0x4a>
	rc = flash_write_protection_set(fs->flash_device, false);
   24d0e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   24d10:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24d12:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   24d16:	2100      	movs	r1, #0
   24d18:	f7ff ff62 	bl	24be0 <flash_write_protection_set>
	if (rc) {
   24d1c:	4604      	mov	r4, r0
   24d1e:	b970      	cbnz	r0, 24d3e <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   24d20:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   24d22:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   24d24:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24d26:	0c31      	lsrs	r1, r6, #16
   24d28:	689b      	ldr	r3, [r3, #8]
   24d2a:	fb08 7101 	mla	r1, r8, r1, r7
   24d2e:	4798      	blx	r3
	if (rc) {
   24d30:	4604      	mov	r4, r0
   24d32:	b920      	cbnz	r0, 24d3e <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, true);
   24d34:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   24d36:	6883      	ldr	r3, [r0, #8]
   24d38:	2101      	movs	r1, #1
   24d3a:	68db      	ldr	r3, [r3, #12]
   24d3c:	4798      	blx	r3
}
   24d3e:	4620      	mov	r0, r4
   24d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024d44 <nvs_prev_ate>:
{
   24d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24d46:	4604      	mov	r4, r0
   24d48:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24d4a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   24d4c:	2108      	movs	r1, #8
   24d4e:	f7ff ffbc 	bl	24cca <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24d52:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24d54:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24d56:	2308      	movs	r3, #8
   24d58:	4620      	mov	r0, r4
   24d5a:	f7ff ff44 	bl	24be6 <nvs_flash_rd>
	if (rc) {
   24d5e:	2800      	cmp	r0, #0
   24d60:	d13e      	bne.n	24de0 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   24d62:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24d64:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   24d66:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24d68:	b299      	uxth	r1, r3
   24d6a:	1b92      	subs	r2, r2, r6
   24d6c:	4291      	cmp	r1, r2
	*addr += ate_size;
   24d6e:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   24d70:	d136      	bne.n	24de0 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   24d72:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   24d74:	bf03      	ittte	eq
   24d76:	89e1      	ldrheq	r1, [r4, #14]
   24d78:	f101 31ff 	addeq.w	r1, r1, #4294967295
   24d7c:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   24d80:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   24d84:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   24d86:	2308      	movs	r3, #8
   24d88:	466a      	mov	r2, sp
   24d8a:	4620      	mov	r0, r4
   24d8c:	f7ff ff2b 	bl	24be6 <nvs_flash_rd>
	if (rc) {
   24d90:	bb30      	cbnz	r0, 24de0 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   24d92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   24d94:	466a      	mov	r2, sp
   24d96:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   24d98:	4603      	mov	r3, r0
		if (data8[i] != value) {
   24d9a:	f812 7b01 	ldrb.w	r7, [r2], #1
   24d9e:	42b9      	cmp	r1, r7
   24da0:	d115      	bne.n	24dce <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   24da2:	3301      	adds	r3, #1
   24da4:	2b08      	cmp	r3, #8
   24da6:	d1f8      	bne.n	24d9a <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   24da8:	6863      	ldr	r3, [r4, #4]
   24daa:	e00e      	b.n	24dca <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   24dac:	89a3      	ldrh	r3, [r4, #12]
   24dae:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   24db2:	1b9b      	subs	r3, r3, r6
   24db4:	429a      	cmp	r2, r3
   24db6:	d20f      	bcs.n	24dd8 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   24db8:	fbb2 f3f6 	udiv	r3, r2, r6
   24dbc:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   24dc0:	b956      	cbnz	r6, 24dd8 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   24dc2:	682b      	ldr	r3, [r5, #0]
   24dc4:	0c1b      	lsrs	r3, r3, #16
   24dc6:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   24dc8:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   24dca:	602b      	str	r3, [r5, #0]
		return 0;
   24dcc:	e008      	b.n	24de0 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   24dce:	4668      	mov	r0, sp
   24dd0:	f7ff ff66 	bl	24ca0 <nvs_ate_crc8_check>
   24dd4:	2800      	cmp	r0, #0
   24dd6:	d0e9      	beq.n	24dac <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   24dd8:	4629      	mov	r1, r5
   24dda:	4620      	mov	r0, r4
   24ddc:	f7df ff82 	bl	4ce4 <nvs_recover_last_ate>
}
   24de0:	b003      	add	sp, #12
   24de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024de4 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   24de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   24de8:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24dec:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   24dee:	b088      	sub	sp, #32
   24df0:	4605      	mov	r5, r0
   24df2:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, false);
   24df4:	6a80      	ldr	r0, [r0, #40]	; 0x28
   24df6:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   24df8:	4690      	mov	r8, r2
   24dfa:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   24dfc:	f7ff fef0 	bl	24be0 <flash_write_protection_set>
	if (rc) {
   24e00:	2800      	cmp	r0, #0
   24e02:	d132      	bne.n	24e6a <nvs_flash_al_wrt.part.0+0x86>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   24e04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   24e06:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   24e0a:	fa1a f484 	uxtah	r4, sl, r4
   24e0e:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   24e12:	681f      	ldr	r7, [r3, #0]
   24e14:	427f      	negs	r7, r7
	if (blen > 0) {
   24e16:	4037      	ands	r7, r6
   24e18:	d00b      	beq.n	24e32 <nvs_flash_al_wrt.part.0+0x4e>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   24e1a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   24e1c:	6883      	ldr	r3, [r0, #8]
   24e1e:	4642      	mov	r2, r8
   24e20:	685c      	ldr	r4, [r3, #4]
   24e22:	4649      	mov	r1, r9
   24e24:	463b      	mov	r3, r7
   24e26:	47a0      	blx	r4
		if (rc) {
   24e28:	4604      	mov	r4, r0
   24e2a:	b9c8      	cbnz	r0, 24e60 <nvs_flash_al_wrt.part.0+0x7c>
		len -= blen;
   24e2c:	1bf6      	subs	r6, r6, r7
		offset += blen;
   24e2e:	44b9      	add	r9, r7
		data8 += blen;
   24e30:	44b8      	add	r8, r7
	if (len) {
   24e32:	b1ee      	cbz	r6, 24e70 <nvs_flash_al_wrt.part.0+0x8c>
		memcpy(buf, data8, len);
   24e34:	4632      	mov	r2, r6
   24e36:	4641      	mov	r1, r8
   24e38:	4668      	mov	r0, sp
   24e3a:	f001 fdb2 	bl	269a2 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   24e3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   24e40:	681a      	ldr	r2, [r3, #0]
   24e42:	7919      	ldrb	r1, [r3, #4]
   24e44:	1b92      	subs	r2, r2, r6
   24e46:	eb0d 0006 	add.w	r0, sp, r6
   24e4a:	f001 fdd5 	bl	269f8 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   24e4e:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   24e52:	681b      	ldr	r3, [r3, #0]
   24e54:	6882      	ldr	r2, [r0, #8]
   24e56:	4649      	mov	r1, r9
   24e58:	6854      	ldr	r4, [r2, #4]
   24e5a:	466a      	mov	r2, sp
   24e5c:	47a0      	blx	r4
   24e5e:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   24e60:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   24e62:	2101      	movs	r1, #1
   24e64:	f7ff febc 	bl	24be0 <flash_write_protection_set>
	return rc;
   24e68:	4620      	mov	r0, r4
}
   24e6a:	b008      	add	sp, #32
   24e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   24e70:	4634      	mov	r4, r6
   24e72:	e7f5      	b.n	24e60 <nvs_flash_al_wrt.part.0+0x7c>

00024e74 <nvs_flash_ate_wrt>:
{
   24e74:	b510      	push	{r4, lr}
   24e76:	460a      	mov	r2, r1
	if (!len) {
   24e78:	2308      	movs	r3, #8
   24e7a:	6841      	ldr	r1, [r0, #4]
{
   24e7c:	4604      	mov	r4, r0
   24e7e:	f7ff ffb1 	bl	24de4 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   24e82:	2108      	movs	r1, #8
   24e84:	4603      	mov	r3, r0
   24e86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   24e88:	f7ff ff1f 	bl	24cca <nvs_al_size.isra.0>
   24e8c:	6862      	ldr	r2, [r4, #4]
   24e8e:	1a12      	subs	r2, r2, r0
   24e90:	6062      	str	r2, [r4, #4]
}
   24e92:	4618      	mov	r0, r3
   24e94:	bd10      	pop	{r4, pc}

00024e96 <nvs_delete>:

int nvs_delete(struct nvs_fs *fs, uint16_t id)
{
	return nvs_write(fs, id, NULL, 0);
   24e96:	2300      	movs	r3, #0
   24e98:	461a      	mov	r2, r3
   24e9a:	f7e0 b917 	b.w	50cc <nvs_write>

00024e9e <nvs_read_hist>:
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   24e9e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   24ea2:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   24ea4:	7c03      	ldrb	r3, [r0, #16]
{
   24ea6:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   24eaa:	4604      	mov	r4, r0
   24eac:	460f      	mov	r7, r1
   24eae:	4690      	mov	r8, r2
	if (!fs->ready) {
   24eb0:	2b00      	cmp	r3, #0
   24eb2:	d044      	beq.n	24f3e <nvs_read_hist+0xa0>
		LOG_ERR("NVS not initialized");
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   24eb4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   24eb6:	2108      	movs	r1, #8
   24eb8:	f7ff ff07 	bl	24cca <nvs_al_size.isra.0>

	if (len > (fs->sector_size - 2 * ate_size)) {
   24ebc:	89a3      	ldrh	r3, [r4, #12]
   24ebe:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   24ec2:	42b3      	cmp	r3, r6
   24ec4:	d33e      	bcc.n	24f44 <nvs_read_hist+0xa6>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   24ec6:	6863      	ldr	r3, [r4, #4]
   24ec8:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
   24eca:	f04f 0a00 	mov.w	sl, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
		rd_addr = wlk_addr;
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   24ece:	aa02      	add	r2, sp, #8
   24ed0:	a901      	add	r1, sp, #4
   24ed2:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   24ed4:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   24ed6:	f7ff ff35 	bl	24d44 <nvs_prev_ate>
		if (rc) {
   24eda:	bb30      	cbnz	r0, 24f2a <nvs_read_hist+0x8c>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
   24edc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   24ee0:	42bb      	cmp	r3, r7
   24ee2:	d107      	bne.n	24ef4 <nvs_read_hist+0x56>
   24ee4:	a802      	add	r0, sp, #8
   24ee6:	f7ff fedb 	bl	24ca0 <nvs_ate_crc8_check>
   24eea:	b918      	cbnz	r0, 24ef4 <nvs_read_hist+0x56>
			cnt_his++;
   24eec:	f10a 0a01 	add.w	sl, sl, #1
   24ef0:	fa1f fa8a 	uxth.w	sl, sl
		}
		if (wlk_addr == fs->ate_wra) {
   24ef4:	6862      	ldr	r2, [r4, #4]
   24ef6:	9b01      	ldr	r3, [sp, #4]
   24ef8:	429a      	cmp	r2, r3
   24efa:	d019      	beq.n	24f30 <nvs_read_hist+0x92>
	while (cnt_his <= cnt) {
   24efc:	45ca      	cmp	sl, r9
   24efe:	d9e6      	bls.n	24ece <nvs_read_hist+0x30>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   24f00:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   24f04:	b1c3      	cbz	r3, 24f38 <nvs_read_hist+0x9a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   24f06:	45ca      	cmp	sl, r9
   24f08:	d316      	bcc.n	24f38 <nvs_read_hist+0x9a>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
	rd_addr += wlk_ate.offset;
   24f0a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   24f0e:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   24f10:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   24f12:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   24f16:	bf28      	it	cs
   24f18:	4633      	movcs	r3, r6
   24f1a:	4642      	mov	r2, r8
   24f1c:	4429      	add	r1, r5
   24f1e:	4620      	mov	r0, r4
   24f20:	f7ff fe61 	bl	24be6 <nvs_flash_rd>
	if (rc) {
   24f24:	b908      	cbnz	r0, 24f2a <nvs_read_hist+0x8c>
		goto err;
	}

	return wlk_ate.len;
   24f26:	f8bd 000c 	ldrh.w	r0, [sp, #12]

err:
	return rc;
}
   24f2a:	b004      	add	sp, #16
   24f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   24f30:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   24f34:	42bb      	cmp	r3, r7
   24f36:	d0e3      	beq.n	24f00 <nvs_read_hist+0x62>
		return -ENOENT;
   24f38:	f06f 0001 	mvn.w	r0, #1
   24f3c:	e7f5      	b.n	24f2a <nvs_read_hist+0x8c>
		return -EACCES;
   24f3e:	f06f 000c 	mvn.w	r0, #12
   24f42:	e7f2      	b.n	24f2a <nvs_read_hist+0x8c>
		return -EINVAL;
   24f44:	f06f 0015 	mvn.w	r0, #21
   24f48:	e7ef      	b.n	24f2a <nvs_read_hist+0x8c>

00024f4a <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   24f4a:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   24f4c:	2400      	movs	r4, #0
   24f4e:	9400      	str	r4, [sp, #0]
   24f50:	f7ff ffa5 	bl	24e9e <nvs_read_hist>
	return rc;
}
   24f54:	b002      	add	sp, #8
   24f56:	bd10      	pop	{r4, pc}

00024f58 <device_get_binding>:
   24f58:	f7fd bf72 	b.w	22e40 <z_impl_device_get_binding>

00024f5c <get_sectors_cb>:
{
   24f5c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   24f5e:	6802      	ldr	r2, [r0, #0]
   24f60:	684c      	ldr	r4, [r1, #4]
   24f62:	42a2      	cmp	r2, r4
   24f64:	d316      	bcc.n	24f94 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   24f66:	688b      	ldr	r3, [r1, #8]
   24f68:	4423      	add	r3, r4
   24f6a:	429a      	cmp	r2, r3
   24f6c:	d206      	bcs.n	24f7c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   24f6e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   24f72:	42ab      	cmp	r3, r5
   24f74:	d304      	bcc.n	24f80 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   24f76:	f06f 030b 	mvn.w	r3, #11
   24f7a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   24f7c:	2000      	movs	r0, #0
   24f7e:	e00a      	b.n	24f96 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   24f80:	68cd      	ldr	r5, [r1, #12]
   24f82:	1b12      	subs	r2, r2, r4
   24f84:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   24f88:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   24f8c:	6842      	ldr	r2, [r0, #4]
   24f8e:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   24f90:	3301      	adds	r3, #1
   24f92:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   24f94:	2001      	movs	r0, #1
}
   24f96:	bd70      	pop	{r4, r5, r6, pc}

00024f98 <settings_load>:
	return settings_load_subtree(NULL);
   24f98:	2000      	movs	r0, #0
   24f9a:	f7e0 b9fb 	b.w	5394 <settings_load_subtree>

00024f9e <settings_delete>:
	return settings_save_one(name, NULL, 0);
   24f9e:	2200      	movs	r2, #0
   24fa0:	4611      	mov	r1, r2
   24fa2:	f7e0 b9bd 	b.w	5320 <settings_save_one>

00024fa6 <settings_name_steq>:
{
   24fa6:	4603      	mov	r3, r0
   24fa8:	b530      	push	{r4, r5, lr}
   24faa:	4608      	mov	r0, r1
	if (next) {
   24fac:	b10a      	cbz	r2, 24fb2 <settings_name_steq+0xc>
		*next = NULL;
   24fae:	2100      	movs	r1, #0
   24fb0:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   24fb2:	b163      	cbz	r3, 24fce <settings_name_steq+0x28>
   24fb4:	b190      	cbz	r0, 24fdc <settings_name_steq+0x36>
   24fb6:	1e41      	subs	r1, r0, #1
   24fb8:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   24fba:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   24fbe:	4604      	mov	r4, r0
   24fc0:	f810 3b01 	ldrb.w	r3, [r0], #1
   24fc4:	b15d      	cbz	r5, 24fde <settings_name_steq+0x38>
   24fc6:	429d      	cmp	r5, r3
   24fc8:	d101      	bne.n	24fce <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   24fca:	2d3d      	cmp	r5, #61	; 0x3d
   24fcc:	d1f5      	bne.n	24fba <settings_name_steq+0x14>
	return 0;
   24fce:	2000      	movs	r0, #0
   24fd0:	e004      	b.n	24fdc <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   24fd2:	2b3d      	cmp	r3, #61	; 0x3d
   24fd4:	d008      	beq.n	24fe8 <settings_name_steq+0x42>
   24fd6:	fab3 f083 	clz	r0, r3
   24fda:	0940      	lsrs	r0, r0, #5
}
   24fdc:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   24fde:	2b2f      	cmp	r3, #47	; 0x2f
   24fe0:	d1f7      	bne.n	24fd2 <settings_name_steq+0x2c>
		if (next) {
   24fe2:	b10a      	cbz	r2, 24fe8 <settings_name_steq+0x42>
			*next = name + 1;
   24fe4:	3401      	adds	r4, #1
   24fe6:	6014      	str	r4, [r2, #0]
		return 1;
   24fe8:	2001      	movs	r0, #1
   24fea:	e7f7      	b.n	24fdc <settings_name_steq+0x36>

00024fec <settings_name_next>:
{
   24fec:	b530      	push	{r4, r5, lr}
   24fee:	4603      	mov	r3, r0
	if (next) {
   24ff0:	b109      	cbz	r1, 24ff6 <settings_name_next+0xa>
		*next = NULL;
   24ff2:	2200      	movs	r2, #0
   24ff4:	600a      	str	r2, [r1, #0]
	if (!name) {
   24ff6:	b16b      	cbz	r3, 25014 <settings_name_next+0x28>
   24ff8:	461a      	mov	r2, r3
   24ffa:	4614      	mov	r4, r2
   24ffc:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   24ffe:	f812 5b01 	ldrb.w	r5, [r2], #1
   25002:	b135      	cbz	r5, 25012 <settings_name_next+0x26>
   25004:	2d3d      	cmp	r5, #61	; 0x3d
   25006:	d004      	beq.n	25012 <settings_name_next+0x26>
   25008:	2d2f      	cmp	r5, #47	; 0x2f
   2500a:	d1f6      	bne.n	24ffa <settings_name_next+0xe>
		if (next) {
   2500c:	b109      	cbz	r1, 25012 <settings_name_next+0x26>
			*next = name + 1;
   2500e:	3401      	adds	r4, #1
   25010:	600c      	str	r4, [r1, #0]
}
   25012:	bd30      	pop	{r4, r5, pc}
		return 0;
   25014:	4618      	mov	r0, r3
   25016:	e7fc      	b.n	25012 <settings_name_next+0x26>

00025018 <settings_call_set_handler>:
{
   25018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2501c:	b085      	sub	sp, #20
   2501e:	4604      	mov	r4, r0
   25020:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	const char *name_key = name;
   25024:	9003      	str	r0, [sp, #12]
{
   25026:	460d      	mov	r5, r1
   25028:	4616      	mov	r6, r2
   2502a:	461f      	mov	r7, r3
	if (load_arg && load_arg->subtree &&
   2502c:	f1b8 0f00 	cmp.w	r8, #0
   25030:	d018      	beq.n	25064 <settings_call_set_handler+0x4c>
   25032:	f8d8 1000 	ldr.w	r1, [r8]
   25036:	b181      	cbz	r1, 2505a <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   25038:	aa03      	add	r2, sp, #12
   2503a:	f7ff ffb4 	bl	24fa6 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   2503e:	b960      	cbnz	r0, 2505a <settings_call_set_handler+0x42>
			rc = 0;
   25040:	2000      	movs	r0, #0
   25042:	e007      	b.n	25054 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   25044:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25048:	9300      	str	r3, [sp, #0]
   2504a:	9803      	ldr	r0, [sp, #12]
   2504c:	463b      	mov	r3, r7
   2504e:	4632      	mov	r2, r6
   25050:	4629      	mov	r1, r5
   25052:	47c8      	blx	r9
}
   25054:	b005      	add	sp, #20
   25056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   2505a:	f8d8 9004 	ldr.w	r9, [r8, #4]
   2505e:	f1b9 0f00 	cmp.w	r9, #0
   25062:	d1ef      	bne.n	25044 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
   25064:	a903      	add	r1, sp, #12
   25066:	4620      	mov	r0, r4
   25068:	f7e0 f9ea 	bl	5440 <settings_parse_and_lookup>
		if (!ch) {
   2506c:	2800      	cmp	r0, #0
   2506e:	d0e7      	beq.n	25040 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   25070:	6884      	ldr	r4, [r0, #8]
   25072:	9803      	ldr	r0, [sp, #12]
   25074:	463b      	mov	r3, r7
   25076:	4632      	mov	r2, r6
   25078:	4629      	mov	r1, r5
   2507a:	47a0      	blx	r4
   2507c:	e7e0      	b.n	25040 <settings_call_set_handler+0x28>

0002507e <settings_nvs_read_fn>:
{
   2507e:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   25080:	4613      	mov	r3, r2
{
   25082:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   25084:	460a      	mov	r2, r1
   25086:	8881      	ldrh	r1, [r0, #4]
   25088:	6800      	ldr	r0, [r0, #0]
   2508a:	f7ff ff5e 	bl	24f4a <nvs_read>
}
   2508e:	42a0      	cmp	r0, r4
   25090:	bfa8      	it	ge
   25092:	4620      	movge	r0, r4
   25094:	bd10      	pop	{r4, pc}

00025096 <settings_nvs_save>:
{
   25096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2509a:	b097      	sub	sp, #92	; 0x5c
   2509c:	4604      	mov	r4, r0
   2509e:	9201      	str	r2, [sp, #4]
   250a0:	469b      	mov	fp, r3
	if (!name) {
   250a2:	4689      	mov	r9, r1
   250a4:	2900      	cmp	r1, #0
   250a6:	d066      	beq.n	25176 <settings_nvs_save+0xe0>
	delete = ((value == NULL) || (val_len == 0));
   250a8:	b1da      	cbz	r2, 250e2 <settings_nvs_save+0x4c>
   250aa:	fabb f78b 	clz	r7, fp
   250ae:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   250b0:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   250b2:	3501      	adds	r5, #1
   250b4:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   250b6:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   250b8:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   250bc:	1e6e      	subs	r6, r5, #1
   250be:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   250c0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   250c4:	d02d      	beq.n	25122 <settings_nvs_save+0x8c>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   250c6:	234a      	movs	r3, #74	; 0x4a
   250c8:	aa03      	add	r2, sp, #12
   250ca:	4631      	mov	r1, r6
   250cc:	4650      	mov	r0, sl
   250ce:	f7ff ff3c 	bl	24f4a <nvs_read>
		if (rc < 0) {
   250d2:	2800      	cmp	r0, #0
   250d4:	da07      	bge.n	250e6 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   250d6:	f110 0f02 	cmn.w	r0, #2
   250da:	bf08      	it	eq
   250dc:	46b0      	moveq	r8, r6
   250de:	4635      	mov	r5, r6
   250e0:	e7ec      	b.n	250bc <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   250e2:	2701      	movs	r7, #1
   250e4:	e7e4      	b.n	250b0 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   250e6:	ab16      	add	r3, sp, #88	; 0x58
   250e8:	4418      	add	r0, r3
   250ea:	2300      	movs	r3, #0
   250ec:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   250f0:	a903      	add	r1, sp, #12
   250f2:	4648      	mov	r0, r9
   250f4:	f001 fc21 	bl	2693a <strcmp>
   250f8:	2800      	cmp	r0, #0
   250fa:	d1f0      	bne.n	250de <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   250fc:	b3cf      	cbz	r7, 25172 <settings_nvs_save+0xdc>
   250fe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   25100:	42b3      	cmp	r3, r6
   25102:	d140      	bne.n	25186 <settings_nvs_save+0xf0>
			cf->last_name_id--;
   25104:	4622      	mov	r2, r4
   25106:	1e73      	subs	r3, r6, #1
   25108:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2510c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   25110:	2302      	movs	r3, #2
   25112:	4650      	mov	r0, sl
   25114:	f7df ffda 	bl	50cc <nvs_write>
			if (rc < 0) {
   25118:	2800      	cmp	r0, #0
   2511a:	da34      	bge.n	25186 <settings_nvs_save+0xf0>
}
   2511c:	b017      	add	sp, #92	; 0x5c
   2511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   25122:	bb5f      	cbnz	r7, 2517c <settings_nvs_save+0xe6>
	write_name = true;
   25124:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   25126:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2512a:	d029      	beq.n	25180 <settings_nvs_save+0xea>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2512c:	f104 0508 	add.w	r5, r4, #8
   25130:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   25134:	9a01      	ldr	r2, [sp, #4]
   25136:	465b      	mov	r3, fp
   25138:	b289      	uxth	r1, r1
   2513a:	4628      	mov	r0, r5
   2513c:	f7df ffc6 	bl	50cc <nvs_write>
	if (write_name) {
   25140:	b157      	cbz	r7, 25158 <settings_nvs_save+0xc2>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   25142:	4648      	mov	r0, r9
   25144:	f001 fbf2 	bl	2692c <strlen>
   25148:	464a      	mov	r2, r9
   2514a:	4603      	mov	r3, r0
   2514c:	4641      	mov	r1, r8
   2514e:	4628      	mov	r0, r5
   25150:	f7df ffbc 	bl	50cc <nvs_write>
		if (rc < 0) {
   25154:	2800      	cmp	r0, #0
   25156:	dbe1      	blt.n	2511c <settings_nvs_save+0x86>
	if (write_name_id > cf->last_name_id) {
   25158:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2515a:	4543      	cmp	r3, r8
   2515c:	d220      	bcs.n	251a0 <settings_nvs_save+0x10a>
		cf->last_name_id = write_name_id;
   2515e:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   25160:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   25162:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   25166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2516a:	4628      	mov	r0, r5
   2516c:	f7df ffae 	bl	50cc <nvs_write>
   25170:	e016      	b.n	251a0 <settings_nvs_save+0x10a>
   25172:	46b0      	mov	r8, r6
   25174:	e7d7      	b.n	25126 <settings_nvs_save+0x90>
		return -EINVAL;
   25176:	f06f 0015 	mvn.w	r0, #21
   2517a:	e7cf      	b.n	2511c <settings_nvs_save+0x86>
		return 0;
   2517c:	2000      	movs	r0, #0
   2517e:	e7cd      	b.n	2511c <settings_nvs_save+0x86>
		return -ENOMEM;
   25180:	f06f 000b 	mvn.w	r0, #11
   25184:	e7ca      	b.n	2511c <settings_nvs_save+0x86>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   25186:	4631      	mov	r1, r6
   25188:	4650      	mov	r0, sl
   2518a:	f7ff fe84 	bl	24e96 <nvs_delete>
			if (rc >= 0) {
   2518e:	2800      	cmp	r0, #0
   25190:	dbc4      	blt.n	2511c <settings_nvs_save+0x86>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   25192:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   25196:	313f      	adds	r1, #63	; 0x3f
   25198:	b289      	uxth	r1, r1
   2519a:	4650      	mov	r0, sl
   2519c:	f7ff fe7b 	bl	24e96 <nvs_delete>
	if (rc < 0) {
   251a0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   251a4:	e7ba      	b.n	2511c <settings_nvs_save+0x86>

000251a6 <settings_nvs_backend_init>:
{
   251a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   251a8:	f100 0608 	add.w	r6, r0, #8
   251ac:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   251ae:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   251b0:	4630      	mov	r0, r6
   251b2:	f7df fe87 	bl	4ec4 <nvs_init>
	if (rc) {
   251b6:	4605      	mov	r5, r0
   251b8:	b970      	cbnz	r0, 251d8 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   251ba:	2302      	movs	r3, #2
   251bc:	f10d 0206 	add.w	r2, sp, #6
   251c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   251c4:	4630      	mov	r0, r6
   251c6:	f7ff fec0 	bl	24f4a <nvs_read>
	if (rc < 0) {
   251ca:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   251cc:	bfac      	ite	ge
   251ce:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   251d2:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   251d6:	8723      	strh	r3, [r4, #56]	; 0x38
}
   251d8:	4628      	mov	r0, r5
   251da:	b002      	add	sp, #8
   251dc:	bd70      	pop	{r4, r5, r6, pc}

000251de <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   251de:	68c2      	ldr	r2, [r0, #12]
   251e0:	b2cb      	uxtb	r3, r1
   251e2:	210c      	movs	r1, #12
   251e4:	fb03 2101 	mla	r1, r3, r1, r2
   251e8:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   251ea:	f000 0007 	and.w	r0, r0, #7
   251ee:	4770      	bx	lr

000251f0 <set_off_state>:
	__asm__ volatile(
   251f0:	f04f 0320 	mov.w	r3, #32
   251f4:	f3ef 8211 	mrs	r2, BASEPRI
   251f8:	f383 8811 	msr	BASEPRI, r3
   251fc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   25200:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   25202:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   25206:	d001      	beq.n	2520c <set_off_state+0x1c>
   25208:	428b      	cmp	r3, r1
   2520a:	d107      	bne.n	2521c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2520c:	2301      	movs	r3, #1
   2520e:	6003      	str	r3, [r0, #0]
	int err = 0;
   25210:	2000      	movs	r0, #0
	__asm__ volatile(
   25212:	f382 8811 	msr	BASEPRI, r2
   25216:	f3bf 8f6f 	isb	sy
}
   2521a:	4770      	bx	lr
		err = -EPERM;
   2521c:	f04f 30ff 	mov.w	r0, #4294967295
   25220:	e7f7      	b.n	25212 <set_off_state+0x22>

00025222 <set_starting_state>:
{
   25222:	b510      	push	{r4, lr}
	__asm__ volatile(
   25224:	f04f 0320 	mov.w	r3, #32
   25228:	f3ef 8211 	mrs	r2, BASEPRI
   2522c:	f383 8811 	msr	BASEPRI, r3
   25230:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   25234:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   25236:	f003 0407 	and.w	r4, r3, #7
   2523a:	2c01      	cmp	r4, #1
   2523c:	d106      	bne.n	2524c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2523e:	6001      	str	r1, [r0, #0]
	int err = 0;
   25240:	2000      	movs	r0, #0
	__asm__ volatile(
   25242:	f382 8811 	msr	BASEPRI, r2
   25246:	f3bf 8f6f 	isb	sy
}
   2524a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2524c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   25250:	428b      	cmp	r3, r1
		err = -EALREADY;
   25252:	bf14      	ite	ne
   25254:	f04f 30ff 	movne.w	r0, #4294967295
   25258:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   2525c:	e7f1      	b.n	25242 <set_starting_state+0x20>

0002525e <set_on_state>:
	__asm__ volatile(
   2525e:	f04f 0320 	mov.w	r3, #32
   25262:	f3ef 8211 	mrs	r2, BASEPRI
   25266:	f383 8811 	msr	BASEPRI, r3
   2526a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2526e:	6803      	ldr	r3, [r0, #0]
   25270:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   25274:	f043 0302 	orr.w	r3, r3, #2
   25278:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2527a:	f382 8811 	msr	BASEPRI, r2
   2527e:	f3bf 8f6f 	isb	sy
}
   25282:	4770      	bx	lr

00025284 <onoff_started_callback>:
	return &data->mgr[type];
   25284:	68c0      	ldr	r0, [r0, #12]
{
   25286:	b410      	push	{r4}
	return &data->mgr[type];
   25288:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2528a:	241c      	movs	r4, #28
   2528c:	fb03 0004 	mla	r0, r3, r4, r0
   25290:	2100      	movs	r1, #0
}
   25292:	bc10      	pop	{r4}
	notify(mgr, 0);
   25294:	4710      	bx	r2

00025296 <blocking_start_callback>:
{
   25296:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   25298:	f7fe bc0c 	b.w	23ab4 <z_impl_k_sem_give>

0002529c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2529c:	2000      	movs	r0, #0
   2529e:	f7fc bf21 	b.w	220e4 <nrfx_clock_stop>

000252a2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   252a2:	2000      	movs	r0, #0
   252a4:	f7fc beec 	b.w	22080 <nrfx_clock_start>

000252a8 <api_stop>:
{
   252a8:	b538      	push	{r3, r4, r5, lr}
   252aa:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   252ac:	230c      	movs	r3, #12
{
   252ae:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   252b0:	4363      	muls	r3, r4
   252b2:	68c0      	ldr	r0, [r0, #12]
   252b4:	3340      	adds	r3, #64	; 0x40
   252b6:	2180      	movs	r1, #128	; 0x80
   252b8:	4418      	add	r0, r3
   252ba:	f7ff ff99 	bl	251f0 <set_off_state>
	if (err < 0) {
   252be:	2800      	cmp	r0, #0
   252c0:	db05      	blt.n	252ce <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   252c2:	6869      	ldr	r1, [r5, #4]
   252c4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   252c8:	6863      	ldr	r3, [r4, #4]
   252ca:	4798      	blx	r3
	return 0;
   252cc:	2000      	movs	r0, #0
}
   252ce:	bd38      	pop	{r3, r4, r5, pc}

000252d0 <api_start>:
{
   252d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   252d4:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   252d6:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   252d8:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   252da:	436f      	muls	r7, r5
{
   252dc:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   252de:	f107 0040 	add.w	r0, r7, #64	; 0x40
   252e2:	2180      	movs	r1, #128	; 0x80
   252e4:	4420      	add	r0, r4
{
   252e6:	4690      	mov	r8, r2
   252e8:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   252ea:	f7ff ff9a 	bl	25222 <set_starting_state>
	if (err < 0) {
   252ee:	2800      	cmp	r0, #0
   252f0:	db07      	blt.n	25302 <api_start+0x32>
	subdata->cb = cb;
   252f2:	443c      	add	r4, r7
	subdata->user_data = user_data;
   252f4:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   252f8:	6873      	ldr	r3, [r6, #4]
   252fa:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   252fe:	4798      	blx	r3
	return 0;
   25300:	2000      	movs	r0, #0
}
   25302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025306 <gpio_pin_configure>:
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   25306:	04d3      	lsls	r3, r2, #19
{
   25308:	b570      	push	{r4, r5, r6, lr}
	struct gpio_driver_data *data =
   2530a:	68c5      	ldr	r5, [r0, #12]
{
   2530c:	460e      	mov	r6, r1
   2530e:	4614      	mov	r4, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   25310:	d506      	bpl.n	25320 <gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   25312:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   25316:	d003      	beq.n	25320 <gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   25318:	07d1      	lsls	r1, r2, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   2531a:	bf48      	it	mi
   2531c:	f482 54e0 	eormi.w	r4, r2, #7168	; 0x1c00
	return api->pin_configure(port, pin, flags);
   25320:	6883      	ldr	r3, [r0, #8]
   25322:	4622      	mov	r2, r4
   25324:	681b      	ldr	r3, [r3, #0]
   25326:	4631      	mov	r1, r6
   25328:	4798      	blx	r3
	if (ret != 0) {
   2532a:	b940      	cbnz	r0, 2533e <gpio_pin_configure+0x38>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2532c:	682b      	ldr	r3, [r5, #0]
   2532e:	2201      	movs	r2, #1
   25330:	fa02 f106 	lsl.w	r1, r2, r6
   25334:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   25336:	bf4c      	ite	mi
   25338:	430b      	orrmi	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2533a:	438b      	bicpl	r3, r1
   2533c:	602b      	str	r3, [r5, #0]
}
   2533e:	bd70      	pop	{r4, r5, r6, pc}

00025340 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   25340:	2301      	movs	r3, #1
   25342:	fa03 f101 	lsl.w	r1, r3, r1
   25346:	68c3      	ldr	r3, [r0, #12]
   25348:	681b      	ldr	r3, [r3, #0]
   2534a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2534c:	bf18      	it	ne
   2534e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   25352:	b112      	cbz	r2, 2535a <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   25354:	6883      	ldr	r3, [r0, #8]
   25356:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   25358:	4718      	bx	r3
   2535a:	6883      	ldr	r3, [r0, #8]
   2535c:	691b      	ldr	r3, [r3, #16]
   2535e:	e7fb      	b.n	25358 <gpio_pin_set+0x18>

00025360 <ssd16xx_blanking_off>:
}
   25360:	f06f 0022 	mvn.w	r0, #34	; 0x22
   25364:	4770      	bx	lr

00025366 <ssd16xx_read>:
}
   25366:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2536a:	4770      	bx	lr

0002536c <ssd16xx_get_framebuffer>:
}
   2536c:	2000      	movs	r0, #0
   2536e:	4770      	bx	lr

00025370 <ssd16xx_set_brightness>:
}
   25370:	f06f 0022 	mvn.w	r0, #34	; 0x22
   25374:	4770      	bx	lr

00025376 <ssd16xx_set_pixel_format>:
	if (pf == PIXEL_FORMAT_MONO10) {
   25376:	2904      	cmp	r1, #4
}
   25378:	bf14      	ite	ne
   2537a:	f06f 0022 	mvnne.w	r0, #34	; 0x22
   2537e:	2000      	moveq	r0, #0
   25380:	4770      	bx	lr

00025382 <ssd16xx_set_contrast>:
   25382:	f06f 0022 	mvn.w	r0, #34	; 0x22
   25386:	4770      	bx	lr

00025388 <k_msleep.constprop.0>:
	return z_impl_k_sleep(timeout);
   25388:	2021      	movs	r0, #33	; 0x21
   2538a:	2100      	movs	r1, #0
   2538c:	f7fe bb6c 	b.w	23a68 <z_impl_k_sleep>

00025390 <ssd16xx_set_orientation>:
   25390:	f06f 0022 	mvn.w	r0, #34	; 0x22
   25394:	4770      	bx	lr

00025396 <ssd16xx_blanking_on>:
   25396:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2539a:	4770      	bx	lr

0002539c <ssd16xx_busy_wait.isra.0>:
static inline void ssd16xx_busy_wait(struct ssd16xx_data *driver)
   2539c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2539e:	4604      	mov	r4, r0
		pin = gpio_pin_get(driver->busy, SSD16XX_BUSY_PIN);
   253a0:	6820      	ldr	r0, [r4, #0]
	const struct gpio_driver_data *const data =
   253a2:	68c5      	ldr	r5, [r0, #12]
	return api->port_get_raw(port, value);
   253a4:	6883      	ldr	r3, [r0, #8]
   253a6:	a901      	add	r1, sp, #4
   253a8:	685b      	ldr	r3, [r3, #4]
   253aa:	4798      	blx	r3
	if (ret == 0) {
   253ac:	b920      	cbnz	r0, 253b8 <ssd16xx_busy_wait.isra.0+0x1c>
		*value ^= data->invert;
   253ae:	6828      	ldr	r0, [r5, #0]
   253b0:	9b01      	ldr	r3, [sp, #4]
   253b2:	4043      	eors	r3, r0
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   253b4:	f3c3 3080 	ubfx	r0, r3, #14, #1
	while (pin > 0) {
   253b8:	2800      	cmp	r0, #0
   253ba:	dc01      	bgt.n	253c0 <ssd16xx_busy_wait.isra.0+0x24>
}
   253bc:	b003      	add	sp, #12
   253be:	bd30      	pop	{r4, r5, pc}
		k_msleep(SSD16XX_BUSY_DELAY);
   253c0:	f7ff ffe2 	bl	25388 <k_msleep.constprop.0>
   253c4:	e7ec      	b.n	253a0 <ssd16xx_busy_wait.isra.0+0x4>

000253c6 <ssd16xx_write_cmd>:
{
   253c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253ca:	b086      	sub	sp, #24
   253cc:	4604      	mov	r4, r0
   253ce:	461e      	mov	r6, r3
	struct spi_buf buf = {.buf = &cmd, .len = sizeof(cmd)};
   253d0:	f10d 0307 	add.w	r3, sp, #7
{
   253d4:	f88d 1007 	strb.w	r1, [sp, #7]
	struct spi_buf buf = {.buf = &cmd, .len = sizeof(cmd)};
   253d8:	9302      	str	r3, [sp, #8]
{
   253da:	4615      	mov	r5, r2
	struct spi_buf_set buf_set = {.buffers = &buf, .count = 1};
   253dc:	ab02      	add	r3, sp, #8
	struct spi_buf buf = {.buf = &cmd, .len = sizeof(cmd)};
   253de:	2201      	movs	r2, #1
	gpio_pin_set(driver->dc, SSD16XX_DC_PIN, 1);
   253e0:	2110      	movs	r1, #16
   253e2:	6840      	ldr	r0, [r0, #4]
	struct spi_buf buf = {.buf = &cmd, .len = sizeof(cmd)};
   253e4:	9203      	str	r2, [sp, #12]
	struct spi_buf_set buf_set = {.buffers = &buf, .count = 1};
   253e6:	e9cd 3204 	strd	r3, r2, [sp, #16]
	err = spi_write(driver->spi_dev, &driver->spi_config, &buf_set);
   253ea:	f104 0710 	add.w	r7, r4, #16
	gpio_pin_set(driver->dc, SSD16XX_DC_PIN, 1);
   253ee:	f7ff ffa7 	bl	25340 <gpio_pin_set>
	err = spi_write(driver->spi_dev, &driver->spi_config, &buf_set);
   253f2:	68e0      	ldr	r0, [r4, #12]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   253f4:	6883      	ldr	r3, [r0, #8]
   253f6:	aa04      	add	r2, sp, #16
   253f8:	f8d3 8000 	ldr.w	r8, [r3]
   253fc:	4639      	mov	r1, r7
   253fe:	2300      	movs	r3, #0
   25400:	47c0      	blx	r8
	if (err < 0) {
   25402:	2800      	cmp	r0, #0
   25404:	db10      	blt.n	25428 <ssd16xx_write_cmd+0x62>
	if (data != NULL) {
   25406:	b195      	cbz	r5, 2542e <ssd16xx_write_cmd+0x68>
		gpio_pin_set(driver->dc, SSD16XX_DC_PIN, 0);
   25408:	6860      	ldr	r0, [r4, #4]
   2540a:	2200      	movs	r2, #0
   2540c:	2110      	movs	r1, #16
		buf.len = len;
   2540e:	e9cd 5602 	strd	r5, r6, [sp, #8]
		gpio_pin_set(driver->dc, SSD16XX_DC_PIN, 0);
   25412:	f7ff ff95 	bl	25340 <gpio_pin_set>
		err = spi_write(driver->spi_dev, &driver->spi_config, &buf_set);
   25416:	68e0      	ldr	r0, [r4, #12]
   25418:	6883      	ldr	r3, [r0, #8]
   2541a:	aa04      	add	r2, sp, #16
   2541c:	681c      	ldr	r4, [r3, #0]
   2541e:	4639      	mov	r1, r7
   25420:	2300      	movs	r3, #0
   25422:	47a0      	blx	r4
		if (err < 0) {
   25424:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
   25428:	b006      	add	sp, #24
   2542a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
   2542e:	4628      	mov	r0, r5
   25430:	e7fa      	b.n	25428 <ssd16xx_write_cmd+0x62>

00025432 <ssd16xx_set_ram_param>:
{
   25432:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25434:	461d      	mov	r5, r3
	data[0] = (uint8_t)x;
   25436:	f88d 1004 	strb.w	r1, [sp, #4]
   2543a:	f88d 2005 	strb.w	r2, [sp, #5]
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_RAM_XPOS_CTRL, tmp, len);
   2543e:	2302      	movs	r3, #2
   25440:	aa01      	add	r2, sp, #4
   25442:	2144      	movs	r1, #68	; 0x44
{
   25444:	4604      	mov	r4, r0
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_RAM_XPOS_CTRL, tmp, len);
   25446:	f7ff ffbe 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
   2544a:	2800      	cmp	r0, #0
   2544c:	db0e      	blt.n	2546c <ssd16xx_set_ram_param+0x3a>
	dst[0] = val;
   2544e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   25452:	f8ad 3006 	strh.w	r3, [sp, #6]
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_RAM_YPOS_CTRL, tmp,	len);
   25456:	2304      	movs	r3, #4
   25458:	eb0d 0203 	add.w	r2, sp, r3
   2545c:	2145      	movs	r1, #69	; 0x45
   2545e:	4620      	mov	r0, r4
   25460:	f8ad 5004 	strh.w	r5, [sp, #4]
   25464:	f7ff ffaf 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
   25468:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
   2546c:	b003      	add	sp, #12
   2546e:	bd30      	pop	{r4, r5, pc}

00025470 <ssd16xx_set_ram_ptr>:
{
   25470:	b537      	push	{r0, r1, r2, r4, r5, lr}
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_RAM_XPOS_CNTR, tmp, len);
   25472:	2301      	movs	r3, #1
	data[0] = (uint8_t)x;
   25474:	f88d 1004 	strb.w	r1, [sp, #4]
{
   25478:	4615      	mov	r5, r2
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_RAM_XPOS_CNTR, tmp, len);
   2547a:	214e      	movs	r1, #78	; 0x4e
   2547c:	aa01      	add	r2, sp, #4
{
   2547e:	4604      	mov	r4, r0
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_RAM_XPOS_CNTR, tmp, len);
   25480:	f7ff ffa1 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
   25484:	2800      	cmp	r0, #0
   25486:	db07      	blt.n	25498 <ssd16xx_set_ram_ptr+0x28>
	return ssd16xx_write_cmd(driver, SSD16XX_CMD_RAM_YPOS_CNTR, tmp, len);
   25488:	2302      	movs	r3, #2
   2548a:	aa01      	add	r2, sp, #4
   2548c:	214f      	movs	r1, #79	; 0x4f
   2548e:	4620      	mov	r0, r4
   25490:	f8ad 5004 	strh.w	r5, [sp, #4]
   25494:	f7ff ff97 	bl	253c6 <ssd16xx_write_cmd>
}
   25498:	b003      	add	sp, #12
   2549a:	bd30      	pop	{r4, r5, pc}

0002549c <ssd16xx_update_display.isra.0>:
static int ssd16xx_update_display(const struct device *dev)
   2549c:	b510      	push	{r4, lr}
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_UPDATE_CTRL2,
   2549e:	2301      	movs	r3, #1
   254a0:	f100 0229 	add.w	r2, r0, #41	; 0x29
   254a4:	2122      	movs	r1, #34	; 0x22
static int ssd16xx_update_display(const struct device *dev)
   254a6:	4604      	mov	r4, r0
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_UPDATE_CTRL2,
   254a8:	f7ff ff8d 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
   254ac:	2800      	cmp	r0, #0
   254ae:	db07      	blt.n	254c0 <ssd16xx_update_display.isra.0+0x24>
	return ssd16xx_write_cmd(driver, SSD16XX_CMD_MASTER_ACTIVATION,
   254b0:	2300      	movs	r3, #0
   254b2:	4620      	mov	r0, r4
   254b4:	461a      	mov	r2, r3
}
   254b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return ssd16xx_write_cmd(driver, SSD16XX_CMD_MASTER_ACTIVATION,
   254ba:	2120      	movs	r1, #32
   254bc:	f7ff bf83 	b.w	253c6 <ssd16xx_write_cmd>
}
   254c0:	bd10      	pop	{r4, pc}

000254c2 <ssd16xx_clear_cntlr_mem>:
{
   254c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ssd16xx_data *driver = dev->data;
   254c6:	68c5      	ldr	r5, [r0, #12]
{
   254c8:	b0c2      	sub	sp, #264	; 0x108
	uint8_t scan_mode = SSD16XX_DATA_ENTRY_XIYDY;
   254ca:	2305      	movs	r3, #5
   254cc:	f88d 300b 	strb.w	r3, [sp, #11]
{
   254d0:	4604      	mov	r4, r0
   254d2:	460f      	mov	r7, r1
   254d4:	4616      	mov	r6, r2
	if (ssd16xx_write_cmd(driver, SSD16XX_CMD_ENTRY_MODE, &scan_mode, 1)) {
   254d6:	2111      	movs	r1, #17
   254d8:	2301      	movs	r3, #1
   254da:	f10d 020b 	add.w	r2, sp, #11
   254de:	4628      	mov	r0, r5
   254e0:	f7ff ff71 	bl	253c6 <ssd16xx_write_cmd>
   254e4:	4601      	mov	r1, r0
   254e6:	b120      	cbz	r0, 254f2 <ssd16xx_clear_cntlr_mem+0x30>
		return -EIO;
   254e8:	f06f 0004 	mvn.w	r0, #4
}
   254ec:	b042      	add	sp, #264	; 0x108
   254ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (ssd16xx_set_ram_param(driver, SSD16XX_PANEL_FIRST_PAGE,
   254f2:	9000      	str	r0, [sp, #0]
   254f4:	23f9      	movs	r3, #249	; 0xf9
   254f6:	220f      	movs	r2, #15
   254f8:	4628      	mov	r0, r5
   254fa:	f7ff ff9a 	bl	25432 <ssd16xx_set_ram_param>
   254fe:	4601      	mov	r1, r0
   25500:	2800      	cmp	r0, #0
   25502:	d1f1      	bne.n	254e8 <ssd16xx_clear_cntlr_mem+0x26>
	if (ssd16xx_set_ram_ptr(driver, SSD16XX_PANEL_FIRST_PAGE,
   25504:	22f9      	movs	r2, #249	; 0xf9
   25506:	4628      	mov	r0, r5
   25508:	f7ff ffb2 	bl	25470 <ssd16xx_set_ram_ptr>
   2550c:	2800      	cmp	r0, #0
   2550e:	d1eb      	bne.n	254e8 <ssd16xx_clear_cntlr_mem+0x26>
	memset(clear_page, 0xff, sizeof(clear_page));
   25510:	22fa      	movs	r2, #250	; 0xfa
   25512:	21ff      	movs	r1, #255	; 0xff
   25514:	a803      	add	r0, sp, #12
   25516:	f001 fa6f 	bl	269f8 <memset>
   2551a:	f04f 0810 	mov.w	r8, #16
		if (ssd16xx_write_cmd(driver, ram_cmd, clear_page,
   2551e:	23fa      	movs	r3, #250	; 0xfa
   25520:	aa03      	add	r2, sp, #12
   25522:	4639      	mov	r1, r7
   25524:	4628      	mov	r0, r5
   25526:	f7ff ff4e 	bl	253c6 <ssd16xx_write_cmd>
   2552a:	2800      	cmp	r0, #0
   2552c:	d1dc      	bne.n	254e8 <ssd16xx_clear_cntlr_mem+0x26>
	for (int i = 0; i < panel_h; i++) {
   2552e:	f1b8 0801 	subs.w	r8, r8, #1
   25532:	d1f4      	bne.n	2551e <ssd16xx_clear_cntlr_mem+0x5c>
	if (update) {
   25534:	2e00      	cmp	r6, #0
   25536:	d0d9      	beq.n	254ec <ssd16xx_clear_cntlr_mem+0x2a>
		return ssd16xx_update_display(dev);
   25538:	68e0      	ldr	r0, [r4, #12]
   2553a:	f7ff ffaf 	bl	2549c <ssd16xx_update_display.isra.0>
   2553e:	e7d5      	b.n	254ec <ssd16xx_clear_cntlr_mem+0x2a>

00025540 <ssd16xx_write>:
{
   25540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ssd16xx_data *driver = dev->data;
   25544:	68c7      	ldr	r7, [r0, #12]
	if (desc->pitch < desc->width) {
   25546:	891c      	ldrh	r4, [r3, #8]
{
   25548:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   2554c:	4681      	mov	r9, r0
	if (desc->pitch < desc->width) {
   2554e:	8898      	ldrh	r0, [r3, #4]
   25550:	4284      	cmp	r4, r0
{
   25552:	4688      	mov	r8, r1
	if (desc->pitch < desc->width) {
   25554:	d320      	bcc.n	25598 <ssd16xx_write+0x58>
	buf_len = MIN(desc->buf_size, desc->height * desc->width / 8);
   25556:	88d9      	ldrh	r1, [r3, #6]
   25558:	681b      	ldr	r3, [r3, #0]
   2555a:	4606      	mov	r6, r0
   2555c:	434e      	muls	r6, r1
   2555e:	bf48      	it	mi
   25560:	3607      	addmi	r6, #7
   25562:	10f6      	asrs	r6, r6, #3
   25564:	429e      	cmp	r6, r3
   25566:	bf28      	it	cs
   25568:	461e      	movcs	r6, r3
	if (buf == NULL || buf_len == 0U) {
   2556a:	f1ba 0f00 	cmp.w	sl, #0
   2556e:	d013      	beq.n	25598 <ssd16xx_write+0x58>
   25570:	b196      	cbz	r6, 25598 <ssd16xx_write+0x58>
	if (desc->pitch > desc->width) {
   25572:	4284      	cmp	r4, r0
   25574:	d85a      	bhi.n	2562c <ssd16xx_write+0xec>
	if ((y + desc->height) > panel_h) {
   25576:	188d      	adds	r5, r1, r2
   25578:	2d78      	cmp	r5, #120	; 0x78
   2557a:	dc0d      	bgt.n	25598 <ssd16xx_write+0x58>
	if ((x + desc->width) > EPD_PANEL_WIDTH) {
   2557c:	eb08 0b00 	add.w	fp, r8, r0
   25580:	f1bb 0ffa 	cmp.w	fp, #250	; 0xfa
   25584:	dc08      	bgt.n	25598 <ssd16xx_write+0x58>
	if ((y % EPD_PANEL_NUMOF_ROWS_PER_PAGE) != 0U) {
   25586:	4311      	orrs	r1, r2
   25588:	074b      	lsls	r3, r1, #29
   2558a:	d105      	bne.n	25598 <ssd16xx_write+0x58>
	switch (driver->scan_mode) {
   2558c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   25590:	2b05      	cmp	r3, #5
   25592:	d004      	beq.n	2559e <ssd16xx_write+0x5e>
   25594:	2b06      	cmp	r3, #6
   25596:	d03a      	beq.n	2560e <ssd16xx_write+0xce>
		return -EINVAL;
   25598:	f06f 0015 	mvn.w	r0, #21
   2559c:	e048      	b.n	25630 <ssd16xx_write+0xf0>
		x_end = (y + desc->height - 1) / SSD16XX_PIXELS_PER_BYTE;
   2559e:	1e6b      	subs	r3, r5, #1
		y_start = (x + desc->width - 1);
   255a0:	f10b 30ff 	add.w	r0, fp, #4294967295
		x_end = (y + desc->height - 1) / SSD16XX_PIXELS_PER_BYTE;
   255a4:	bf48      	it	mi
   255a6:	1dab      	addmi	r3, r5, #6
		y_end = x;
   255a8:	46c3      	mov	fp, r8
		x_start = y / SSD16XX_PIXELS_PER_BYTE;
   255aa:	08d4      	lsrs	r4, r2, #3
		x_end = (y + desc->height - 1) / SSD16XX_PIXELS_PER_BYTE;
   255ac:	f3c3 05cf 	ubfx	r5, r3, #3, #16
		y_start = (x + desc->width - 1);
   255b0:	fa1f f880 	uxth.w	r8, r0
	ssd16xx_busy_wait(driver);
   255b4:	f107 0008 	add.w	r0, r7, #8
   255b8:	f7ff fef0 	bl	2539c <ssd16xx_busy_wait.isra.0>
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_ENTRY_MODE,
   255bc:	2301      	movs	r3, #1
   255be:	f107 0228 	add.w	r2, r7, #40	; 0x28
   255c2:	2111      	movs	r1, #17
   255c4:	4638      	mov	r0, r7
   255c6:	f7ff fefe 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
   255ca:	2800      	cmp	r0, #0
   255cc:	db30      	blt.n	25630 <ssd16xx_write+0xf0>
	err = ssd16xx_set_ram_param(driver, x_start, x_end, y_start, y_end);
   255ce:	f8cd b000 	str.w	fp, [sp]
   255d2:	4643      	mov	r3, r8
   255d4:	462a      	mov	r2, r5
   255d6:	4621      	mov	r1, r4
   255d8:	4638      	mov	r0, r7
   255da:	f7ff ff2a 	bl	25432 <ssd16xx_set_ram_param>
	if (err < 0) {
   255de:	2800      	cmp	r0, #0
   255e0:	db26      	blt.n	25630 <ssd16xx_write+0xf0>
	err = ssd16xx_set_ram_ptr(driver, x_start, y_start);
   255e2:	4642      	mov	r2, r8
   255e4:	4621      	mov	r1, r4
   255e6:	4638      	mov	r0, r7
   255e8:	f7ff ff42 	bl	25470 <ssd16xx_set_ram_ptr>
	if (err < 0) {
   255ec:	2800      	cmp	r0, #0
   255ee:	db1f      	blt.n	25630 <ssd16xx_write+0xf0>
	err = ssd16xx_write_cmd(driver, SSD16XX_CMD_WRITE_RAM, (uint8_t *)buf,
   255f0:	4633      	mov	r3, r6
   255f2:	4652      	mov	r2, sl
   255f4:	2124      	movs	r1, #36	; 0x24
   255f6:	4638      	mov	r0, r7
   255f8:	f7ff fee5 	bl	253c6 <ssd16xx_write_cmd>
	if (err < 0) {
   255fc:	2800      	cmp	r0, #0
   255fe:	db17      	blt.n	25630 <ssd16xx_write+0xf0>
	return ssd16xx_update_display(dev);
   25600:	f8d9 000c 	ldr.w	r0, [r9, #12]
}
   25604:	b003      	add	sp, #12
   25606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return ssd16xx_update_display(dev);
   2560a:	f7ff bf47 	b.w	2549c <ssd16xx_update_display.isra.0>
		x_start = (panel_h - 1 - y) / SSD16XX_PIXELS_PER_BYTE;
   2560e:	f1d2 0477 	rsbs	r4, r2, #119	; 0x77
   25612:	bf48      	it	mi
   25614:	3407      	addmi	r4, #7
		x_end = (panel_h - 1 - (y + desc->height - 1)) /
   25616:	f1c5 0578 	rsb	r5, r5, #120	; 0x78
		y_end = (x + desc->width - 1);
   2561a:	f10b 3bff 	add.w	fp, fp, #4294967295
		x_start = (panel_h - 1 - y) / SSD16XX_PIXELS_PER_BYTE;
   2561e:	f3c4 04cf 	ubfx	r4, r4, #3, #16
		x_end = (panel_h - 1 - (y + desc->height - 1)) /
   25622:	f3c5 05cf 	ubfx	r5, r5, #3, #16
		y_end = (x + desc->width - 1);
   25626:	fa1f fb8b 	uxth.w	fp, fp
		break;
   2562a:	e7c3      	b.n	255b4 <ssd16xx_write+0x74>
		return -ENOTSUP;
   2562c:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   25630:	b003      	add	sp, #12
   25632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025636 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   25636:	4770      	bx	lr

00025638 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   25638:	4770      	bx	lr

0002563a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2563a:	b538      	push	{r3, r4, r5, lr}
   2563c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2563e:	42ab      	cmp	r3, r5
{
   25640:	4611      	mov	r1, r2
   25642:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   25644:	d804      	bhi.n	25650 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   25646:	461a      	mov	r2, r3
   25648:	f001 f9ab 	bl	269a2 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2564c:	4620      	mov	r0, r4
   2564e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   25650:	2400      	movs	r4, #0
   25652:	e7fb      	b.n	2564c <_copy+0x12>

00025654 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   25654:	f001 b9d0 	b.w	269f8 <memset>

00025658 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   25658:	09c3      	lsrs	r3, r0, #7
   2565a:	005a      	lsls	r2, r3, #1
   2565c:	4413      	add	r3, r2
   2565e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   25662:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   25666:	b2c0      	uxtb	r0, r0
   25668:	4770      	bx	lr

0002566a <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   2566a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2566e:	4606      	mov	r6, r0
   25670:	b0a9      	sub	sp, #164	; 0xa4
   25672:	4688      	mov	r8, r1
   25674:	4614      	mov	r4, r2
   25676:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   25678:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   2567c:	f7e0 fd6a 	bl	6154 <uECC_get_rng>
		if (!rng_function ||
   25680:	4603      	mov	r3, r0
   25682:	2800      	cmp	r0, #0
   25684:	d03e      	beq.n	25704 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   25686:	2140      	movs	r1, #64	; 0x40
   25688:	a808      	add	r0, sp, #32
   2568a:	4798      	blx	r3
		if (!rng_function ||
   2568c:	b3d0      	cbz	r0, 25704 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2568e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   25692:	f112 031f 	adds.w	r3, r2, #31
   25696:	bf48      	it	mi
   25698:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   2569c:	466d      	mov	r5, sp
   2569e:	464a      	mov	r2, r9
   256a0:	a908      	add	r1, sp, #32
   256a2:	4628      	mov	r0, r5
   256a4:	f343 1347 	sbfx	r3, r3, #5, #8
   256a8:	f000 fa03 	bl	25ab2 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   256ac:	4622      	mov	r2, r4
   256ae:	4629      	mov	r1, r5
   256b0:	a818      	add	r0, sp, #96	; 0x60
   256b2:	f000 fe19 	bl	262e8 <EccPoint_compute_public_key>
   256b6:	b318      	cbz	r0, 25700 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   256b8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   256bc:	1dd9      	adds	r1, r3, #7
   256be:	bf48      	it	mi
   256c0:	f103 010e 	addmi.w	r1, r3, #14
   256c4:	462a      	mov	r2, r5
   256c6:	4640      	mov	r0, r8
   256c8:	10c9      	asrs	r1, r1, #3
   256ca:	f000 fe35 	bl	26338 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   256ce:	f994 1001 	ldrsb.w	r1, [r4, #1]
   256d2:	aa18      	add	r2, sp, #96	; 0x60
   256d4:	4630      	mov	r0, r6
   256d6:	f000 fe2f 	bl	26338 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   256da:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   256de:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   256e2:	ab18      	add	r3, sp, #96	; 0x60
   256e4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   256e8:	1870      	adds	r0, r6, r1
   256ea:	f000 fe25 	bl	26338 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   256ee:	2220      	movs	r2, #32
   256f0:	2100      	movs	r1, #0
   256f2:	4628      	mov	r0, r5
   256f4:	f001 f980 	bl	269f8 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   256f8:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   256fa:	b029      	add	sp, #164	; 0xa4
   256fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   25700:	3f01      	subs	r7, #1
   25702:	d1bb      	bne.n	2567c <uECC_make_key+0x12>
        		return 0;
   25704:	2000      	movs	r0, #0
   25706:	e7f8      	b.n	256fa <uECC_make_key+0x90>

00025708 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   25708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2570c:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   2570e:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   25712:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   25716:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2571a:	b0a4      	sub	sp, #144	; 0x90
   2571c:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2571e:	1dda      	adds	r2, r3, #7
   25720:	bf48      	it	mi
   25722:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   25726:	ad04      	add	r5, sp, #16
{
   25728:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   2572a:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   2572c:	4628      	mov	r0, r5
   2572e:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   25730:	9502      	str	r5, [sp, #8]
   25732:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   25734:	f000 fe14 	bl	26360 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   25738:	463a      	mov	r2, r7
   2573a:	4649      	mov	r1, r9
   2573c:	a814      	add	r0, sp, #80	; 0x50
   2573e:	f000 fe0f 	bl	26360 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   25742:	ab14      	add	r3, sp, #80	; 0x50
   25744:	eb09 0107 	add.w	r1, r9, r7
   25748:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2574c:	463a      	mov	r2, r7
   2574e:	f000 fe07 	bl	26360 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   25752:	4623      	mov	r3, r4
   25754:	4632      	mov	r2, r6
   25756:	4629      	mov	r1, r5
   25758:	4628      	mov	r0, r5
   2575a:	f000 fd99 	bl	26290 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2575e:	fab0 f080 	clz	r0, r0
   25762:	9401      	str	r4, [sp, #4]
   25764:	ab24      	add	r3, sp, #144	; 0x90
   25766:	0940      	lsrs	r0, r0, #5
   25768:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2576c:	8863      	ldrh	r3, [r4, #2]
   2576e:	3301      	adds	r3, #1
   25770:	b21b      	sxth	r3, r3
   25772:	9300      	str	r3, [sp, #0]
   25774:	a914      	add	r1, sp, #80	; 0x50
   25776:	2300      	movs	r3, #0
   25778:	f850 2c88 	ldr.w	r2, [r0, #-136]
   2577c:	4608      	mov	r0, r1
   2577e:	f000 fcb8 	bl	260f2 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   25782:	aa14      	add	r2, sp, #80	; 0x50
   25784:	4639      	mov	r1, r7
   25786:	4640      	mov	r0, r8
   25788:	f000 fdd6 	bl	26338 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   2578c:	4621      	mov	r1, r4
   2578e:	a814      	add	r0, sp, #80	; 0x50
   25790:	f000 fc24 	bl	25fdc <EccPoint_isZero>
   25794:	af02      	add	r7, sp, #8
   25796:	4604      	mov	r4, r0
   25798:	2208      	movs	r2, #8
   2579a:	2100      	movs	r1, #0
   2579c:	4638      	mov	r0, r7
   2579e:	f001 f92b 	bl	269f8 <memset>
   257a2:	2220      	movs	r2, #32
   257a4:	2100      	movs	r1, #0
   257a6:	4630      	mov	r0, r6
   257a8:	f001 f926 	bl	269f8 <memset>
   257ac:	2220      	movs	r2, #32
   257ae:	2100      	movs	r1, #0
   257b0:	4628      	mov	r0, r5
   257b2:	f001 f921 	bl	269f8 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   257b6:	fab4 f084 	clz	r0, r4
   257ba:	0940      	lsrs	r0, r0, #5
   257bc:	b024      	add	sp, #144	; 0x90
   257be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000257c2 <uECC_vli_add>:
{
   257c2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   257c4:	2400      	movs	r4, #0
{
   257c6:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   257c8:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   257ca:	b265      	sxtb	r5, r4
   257cc:	42ab      	cmp	r3, r5
   257ce:	dc00      	bgt.n	257d2 <uECC_vli_add+0x10>
}
   257d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   257d2:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   257d6:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   257da:	443d      	add	r5, r7
   257dc:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   257de:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   257e0:	bf8c      	ite	hi
   257e2:	2701      	movhi	r7, #1
   257e4:	2700      	movls	r7, #0
		result[i] = sum;
   257e6:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   257ea:	bf18      	it	ne
   257ec:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   257ee:	3401      	adds	r4, #1
   257f0:	e7eb      	b.n	257ca <uECC_vli_add+0x8>

000257f2 <uECC_vli_rshift1>:
	vli += num_words;
   257f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   257f6:	2300      	movs	r3, #0
	while (vli-- > end) {
   257f8:	4288      	cmp	r0, r1
   257fa:	d300      	bcc.n	257fe <uECC_vli_rshift1+0xc>
}
   257fc:	4770      	bx	lr
		uECC_word_t temp = *vli;
   257fe:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   25802:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   25806:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   25808:	07d3      	lsls	r3, r2, #31
   2580a:	e7f5      	b.n	257f8 <uECC_vli_rshift1+0x6>

0002580c <vli_modInv_update>:
	if (!EVEN(uv)) {
   2580c:	6803      	ldr	r3, [r0, #0]
{
   2580e:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   25810:	f013 0601 	ands.w	r6, r3, #1
{
   25814:	4605      	mov	r5, r0
   25816:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   25818:	d005      	beq.n	25826 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2581a:	4613      	mov	r3, r2
   2581c:	460a      	mov	r2, r1
   2581e:	4601      	mov	r1, r0
   25820:	f7ff ffcf 	bl	257c2 <uECC_vli_add>
   25824:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   25826:	4621      	mov	r1, r4
   25828:	4628      	mov	r0, r5
   2582a:	f7ff ffe2 	bl	257f2 <uECC_vli_rshift1>
	if (carry) {
   2582e:	b146      	cbz	r6, 25842 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   25830:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   25834:	3a01      	subs	r2, #1
   25836:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2583a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2583e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   25842:	bd70      	pop	{r4, r5, r6, pc}

00025844 <uECC_vli_mult>:
{
   25844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   25848:	2500      	movs	r5, #0
{
   2584a:	b087      	sub	sp, #28
   2584c:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   25850:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   25852:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   25854:	fa4f f885 	sxtb.w	r8, r5
   25858:	4543      	cmp	r3, r8
   2585a:	dc16      	bgt.n	2588a <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2585c:	f04f 35ff 	mov.w	r5, #4294967295
   25860:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   25864:	9502      	str	r5, [sp, #8]
   25866:	f04f 0a00 	mov.w	sl, #0
   2586a:	9e02      	ldr	r6, [sp, #8]
   2586c:	fa53 fe8a 	uxtab	lr, r3, sl
   25870:	fa4f fe8e 	sxtb.w	lr, lr
   25874:	45b6      	cmp	lr, r6
   25876:	fa5f f58a 	uxtb.w	r5, sl
   2587a:	db2d      	blt.n	258d8 <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   2587c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25880:	f840 2c04 	str.w	r2, [r0, #-4]
}
   25884:	b007      	add	sp, #28
   25886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2588a:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   2588c:	f04f 0c00 	mov.w	ip, #0
   25890:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   25894:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   25896:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   2589a:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2589c:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   258a0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   258a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   258a8:	fba7 ab06 	umull	sl, fp, r7, r6
   258ac:	eb1a 0601 	adds.w	r6, sl, r1
   258b0:	f10c 0c01 	add.w	ip, ip, #1
   258b4:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   258b8:	fa4f fa8c 	sxtb.w	sl, ip
   258bc:	bf2c      	ite	cs
   258be:	2201      	movcs	r2, #1
   258c0:	2200      	movcc	r2, #0
   258c2:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   258c4:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   258c6:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   258c8:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   258ca:	dde4      	ble.n	25896 <uECC_vli_mult+0x52>
		result[k] = r0;
   258cc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   258d0:	463a      	mov	r2, r7
   258d2:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   258d4:	4674      	mov	r4, lr
   258d6:	e7bd      	b.n	25854 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   258d8:	3501      	adds	r5, #1
   258da:	9900      	ldr	r1, [sp, #0]
   258dc:	9e01      	ldr	r6, [sp, #4]
   258de:	fa4f fc85 	sxtb.w	ip, r5
   258e2:	ebae 0b0c 	sub.w	fp, lr, ip
   258e6:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   258ea:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   258ee:	4621      	mov	r1, r4
   258f0:	2400      	movs	r4, #0
   258f2:	459c      	cmp	ip, r3
   258f4:	db05      	blt.n	25902 <uECC_vli_mult+0xbe>
		result[k] = r0;
   258f6:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   258fa:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   258fe:	460a      	mov	r2, r1
   25900:	e7b3      	b.n	2586a <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   25902:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   25906:	f855 7b04 	ldr.w	r7, [r5], #4
   2590a:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   2590e:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   25912:	fba7 6706 	umull	r6, r7, r7, r6
   25916:	eb16 0801 	adds.w	r8, r6, r1
   2591a:	eb57 0902 	adcs.w	r9, r7, r2
   2591e:	bf2c      	ite	cs
   25920:	2201      	movcs	r2, #1
   25922:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   25924:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   25928:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   2592a:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   2592c:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2592e:	fa4f fc8c 	sxtb.w	ip, ip
   25932:	e7de      	b.n	258f2 <uECC_vli_mult+0xae>

00025934 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   25934:	2300      	movs	r3, #0
{
   25936:	b510      	push	{r4, lr}
		 vli[i] = 0;
   25938:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   2593a:	b25a      	sxtb	r2, r3
   2593c:	4291      	cmp	r1, r2
   2593e:	dc00      	bgt.n	25942 <uECC_vli_clear+0xe>
}
   25940:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   25942:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   25946:	3301      	adds	r3, #1
   25948:	e7f7      	b.n	2593a <uECC_vli_clear+0x6>

0002594a <uECC_vli_isZero>:
{
   2594a:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   2594c:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2594e:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   25950:	b25c      	sxtb	r4, r3
   25952:	42a1      	cmp	r1, r4
   25954:	dc03      	bgt.n	2595e <uECC_vli_isZero+0x14>
}
   25956:	fab2 f082 	clz	r0, r2
   2595a:	0940      	lsrs	r0, r0, #5
   2595c:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   2595e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   25962:	3301      	adds	r3, #1
   25964:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   25966:	e7f3      	b.n	25950 <uECC_vli_isZero+0x6>

00025968 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25968:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2596a:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2596c:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   25970:	f001 011f 	and.w	r1, r1, #31
   25974:	fa03 f101 	lsl.w	r1, r3, r1
}
   25978:	4008      	ands	r0, r1
   2597a:	4770      	bx	lr

0002597c <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2597c:	3901      	subs	r1, #1
   2597e:	b24b      	sxtb	r3, r1
{
   25980:	4602      	mov	r2, r0
   25982:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25986:	2b00      	cmp	r3, #0
   25988:	da03      	bge.n	25992 <uECC_vli_numBits+0x16>
	return (i + 1);
   2598a:	3301      	adds	r3, #1
   2598c:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   2598e:	b938      	cbnz	r0, 259a0 <uECC_vli_numBits+0x24>
   25990:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25992:	f851 0904 	ldr.w	r0, [r1], #-4
   25996:	2800      	cmp	r0, #0
   25998:	d1f7      	bne.n	2598a <uECC_vli_numBits+0xe>
   2599a:	3b01      	subs	r3, #1
   2599c:	b25b      	sxtb	r3, r3
   2599e:	e7f2      	b.n	25986 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   259a0:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   259a4:	3b01      	subs	r3, #1
   259a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   259aa:	2300      	movs	r3, #0
   259ac:	b922      	cbnz	r2, 259b8 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   259ae:	3801      	subs	r0, #1
   259b0:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   259b4:	b200      	sxth	r0, r0
}
   259b6:	4770      	bx	lr
		digit >>= 1;
   259b8:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   259ba:	3301      	adds	r3, #1
   259bc:	e7f6      	b.n	259ac <uECC_vli_numBits+0x30>

000259be <uECC_vli_set>:
{
   259be:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   259c0:	2300      	movs	r3, #0
   259c2:	b25c      	sxtb	r4, r3
   259c4:	42a2      	cmp	r2, r4
   259c6:	dc00      	bgt.n	259ca <uECC_vli_set+0xc>
}
   259c8:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   259ca:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   259ce:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   259d2:	3301      	adds	r3, #1
   259d4:	e7f5      	b.n	259c2 <uECC_vli_set+0x4>

000259d6 <uECC_vli_cmp_unsafe>:
{
   259d6:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   259d8:	3a01      	subs	r2, #1
   259da:	b253      	sxtb	r3, r2
   259dc:	009a      	lsls	r2, r3, #2
   259de:	2b00      	cmp	r3, #0
   259e0:	da01      	bge.n	259e6 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   259e2:	2000      	movs	r0, #0
}
   259e4:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   259e6:	5885      	ldr	r5, [r0, r2]
   259e8:	588c      	ldr	r4, [r1, r2]
   259ea:	42a5      	cmp	r5, r4
   259ec:	d805      	bhi.n	259fa <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   259ee:	f1a2 0204 	sub.w	r2, r2, #4
   259f2:	d304      	bcc.n	259fe <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   259f4:	3b01      	subs	r3, #1
   259f6:	b25b      	sxtb	r3, r3
   259f8:	e7f1      	b.n	259de <uECC_vli_cmp_unsafe+0x8>
			return 1;
   259fa:	2001      	movs	r0, #1
   259fc:	e7f2      	b.n	259e4 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   259fe:	f04f 30ff 	mov.w	r0, #4294967295
   25a02:	e7ef      	b.n	259e4 <uECC_vli_cmp_unsafe+0xe>

00025a04 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   25a04:	3a01      	subs	r2, #1
   25a06:	b253      	sxtb	r3, r2
{
   25a08:	b570      	push	{r4, r5, r6, lr}
   25a0a:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   25a0c:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   25a0e:	2b00      	cmp	r3, #0
   25a10:	da03      	bge.n	25a1a <uECC_vli_equal+0x16>
}
   25a12:	1e20      	subs	r0, r4, #0
   25a14:	bf18      	it	ne
   25a16:	2001      	movne	r0, #1
   25a18:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   25a1a:	5885      	ldr	r5, [r0, r2]
   25a1c:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   25a1e:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   25a20:	4075      	eors	r5, r6
   25a22:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   25a24:	b25b      	sxtb	r3, r3
   25a26:	3a04      	subs	r2, #4
   25a28:	e7f1      	b.n	25a0e <uECC_vli_equal+0xa>

00025a2a <uECC_vli_sub>:
{
   25a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   25a2c:	2400      	movs	r4, #0
{
   25a2e:	4606      	mov	r6, r0
   25a30:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   25a32:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   25a34:	b265      	sxtb	r5, r4
   25a36:	45ac      	cmp	ip, r5
   25a38:	dc00      	bgt.n	25a3c <uECC_vli_sub+0x12>
}
   25a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   25a3c:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   25a40:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   25a44:	1a3d      	subs	r5, r7, r0
   25a46:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   25a48:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   25a4a:	bf34      	ite	cc
   25a4c:	2701      	movcc	r7, #1
   25a4e:	2700      	movcs	r7, #0
		result[i] = diff;
   25a50:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   25a54:	bf18      	it	ne
   25a56:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   25a58:	3401      	adds	r4, #1
   25a5a:	e7eb      	b.n	25a34 <uECC_vli_sub+0xa>

00025a5c <uECC_vli_modAdd>:
{
   25a5c:	b570      	push	{r4, r5, r6, lr}
   25a5e:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   25a62:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   25a64:	4633      	mov	r3, r6
{
   25a66:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   25a68:	f7ff feab 	bl	257c2 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   25a6c:	b930      	cbnz	r0, 25a7c <uECC_vli_modAdd+0x20>
   25a6e:	4632      	mov	r2, r6
   25a70:	4621      	mov	r1, r4
   25a72:	4628      	mov	r0, r5
   25a74:	f7ff ffaf 	bl	259d6 <uECC_vli_cmp_unsafe>
   25a78:	2801      	cmp	r0, #1
   25a7a:	d007      	beq.n	25a8c <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   25a7c:	4633      	mov	r3, r6
   25a7e:	462a      	mov	r2, r5
   25a80:	4621      	mov	r1, r4
   25a82:	4620      	mov	r0, r4
}
   25a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   25a88:	f7ff bfcf 	b.w	25a2a <uECC_vli_sub>
}
   25a8c:	bd70      	pop	{r4, r5, r6, pc}

00025a8e <uECC_vli_modSub>:
{
   25a8e:	b570      	push	{r4, r5, r6, lr}
   25a90:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   25a94:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   25a96:	4633      	mov	r3, r6
{
   25a98:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   25a9a:	f7ff ffc6 	bl	25a2a <uECC_vli_sub>
	if (l_borrow) {
   25a9e:	b138      	cbz	r0, 25ab0 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   25aa0:	4633      	mov	r3, r6
   25aa2:	462a      	mov	r2, r5
   25aa4:	4621      	mov	r1, r4
   25aa6:	4620      	mov	r0, r4
}
   25aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   25aac:	f7ff be89 	b.w	257c2 <uECC_vli_add>
}
   25ab0:	bd70      	pop	{r4, r5, r6, pc}

00025ab2 <uECC_vli_mmod>:
{
   25ab2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ab6:	b0a5      	sub	sp, #148	; 0x94
   25ab8:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   25aba:	ab14      	add	r3, sp, #80	; 0x50
   25abc:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   25ac0:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   25ac2:	4629      	mov	r1, r5
   25ac4:	4610      	mov	r0, r2
{
   25ac6:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   25ac8:	f7ff ff58 	bl	2597c <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   25acc:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   25ad0:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   25ad2:	2c00      	cmp	r4, #0
   25ad4:	4621      	mov	r1, r4
   25ad6:	bfb8      	it	lt
   25ad8:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25adc:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   25ade:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25ae2:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   25ae6:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25ae8:	f004 071f 	and.w	r7, r4, #31
   25aec:	bf58      	it	pl
   25aee:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   25af0:	f7ff ff20 	bl	25934 <uECC_vli_clear>
	if (bit_shift > 0) {
   25af4:	2f00      	cmp	r7, #0
   25af6:	b208      	sxth	r0, r1
   25af8:	dd2b      	ble.n	25b52 <uECC_vli_mmod+0xa0>
   25afa:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   25afc:	2200      	movs	r2, #0
   25afe:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   25b02:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25b06:	4613      	mov	r3, r2
   25b08:	429d      	cmp	r5, r3
   25b0a:	d817      	bhi.n	25b3c <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   25b0c:	006b      	lsls	r3, r5, #1
   25b0e:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25b10:	ab04      	add	r3, sp, #16
   25b12:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25b16:	1e6f      	subs	r7, r5, #1
   25b18:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25b1a:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25b1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   25b20:	2c00      	cmp	r4, #0
   25b22:	da54      	bge.n	25bce <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   25b24:	ab24      	add	r3, sp, #144	; 0x90
   25b26:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   25b2a:	462a      	mov	r2, r5
   25b2c:	f856 1c88 	ldr.w	r1, [r6, #-136]
   25b30:	4640      	mov	r0, r8
   25b32:	f7ff ff44 	bl	259be <uECC_vli_set>
}
   25b36:	b025      	add	sp, #148	; 0x94
   25b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   25b3c:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   25b40:	fa0c f007 	lsl.w	r0, ip, r7
   25b44:	4302      	orrs	r2, r0
   25b46:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25b4a:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   25b4c:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25b50:	e7da      	b.n	25b08 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   25b52:	ab04      	add	r3, sp, #16
   25b54:	462a      	mov	r2, r5
   25b56:	4631      	mov	r1, r6
   25b58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   25b5c:	f7ff ff2f 	bl	259be <uECC_vli_set>
   25b60:	e7d4      	b.n	25b0c <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25b62:	fa0f fe82 	sxth.w	lr, r2
   25b66:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   25b6a:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   25b6e:	ab24      	add	r3, sp, #144	; 0x90
   25b70:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25b74:	3001      	adds	r0, #1
   25b76:	f852 3c80 	ldr.w	r3, [r2, #-128]
   25b7a:	440b      	add	r3, r1
   25b7c:	ebbb 0303 	subs.w	r3, fp, r3
   25b80:	bf34      	ite	cc
   25b82:	2201      	movcc	r2, #1
   25b84:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   25b86:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   25b88:	bf18      	it	ne
   25b8a:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   25b8c:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   25b90:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   25b94:	9b01      	ldr	r3, [sp, #4]
   25b96:	b242      	sxtb	r2, r0
   25b98:	429a      	cmp	r2, r3
   25b9a:	dbe2      	blt.n	25b62 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   25b9c:	1a73      	subs	r3, r6, r1
   25b9e:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   25ba0:	4629      	mov	r1, r5
   25ba2:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   25ba4:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   25ba6:	f7ff fe24 	bl	257f2 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25baa:	ab24      	add	r3, sp, #144	; 0x90
   25bac:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25bb0:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25bb2:	f853 2c80 	ldr.w	r2, [r3, #-128]
   25bb6:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25bba:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25bbc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   25bc0:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25bc2:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   25bc6:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25bc8:	f7ff fe13 	bl	257f2 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   25bcc:	e7a8      	b.n	25b20 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25bce:	ab24      	add	r3, sp, #144	; 0x90
   25bd0:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   25bd2:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   25bd6:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25bd8:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   25bdc:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   25be0:	e7d8      	b.n	25b94 <uECC_vli_mmod+0xe2>

00025be2 <uECC_vli_modMult_fast>:
{
   25be2:	b530      	push	{r4, r5, lr}
   25be4:	461c      	mov	r4, r3
   25be6:	b091      	sub	sp, #68	; 0x44
   25be8:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   25bea:	f993 3000 	ldrsb.w	r3, [r3]
   25bee:	4668      	mov	r0, sp
   25bf0:	f7ff fe28 	bl	25844 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   25bf4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   25bf8:	4669      	mov	r1, sp
   25bfa:	4628      	mov	r0, r5
   25bfc:	4798      	blx	r3
}
   25bfe:	b011      	add	sp, #68	; 0x44
   25c00:	bd30      	pop	{r4, r5, pc}

00025c02 <uECC_vli_modSquare_fast>:
{
   25c02:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   25c04:	460a      	mov	r2, r1
   25c06:	f7ff bfec 	b.w	25be2 <uECC_vli_modMult_fast>

00025c0a <double_jacobian_default>:
{
   25c0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   25c0e:	f993 6000 	ldrsb.w	r6, [r3]
{
   25c12:	b092      	sub	sp, #72	; 0x48
   25c14:	4604      	mov	r4, r0
   25c16:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   25c18:	4610      	mov	r0, r2
   25c1a:	4631      	mov	r1, r6
{
   25c1c:	4615      	mov	r5, r2
   25c1e:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   25c20:	f7ff fe93 	bl	2594a <uECC_vli_isZero>
   25c24:	2800      	cmp	r0, #0
   25c26:	f040 8091 	bne.w	25d4c <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   25c2a:	463a      	mov	r2, r7
   25c2c:	4649      	mov	r1, r9
   25c2e:	a802      	add	r0, sp, #8
   25c30:	f7ff ffe7 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   25c34:	463b      	mov	r3, r7
   25c36:	aa02      	add	r2, sp, #8
   25c38:	4621      	mov	r1, r4
   25c3a:	a80a      	add	r0, sp, #40	; 0x28
   25c3c:	f7ff ffd1 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   25c40:	a902      	add	r1, sp, #8
   25c42:	4608      	mov	r0, r1
   25c44:	463a      	mov	r2, r7
   25c46:	f7ff ffdc 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   25c4a:	463b      	mov	r3, r7
   25c4c:	462a      	mov	r2, r5
   25c4e:	4649      	mov	r1, r9
   25c50:	4648      	mov	r0, r9
   25c52:	f7ff ffc6 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   25c56:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   25c5a:	463a      	mov	r2, r7
   25c5c:	4629      	mov	r1, r5
   25c5e:	4628      	mov	r0, r5
   25c60:	f7ff ffcf 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   25c64:	4643      	mov	r3, r8
   25c66:	462a      	mov	r2, r5
   25c68:	4621      	mov	r1, r4
   25c6a:	4620      	mov	r0, r4
   25c6c:	9600      	str	r6, [sp, #0]
   25c6e:	f7ff fef5 	bl	25a5c <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   25c72:	4643      	mov	r3, r8
   25c74:	462a      	mov	r2, r5
   25c76:	4629      	mov	r1, r5
   25c78:	4628      	mov	r0, r5
   25c7a:	9600      	str	r6, [sp, #0]
   25c7c:	f7ff feee 	bl	25a5c <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   25c80:	4643      	mov	r3, r8
   25c82:	462a      	mov	r2, r5
   25c84:	4621      	mov	r1, r4
   25c86:	4628      	mov	r0, r5
   25c88:	9600      	str	r6, [sp, #0]
   25c8a:	f7ff ff00 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   25c8e:	463b      	mov	r3, r7
   25c90:	462a      	mov	r2, r5
   25c92:	4621      	mov	r1, r4
   25c94:	4620      	mov	r0, r4
   25c96:	f7ff ffa4 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   25c9a:	4643      	mov	r3, r8
   25c9c:	4622      	mov	r2, r4
   25c9e:	4621      	mov	r1, r4
   25ca0:	4628      	mov	r0, r5
   25ca2:	9600      	str	r6, [sp, #0]
   25ca4:	f7ff feda 	bl	25a5c <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   25ca8:	4643      	mov	r3, r8
   25caa:	9600      	str	r6, [sp, #0]
   25cac:	462a      	mov	r2, r5
   25cae:	4621      	mov	r1, r4
   25cb0:	4620      	mov	r0, r4
   25cb2:	f7ff fed3 	bl	25a5c <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25cb6:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   25cb8:	07db      	lsls	r3, r3, #31
   25cba:	d54a      	bpl.n	25d52 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   25cbc:	4633      	mov	r3, r6
   25cbe:	4642      	mov	r2, r8
   25cc0:	4621      	mov	r1, r4
   25cc2:	4620      	mov	r0, r4
   25cc4:	f7ff fd7d 	bl	257c2 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   25cc8:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   25cca:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   25ccc:	4620      	mov	r0, r4
   25cce:	f7ff fd90 	bl	257f2 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   25cd2:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   25cd6:	3b01      	subs	r3, #1
   25cd8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   25cdc:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   25ce0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   25ce4:	463a      	mov	r2, r7
   25ce6:	4621      	mov	r1, r4
   25ce8:	4628      	mov	r0, r5
   25cea:	f7ff ff8a 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   25cee:	4643      	mov	r3, r8
   25cf0:	aa0a      	add	r2, sp, #40	; 0x28
   25cf2:	4629      	mov	r1, r5
   25cf4:	4628      	mov	r0, r5
   25cf6:	9600      	str	r6, [sp, #0]
   25cf8:	f7ff fec9 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   25cfc:	4643      	mov	r3, r8
   25cfe:	aa0a      	add	r2, sp, #40	; 0x28
   25d00:	4629      	mov	r1, r5
   25d02:	4628      	mov	r0, r5
   25d04:	9600      	str	r6, [sp, #0]
   25d06:	f7ff fec2 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   25d0a:	a90a      	add	r1, sp, #40	; 0x28
   25d0c:	4608      	mov	r0, r1
   25d0e:	4643      	mov	r3, r8
   25d10:	462a      	mov	r2, r5
   25d12:	9600      	str	r6, [sp, #0]
   25d14:	f7ff febb 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   25d18:	463b      	mov	r3, r7
   25d1a:	aa0a      	add	r2, sp, #40	; 0x28
   25d1c:	4621      	mov	r1, r4
   25d1e:	4620      	mov	r0, r4
   25d20:	f7ff ff5f 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   25d24:	aa02      	add	r2, sp, #8
   25d26:	4643      	mov	r3, r8
   25d28:	4610      	mov	r0, r2
   25d2a:	4621      	mov	r1, r4
   25d2c:	9600      	str	r6, [sp, #0]
   25d2e:	f7ff feae 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   25d32:	4632      	mov	r2, r6
   25d34:	4629      	mov	r1, r5
   25d36:	4620      	mov	r0, r4
   25d38:	f7ff fe41 	bl	259be <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   25d3c:	4649      	mov	r1, r9
   25d3e:	4628      	mov	r0, r5
   25d40:	f7ff fe3d 	bl	259be <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   25d44:	a902      	add	r1, sp, #8
   25d46:	4648      	mov	r0, r9
   25d48:	f7ff fe39 	bl	259be <uECC_vli_set>
}
   25d4c:	b012      	add	sp, #72	; 0x48
   25d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   25d52:	4631      	mov	r1, r6
   25d54:	4620      	mov	r0, r4
   25d56:	f7ff fd4c 	bl	257f2 <uECC_vli_rshift1>
   25d5a:	e7c3      	b.n	25ce4 <double_jacobian_default+0xda>

00025d5c <x_side_default>:
{
   25d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d60:	4615      	mov	r5, r2
   25d62:	b08a      	sub	sp, #40	; 0x28
   25d64:	4604      	mov	r4, r0
   25d66:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25d68:	221c      	movs	r2, #28
   25d6a:	2100      	movs	r1, #0
   25d6c:	a803      	add	r0, sp, #12
   25d6e:	f000 fe43 	bl	269f8 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   25d72:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   25d74:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25d78:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   25d7a:	462a      	mov	r2, r5
   25d7c:	4631      	mov	r1, r6
   25d7e:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   25d80:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   25d82:	f7ff ff3e 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   25d86:	463b      	mov	r3, r7
   25d88:	aa02      	add	r2, sp, #8
   25d8a:	4621      	mov	r1, r4
   25d8c:	4620      	mov	r0, r4
   25d8e:	f8cd 8000 	str.w	r8, [sp]
   25d92:	f7ff fe7c 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   25d96:	462b      	mov	r3, r5
   25d98:	4632      	mov	r2, r6
   25d9a:	4621      	mov	r1, r4
   25d9c:	4620      	mov	r0, r4
   25d9e:	f7ff ff20 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   25da2:	f8cd 8000 	str.w	r8, [sp]
   25da6:	463b      	mov	r3, r7
   25da8:	f105 0284 	add.w	r2, r5, #132	; 0x84
   25dac:	4621      	mov	r1, r4
   25dae:	4620      	mov	r0, r4
   25db0:	f7ff fe54 	bl	25a5c <uECC_vli_modAdd>
}
   25db4:	b00a      	add	sp, #40	; 0x28
   25db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025dba <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   25dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25dbe:	b09a      	sub	sp, #104	; 0x68
   25dc0:	4616      	mov	r6, r2
   25dc2:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   25dc6:	4644      	mov	r4, r8
{
   25dc8:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   25dca:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   25dce:	9500      	str	r5, [sp, #0]
{
   25dd0:	4607      	mov	r7, r0
   25dd2:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   25dd4:	4623      	mov	r3, r4
   25dd6:	4602      	mov	r2, r0
   25dd8:	4631      	mov	r1, r6
   25dda:	a802      	add	r0, sp, #8
   25ddc:	f7ff fe57 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   25de0:	a902      	add	r1, sp, #8
   25de2:	4642      	mov	r2, r8
   25de4:	4608      	mov	r0, r1
   25de6:	f7ff ff0c 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   25dea:	4643      	mov	r3, r8
   25dec:	aa02      	add	r2, sp, #8
   25dee:	4639      	mov	r1, r7
   25df0:	4638      	mov	r0, r7
   25df2:	f7ff fef6 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   25df6:	4643      	mov	r3, r8
   25df8:	aa02      	add	r2, sp, #8
   25dfa:	4631      	mov	r1, r6
   25dfc:	4630      	mov	r0, r6
   25dfe:	f7ff fef0 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   25e02:	4623      	mov	r3, r4
   25e04:	4652      	mov	r2, sl
   25e06:	4649      	mov	r1, r9
   25e08:	a802      	add	r0, sp, #8
   25e0a:	9500      	str	r5, [sp, #0]
   25e0c:	f7ff fe26 	bl	25a5c <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   25e10:	4623      	mov	r3, r4
   25e12:	4652      	mov	r2, sl
   25e14:	4649      	mov	r1, r9
   25e16:	4648      	mov	r0, r9
   25e18:	9500      	str	r5, [sp, #0]
   25e1a:	f7ff fe38 	bl	25a8e <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   25e1e:	4623      	mov	r3, r4
   25e20:	463a      	mov	r2, r7
   25e22:	4631      	mov	r1, r6
   25e24:	a80a      	add	r0, sp, #40	; 0x28
   25e26:	9500      	str	r5, [sp, #0]
   25e28:	f7ff fe31 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   25e2c:	4643      	mov	r3, r8
   25e2e:	aa0a      	add	r2, sp, #40	; 0x28
   25e30:	4651      	mov	r1, sl
   25e32:	4650      	mov	r0, sl
   25e34:	f7ff fed5 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   25e38:	4623      	mov	r3, r4
   25e3a:	4632      	mov	r2, r6
   25e3c:	4639      	mov	r1, r7
   25e3e:	a80a      	add	r0, sp, #40	; 0x28
   25e40:	9500      	str	r5, [sp, #0]
   25e42:	f7ff fe0b 	bl	25a5c <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   25e46:	4642      	mov	r2, r8
   25e48:	4649      	mov	r1, r9
   25e4a:	4630      	mov	r0, r6
   25e4c:	f7ff fed9 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   25e50:	4623      	mov	r3, r4
   25e52:	aa0a      	add	r2, sp, #40	; 0x28
   25e54:	4631      	mov	r1, r6
   25e56:	4630      	mov	r0, r6
   25e58:	9500      	str	r5, [sp, #0]
   25e5a:	f7ff fe18 	bl	25a8e <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   25e5e:	4623      	mov	r3, r4
   25e60:	4632      	mov	r2, r6
   25e62:	4639      	mov	r1, r7
   25e64:	a812      	add	r0, sp, #72	; 0x48
   25e66:	9500      	str	r5, [sp, #0]
   25e68:	f7ff fe11 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   25e6c:	4643      	mov	r3, r8
   25e6e:	aa12      	add	r2, sp, #72	; 0x48
   25e70:	4649      	mov	r1, r9
   25e72:	4648      	mov	r0, r9
   25e74:	f7ff feb5 	bl	25be2 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   25e78:	4623      	mov	r3, r4
   25e7a:	4652      	mov	r2, sl
   25e7c:	4649      	mov	r1, r9
   25e7e:	4648      	mov	r0, r9
   25e80:	9500      	str	r5, [sp, #0]
   25e82:	f7ff fe04 	bl	25a8e <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   25e86:	4642      	mov	r2, r8
   25e88:	a902      	add	r1, sp, #8
   25e8a:	a812      	add	r0, sp, #72	; 0x48
   25e8c:	f7ff feb9 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   25e90:	a912      	add	r1, sp, #72	; 0x48
   25e92:	4623      	mov	r3, r4
   25e94:	aa0a      	add	r2, sp, #40	; 0x28
   25e96:	4608      	mov	r0, r1
   25e98:	9500      	str	r5, [sp, #0]
   25e9a:	f7ff fdf8 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   25e9e:	4623      	mov	r3, r4
   25ea0:	463a      	mov	r2, r7
   25ea2:	a912      	add	r1, sp, #72	; 0x48
   25ea4:	a80a      	add	r0, sp, #40	; 0x28
   25ea6:	9500      	str	r5, [sp, #0]
   25ea8:	f7ff fdf1 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   25eac:	a90a      	add	r1, sp, #40	; 0x28
   25eae:	4643      	mov	r3, r8
   25eb0:	aa02      	add	r2, sp, #8
   25eb2:	4608      	mov	r0, r1
   25eb4:	f7ff fe95 	bl	25be2 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   25eb8:	4623      	mov	r3, r4
   25eba:	4652      	mov	r2, sl
   25ebc:	a90a      	add	r1, sp, #40	; 0x28
   25ebe:	4650      	mov	r0, sl
   25ec0:	9500      	str	r5, [sp, #0]
   25ec2:	f7ff fde4 	bl	25a8e <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   25ec6:	462a      	mov	r2, r5
   25ec8:	a912      	add	r1, sp, #72	; 0x48
   25eca:	4638      	mov	r0, r7
   25ecc:	f7ff fd77 	bl	259be <uECC_vli_set>
}
   25ed0:	b01a      	add	sp, #104	; 0x68
   25ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025ed6 <uECC_vli_modInv>:
{
   25ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ed8:	460f      	mov	r7, r1
   25eda:	b0a1      	sub	sp, #132	; 0x84
   25edc:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   25ede:	4619      	mov	r1, r3
   25ee0:	4638      	mov	r0, r7
{
   25ee2:	4615      	mov	r5, r2
   25ee4:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   25ee6:	f7ff fd30 	bl	2594a <uECC_vli_isZero>
   25eea:	b120      	cbz	r0, 25ef6 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   25eec:	4630      	mov	r0, r6
   25eee:	f7ff fd21 	bl	25934 <uECC_vli_clear>
}
   25ef2:	b021      	add	sp, #132	; 0x84
   25ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   25ef6:	4622      	mov	r2, r4
   25ef8:	4639      	mov	r1, r7
   25efa:	4668      	mov	r0, sp
   25efc:	f7ff fd5f 	bl	259be <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   25f00:	4629      	mov	r1, r5
   25f02:	a808      	add	r0, sp, #32
   25f04:	f7ff fd5b 	bl	259be <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   25f08:	a810      	add	r0, sp, #64	; 0x40
   25f0a:	4621      	mov	r1, r4
   25f0c:	f7ff fd12 	bl	25934 <uECC_vli_clear>
	u[0] = 1;
   25f10:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   25f12:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   25f14:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   25f16:	f7ff fd0d 	bl	25934 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   25f1a:	4622      	mov	r2, r4
   25f1c:	a908      	add	r1, sp, #32
   25f1e:	4668      	mov	r0, sp
   25f20:	f7ff fd59 	bl	259d6 <uECC_vli_cmp_unsafe>
   25f24:	b928      	cbnz	r0, 25f32 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   25f26:	4622      	mov	r2, r4
   25f28:	a910      	add	r1, sp, #64	; 0x40
   25f2a:	4630      	mov	r0, r6
   25f2c:	f7ff fd47 	bl	259be <uECC_vli_set>
   25f30:	e7df      	b.n	25ef2 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   25f32:	9b00      	ldr	r3, [sp, #0]
   25f34:	07da      	lsls	r2, r3, #31
   25f36:	d409      	bmi.n	25f4c <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   25f38:	4621      	mov	r1, r4
   25f3a:	4668      	mov	r0, sp
   25f3c:	f7ff fc59 	bl	257f2 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   25f40:	4622      	mov	r2, r4
   25f42:	4629      	mov	r1, r5
   25f44:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   25f46:	f7ff fc61 	bl	2580c <vli_modInv_update>
   25f4a:	e7e6      	b.n	25f1a <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   25f4c:	9b08      	ldr	r3, [sp, #32]
   25f4e:	07db      	lsls	r3, r3, #31
   25f50:	d407      	bmi.n	25f62 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   25f52:	4621      	mov	r1, r4
   25f54:	a808      	add	r0, sp, #32
   25f56:	f7ff fc4c 	bl	257f2 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   25f5a:	4622      	mov	r2, r4
   25f5c:	4629      	mov	r1, r5
   25f5e:	a818      	add	r0, sp, #96	; 0x60
   25f60:	e7f1      	b.n	25f46 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   25f62:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   25f64:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   25f66:	dd1c      	ble.n	25fa2 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   25f68:	aa08      	add	r2, sp, #32
   25f6a:	4669      	mov	r1, sp
   25f6c:	4668      	mov	r0, sp
   25f6e:	f7ff fd5c 	bl	25a2a <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   25f72:	4621      	mov	r1, r4
   25f74:	4668      	mov	r0, sp
   25f76:	f7ff fc3c 	bl	257f2 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   25f7a:	4622      	mov	r2, r4
   25f7c:	a918      	add	r1, sp, #96	; 0x60
   25f7e:	a810      	add	r0, sp, #64	; 0x40
   25f80:	f7ff fd29 	bl	259d6 <uECC_vli_cmp_unsafe>
   25f84:	2800      	cmp	r0, #0
   25f86:	da05      	bge.n	25f94 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   25f88:	a910      	add	r1, sp, #64	; 0x40
   25f8a:	4623      	mov	r3, r4
   25f8c:	462a      	mov	r2, r5
   25f8e:	4608      	mov	r0, r1
   25f90:	f7ff fc17 	bl	257c2 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   25f94:	a910      	add	r1, sp, #64	; 0x40
   25f96:	4623      	mov	r3, r4
   25f98:	aa18      	add	r2, sp, #96	; 0x60
   25f9a:	4608      	mov	r0, r1
   25f9c:	f7ff fd45 	bl	25a2a <uECC_vli_sub>
   25fa0:	e7ce      	b.n	25f40 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   25fa2:	a908      	add	r1, sp, #32
   25fa4:	466a      	mov	r2, sp
   25fa6:	4608      	mov	r0, r1
   25fa8:	f7ff fd3f 	bl	25a2a <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   25fac:	4621      	mov	r1, r4
   25fae:	a808      	add	r0, sp, #32
   25fb0:	f7ff fc1f 	bl	257f2 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   25fb4:	4622      	mov	r2, r4
   25fb6:	a910      	add	r1, sp, #64	; 0x40
   25fb8:	a818      	add	r0, sp, #96	; 0x60
   25fba:	f7ff fd0c 	bl	259d6 <uECC_vli_cmp_unsafe>
   25fbe:	2800      	cmp	r0, #0
   25fc0:	da05      	bge.n	25fce <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   25fc2:	a918      	add	r1, sp, #96	; 0x60
   25fc4:	4623      	mov	r3, r4
   25fc6:	462a      	mov	r2, r5
   25fc8:	4608      	mov	r0, r1
   25fca:	f7ff fbfa 	bl	257c2 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   25fce:	a918      	add	r1, sp, #96	; 0x60
   25fd0:	4623      	mov	r3, r4
   25fd2:	aa10      	add	r2, sp, #64	; 0x40
   25fd4:	4608      	mov	r0, r1
   25fd6:	f7ff fd28 	bl	25a2a <uECC_vli_sub>
   25fda:	e7be      	b.n	25f5a <uECC_vli_modInv+0x84>

00025fdc <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   25fdc:	7809      	ldrb	r1, [r1, #0]
   25fde:	0049      	lsls	r1, r1, #1
   25fe0:	b249      	sxtb	r1, r1
   25fe2:	f7ff bcb2 	b.w	2594a <uECC_vli_isZero>

00025fe6 <apply_z>:
{
   25fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
   25fe8:	4615      	mov	r5, r2
   25fea:	b089      	sub	sp, #36	; 0x24
   25fec:	461c      	mov	r4, r3
   25fee:	4607      	mov	r7, r0
   25ff0:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   25ff2:	461a      	mov	r2, r3
   25ff4:	4629      	mov	r1, r5
   25ff6:	4668      	mov	r0, sp
   25ff8:	f7ff fe03 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   25ffc:	4623      	mov	r3, r4
   25ffe:	466a      	mov	r2, sp
   26000:	4639      	mov	r1, r7
   26002:	4638      	mov	r0, r7
   26004:	f7ff fded 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   26008:	4623      	mov	r3, r4
   2600a:	462a      	mov	r2, r5
   2600c:	4669      	mov	r1, sp
   2600e:	4668      	mov	r0, sp
   26010:	f7ff fde7 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   26014:	4623      	mov	r3, r4
   26016:	466a      	mov	r2, sp
   26018:	4631      	mov	r1, r6
   2601a:	4630      	mov	r0, r6
   2601c:	f7ff fde1 	bl	25be2 <uECC_vli_modMult_fast>
}
   26020:	b009      	add	sp, #36	; 0x24
   26022:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026024 <XYcZ_add>:
{
   26024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26028:	b08a      	sub	sp, #40	; 0x28
   2602a:	4614      	mov	r4, r2
   2602c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   26030:	4655      	mov	r5, sl
{
   26032:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   26034:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   26038:	9600      	str	r6, [sp, #0]
{
   2603a:	4680      	mov	r8, r0
   2603c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2603e:	462b      	mov	r3, r5
   26040:	4602      	mov	r2, r0
   26042:	4621      	mov	r1, r4
   26044:	a802      	add	r0, sp, #8
   26046:	f7ff fd22 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2604a:	a902      	add	r1, sp, #8
   2604c:	4652      	mov	r2, sl
   2604e:	4608      	mov	r0, r1
   26050:	f7ff fdd7 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   26054:	4653      	mov	r3, sl
   26056:	aa02      	add	r2, sp, #8
   26058:	4641      	mov	r1, r8
   2605a:	4640      	mov	r0, r8
   2605c:	f7ff fdc1 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   26060:	4653      	mov	r3, sl
   26062:	aa02      	add	r2, sp, #8
   26064:	4621      	mov	r1, r4
   26066:	4620      	mov	r0, r4
   26068:	f7ff fdbb 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2606c:	462b      	mov	r3, r5
   2606e:	464a      	mov	r2, r9
   26070:	4639      	mov	r1, r7
   26072:	4638      	mov	r0, r7
   26074:	9600      	str	r6, [sp, #0]
   26076:	f7ff fd0a 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2607a:	4652      	mov	r2, sl
   2607c:	4639      	mov	r1, r7
   2607e:	a802      	add	r0, sp, #8
   26080:	f7ff fdbf 	bl	25c02 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   26084:	a902      	add	r1, sp, #8
   26086:	462b      	mov	r3, r5
   26088:	4642      	mov	r2, r8
   2608a:	4608      	mov	r0, r1
   2608c:	9600      	str	r6, [sp, #0]
   2608e:	f7ff fcfe 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   26092:	a902      	add	r1, sp, #8
   26094:	462b      	mov	r3, r5
   26096:	4622      	mov	r2, r4
   26098:	4608      	mov	r0, r1
   2609a:	9600      	str	r6, [sp, #0]
   2609c:	f7ff fcf7 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   260a0:	462b      	mov	r3, r5
   260a2:	4642      	mov	r2, r8
   260a4:	4621      	mov	r1, r4
   260a6:	4620      	mov	r0, r4
   260a8:	9600      	str	r6, [sp, #0]
   260aa:	f7ff fcf0 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   260ae:	4653      	mov	r3, sl
   260b0:	4622      	mov	r2, r4
   260b2:	4649      	mov	r1, r9
   260b4:	4648      	mov	r0, r9
   260b6:	f7ff fd94 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   260ba:	462b      	mov	r3, r5
   260bc:	aa02      	add	r2, sp, #8
   260be:	4641      	mov	r1, r8
   260c0:	4620      	mov	r0, r4
   260c2:	9600      	str	r6, [sp, #0]
   260c4:	f7ff fce3 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   260c8:	4653      	mov	r3, sl
   260ca:	4622      	mov	r2, r4
   260cc:	4639      	mov	r1, r7
   260ce:	4638      	mov	r0, r7
   260d0:	f7ff fd87 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   260d4:	462b      	mov	r3, r5
   260d6:	464a      	mov	r2, r9
   260d8:	4639      	mov	r1, r7
   260da:	4638      	mov	r0, r7
   260dc:	9600      	str	r6, [sp, #0]
   260de:	f7ff fcd6 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   260e2:	4632      	mov	r2, r6
   260e4:	a902      	add	r1, sp, #8
   260e6:	4620      	mov	r0, r4
   260e8:	f7ff fc69 	bl	259be <uECC_vli_set>
}
   260ec:	b00a      	add	sp, #40	; 0x28
   260ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000260f2 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   260f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260f6:	b0b1      	sub	sp, #196	; 0xc4
   260f8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   260fc:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   260fe:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   26102:	a818      	add	r0, sp, #96	; 0x60
{
   26104:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   26106:	463a      	mov	r2, r7
{
   26108:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   2610a:	f7ff fc58 	bl	259be <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2610e:	00bb      	lsls	r3, r7, #2
   26110:	9305      	str	r3, [sp, #20]
   26112:	9b04      	ldr	r3, [sp, #16]
   26114:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   26118:	4619      	mov	r1, r3
   2611a:	a828      	add	r0, sp, #160	; 0xa0
   2611c:	9302      	str	r3, [sp, #8]
   2611e:	f7ff fc4e 	bl	259be <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   26122:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   26126:	2e00      	cmp	r6, #0
   26128:	f000 8088 	beq.w	2623c <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   2612c:	462a      	mov	r2, r5
   2612e:	4631      	mov	r1, r6
   26130:	a808      	add	r0, sp, #32
   26132:	f7ff fc44 	bl	259be <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   26136:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2613a:	462a      	mov	r2, r5
   2613c:	a918      	add	r1, sp, #96	; 0x60
   2613e:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   26140:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   26144:	f7ff fc3b 	bl	259be <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   26148:	a928      	add	r1, sp, #160	; 0xa0
   2614a:	4648      	mov	r0, r9
   2614c:	f7ff fc37 	bl	259be <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   26150:	4623      	mov	r3, r4
   26152:	aa08      	add	r2, sp, #32
   26154:	a928      	add	r1, sp, #160	; 0xa0
   26156:	a818      	add	r0, sp, #96	; 0x60
   26158:	f7ff ff45 	bl	25fe6 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2615c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   26160:	4623      	mov	r3, r4
   26162:	aa08      	add	r2, sp, #32
   26164:	a928      	add	r1, sp, #160	; 0xa0
   26166:	a818      	add	r0, sp, #96	; 0x60
   26168:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   2616a:	4623      	mov	r3, r4
   2616c:	aa08      	add	r2, sp, #32
   2616e:	4649      	mov	r1, r9
   26170:	4640      	mov	r0, r8
   26172:	f7ff ff38 	bl	25fe6 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   26176:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   2617a:	3d02      	subs	r5, #2
   2617c:	b22d      	sxth	r5, r5
   2617e:	2d00      	cmp	r5, #0
   26180:	dc63      	bgt.n	2624a <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   26182:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   26186:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   26188:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2618c:	ab10      	add	r3, sp, #64	; 0x40
   2618e:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   26192:	43ed      	mvns	r5, r5
   26194:	ab20      	add	r3, sp, #128	; 0x80
   26196:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   2619a:	f005 0501 	and.w	r5, r5, #1
   2619e:	ab10      	add	r3, sp, #64	; 0x40
   261a0:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   261a4:	ab20      	add	r3, sp, #128	; 0x80
   261a6:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   261aa:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   261ae:	462b      	mov	r3, r5
   261b0:	464a      	mov	r2, r9
   261b2:	4631      	mov	r1, r6
   261b4:	4640      	mov	r0, r8
   261b6:	f7ff fe00 	bl	25dba <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   261ba:	4653      	mov	r3, sl
   261bc:	aa10      	add	r2, sp, #64	; 0x40
   261be:	a918      	add	r1, sp, #96	; 0x60
   261c0:	a808      	add	r0, sp, #32
   261c2:	9700      	str	r7, [sp, #0]
   261c4:	f7ff fc63 	bl	25a8e <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   261c8:	a908      	add	r1, sp, #32
   261ca:	4623      	mov	r3, r4
   261cc:	4632      	mov	r2, r6
   261ce:	4608      	mov	r0, r1
   261d0:	f7ff fd07 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   261d4:	a908      	add	r1, sp, #32
   261d6:	9a04      	ldr	r2, [sp, #16]
   261d8:	4623      	mov	r3, r4
   261da:	4608      	mov	r0, r1
   261dc:	f7ff fd01 	bl	25be2 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   261e0:	a908      	add	r1, sp, #32
   261e2:	463b      	mov	r3, r7
   261e4:	4652      	mov	r2, sl
   261e6:	4608      	mov	r0, r1
   261e8:	f7ff fe75 	bl	25ed6 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   261ec:	a908      	add	r1, sp, #32
   261ee:	9a02      	ldr	r2, [sp, #8]
   261f0:	4623      	mov	r3, r4
   261f2:	4608      	mov	r0, r1
   261f4:	f7ff fcf5 	bl	25be2 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   261f8:	a908      	add	r1, sp, #32
   261fa:	4623      	mov	r3, r4
   261fc:	4642      	mov	r2, r8
   261fe:	4608      	mov	r0, r1
   26200:	f7ff fcef 	bl	25be2 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   26204:	9400      	str	r4, [sp, #0]
   26206:	4633      	mov	r3, r6
   26208:	4642      	mov	r2, r8
   2620a:	4629      	mov	r1, r5
   2620c:	4648      	mov	r0, r9
   2620e:	f7ff ff09 	bl	26024 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   26212:	4623      	mov	r3, r4
   26214:	aa08      	add	r2, sp, #32
   26216:	a920      	add	r1, sp, #128	; 0x80
   26218:	a810      	add	r0, sp, #64	; 0x40
   2621a:	f7ff fee4 	bl	25fe6 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2621e:	9803      	ldr	r0, [sp, #12]
   26220:	463a      	mov	r2, r7
   26222:	a910      	add	r1, sp, #64	; 0x40
   26224:	f7ff fbcb 	bl	259be <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   26228:	9b03      	ldr	r3, [sp, #12]
   2622a:	9c05      	ldr	r4, [sp, #20]
   2622c:	4423      	add	r3, r4
   2622e:	a920      	add	r1, sp, #128	; 0x80
   26230:	4618      	mov	r0, r3
   26232:	f7ff fbc4 	bl	259be <uECC_vli_set>
}
   26236:	b031      	add	sp, #196	; 0xc4
   26238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   2623c:	4629      	mov	r1, r5
   2623e:	a808      	add	r0, sp, #32
   26240:	f7ff fb78 	bl	25934 <uECC_vli_clear>
		z[0] = 1;
   26244:	2301      	movs	r3, #1
   26246:	9308      	str	r3, [sp, #32]
   26248:	e775      	b.n	26136 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   2624a:	4629      	mov	r1, r5
   2624c:	4650      	mov	r0, sl
   2624e:	f7ff fb8b 	bl	25968 <uECC_vli_testBit>
   26252:	fab0 f680 	clz	r6, r0
   26256:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   26258:	f1c6 0101 	rsb	r1, r6, #1
   2625c:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   26260:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   26264:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   26268:	4633      	mov	r3, r6
   2626a:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   2626e:	465a      	mov	r2, fp
   26270:	9400      	str	r4, [sp, #0]
   26272:	e9cd 0106 	strd	r0, r1, [sp, #24]
   26276:	f7ff fda0 	bl	25dba <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2627a:	9907      	ldr	r1, [sp, #28]
   2627c:	9806      	ldr	r0, [sp, #24]
   2627e:	9400      	str	r4, [sp, #0]
   26280:	460b      	mov	r3, r1
   26282:	4602      	mov	r2, r0
   26284:	4631      	mov	r1, r6
   26286:	4658      	mov	r0, fp
   26288:	f7ff fecc 	bl	26024 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2628c:	3d01      	subs	r5, #1
   2628e:	e775      	b.n	2617c <EccPoint_mult+0x8a>

00026290 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   26290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   26294:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   26298:	f119 081f 	adds.w	r8, r9, #31
{
   2629c:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2629e:	bf48      	it	mi
   262a0:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   262a4:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   262a6:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   262aa:	3524      	adds	r5, #36	; 0x24
   262ac:	4601      	mov	r1, r0
{
   262ae:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   262b0:	4643      	mov	r3, r8
   262b2:	462a      	mov	r2, r5
   262b4:	4630      	mov	r0, r6
   262b6:	f7ff fa84 	bl	257c2 <uECC_vli_add>
   262ba:	4604      	mov	r4, r0
   262bc:	b990      	cbnz	r0, 262e4 <regularize_k+0x54>
   262be:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   262c2:	da06      	bge.n	262d2 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   262c4:	4649      	mov	r1, r9
   262c6:	4630      	mov	r0, r6
   262c8:	f7ff fb4e 	bl	25968 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   262cc:	1e04      	subs	r4, r0, #0
   262ce:	bf18      	it	ne
   262d0:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   262d2:	4643      	mov	r3, r8
   262d4:	462a      	mov	r2, r5
   262d6:	4631      	mov	r1, r6
   262d8:	4638      	mov	r0, r7
   262da:	f7ff fa72 	bl	257c2 <uECC_vli_add>

	return carry;
}
   262de:	4620      	mov	r0, r4
   262e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   262e4:	2401      	movs	r4, #1
   262e6:	e7f4      	b.n	262d2 <regularize_k+0x42>

000262e8 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   262e8:	b530      	push	{r4, r5, lr}
   262ea:	4614      	mov	r4, r2
   262ec:	b095      	sub	sp, #84	; 0x54
   262ee:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   262f0:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   262f2:	4623      	mov	r3, r4
{
   262f4:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   262f6:	a904      	add	r1, sp, #16
   262f8:	9102      	str	r1, [sp, #8]
   262fa:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   262fc:	f7ff ffc8 	bl	26290 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   26300:	fab0 f380 	clz	r3, r0
   26304:	095b      	lsrs	r3, r3, #5
   26306:	aa14      	add	r2, sp, #80	; 0x50
   26308:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2630c:	8863      	ldrh	r3, [r4, #2]
   2630e:	9401      	str	r4, [sp, #4]
   26310:	3301      	adds	r3, #1
   26312:	b21b      	sxth	r3, r3
   26314:	9300      	str	r3, [sp, #0]
   26316:	f852 2c48 	ldr.w	r2, [r2, #-72]
   2631a:	2300      	movs	r3, #0
   2631c:	f104 0144 	add.w	r1, r4, #68	; 0x44
   26320:	4628      	mov	r0, r5
   26322:	f7ff fee6 	bl	260f2 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   26326:	4621      	mov	r1, r4
   26328:	4628      	mov	r0, r5
   2632a:	f7ff fe57 	bl	25fdc <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   2632e:	fab0 f080 	clz	r0, r0
   26332:	0940      	lsrs	r0, r0, #5
   26334:	b015      	add	sp, #84	; 0x54
   26336:	bd30      	pop	{r4, r5, pc}

00026338 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   26338:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2633a:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2633c:	1e4f      	subs	r7, r1, #1
   2633e:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   26340:	428c      	cmp	r4, r1
   26342:	f105 0501 	add.w	r5, r5, #1
   26346:	db00      	blt.n	2634a <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   26348:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   2634a:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2634c:	f023 0603 	bic.w	r6, r3, #3
   26350:	f003 0303 	and.w	r3, r3, #3
   26354:	5996      	ldr	r6, [r2, r6]
   26356:	00db      	lsls	r3, r3, #3
   26358:	fa26 f303 	lsr.w	r3, r6, r3
   2635c:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2635e:	e7ee      	b.n	2633e <uECC_vli_nativeToBytes+0x6>

00026360 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   26360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26362:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   26364:	1cd1      	adds	r1, r2, #3
   26366:	bf48      	it	mi
   26368:	1d91      	addmi	r1, r2, #6
   2636a:	f341 0187 	sbfx	r1, r1, #2, #8
{
   2636e:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   26370:	f7ff fae0 	bl	25934 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   26374:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   26376:	1e67      	subs	r7, r4, #1
   26378:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2637a:	42a2      	cmp	r2, r4
   2637c:	f105 0501 	add.w	r5, r5, #1
   26380:	db00      	blt.n	26384 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   26382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   26384:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   26386:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2638a:	5cb2      	ldrb	r2, [r6, r2]
   2638c:	f003 0303 	and.w	r3, r3, #3
   26390:	00db      	lsls	r3, r3, #3
   26392:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   26396:	5842      	ldr	r2, [r0, r1]
   26398:	431a      	orrs	r2, r3
   2639a:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   2639c:	e7ec      	b.n	26378 <uECC_vli_bytesToNative+0x18>

0002639e <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   2639e:	b5f0      	push	{r4, r5, r6, r7, lr}
   263a0:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   263a2:	f991 6000 	ldrsb.w	r6, [r1]
{
   263a6:	4605      	mov	r5, r0
   263a8:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   263aa:	f7ff fe17 	bl	25fdc <EccPoint_isZero>
   263ae:	bb28      	cbnz	r0, 263fc <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   263b0:	1d27      	adds	r7, r4, #4
   263b2:	4632      	mov	r2, r6
   263b4:	4629      	mov	r1, r5
   263b6:	4638      	mov	r0, r7
   263b8:	f7ff fb0d 	bl	259d6 <uECC_vli_cmp_unsafe>
   263bc:	2801      	cmp	r0, #1
   263be:	d120      	bne.n	26402 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   263c0:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   263c4:	4632      	mov	r2, r6
   263c6:	4638      	mov	r0, r7
   263c8:	f7ff fb05 	bl	259d6 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   263cc:	2801      	cmp	r0, #1
   263ce:	d118      	bne.n	26402 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   263d0:	4622      	mov	r2, r4
   263d2:	4668      	mov	r0, sp
   263d4:	f7ff fc15 	bl	25c02 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   263d8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   263dc:	4622      	mov	r2, r4
   263de:	4629      	mov	r1, r5
   263e0:	a808      	add	r0, sp, #32
   263e2:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   263e4:	4632      	mov	r2, r6
   263e6:	a908      	add	r1, sp, #32
   263e8:	4668      	mov	r0, sp
   263ea:	f7ff fb0b 	bl	25a04 <uECC_vli_equal>
   263ee:	2800      	cmp	r0, #0
		return -3;
   263f0:	bf0c      	ite	eq
   263f2:	2000      	moveq	r0, #0
   263f4:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   263f8:	b011      	add	sp, #68	; 0x44
   263fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   263fc:	f04f 30ff 	mov.w	r0, #4294967295
   26400:	e7fa      	b.n	263f8 <uECC_valid_point+0x5a>
		return -2;
   26402:	f06f 0001 	mvn.w	r0, #1
   26406:	e7f7      	b.n	263f8 <uECC_valid_point+0x5a>

00026408 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   26408:	b570      	push	{r4, r5, r6, lr}
   2640a:	460c      	mov	r4, r1
   2640c:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2640e:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   26410:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   26414:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   26416:	4601      	mov	r1, r0
   26418:	4668      	mov	r0, sp
   2641a:	f7ff ffa1 	bl	26360 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   2641e:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   26422:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   26426:	18a9      	adds	r1, r5, r2
   26428:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2642c:	f7ff ff98 	bl	26360 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   26430:	2210      	movs	r2, #16
   26432:	4631      	mov	r1, r6
   26434:	4668      	mov	r0, sp
   26436:	f7ff face 	bl	259d6 <uECC_vli_cmp_unsafe>
   2643a:	b128      	cbz	r0, 26448 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2643c:	4621      	mov	r1, r4
   2643e:	4668      	mov	r0, sp
   26440:	f7ff ffad 	bl	2639e <uECC_valid_point>
}
   26444:	b010      	add	sp, #64	; 0x40
   26446:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   26448:	f06f 0003 	mvn.w	r0, #3
   2644c:	e7fa      	b.n	26444 <uECC_valid_public_key+0x3c>

0002644e <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2644e:	78cb      	ldrb	r3, [r1, #3]
   26450:	7802      	ldrb	r2, [r0, #0]
   26452:	4053      	eors	r3, r2
   26454:	7003      	strb	r3, [r0, #0]
   26456:	884b      	ldrh	r3, [r1, #2]
   26458:	7842      	ldrb	r2, [r0, #1]
   2645a:	4053      	eors	r3, r2
   2645c:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2645e:	680a      	ldr	r2, [r1, #0]
   26460:	7883      	ldrb	r3, [r0, #2]
   26462:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26466:	7083      	strb	r3, [r0, #2]
   26468:	680a      	ldr	r2, [r1, #0]
   2646a:	78c3      	ldrb	r3, [r0, #3]
   2646c:	4053      	eors	r3, r2
   2646e:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26470:	79cb      	ldrb	r3, [r1, #7]
   26472:	7902      	ldrb	r2, [r0, #4]
   26474:	4053      	eors	r3, r2
   26476:	7103      	strb	r3, [r0, #4]
   26478:	88cb      	ldrh	r3, [r1, #6]
   2647a:	7942      	ldrb	r2, [r0, #5]
   2647c:	4053      	eors	r3, r2
   2647e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26480:	684a      	ldr	r2, [r1, #4]
   26482:	7983      	ldrb	r3, [r0, #6]
   26484:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26488:	7183      	strb	r3, [r0, #6]
   2648a:	684a      	ldr	r2, [r1, #4]
   2648c:	79c3      	ldrb	r3, [r0, #7]
   2648e:	4053      	eors	r3, r2
   26490:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   26492:	7acb      	ldrb	r3, [r1, #11]
   26494:	7a02      	ldrb	r2, [r0, #8]
   26496:	4053      	eors	r3, r2
   26498:	7203      	strb	r3, [r0, #8]
   2649a:	7a42      	ldrb	r2, [r0, #9]
   2649c:	894b      	ldrh	r3, [r1, #10]
   2649e:	4053      	eors	r3, r2
   264a0:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   264a2:	688a      	ldr	r2, [r1, #8]
   264a4:	7a83      	ldrb	r3, [r0, #10]
   264a6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   264aa:	7283      	strb	r3, [r0, #10]
   264ac:	688a      	ldr	r2, [r1, #8]
   264ae:	7ac3      	ldrb	r3, [r0, #11]
   264b0:	4053      	eors	r3, r2
   264b2:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   264b4:	7bcb      	ldrb	r3, [r1, #15]
   264b6:	7b02      	ldrb	r2, [r0, #12]
   264b8:	4053      	eors	r3, r2
   264ba:	7303      	strb	r3, [r0, #12]
   264bc:	89cb      	ldrh	r3, [r1, #14]
   264be:	7b42      	ldrb	r2, [r0, #13]
   264c0:	4053      	eors	r3, r2
   264c2:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   264c4:	68ca      	ldr	r2, [r1, #12]
   264c6:	7b83      	ldrb	r3, [r0, #14]
   264c8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   264cc:	7383      	strb	r3, [r0, #14]
   264ce:	68ca      	ldr	r2, [r1, #12]
   264d0:	7bc3      	ldrb	r3, [r0, #15]
   264d2:	4053      	eors	r3, r2
   264d4:	73c3      	strb	r3, [r0, #15]
}
   264d6:	4770      	bx	lr

000264d8 <shift_rows>:
{
   264d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   264da:	7802      	ldrb	r2, [r0, #0]
   264dc:	f88d 2000 	strb.w	r2, [sp]
   264e0:	7942      	ldrb	r2, [r0, #5]
   264e2:	f88d 2001 	strb.w	r2, [sp, #1]
   264e6:	7a82      	ldrb	r2, [r0, #10]
   264e8:	f88d 2002 	strb.w	r2, [sp, #2]
   264ec:	7bc2      	ldrb	r2, [r0, #15]
   264ee:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   264f2:	7902      	ldrb	r2, [r0, #4]
   264f4:	f88d 2004 	strb.w	r2, [sp, #4]
   264f8:	7a42      	ldrb	r2, [r0, #9]
   264fa:	f88d 2005 	strb.w	r2, [sp, #5]
   264fe:	7b82      	ldrb	r2, [r0, #14]
   26500:	f88d 2006 	strb.w	r2, [sp, #6]
   26504:	78c2      	ldrb	r2, [r0, #3]
   26506:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2650a:	7a02      	ldrb	r2, [r0, #8]
   2650c:	f88d 2008 	strb.w	r2, [sp, #8]
   26510:	7b42      	ldrb	r2, [r0, #13]
   26512:	f88d 2009 	strb.w	r2, [sp, #9]
   26516:	7882      	ldrb	r2, [r0, #2]
   26518:	f88d 200a 	strb.w	r2, [sp, #10]
   2651c:	79c2      	ldrb	r2, [r0, #7]
   2651e:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26522:	7b02      	ldrb	r2, [r0, #12]
   26524:	f88d 200c 	strb.w	r2, [sp, #12]
   26528:	7842      	ldrb	r2, [r0, #1]
   2652a:	7ac3      	ldrb	r3, [r0, #11]
   2652c:	f88d 200d 	strb.w	r2, [sp, #13]
   26530:	7982      	ldrb	r2, [r0, #6]
   26532:	f88d 200e 	strb.w	r2, [sp, #14]
   26536:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2653a:	2310      	movs	r3, #16
   2653c:	466a      	mov	r2, sp
   2653e:	4619      	mov	r1, r3
   26540:	f7ff f87b 	bl	2563a <_copy>
}
   26544:	b005      	add	sp, #20
   26546:	f85d fb04 	ldr.w	pc, [sp], #4

0002654a <mult_row_column>:
{
   2654a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2654c:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2654e:	7808      	ldrb	r0, [r1, #0]
{
   26550:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26552:	f7ff f881 	bl	25658 <_double_byte>
   26556:	4605      	mov	r5, r0
   26558:	7860      	ldrb	r0, [r4, #1]
   2655a:	f7ff f87d 	bl	25658 <_double_byte>
   2655e:	78a2      	ldrb	r2, [r4, #2]
   26560:	7863      	ldrb	r3, [r4, #1]
   26562:	4053      	eors	r3, r2
   26564:	78e2      	ldrb	r2, [r4, #3]
   26566:	4053      	eors	r3, r2
   26568:	405d      	eors	r5, r3
   2656a:	4045      	eors	r5, r0
   2656c:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2656e:	7860      	ldrb	r0, [r4, #1]
   26570:	7827      	ldrb	r7, [r4, #0]
   26572:	f7ff f871 	bl	25658 <_double_byte>
   26576:	4605      	mov	r5, r0
   26578:	78a0      	ldrb	r0, [r4, #2]
   2657a:	f7ff f86d 	bl	25658 <_double_byte>
   2657e:	78a3      	ldrb	r3, [r4, #2]
   26580:	405f      	eors	r7, r3
   26582:	78e3      	ldrb	r3, [r4, #3]
   26584:	405f      	eors	r7, r3
   26586:	407d      	eors	r5, r7
   26588:	4045      	eors	r5, r0
   2658a:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2658c:	78a0      	ldrb	r0, [r4, #2]
   2658e:	7865      	ldrb	r5, [r4, #1]
   26590:	7827      	ldrb	r7, [r4, #0]
   26592:	f7ff f861 	bl	25658 <_double_byte>
   26596:	406f      	eors	r7, r5
   26598:	4605      	mov	r5, r0
   2659a:	78e0      	ldrb	r0, [r4, #3]
   2659c:	f7ff f85c 	bl	25658 <_double_byte>
   265a0:	78e3      	ldrb	r3, [r4, #3]
   265a2:	405f      	eors	r7, r3
   265a4:	407d      	eors	r5, r7
   265a6:	4045      	eors	r5, r0
   265a8:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   265aa:	7820      	ldrb	r0, [r4, #0]
   265ac:	f7ff f854 	bl	25658 <_double_byte>
   265b0:	7863      	ldrb	r3, [r4, #1]
   265b2:	7825      	ldrb	r5, [r4, #0]
   265b4:	405d      	eors	r5, r3
   265b6:	78a3      	ldrb	r3, [r4, #2]
   265b8:	405d      	eors	r5, r3
   265ba:	4045      	eors	r5, r0
   265bc:	78e0      	ldrb	r0, [r4, #3]
   265be:	f7ff f84b 	bl	25658 <_double_byte>
   265c2:	b2ed      	uxtb	r5, r5
   265c4:	4045      	eors	r5, r0
   265c6:	70f5      	strb	r5, [r6, #3]
}
   265c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000265ca <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   265ca:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   265cc:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   265ce:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   265d0:	f912 3b10 	ldrsb.w	r3, [r2], #16
   265d4:	2b00      	cmp	r3, #0
   265d6:	bfb4      	ite	lt
   265d8:	2387      	movlt	r3, #135	; 0x87
   265da:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   265dc:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   265e0:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   265e4:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   265e6:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   265ea:	d002      	beq.n	265f2 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   265ec:	7813      	ldrb	r3, [r2, #0]
   265ee:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   265f0:	e7f4      	b.n	265dc <gf_double+0x12>
	}
}
   265f2:	bd10      	pop	{r4, pc}

000265f4 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   265f4:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   265f6:	b120      	cbz	r0, 26602 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   265f8:	2258      	movs	r2, #88	; 0x58
   265fa:	2100      	movs	r1, #0
   265fc:	f7ff f82a 	bl	25654 <_set>
   26600:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26602:	bd08      	pop	{r3, pc}

00026604 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   26604:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26606:	4604      	mov	r4, r0
   26608:	b188      	cbz	r0, 2662e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2660a:	2210      	movs	r2, #16
   2660c:	2100      	movs	r1, #0
   2660e:	f7ff f821 	bl	25654 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   26612:	2210      	movs	r2, #16
   26614:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26618:	2100      	movs	r1, #0
   2661a:	f7ff f81b 	bl	25654 <_set>
	s->leftover_offset = 0;
   2661e:	2300      	movs	r3, #0
   26620:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   26622:	2200      	movs	r2, #0
   26624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26628:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2662c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2662e:	bd10      	pop	{r4, pc}

00026630 <tc_cmac_setup>:
{
   26630:	b570      	push	{r4, r5, r6, lr}
   26632:	460d      	mov	r5, r1
   26634:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   26636:	4604      	mov	r4, r0
   26638:	b310      	cbz	r0, 26680 <tc_cmac_setup+0x50>
   2663a:	b311      	cbz	r1, 26682 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2663c:	2258      	movs	r2, #88	; 0x58
   2663e:	2100      	movs	r1, #0
   26640:	f7ff f808 	bl	25654 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   26644:	4629      	mov	r1, r5
	s->sched = sched;
   26646:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   26648:	4630      	mov	r0, r6
   2664a:	f7df fe59 	bl	6300 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2664e:	2210      	movs	r2, #16
   26650:	2100      	movs	r1, #0
   26652:	4620      	mov	r0, r4
   26654:	f7fe fffe 	bl	25654 <_set>
	gf_double (s->K1, s->iv);
   26658:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2665c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2665e:	4621      	mov	r1, r4
   26660:	4620      	mov	r0, r4
   26662:	f7df fe9f 	bl	63a4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   26666:	4621      	mov	r1, r4
   26668:	4628      	mov	r0, r5
   2666a:	f7ff ffae 	bl	265ca <gf_double>
	gf_double (s->K2, s->K1);
   2666e:	4629      	mov	r1, r5
   26670:	f104 0020 	add.w	r0, r4, #32
   26674:	f7ff ffa9 	bl	265ca <gf_double>
	tc_cmac_init(s);
   26678:	4620      	mov	r0, r4
   2667a:	f7ff ffc3 	bl	26604 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2667e:	2001      	movs	r0, #1
}
   26680:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26682:	4608      	mov	r0, r1
   26684:	e7fc      	b.n	26680 <tc_cmac_setup+0x50>

00026686 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   26686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2668a:	460d      	mov	r5, r1
   2668c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2668e:	4604      	mov	r4, r0
   26690:	2800      	cmp	r0, #0
   26692:	d062      	beq.n	2675a <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   26694:	b912      	cbnz	r2, 2669c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   26696:	2001      	movs	r0, #1
}
   26698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2669c:	2900      	cmp	r1, #0
   2669e:	d05c      	beq.n	2675a <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   266a0:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   266a4:	ea50 0301 	orrs.w	r3, r0, r1
   266a8:	d057      	beq.n	2675a <tc_cmac_update+0xd4>
	s->countdown--;
   266aa:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   266ae:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   266b2:	f141 33ff 	adc.w	r3, r1, #4294967295
   266b6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   266ba:	f1b8 0f00 	cmp.w	r8, #0
   266be:	d02a      	beq.n	26716 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   266c0:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   266c4:	f108 0030 	add.w	r0, r8, #48	; 0x30
   266c8:	42be      	cmp	r6, r7
   266ca:	4420      	add	r0, r4
   266cc:	d208      	bcs.n	266e0 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   266ce:	462a      	mov	r2, r5
   266d0:	4633      	mov	r3, r6
   266d2:	4631      	mov	r1, r6
   266d4:	f7fe ffb1 	bl	2563a <_copy>
			s->leftover_offset += data_length;
   266d8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   266da:	4432      	add	r2, r6
   266dc:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   266de:	e7da      	b.n	26696 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   266e0:	463b      	mov	r3, r7
   266e2:	462a      	mov	r2, r5
   266e4:	4639      	mov	r1, r7
   266e6:	f7fe ffa8 	bl	2563a <_copy>
		data_length -= remaining_space;
   266ea:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   266ec:	2300      	movs	r3, #0
   266ee:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   266f0:	4446      	add	r6, r8
		data += remaining_space;
   266f2:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   266f4:	1e63      	subs	r3, r4, #1
   266f6:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   266fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   266fe:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26702:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   26704:	ea82 0200 	eor.w	r2, r2, r0
   26708:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2670a:	d1f6      	bne.n	266fa <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2670c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2670e:	4621      	mov	r1, r4
   26710:	4620      	mov	r0, r4
   26712:	f7df fe47 	bl	63a4 <tc_aes_encrypt>
   26716:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2671a:	2e10      	cmp	r6, #16
   2671c:	d80a      	bhi.n	26734 <tc_cmac_update+0xae>
	if (data_length > 0) {
   2671e:	2e00      	cmp	r6, #0
   26720:	d0b9      	beq.n	26696 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   26722:	4633      	mov	r3, r6
   26724:	462a      	mov	r2, r5
   26726:	4631      	mov	r1, r6
   26728:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2672c:	f7fe ff85 	bl	2563a <_copy>
		s->leftover_offset = data_length;
   26730:	6466      	str	r6, [r4, #68]	; 0x44
   26732:	e7b0      	b.n	26696 <tc_cmac_update+0x10>
   26734:	1e63      	subs	r3, r4, #1
   26736:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   26738:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2673c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26740:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   26742:	ea82 0200 	eor.w	r2, r2, r0
   26746:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26748:	d1f6      	bne.n	26738 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2674a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2674c:	4621      	mov	r1, r4
   2674e:	4620      	mov	r0, r4
   26750:	f7df fe28 	bl	63a4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   26754:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26756:	3e10      	subs	r6, #16
   26758:	e7df      	b.n	2671a <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   2675a:	2000      	movs	r0, #0
   2675c:	e79c      	b.n	26698 <tc_cmac_update+0x12>

0002675e <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2675e:	b570      	push	{r4, r5, r6, lr}
   26760:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   26762:	4605      	mov	r5, r0
   26764:	b1e8      	cbz	r0, 267a2 <tc_cmac_final+0x44>
   26766:	b369      	cbz	r1, 267c4 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   26768:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2676a:	2a10      	cmp	r2, #16
   2676c:	d11a      	bne.n	267a4 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2676e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26770:	1e63      	subs	r3, r4, #1
   26772:	3901      	subs	r1, #1
   26774:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26778:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2677c:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   26780:	4072      	eors	r2, r6
   26782:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26786:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26788:	ea82 0206 	eor.w	r2, r2, r6
   2678c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2678e:	d1f3      	bne.n	26778 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   26790:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26792:	4621      	mov	r1, r4
   26794:	4628      	mov	r0, r5
   26796:	f7df fe05 	bl	63a4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2679a:	4620      	mov	r0, r4
   2679c:	f7ff ff2a 	bl	265f4 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   267a0:	2001      	movs	r0, #1
}
   267a2:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   267a4:	f102 0030 	add.w	r0, r2, #48	; 0x30
   267a8:	2100      	movs	r1, #0
   267aa:	f1c2 0210 	rsb	r2, r2, #16
   267ae:	4420      	add	r0, r4
   267b0:	f7fe ff50 	bl	25654 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   267b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   267b6:	4423      	add	r3, r4
   267b8:	2280      	movs	r2, #128	; 0x80
   267ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   267be:	f104 0120 	add.w	r1, r4, #32
   267c2:	e7d5      	b.n	26770 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   267c4:	4608      	mov	r0, r1
   267c6:	e7ec      	b.n	267a2 <tc_cmac_final+0x44>

000267c8 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   267c8:	2100      	movs	r1, #0
   267ca:	2001      	movs	r0, #1
   267cc:	f000 b800 	b.w	267d0 <z_arm_fatal_error>

000267d0 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   267d0:	f006 bc1e 	b.w	2d010 <z_fatal_error>

000267d4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   267d4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   267d6:	6800      	ldr	r0, [r0, #0]
   267d8:	f006 bc1a 	b.w	2d010 <z_fatal_error>

000267dc <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   267dc:	b508      	push	{r3, lr}
	handler();
   267de:	f7df ff43 	bl	6668 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   267e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   267e6:	f7e0 b86f 	b.w	68c8 <z_arm_exc_exit>

000267ea <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   267ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   267ee:	4684      	mov	ip, r0
   267f0:	4688      	mov	r8, r1
	register const char *s = nptr;
   267f2:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   267f4:	460c      	mov	r4, r1
   267f6:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   267fa:	2b20      	cmp	r3, #32
   267fc:	d033      	beq.n	26866 <strtol+0x7c>
   267fe:	f1a3 0009 	sub.w	r0, r3, #9
   26802:	2804      	cmp	r0, #4
   26804:	d92f      	bls.n	26866 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   26806:	2b2d      	cmp	r3, #45	; 0x2d
   26808:	d12f      	bne.n	2686a <strtol+0x80>
		neg = 1;
		c = *s++;
   2680a:	784b      	ldrb	r3, [r1, #1]
   2680c:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2680e:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   26810:	2a00      	cmp	r2, #0
   26812:	d05c      	beq.n	268ce <strtol+0xe4>
   26814:	2a10      	cmp	r2, #16
   26816:	d109      	bne.n	2682c <strtol+0x42>
   26818:	2b30      	cmp	r3, #48	; 0x30
   2681a:	d107      	bne.n	2682c <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2681c:	7823      	ldrb	r3, [r4, #0]
   2681e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   26822:	2b58      	cmp	r3, #88	; 0x58
   26824:	d14e      	bne.n	268c4 <strtol+0xda>
		c = s[1];
   26826:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   26828:	2210      	movs	r2, #16
		s += 2;
   2682a:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2682c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   26830:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   26832:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   26834:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   26838:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   2683a:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2683e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   26842:	2d09      	cmp	r5, #9
   26844:	d817      	bhi.n	26876 <strtol+0x8c>
			c -= '0';
   26846:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   26848:	429a      	cmp	r2, r3
   2684a:	dd24      	ble.n	26896 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2684c:	1c75      	adds	r5, r6, #1
   2684e:	d007      	beq.n	26860 <strtol+0x76>
   26850:	4570      	cmp	r0, lr
   26852:	d81d      	bhi.n	26890 <strtol+0xa6>
   26854:	d101      	bne.n	2685a <strtol+0x70>
   26856:	454b      	cmp	r3, r9
   26858:	dc1a      	bgt.n	26890 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2685a:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2685e:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   26860:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   26864:	e7eb      	b.n	2683e <strtol+0x54>
{
   26866:	4621      	mov	r1, r4
   26868:	e7c4      	b.n	267f4 <strtol+0xa>
	} else if (c == '+') {
   2686a:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2686c:	bf04      	itt	eq
   2686e:	784b      	ldrbeq	r3, [r1, #1]
   26870:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   26872:	2100      	movs	r1, #0
   26874:	e7cc      	b.n	26810 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   26876:	f043 0520 	orr.w	r5, r3, #32
   2687a:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2687c:	2d19      	cmp	r5, #25
   2687e:	d80a      	bhi.n	26896 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   26880:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   26884:	2d1a      	cmp	r5, #26
   26886:	bf34      	ite	cc
   26888:	2537      	movcc	r5, #55	; 0x37
   2688a:	2557      	movcs	r5, #87	; 0x57
   2688c:	1b5b      	subs	r3, r3, r5
   2688e:	e7db      	b.n	26848 <strtol+0x5e>
			any = -1;
   26890:	f04f 36ff 	mov.w	r6, #4294967295
   26894:	e7e4      	b.n	26860 <strtol+0x76>
		}
	}

	if (any < 0) {
   26896:	1c73      	adds	r3, r6, #1
   26898:	d109      	bne.n	268ae <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2689a:	f7fc faf9 	bl	22e90 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2689e:	2326      	movs	r3, #38	; 0x26
   268a0:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   268a2:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   268a4:	f1b8 0f00 	cmp.w	r8, #0
   268a8:	d107      	bne.n	268ba <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   268aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   268ae:	b101      	cbz	r1, 268b2 <strtol+0xc8>
		acc = -acc;
   268b0:	4240      	negs	r0, r0
	if (endptr != NULL) {
   268b2:	f1b8 0f00 	cmp.w	r8, #0
   268b6:	d0f8      	beq.n	268aa <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   268b8:	b10e      	cbz	r6, 268be <strtol+0xd4>
   268ba:	f104 3cff 	add.w	ip, r4, #4294967295
   268be:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   268c2:	e7f2      	b.n	268aa <strtol+0xc0>
	if (base == 0) {
   268c4:	2330      	movs	r3, #48	; 0x30
   268c6:	2a00      	cmp	r2, #0
   268c8:	d1b0      	bne.n	2682c <strtol+0x42>
		base = c == '0' ? 8 : 10;
   268ca:	2208      	movs	r2, #8
   268cc:	e7ae      	b.n	2682c <strtol+0x42>
	if ((base == 0 || base == 16) &&
   268ce:	2b30      	cmp	r3, #48	; 0x30
   268d0:	d0a4      	beq.n	2681c <strtol+0x32>
		base = c == '0' ? 8 : 10;
   268d2:	220a      	movs	r2, #10
   268d4:	e7aa      	b.n	2682c <strtol+0x42>

000268d6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   268d6:	3901      	subs	r1, #1
   268d8:	4603      	mov	r3, r0
   268da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   268de:	b90a      	cbnz	r2, 268e4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   268e0:	701a      	strb	r2, [r3, #0]

	return dest;
}
   268e2:	4770      	bx	lr
		*d = *s;
   268e4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   268e8:	e7f7      	b.n	268da <strcpy+0x4>

000268ea <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   268ea:	b570      	push	{r4, r5, r6, lr}
   268ec:	3901      	subs	r1, #1
   268ee:	4605      	mov	r5, r0
   268f0:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   268f2:	b142      	cbz	r2, 26906 <strncpy+0x1c>
   268f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   268f8:	1e56      	subs	r6, r2, #1
   268fa:	b92b      	cbnz	r3, 26908 <strncpy+0x1e>
   268fc:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   268fe:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   26902:	42a2      	cmp	r2, r4
   26904:	d1fb      	bne.n	268fe <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   26906:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   26908:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   2690c:	4632      	mov	r2, r6
   2690e:	e7ef      	b.n	268f0 <strncpy+0x6>

00026910 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   26910:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   26912:	4603      	mov	r3, r0
   26914:	781a      	ldrb	r2, [r3, #0]
   26916:	428a      	cmp	r2, r1
   26918:	4618      	mov	r0, r3
   2691a:	f103 0301 	add.w	r3, r3, #1
   2691e:	d004      	beq.n	2692a <strchr+0x1a>
   26920:	2a00      	cmp	r2, #0
   26922:	d1f7      	bne.n	26914 <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   26924:	2900      	cmp	r1, #0
   26926:	bf18      	it	ne
   26928:	2000      	movne	r0, #0
}
   2692a:	4770      	bx	lr

0002692c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2692c:	4603      	mov	r3, r0
	size_t n = 0;
   2692e:	2000      	movs	r0, #0

	while (*s != '\0') {
   26930:	5c1a      	ldrb	r2, [r3, r0]
   26932:	b902      	cbnz	r2, 26936 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   26934:	4770      	bx	lr
		n++;
   26936:	3001      	adds	r0, #1
   26938:	e7fa      	b.n	26930 <strlen+0x4>

0002693a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2693a:	1e43      	subs	r3, r0, #1
   2693c:	3901      	subs	r1, #1
   2693e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26942:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   26946:	4282      	cmp	r2, r0
   26948:	d101      	bne.n	2694e <strcmp+0x14>
   2694a:	2a00      	cmp	r2, #0
   2694c:	d1f7      	bne.n	2693e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2694e:	1a10      	subs	r0, r2, r0
   26950:	4770      	bx	lr

00026952 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   26952:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   26954:	2400      	movs	r4, #0
   26956:	42a2      	cmp	r2, r4
   26958:	d008      	beq.n	2696c <strncmp+0x1a>
   2695a:	5d03      	ldrb	r3, [r0, r4]
   2695c:	5d0d      	ldrb	r5, [r1, r4]
   2695e:	42ab      	cmp	r3, r5
   26960:	d102      	bne.n	26968 <strncmp+0x16>
   26962:	3401      	adds	r4, #1
   26964:	2b00      	cmp	r3, #0
   26966:	d1f6      	bne.n	26956 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   26968:	1b58      	subs	r0, r3, r5
   2696a:	e000      	b.n	2696e <strncmp+0x1c>
   2696c:	2000      	movs	r0, #0
}
   2696e:	bd30      	pop	{r4, r5, pc}

00026970 <strcat>:

	return start;
}

char *strcat(char *_MLIBC_RESTRICT dest, const char *_MLIBC_RESTRICT src)
{
   26970:	b510      	push	{r4, lr}
   26972:	4604      	mov	r4, r0
	strcpy(dest + strlen(dest), src);
   26974:	f7ff ffda 	bl	2692c <strlen>
   26978:	4420      	add	r0, r4
   2697a:	f7ff ffac 	bl	268d6 <strcpy>
	return dest;
}
   2697e:	4620      	mov	r0, r4
   26980:	bd10      	pop	{r4, pc}

00026982 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   26982:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   26984:	b15a      	cbz	r2, 2699e <memcmp+0x1c>
   26986:	3901      	subs	r1, #1
   26988:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2698a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2698e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   26992:	42a0      	cmp	r0, r4
   26994:	d001      	beq.n	2699a <memcmp+0x18>
   26996:	429a      	cmp	r2, r3
   26998:	d0f7      	beq.n	2698a <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2699a:	1ad0      	subs	r0, r2, r3
}
   2699c:	bd10      	pop	{r4, pc}
		return 0;
   2699e:	4610      	mov	r0, r2
   269a0:	e7fc      	b.n	2699c <memcmp+0x1a>

000269a2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   269a2:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   269a4:	ea81 0400 	eor.w	r4, r1, r0
   269a8:	07a5      	lsls	r5, r4, #30
   269aa:	4603      	mov	r3, r0
   269ac:	d00b      	beq.n	269c6 <memcpy+0x24>
   269ae:	3b01      	subs	r3, #1
   269b0:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   269b2:	4291      	cmp	r1, r2
   269b4:	d11b      	bne.n	269ee <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   269b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   269b8:	2a00      	cmp	r2, #0
   269ba:	d0fc      	beq.n	269b6 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   269bc:	f811 4b01 	ldrb.w	r4, [r1], #1
   269c0:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   269c4:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   269c6:	079c      	lsls	r4, r3, #30
   269c8:	d1f6      	bne.n	269b8 <memcpy+0x16>
   269ca:	f022 0403 	bic.w	r4, r2, #3
   269ce:	1f1d      	subs	r5, r3, #4
   269d0:	0896      	lsrs	r6, r2, #2
   269d2:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   269d4:	42b9      	cmp	r1, r7
   269d6:	d105      	bne.n	269e4 <memcpy+0x42>
   269d8:	f06f 0503 	mvn.w	r5, #3
   269dc:	fb05 2206 	mla	r2, r5, r6, r2
   269e0:	4423      	add	r3, r4
   269e2:	e7e4      	b.n	269ae <memcpy+0xc>
			*(d_word++) = *(s_word++);
   269e4:	f851 cb04 	ldr.w	ip, [r1], #4
   269e8:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   269ec:	e7f2      	b.n	269d4 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   269ee:	f811 4b01 	ldrb.w	r4, [r1], #1
   269f2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   269f6:	e7dc      	b.n	269b2 <memcpy+0x10>

000269f8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   269f8:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   269fa:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   269fc:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   269fe:	079c      	lsls	r4, r3, #30
   26a00:	d111      	bne.n	26a26 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   26a02:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   26a06:	f022 0603 	bic.w	r6, r2, #3
   26a0a:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   26a0e:	441e      	add	r6, r3
   26a10:	0894      	lsrs	r4, r2, #2
   26a12:	42b3      	cmp	r3, r6
   26a14:	d10d      	bne.n	26a32 <memset+0x3a>
   26a16:	f06f 0503 	mvn.w	r5, #3
   26a1a:	fb05 2204 	mla	r2, r5, r4, r2
   26a1e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   26a20:	4293      	cmp	r3, r2
   26a22:	d109      	bne.n	26a38 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   26a24:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   26a26:	2a00      	cmp	r2, #0
   26a28:	d0fc      	beq.n	26a24 <memset+0x2c>
		*(d_byte++) = c_byte;
   26a2a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   26a2e:	3a01      	subs	r2, #1
   26a30:	e7e5      	b.n	269fe <memset+0x6>
		*(d_word++) = c_word;
   26a32:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   26a36:	e7ec      	b.n	26a12 <memset+0x1a>
		*(d_byte++) = c_byte;
   26a38:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   26a3c:	e7f0      	b.n	26a20 <memset+0x28>

00026a3e <_stdout_hook_default>:
}
   26a3e:	f04f 30ff 	mov.w	r0, #4294967295
   26a42:	4770      	bx	lr

00026a44 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   26a44:	684b      	ldr	r3, [r1, #4]
   26a46:	2b01      	cmp	r3, #1
   26a48:	dd07      	ble.n	26a5a <sprintf_out+0x16>
		*(p->ptr) = c;
   26a4a:	680b      	ldr	r3, [r1, #0]
   26a4c:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   26a4e:	680b      	ldr	r3, [r1, #0]
   26a50:	3301      	adds	r3, #1
   26a52:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   26a54:	684b      	ldr	r3, [r1, #4]
   26a56:	3b01      	subs	r3, #1
   26a58:	604b      	str	r3, [r1, #4]
}
   26a5a:	2000      	movs	r0, #0
   26a5c:	4770      	bx	lr

00026a5e <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   26a5e:	f7fb ba23 	b.w	21ea8 <SystemInit>

00026a62 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   26a62:	b530      	push	{r4, r5, lr}
   26a64:	b085      	sub	sp, #20
   26a66:	4604      	mov	r4, r0
   26a68:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   26a6a:	4668      	mov	r0, sp
   26a6c:	2203      	movs	r2, #3
   26a6e:	f7ff ff98 	bl	269a2 <memcpy>
	(void)memset(res + 3, 0, 13);
   26a72:	220d      	movs	r2, #13
   26a74:	2100      	movs	r1, #0
   26a76:	f10d 0003 	add.w	r0, sp, #3
   26a7a:	f7ff ffbd 	bl	269f8 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   26a7e:	4620      	mov	r0, r4
   26a80:	466a      	mov	r2, sp
   26a82:	4669      	mov	r1, sp
   26a84:	f7ef fa48 	bl	15f18 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   26a88:	4604      	mov	r4, r0
   26a8a:	b920      	cbnz	r0, 26a96 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   26a8c:	2203      	movs	r2, #3
   26a8e:	4669      	mov	r1, sp
   26a90:	4628      	mov	r0, r5
   26a92:	f7ff ff86 	bl	269a2 <memcpy>

	return 0;
}
   26a96:	4620      	mov	r0, r4
   26a98:	b005      	add	sp, #20
   26a9a:	bd30      	pop	{r4, r5, pc}

00026a9c <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   26a9c:	b513      	push	{r0, r1, r4, lr}
   26a9e:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   26aa0:	aa01      	add	r2, sp, #4
   26aa2:	3103      	adds	r1, #3
   26aa4:	f7ff ffdd 	bl	26a62 <ah>
	if (err) {
   26aa8:	b948      	cbnz	r0, 26abe <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   26aaa:	2203      	movs	r2, #3
   26aac:	a901      	add	r1, sp, #4
   26aae:	4620      	mov	r0, r4
   26ab0:	f7ff ff67 	bl	26982 <memcmp>
   26ab4:	fab0 f080 	clz	r0, r0
   26ab8:	0940      	lsrs	r0, r0, #5
}
   26aba:	b002      	add	sp, #8
   26abc:	bd10      	pop	{r4, pc}
		return false;
   26abe:	2000      	movs	r0, #0
   26ac0:	e7fb      	b.n	26aba <bt_rpa_irk_matches+0x1e>

00026ac2 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   26ac2:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   26ac4:	1cce      	adds	r6, r1, #3
{
   26ac6:	4605      	mov	r5, r0
   26ac8:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   26aca:	4630      	mov	r0, r6
   26acc:	2103      	movs	r1, #3
   26ace:	f7ef fa21 	bl	15f14 <bt_rand>
	if (err) {
   26ad2:	b960      	cbnz	r0, 26aee <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   26ad4:	7963      	ldrb	r3, [r4, #5]
   26ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26ade:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   26ae0:	4622      	mov	r2, r4
   26ae2:	4631      	mov	r1, r6
   26ae4:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   26ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   26aea:	f7ff bfba 	b.w	26a62 <ah>
}
   26aee:	bd70      	pop	{r4, r5, r6, pc}

00026af0 <send_cmd_status>:
{
   26af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26af4:	f04f 32ff 	mov.w	r2, #4294967295
{
   26af8:	4606      	mov	r6, r0
   26afa:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26afc:	f04f 33ff 	mov.w	r3, #4294967295
   26b00:	2100      	movs	r1, #0
   26b02:	200f      	movs	r0, #15
   26b04:	f7e2 f9ce 	bl	8ea4 <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   26b08:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   26b0a:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26b0e:	4604      	mov	r4, r0
   26b10:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   26b12:	2102      	movs	r1, #2
   26b14:	4640      	mov	r0, r8
   26b16:	f005 fac0 	bl	2c09a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26b1a:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   26b1c:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26b1e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   26b20:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   26b22:	4640      	mov	r0, r8
   26b24:	f005 fab9 	bl	2c09a <net_buf_simple_add>
	evt->ncmd = 1U;
   26b28:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   26b2a:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   26b2c:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   26b2e:	4620      	mov	r0, r4
}
   26b30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   26b34:	f7e1 bbf8 	b.w	8328 <bt_recv_prio>

00026b38 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   26b38:	f101 0320 	add.w	r3, r1, #32
   26b3c:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   26b3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   26b42:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   26b46:	428b      	cmp	r3, r1
   26b48:	d1f9      	bne.n	26b3e <sys_memcpy_swap.constprop.0+0x6>
}
   26b4a:	4770      	bx	lr

00026b4c <default_CSPRNG>:
{
   26b4c:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   26b4e:	f7ef f9e1 	bl	15f14 <bt_rand>
}
   26b52:	fab0 f080 	clz	r0, r0
   26b56:	0940      	lsrs	r0, r0, #5
   26b58:	bd08      	pop	{r3, pc}

00026b5a <bt_settings_decode_key>:
{
   26b5a:	b570      	push	{r4, r5, r6, lr}
   26b5c:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   26b5e:	2100      	movs	r1, #0
{
   26b60:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   26b62:	f7fe fa43 	bl	24fec <settings_name_next>
   26b66:	280d      	cmp	r0, #13
   26b68:	d118      	bne.n	26b9c <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   26b6a:	7b23      	ldrb	r3, [r4, #12]
   26b6c:	2b30      	cmp	r3, #48	; 0x30
   26b6e:	d111      	bne.n	26b94 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   26b70:	2300      	movs	r3, #0
   26b72:	702b      	strb	r3, [r5, #0]
   26b74:	f104 060c 	add.w	r6, r4, #12
   26b78:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   26b7a:	462a      	mov	r2, r5
   26b7c:	4620      	mov	r0, r4
   26b7e:	2301      	movs	r3, #1
   26b80:	2102      	movs	r1, #2
   26b82:	3402      	adds	r4, #2
   26b84:	f7fd fc1a 	bl	243bc <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   26b88:	42b4      	cmp	r4, r6
   26b8a:	f105 35ff 	add.w	r5, r5, #4294967295
   26b8e:	d1f4      	bne.n	26b7a <bt_settings_decode_key+0x20>
	return 0;
   26b90:	2000      	movs	r0, #0
}
   26b92:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   26b94:	2b31      	cmp	r3, #49	; 0x31
   26b96:	d101      	bne.n	26b9c <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   26b98:	2301      	movs	r3, #1
   26b9a:	e7ea      	b.n	26b72 <bt_settings_decode_key+0x18>
		return -EINVAL;
   26b9c:	f06f 0015 	mvn.w	r0, #21
   26ba0:	e7f7      	b.n	26b92 <bt_settings_decode_key+0x38>

00026ba2 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   26ba2:	f7de bcd3 	b.w	554c <settings_subsys_init>

00026ba6 <xor16>:
#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_HCI_CORE)
#define LOG_MODULE_NAME bt_aes_ccm
#include "common/log.h"

static inline void xor16(uint8_t *dst, const uint8_t *a, const uint8_t *b)
{
   26ba6:	b510      	push	{r4, lr}
	dst[0] = a[0] ^ b[0];
   26ba8:	780b      	ldrb	r3, [r1, #0]
   26baa:	7814      	ldrb	r4, [r2, #0]
   26bac:	4063      	eors	r3, r4
   26bae:	7003      	strb	r3, [r0, #0]
	dst[1] = a[1] ^ b[1];
   26bb0:	7854      	ldrb	r4, [r2, #1]
   26bb2:	784b      	ldrb	r3, [r1, #1]
   26bb4:	4063      	eors	r3, r4
   26bb6:	7043      	strb	r3, [r0, #1]
	dst[2] = a[2] ^ b[2];
   26bb8:	7894      	ldrb	r4, [r2, #2]
   26bba:	788b      	ldrb	r3, [r1, #2]
   26bbc:	4063      	eors	r3, r4
   26bbe:	7083      	strb	r3, [r0, #2]
	dst[3] = a[3] ^ b[3];
   26bc0:	78d4      	ldrb	r4, [r2, #3]
   26bc2:	78cb      	ldrb	r3, [r1, #3]
   26bc4:	4063      	eors	r3, r4
   26bc6:	70c3      	strb	r3, [r0, #3]
	dst[4] = a[4] ^ b[4];
   26bc8:	7914      	ldrb	r4, [r2, #4]
   26bca:	790b      	ldrb	r3, [r1, #4]
   26bcc:	4063      	eors	r3, r4
   26bce:	7103      	strb	r3, [r0, #4]
	dst[5] = a[5] ^ b[5];
   26bd0:	7954      	ldrb	r4, [r2, #5]
   26bd2:	794b      	ldrb	r3, [r1, #5]
   26bd4:	4063      	eors	r3, r4
   26bd6:	7143      	strb	r3, [r0, #5]
	dst[6] = a[6] ^ b[6];
   26bd8:	7994      	ldrb	r4, [r2, #6]
   26bda:	798b      	ldrb	r3, [r1, #6]
   26bdc:	4063      	eors	r3, r4
   26bde:	7183      	strb	r3, [r0, #6]
	dst[7] = a[7] ^ b[7];
   26be0:	79d4      	ldrb	r4, [r2, #7]
   26be2:	79cb      	ldrb	r3, [r1, #7]
   26be4:	4063      	eors	r3, r4
   26be6:	71c3      	strb	r3, [r0, #7]
	dst[8] = a[8] ^ b[8];
   26be8:	7a14      	ldrb	r4, [r2, #8]
   26bea:	7a0b      	ldrb	r3, [r1, #8]
   26bec:	4063      	eors	r3, r4
   26bee:	7203      	strb	r3, [r0, #8]
	dst[9] = a[9] ^ b[9];
   26bf0:	7a54      	ldrb	r4, [r2, #9]
   26bf2:	7a4b      	ldrb	r3, [r1, #9]
   26bf4:	4063      	eors	r3, r4
   26bf6:	7243      	strb	r3, [r0, #9]
	dst[10] = a[10] ^ b[10];
   26bf8:	7a8b      	ldrb	r3, [r1, #10]
   26bfa:	7a94      	ldrb	r4, [r2, #10]
   26bfc:	4063      	eors	r3, r4
   26bfe:	7283      	strb	r3, [r0, #10]
	dst[11] = a[11] ^ b[11];
   26c00:	7ad4      	ldrb	r4, [r2, #11]
   26c02:	7acb      	ldrb	r3, [r1, #11]
   26c04:	4063      	eors	r3, r4
   26c06:	72c3      	strb	r3, [r0, #11]
	dst[12] = a[12] ^ b[12];
   26c08:	7b14      	ldrb	r4, [r2, #12]
   26c0a:	7b0b      	ldrb	r3, [r1, #12]
   26c0c:	4063      	eors	r3, r4
   26c0e:	7303      	strb	r3, [r0, #12]
	dst[13] = a[13] ^ b[13];
   26c10:	7b54      	ldrb	r4, [r2, #13]
   26c12:	7b4b      	ldrb	r3, [r1, #13]
   26c14:	4063      	eors	r3, r4
   26c16:	7343      	strb	r3, [r0, #13]
	dst[14] = a[14] ^ b[14];
   26c18:	7b94      	ldrb	r4, [r2, #14]
   26c1a:	7b8b      	ldrb	r3, [r1, #14]
   26c1c:	4063      	eors	r3, r4
   26c1e:	7383      	strb	r3, [r0, #14]
	dst[15] = a[15] ^ b[15];
   26c20:	7bcb      	ldrb	r3, [r1, #15]
   26c22:	7bd2      	ldrb	r2, [r2, #15]
   26c24:	4053      	eors	r3, r2
   26c26:	73c3      	strb	r3, [r0, #15]
}
   26c28:	bd10      	pop	{r4, pc}

00026c2a <ccm_crypt>:
	return 0;
}

static int ccm_crypt(const uint8_t key[16], const uint8_t nonce[13],
		     const uint8_t *in_msg, uint8_t *out_msg, size_t msg_len)
{
   26c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c2e:	b089      	sub	sp, #36	; 0x24
   26c30:	4699      	mov	r9, r3
   26c32:	9d12      	ldr	r5, [sp, #72]	; 0x48
	blk_cnt = (msg_len + 15) / 16;
	if (!last_blk) {
		last_blk = 16U;
	}

	a_i[0] = 0x01;
   26c34:	2301      	movs	r3, #1
	blk_cnt = (msg_len + 15) / 16;
   26c36:	f105 060f 	add.w	r6, r5, #15
{
   26c3a:	4607      	mov	r7, r0
		last_blk = 16U;
   26c3c:	f015 050f 	ands.w	r5, r5, #15
{
   26c40:	4690      	mov	r8, r2
	memcpy(&a_i[1], nonce, 13);
   26c42:	eb0d 0003 	add.w	r0, sp, r3
   26c46:	f04f 020d 	mov.w	r2, #13
	blk_cnt = (msg_len + 15) / 16;
   26c4a:	ea4f 1616 	mov.w	r6, r6, lsr #4
		last_blk = 16U;
   26c4e:	bf08      	it	eq
   26c50:	2510      	moveq	r5, #16
	a_i[0] = 0x01;
   26c52:	f88d 3000 	strb.w	r3, [sp]
	memcpy(&a_i[1], nonce, 13);
   26c56:	f7ff fea4 	bl	269a2 <memcpy>

	for (j = 0; j < blk_cnt; j++) {
   26c5a:	b2b6      	uxth	r6, r6
   26c5c:	2400      	movs	r4, #0
		if (err) {
			return err;
		}

		/* Encrypted = Payload[0-15] ^ C_1 */
		if (j < blk_cnt - 1) {
   26c5e:	f106 3aff 	add.w	sl, r6, #4294967295
	for (j = 0; j < blk_cnt; j++) {
   26c62:	42b4      	cmp	r4, r6
   26c64:	d304      	bcc.n	26c70 <ccm_crypt+0x46>
				out_msg[(j * 16) + i] =
					in_msg[(j * 16) + i] ^ s_i[i];
			}
		}
	}
	return 0;
   26c66:	2100      	movs	r1, #0
}
   26c68:	4608      	mov	r0, r1
   26c6a:	b009      	add	sp, #36	; 0x24
   26c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dst[0] = val >> 8;
   26c70:	f104 0b01 	add.w	fp, r4, #1
   26c74:	f3cb 2307 	ubfx	r3, fp, #8, #8
		err = bt_encrypt_be(key, a_i, s_i);
   26c78:	4669      	mov	r1, sp
   26c7a:	aa04      	add	r2, sp, #16
   26c7c:	4638      	mov	r0, r7
   26c7e:	f88d 300e 	strb.w	r3, [sp, #14]
	dst[1] = val;
   26c82:	f88d b00f 	strb.w	fp, [sp, #15]
   26c86:	f7ef f94d 	bl	15f24 <bt_encrypt_be>
		if (err) {
   26c8a:	4601      	mov	r1, r0
   26c8c:	2800      	cmp	r0, #0
   26c8e:	d1eb      	bne.n	26c68 <ccm_crypt+0x3e>
		if (j < blk_cnt - 1) {
   26c90:	45a2      	cmp	sl, r4
   26c92:	eb08 1204 	add.w	r2, r8, r4, lsl #4
   26c96:	eb09 1004 	add.w	r0, r9, r4, lsl #4
   26c9a:	d904      	bls.n	26ca6 <ccm_crypt+0x7c>
			xor16(&out_msg[j * 16], s_i, &in_msg[j * 16]);
   26c9c:	a904      	add	r1, sp, #16
   26c9e:	f7ff ff82 	bl	26ba6 <xor16>
	for (j = 0; j < blk_cnt; j++) {
   26ca2:	465c      	mov	r4, fp
   26ca4:	e7dd      	b.n	26c62 <ccm_crypt+0x38>
   26ca6:	f10d 0c10 	add.w	ip, sp, #16
					in_msg[(j * 16) + i] ^ s_i[i];
   26caa:	f812 3b01 	ldrb.w	r3, [r2], #1
   26cae:	f81c 4b01 	ldrb.w	r4, [ip], #1
			for (i = 0; i < last_blk; i++) {
   26cb2:	3101      	adds	r1, #1
				out_msg[(j * 16) + i] =
   26cb4:	4063      	eors	r3, r4
			for (i = 0; i < last_blk; i++) {
   26cb6:	428d      	cmp	r5, r1
				out_msg[(j * 16) + i] =
   26cb8:	f800 3b01 	strb.w	r3, [r0], #1
			for (i = 0; i < last_blk; i++) {
   26cbc:	d8f5      	bhi.n	26caa <ccm_crypt+0x80>
   26cbe:	e7f0      	b.n	26ca2 <ccm_crypt+0x78>

00026cc0 <ccm_auth>:
{
   26cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cc4:	b08f      	sub	sp, #60	; 0x3c
		last_blk = 16U;
   26cc6:	f013 0a0f 	ands.w	sl, r3, #15
{
   26cca:	4680      	mov	r8, r0
   26ccc:	9201      	str	r2, [sp, #4]
   26cce:	461d      	mov	r5, r3
	memcpy(b + 1, nonce, 13);
   26cd0:	f04f 020d 	mov.w	r2, #13
	b[0] = 0x01;
   26cd4:	f04f 0301 	mov.w	r3, #1
	memcpy(b + 1, nonce, 13);
   26cd8:	f10d 0b08 	add.w	fp, sp, #8
   26cdc:	f10d 0009 	add.w	r0, sp, #9
	err = bt_encrypt_be(key, b, s0);
   26ce0:	f10d 0928 	add.w	r9, sp, #40	; 0x28
		last_blk = 16U;
   26ce4:	bf08      	it	eq
   26ce6:	f04f 0a10 	moveq.w	sl, #16
	b[0] = 0x01;
   26cea:	f88d 3008 	strb.w	r3, [sp, #8]
{
   26cee:	9c19      	ldr	r4, [sp, #100]	; 0x64
	memcpy(b + 1, nonce, 13);
   26cf0:	f7ff fe57 	bl	269a2 <memcpy>
	dst[0] = val >> 8;
   26cf4:	2300      	movs	r3, #0
	err = bt_encrypt_be(key, b, s0);
   26cf6:	464a      	mov	r2, r9
   26cf8:	4659      	mov	r1, fp
   26cfa:	4640      	mov	r0, r8
   26cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
   26d00:	f7ef f910 	bl	15f24 <bt_encrypt_be>
	if (err) {
   26d04:	4606      	mov	r6, r0
   26d06:	2800      	cmp	r0, #0
   26d08:	d15f      	bne.n	26dca <ccm_auth+0x10a>
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   26d0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   26d0c:	f88d 0016 	strb.w	r0, [sp, #22]
   26d10:	3b02      	subs	r3, #2
   26d12:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   26d16:	ea4f 0383 	mov.w	r3, r3, lsl #2
   26d1a:	bf14      	ite	ne
   26d1c:	2240      	movne	r2, #64	; 0x40
   26d1e:	2200      	moveq	r2, #0
   26d20:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   26d24:	4313      	orrs	r3, r2
   26d26:	f043 0301 	orr.w	r3, r3, #1
	err = bt_encrypt_be(key, b, X0);
   26d2a:	aa06      	add	r2, sp, #24
   26d2c:	4659      	mov	r1, fp
   26d2e:	4640      	mov	r0, r8
	b[0] = (((mic_size - 2) / 2) << 3) | ((!!aad_len) << 6) | 0x01;
   26d30:	f88d 3008 	strb.w	r3, [sp, #8]
	dst[1] = val;
   26d34:	f88d 5017 	strb.w	r5, [sp, #23]
	err = bt_encrypt_be(key, b, X0);
   26d38:	f7ef f8f4 	bl	15f24 <bt_encrypt_be>
	if (err) {
   26d3c:	4607      	mov	r7, r0
   26d3e:	bbb0      	cbnz	r0, 26dae <ccm_auth+0xee>
	if (aad_len) {
   26d40:	b3ac      	cbz	r4, 26dae <ccm_auth+0xee>
			b[i] = X0[i] ^ b[i];
   26d42:	f89d 1018 	ldrb.w	r1, [sp, #24]
   26d46:	f88d 1008 	strb.w	r1, [sp, #8]
   26d4a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   26d4e:	4061      	eors	r1, r4
		aad_len += sizeof(uint16_t);
   26d50:	3402      	adds	r4, #2
			b[i] = X0[i] ^ b[i];
   26d52:	f88d 1009 	strb.w	r1, [sp, #9]
		aad_len += sizeof(uint16_t);
   26d56:	b2e4      	uxtb	r4, r4
		while (aad_len > 16) {
   26d58:	2002      	movs	r0, #2
				b[i] = X0[i] ^ aad[j];
   26d5a:	aa06      	add	r2, sp, #24
		while (aad_len > 16) {
   26d5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   26d5e:	2c10      	cmp	r4, #16
   26d60:	eb03 0107 	add.w	r1, r3, r7
   26d64:	460b      	mov	r3, r1
   26d66:	d80a      	bhi.n	26d7e <ccm_auth+0xbe>
   26d68:	aa06      	add	r2, sp, #24
		for (; i < aad_len; i++, j++) {
   26d6a:	42a0      	cmp	r0, r4
   26d6c:	4621      	mov	r1, r4
   26d6e:	db30      	blt.n	26dd2 <ccm_auth+0x112>
		for (i = aad_len; i < 16; i++) {
   26d70:	290f      	cmp	r1, #15
   26d72:	dd36      	ble.n	26de2 <ccm_auth+0x122>
		err = bt_encrypt_be(key, b, X0);
   26d74:	a902      	add	r1, sp, #8
   26d76:	4640      	mov	r0, r8
   26d78:	f7ef f8d4 	bl	15f24 <bt_encrypt_be>
		if (err) {
   26d7c:	e017      	b.n	26dae <ccm_auth+0xee>
		while (aad_len > 16) {
   26d7e:	4601      	mov	r1, r0
				b[i] = X0[i] ^ aad[j];
   26d80:	f811 e002 	ldrb.w	lr, [r1, r2]
   26d84:	f813 cb01 	ldrb.w	ip, [r3], #1
   26d88:	ea8c 0c0e 	eor.w	ip, ip, lr
   26d8c:	f801 c00b 	strb.w	ip, [r1, fp]
				i++, j++;
   26d90:	3101      	adds	r1, #1
			} while (i < 16);
   26d92:	2910      	cmp	r1, #16
   26d94:	d1f4      	bne.n	26d80 <ccm_auth+0xc0>
   26d96:	f1c0 0010 	rsb	r0, r0, #16
   26d9a:	4407      	add	r7, r0
			err = bt_encrypt_be(key, b, X0);
   26d9c:	4659      	mov	r1, fp
   26d9e:	4640      	mov	r0, r8
   26da0:	f7ef f8c0 	bl	15f24 <bt_encrypt_be>
   26da4:	3c10      	subs	r4, #16
   26da6:	b2e4      	uxtb	r4, r4
			if (err) {
   26da8:	aa06      	add	r2, sp, #24
   26daa:	2800      	cmp	r0, #0
   26dac:	d0d6      	beq.n	26d5c <ccm_auth+0x9c>
	blk_cnt = (msg_len + 15) / 16;
   26dae:	350f      	adds	r5, #15
			memcpy(&b[i], &Xn[i], 16 - i);
   26db0:	ab06      	add	r3, sp, #24
	blk_cnt = (msg_len + 15) / 16;
   26db2:	2700      	movs	r7, #0
	for (j = 0; j < blk_cnt; j++) {
   26db4:	f3c5 150f 	ubfx	r5, r5, #4, #16
			memcpy(&b[i], &Xn[i], 16 - i);
   26db8:	eb03 040a 	add.w	r4, r3, sl
	for (j = 0; j < blk_cnt; j++) {
   26dbc:	42bd      	cmp	r5, r7
   26dbe:	dc15      	bgt.n	26dec <ccm_auth+0x12c>
	for (i = 0; i < mic_size; i++) {
   26dc0:	2300      	movs	r3, #0
		mic[i] = s0[i] ^ Xn[i];
   26dc2:	a906      	add	r1, sp, #24
	for (i = 0; i < mic_size; i++) {
   26dc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   26dc6:	4293      	cmp	r3, r2
   26dc8:	d13b      	bne.n	26e42 <ccm_auth+0x182>
}
   26dca:	4630      	mov	r0, r6
   26dcc:	b00f      	add	sp, #60	; 0x3c
   26dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			b[i] = X0[i] ^ aad[j];
   26dd2:	5c17      	ldrb	r7, [r2, r0]
   26dd4:	f813 1b01 	ldrb.w	r1, [r3], #1
   26dd8:	4079      	eors	r1, r7
   26dda:	af02      	add	r7, sp, #8
   26ddc:	5439      	strb	r1, [r7, r0]
		for (; i < aad_len; i++, j++) {
   26dde:	3001      	adds	r0, #1
   26de0:	e7c3      	b.n	26d6a <ccm_auth+0xaa>
			b[i] = X0[i];
   26de2:	a802      	add	r0, sp, #8
   26de4:	5c53      	ldrb	r3, [r2, r1]
   26de6:	5443      	strb	r3, [r0, r1]
		for (i = aad_len; i < 16; i++) {
   26de8:	3101      	adds	r1, #1
   26dea:	e7c1      	b.n	26d70 <ccm_auth+0xb0>
		if (j + 1 == blk_cnt) {
   26dec:	013a      	lsls	r2, r7, #4
   26dee:	9b01      	ldr	r3, [sp, #4]
   26df0:	3701      	adds	r7, #1
   26df2:	42bd      	cmp	r5, r7
   26df4:	441a      	add	r2, r3
   26df6:	d11f      	bne.n	26e38 <ccm_auth+0x178>
   26df8:	f10d 0c18 	add.w	ip, sp, #24
   26dfc:	a802      	add	r0, sp, #8
			for (i = 0; i < last_blk; i++) {
   26dfe:	2300      	movs	r3, #0
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   26e00:	f81c 1b01 	ldrb.w	r1, [ip], #1
   26e04:	f812 eb01 	ldrb.w	lr, [r2], #1
			for (i = 0; i < last_blk; i++) {
   26e08:	3301      	adds	r3, #1
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   26e0a:	ea81 010e 	eor.w	r1, r1, lr
			for (i = 0; i < last_blk; i++) {
   26e0e:	459a      	cmp	sl, r3
				b[i] = Xn[i] ^ cleartext_msg[(j * 16) + i];
   26e10:	f800 1b01 	strb.w	r1, [r0], #1
			for (i = 0; i < last_blk; i++) {
   26e14:	dcf4      	bgt.n	26e00 <ccm_auth+0x140>
			memcpy(&b[i], &Xn[i], 16 - i);
   26e16:	ab02      	add	r3, sp, #8
   26e18:	f1ca 0210 	rsb	r2, sl, #16
   26e1c:	4621      	mov	r1, r4
   26e1e:	eb03 000a 	add.w	r0, r3, sl
   26e22:	f7ff fdbe 	bl	269a2 <memcpy>
		err = bt_encrypt_be(key, b, Xn);
   26e26:	aa06      	add	r2, sp, #24
   26e28:	a902      	add	r1, sp, #8
   26e2a:	4640      	mov	r0, r8
   26e2c:	f7ef f87a 	bl	15f24 <bt_encrypt_be>
		if (err) {
   26e30:	2800      	cmp	r0, #0
   26e32:	d0c3      	beq.n	26dbc <ccm_auth+0xfc>
		err = bt_encrypt_be(key, b, Xn);
   26e34:	4606      	mov	r6, r0
   26e36:	e7c8      	b.n	26dca <ccm_auth+0x10a>
			xor16(b, Xn, &cleartext_msg[j * 16]);
   26e38:	a906      	add	r1, sp, #24
   26e3a:	a802      	add	r0, sp, #8
   26e3c:	f7ff feb3 	bl	26ba6 <xor16>
   26e40:	e7f1      	b.n	26e26 <ccm_auth+0x166>
		mic[i] = s0[i] ^ Xn[i];
   26e42:	5c58      	ldrb	r0, [r3, r1]
   26e44:	f819 2003 	ldrb.w	r2, [r9, r3]
   26e48:	4042      	eors	r2, r0
   26e4a:	981a      	ldr	r0, [sp, #104]	; 0x68
   26e4c:	54c2      	strb	r2, [r0, r3]
	for (i = 0; i < mic_size; i++) {
   26e4e:	3301      	adds	r3, #1
   26e50:	e7b8      	b.n	26dc4 <ccm_auth+0x104>

00026e52 <bt_ccm_decrypt>:

int bt_ccm_decrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *enc_msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   26e52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e56:	b089      	sub	sp, #36	; 0x24
   26e58:	e9dd ba13 	ldrd	fp, sl, [sp, #76]	; 0x4c
	uint8_t mic[16];

	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   26e5c:	f5bb 4f7f 	cmp.w	fp, #65280	; 0xff00
{
   26e60:	9e15      	ldr	r6, [sp, #84]	; 0x54
   26e62:	4607      	mov	r7, r0
   26e64:	4688      	mov	r8, r1
   26e66:	4615      	mov	r5, r2
   26e68:	461c      	mov	r4, r3
	if (aad_len >= 0xff00 || mic_size > sizeof(mic)) {
   26e6a:	d21e      	bcs.n	26eaa <bt_ccm_decrypt+0x58>
   26e6c:	2e10      	cmp	r6, #16
   26e6e:	d81c      	bhi.n	26eaa <bt_ccm_decrypt+0x58>
		return -EINVAL;
	}

	ccm_crypt(key, nonce, enc_msg, out_msg, msg_len);
   26e70:	9300      	str	r3, [sp, #0]
   26e72:	4653      	mov	r3, sl
   26e74:	f7ff fed9 	bl	26c2a <ccm_crypt>

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   26e78:	f10d 0910 	add.w	r9, sp, #16
   26e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   26e7e:	9300      	str	r3, [sp, #0]
   26e80:	4652      	mov	r2, sl
   26e82:	4623      	mov	r3, r4
   26e84:	4641      	mov	r1, r8
   26e86:	e9cd b901 	strd	fp, r9, [sp, #4]
   26e8a:	9603      	str	r6, [sp, #12]
   26e8c:	4638      	mov	r0, r7
   26e8e:	f7ff ff17 	bl	26cc0 <ccm_auth>

	if (memcmp(mic, enc_msg + msg_len, mic_size)) {
   26e92:	4632      	mov	r2, r6
   26e94:	1929      	adds	r1, r5, r4
   26e96:	4648      	mov	r0, r9
   26e98:	f7ff fd73 	bl	26982 <memcmp>
   26e9c:	2800      	cmp	r0, #0
		return -EBADMSG;
   26e9e:	bf18      	it	ne
   26ea0:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}

	return 0;
}
   26ea4:	b009      	add	sp, #36	; 0x24
   26ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EINVAL;
   26eaa:	f06f 0015 	mvn.w	r0, #21
   26eae:	e7f9      	b.n	26ea4 <bt_ccm_decrypt+0x52>

00026eb0 <bt_ccm_encrypt>:

int bt_ccm_encrypt(const uint8_t key[16], uint8_t nonce[13], const uint8_t *msg,
		   size_t msg_len, const uint8_t *aad, size_t aad_len,
		   uint8_t *out_msg, size_t mic_size)
{
   26eb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   26eb4:	4617      	mov	r7, r2
   26eb6:	e9dd 280b 	ldrd	r2, r8, [sp, #44]	; 0x2c
	BT_DBG("nonce %s", bt_hex(nonce, 13));
	BT_DBG("msg (len %zu) %s", msg_len, bt_hex(msg, msg_len));
	BT_DBG("aad_len %zu mic_size %zu", aad_len, mic_size);

	/* Unsupported AAD size */
	if (aad_len >= 0xff00 || mic_size > 16) {
   26eba:	f5b2 4f7f 	cmp.w	r2, #65280	; 0xff00
{
   26ebe:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
   26ec2:	4605      	mov	r5, r0
   26ec4:	460e      	mov	r6, r1
   26ec6:	461c      	mov	r4, r3
	uint8_t *mic = out_msg + msg_len;
   26ec8:	eb08 0e03 	add.w	lr, r8, r3
	if (aad_len >= 0xff00 || mic_size > 16) {
   26ecc:	d215      	bcs.n	26efa <bt_ccm_encrypt+0x4a>
   26ece:	f1bc 0f10 	cmp.w	ip, #16
   26ed2:	d812      	bhi.n	26efa <bt_ccm_encrypt+0x4a>
		return -EINVAL;
	}

	ccm_auth(key, nonce, out_msg, msg_len, aad, aad_len, mic, mic_size);
   26ed4:	9201      	str	r2, [sp, #4]
   26ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26ed8:	9200      	str	r2, [sp, #0]
   26eda:	e9cd ec02 	strd	lr, ip, [sp, #8]
   26ede:	4642      	mov	r2, r8
   26ee0:	f7ff feee 	bl	26cc0 <ccm_auth>

	ccm_crypt(key, nonce, msg, out_msg, msg_len);
   26ee4:	9400      	str	r4, [sp, #0]
   26ee6:	4643      	mov	r3, r8
   26ee8:	463a      	mov	r2, r7
   26eea:	4631      	mov	r1, r6
   26eec:	4628      	mov	r0, r5
   26eee:	f7ff fe9c 	bl	26c2a <ccm_crypt>

	return 0;
   26ef2:	2000      	movs	r0, #0
}
   26ef4:	b004      	add	sp, #16
   26ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   26efa:	f06f 0015 	mvn.w	r0, #21
   26efe:	e7f9      	b.n	26ef4 <bt_ccm_encrypt+0x44>

00026f00 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26f00:	b510      	push	{r4, lr}
   26f02:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   26f04:	7801      	ldrb	r1, [r0, #0]
   26f06:	7822      	ldrb	r2, [r4, #0]
   26f08:	428a      	cmp	r2, r1
{
   26f0a:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   26f0c:	d00e      	beq.n	26f2c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   26f0e:	4669      	mov	r1, sp
   26f10:	f7e0 f888 	bl	7024 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   26f14:	a905      	add	r1, sp, #20
   26f16:	4620      	mov	r0, r4
   26f18:	f7e0 f884 	bl	7024 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   26f1c:	2210      	movs	r2, #16
   26f1e:	f10d 0115 	add.w	r1, sp, #21
   26f22:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26f26:	f7ff fd2c 	bl	26982 <memcmp>
   26f2a:	e007      	b.n	26f3c <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   26f2c:	2a01      	cmp	r2, #1
   26f2e:	d007      	beq.n	26f40 <bt_uuid_cmp+0x40>
   26f30:	2a02      	cmp	r2, #2
   26f32:	d008      	beq.n	26f46 <bt_uuid_cmp+0x46>
   26f34:	b95a      	cbnz	r2, 26f4e <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26f36:	8840      	ldrh	r0, [r0, #2]
   26f38:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26f3a:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   26f3c:	b00a      	add	sp, #40	; 0x28
   26f3e:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26f40:	6840      	ldr	r0, [r0, #4]
   26f42:	6863      	ldr	r3, [r4, #4]
   26f44:	e7f9      	b.n	26f3a <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26f46:	2210      	movs	r2, #16
   26f48:	1c61      	adds	r1, r4, #1
   26f4a:	3001      	adds	r0, #1
   26f4c:	e7eb      	b.n	26f26 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   26f4e:	f06f 0015 	mvn.w	r0, #21
   26f52:	e7f3      	b.n	26f3c <bt_uuid_cmp+0x3c>

00026f54 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   26f54:	2a04      	cmp	r2, #4
{
   26f56:	b538      	push	{r3, r4, r5, lr}
   26f58:	460c      	mov	r4, r1
	switch (data_len) {
   26f5a:	d00d      	beq.n	26f78 <bt_uuid_create+0x24>
   26f5c:	2a10      	cmp	r2, #16
   26f5e:	d019      	beq.n	26f94 <bt_uuid_create+0x40>
   26f60:	2a02      	cmp	r2, #2
   26f62:	f04f 0300 	mov.w	r3, #0
   26f66:	d11b      	bne.n	26fa0 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   26f68:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   26f6a:	784a      	ldrb	r2, [r1, #1]
   26f6c:	780b      	ldrb	r3, [r1, #0]
   26f6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26f72:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   26f74:	2001      	movs	r0, #1
}
   26f76:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   26f78:	2301      	movs	r3, #1
   26f7a:	7003      	strb	r3, [r0, #0]
   26f7c:	78a2      	ldrb	r2, [r4, #2]
   26f7e:	78c9      	ldrb	r1, [r1, #3]
   26f80:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26f82:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   26f86:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26f88:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   26f8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   26f90:	6042      	str	r2, [r0, #4]
		break;
   26f92:	e7ef      	b.n	26f74 <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   26f94:	2302      	movs	r3, #2
   26f96:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   26f9a:	f7ff fd02 	bl	269a2 <memcpy>
		break;
   26f9e:	e7e9      	b.n	26f74 <bt_uuid_create+0x20>
	switch (data_len) {
   26fa0:	4618      	mov	r0, r3
   26fa2:	e7e8      	b.n	26f76 <bt_uuid_create+0x22>

00026fa4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26fa4:	280f      	cmp	r0, #15
   26fa6:	d806      	bhi.n	26fb6 <bt_hci_evt_get_flags+0x12>
   26fa8:	280d      	cmp	r0, #13
   26faa:	d80b      	bhi.n	26fc4 <bt_hci_evt_get_flags+0x20>
   26fac:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   26fae:	bf14      	ite	ne
   26fb0:	2002      	movne	r0, #2
   26fb2:	2003      	moveq	r0, #3
   26fb4:	4770      	bx	lr
	switch (evt) {
   26fb6:	2813      	cmp	r0, #19
   26fb8:	d004      	beq.n	26fc4 <bt_hci_evt_get_flags+0x20>
   26fba:	281a      	cmp	r0, #26
   26fbc:	bf14      	ite	ne
   26fbe:	2002      	movne	r0, #2
   26fc0:	2001      	moveq	r0, #1
   26fc2:	4770      	bx	lr
   26fc4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   26fc6:	4770      	bx	lr

00026fc8 <handle_event>:
{
   26fc8:	b410      	push	{r4}
   26fca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   26fce:	4604      	mov	r4, r0
   26fd0:	4608      	mov	r0, r1
		if (handler->event != event) {
   26fd2:	7811      	ldrb	r1, [r2, #0]
   26fd4:	42a1      	cmp	r1, r4
   26fd6:	d004      	beq.n	26fe2 <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   26fd8:	3208      	adds	r2, #8
   26fda:	429a      	cmp	r2, r3
   26fdc:	d1f9      	bne.n	26fd2 <handle_event+0xa>
}
   26fde:	bc10      	pop	{r4}
   26fe0:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   26fe2:	8981      	ldrh	r1, [r0, #12]
   26fe4:	7853      	ldrb	r3, [r2, #1]
   26fe6:	4299      	cmp	r1, r3
   26fe8:	d3f9      	bcc.n	26fde <handle_event+0x16>
		handler->handler(buf);
   26fea:	6853      	ldr	r3, [r2, #4]
}
   26fec:	bc10      	pop	{r4}
		handler->handler(buf);
   26fee:	4718      	bx	r3

00026ff0 <hci_data_buf_overflow>:
}
   26ff0:	4770      	bx	lr

00026ff2 <get_adv_channel_map>:
{
   26ff2:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   26ff4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   26ff8:	bf0c      	ite	eq
   26ffa:	2007      	moveq	r0, #7
   26ffc:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   26ffe:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   27000:	bf48      	it	mi
   27002:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   27006:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   27008:	bf48      	it	mi
   2700a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2700e:	4770      	bx	lr

00027010 <atomic_and>:
{
   27010:	4603      	mov	r3, r0
}
   27012:	f3bf 8f5b 	dmb	ish
   27016:	e853 0f00 	ldrex	r0, [r3]
   2701a:	ea00 0201 	and.w	r2, r0, r1
   2701e:	e843 2c00 	strex	ip, r2, [r3]
   27022:	f1bc 0f00 	cmp.w	ip, #0
   27026:	d1f6      	bne.n	27016 <atomic_and+0x6>
   27028:	f3bf 8f5b 	dmb	ish
   2702c:	4770      	bx	lr

0002702e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2702e:	f3bf 8f5b 	dmb	ish
   27032:	6800      	ldr	r0, [r0, #0]
   27034:	f3bf 8f5b 	dmb	ish
}
   27038:	4770      	bx	lr

0002703a <atomic_test_bit>:
{
   2703a:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2703c:	f7ff fff7 	bl	2702e <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27040:	4108      	asrs	r0, r1
}
   27042:	f000 0001 	and.w	r0, r0, #1
   27046:	bd08      	pop	{r3, pc}

00027048 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   27048:	2207      	movs	r2, #7
   2704a:	f7ff bc9a 	b.w	26982 <memcmp>

0002704e <bt_addr_copy>:
	memcpy(dst, src, sizeof(*dst));
   2704e:	2206      	movs	r2, #6
   27050:	f7ff bca7 	b.w	269a2 <memcpy>

00027054 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   27054:	2207      	movs	r2, #7
   27056:	f7ff bca4 	b.w	269a2 <memcpy>

0002705a <set_data_add>:
{
   2705a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2705e:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
   27062:	4607      	mov	r7, r0
   27064:	4689      	mov	r9, r1
   27066:	4614      	mov	r4, r2
	uint8_t set_data_len = 0;
   27068:	2500      	movs	r5, #0
				ssize_t shortened_len = set_data_len_max -
   2706a:	1e8b      	subs	r3, r1, #2
		for (size_t j = 0; j < ad[i].len; j++) {
   2706c:	f8d4 8000 	ldr.w	r8, [r4]
   27070:	f04f 0b00 	mov.w	fp, #0
   27074:	6862      	ldr	r2, [r4, #4]
   27076:	455a      	cmp	r2, fp
   27078:	d808      	bhi.n	2708c <set_data_add+0x32>
	for (size_t i = 0; i < ad_len; i++) {
   2707a:	3408      	adds	r4, #8
   2707c:	45a2      	cmp	sl, r4
   2707e:	d1f5      	bne.n	2706c <set_data_add+0x12>
	*data_len = set_data_len;
   27080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   27082:	2000      	movs	r0, #0
	*data_len = set_data_len;
   27084:	701d      	strb	r5, [r3, #0]
}
   27086:	b003      	add	sp, #12
   27088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = data[j].data_len;
   2708c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   27090:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   27094:	1ca8      	adds	r0, r5, #2
   27096:	1881      	adds	r1, r0, r2
   27098:	4549      	cmp	r1, r9
   2709a:	d908      	bls.n	270ae <set_data_add+0x54>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   2709c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   270a0:	eba3 0205 	sub.w	r2, r3, r5
				if (!(type == BT_DATA_NAME_COMPLETE &&
   270a4:	d11a      	bne.n	270dc <set_data_add+0x82>
   270a6:	2a00      	cmp	r2, #0
   270a8:	dd18      	ble.n	270dc <set_data_add+0x82>
				type = BT_DATA_NAME_SHORTENED;
   270aa:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   270ae:	b2d6      	uxtb	r6, r2
   270b0:	1c71      	adds	r1, r6, #1
   270b2:	5579      	strb	r1, [r7, r5]
   270b4:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   270b6:	b2c9      	uxtb	r1, r1
			set_data_len += len;
   270b8:	3602      	adds	r6, #2
			set_data[set_data_len++] = type;
   270ba:	f807 c001 	strb.w	ip, [r7, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   270be:	fa57 f080 	uxtab	r0, r7, r0
   270c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   270c6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   270c8:	4435      	add	r5, r6
			memcpy(&set_data[set_data_len], data[j].data, len);
   270ca:	f7ff fc6a 	bl	269a2 <memcpy>
			set_data_len += len;
   270ce:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   270d0:	9b01      	ldr	r3, [sp, #4]
   270d2:	f10b 0b01 	add.w	fp, fp, #1
   270d6:	f108 0808 	add.w	r8, r8, #8
   270da:	e7cb      	b.n	27074 <set_data_add+0x1a>
					return -EINVAL;
   270dc:	f06f 0015 	mvn.w	r0, #21
   270e0:	e7d1      	b.n	27086 <set_data_add+0x2c>

000270e2 <atomic_or>:
{
   270e2:	4603      	mov	r3, r0
}
   270e4:	f3bf 8f5b 	dmb	ish
   270e8:	e853 0f00 	ldrex	r0, [r3]
   270ec:	ea40 0201 	orr.w	r2, r0, r1
   270f0:	e843 2c00 	strex	ip, r2, [r3]
   270f4:	f1bc 0f00 	cmp.w	ip, #0
   270f8:	d1f6      	bne.n	270e8 <atomic_or+0x6>
   270fa:	f3bf 8f5b 	dmb	ish
   270fe:	4770      	bx	lr

00027100 <atomic_test_and_set_bit>:
{
   27100:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   27102:	2301      	movs	r3, #1
   27104:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   27108:	f7ff ffeb 	bl	270e2 <atomic_or>
	return (old & mask) != 0;
   2710c:	4201      	tst	r1, r0
}
   2710e:	bf14      	ite	ne
   27110:	2001      	movne	r0, #1
   27112:	2000      	moveq	r0, #0
   27114:	bd08      	pop	{r3, pc}

00027116 <atomic_set_bit_to>:
{
   27116:	460b      	mov	r3, r1
   27118:	b410      	push	{r4}
   2711a:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2711c:	f001 041f 	and.w	r4, r1, #31
   27120:	2101      	movs	r1, #1
   27122:	40a1      	lsls	r1, r4
	if (val) {
   27124:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   27128:	b112      	cbz	r2, 27130 <atomic_set_bit_to+0x1a>
}
   2712a:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2712c:	f7ff bfd9 	b.w	270e2 <atomic_or>
}
   27130:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27132:	43c9      	mvns	r1, r1
   27134:	f7ff bf6c 	b.w	27010 <atomic_and>

00027138 <hci_hardware_error>:
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   27138:	2101      	movs	r1, #1
   2713a:	3008      	adds	r0, #8
   2713c:	f005 b829 	b.w	2c192 <net_buf_simple_pull_mem>

00027140 <le_data_len_change>:
{
   27140:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   27142:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   27144:	8818      	ldrh	r0, [r3, #0]
   27146:	f7e2 f953 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
   2714a:	b118      	cbz	r0, 27154 <le_data_len_change+0x14>
}
   2714c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   27150:	f000 bc18 	b.w	27984 <bt_conn_unref>
}
   27154:	bd08      	pop	{r3, pc}

00027156 <hci_disconn_complete_prio>:
{
   27156:	b510      	push	{r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   27158:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   2715a:	781a      	ldrb	r2, [r3, #0]
   2715c:	b96a      	cbnz	r2, 2717a <hci_disconn_complete_prio+0x24>
	conn = bt_conn_lookup_handle(handle);
   2715e:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   27162:	f7e2 f945 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
   27166:	4604      	mov	r4, r0
   27168:	b138      	cbz	r0, 2717a <hci_disconn_complete_prio+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   2716a:	2101      	movs	r1, #1
   2716c:	f7e2 f98a 	bl	9484 <bt_conn_set_state>
	bt_conn_unref(conn);
   27170:	4620      	mov	r0, r4
}
   27172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   27176:	f000 bc05 	b.w	27984 <bt_conn_unref>
}
   2717a:	bd10      	pop	{r4, pc}

0002717c <hci_disconn_complete>:
{
   2717c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   2717e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   27180:	7835      	ldrb	r5, [r6, #0]
   27182:	b985      	cbnz	r5, 271a6 <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   27184:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   27188:	f7e2 f932 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
   2718c:	4604      	mov	r4, r0
   2718e:	b150      	cbz	r0, 271a6 <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   27190:	78f3      	ldrb	r3, [r6, #3]
   27192:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27194:	4629      	mov	r1, r5
   27196:	f7e2 f975 	bl	9484 <bt_conn_set_state>
	conn->handle = 0U;
   2719a:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   2719c:	4620      	mov	r0, r4
}
   2719e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   271a2:	f000 bbef 	b.w	27984 <bt_conn_unref>
}
   271a6:	bd70      	pop	{r4, r5, r6, pc}

000271a8 <le_conn_update_complete>:
{
   271a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   271aa:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   271ac:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   271b0:	f7e2 f91e 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
   271b4:	4604      	mov	r4, r0
   271b6:	b1c0      	cbz	r0, 271ea <le_conn_update_complete+0x42>
	if (!evt->status) {
   271b8:	782b      	ldrb	r3, [r5, #0]
   271ba:	b9c3      	cbnz	r3, 271ee <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   271bc:	792a      	ldrb	r2, [r5, #4]
   271be:	78eb      	ldrb	r3, [r5, #3]
   271c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   271c4:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   271c8:	79aa      	ldrb	r2, [r5, #6]
   271ca:	796b      	ldrb	r3, [r5, #5]
   271cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   271d0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   271d4:	79eb      	ldrb	r3, [r5, #7]
   271d6:	7a2a      	ldrb	r2, [r5, #8]
   271d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   271dc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   271e0:	f7e1 ffb4 	bl	914c <notify_le_param_updated>
	bt_conn_unref(conn);
   271e4:	4620      	mov	r0, r4
   271e6:	f000 fbcd 	bl	27984 <bt_conn_unref>
}
   271ea:	b003      	add	sp, #12
   271ec:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   271ee:	2b1a      	cmp	r3, #26
   271f0:	d1f8      	bne.n	271e4 <le_conn_update_complete+0x3c>
   271f2:	78c3      	ldrb	r3, [r0, #3]
   271f4:	2b01      	cmp	r3, #1
   271f6:	d1f5      	bne.n	271e4 <le_conn_update_complete+0x3c>
		   !atomic_test_and_set_bit(conn->flags,
   271f8:	210a      	movs	r1, #10
   271fa:	3004      	adds	r0, #4
   271fc:	f7ff ff80 	bl	27100 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   27200:	2800      	cmp	r0, #0
   27202:	d1ef      	bne.n	271e4 <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   27204:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   27208:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   2720a:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   2720c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   27210:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   27212:	4620      	mov	r0, r4
   27214:	f7e2 fba8 	bl	9968 <bt_l2cap_update_conn_param>
   27218:	e7e4      	b.n	271e4 <le_conn_update_complete+0x3c>

0002721a <update_sec_level>:
	if (!conn->encrypt) {
   2721a:	7ac3      	ldrb	r3, [r0, #11]
   2721c:	b913      	cbnz	r3, 27224 <update_sec_level+0xa>
		conn->sec_level = BT_SECURITY_L1;
   2721e:	2301      	movs	r3, #1
   27220:	7243      	strb	r3, [r0, #9]
		return;
   27222:	4770      	bx	lr
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   27224:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   27228:	b193      	cbz	r3, 27250 <update_sec_level+0x36>
   2722a:	7b5a      	ldrb	r2, [r3, #13]
   2722c:	07d1      	lsls	r1, r2, #31
   2722e:	d50f      	bpl.n	27250 <update_sec_level+0x36>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   27230:	06d2      	lsls	r2, r2, #27
   27232:	d50b      	bpl.n	2724c <update_sec_level+0x32>
   27234:	7b1b      	ldrb	r3, [r3, #12]
   27236:	2b10      	cmp	r3, #16
   27238:	d108      	bne.n	2724c <update_sec_level+0x32>
			conn->sec_level = BT_SECURITY_L4;
   2723a:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2723c:	7243      	strb	r3, [r0, #9]
	if (conn->required_sec_level > conn->sec_level) {
   2723e:	7a82      	ldrb	r2, [r0, #10]
   27240:	7a43      	ldrb	r3, [r0, #9]
   27242:	429a      	cmp	r2, r3
   27244:	d906      	bls.n	27254 <update_sec_level+0x3a>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
   27246:	2105      	movs	r1, #5
   27248:	f000 bbb9 	b.w	279be <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
   2724c:	2303      	movs	r3, #3
   2724e:	e7f5      	b.n	2723c <update_sec_level+0x22>
		conn->sec_level = BT_SECURITY_L2;
   27250:	2302      	movs	r3, #2
   27252:	e7f3      	b.n	2723c <update_sec_level+0x22>
}
   27254:	4770      	bx	lr

00027256 <hci_vendor_event>:
   27256:	4770      	bx	lr

00027258 <sys_put_le64>:
	dst[1] = val >> 8;
   27258:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2725c:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2725e:	0e00      	lsrs	r0, r0, #24
   27260:	7053      	strb	r3, [r2, #1]
   27262:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   27264:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   27266:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2726a:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2726c:	7093      	strb	r3, [r2, #2]
   2726e:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   27270:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   27272:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   27274:	71d1      	strb	r1, [r2, #7]
}
   27276:	4770      	bx	lr

00027278 <le_ltk_request>:
{
   27278:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   2727a:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   2727c:	8826      	ldrh	r6, [r4, #0]
{
   2727e:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   27280:	b2b0      	uxth	r0, r6
   27282:	f7e2 f8b5 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
   27286:	4605      	mov	r5, r0
   27288:	b318      	cbz	r0, 272d2 <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   2728a:	af02      	add	r7, sp, #8
   2728c:	f8d4 2002 	ldr.w	r2, [r4, #2]
   27290:	f8d4 3006 	ldr.w	r3, [r4, #6]
   27294:	9701      	str	r7, [sp, #4]
   27296:	8961      	ldrh	r1, [r4, #10]
   27298:	9100      	str	r1, [sp, #0]
   2729a:	f002 f963 	bl	29564 <bt_smp_request_ltk>
   2729e:	b1d0      	cbz	r0, 272d6 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   272a0:	2112      	movs	r1, #18
   272a2:	f242 001a 	movw	r0, #8218	; 0x201a
   272a6:	f7e0 f9ed 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   272aa:	4604      	mov	r4, r0
   272ac:	b170      	cbz	r0, 272cc <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   272ae:	2112      	movs	r1, #18
   272b0:	3008      	adds	r0, #8
   272b2:	f004 fef2 	bl	2c09a <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   272b6:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   272b8:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   272bc:	2210      	movs	r2, #16
   272be:	f7ff fb70 	bl	269a2 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   272c2:	4621      	mov	r1, r4
   272c4:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   272c8:	f7e0 fa14 	bl	76f4 <bt_hci_cmd_send>
	bt_conn_unref(conn);
   272cc:	4628      	mov	r0, r5
   272ce:	f000 fb59 	bl	27984 <bt_conn_unref>
}
   272d2:	b007      	add	sp, #28
   272d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   272d6:	2102      	movs	r1, #2
   272d8:	f242 001b 	movw	r0, #8219	; 0x201b
   272dc:	f7e0 f9d2 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   272e0:	4604      	mov	r4, r0
   272e2:	2800      	cmp	r0, #0
   272e4:	d0f2      	beq.n	272cc <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   272e6:	2102      	movs	r1, #2
   272e8:	3008      	adds	r0, #8
   272ea:	f004 fed6 	bl	2c09a <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   272ee:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   272f0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   272f2:	f242 001b 	movw	r0, #8219	; 0x201b
   272f6:	e7e7      	b.n	272c8 <le_ltk_request+0x50>

000272f8 <le_conn_param_neg_reply>:
{
   272f8:	b570      	push	{r4, r5, r6, lr}
   272fa:	4606      	mov	r6, r0
   272fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   272fe:	f242 0021 	movw	r0, #8225	; 0x2021
   27302:	2103      	movs	r1, #3
   27304:	f7e0 f9be 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   27308:	4604      	mov	r4, r0
   2730a:	b160      	cbz	r0, 27326 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
   2730c:	2103      	movs	r1, #3
   2730e:	3008      	adds	r0, #8
   27310:	f004 fec3 	bl	2c09a <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   27314:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   27316:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   27318:	4621      	mov	r1, r4
   2731a:	f242 0021 	movw	r0, #8225	; 0x2021
}
   2731e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   27322:	f7e0 b9e7 	b.w	76f4 <bt_hci_cmd_send>
}
   27326:	bd70      	pop	{r4, r5, r6, pc}

00027328 <le_conn_param_req>:
{
   27328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   2732a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   2732c:	78d9      	ldrb	r1, [r3, #3]
   2732e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   27330:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   27332:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   27336:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   2733a:	7959      	ldrb	r1, [r3, #5]
   2733c:	791a      	ldrb	r2, [r3, #4]
   2733e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   27342:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   27346:	799a      	ldrb	r2, [r3, #6]
   27348:	79d9      	ldrb	r1, [r3, #7]
   2734a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2734e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   27352:	7a1a      	ldrb	r2, [r3, #8]
   27354:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   27356:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   27358:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   2735c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   2735e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   27362:	f7e2 f845 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
   27366:	4606      	mov	r6, r0
   27368:	b928      	cbnz	r0, 27376 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   2736a:	2102      	movs	r1, #2
   2736c:	4620      	mov	r0, r4
   2736e:	f7ff ffc3 	bl	272f8 <le_conn_param_neg_reply>
}
   27372:	b003      	add	sp, #12
   27374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   27376:	4669      	mov	r1, sp
   27378:	f7e1 ff1c 	bl	91b4 <le_param_req>
   2737c:	b938      	cbnz	r0, 2738e <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   2737e:	211e      	movs	r1, #30
   27380:	4620      	mov	r0, r4
   27382:	f7ff ffb9 	bl	272f8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   27386:	4630      	mov	r0, r6
   27388:	f000 fafc 	bl	27984 <bt_conn_unref>
   2738c:	e7f1      	b.n	27372 <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   2738e:	210e      	movs	r1, #14
   27390:	f242 0020 	movw	r0, #8224	; 0x2020
   27394:	f7e0 f976 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   27398:	4605      	mov	r5, r0
   2739a:	2800      	cmp	r0, #0
   2739c:	d0f3      	beq.n	27386 <le_conn_param_req+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
   2739e:	210e      	movs	r1, #14
   273a0:	3008      	adds	r0, #8
   273a2:	f004 fe7a 	bl	2c09a <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   273a6:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
   273a8:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   273aa:	2100      	movs	r1, #0
   273ac:	f7ff fb24 	bl	269f8 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   273b0:	f8bd 3000 	ldrh.w	r3, [sp]
   273b4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   273b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   273ba:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   273bc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   273c0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   273c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   273c6:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   273c8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   273ca:	4629      	mov	r1, r5
   273cc:	f242 0020 	movw	r0, #8224	; 0x2020
   273d0:	f7e0 f990 	bl	76f4 <bt_hci_cmd_send>
   273d4:	e7d7      	b.n	27386 <le_conn_param_req+0x5e>

000273d6 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   273d6:	f100 0214 	add.w	r2, r0, #20
{
   273da:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   273dc:	2106      	movs	r1, #6
{
   273de:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   273e0:	4610      	mov	r0, r2
   273e2:	f7ff fe2a 	bl	2703a <atomic_test_bit>
   273e6:	b150      	cbz	r0, 273fe <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   273e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   273ec:	4610      	mov	r0, r2
   273ee:	f7ff fe78 	bl	270e2 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   273f2:	4620      	mov	r0, r4
   273f4:	2100      	movs	r1, #0
}
   273f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   273fa:	f7e0 baa5 	b.w	7948 <set_le_adv_enable_legacy>
}
   273fe:	bd10      	pop	{r4, pc}

00027400 <adv_unpause_enabled>:
{
   27400:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27402:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   27406:	4604      	mov	r4, r0
   27408:	3014      	adds	r0, #20
   2740a:	f7ff fe01 	bl	27010 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2740e:	0483      	lsls	r3, r0, #18
   27410:	d505      	bpl.n	2741e <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   27412:	4620      	mov	r0, r4
   27414:	2101      	movs	r1, #1
}
   27416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   2741a:	f7e0 ba95 	b.w	7948 <set_le_adv_enable_legacy>
}
   2741e:	bd10      	pop	{r4, pc}

00027420 <hci_le_read_max_data_len>:
{
   27420:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27422:	4606      	mov	r6, r0
   27424:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   27426:	aa01      	add	r2, sp, #4
   27428:	2100      	movs	r1, #0
   2742a:	f242 002f 	movw	r0, #8239	; 0x202f
   2742e:	f7e0 f983 	bl	7738 <bt_hci_cmd_send_sync>
	if (err) {
   27432:	4604      	mov	r4, r0
   27434:	b948      	cbnz	r0, 2744a <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   27436:	9801      	ldr	r0, [sp, #4]
   27438:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   2743a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   2743e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   27440:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   27444:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   27446:	f7f8 fca1 	bl	1fd8c <net_buf_unref>
}
   2744a:	4620      	mov	r0, r4
   2744c:	b002      	add	sp, #8
   2744e:	bd70      	pop	{r4, r5, r6, pc}

00027450 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   27450:	7a03      	ldrb	r3, [r0, #8]
   27452:	075b      	lsls	r3, r3, #29
{
   27454:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   27456:	d505      	bpl.n	27464 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   27458:	4601      	mov	r1, r0
   2745a:	322a      	adds	r2, #42	; 0x2a
   2745c:	f811 0b01 	ldrb.w	r0, [r1], #1
   27460:	f7e0 bb44 	b.w	7aec <hci_id_add>
}
   27464:	4770      	bx	lr

00027466 <addr_res_enable>:
{
   27466:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   27468:	2101      	movs	r1, #1
{
   2746a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2746c:	f242 002d 	movw	r0, #8237	; 0x202d
   27470:	f7e0 f908 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   27474:	4604      	mov	r4, r0
   27476:	b158      	cbz	r0, 27490 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   27478:	4629      	mov	r1, r5
   2747a:	3008      	adds	r0, #8
   2747c:	f004 fe1c 	bl	2c0b8 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   27480:	4621      	mov	r1, r4
   27482:	2200      	movs	r2, #0
}
   27484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   27488:	f242 002d 	movw	r0, #8237	; 0x202d
   2748c:	f7e0 b954 	b.w	7738 <bt_hci_cmd_send_sync>
}
   27490:	f06f 0036 	mvn.w	r0, #54	; 0x36
   27494:	bd38      	pop	{r3, r4, r5, pc}

00027496 <hci_set_ad>:
{
   27496:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2749a:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   2749c:	2120      	movs	r1, #32
{
   2749e:	4606      	mov	r6, r0
   274a0:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   274a2:	f7e0 f8ef 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   274a6:	4605      	mov	r5, r0
   274a8:	b300      	cbz	r0, 274ec <hci_set_ad+0x56>
	set_data = net_buf_add(buf, sizeof(*set_data));
   274aa:	2120      	movs	r1, #32
   274ac:	3008      	adds	r0, #8
   274ae:	f004 fdf4 	bl	2c09a <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   274b2:	2220      	movs	r2, #32
	set_data = net_buf_add(buf, sizeof(*set_data));
   274b4:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   274b6:	2100      	movs	r1, #0
   274b8:	f7ff fa9e 	bl	269f8 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   274bc:	9400      	str	r4, [sp, #0]
   274be:	1c60      	adds	r0, r4, #1
   274c0:	4643      	mov	r3, r8
   274c2:	463a      	mov	r2, r7
   274c4:	211f      	movs	r1, #31
   274c6:	f7ff fdc8 	bl	2705a <set_data_add>
	if (err) {
   274ca:	4604      	mov	r4, r0
   274cc:	b130      	cbz	r0, 274dc <hci_set_ad+0x46>
		net_buf_unref(buf);
   274ce:	4628      	mov	r0, r5
   274d0:	f7f8 fc5c 	bl	1fd8c <net_buf_unref>
}
   274d4:	4620      	mov	r0, r4
   274d6:	b002      	add	sp, #8
   274d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   274dc:	4602      	mov	r2, r0
   274de:	4629      	mov	r1, r5
   274e0:	4630      	mov	r0, r6
}
   274e2:	b002      	add	sp, #8
   274e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   274e8:	f7e0 b926 	b.w	7738 <bt_hci_cmd_send_sync>
		return -ENOBUFS;
   274ec:	f06f 0436 	mvn.w	r4, #54	; 0x36
   274f0:	e7f0      	b.n	274d4 <hci_set_ad+0x3e>

000274f2 <bt_lookup_id_addr>:
{
   274f2:	b510      	push	{r4, lr}
   274f4:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   274f6:	f7e4 ffd7 	bl	c4a8 <bt_keys_find_irk>
		if (keys) {
   274fa:	b100      	cbz	r0, 274fe <bt_lookup_id_addr+0xc>
			return &keys->addr;
   274fc:	1c44      	adds	r4, r0, #1
}
   274fe:	4620      	mov	r0, r4
   27500:	bd10      	pop	{r4, pc}

00027502 <bt_hci_disconnect>:
{
   27502:	b570      	push	{r4, r5, r6, lr}
   27504:	4606      	mov	r6, r0
   27506:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   27508:	f240 4006 	movw	r0, #1030	; 0x406
   2750c:	2103      	movs	r1, #3
   2750e:	f7e0 f8b9 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   27512:	4604      	mov	r4, r0
   27514:	b160      	cbz	r0, 27530 <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   27516:	2103      	movs	r1, #3
   27518:	3008      	adds	r0, #8
   2751a:	f004 fdbe 	bl	2c09a <net_buf_simple_add>
	disconn->reason = reason;
   2751e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   27520:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   27522:	4621      	mov	r1, r4
   27524:	f240 4006 	movw	r0, #1030	; 0x406
}
   27528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   2752c:	f7e0 b8e2 	b.w	76f4 <bt_hci_cmd_send>
}
   27530:	f06f 0036 	mvn.w	r0, #54	; 0x36
   27534:	bd70      	pop	{r4, r5, r6, pc}

00027536 <bt_le_set_data_len>:
{
   27536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27538:	4607      	mov	r7, r0
   2753a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2753c:	f242 0022 	movw	r0, #8226	; 0x2022
   27540:	2106      	movs	r1, #6
{
   27542:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   27544:	f7e0 f89e 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   27548:	4604      	mov	r4, r0
   2754a:	b170      	cbz	r0, 2756a <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   2754c:	2106      	movs	r1, #6
   2754e:	3008      	adds	r0, #8
   27550:	f004 fda3 	bl	2c09a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27554:	883b      	ldrh	r3, [r7, #0]
   27556:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   27558:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2755a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2755c:	4621      	mov	r1, r4
   2755e:	f242 0022 	movw	r0, #8226	; 0x2022
}
   27562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   27566:	f7e0 b8c5 	b.w	76f4 <bt_hci_cmd_send>
}
   2756a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2756e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027570 <bt_le_set_phy>:
{
   27570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27574:	4680      	mov	r8, r0
   27576:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27578:	f242 0032 	movw	r0, #8242	; 0x2032
   2757c:	2107      	movs	r1, #7
{
   2757e:	f89d 9020 	ldrb.w	r9, [sp, #32]
   27582:	4616      	mov	r6, r2
   27584:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27586:	f7e0 f87d 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   2758a:	4604      	mov	r4, r0
   2758c:	b190      	cbz	r0, 275b4 <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   2758e:	2107      	movs	r1, #7
   27590:	3008      	adds	r0, #8
   27592:	f004 fd82 	bl	2c09a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27596:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2759a:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2759c:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2759e:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   275a0:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   275a2:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   275a6:	4621      	mov	r1, r4
   275a8:	f242 0032 	movw	r0, #8242	; 0x2032
}
   275ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   275b0:	f7e0 b8a0 	b.w	76f4 <bt_hci_cmd_send>
}
   275b4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   275b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000275bc <le_phy_update_complete>:
{
   275bc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   275be:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   275c0:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   275c4:	f7e1 ff14 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
   275c8:	4604      	mov	r4, r0
   275ca:	b1a0      	cbz	r0, 275f6 <le_phy_update_complete+0x3a>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   275cc:	1d05      	adds	r5, r0, #4
   275ce:	f06f 0180 	mvn.w	r1, #128	; 0x80
   275d2:	4628      	mov	r0, r5
   275d4:	f7ff fd1c 	bl	27010 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   275d8:	0603      	lsls	r3, r0, #24
   275da:	d507      	bpl.n	275ec <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   275dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   275e0:	4628      	mov	r0, r5
   275e2:	f7ff fd7e 	bl	270e2 <atomic_or>
		conn_auto_initiate(conn);
   275e6:	4620      	mov	r0, r4
   275e8:	f7e0 fbe0 	bl	7dac <conn_auto_initiate>
	bt_conn_unref(conn);
   275ec:	4620      	mov	r0, r4
}
   275ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   275f2:	f000 b9c7 	b.w	27984 <bt_conn_unref>
}
   275f6:	bd38      	pop	{r3, r4, r5, pc}

000275f8 <le_remote_feat_complete>:
{
   275f8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   275fa:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   275fc:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   27600:	f7e1 fef6 	bl	93f0 <bt_conn_lookup_handle>
	if (!conn) {
   27604:	4604      	mov	r4, r0
   27606:	b198      	cbz	r0, 27630 <le_remote_feat_complete+0x38>
	if (!evt->status) {
   27608:	782b      	ldrb	r3, [r5, #0]
   2760a:	b923      	cbnz	r3, 27616 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   2760c:	2208      	movs	r2, #8
   2760e:	1ce9      	adds	r1, r5, #3
   27610:	30ac      	adds	r0, #172	; 0xac
   27612:	f7ff f9c6 	bl	269a2 <memcpy>
   27616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   2761a:	1d20      	adds	r0, r4, #4
   2761c:	f7ff fd61 	bl	270e2 <atomic_or>
	conn_auto_initiate(conn);
   27620:	4620      	mov	r0, r4
   27622:	f7e0 fbc3 	bl	7dac <conn_auto_initiate>
	bt_conn_unref(conn);
   27626:	4620      	mov	r0, r4
}
   27628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   2762c:	f000 b9aa 	b.w	27984 <bt_conn_unref>
}
   27630:	bd38      	pop	{r3, r4, r5, pc}

00027632 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   27632:	8802      	ldrh	r2, [r0, #0]
   27634:	8843      	ldrh	r3, [r0, #2]
   27636:	429a      	cmp	r2, r3
{
   27638:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2763a:	d818      	bhi.n	2766e <bt_le_conn_params_valid+0x3c>
   2763c:	2a05      	cmp	r2, #5
   2763e:	d916      	bls.n	2766e <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   27640:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   27644:	d813      	bhi.n	2766e <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   27646:	8884      	ldrh	r4, [r0, #4]
   27648:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2764c:	d20f      	bcs.n	2766e <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2764e:	88c1      	ldrh	r1, [r0, #6]
   27650:	f1a1 020a 	sub.w	r2, r1, #10
   27654:	b292      	uxth	r2, r2
   27656:	f640 4076 	movw	r0, #3190	; 0xc76
   2765a:	4282      	cmp	r2, r0
   2765c:	d807      	bhi.n	2766e <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2765e:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   27662:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   27666:	bf34      	ite	cc
   27668:	2001      	movcc	r0, #1
   2766a:	2000      	movcs	r0, #0
}
   2766c:	bd10      	pop	{r4, pc}
		return false;
   2766e:	2000      	movs	r0, #0
   27670:	e7fc      	b.n	2766c <bt_le_conn_params_valid+0x3a>

00027672 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   27672:	7a03      	ldrb	r3, [r0, #8]
   27674:	07d9      	lsls	r1, r3, #31
   27676:	d504      	bpl.n	27682 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   27678:	f023 0301 	bic.w	r3, r3, #1
   2767c:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2767e:	f7e0 bbed 	b.w	7e5c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   27682:	0799      	lsls	r1, r3, #30
   27684:	d504      	bpl.n	27690 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   27686:	f023 0302 	bic.w	r3, r3, #2
   2768a:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2768c:	f7e0 bc82 	b.w	7f94 <bt_id_del>
}
   27690:	4770      	bx	lr

00027692 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   27692:	2301      	movs	r3, #1
{
   27694:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   27696:	2106      	movs	r1, #6
{
   27698:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2769a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2769e:	f7ee fc39 	bl	15f14 <bt_rand>
	if (err) {
   276a2:	b918      	cbnz	r0, 276ac <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   276a4:	79a3      	ldrb	r3, [r4, #6]
   276a6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   276aa:	71a3      	strb	r3, [r4, #6]
}
   276ac:	bd10      	pop	{r4, pc}

000276ae <bt_send>:
		return bt_hci_ecc_send(buf);
   276ae:	f7df bb0d 	b.w	6ccc <bt_hci_ecc_send>

000276b2 <bt_addr_le_is_bonded>:
{
   276b2:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   276b4:	f7e4 ff32 	bl	c51c <bt_keys_find_addr>
		return keys && keys->keys;
   276b8:	b118      	cbz	r0, 276c2 <bt_addr_le_is_bonded+0x10>
   276ba:	89c0      	ldrh	r0, [r0, #14]
   276bc:	3800      	subs	r0, #0
   276be:	bf18      	it	ne
   276c0:	2001      	movne	r0, #1
}
   276c2:	bd08      	pop	{r3, pc}

000276c4 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   276c4:	6880      	ldr	r0, [r0, #8]
   276c6:	f7e1 b9eb 	b.w	8aa0 <enh_conn_complete>

000276ca <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   276ca:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   276cc:	f04f 32ff 	mov.w	r2, #4294967295
{
   276d0:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   276d2:	f04f 33ff 	mov.w	r3, #4294967295
   276d6:	2100      	movs	r1, #0
{
   276d8:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   276da:	f7e1 fbe3 	bl	8ea4 <bt_buf_get_evt>

	hdr = net_buf_add(buf, sizeof(*hdr));
   276de:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   276e0:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   276e2:	3008      	adds	r0, #8
   276e4:	f004 fcd9 	bl	2c09a <net_buf_simple_add>
	hdr->evt = evt;
   276e8:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   276ea:	7045      	strb	r5, [r0, #1]

	return buf;
}
   276ec:	4620      	mov	r0, r4
   276ee:	bd70      	pop	{r4, r5, r6, pc}

000276f0 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   276f0:	3103      	adds	r1, #3
{
   276f2:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   276f4:	b2c9      	uxtb	r1, r1
{
   276f6:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   276f8:	200e      	movs	r0, #14
   276fa:	f7ff ffe6 	bl	276ca <bt_hci_evt_create>

	cc = net_buf_add(buf, sizeof(*cc));
   276fe:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   27700:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   27702:	3008      	adds	r0, #8
   27704:	f004 fcc9 	bl	2c09a <net_buf_simple_add>
	cc->ncmd = 1U;
   27708:	2301      	movs	r3, #1
   2770a:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   2770c:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   27710:	4620      	mov	r0, r4
   27712:	bd38      	pop	{r3, r4, r5, pc}

00027714 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   27714:	b570      	push	{r4, r5, r6, lr}
   27716:	4605      	mov	r5, r0
   27718:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   2771a:	200f      	movs	r0, #15
   2771c:	2104      	movs	r1, #4
   2771e:	f7ff ffd4 	bl	276ca <bt_hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   27722:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   27724:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   27726:	3008      	adds	r0, #8
   27728:	f004 fcb7 	bl	2c09a <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
   2772c:	2201      	movs	r2, #1
	cs->status = status;
   2772e:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   27730:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   27732:	8045      	strh	r5, [r0, #2]

	return buf;
}
   27734:	4620      	mov	r0, r4
   27736:	bd70      	pop	{r4, r5, r6, pc}

00027738 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27738:	f3bf 8f5b 	dmb	ish
   2773c:	6800      	ldr	r0, [r0, #0]
   2773e:	f3bf 8f5b 	dmb	ish
}
   27742:	4770      	bx	lr

00027744 <atomic_inc>:
{
   27744:	4603      	mov	r3, r0
}
   27746:	f3bf 8f5b 	dmb	ish
   2774a:	e853 0f00 	ldrex	r0, [r3]
   2774e:	1c42      	adds	r2, r0, #1
   27750:	e843 2100 	strex	r1, r2, [r3]
   27754:	2900      	cmp	r1, #0
   27756:	d1f8      	bne.n	2774a <atomic_inc+0x6>
   27758:	f3bf 8f5b 	dmb	ish
   2775c:	4770      	bx	lr

0002775e <tx_notify>:
{
   2775e:	b570      	push	{r4, r5, r6, lr}
   27760:	4604      	mov	r4, r0
	__asm__ volatile(
   27762:	f04f 0220 	mov.w	r2, #32
   27766:	f3ef 8311 	mrs	r3, BASEPRI
   2776a:	f382 8811 	msr	BASEPRI, r2
   2776e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   27772:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   27774:	b920      	cbnz	r0, 27780 <tx_notify+0x22>
	__asm__ volatile(
   27776:	f383 8811 	msr	BASEPRI, r3
   2777a:	f3bf 8f6f 	isb	sy
}
   2777e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27780:	6a61      	ldr	r1, [r4, #36]	; 0x24
   27782:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27784:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27786:	4288      	cmp	r0, r1
	list->tail = node;
   27788:	bf08      	it	eq
   2778a:	6262      	streq	r2, [r4, #36]	; 0x24
   2778c:	f383 8811 	msr	BASEPRI, r3
   27790:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   27794:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   27798:	f7e1 fc2a 	bl	8ff0 <tx_free>
		cb(conn, user_data);
   2779c:	4631      	mov	r1, r6
   2779e:	4620      	mov	r0, r4
   277a0:	47a8      	blx	r5
	while (1) {
   277a2:	e7de      	b.n	27762 <tx_notify+0x4>

000277a4 <tx_complete_work>:
	tx_notify(conn);
   277a4:	3828      	subs	r0, #40	; 0x28
   277a6:	f7ff bfda 	b.w	2775e <tx_notify>

000277aa <bt_conn_new>:
{
   277aa:	b570      	push	{r4, r5, r6, lr}
   277ac:	460a      	mov	r2, r1
   277ae:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   277b0:	2600      	movs	r6, #0
   277b2:	4296      	cmp	r6, r2
   277b4:	d102      	bne.n	277bc <bt_conn_new+0x12>
		return NULL;
   277b6:	2400      	movs	r4, #0
}
   277b8:	4620      	mov	r0, r4
   277ba:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
   277bc:	f104 0554 	add.w	r5, r4, #84	; 0x54
   277c0:	4628      	mov	r0, r5
   277c2:	f7ff ffb9 	bl	27738 <atomic_get>
   277c6:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   277ca:	4601      	mov	r1, r0
   277cc:	b110      	cbz	r0, 277d4 <bt_conn_new+0x2a>
	for (i = 0; i < size; i++) {
   277ce:	3601      	adds	r6, #1
   277d0:	461c      	mov	r4, r3
   277d2:	e7ee      	b.n	277b2 <bt_conn_new+0x8>
	if (!conn) {
   277d4:	2c00      	cmp	r4, #0
   277d6:	d0ef      	beq.n	277b8 <bt_conn_new+0xe>
	(void)memset(conn, 0, sizeof(*conn));
   277d8:	22b8      	movs	r2, #184	; 0xb8
   277da:	4620      	mov	r0, r4
   277dc:	f7ff f90c 	bl	269f8 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   277e0:	f3bf 8f5b 	dmb	ish
   277e4:	2301      	movs	r3, #1
   277e6:	e855 2f00 	ldrex	r2, [r5]
   277ea:	e845 3100 	strex	r1, r3, [r5]
   277ee:	2900      	cmp	r1, #0
   277f0:	d1f9      	bne.n	277e6 <bt_conn_new+0x3c>
   277f2:	f3bf 8f5b 	dmb	ish
   277f6:	e7df      	b.n	277b8 <bt_conn_new+0xe>

000277f8 <bt_conn_set_security>:
{
   277f8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   277fa:	7b43      	ldrb	r3, [r0, #13]
   277fc:	2b07      	cmp	r3, #7
{
   277fe:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   27800:	d128      	bne.n	27854 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   27802:	7a43      	ldrb	r3, [r0, #9]
   27804:	428b      	cmp	r3, r1
   27806:	d228      	bcs.n	2785a <bt_conn_set_security+0x62>
   27808:	7a83      	ldrb	r3, [r0, #10]
   2780a:	428b      	cmp	r3, r1
   2780c:	d225      	bcs.n	2785a <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2780e:	f3bf 8f5b 	dmb	ish
	if (val) {
   27812:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   27814:	f100 0304 	add.w	r3, r0, #4
   27818:	d513      	bpl.n	27842 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2781a:	e853 2f00 	ldrex	r2, [r3]
   2781e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   27822:	e843 2000 	strex	r0, r2, [r3]
   27826:	2800      	cmp	r0, #0
   27828:	d1f7      	bne.n	2781a <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2782a:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2782e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   27832:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   27834:	4620      	mov	r0, r4
   27836:	f7e4 fd0f 	bl	c258 <bt_smp_start_security>
	if (err) {
   2783a:	b108      	cbz	r0, 27840 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   2783c:	7a63      	ldrb	r3, [r4, #9]
   2783e:	72a3      	strb	r3, [r4, #10]
}
   27840:	bd10      	pop	{r4, pc}
   27842:	e853 2f00 	ldrex	r2, [r3]
   27846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   2784a:	e843 2000 	strex	r0, r2, [r3]
   2784e:	2800      	cmp	r0, #0
   27850:	d0eb      	beq.n	2782a <bt_conn_set_security+0x32>
   27852:	e7f6      	b.n	27842 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   27854:	f06f 0038 	mvn.w	r0, #56	; 0x38
   27858:	e7f2      	b.n	27840 <bt_conn_set_security+0x48>
		return 0;
   2785a:	2000      	movs	r0, #0
   2785c:	e7f0      	b.n	27840 <bt_conn_set_security+0x48>

0002785e <bt_conn_get_security>:
}
   2785e:	7a40      	ldrb	r0, [r0, #9]
   27860:	4770      	bx	lr

00027862 <bt_conn_reset_rx_state>:
{
   27862:	b510      	push	{r4, lr}
   27864:	4604      	mov	r4, r0
	if (!conn->rx) {
   27866:	6900      	ldr	r0, [r0, #16]
   27868:	b118      	cbz	r0, 27872 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2786a:	f7f8 fa8f 	bl	1fd8c <net_buf_unref>
	conn->rx = NULL;
   2786e:	2300      	movs	r3, #0
   27870:	6123      	str	r3, [r4, #16]
}
   27872:	bd10      	pop	{r4, pc}

00027874 <bt_conn_recv>:
{
   27874:	b570      	push	{r4, r5, r6, lr}
   27876:	4616      	mov	r6, r2
   27878:	4604      	mov	r4, r0
   2787a:	460d      	mov	r5, r1
	tx_notify(conn);
   2787c:	f7ff ff6f 	bl	2775e <tx_notify>
	switch (flags) {
   27880:	2e01      	cmp	r6, #1
   27882:	d01a      	beq.n	278ba <bt_conn_recv+0x46>
   27884:	2e02      	cmp	r6, #2
   27886:	d11a      	bne.n	278be <bt_conn_recv+0x4a>
		if (conn->rx) {
   27888:	6923      	ldr	r3, [r4, #16]
   2788a:	b113      	cbz	r3, 27892 <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   2788c:	4620      	mov	r0, r4
   2788e:	f7ff ffe8 	bl	27862 <bt_conn_reset_rx_state>
		conn->rx = buf;
   27892:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   27894:	6921      	ldr	r1, [r4, #16]
   27896:	898a      	ldrh	r2, [r1, #12]
   27898:	2a01      	cmp	r2, #1
   2789a:	d931      	bls.n	27900 <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   2789c:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   2789e:	7845      	ldrb	r5, [r0, #1]
   278a0:	7803      	ldrb	r3, [r0, #0]
   278a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   278a6:	3304      	adds	r3, #4
   278a8:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   278aa:	429a      	cmp	r2, r3
   278ac:	d328      	bcc.n	27900 <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   278ae:	d920      	bls.n	278f2 <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   278b0:	4620      	mov	r0, r4
}
   278b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   278b6:	f7ff bfd4 	b.w	27862 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   278ba:	6920      	ldr	r0, [r4, #16]
   278bc:	b918      	cbnz	r0, 278c6 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   278be:	4620      	mov	r0, r4
   278c0:	f7ff ffcf 	bl	27862 <bt_conn_reset_rx_state>
   278c4:	e001      	b.n	278ca <bt_conn_recv+0x56>
		if (!buf->len) {
   278c6:	89ae      	ldrh	r6, [r5, #12]
   278c8:	b926      	cbnz	r6, 278d4 <bt_conn_recv+0x60>
		net_buf_unref(buf);
   278ca:	4628      	mov	r0, r5
}
   278cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   278d0:	f7f8 ba5c 	b.w	1fd8c <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   278d4:	3008      	adds	r0, #8
   278d6:	f004 fc8c 	bl	2c1f2 <net_buf_simple_tailroom>
   278da:	4286      	cmp	r6, r0
   278dc:	d8ef      	bhi.n	278be <bt_conn_recv+0x4a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   278de:	6920      	ldr	r0, [r4, #16]
   278e0:	89aa      	ldrh	r2, [r5, #12]
   278e2:	68a9      	ldr	r1, [r5, #8]
   278e4:	3008      	adds	r0, #8
   278e6:	f004 fbde 	bl	2c0a6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   278ea:	4628      	mov	r0, r5
   278ec:	f7f8 fa4e 	bl	1fd8c <net_buf_unref>
		break;
   278f0:	e7d0      	b.n	27894 <bt_conn_recv+0x20>
	conn->rx = NULL;
   278f2:	2300      	movs	r3, #0
   278f4:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   278f6:	4620      	mov	r0, r4
}
   278f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   278fc:	f000 b9a4 	b.w	27c48 <bt_l2cap_recv>
}
   27900:	bd70      	pop	{r4, r5, r6, pc}

00027902 <conn_lookup_handle>:
{
   27902:	b538      	push	{r3, r4, r5, lr}
   27904:	f100 0354 	add.w	r3, r0, #84	; 0x54
	for (i = 0; i < size; i++) {
   27908:	2400      	movs	r4, #0
   2790a:	428c      	cmp	r4, r1
   2790c:	d101      	bne.n	27912 <conn_lookup_handle+0x10>
	return NULL;
   2790e:	2500      	movs	r5, #0
   27910:	e013      	b.n	2793a <conn_lookup_handle+0x38>
		if (!atomic_get(&conns[i].ref)) {
   27912:	4618      	mov	r0, r3
   27914:	f1a3 0554 	sub.w	r5, r3, #84	; 0x54
   27918:	f7ff ff0e 	bl	27738 <atomic_get>
   2791c:	b178      	cbz	r0, 2793e <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
   2791e:	f813 0c47 	ldrb.w	r0, [r3, #-71]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27922:	2801      	cmp	r0, #1
   27924:	d002      	beq.n	2792c <conn_lookup_handle+0x2a>
   27926:	3807      	subs	r0, #7
   27928:	2801      	cmp	r0, #1
   2792a:	d808      	bhi.n	2793e <conn_lookup_handle+0x3c>
		if (conns[i].handle == handle) {
   2792c:	f833 0c54 	ldrh.w	r0, [r3, #-84]
   27930:	4290      	cmp	r0, r2
   27932:	d104      	bne.n	2793e <conn_lookup_handle+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
   27934:	4618      	mov	r0, r3
   27936:	f7ff ff05 	bl	27744 <atomic_inc>
}
   2793a:	4628      	mov	r0, r5
   2793c:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   2793e:	3401      	adds	r4, #1
   27940:	33b8      	adds	r3, #184	; 0xb8
   27942:	e7e2      	b.n	2790a <conn_lookup_handle+0x8>

00027944 <bt_conn_is_peer_addr_le>:
{
   27944:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27946:	7a03      	ldrb	r3, [r0, #8]
   27948:	428b      	cmp	r3, r1
{
   2794a:	4604      	mov	r4, r0
   2794c:	4615      	mov	r5, r2
	if (id != conn->id) {
   2794e:	d115      	bne.n	2797c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27950:	f100 0188 	add.w	r1, r0, #136	; 0x88
   27954:	2207      	movs	r2, #7
   27956:	4628      	mov	r0, r5
   27958:	f7ff f813 	bl	26982 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2795c:	b180      	cbz	r0, 27980 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   2795e:	78e3      	ldrb	r3, [r4, #3]
   27960:	2207      	movs	r2, #7
   27962:	b943      	cbnz	r3, 27976 <bt_conn_is_peer_addr_le+0x32>
   27964:	f104 0196 	add.w	r1, r4, #150	; 0x96
   27968:	4628      	mov	r0, r5
   2796a:	f7ff f80a 	bl	26982 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2796e:	fab0 f080 	clz	r0, r0
   27972:	0940      	lsrs	r0, r0, #5
}
   27974:	bd38      	pop	{r3, r4, r5, pc}
   27976:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2797a:	e7f5      	b.n	27968 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2797c:	2000      	movs	r0, #0
   2797e:	e7f9      	b.n	27974 <bt_conn_is_peer_addr_le+0x30>
		return true;
   27980:	2001      	movs	r0, #1
   27982:	e7f7      	b.n	27974 <bt_conn_is_peer_addr_le+0x30>

00027984 <bt_conn_unref>:
{
   27984:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   27986:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   27988:	f3bf 8f5b 	dmb	ish
   2798c:	e850 3f00 	ldrex	r3, [r0]
   27990:	3b01      	subs	r3, #1
   27992:	e840 3200 	strex	r2, r3, [r0]
   27996:	2a00      	cmp	r2, #0
   27998:	d1f8      	bne.n	2798c <bt_conn_unref+0x8>
   2799a:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   2799e:	f7ff fecb 	bl	27738 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   279a2:	b918      	cbnz	r0, 279ac <bt_conn_unref+0x28>
}
   279a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   279a8:	f7e1 b834 	b.w	8a14 <bt_le_adv_resume>
}
   279ac:	bd08      	pop	{r3, pc}

000279ae <bt_conn_exists_le>:
{
   279ae:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   279b0:	f7e1 fd26 	bl	9400 <bt_conn_lookup_addr_le>
	if (conn) {
   279b4:	b110      	cbz	r0, 279bc <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   279b6:	f7ff ffe5 	bl	27984 <bt_conn_unref>
		return true;
   279ba:	2001      	movs	r0, #1
}
   279bc:	bd08      	pop	{r3, pc}

000279be <bt_conn_disconnect>:
{
   279be:	b538      	push	{r3, r4, r5, lr}
   279c0:	7b43      	ldrb	r3, [r0, #13]
   279c2:	3b02      	subs	r3, #2
   279c4:	4604      	mov	r4, r0
   279c6:	2b06      	cmp	r3, #6
   279c8:	d805      	bhi.n	279d6 <bt_conn_disconnect+0x18>
   279ca:	e8df f003 	tbb	[pc, r3]
   279ce:	0408      	.short	0x0408
   279d0:	160c0e04 	.word	0x160c0e04
   279d4:	0c          	.byte	0x0c
   279d5:	00          	.byte	0x00
	switch (conn->state) {
   279d6:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   279da:	4628      	mov	r0, r5
   279dc:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   279de:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   279e0:	2100      	movs	r1, #0
   279e2:	f7e1 fd4f 	bl	9484 <bt_conn_set_state>
		return 0;
   279e6:	2500      	movs	r5, #0
   279e8:	e7f7      	b.n	279da <bt_conn_disconnect+0x1c>
		conn->err = reason;
   279ea:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   279ec:	2100      	movs	r1, #0
   279ee:	f7e1 fd49 	bl	9484 <bt_conn_set_state>
}
   279f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   279f6:	f7e0 bfc1 	b.w	897c <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
   279fa:	8800      	ldrh	r0, [r0, #0]
   279fc:	f7ff fd81 	bl	27502 <bt_hci_disconnect>
	if (err) {
   27a00:	4605      	mov	r5, r0
   27a02:	2800      	cmp	r0, #0
   27a04:	d1e9      	bne.n	279da <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   27a06:	2108      	movs	r1, #8
   27a08:	4620      	mov	r0, r4
   27a0a:	f7e1 fd3b 	bl	9484 <bt_conn_set_state>
	return 0;
   27a0e:	e7e4      	b.n	279da <bt_conn_disconnect+0x1c>

00027a10 <bt_conn_le_conn_update>:
{
   27a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a12:	4607      	mov	r7, r0
   27a14:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   27a16:	f242 0013 	movw	r0, #8211	; 0x2013
   27a1a:	210e      	movs	r1, #14
   27a1c:	f7df fe32 	bl	7684 <bt_hci_cmd_create>
	if (!buf) {
   27a20:	4606      	mov	r6, r0
   27a22:	b1d0      	cbz	r0, 27a5a <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   27a24:	210e      	movs	r1, #14
   27a26:	3008      	adds	r0, #8
   27a28:	f004 fb37 	bl	2c09a <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   27a2c:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   27a2e:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   27a30:	2100      	movs	r1, #0
   27a32:	f7fe ffe1 	bl	269f8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   27a36:	883b      	ldrh	r3, [r7, #0]
   27a38:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   27a3a:	882b      	ldrh	r3, [r5, #0]
   27a3c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   27a3e:	886b      	ldrh	r3, [r5, #2]
   27a40:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   27a42:	88ab      	ldrh	r3, [r5, #4]
   27a44:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27a46:	88eb      	ldrh	r3, [r5, #6]
   27a48:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27a4a:	4631      	mov	r1, r6
   27a4c:	2200      	movs	r2, #0
}
   27a4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27a52:	f242 0013 	movw	r0, #8211	; 0x2013
   27a56:	f7df be6f 	b.w	7738 <bt_hci_cmd_send_sync>
}
   27a5a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   27a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027a60 <l2cap_connected>:
}
   27a60:	4770      	bx	lr

00027a62 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   27a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a64:	4607      	mov	r7, r0
   27a66:	460e      	mov	r6, r1
   27a68:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   27a6a:	2300      	movs	r3, #0
   27a6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   27a70:	2104      	movs	r1, #4
   27a72:	2000      	movs	r0, #0
   27a74:	f7e1 fe30 	bl	96d8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   27a78:	4604      	mov	r4, r0
   27a7a:	b130      	cbz	r0, 27a8a <l2cap_create_le_sig_pdu.isra.0+0x28>
	hdr = net_buf_add(buf, sizeof(*hdr));
   27a7c:	2104      	movs	r1, #4
   27a7e:	3008      	adds	r0, #8
   27a80:	f004 fb0b 	bl	2c09a <net_buf_simple_add>
	hdr->code = code;
   27a84:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   27a86:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   27a88:	8045      	strh	r5, [r0, #2]
}
   27a8a:	4620      	mov	r0, r4
   27a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027a8e <l2cap_disconnected>:
   27a8e:	4770      	bx	lr

00027a90 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27a90:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   27a92:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27a94:	b17b      	cbz	r3, 27ab6 <bt_l2cap_chan_remove+0x26>
   27a96:	3b08      	subs	r3, #8
   27a98:	2200      	movs	r2, #0
   27a9a:	b163      	cbz	r3, 27ab6 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   27a9c:	428b      	cmp	r3, r1
   27a9e:	f103 0408 	add.w	r4, r3, #8
   27aa2:	d10f      	bne.n	27ac4 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   27aa4:	688b      	ldr	r3, [r1, #8]
   27aa6:	b93a      	cbnz	r2, 27ab8 <bt_l2cap_chan_remove+0x28>
   27aa8:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   27aaa:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   27aac:	4294      	cmp	r4, r2
   27aae:	d100      	bne.n	27ab2 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   27ab0:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   27ab2:	2300      	movs	r3, #0
   27ab4:	608b      	str	r3, [r1, #8]
}
   27ab6:	bd10      	pop	{r4, pc}
   27ab8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27aba:	6d03      	ldr	r3, [r0, #80]	; 0x50
   27abc:	429c      	cmp	r4, r3
	list->tail = node;
   27abe:	bf08      	it	eq
   27ac0:	6502      	streq	r2, [r0, #80]	; 0x50
}
   27ac2:	e7f6      	b.n	27ab2 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27ac4:	2c00      	cmp	r4, #0
   27ac6:	d0f6      	beq.n	27ab6 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27ac8:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27aca:	2b00      	cmp	r3, #0
   27acc:	d0f3      	beq.n	27ab6 <bt_l2cap_chan_remove+0x26>
   27ace:	3b08      	subs	r3, #8
   27ad0:	4622      	mov	r2, r4
   27ad2:	e7e2      	b.n	27a9a <bt_l2cap_chan_remove+0xa>

00027ad4 <bt_l2cap_chan_del>:
{
   27ad4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   27ad6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   27ada:	4604      	mov	r4, r0
	if (!chan->conn) {
   27adc:	b123      	cbz	r3, 27ae8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   27ade:	686b      	ldr	r3, [r5, #4]
   27ae0:	b103      	cbz	r3, 27ae4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   27ae2:	4798      	blx	r3
	chan->conn = NULL;
   27ae4:	2300      	movs	r3, #0
   27ae6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   27ae8:	68e3      	ldr	r3, [r4, #12]
   27aea:	b10b      	cbz	r3, 27af0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   27aec:	4620      	mov	r0, r4
   27aee:	4798      	blx	r3
	if (ops->released) {
   27af0:	69eb      	ldr	r3, [r5, #28]
   27af2:	b11b      	cbz	r3, 27afc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   27af4:	4620      	mov	r0, r4
}
   27af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   27afa:	4718      	bx	r3
}
   27afc:	bd70      	pop	{r4, r5, r6, pc}

00027afe <l2cap_rtx_timeout>:
{
   27afe:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   27b00:	f1a0 0110 	sub.w	r1, r0, #16
   27b04:	f850 0c10 	ldr.w	r0, [r0, #-16]
   27b08:	f7ff ffc2 	bl	27a90 <bt_l2cap_chan_remove>
}
   27b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   27b10:	4608      	mov	r0, r1
   27b12:	f7ff bfdf 	b.w	27ad4 <bt_l2cap_chan_del>

00027b16 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27b16:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   27b18:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27b1a:	b18b      	cbz	r3, 27b40 <bt_l2cap_disconnected+0x2a>
   27b1c:	f1b3 0008 	subs.w	r0, r3, #8
   27b20:	d00e      	beq.n	27b40 <bt_l2cap_disconnected+0x2a>
   27b22:	681c      	ldr	r4, [r3, #0]
   27b24:	b104      	cbz	r4, 27b28 <bt_l2cap_disconnected+0x12>
   27b26:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   27b28:	f7ff ffd4 	bl	27ad4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27b2c:	b144      	cbz	r4, 27b40 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27b2e:	f114 0308 	adds.w	r3, r4, #8
   27b32:	d002      	beq.n	27b3a <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27b34:	68a3      	ldr	r3, [r4, #8]
   27b36:	b103      	cbz	r3, 27b3a <bt_l2cap_disconnected+0x24>
   27b38:	3b08      	subs	r3, #8
{
   27b3a:	4620      	mov	r0, r4
   27b3c:	461c      	mov	r4, r3
   27b3e:	e7f3      	b.n	27b28 <bt_l2cap_disconnected+0x12>
}
   27b40:	bd10      	pop	{r4, pc}

00027b42 <bt_l2cap_security_changed>:
{
   27b42:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27b44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   27b46:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27b48:	b1a3      	cbz	r3, 27b74 <bt_l2cap_security_changed+0x32>
   27b4a:	f1b3 0008 	subs.w	r0, r3, #8
   27b4e:	d011      	beq.n	27b74 <bt_l2cap_security_changed+0x32>
   27b50:	681c      	ldr	r4, [r3, #0]
   27b52:	b104      	cbz	r4, 27b56 <bt_l2cap_security_changed+0x14>
   27b54:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   27b56:	6843      	ldr	r3, [r0, #4]
   27b58:	689b      	ldr	r3, [r3, #8]
   27b5a:	b10b      	cbz	r3, 27b60 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   27b5c:	4629      	mov	r1, r5
   27b5e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27b60:	b144      	cbz	r4, 27b74 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27b62:	f114 0308 	adds.w	r3, r4, #8
   27b66:	d002      	beq.n	27b6e <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27b68:	68a3      	ldr	r3, [r4, #8]
   27b6a:	b103      	cbz	r3, 27b6e <bt_l2cap_security_changed+0x2c>
   27b6c:	3b08      	subs	r3, #8
{
   27b6e:	4620      	mov	r0, r4
   27b70:	461c      	mov	r4, r3
   27b72:	e7f0      	b.n	27b56 <bt_l2cap_security_changed+0x14>
}
   27b74:	bd38      	pop	{r3, r4, r5, pc}

00027b76 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   27b76:	3104      	adds	r1, #4
   27b78:	f7e1 bdae 	b.w	96d8 <bt_conn_create_pdu_timeout>

00027b7c <bt_l2cap_send_cb>:
{
   27b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27b80:	4614      	mov	r4, r2
   27b82:	4605      	mov	r5, r0
   27b84:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   27b86:	f102 0008 	add.w	r0, r2, #8
   27b8a:	2104      	movs	r1, #4
{
   27b8c:	461e      	mov	r6, r3
   27b8e:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   27b92:	f004 fac9 	bl	2c128 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27b96:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   27b98:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27b9a:	3a04      	subs	r2, #4
   27b9c:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27b9e:	4643      	mov	r3, r8
   27ba0:	4632      	mov	r2, r6
   27ba2:	4621      	mov	r1, r4
   27ba4:	4628      	mov	r0, r5
}
   27ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27baa:	f7e1 bb75 	b.w	9298 <bt_conn_send_cb>

00027bae <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   27bae:	898b      	ldrh	r3, [r1, #12]
   27bb0:	2b03      	cmp	r3, #3
{
   27bb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27bb4:	4605      	mov	r5, r0
   27bb6:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   27bb8:	d923      	bls.n	27c02 <l2cap_recv+0x54>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   27bba:	2104      	movs	r1, #4
   27bbc:	f104 0008 	add.w	r0, r4, #8
   27bc0:	f004 fae7 	bl	2c192 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   27bc4:	89a3      	ldrh	r3, [r4, #12]
   27bc6:	8842      	ldrh	r2, [r0, #2]
   27bc8:	429a      	cmp	r2, r3
   27bca:	d11a      	bne.n	27c02 <l2cap_recv+0x54>
	if (!hdr->ident) {
   27bcc:	7841      	ldrb	r1, [r0, #1]
   27bce:	b1c1      	cbz	r1, 27c02 <l2cap_recv+0x54>
	switch (hdr->code) {
   27bd0:	7803      	ldrb	r3, [r0, #0]
   27bd2:	2b01      	cmp	r3, #1
   27bd4:	d015      	beq.n	27c02 <l2cap_recv+0x54>
   27bd6:	2b13      	cmp	r3, #19
   27bd8:	d013      	beq.n	27c02 <l2cap_recv+0x54>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   27bda:	2202      	movs	r2, #2
   27bdc:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   27bde:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   27be0:	f7ff ff3f 	bl	27a62 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   27be4:	4604      	mov	r4, r0
   27be6:	b160      	cbz	r0, 27c02 <l2cap_recv+0x54>
	rej = net_buf_add(buf, sizeof(*rej));
   27be8:	2102      	movs	r1, #2
   27bea:	3008      	adds	r0, #8
   27bec:	f004 fa55 	bl	2c09a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   27bf0:	2300      	movs	r3, #0
   27bf2:	7003      	strb	r3, [r0, #0]
   27bf4:	7043      	strb	r3, [r0, #1]
   27bf6:	4622      	mov	r2, r4
   27bf8:	9300      	str	r3, [sp, #0]
   27bfa:	2105      	movs	r1, #5
   27bfc:	4628      	mov	r0, r5
   27bfe:	f7ff ffbd 	bl	27b7c <bt_l2cap_send_cb>
}
   27c02:	2000      	movs	r0, #0
   27c04:	b003      	add	sp, #12
   27c06:	bd30      	pop	{r4, r5, pc}

00027c08 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27c08:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   27c0a:	b160      	cbz	r0, 27c26 <bt_l2cap_le_lookup_tx_cid+0x1e>
   27c0c:	3808      	subs	r0, #8
   27c0e:	b900      	cbnz	r0, 27c12 <bt_l2cap_le_lookup_tx_cid+0xa>
   27c10:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27c12:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   27c16:	428b      	cmp	r3, r1
   27c18:	d005      	beq.n	27c26 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27c1a:	f110 0308 	adds.w	r3, r0, #8
   27c1e:	d001      	beq.n	27c24 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27c20:	6880      	ldr	r0, [r0, #8]
   27c22:	e7f2      	b.n	27c0a <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   27c24:	4618      	mov	r0, r3
}
   27c26:	4770      	bx	lr

00027c28 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27c28:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   27c2a:	b160      	cbz	r0, 27c46 <bt_l2cap_le_lookup_rx_cid+0x1e>
   27c2c:	3808      	subs	r0, #8
   27c2e:	b900      	cbnz	r0, 27c32 <bt_l2cap_le_lookup_rx_cid+0xa>
   27c30:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27c32:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   27c36:	428b      	cmp	r3, r1
   27c38:	d005      	beq.n	27c46 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   27c3a:	f110 0308 	adds.w	r3, r0, #8
   27c3e:	d001      	beq.n	27c44 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27c40:	6880      	ldr	r0, [r0, #8]
   27c42:	e7f2      	b.n	27c2a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   27c44:	4618      	mov	r0, r3
}
   27c46:	4770      	bx	lr

00027c48 <bt_l2cap_recv>:
{
   27c48:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   27c4a:	898b      	ldrh	r3, [r1, #12]
   27c4c:	2b03      	cmp	r3, #3
{
   27c4e:	4605      	mov	r5, r0
   27c50:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   27c52:	d804      	bhi.n	27c5e <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   27c54:	4620      	mov	r0, r4
}
   27c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   27c5a:	f7f8 b897 	b.w	1fd8c <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   27c5e:	2104      	movs	r1, #4
   27c60:	f104 0008 	add.w	r0, r4, #8
   27c64:	f004 fa95 	bl	2c192 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   27c68:	8841      	ldrh	r1, [r0, #2]
   27c6a:	4628      	mov	r0, r5
   27c6c:	f7ff ffdc 	bl	27c28 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   27c70:	2800      	cmp	r0, #0
   27c72:	d0ef      	beq.n	27c54 <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   27c74:	6843      	ldr	r3, [r0, #4]
   27c76:	4621      	mov	r1, r4
   27c78:	691b      	ldr	r3, [r3, #16]
   27c7a:	4798      	blx	r3
   27c7c:	e7ea      	b.n	27c54 <bt_l2cap_recv+0xc>

00027c7e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   27c7e:	4770      	bx	lr

00027c80 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   27c80:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   27c82:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27c84:	b128      	cbz	r0, 27c92 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27c86:	6859      	ldr	r1, [r3, #4]
   27c88:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27c8a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27c8c:	4288      	cmp	r0, r1
	list->tail = node;
   27c8e:	bf08      	it	eq
   27c90:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   27c92:	4770      	bx	lr

00027c94 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27c94:	4603      	mov	r3, r0
   27c96:	6800      	ldr	r0, [r0, #0]
   27c98:	2200      	movs	r2, #0
   27c9a:	b900      	cbnz	r0, 27c9e <sys_slist_find_and_remove+0xa>
   27c9c:	4770      	bx	lr
   27c9e:	4288      	cmp	r0, r1
   27ca0:	d110      	bne.n	27cc4 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   27ca2:	6808      	ldr	r0, [r1, #0]
   27ca4:	b942      	cbnz	r2, 27cb8 <sys_slist_find_and_remove+0x24>
   27ca6:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   27ca8:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   27caa:	4291      	cmp	r1, r2
   27cac:	d100      	bne.n	27cb0 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   27cae:	6058      	str	r0, [r3, #4]
	parent->next = child;
   27cb0:	2300      	movs	r3, #0
   27cb2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27cb4:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   27cb6:	4770      	bx	lr
	parent->next = child;
   27cb8:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27cba:	6858      	ldr	r0, [r3, #4]
   27cbc:	4281      	cmp	r1, r0
	list->tail = node;
   27cbe:	bf08      	it	eq
   27cc0:	605a      	streq	r2, [r3, #4]
}
   27cc2:	e7f5      	b.n	27cb0 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27cc4:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27cc6:	6800      	ldr	r0, [r0, #0]
   27cc8:	e7e7      	b.n	27c9a <sys_slist_find_and_remove+0x6>

00027cca <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   27cca:	4603      	mov	r3, r0
	size_t bytes = 0;
   27ccc:	2000      	movs	r0, #0

	while (buf) {
   27cce:	b903      	cbnz	r3, 27cd2 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   27cd0:	4770      	bx	lr
		bytes += buf->len;
   27cd2:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   27cd4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   27cd6:	4410      	add	r0, r2
		buf = buf->frags;
   27cd8:	e7f9      	b.n	27cce <net_buf_frags_len+0x4>

00027cda <att_sent>:
	if (chan->ops->sent) {
   27cda:	684b      	ldr	r3, [r1, #4]
   27cdc:	695b      	ldr	r3, [r3, #20]
{
   27cde:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   27ce0:	b103      	cbz	r3, 27ce4 <att_sent+0xa>
		chan->ops->sent(chan);
   27ce2:	4718      	bx	r3
}
   27ce4:	4770      	bx	lr

00027ce6 <attr_read_type_cb>:
{
   27ce6:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   27ce8:	68d4      	ldr	r4, [r2, #12]
   27cea:	7823      	ldrb	r3, [r4, #0]
   27cec:	3102      	adds	r1, #2
   27cee:	b913      	cbnz	r3, 27cf6 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   27cf0:	7021      	strb	r1, [r4, #0]
	return true;
   27cf2:	2001      	movs	r0, #1
   27cf4:	e006      	b.n	27d04 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   27cf6:	428b      	cmp	r3, r1
   27cf8:	d0fb      	beq.n	27cf2 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   27cfa:	8983      	ldrh	r3, [r0, #12]
   27cfc:	3b02      	subs	r3, #2
   27cfe:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   27d00:	2000      	movs	r0, #0
   27d02:	6110      	str	r0, [r2, #16]
}
   27d04:	bd10      	pop	{r4, pc}

00027d06 <att_prepare_write_req>:
}
   27d06:	2006      	movs	r0, #6
   27d08:	4770      	bx	lr

00027d0a <att_op_get_type>:
	switch (op) {
   27d0a:	281e      	cmp	r0, #30
   27d0c:	d816      	bhi.n	27d3c <att_op_get_type+0x32>
   27d0e:	b308      	cbz	r0, 27d54 <att_op_get_type+0x4a>
   27d10:	1e43      	subs	r3, r0, #1
   27d12:	2b1d      	cmp	r3, #29
   27d14:	d81e      	bhi.n	27d54 <att_op_get_type+0x4a>
   27d16:	e8df f003 	tbb	[pc, r3]
   27d1a:	2317      	.short	0x2317
   27d1c:	23172317 	.word	0x23172317
   27d20:	23172317 	.word	0x23172317
   27d24:	23172317 	.word	0x23172317
   27d28:	23172317 	.word	0x23172317
   27d2c:	231d1d17 	.word	0x231d1d17
   27d30:	1d172317 	.word	0x1d172317
   27d34:	0f1b1d19 	.word	0x0f1b1d19
   27d38:	2004      	movs	r0, #4
   27d3a:	4770      	bx	lr
   27d3c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   27d40:	2b52      	cmp	r3, #82	; 0x52
   27d42:	d107      	bne.n	27d54 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   27d44:	2000      	movs	r0, #0
}
   27d46:	4770      	bx	lr
		return ATT_RESPONSE;
   27d48:	2002      	movs	r0, #2
   27d4a:	4770      	bx	lr
		return ATT_NOTIFICATION;
   27d4c:	2003      	movs	r0, #3
   27d4e:	4770      	bx	lr
		return ATT_INDICATION;
   27d50:	2005      	movs	r0, #5
   27d52:	4770      	bx	lr
		return ATT_COMMAND;
   27d54:	f010 0f40 	tst.w	r0, #64	; 0x40
   27d58:	bf0c      	ite	eq
   27d5a:	2006      	moveq	r0, #6
   27d5c:	2000      	movne	r0, #0
   27d5e:	4770      	bx	lr
		return ATT_REQUEST;
   27d60:	2001      	movs	r0, #1
   27d62:	4770      	bx	lr

00027d64 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   27d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   27d66:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27d6a:	2300      	movs	r3, #0
   27d6c:	9300      	str	r3, [sp, #0]
   27d6e:	461a      	mov	r2, r3
   27d70:	f7e2 ff7c 	bl	ac6c <bt_gatt_foreach_attr_type>
				  user_data);
}
   27d74:	b005      	add	sp, #20
   27d76:	f85d fb04 	ldr.w	pc, [sp], #4

00027d7a <att_chan_read>:
{
   27d7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d7e:	4680      	mov	r8, r0
   27d80:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27d82:	4610      	mov	r0, r2
{
   27d84:	4699      	mov	r9, r3
   27d86:	468b      	mov	fp, r1
   27d88:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27d8a:	f7ff ff9e 	bl	27cca <net_buf_frags_len>
   27d8e:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   27d92:	4283      	cmp	r3, r0
   27d94:	d97a      	bls.n	27e8c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   27d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
   27d9a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   27d9c:	4630      	mov	r0, r6
   27d9e:	f004 f95a 	bl	2c056 <net_buf_frag_last>
	size_t len, total = 0;
   27da2:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   27da6:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27da8:	4630      	mov	r0, r6
   27daa:	f7ff ff8e 	bl	27cca <net_buf_frags_len>
   27dae:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   27db2:	f105 0708 	add.w	r7, r5, #8
   27db6:	1a24      	subs	r4, r4, r0
   27db8:	4638      	mov	r0, r7
   27dba:	f004 fa1a 	bl	2c1f2 <net_buf_simple_tailroom>
   27dbe:	4284      	cmp	r4, r0
   27dc0:	d211      	bcs.n	27de6 <att_chan_read+0x6c>
   27dc2:	4630      	mov	r0, r6
   27dc4:	f7ff ff81 	bl	27cca <net_buf_frags_len>
   27dc8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   27dcc:	1a24      	subs	r4, r4, r0
		if (!len) {
   27dce:	bb34      	cbnz	r4, 27e1e <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   27dd0:	79b0      	ldrb	r0, [r6, #6]
   27dd2:	f7f7 ff1f 	bl	1fc14 <net_buf_pool_get>
   27dd6:	2200      	movs	r2, #0
   27dd8:	2300      	movs	r3, #0
   27dda:	f004 f8ac 	bl	2bf36 <net_buf_alloc_fixed>
			if (!frag) {
   27dde:	4605      	mov	r5, r0
   27de0:	b930      	cbnz	r0, 27df0 <att_chan_read+0x76>
	return total;
   27de2:	4657      	mov	r7, sl
   27de4:	e02c      	b.n	27e40 <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27de6:	4638      	mov	r0, r7
   27de8:	f004 fa03 	bl	2c1f2 <net_buf_simple_tailroom>
   27dec:	4604      	mov	r4, r0
   27dee:	e7ee      	b.n	27dce <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   27df0:	4601      	mov	r1, r0
   27df2:	4630      	mov	r0, r6
   27df4:	f004 f940 	bl	2c078 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27df8:	4630      	mov	r0, r6
   27dfa:	f7ff ff66 	bl	27cca <net_buf_frags_len>
   27dfe:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   27e02:	f105 0708 	add.w	r7, r5, #8
   27e06:	1a24      	subs	r4, r4, r0
   27e08:	4638      	mov	r0, r7
   27e0a:	f004 f9f2 	bl	2c1f2 <net_buf_simple_tailroom>
   27e0e:	4284      	cmp	r4, r0
   27e10:	d21a      	bcs.n	27e48 <att_chan_read+0xce>
   27e12:	4630      	mov	r0, r6
   27e14:	f7ff ff59 	bl	27cca <net_buf_frags_len>
   27e18:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   27e1c:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   27e1e:	68a9      	ldr	r1, [r5, #8]
   27e20:	89aa      	ldrh	r2, [r5, #12]
   27e22:	f8db 7004 	ldr.w	r7, [fp, #4]
   27e26:	9803      	ldr	r0, [sp, #12]
   27e28:	f8cd 9000 	str.w	r9, [sp]
   27e2c:	440a      	add	r2, r1
   27e2e:	b2a3      	uxth	r3, r4
   27e30:	4659      	mov	r1, fp
   27e32:	47b8      	blx	r7
		if (read < 0) {
   27e34:	1e07      	subs	r7, r0, #0
   27e36:	da0c      	bge.n	27e52 <att_chan_read+0xd8>
				return total;
   27e38:	f1ba 0f00 	cmp.w	sl, #0
   27e3c:	bf18      	it	ne
   27e3e:	4657      	movne	r7, sl
}
   27e40:	4638      	mov	r0, r7
   27e42:	b005      	add	sp, #20
   27e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27e48:	4638      	mov	r0, r7
   27e4a:	f004 f9d2 	bl	2c1f2 <net_buf_simple_tailroom>
   27e4e:	4604      	mov	r4, r0
   27e50:	e7e5      	b.n	27e1e <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   27e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27e54:	b993      	cbnz	r3, 27e7c <att_chan_read+0x102>
		net_buf_add(frag, read);
   27e56:	4639      	mov	r1, r7
   27e58:	f105 0008 	add.w	r0, r5, #8
   27e5c:	f004 f91d 	bl	2c09a <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27e60:	4630      	mov	r0, r6
   27e62:	f7ff ff32 	bl	27cca <net_buf_frags_len>
   27e66:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   27e6a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27e6c:	4283      	cmp	r3, r0
		total += read;
   27e6e:	44ba      	add	sl, r7
		offset += read;
   27e70:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27e74:	d9b5      	bls.n	27de2 <att_chan_read+0x68>
   27e76:	42a7      	cmp	r7, r4
   27e78:	d096      	beq.n	27da8 <att_chan_read+0x2e>
   27e7a:	e7b2      	b.n	27de2 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   27e7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27e80:	4639      	mov	r1, r7
   27e82:	4628      	mov	r0, r5
   27e84:	4798      	blx	r3
   27e86:	2800      	cmp	r0, #0
   27e88:	d1e5      	bne.n	27e56 <att_chan_read+0xdc>
   27e8a:	e7aa      	b.n	27de2 <att_chan_read+0x68>
		return 0;
   27e8c:	2700      	movs	r7, #0
   27e8e:	e7d7      	b.n	27e40 <att_chan_read+0xc6>

00027e90 <find_type_cb>:
{
   27e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   27e94:	f8d2 9000 	ldr.w	r9, [r2]
{
   27e98:	b091      	sub	sp, #68	; 0x44
   27e9a:	4607      	mov	r7, r0
   27e9c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   27e9e:	2400      	movs	r4, #0
   27ea0:	f642 0301 	movw	r3, #10241	; 0x2801
   27ea4:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   27ea6:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   27eaa:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   27eae:	a90b      	add	r1, sp, #44	; 0x2c
{
   27eb0:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   27eb2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   27eb6:	f7ff f823 	bl	26f00 <bt_uuid_cmp>
   27eba:	2800      	cmp	r0, #0
   27ebc:	d079      	beq.n	27fb2 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   27ebe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   27ec2:	6838      	ldr	r0, [r7, #0]
   27ec4:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   27ec8:	a90b      	add	r1, sp, #44	; 0x2c
   27eca:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   27ece:	f7ff f817 	bl	26f00 <bt_uuid_cmp>
   27ed2:	4604      	mov	r4, r0
   27ed4:	b148      	cbz	r0, 27eea <find_type_cb+0x5a>
		if (data->group &&
   27ed6:	68ab      	ldr	r3, [r5, #8]
   27ed8:	b11b      	cbz	r3, 27ee2 <find_type_cb+0x52>
   27eda:	885a      	ldrh	r2, [r3, #2]
   27edc:	42b2      	cmp	r2, r6
   27ede:	d200      	bcs.n	27ee2 <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
   27ee0:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   27ee2:	2001      	movs	r0, #1
}
   27ee4:	b011      	add	sp, #68	; 0x44
   27ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   27eea:	6869      	ldr	r1, [r5, #4]
   27eec:	4608      	mov	r0, r1
   27eee:	f7ff feec 	bl	27cca <net_buf_frags_len>
   27ef2:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   27ef6:	1a1b      	subs	r3, r3, r0
   27ef8:	2b03      	cmp	r3, #3
   27efa:	d922      	bls.n	27f42 <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
   27efc:	4608      	mov	r0, r1
   27efe:	f004 f8aa 	bl	2c056 <net_buf_frag_last>
   27f02:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   27f04:	6868      	ldr	r0, [r5, #4]
   27f06:	f7ff fee0 	bl	27cca <net_buf_frags_len>
   27f0a:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
   27f0e:	f104 0b08 	add.w	fp, r4, #8
   27f12:	ebaa 0a00 	sub.w	sl, sl, r0
   27f16:	4658      	mov	r0, fp
   27f18:	f004 f96b 	bl	2c1f2 <net_buf_simple_tailroom>
   27f1c:	4582      	cmp	sl, r0
   27f1e:	d212      	bcs.n	27f46 <find_type_cb+0xb6>
   27f20:	6868      	ldr	r0, [r5, #4]
   27f22:	f7ff fed2 	bl	27cca <net_buf_frags_len>
   27f26:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   27f2a:	1a18      	subs	r0, r3, r0
	if (!len) {
   27f2c:	b998      	cbnz	r0, 27f56 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   27f2e:	686b      	ldr	r3, [r5, #4]
   27f30:	7998      	ldrb	r0, [r3, #6]
   27f32:	f7f7 fe6f 	bl	1fc14 <net_buf_pool_get>
   27f36:	2200      	movs	r2, #0
   27f38:	2300      	movs	r3, #0
   27f3a:	f003 fffc 	bl	2bf36 <net_buf_alloc_fixed>
		if (!frag) {
   27f3e:	4604      	mov	r4, r0
   27f40:	b928      	cbnz	r0, 27f4e <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
   27f42:	4620      	mov	r0, r4
   27f44:	e7ce      	b.n	27ee4 <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   27f46:	4658      	mov	r0, fp
   27f48:	f004 f953 	bl	2c1f2 <net_buf_simple_tailroom>
   27f4c:	e7ee      	b.n	27f2c <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
   27f4e:	4601      	mov	r1, r0
   27f50:	6868      	ldr	r0, [r5, #4]
   27f52:	f004 f891 	bl	2c078 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   27f56:	2300      	movs	r3, #0
   27f58:	9300      	str	r3, [sp, #0]
   27f5a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   27f5e:	4639      	mov	r1, r7
   27f60:	2310      	movs	r3, #16
   27f62:	aa02      	add	r2, sp, #8
   27f64:	4640      	mov	r0, r8
   27f66:	47c8      	blx	r9
	if (read < 0) {
   27f68:	1e07      	subs	r7, r0, #0
   27f6a:	db22      	blt.n	27fb2 <find_type_cb+0x122>
	if (read != data->value_len) {
   27f6c:	7c2a      	ldrb	r2, [r5, #16]
   27f6e:	68e8      	ldr	r0, [r5, #12]
   27f70:	42ba      	cmp	r2, r7
   27f72:	d01a      	beq.n	27faa <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   27f74:	4601      	mov	r1, r0
   27f76:	a80b      	add	r0, sp, #44	; 0x2c
   27f78:	f7fe ffec 	bl	26f54 <bt_uuid_create>
   27f7c:	b1c8      	cbz	r0, 27fb2 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   27f7e:	b2fa      	uxtb	r2, r7
   27f80:	a902      	add	r1, sp, #8
   27f82:	a806      	add	r0, sp, #24
   27f84:	f7fe ffe6 	bl	26f54 <bt_uuid_create>
   27f88:	b198      	cbz	r0, 27fb2 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   27f8a:	a906      	add	r1, sp, #24
   27f8c:	a80b      	add	r0, sp, #44	; 0x2c
   27f8e:	f7fe ffb7 	bl	26f00 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   27f92:	b970      	cbnz	r0, 27fb2 <find_type_cb+0x122>
	data->err = 0x00;
   27f94:	2300      	movs	r3, #0
   27f96:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
   27f98:	2104      	movs	r1, #4
   27f9a:	f104 0008 	add.w	r0, r4, #8
   27f9e:	f004 f87c 	bl	2c09a <net_buf_simple_add>
   27fa2:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   27fa4:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   27fa6:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   27fa8:	e79b      	b.n	27ee2 <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
   27faa:	a902      	add	r1, sp, #8
   27fac:	f7fe fce9 	bl	26982 <memcmp>
   27fb0:	e7ef      	b.n	27f92 <find_type_cb+0x102>
	data->group = NULL;
   27fb2:	2300      	movs	r3, #0
   27fb4:	60ab      	str	r3, [r5, #8]
   27fb6:	e794      	b.n	27ee2 <find_type_cb+0x52>

00027fb8 <find_info_cb>:
{
   27fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27fba:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   27fbc:	6817      	ldr	r7, [r2, #0]
{
   27fbe:	4605      	mov	r5, r0
   27fc0:	460e      	mov	r6, r1
   27fc2:	4614      	mov	r4, r2
	if (!data->rsp) {
   27fc4:	b963      	cbnz	r3, 27fe0 <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27fc6:	6850      	ldr	r0, [r2, #4]
   27fc8:	2101      	movs	r1, #1
   27fca:	3008      	adds	r0, #8
   27fcc:	f004 f865 	bl	2c09a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27fd0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27fd2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27fd4:	781b      	ldrb	r3, [r3, #0]
   27fd6:	2b00      	cmp	r3, #0
   27fd8:	bf0c      	ite	eq
   27fda:	2301      	moveq	r3, #1
   27fdc:	2302      	movne	r3, #2
   27fde:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27fe0:	68a3      	ldr	r3, [r4, #8]
   27fe2:	781b      	ldrb	r3, [r3, #0]
   27fe4:	2b01      	cmp	r3, #1
   27fe6:	d003      	beq.n	27ff0 <find_info_cb+0x38>
   27fe8:	2b02      	cmp	r3, #2
   27fea:	d019      	beq.n	28020 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   27fec:	2000      	movs	r0, #0
   27fee:	e016      	b.n	2801e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27ff0:	682b      	ldr	r3, [r5, #0]
   27ff2:	781b      	ldrb	r3, [r3, #0]
   27ff4:	2b00      	cmp	r3, #0
   27ff6:	d1f9      	bne.n	27fec <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27ff8:	6860      	ldr	r0, [r4, #4]
   27ffa:	2104      	movs	r1, #4
   27ffc:	3008      	adds	r0, #8
   27ffe:	f004 f84c 	bl	2c09a <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   28002:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   28004:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   28006:	885b      	ldrh	r3, [r3, #2]
   28008:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2800a:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2800c:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2800e:	899b      	ldrh	r3, [r3, #12]
   28010:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   28014:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   28016:	2804      	cmp	r0, #4
   28018:	bf94      	ite	ls
   2801a:	2000      	movls	r0, #0
   2801c:	2001      	movhi	r0, #1
}
   2801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   28020:	682b      	ldr	r3, [r5, #0]
   28022:	781b      	ldrb	r3, [r3, #0]
   28024:	2b02      	cmp	r3, #2
   28026:	d1e1      	bne.n	27fec <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   28028:	6860      	ldr	r0, [r4, #4]
   2802a:	2112      	movs	r1, #18
   2802c:	3008      	adds	r0, #8
   2802e:	f004 f834 	bl	2c09a <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   28032:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   28034:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   28036:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   28038:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2803c:	3101      	adds	r1, #1
   2803e:	f7fe fcb0 	bl	269a2 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   28042:	6863      	ldr	r3, [r4, #4]
   28044:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   28048:	899b      	ldrh	r3, [r3, #12]
   2804a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2804c:	2812      	cmp	r0, #18
   2804e:	e7e3      	b.n	28018 <find_info_cb+0x60>

00028050 <attr_read_group_cb>:
	if (!data->rsp->len) {
   28050:	68d0      	ldr	r0, [r2, #12]
   28052:	7803      	ldrb	r3, [r0, #0]
   28054:	3104      	adds	r1, #4
   28056:	b913      	cbnz	r3, 2805e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   28058:	7001      	strb	r1, [r0, #0]
	return true;
   2805a:	2001      	movs	r0, #1
}
   2805c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2805e:	428b      	cmp	r3, r1
   28060:	d0fb      	beq.n	2805a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   28062:	6891      	ldr	r1, [r2, #8]
   28064:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   28066:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   28068:	3b04      	subs	r3, #4
   2806a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2806c:	6110      	str	r0, [r2, #16]
		return false;
   2806e:	4770      	bx	lr

00028070 <att_exec_write_req>:
   28070:	2006      	movs	r0, #6
   28072:	4770      	bx	lr

00028074 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28074:	30c0      	adds	r0, #192	; 0xc0
   28076:	f3bf 8f5b 	dmb	ish
   2807a:	e850 3f00 	ldrex	r3, [r0]
   2807e:	f023 0302 	bic.w	r3, r3, #2
   28082:	e840 3200 	strex	r2, r3, [r0]
   28086:	2a00      	cmp	r2, #0
   28088:	d1f7      	bne.n	2807a <chan_cfm_sent+0x6>
   2808a:	f3bf 8f5b 	dmb	ish
}
   2808e:	4770      	bx	lr

00028090 <chan_rsp_sent>:
   28090:	30c0      	adds	r0, #192	; 0xc0
   28092:	f3bf 8f5b 	dmb	ish
   28096:	e850 3f00 	ldrex	r3, [r0]
   2809a:	f023 0301 	bic.w	r3, r3, #1
   2809e:	e840 3200 	strex	r2, r3, [r0]
   280a2:	2a00      	cmp	r2, #0
   280a4:	d1f7      	bne.n	28096 <chan_rsp_sent+0x6>
   280a6:	f3bf 8f5b 	dmb	ish
}
   280aa:	4770      	bx	lr

000280ac <att_get>:
{
   280ac:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   280ae:	7b43      	ldrb	r3, [r0, #13]
   280b0:	2b07      	cmp	r3, #7
   280b2:	d001      	beq.n	280b8 <att_get+0xc>
		return NULL;
   280b4:	2000      	movs	r0, #0
}
   280b6:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   280b8:	2104      	movs	r1, #4
   280ba:	f7ff fdb5 	bl	27c28 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   280be:	2800      	cmp	r0, #0
   280c0:	d0f8      	beq.n	280b4 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   280c2:	f3bf 8f5b 	dmb	ish
   280c6:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   280ca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   280ce:	075b      	lsls	r3, r3, #29
   280d0:	d4f0      	bmi.n	280b4 <att_get+0x8>
	return att_chan->att;
   280d2:	f850 0c08 	ldr.w	r0, [r0, #-8]
   280d6:	e7ee      	b.n	280b6 <att_get+0xa>

000280d8 <write_cb>:
{
   280d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   280da:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   280dc:	4601      	mov	r1, r0
{
   280de:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   280e0:	222a      	movs	r2, #42	; 0x2a
   280e2:	6820      	ldr	r0, [r4, #0]
   280e4:	f000 fe3c 	bl	28d60 <bt_gatt_check_perm>
   280e8:	4605      	mov	r5, r0
   280ea:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   280ec:	bb00      	cbnz	r0, 28130 <write_cb+0x58>
	if (!data->req) {
   280ee:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   280f0:	68b7      	ldr	r7, [r6, #8]
   280f2:	68e2      	ldr	r2, [r4, #12]
   280f4:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   280f6:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   280f8:	bf14      	ite	ne
   280fa:	2300      	movne	r3, #0
   280fc:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   280fe:	9301      	str	r3, [sp, #4]
   28100:	8a63      	ldrh	r3, [r4, #18]
   28102:	9300      	str	r3, [sp, #0]
   28104:	4631      	mov	r1, r6
   28106:	8a23      	ldrh	r3, [r4, #16]
   28108:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2810a:	1e03      	subs	r3, r0, #0
   2810c:	db05      	blt.n	2811a <write_cb+0x42>
   2810e:	8a22      	ldrh	r2, [r4, #16]
   28110:	4293      	cmp	r3, r2
   28112:	d10b      	bne.n	2812c <write_cb+0x54>
	data->err = 0U;
   28114:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   28116:	2501      	movs	r5, #1
   28118:	e005      	b.n	28126 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   2811a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2811e:	d305      	bcc.n	2812c <write_cb+0x54>
		return -err;
   28120:	425b      	negs	r3, r3
   28122:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   28124:	7523      	strb	r3, [r4, #20]
}
   28126:	4628      	mov	r0, r5
   28128:	b003      	add	sp, #12
   2812a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2812c:	230e      	movs	r3, #14
   2812e:	e7f9      	b.n	28124 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   28130:	2500      	movs	r5, #0
   28132:	e7f8      	b.n	28126 <write_cb+0x4e>

00028134 <read_cb>:
{
   28134:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   28138:	f8d2 8000 	ldr.w	r8, [r2]
{
   2813c:	4606      	mov	r6, r0
	data->err = 0x00;
   2813e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   28140:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   28144:	7317      	strb	r7, [r2, #12]
{
   28146:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28148:	4631      	mov	r1, r6
   2814a:	2215      	movs	r2, #21
   2814c:	f000 fe08 	bl	28d60 <bt_gatt_check_perm>
   28150:	4604      	mov	r4, r0
   28152:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   28154:	b9a0      	cbnz	r0, 28180 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28156:	e9cd 0000 	strd	r0, r0, [sp]
   2815a:	88ab      	ldrh	r3, [r5, #4]
   2815c:	68aa      	ldr	r2, [r5, #8]
   2815e:	4631      	mov	r1, r6
   28160:	4640      	mov	r0, r8
   28162:	f7ff fe0a 	bl	27d7a <att_chan_read>
	if (ret < 0) {
   28166:	1e03      	subs	r3, r0, #0
   28168:	da0c      	bge.n	28184 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2816a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2816e:	bf26      	itte	cs
   28170:	425b      	negcs	r3, r3
   28172:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   28174:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   28176:	732b      	strb	r3, [r5, #12]
}
   28178:	4620      	mov	r0, r4
   2817a:	b002      	add	sp, #8
   2817c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   28180:	463c      	mov	r4, r7
   28182:	e7f9      	b.n	28178 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   28184:	2401      	movs	r4, #1
   28186:	e7f7      	b.n	28178 <read_cb+0x44>

00028188 <chan_req_send>:
{
   28188:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2818a:	690e      	ldr	r6, [r1, #16]
{
   2818c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2818e:	4630      	mov	r0, r6
{
   28190:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28192:	f7ff fd9a 	bl	27cca <net_buf_frags_len>
   28196:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   2819a:	4283      	cmp	r3, r0
   2819c:	d317      	bcc.n	281ce <chan_req_send+0x46>
	chan->req = req;
   2819e:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   281a2:	f106 0008 	add.w	r0, r6, #8
   281a6:	f004 f820 	bl	2c1ea <net_buf_simple_headroom>
	state->len = buf->len;
   281aa:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   281ac:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   281ae:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   281b0:	6920      	ldr	r0, [r4, #16]
   281b2:	f003 ff4c 	bl	2c04e <net_buf_ref>
   281b6:	2200      	movs	r2, #0
   281b8:	4601      	mov	r1, r0
   281ba:	4628      	mov	r0, r5
   281bc:	f7e1 fd5c 	bl	9c78 <chan_send>
	if (err) {
   281c0:	4605      	mov	r5, r0
   281c2:	b110      	cbz	r0, 281ca <chan_req_send+0x42>
		net_buf_unref(req->buf);
   281c4:	6920      	ldr	r0, [r4, #16]
   281c6:	f7f7 fde1 	bl	1fd8c <net_buf_unref>
}
   281ca:	4628      	mov	r0, r5
   281cc:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   281ce:	f06f 0523 	mvn.w	r5, #35	; 0x23
   281d2:	e7fa      	b.n	281ca <chan_req_send+0x42>

000281d4 <bt_att_chan_req_send>:
{
   281d4:	b570      	push	{r4, r5, r6, lr}
   281d6:	4604      	mov	r4, r0
   281d8:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   281da:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   281de:	2200      	movs	r2, #0
   281e0:	2300      	movs	r3, #0
   281e2:	4630      	mov	r0, r6
   281e4:	f7fb fc8c 	bl	23b00 <z_impl_k_sem_take>
   281e8:	2800      	cmp	r0, #0
   281ea:	db0a      	blt.n	28202 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   281ec:	4620      	mov	r0, r4
   281ee:	4629      	mov	r1, r5
   281f0:	f7ff ffca 	bl	28188 <chan_req_send>
	if (err < 0) {
   281f4:	1e04      	subs	r4, r0, #0
   281f6:	da02      	bge.n	281fe <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   281f8:	4630      	mov	r0, r6
   281fa:	f7fb fc5b 	bl	23ab4 <z_impl_k_sem_give>
}
   281fe:	4620      	mov	r0, r4
   28200:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   28202:	f06f 040a 	mvn.w	r4, #10
   28206:	e7fa      	b.n	281fe <bt_att_chan_req_send+0x2a>

00028208 <bt_att_status>:
{
   28208:	b538      	push	{r3, r4, r5, lr}
   2820a:	f3bf 8f5b 	dmb	ish
   2820e:	680b      	ldr	r3, [r1, #0]
   28210:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   28214:	07db      	lsls	r3, r3, #31
{
   28216:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   28218:	d518      	bpl.n	2824c <bt_att_status+0x44>
	if (chan->req) {
   2821a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2821e:	b9ab      	cbnz	r3, 2824c <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   28220:	f850 0c08 	ldr.w	r0, [r0, #-8]
   28224:	3004      	adds	r0, #4
   28226:	f7ff fd2b 	bl	27c80 <sys_slist_get>
	if (!node) {
   2822a:	4604      	mov	r4, r0
   2822c:	b170      	cbz	r0, 2824c <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2822e:	4601      	mov	r1, r0
   28230:	f1a5 0008 	sub.w	r0, r5, #8
   28234:	f7ff ffce 	bl	281d4 <bt_att_chan_req_send>
   28238:	2800      	cmp	r0, #0
   2823a:	da07      	bge.n	2824c <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   2823c:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   28240:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   28242:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   28244:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   28246:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   28248:	b902      	cbnz	r2, 2824c <bt_att_status+0x44>
	list->tail = node;
   2824a:	609c      	str	r4, [r3, #8]
}
   2824c:	bd38      	pop	{r3, r4, r5, pc}

0002824e <bt_att_chan_send>:
{
   2824e:	b570      	push	{r4, r5, r6, lr}
   28250:	4604      	mov	r4, r0
   28252:	460e      	mov	r6, r1
	if (!cb) {
   28254:	4615      	mov	r5, r2
   28256:	b132      	cbz	r2, 28266 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   28258:	462a      	mov	r2, r5
   2825a:	4631      	mov	r1, r6
   2825c:	4620      	mov	r0, r4
}
   2825e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   28262:	f7e1 bd09 	b.w	9c78 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   28266:	2200      	movs	r2, #0
   28268:	2300      	movs	r3, #0
   2826a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2826e:	f7fb fc47 	bl	23b00 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   28272:	2800      	cmp	r0, #0
   28274:	daf0      	bge.n	28258 <bt_att_chan_send+0xa>
}
   28276:	f06f 000a 	mvn.w	r0, #10
   2827a:	bd70      	pop	{r4, r5, r6, pc}

0002827c <bt_att_chan_send_rsp>:
{
   2827c:	b538      	push	{r3, r4, r5, lr}
   2827e:	4604      	mov	r4, r0
   28280:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   28282:	f7ff ffe4 	bl	2824e <bt_att_chan_send>
	if (err) {
   28286:	b130      	cbz	r0, 28296 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   28288:	4629      	mov	r1, r5
   2828a:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   2828e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   28292:	f003 becf 	b.w	2c034 <net_buf_put>
}
   28296:	bd38      	pop	{r3, r4, r5, pc}

00028298 <process_queue>:
{
   28298:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2829a:	2200      	movs	r2, #0
{
   2829c:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2829e:	2300      	movs	r3, #0
   282a0:	4608      	mov	r0, r1
{
   282a2:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   282a4:	f003 fe4c 	bl	2bf40 <net_buf_get>
	if (buf) {
   282a8:	4605      	mov	r5, r0
   282aa:	b160      	cbz	r0, 282c6 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   282ac:	4601      	mov	r1, r0
   282ae:	2200      	movs	r2, #0
   282b0:	4620      	mov	r0, r4
   282b2:	f7e1 fce1 	bl	9c78 <chan_send>
		if (err) {
   282b6:	4604      	mov	r4, r0
   282b8:	b118      	cbz	r0, 282c2 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   282ba:	4629      	mov	r1, r5
   282bc:	4630      	mov	r0, r6
   282be:	f004 ffd7 	bl	2d270 <k_queue_prepend>
}
   282c2:	4620      	mov	r0, r4
   282c4:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   282c6:	f06f 0401 	mvn.w	r4, #1
   282ca:	e7fa      	b.n	282c2 <process_queue+0x2a>

000282cc <bt_att_sent>:
{
   282cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   282ce:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   282d2:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   282d6:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   282d8:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   282dc:	b10b      	cbz	r3, 282e2 <bt_att_sent+0x16>
		chan->sent(chan);
   282de:	4638      	mov	r0, r7
   282e0:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   282e2:	f3bf 8f5b 	dmb	ish
   282e6:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   282ea:	e853 2f00 	ldrex	r2, [r3]
   282ee:	f022 0210 	bic.w	r2, r2, #16
   282f2:	e843 2100 	strex	r1, r2, [r3]
   282f6:	2900      	cmp	r1, #0
   282f8:	d1f7      	bne.n	282ea <bt_att_sent+0x1e>
   282fa:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   282fe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   28302:	b98b      	cbnz	r3, 28328 <bt_att_sent+0x5c>
   28304:	686b      	ldr	r3, [r5, #4]
   28306:	b17b      	cbz	r3, 28328 <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28308:	1d28      	adds	r0, r5, #4
   2830a:	f7ff fcb9 	bl	27c80 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2830e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28310:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28312:	4638      	mov	r0, r7
   28314:	f7ff ff38 	bl	28188 <chan_req_send>
   28318:	2800      	cmp	r0, #0
   2831a:	da17      	bge.n	2834c <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   2831c:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2831e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   28320:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   28322:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   28324:	b903      	cbnz	r3, 28328 <bt_att_sent+0x5c>
	list->tail = node;
   28326:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   28328:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   2832c:	4638      	mov	r0, r7
   2832e:	f7ff ffb3 	bl	28298 <process_queue>
	if (!err) {
   28332:	b158      	cbz	r0, 2834c <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   28334:	f105 010c 	add.w	r1, r5, #12
   28338:	4638      	mov	r0, r7
   2833a:	f7ff ffad 	bl	28298 <process_queue>
	if (!err) {
   2833e:	b128      	cbz	r0, 2834c <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   28340:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   28344:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   28348:	f7fb bbb4 	b.w	23ab4 <z_impl_k_sem_give>
   2834c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002834e <bt_att_chan_create_pdu>:
{
   2834e:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   28350:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   28354:	3201      	adds	r2, #1
   28356:	429a      	cmp	r2, r3
{
   28358:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2835a:	d81b      	bhi.n	28394 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   2835c:	4608      	mov	r0, r1
   2835e:	f7ff fcd4 	bl	27d0a <att_op_get_type>
   28362:	2802      	cmp	r0, #2
   28364:	d001      	beq.n	2836a <bt_att_chan_create_pdu+0x1c>
   28366:	2804      	cmp	r0, #4
   28368:	d10f      	bne.n	2838a <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   2836a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2836e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   28370:	2100      	movs	r1, #0
   28372:	4608      	mov	r0, r1
   28374:	f7ff fbff 	bl	27b76 <bt_l2cap_create_pdu_timeout>
   28378:	4604      	mov	r4, r0
	if (!buf) {
   2837a:	b120      	cbz	r0, 28386 <bt_att_chan_create_pdu+0x38>
	hdr = net_buf_add(buf, sizeof(*hdr));
   2837c:	2101      	movs	r1, #1
   2837e:	3008      	adds	r0, #8
   28380:	f003 fe8b 	bl	2c09a <net_buf_simple_add>
	hdr->code = op;
   28384:	7005      	strb	r5, [r0, #0]
}
   28386:	4620      	mov	r0, r4
   28388:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   2838a:	f04f 32ff 	mov.w	r2, #4294967295
   2838e:	f04f 33ff 	mov.w	r3, #4294967295
   28392:	e7ed      	b.n	28370 <bt_att_chan_create_pdu+0x22>
		return NULL;
   28394:	2400      	movs	r4, #0
   28396:	e7f6      	b.n	28386 <bt_att_chan_create_pdu+0x38>

00028398 <bt_att_create_pdu>:
{
   28398:	b570      	push	{r4, r5, r6, lr}
   2839a:	460e      	mov	r6, r1
   2839c:	4615      	mov	r5, r2
	att = att_get(conn);
   2839e:	f7ff fe85 	bl	280ac <att_get>
	if (!att) {
   283a2:	b170      	cbz	r0, 283c2 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   283a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   283a6:	b163      	cbz	r3, 283c2 <bt_att_create_pdu+0x2a>
   283a8:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   283ac:	d009      	beq.n	283c2 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   283ae:	681b      	ldr	r3, [r3, #0]
   283b0:	b10b      	cbz	r3, 283b6 <bt_att_create_pdu+0x1e>
   283b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   283b6:	1c6a      	adds	r2, r5, #1
   283b8:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   283bc:	428a      	cmp	r2, r1
   283be:	d902      	bls.n	283c6 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   283c0:	b93b      	cbnz	r3, 283d2 <bt_att_create_pdu+0x3a>
}
   283c2:	2000      	movs	r0, #0
   283c4:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   283c6:	462a      	mov	r2, r5
   283c8:	4631      	mov	r1, r6
}
   283ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   283ce:	f7ff bfbe 	b.w	2834e <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   283d2:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
   283d6:	d004      	beq.n	283e2 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   283d8:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   283dc:	b10c      	cbz	r4, 283e2 <bt_att_create_pdu+0x4a>
   283de:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
   283e2:	4618      	mov	r0, r3
   283e4:	4623      	mov	r3, r4
   283e6:	e7e7      	b.n	283b8 <bt_att_create_pdu+0x20>

000283e8 <att_read_blob_req>:
{
   283e8:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   283ea:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   283ec:	8813      	ldrh	r3, [r2, #0]
   283ee:	8852      	ldrh	r2, [r2, #2]
   283f0:	9200      	str	r2, [sp, #0]
   283f2:	210c      	movs	r1, #12
   283f4:	220d      	movs	r2, #13
   283f6:	f7e1 fe99 	bl	a12c <att_read_rsp>
}
   283fa:	b003      	add	sp, #12
   283fc:	f85d fb04 	ldr.w	pc, [sp], #4

00028400 <att_read_req>:
{
   28400:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   28402:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   28404:	2200      	movs	r2, #0
   28406:	881b      	ldrh	r3, [r3, #0]
   28408:	9200      	str	r2, [sp, #0]
   2840a:	210a      	movs	r1, #10
   2840c:	220b      	movs	r2, #11
   2840e:	f7e1 fe8d 	bl	a12c <att_read_rsp>
}
   28412:	b003      	add	sp, #12
   28414:	f85d fb04 	ldr.w	pc, [sp], #4

00028418 <bt_att_init>:
	bt_gatt_init();
   28418:	f7e2 bb98 	b.w	ab4c <bt_gatt_init>

0002841c <att_req_destroy>:
{
   2841c:	b510      	push	{r4, lr}
   2841e:	4604      	mov	r4, r0
	if (req->buf) {
   28420:	6900      	ldr	r0, [r0, #16]
   28422:	b108      	cbz	r0, 28428 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   28424:	f7f7 fcb2 	bl	1fd8c <net_buf_unref>
	if (req->destroy) {
   28428:	68a3      	ldr	r3, [r4, #8]
   2842a:	b10b      	cbz	r3, 28430 <att_req_destroy+0x14>
		req->destroy(req);
   2842c:	4620      	mov	r0, r4
   2842e:	4798      	blx	r3
	bt_att_req_free(req);
   28430:	4620      	mov	r0, r4
}
   28432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   28436:	f7e2 b81d 	b.w	a474 <bt_att_req_free>

0002843a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2843a:	898a      	ldrh	r2, [r1, #12]
   2843c:	6889      	ldr	r1, [r1, #8]
   2843e:	2300      	movs	r3, #0
   28440:	f7e2 b824 	b.w	a48c <att_handle_rsp>

00028444 <att_chan_detach>:
{
   28444:	b570      	push	{r4, r5, r6, lr}
   28446:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   28448:	6800      	ldr	r0, [r0, #0]
   2844a:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   2844e:	3024      	adds	r0, #36	; 0x24
   28450:	f7ff fc20 	bl	27c94 <sys_slist_find_and_remove>
   28454:	2508      	movs	r5, #8
		k_sem_give(&chan->tx_sem);
   28456:	f504 7688 	add.w	r6, r4, #272	; 0x110
   2845a:	4630      	mov	r0, r6
   2845c:	f7fb fb2a 	bl	23ab4 <z_impl_k_sem_give>
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
   28460:	3d01      	subs	r5, #1
   28462:	d1fa      	bne.n	2845a <att_chan_detach+0x16>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   28464:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   28468:	2200      	movs	r2, #0
   2846a:	2300      	movs	r3, #0
   2846c:	4628      	mov	r0, r5
   2846e:	f003 fd67 	bl	2bf40 <net_buf_get>
   28472:	4602      	mov	r2, r0
   28474:	b950      	cbnz	r0, 2848c <att_chan_detach+0x48>
	if (chan->req) {
   28476:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   2847a:	b123      	cbz	r3, 28486 <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   2847c:	4601      	mov	r1, r0
   2847e:	230e      	movs	r3, #14
   28480:	4620      	mov	r0, r4
   28482:	f7e2 f803 	bl	a48c <att_handle_rsp>
	chan->att = NULL;
   28486:	2300      	movs	r3, #0
   28488:	6023      	str	r3, [r4, #0]
}
   2848a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   2848c:	f7f7 fc7e 	bl	1fd8c <net_buf_unref>
   28490:	e7ea      	b.n	28468 <att_chan_detach+0x24>

00028492 <bt_att_disconnected>:
{
   28492:	b538      	push	{r3, r4, r5, lr}
   28494:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   28496:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   2849a:	f7ff ffd3 	bl	28444 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   2849e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   284a0:	b93b      	cbnz	r3, 284b2 <bt_att_disconnected+0x20>
	att_reset(att);
   284a2:	4628      	mov	r0, r5
   284a4:	f7e2 f892 	bl	a5cc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   284a8:	6820      	ldr	r0, [r4, #0]
}
   284aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   284ae:	f7e2 bed3 	b.w	b258 <bt_gatt_disconnected>
}
   284b2:	bd38      	pop	{r3, r4, r5, pc}

000284b4 <att_timeout>:
{
   284b4:	b570      	push	{r4, r5, r6, lr}
   284b6:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   284b8:	f850 6de0 	ldr.w	r6, [r0, #-224]!
	att_chan_detach(chan);
   284bc:	f7ff ffc2 	bl	28444 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   284c0:	6a75      	ldr	r5, [r6, #36]	; 0x24
   284c2:	b945      	cbnz	r5, 284d6 <att_timeout+0x22>
	att_reset(att);
   284c4:	4630      	mov	r0, r6
   284c6:	f7e2 f881 	bl	a5cc <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   284ca:	f854 0cd8 	ldr.w	r0, [r4, #-216]
   284ce:	f7e2 fec3 	bl	b258 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   284d2:	f844 5cd8 	str.w	r5, [r4, #-216]
}
   284d6:	bd70      	pop	{r4, r5, r6, pc}

000284d8 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   284d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   284dc:	4605      	mov	r5, r0
   284de:	460e      	mov	r6, r1
   284e0:	4614      	mov	r4, r2
   284e2:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   284e4:	f7ff fde2 	bl	280ac <att_get>
	if (!att) {
   284e8:	4607      	mov	r7, r0
   284ea:	b938      	cbnz	r0, 284fc <bt_att_send+0x24>
		net_buf_unref(buf);
   284ec:	4630      	mov	r0, r6
   284ee:	f7f7 fc4d 	bl	1fd8c <net_buf_unref>
		return -ENOTCONN;
   284f2:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   284f6:	b002      	add	sp, #8
   284f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   284fc:	b144      	cbz	r4, 28510 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   284fe:	f8cd 8000 	str.w	r8, [sp]
   28502:	4623      	mov	r3, r4
   28504:	4632      	mov	r2, r6
   28506:	2104      	movs	r1, #4
   28508:	4628      	mov	r0, r5
   2850a:	f7ff fb37 	bl	27b7c <bt_l2cap_send_cb>
   2850e:	e7f2      	b.n	284f6 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28510:	6a44      	ldr	r4, [r0, #36]	; 0x24
   28512:	b184      	cbz	r4, 28536 <bt_att_send+0x5e>
   28514:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   28518:	d00f      	beq.n	2853a <bt_att_send+0x62>
   2851a:	6824      	ldr	r4, [r4, #0]
   2851c:	b10c      	cbz	r4, 28522 <bt_att_send+0x4a>
   2851e:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   28522:	2000      	movs	r0, #0
   28524:	b95d      	cbnz	r5, 2853e <bt_att_send+0x66>
	if (ret < 0) {
   28526:	b188      	cbz	r0, 2854c <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   28528:	f107 000c 	add.w	r0, r7, #12
   2852c:	4631      	mov	r1, r6
   2852e:	f003 fd81 	bl	2c034 <net_buf_put>
	return 0;
   28532:	4628      	mov	r0, r5
   28534:	e7df      	b.n	284f6 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28536:	4625      	mov	r5, r4
   28538:	e7f3      	b.n	28522 <bt_att_send+0x4a>
   2853a:	462c      	mov	r4, r5
   2853c:	e7f1      	b.n	28522 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   2853e:	2200      	movs	r2, #0
   28540:	4631      	mov	r1, r6
   28542:	4628      	mov	r0, r5
   28544:	f7ff fe83 	bl	2824e <bt_att_chan_send>
		if (ret >= 0) {
   28548:	2800      	cmp	r0, #0
   2854a:	db01      	blt.n	28550 <bt_att_send+0x78>
	return 0;
   2854c:	2000      	movs	r0, #0
   2854e:	e7d2      	b.n	284f6 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28550:	b154      	cbz	r4, 28568 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28552:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   28556:	d004      	beq.n	28562 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28558:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   2855c:	b10b      	cbz	r3, 28562 <bt_att_send+0x8a>
   2855e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   28562:	4625      	mov	r5, r4
   28564:	461c      	mov	r4, r3
   28566:	e7dd      	b.n	28524 <bt_att_send+0x4c>
   28568:	4623      	mov	r3, r4
   2856a:	e7fa      	b.n	28562 <bt_att_send+0x8a>

0002856c <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2856c:	b570      	push	{r4, r5, r6, lr}
   2856e:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   28570:	f7ff fd9c 	bl	280ac <att_get>
	if (!att) {
   28574:	4605      	mov	r5, r0
   28576:	b930      	cbnz	r0, 28586 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   28578:	6920      	ldr	r0, [r4, #16]
   2857a:	f7f7 fc07 	bl	1fd8c <net_buf_unref>
		req->buf = NULL;
   2857e:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   28580:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   28584:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28586:	6a43      	ldr	r3, [r0, #36]	; 0x24
   28588:	b153      	cbz	r3, 285a0 <bt_att_req_send+0x34>
   2858a:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   2858e:	d007      	beq.n	285a0 <bt_att_req_send+0x34>
   28590:	681e      	ldr	r6, [r3, #0]
   28592:	b10e      	cbz	r6, 28598 <bt_att_req_send+0x2c>
   28594:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   28598:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   2859c:	b143      	cbz	r3, 285b0 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2859e:	b96e      	cbnz	r6, 285bc <bt_att_req_send+0x50>
	parent->next = child;
   285a0:	2000      	movs	r0, #0
   285a2:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   285a4:	68ab      	ldr	r3, [r5, #8]
   285a6:	b9a3      	cbnz	r3, 285d2 <bt_att_req_send+0x66>
	list->head = node;
   285a8:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   285ac:	4618      	mov	r0, r3
}
   285ae:	e7e9      	b.n	28584 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   285b0:	4621      	mov	r1, r4
   285b2:	f7ff fe0f 	bl	281d4 <bt_att_chan_req_send>
			if (ret >= 0) {
   285b6:	2800      	cmp	r0, #0
   285b8:	dbf1      	blt.n	2859e <bt_att_req_send+0x32>
   285ba:	e7e3      	b.n	28584 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   285bc:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   285c0:	d004      	beq.n	285cc <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   285c2:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   285c6:	b10b      	cbz	r3, 285cc <bt_att_req_send+0x60>
   285c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   285cc:	4630      	mov	r0, r6
   285ce:	461e      	mov	r6, r3
   285d0:	e7e2      	b.n	28598 <bt_att_req_send+0x2c>
	parent->next = child;
   285d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   285d4:	60ac      	str	r4, [r5, #8]
}
   285d6:	e7d5      	b.n	28584 <bt_att_req_send+0x18>

000285d8 <gatt_ccc_changed>:
{
   285d8:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   285da:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   285dc:	895a      	ldrh	r2, [r3, #10]
   285de:	428a      	cmp	r2, r1
   285e0:	d003      	beq.n	285ea <gatt_ccc_changed+0x12>
		ccc->value = value;
   285e2:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   285e4:	68db      	ldr	r3, [r3, #12]
   285e6:	b103      	cbz	r3, 285ea <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   285e8:	4718      	bx	r3
}
   285ea:	4770      	bx	lr

000285ec <gatt_indicate_rsp>:
{
   285ec:	b410      	push	{r4}
   285ee:	9b01      	ldr	r3, [sp, #4]
   285f0:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   285f2:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   285f6:	4623      	mov	r3, r4
}
   285f8:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   285fa:	4718      	bx	r3

000285fc <match_uuid>:
	data->attr = attr;
   285fc:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   285fe:	8091      	strh	r1, [r2, #4]
}
   28600:	2000      	movs	r0, #0
   28602:	4770      	bx	lr

00028604 <ccc_set_cb>:
}
   28604:	2000      	movs	r0, #0
   28606:	4770      	bx	lr

00028608 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   28608:	2207      	movs	r2, #7
   2860a:	f7fe b9ca 	b.w	269a2 <memcpy>

0002860e <clear_ccc_cfg>:
{
   2860e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   28610:	2500      	movs	r5, #0
{
   28612:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   28614:	4669      	mov	r1, sp
   28616:	3001      	adds	r0, #1
   28618:	9500      	str	r5, [sp, #0]
   2861a:	f8cd 5003 	str.w	r5, [sp, #3]
   2861e:	f7ff fff3 	bl	28608 <bt_addr_le_copy>
	cfg->id = 0U;
   28622:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   28624:	8125      	strh	r5, [r4, #8]
}
   28626:	b003      	add	sp, #12
   28628:	bd30      	pop	{r4, r5, pc}

0002862a <write_name>:
{
   2862a:	b570      	push	{r4, r5, r6, lr}
   2862c:	b088      	sub	sp, #32
   2862e:	4615      	mov	r5, r2
   28630:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   28634:	2100      	movs	r1, #0
   28636:	221c      	movs	r2, #28
   28638:	a801      	add	r0, sp, #4
{
   2863a:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2863c:	9100      	str	r1, [sp, #0]
   2863e:	f7fe f9db 	bl	269f8 <memset>
	if (offset) {
   28642:	b966      	cbnz	r6, 2865e <write_name+0x34>
	if (len >= sizeof(value)) {
   28644:	2c1f      	cmp	r4, #31
   28646:	d80d      	bhi.n	28664 <write_name+0x3a>
	memcpy(value, buf, len);
   28648:	4622      	mov	r2, r4
   2864a:	4629      	mov	r1, r5
   2864c:	4668      	mov	r0, sp
   2864e:	f7fe f9a8 	bl	269a2 <memcpy>
	bt_set_name(value);
   28652:	4668      	mov	r0, sp
   28654:	f7df ff0e 	bl	8474 <bt_set_name>
	return len;
   28658:	4620      	mov	r0, r4
}
   2865a:	b008      	add	sp, #32
   2865c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2865e:	f06f 0006 	mvn.w	r0, #6
   28662:	e7fa      	b.n	2865a <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   28664:	f06f 000c 	mvn.w	r0, #12
   28668:	e7f7      	b.n	2865a <write_name+0x30>

0002866a <gen_hash_m>:
{
   2866a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2866c:	6807      	ldr	r7, [r0, #0]
   2866e:	783d      	ldrb	r5, [r7, #0]
{
   28670:	b089      	sub	sp, #36	; 0x24
   28672:	4606      	mov	r6, r0
   28674:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28676:	b10d      	cbz	r5, 2867c <gen_hash_m+0x12>
	switch (u16->val) {
   28678:	2501      	movs	r5, #1
   2867a:	e014      	b.n	286a6 <gen_hash_m+0x3c>
   2867c:	887b      	ldrh	r3, [r7, #2]
   2867e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   28682:	d004      	beq.n	2868e <gen_hash_m+0x24>
   28684:	d812      	bhi.n	286ac <gen_hash_m+0x42>
   28686:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2868a:	2b03      	cmp	r3, #3
   2868c:	d8f4      	bhi.n	28678 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2868e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28692:	2202      	movs	r2, #2
   28694:	f10d 010e 	add.w	r1, sp, #14
   28698:	4620      	mov	r0, r4
   2869a:	f7fd fff4 	bl	26686 <tc_cmac_update>
   2869e:	b9e0      	cbnz	r0, 286da <gen_hash_m+0x70>
			state->err = -EINVAL;
   286a0:	f06f 0315 	mvn.w	r3, #21
   286a4:	65a3      	str	r3, [r4, #88]	; 0x58
}
   286a6:	4628      	mov	r0, r5
   286a8:	b009      	add	sp, #36	; 0x24
   286aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   286ac:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   286b0:	33ff      	adds	r3, #255	; 0xff
   286b2:	b29b      	uxth	r3, r3
   286b4:	2b04      	cmp	r3, #4
   286b6:	d8df      	bhi.n	28678 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   286b8:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   286bc:	2202      	movs	r2, #2
   286be:	f10d 010e 	add.w	r1, sp, #14
   286c2:	4620      	mov	r0, r4
   286c4:	f7fd ffdf 	bl	26686 <tc_cmac_update>
   286c8:	2800      	cmp	r0, #0
   286ca:	d0e9      	beq.n	286a0 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   286cc:	887b      	ldrh	r3, [r7, #2]
   286ce:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   286d2:	2202      	movs	r2, #2
   286d4:	f10d 010e 	add.w	r1, sp, #14
   286d8:	e017      	b.n	2870a <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   286da:	887b      	ldrh	r3, [r7, #2]
   286dc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   286e0:	2202      	movs	r2, #2
   286e2:	f10d 010e 	add.w	r1, sp, #14
   286e6:	4620      	mov	r0, r4
   286e8:	f7fd ffcd 	bl	26686 <tc_cmac_update>
   286ec:	2800      	cmp	r0, #0
   286ee:	d0d7      	beq.n	286a0 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   286f0:	2000      	movs	r0, #0
   286f2:	2310      	movs	r3, #16
   286f4:	eb0d 0203 	add.w	r2, sp, r3
   286f8:	6877      	ldr	r7, [r6, #4]
   286fa:	9000      	str	r0, [sp, #0]
   286fc:	4631      	mov	r1, r6
   286fe:	47b8      	blx	r7
		if (len < 0) {
   28700:	1e02      	subs	r2, r0, #0
   28702:	da01      	bge.n	28708 <gen_hash_m+0x9e>
			state->err = len;
   28704:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   28706:	e7ce      	b.n	286a6 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   28708:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2870a:	4620      	mov	r0, r4
   2870c:	f7fd ffbb 	bl	26686 <tc_cmac_update>
   28710:	2800      	cmp	r0, #0
   28712:	d1b1      	bne.n	28678 <gen_hash_m+0xe>
   28714:	e7c4      	b.n	286a0 <gen_hash_m+0x36>

00028716 <atomic_and>:
{
   28716:	4603      	mov	r3, r0
}
   28718:	f3bf 8f5b 	dmb	ish
   2871c:	e853 0f00 	ldrex	r0, [r3]
   28720:	ea00 0201 	and.w	r2, r0, r1
   28724:	e843 2c00 	strex	ip, r2, [r3]
   28728:	f1bc 0f00 	cmp.w	ip, #0
   2872c:	d1f6      	bne.n	2871c <atomic_and+0x6>
   2872e:	f3bf 8f5b 	dmb	ish
   28732:	4770      	bx	lr

00028734 <gatt_notify>:
{
   28734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28738:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   2873a:	8992      	ldrh	r2, [r2, #12]
{
   2873c:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   2873e:	3202      	adds	r2, #2
   28740:	211b      	movs	r1, #27
{
   28742:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   28744:	f7ff fe28 	bl	28398 <bt_att_create_pdu>
	if (!buf) {
   28748:	4605      	mov	r5, r0
   2874a:	b1c8      	cbz	r0, 28780 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
   2874c:	f100 0908 	add.w	r9, r0, #8
   28750:	2102      	movs	r1, #2
   28752:	4648      	mov	r0, r9
   28754:	f003 fca1 	bl	2c09a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   28758:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
   2875a:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
   2875c:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
   28760:	4648      	mov	r0, r9
   28762:	f003 fc9a 	bl	2c09a <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   28766:	89a2      	ldrh	r2, [r4, #12]
   28768:	68a1      	ldr	r1, [r4, #8]
   2876a:	4630      	mov	r0, r6
   2876c:	f7fe f919 	bl	269a2 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   28770:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   28774:	4629      	mov	r1, r5
   28776:	4638      	mov	r0, r7
}
   28778:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   2877c:	f7ff beac 	b.w	284d8 <bt_att_send>
}
   28780:	f06f 000b 	mvn.w	r0, #11
   28784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028788 <clear_cf_cfg>:
{
   28788:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2878a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2878c:	2500      	movs	r5, #0
   2878e:	4669      	mov	r1, sp
   28790:	3001      	adds	r0, #1
   28792:	9500      	str	r5, [sp, #0]
   28794:	f8cd 5003 	str.w	r5, [sp, #3]
   28798:	f7ff ff36 	bl	28608 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   2879c:	f104 0008 	add.w	r0, r4, #8
   287a0:	2201      	movs	r2, #1
   287a2:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   287a4:	340c      	adds	r4, #12
   287a6:	f7fe f927 	bl	269f8 <memset>
   287aa:	f3bf 8f5b 	dmb	ish
   287ae:	e854 3f00 	ldrex	r3, [r4]
   287b2:	e844 5200 	strex	r2, r5, [r4]
   287b6:	2a00      	cmp	r2, #0
   287b8:	d1f9      	bne.n	287ae <clear_cf_cfg+0x26>
   287ba:	f3bf 8f5b 	dmb	ish
}
   287be:	b003      	add	sp, #12
   287c0:	bd30      	pop	{r4, r5, pc}

000287c2 <ccc_find_cfg>:
{
   287c2:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   287c4:	7803      	ldrb	r3, [r0, #0]
   287c6:	4293      	cmp	r3, r2
{
   287c8:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   287ca:	d001      	beq.n	287d0 <ccc_find_cfg+0xe>
	return NULL;
   287cc:	2000      	movs	r0, #0
}
   287ce:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   287d0:	2207      	movs	r2, #7
   287d2:	3001      	adds	r0, #1
   287d4:	f7fe f8d5 	bl	26982 <memcmp>
		if (id == ccc->cfg[i].id &&
   287d8:	2800      	cmp	r0, #0
   287da:	d1f7      	bne.n	287cc <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   287dc:	4620      	mov	r0, r4
   287de:	e7f6      	b.n	287ce <ccc_find_cfg+0xc>

000287e0 <find_ccc_cfg>:
{
   287e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   287e2:	460c      	mov	r4, r1
   287e4:	1c4d      	adds	r5, r1, #1
		if (conn) {
   287e6:	b148      	cbz	r0, 287fc <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   287e8:	7809      	ldrb	r1, [r1, #0]
   287ea:	462a      	mov	r2, r5
   287ec:	f7ff f8aa 	bl	27944 <bt_conn_is_peer_addr_le>
   287f0:	2800      	cmp	r0, #0
	return NULL;
   287f2:	bf08      	it	eq
   287f4:	2400      	moveq	r4, #0
}
   287f6:	4620      	mov	r0, r4
   287f8:	b003      	add	sp, #12
   287fa:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   287fc:	9000      	str	r0, [sp, #0]
   287fe:	2207      	movs	r2, #7
   28800:	f8cd 0003 	str.w	r0, [sp, #3]
   28804:	4669      	mov	r1, sp
   28806:	4628      	mov	r0, r5
   28808:	f7fe f8bb 	bl	26982 <memcmp>
   2880c:	2800      	cmp	r0, #0
	return NULL;
   2880e:	bf18      	it	ne
   28810:	2400      	movne	r4, #0
   28812:	e7f0      	b.n	287f6 <find_ccc_cfg+0x16>

00028814 <bt_gatt_attr_write_ccc>:
{
   28814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28818:	461f      	mov	r7, r3
   2881a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   2881e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   28822:	4606      	mov	r6, r0
   28824:	4688      	mov	r8, r1
	if (offset) {
   28826:	2b00      	cmp	r3, #0
   28828:	d13d      	bne.n	288a6 <bt_gatt_attr_write_ccc+0x92>
	if (!len || len > sizeof(uint16_t)) {
   2882a:	1e7b      	subs	r3, r7, #1
   2882c:	2b01      	cmp	r3, #1
   2882e:	d83d      	bhi.n	288ac <bt_gatt_attr_write_ccc+0x98>
	if (len < sizeof(uint16_t)) {
   28830:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   28832:	7815      	ldrb	r5, [r2, #0]
   28834:	bf18      	it	ne
   28836:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   28838:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   2883a:	bf0c      	ite	eq
   2883c:	b2ad      	uxtheq	r5, r5
   2883e:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   28842:	f7ff ffcd 	bl	287e0 <find_ccc_cfg>
	if (!cfg) {
   28846:	4604      	mov	r4, r0
   28848:	b978      	cbnz	r0, 2886a <bt_gatt_attr_write_ccc+0x56>
		if (!value) {
   2884a:	b915      	cbnz	r5, 28852 <bt_gatt_attr_write_ccc+0x3e>
			return len;
   2884c:	4638      	mov	r0, r7
}
   2884e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   28852:	4649      	mov	r1, r9
   28854:	f7ff ffc4 	bl	287e0 <find_ccc_cfg>
		if (!cfg) {
   28858:	4604      	mov	r4, r0
   2885a:	b350      	cbz	r0, 288b2 <bt_gatt_attr_write_ccc+0x9e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   2885c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   28860:	3001      	adds	r0, #1
   28862:	f7ff fed1 	bl	28608 <bt_addr_le_copy>
		cfg->id = conn->id;
   28866:	7a33      	ldrb	r3, [r6, #8]
   28868:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   2886a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2886e:	b973      	cbnz	r3, 2888e <bt_gatt_attr_write_ccc+0x7a>
	if (cfg->value != ccc->value) {
   28870:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   28874:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   28876:	42ab      	cmp	r3, r5
   28878:	d003      	beq.n	28882 <bt_gatt_attr_write_ccc+0x6e>
		gatt_ccc_changed(attr, ccc);
   2887a:	4649      	mov	r1, r9
   2887c:	4640      	mov	r0, r8
   2887e:	f7ff feab 	bl	285d8 <gatt_ccc_changed>
	if (!value) {
   28882:	2d00      	cmp	r5, #0
   28884:	d1e2      	bne.n	2884c <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   28886:	4620      	mov	r0, r4
   28888:	f7ff fec1 	bl	2860e <clear_ccc_cfg>
   2888c:	e7de      	b.n	2884c <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   2888e:	462a      	mov	r2, r5
   28890:	4641      	mov	r1, r8
   28892:	4630      	mov	r0, r6
   28894:	4798      	blx	r3
		if (write < 0) {
   28896:	2800      	cmp	r0, #0
   28898:	dbd9      	blt.n	2884e <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   2889a:	1e42      	subs	r2, r0, #1
   2889c:	2a01      	cmp	r2, #1
   2889e:	d9e7      	bls.n	28870 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   288a0:	f06f 000d 	mvn.w	r0, #13
   288a4:	e7d3      	b.n	2884e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   288a6:	f06f 0006 	mvn.w	r0, #6
   288aa:	e7d0      	b.n	2884e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   288ac:	f06f 000c 	mvn.w	r0, #12
   288b0:	e7cd      	b.n	2884e <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   288b2:	f06f 0010 	mvn.w	r0, #16
   288b6:	e7ca      	b.n	2884e <bt_gatt_attr_write_ccc+0x3a>

000288b8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   288b8:	2301      	movs	r3, #1
   288ba:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   288bc:	f3bf 8f5b 	dmb	ish
   288c0:	e850 2f00 	ldrex	r2, [r0]
   288c4:	431a      	orrs	r2, r3
   288c6:	e840 2100 	strex	r1, r2, [r0]
   288ca:	2900      	cmp	r1, #0
   288cc:	d1f8      	bne.n	288c0 <atomic_set_bit+0x8>
   288ce:	f3bf 8f5b 	dmb	ish
}
   288d2:	4770      	bx	lr

000288d4 <sc_save>:
{
   288d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   288d8:	4680      	mov	r8, r0
   288da:	460f      	mov	r7, r1
   288dc:	4616      	mov	r6, r2
   288de:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   288e0:	f7e1 ff80 	bl	a7e4 <find_sc_cfg>
	if (!cfg) {
   288e4:	4604      	mov	r4, r0
   288e6:	b960      	cbnz	r0, 28902 <sc_save+0x2e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   288e8:	4669      	mov	r1, sp
   288ea:	9000      	str	r0, [sp, #0]
   288ec:	f8cd 0003 	str.w	r0, [sp, #3]
   288f0:	f7e1 ff78 	bl	a7e4 <find_sc_cfg>
		if (!cfg) {
   288f4:	4604      	mov	r4, r0
   288f6:	b1c0      	cbz	r0, 2892a <sc_save+0x56>
		cfg->id = id;
   288f8:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   288fc:	4639      	mov	r1, r7
   288fe:	f7ff fe83 	bl	28608 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   28902:	8922      	ldrh	r2, [r4, #8]
   28904:	8963      	ldrh	r3, [r4, #10]
   28906:	b962      	cbnz	r2, 28922 <sc_save+0x4e>
   28908:	b96b      	cbnz	r3, 28926 <sc_save+0x52>
		cfg->data.start = start;
   2890a:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   2890c:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   2890e:	4621      	mov	r1, r4
   28910:	f811 0b01 	ldrb.w	r0, [r1], #1
   28914:	f7fe fecd 	bl	276b2 <bt_addr_le_is_bonded>
   28918:	b138      	cbz	r0, 2892a <sc_save+0x56>
		sc_store(cfg);
   2891a:	4620      	mov	r0, r4
   2891c:	f7e1 fe8c 	bl	a638 <sc_store>
   28920:	e003      	b.n	2892a <sc_save+0x56>
	if (new_start >= *start && new_end <= *end) {
   28922:	4296      	cmp	r6, r2
   28924:	d304      	bcc.n	28930 <sc_save+0x5c>
   28926:	429d      	cmp	r5, r3
   28928:	d8f0      	bhi.n	2890c <sc_save+0x38>
}
   2892a:	b002      	add	sp, #8
   2892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   28930:	429d      	cmp	r5, r3
		*start = new_start;
   28932:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   28934:	d9eb      	bls.n	2890e <sc_save+0x3a>
   28936:	e7e9      	b.n	2890c <sc_save+0x38>

00028938 <sc_set>:
{
   28938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2893c:	460e      	mov	r6, r1
   2893e:	b087      	sub	sp, #28
   28940:	4690      	mov	r8, r2
   28942:	4699      	mov	r9, r3
	if (!name) {
   28944:	4605      	mov	r5, r0
   28946:	b928      	cbnz	r0, 28954 <sc_set+0x1c>
		return -EINVAL;
   28948:	f06f 0415 	mvn.w	r4, #21
}
   2894c:	4620      	mov	r0, r4
   2894e:	b007      	add	sp, #28
   28950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   28954:	a902      	add	r1, sp, #8
   28956:	f7fe f900 	bl	26b5a <bt_settings_decode_key>
	if (err) {
   2895a:	4604      	mov	r4, r0
   2895c:	2800      	cmp	r0, #0
   2895e:	d1f3      	bne.n	28948 <sc_set+0x10>
	settings_name_next(name, &next);
   28960:	a901      	add	r1, sp, #4
   28962:	4628      	mov	r0, r5
   28964:	f7fc fb42 	bl	24fec <settings_name_next>
	if (!next) {
   28968:	9801      	ldr	r0, [sp, #4]
   2896a:	b1b8      	cbz	r0, 2899c <sc_set+0x64>
		id = strtol(next, NULL, 10);
   2896c:	220a      	movs	r2, #10
   2896e:	4621      	mov	r1, r4
   28970:	f7fd ff3b 	bl	267ea <strtol>
   28974:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   28976:	a902      	add	r1, sp, #8
   28978:	4638      	mov	r0, r7
   2897a:	f7e1 ff33 	bl	a7e4 <find_sc_cfg>
	if (!cfg && len_rd) {
   2897e:	4605      	mov	r5, r0
   28980:	b9d8      	cbnz	r0, 289ba <sc_set+0x82>
   28982:	2e00      	cmp	r6, #0
   28984:	d0e2      	beq.n	2894c <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   28986:	a904      	add	r1, sp, #16
   28988:	9004      	str	r0, [sp, #16]
   2898a:	f8cd 0013 	str.w	r0, [sp, #19]
   2898e:	f7e1 ff29 	bl	a7e4 <find_sc_cfg>
		if (!cfg) {
   28992:	4605      	mov	r5, r0
   28994:	b920      	cbnz	r0, 289a0 <sc_set+0x68>
			return -ENOMEM;
   28996:	f06f 040b 	mvn.w	r4, #11
   2899a:	e7d7      	b.n	2894c <sc_set+0x14>
		id = BT_ID_DEFAULT;
   2899c:	4627      	mov	r7, r4
   2899e:	e7ea      	b.n	28976 <sc_set+0x3e>
		cfg->id = id;
   289a0:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   289a4:	a902      	add	r1, sp, #8
   289a6:	f7ff fe2f 	bl	28608 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   289aa:	2204      	movs	r2, #4
   289ac:	f105 0108 	add.w	r1, r5, #8
   289b0:	4648      	mov	r0, r9
   289b2:	47c0      	blx	r8
		if (len < 0) {
   289b4:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   289b8:	e7c8      	b.n	2894c <sc_set+0x14>
	if (len_rd) {
   289ba:	2e00      	cmp	r6, #0
   289bc:	d1f5      	bne.n	289aa <sc_set+0x72>
		memset(cfg, 0, sizeof(*cfg));
   289be:	220c      	movs	r2, #12
   289c0:	4631      	mov	r1, r6
   289c2:	f7fe f819 	bl	269f8 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   289c6:	e7c1      	b.n	2894c <sc_set+0x14>

000289c8 <cf_write>:
{
   289c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   289cc:	461f      	mov	r7, r3
   289ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   289d2:	2b01      	cmp	r3, #1
{
   289d4:	4680      	mov	r8, r0
   289d6:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   289d8:	d83a      	bhi.n	28a50 <cf_write+0x88>
	if (offset + len > sizeof(cfg->data)) {
   289da:	443b      	add	r3, r7
   289dc:	2b01      	cmp	r3, #1
   289de:	463d      	mov	r5, r7
   289e0:	dc39      	bgt.n	28a56 <cf_write+0x8e>
	cfg = find_cf_cfg(conn);
   289e2:	f7e1 ff21 	bl	a828 <find_cf_cfg>
	if (!cfg) {
   289e6:	4604      	mov	r4, r0
   289e8:	b918      	cbnz	r0, 289f2 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   289ea:	f7e1 ff1d 	bl	a828 <find_cf_cfg>
	if (!cfg) {
   289ee:	4604      	mov	r4, r0
   289f0:	b3a0      	cbz	r0, 28a5c <cf_write+0x94>
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
   289f2:	4632      	mov	r2, r6
   289f4:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   289f8:	4562      	cmp	r2, ip
   289fa:	d116      	bne.n	28a2a <cf_write+0x62>
	for (i = 0U; i < len && i < last_byte; i++) {
   289fc:	b12f      	cbz	r7, 28a0a <cf_write+0x42>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   289fe:	7833      	ldrb	r3, [r6, #0]
   28a00:	7a22      	ldrb	r2, [r4, #8]
   28a02:	f003 0307 	and.w	r3, r3, #7
   28a06:	4313      	orrs	r3, r2
   28a08:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   28a0a:	f108 0188 	add.w	r1, r8, #136	; 0x88
   28a0e:	1c60      	adds	r0, r4, #1
   28a10:	f7ff fdfa 	bl	28608 <bt_addr_le_copy>
	cfg->id = conn->id;
   28a14:	4620      	mov	r0, r4
   28a16:	f898 3008 	ldrb.w	r3, [r8, #8]
   28a1a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28a1e:	2100      	movs	r1, #0
   28a20:	f7ff ff4a 	bl	288b8 <atomic_set_bit>
}
   28a24:	4628      	mov	r0, r5
   28a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   28a2a:	f812 1b01 	ldrb.w	r1, [r2], #1
   28a2e:	7a20      	ldrb	r0, [r4, #8]
   28a30:	2300      	movs	r3, #0
   28a32:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
   28a34:	fa21 fe03 	lsr.w	lr, r1, r3
   28a38:	f01e 0f01 	tst.w	lr, #1
   28a3c:	d004      	beq.n	28a48 <cf_write+0x80>
   28a3e:	fa20 fe03 	lsr.w	lr, r0, r3
   28a42:	f01e 0f01 	tst.w	lr, #1
   28a46:	d10c      	bne.n	28a62 <cf_write+0x9a>
		for (bit = 0U; bit <= last_bit; bit++) {
   28a48:	3301      	adds	r3, #1
   28a4a:	2b03      	cmp	r3, #3
   28a4c:	d1f2      	bne.n	28a34 <cf_write+0x6c>
   28a4e:	e7d3      	b.n	289f8 <cf_write+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28a50:	f06f 0506 	mvn.w	r5, #6
   28a54:	e7e6      	b.n	28a24 <cf_write+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   28a56:	f06f 050c 	mvn.w	r5, #12
   28a5a:	e7e3      	b.n	28a24 <cf_write+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   28a5c:	f06f 0510 	mvn.w	r5, #16
   28a60:	e7e0      	b.n	28a24 <cf_write+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   28a62:	f06f 0512 	mvn.w	r5, #18
   28a66:	e7dd      	b.n	28a24 <cf_write+0x5c>

00028a68 <sc_restore_rsp>:
{
   28a68:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   28a6a:	f7e1 fedd 	bl	a828 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   28a6e:	b140      	cbz	r0, 28a82 <sc_restore_rsp+0x1a>
   28a70:	7a03      	ldrb	r3, [r0, #8]
   28a72:	07db      	lsls	r3, r3, #31
   28a74:	d505      	bpl.n	28a82 <sc_restore_rsp+0x1a>
}
   28a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28a7a:	2100      	movs	r1, #0
   28a7c:	300c      	adds	r0, #12
   28a7e:	f7ff bf1b 	b.w	288b8 <atomic_set_bit>
}
   28a82:	bd08      	pop	{r3, pc}

00028a84 <cf_set>:
{
   28a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28a88:	4689      	mov	r9, r1
   28a8a:	b085      	sub	sp, #20
   28a8c:	4617      	mov	r7, r2
   28a8e:	4698      	mov	r8, r3
	if (!name) {
   28a90:	4605      	mov	r5, r0
   28a92:	b928      	cbnz	r0, 28aa0 <cf_set+0x1c>
		return -EINVAL;
   28a94:	f06f 0415 	mvn.w	r4, #21
}
   28a98:	4620      	mov	r0, r4
   28a9a:	b005      	add	sp, #20
   28a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   28aa0:	a902      	add	r1, sp, #8
   28aa2:	f7fe f85a 	bl	26b5a <bt_settings_decode_key>
	if (err) {
   28aa6:	4604      	mov	r4, r0
   28aa8:	2800      	cmp	r0, #0
   28aaa:	d1f3      	bne.n	28a94 <cf_set+0x10>
	settings_name_next(name, &next);
   28aac:	a901      	add	r1, sp, #4
   28aae:	4628      	mov	r0, r5
   28ab0:	f7fc fa9c 	bl	24fec <settings_name_next>
	if (!next) {
   28ab4:	9801      	ldr	r0, [sp, #4]
   28ab6:	b1f0      	cbz	r0, 28af6 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   28ab8:	220a      	movs	r2, #10
   28aba:	4621      	mov	r1, r4
   28abc:	f7fd fe95 	bl	267ea <strtol>
   28ac0:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   28ac2:	a902      	add	r1, sp, #8
   28ac4:	4630      	mov	r0, r6
   28ac6:	f7e1 fe6b 	bl	a7a0 <find_cf_cfg_by_addr>
	if (!cfg) {
   28aca:	4605      	mov	r5, r0
   28acc:	b940      	cbnz	r0, 28ae0 <cf_set+0x5c>
		cfg = find_cf_cfg(NULL);
   28ace:	f7e1 feab 	bl	a828 <find_cf_cfg>
		if (!cfg) {
   28ad2:	4605      	mov	r5, r0
   28ad4:	b1a8      	cbz	r0, 28b02 <cf_set+0x7e>
		cfg->id = id;
   28ad6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   28ada:	a902      	add	r1, sp, #8
   28adc:	f7ff fd94 	bl	28608 <bt_addr_le_copy>
	if (len_rd) {
   28ae0:	f1b9 0f00 	cmp.w	r9, #0
   28ae4:	d009      	beq.n	28afa <cf_set+0x76>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   28ae6:	2201      	movs	r2, #1
   28ae8:	f105 0108 	add.w	r1, r5, #8
   28aec:	4640      	mov	r0, r8
   28aee:	47b8      	blx	r7
		if (len < 0) {
   28af0:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   28af4:	e7d0      	b.n	28a98 <cf_set+0x14>
		id = BT_ID_DEFAULT;
   28af6:	4626      	mov	r6, r4
   28af8:	e7e3      	b.n	28ac2 <cf_set+0x3e>
		clear_cf_cfg(cfg);
   28afa:	4628      	mov	r0, r5
   28afc:	f7ff fe44 	bl	28788 <clear_cf_cfg>
   28b00:	e7ca      	b.n	28a98 <cf_set+0x14>
			return -ENOMEM;
   28b02:	f06f 040b 	mvn.w	r4, #11
   28b06:	e7c7      	b.n	28a98 <cf_set+0x14>

00028b08 <read_appearance>:
{
   28b08:	b513      	push	{r0, r1, r4, lr}
   28b0a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   28b0e:	4610      	mov	r0, r2
	if (offset > value_len) {
   28b10:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   28b12:	f04f 0200 	mov.w	r2, #0
   28b16:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   28b1a:	d80d      	bhi.n	28b38 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   28b1c:	f1c1 0402 	rsb	r4, r1, #2
   28b20:	429c      	cmp	r4, r3
   28b22:	bfa8      	it	ge
   28b24:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   28b26:	f10d 0306 	add.w	r3, sp, #6
   28b2a:	4622      	mov	r2, r4
   28b2c:	4419      	add	r1, r3
   28b2e:	f7fd ff38 	bl	269a2 <memcpy>
}
   28b32:	4620      	mov	r0, r4
   28b34:	b002      	add	sp, #8
   28b36:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28b38:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   28b3c:	e7f9      	b.n	28b32 <read_appearance+0x2a>

00028b3e <read_name>:
{
   28b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28b42:	4698      	mov	r8, r3
   28b44:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   28b48:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   28b4a:	f7df fcd1 	bl	84f0 <bt_get_name>
   28b4e:	4607      	mov	r7, r0
				 strlen(name));
   28b50:	f7fd feec 	bl	2692c <strlen>
	if (offset > value_len) {
   28b54:	b283      	uxth	r3, r0
   28b56:	42b3      	cmp	r3, r6
   28b58:	d30c      	bcc.n	28b74 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   28b5a:	1b9c      	subs	r4, r3, r6
   28b5c:	4544      	cmp	r4, r8
   28b5e:	bfa8      	it	ge
   28b60:	4644      	movge	r4, r8
   28b62:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   28b64:	4622      	mov	r2, r4
   28b66:	19b9      	adds	r1, r7, r6
   28b68:	4628      	mov	r0, r5
   28b6a:	f7fd ff1a 	bl	269a2 <memcpy>
}
   28b6e:	4620      	mov	r0, r4
   28b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28b74:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   28b78:	e7f9      	b.n	28b6e <read_name+0x30>

00028b7a <cf_read>:
{
   28b7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28b7c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   28b7e:	2300      	movs	r3, #0
{
   28b80:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   28b84:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28b88:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   28b8a:	f7e1 fe4d 	bl	a828 <find_cf_cfg>
	if (cfg) {
   28b8e:	b128      	cbz	r0, 28b9c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   28b90:	f100 0108 	add.w	r1, r0, #8
   28b94:	2201      	movs	r2, #1
   28b96:	a801      	add	r0, sp, #4
   28b98:	f7fd ff03 	bl	269a2 <memcpy>
	if (offset > value_len) {
   28b9c:	2e01      	cmp	r6, #1
   28b9e:	d80d      	bhi.n	28bbc <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   28ba0:	f1c6 0401 	rsb	r4, r6, #1
   28ba4:	42bc      	cmp	r4, r7
   28ba6:	bfa8      	it	ge
   28ba8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28baa:	ab01      	add	r3, sp, #4
   28bac:	4622      	mov	r2, r4
   28bae:	1999      	adds	r1, r3, r6
   28bb0:	4628      	mov	r0, r5
   28bb2:	f7fd fef6 	bl	269a2 <memcpy>
}
   28bb6:	4620      	mov	r0, r4
   28bb8:	b003      	add	sp, #12
   28bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28bbc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   28bc0:	e7f9      	b.n	28bb6 <cf_read+0x3c>

00028bc2 <bt_gatt_attr_read_ccc>:
{
   28bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   28bc4:	68c9      	ldr	r1, [r1, #12]
{
   28bc6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28bca:	4615      	mov	r5, r2
   28bcc:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   28bce:	f7ff fe07 	bl	287e0 <find_ccc_cfg>
	if (cfg) {
   28bd2:	b100      	cbz	r0, 28bd6 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   28bd4:	8900      	ldrh	r0, [r0, #8]
   28bd6:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28bda:	2e02      	cmp	r6, #2
   28bdc:	d80e      	bhi.n	28bfc <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   28bde:	f1c6 0402 	rsb	r4, r6, #2
   28be2:	42bc      	cmp	r4, r7
   28be4:	bfa8      	it	ge
   28be6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28be8:	f10d 0306 	add.w	r3, sp, #6
   28bec:	4622      	mov	r2, r4
   28bee:	1999      	adds	r1, r3, r6
   28bf0:	4628      	mov	r0, r5
   28bf2:	f7fd fed6 	bl	269a2 <memcpy>
}
   28bf6:	4620      	mov	r0, r4
   28bf8:	b003      	add	sp, #12
   28bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28bfc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   28c00:	e7f9      	b.n	28bf6 <bt_gatt_attr_read_ccc+0x34>

00028c02 <bt_gatt_attr_read_service>:
{
   28c02:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   28c04:	68c9      	ldr	r1, [r1, #12]
{
   28c06:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   28c0a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   28c0c:	780b      	ldrb	r3, [r1, #0]
{
   28c0e:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   28c10:	b993      	cbnz	r3, 28c38 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   28c12:	884b      	ldrh	r3, [r1, #2]
   28c14:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   28c18:	2d02      	cmp	r5, #2
   28c1a:	d819      	bhi.n	28c50 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   28c1c:	f1c5 0202 	rsb	r2, r5, #2
   28c20:	4294      	cmp	r4, r2
   28c22:	bfa8      	it	ge
   28c24:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28c26:	f10d 0306 	add.w	r3, sp, #6
   28c2a:	4622      	mov	r2, r4
   28c2c:	1959      	adds	r1, r3, r5
   28c2e:	f7fd feb8 	bl	269a2 <memcpy>
}
   28c32:	4620      	mov	r0, r4
   28c34:	b003      	add	sp, #12
   28c36:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   28c38:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   28c3a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   28c3e:	d807      	bhi.n	28c50 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   28c40:	f1c5 0210 	rsb	r2, r5, #16
   28c44:	4294      	cmp	r4, r2
   28c46:	bfa8      	it	ge
   28c48:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28c4a:	4622      	mov	r2, r4
   28c4c:	4429      	add	r1, r5
   28c4e:	e7ee      	b.n	28c2e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28c50:	f06f 0406 	mvn.w	r4, #6
   28c54:	e7ed      	b.n	28c32 <bt_gatt_attr_read_service+0x30>

00028c56 <sc_clear>:
{
   28c56:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28c58:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   28c5c:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28c5e:	4631      	mov	r1, r6
   28c60:	7a00      	ldrb	r0, [r0, #8]
   28c62:	f7fe fd26 	bl	276b2 <bt_addr_le_is_bonded>
   28c66:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   28c68:	4631      	mov	r1, r6
   28c6a:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28c6c:	b11d      	cbz	r5, 28c76 <sc_clear+0x20>
}
   28c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   28c72:	f7e1 be4f 	b.w	a914 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28c76:	f7e1 fdb5 	bl	a7e4 <find_sc_cfg>
		if (cfg) {
   28c7a:	b128      	cbz	r0, 28c88 <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   28c7c:	4629      	mov	r1, r5
   28c7e:	220c      	movs	r2, #12
}
   28c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   28c84:	f7fd beb8 	b.w	269f8 <memset>
}
   28c88:	bd70      	pop	{r4, r5, r6, pc}

00028c8a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   28c8a:	2a02      	cmp	r2, #2
{
   28c8c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28c8e:	d108      	bne.n	28ca2 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28c90:	2300      	movs	r3, #0
   28c92:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28c96:	461a      	mov	r2, r3
   28c98:	7a00      	ldrb	r0, [r0, #8]
   28c9a:	f7ff fe1b 	bl	288d4 <sc_save>
}
   28c9e:	2002      	movs	r0, #2
   28ca0:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   28ca2:	f7ff ffd8 	bl	28c56 <sc_clear>
   28ca6:	e7fa      	b.n	28c9e <sc_ccc_cfg_write+0x14>

00028ca8 <bt_gatt_attr_value_handle>:
{
   28ca8:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28caa:	4604      	mov	r4, r0
   28cac:	b910      	cbnz	r0, 28cb4 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28cae:	2000      	movs	r0, #0
}
   28cb0:	b002      	add	sp, #8
   28cb2:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28cb4:	2300      	movs	r3, #0
   28cb6:	f88d 3004 	strb.w	r3, [sp, #4]
   28cba:	6800      	ldr	r0, [r0, #0]
   28cbc:	f642 0303 	movw	r3, #10243	; 0x2803
   28cc0:	a901      	add	r1, sp, #4
   28cc2:	f8ad 3006 	strh.w	r3, [sp, #6]
   28cc6:	f7fe f91b 	bl	26f00 <bt_uuid_cmp>
   28cca:	2800      	cmp	r0, #0
   28ccc:	d1ef      	bne.n	28cae <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   28cce:	68e3      	ldr	r3, [r4, #12]
   28cd0:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   28cd2:	2800      	cmp	r0, #0
   28cd4:	d1ec      	bne.n	28cb0 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   28cd6:	4620      	mov	r0, r4
   28cd8:	f7e1 ff98 	bl	ac0c <bt_gatt_attr_get_handle>
   28cdc:	3001      	adds	r0, #1
   28cde:	b280      	uxth	r0, r0
	return handle;
   28ce0:	e7e6      	b.n	28cb0 <bt_gatt_attr_value_handle+0x8>

00028ce2 <bt_gatt_attr_read_chrc>:
{
   28ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   28ce4:	68cf      	ldr	r7, [r1, #12]
{
   28ce6:	b087      	sub	sp, #28
   28ce8:	4608      	mov	r0, r1
   28cea:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   28cec:	79bb      	ldrb	r3, [r7, #6]
   28cee:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28cf2:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   28cf6:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28cf8:	f7ff ffd6 	bl	28ca8 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28cfc:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28cfe:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28d02:	780b      	ldrb	r3, [r1, #0]
   28d04:	b99b      	cbnz	r3, 28d2e <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   28d06:	884b      	ldrh	r3, [r1, #2]
   28d08:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   28d0c:	2105      	movs	r1, #5
	if (offset > value_len) {
   28d0e:	42b1      	cmp	r1, r6
   28d10:	d315      	bcc.n	28d3e <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   28d12:	1b89      	subs	r1, r1, r6
   28d14:	42a1      	cmp	r1, r4
   28d16:	bfa8      	it	ge
   28d18:	4621      	movge	r1, r4
   28d1a:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   28d1c:	ab01      	add	r3, sp, #4
   28d1e:	4622      	mov	r2, r4
   28d20:	1999      	adds	r1, r3, r6
   28d22:	4628      	mov	r0, r5
   28d24:	f7fd fe3d 	bl	269a2 <memcpy>
}
   28d28:	4620      	mov	r0, r4
   28d2a:	b007      	add	sp, #28
   28d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   28d2e:	3101      	adds	r1, #1
   28d30:	2210      	movs	r2, #16
   28d32:	f10d 0007 	add.w	r0, sp, #7
   28d36:	f7fd fe34 	bl	269a2 <memcpy>
		value_len += 16U;
   28d3a:	2113      	movs	r1, #19
   28d3c:	e7e7      	b.n	28d0e <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28d3e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   28d42:	e7f1      	b.n	28d28 <bt_gatt_attr_read_chrc+0x46>

00028d44 <bt_gatt_foreach_attr>:
{
   28d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28d46:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28d4a:	2300      	movs	r3, #0
   28d4c:	9300      	str	r3, [sp, #0]
   28d4e:	461a      	mov	r2, r3
   28d50:	f7e1 ff8c 	bl	ac6c <bt_gatt_foreach_attr_type>
}
   28d54:	b005      	add	sp, #20
   28d56:	f85d fb04 	ldr.w	pc, [sp], #4

00028d5a <db_hash_process>:
	db_hash_gen(true);
   28d5a:	2001      	movs	r0, #1
   28d5c:	f7e1 bfe0 	b.w	ad20 <db_hash_gen>

00028d60 <bt_gatt_check_perm>:
{
   28d60:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   28d62:	07d4      	lsls	r4, r2, #31
{
   28d64:	4605      	mov	r5, r0
   28d66:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   28d68:	d504      	bpl.n	28d74 <bt_gatt_check_perm+0x14>
   28d6a:	f010 0f15 	tst.w	r0, #21
   28d6e:	d01e      	beq.n	28dae <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28d70:	684b      	ldr	r3, [r1, #4]
   28d72:	b1e3      	cbz	r3, 28dae <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   28d74:	0793      	lsls	r3, r2, #30
   28d76:	d504      	bpl.n	28d82 <bt_gatt_check_perm+0x22>
   28d78:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   28d7c:	d019      	beq.n	28db2 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28d7e:	688b      	ldr	r3, [r1, #8]
   28d80:	b1bb      	cbz	r3, 28db2 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   28d82:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28d86:	f014 0f30 	tst.w	r4, #48	; 0x30
   28d8a:	d103      	bne.n	28d94 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   28d8c:	f014 000c 	ands.w	r0, r4, #12
   28d90:	d107      	bne.n	28da2 <bt_gatt_check_perm+0x42>
}
   28d92:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   28d94:	4628      	mov	r0, r5
   28d96:	f7fe fd62 	bl	2785e <bt_conn_get_security>
   28d9a:	2802      	cmp	r0, #2
   28d9c:	d8f6      	bhi.n	28d8c <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   28d9e:	2005      	movs	r0, #5
   28da0:	e7f7      	b.n	28d92 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   28da2:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   28da4:	2b00      	cmp	r3, #0
   28da6:	bf14      	ite	ne
   28da8:	2000      	movne	r0, #0
   28daa:	200f      	moveq	r0, #15
   28dac:	e7f1      	b.n	28d92 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28dae:	2002      	movs	r0, #2
   28db0:	e7ef      	b.n	28d92 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28db2:	2003      	movs	r0, #3
   28db4:	e7ed      	b.n	28d92 <bt_gatt_check_perm+0x32>

00028db6 <bt_gatt_change_aware>:
{
   28db6:	b570      	push	{r4, r5, r6, lr}
   28db8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   28dba:	f7e1 fd35 	bl	a828 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28dbe:	b910      	cbnz	r0, 28dc6 <bt_gatt_change_aware+0x10>
		return true;
   28dc0:	2401      	movs	r4, #1
}
   28dc2:	4620      	mov	r0, r4
   28dc4:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28dc6:	7a03      	ldrb	r3, [r0, #8]
   28dc8:	07da      	lsls	r2, r3, #31
   28dca:	d5f9      	bpl.n	28dc0 <bt_gatt_change_aware+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28dcc:	f3bf 8f5b 	dmb	ish
   28dd0:	68c5      	ldr	r5, [r0, #12]
   28dd2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   28dd6:	f015 0501 	ands.w	r5, r5, #1
   28dda:	f100 060c 	add.w	r6, r0, #12
   28dde:	d1ef      	bne.n	28dc0 <bt_gatt_change_aware+0xa>
	if (!req) {
   28de0:	2c00      	cmp	r4, #0
   28de2:	d0ee      	beq.n	28dc2 <bt_gatt_change_aware+0xc>
   28de4:	f3bf 8f5b 	dmb	ish
   28de8:	68c3      	ldr	r3, [r0, #12]
   28dea:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28dee:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   28df2:	079b      	lsls	r3, r3, #30
   28df4:	d509      	bpl.n	28e0a <bt_gatt_change_aware+0x54>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28df6:	f06f 0102 	mvn.w	r1, #2
   28dfa:	4630      	mov	r0, r6
   28dfc:	f7ff fc8b 	bl	28716 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28e00:	4629      	mov	r1, r5
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   28e02:	4630      	mov	r0, r6
   28e04:	f7ff fd58 	bl	288b8 <atomic_set_bit>
	return false;
   28e08:	e7db      	b.n	28dc2 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   28e0a:	2101      	movs	r1, #1
   28e0c:	e7f9      	b.n	28e02 <bt_gatt_change_aware+0x4c>

00028e0e <sys_memcpy_swap>:
	psrc += length - 1;
   28e0e:	1e53      	subs	r3, r2, #1
   28e10:	4419      	add	r1, r3
	for (; length > 0; length--) {
   28e12:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   28e14:	f811 3901 	ldrb.w	r3, [r1], #-1
   28e18:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   28e1c:	4290      	cmp	r0, r2
   28e1e:	d1f9      	bne.n	28e14 <sys_memcpy_swap+0x6>
}
   28e20:	4770      	bx	lr

00028e22 <smp_pairing_rsp>:
}
   28e22:	2007      	movs	r0, #7
   28e24:	4770      	bx	lr

00028e26 <smp_chan_get>:
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   28e26:	2106      	movs	r1, #6
   28e28:	f7fe befe 	b.w	27c28 <bt_l2cap_le_lookup_rx_cid>

00028e2c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28e2c:	2301      	movs	r3, #1
   28e2e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28e30:	f3bf 8f5b 	dmb	ish
   28e34:	e850 2f00 	ldrex	r2, [r0]
   28e38:	431a      	orrs	r2, r3
   28e3a:	e840 2100 	strex	r1, r2, [r0]
   28e3e:	2900      	cmp	r1, #0
   28e40:	d1f8      	bne.n	28e34 <atomic_set_bit+0x8>
   28e42:	f3bf 8f5b 	dmb	ish
}
   28e46:	4770      	bx	lr

00028e48 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28e48:	2301      	movs	r3, #1
   28e4a:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28e4c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28e4e:	f3bf 8f5b 	dmb	ish
   28e52:	e850 2f00 	ldrex	r2, [r0]
   28e56:	401a      	ands	r2, r3
   28e58:	e840 2100 	strex	r1, r2, [r0]
   28e5c:	2900      	cmp	r1, #0
   28e5e:	d1f8      	bne.n	28e52 <atomic_clear_bit+0xa>
   28e60:	f3bf 8f5b 	dmb	ish
}
   28e64:	4770      	bx	lr

00028e66 <bt_smp_aes_cmac>:
{
   28e66:	b570      	push	{r4, r5, r6, lr}
   28e68:	b0c2      	sub	sp, #264	; 0x108
   28e6a:	460d      	mov	r5, r1
   28e6c:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28e6e:	4601      	mov	r1, r0
   28e70:	aa16      	add	r2, sp, #88	; 0x58
   28e72:	4668      	mov	r0, sp
{
   28e74:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28e76:	f7fd fbdb 	bl	26630 <tc_cmac_setup>
   28e7a:	b150      	cbz	r0, 28e92 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   28e7c:	4632      	mov	r2, r6
   28e7e:	4629      	mov	r1, r5
   28e80:	4668      	mov	r0, sp
   28e82:	f7fd fc00 	bl	26686 <tc_cmac_update>
   28e86:	b120      	cbz	r0, 28e92 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   28e88:	4669      	mov	r1, sp
   28e8a:	4620      	mov	r0, r4
   28e8c:	f7fd fc67 	bl	2675e <tc_cmac_final>
   28e90:	b918      	cbnz	r0, 28e9a <bt_smp_aes_cmac+0x34>
		return -EIO;
   28e92:	f06f 0004 	mvn.w	r0, #4
}
   28e96:	b042      	add	sp, #264	; 0x108
   28e98:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   28e9a:	2000      	movs	r0, #0
   28e9c:	e7fb      	b.n	28e96 <bt_smp_aes_cmac+0x30>

00028e9e <bt_smp_disconnected>:
{
   28e9e:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   28ea0:	6803      	ldr	r3, [r0, #0]
   28ea2:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   28ea6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   28ea8:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   28eac:	f004 fb82 	bl	2d5b4 <k_delayed_work_cancel>
	if (keys) {
   28eb0:	b13d      	cbz	r5, 28ec2 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   28eb2:	89eb      	ldrh	r3, [r5, #14]
   28eb4:	b113      	cbz	r3, 28ebc <bt_smp_disconnected+0x1e>
   28eb6:	7b6b      	ldrb	r3, [r5, #13]
   28eb8:	079b      	lsls	r3, r3, #30
   28eba:	d502      	bpl.n	28ec2 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   28ebc:	4628      	mov	r0, r5
   28ebe:	f7e3 fb3d 	bl	c53c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   28ec2:	4620      	mov	r0, r4
   28ec4:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   28ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   28ecc:	2100      	movs	r1, #0
   28ece:	f7fd bd93 	b.w	269f8 <memset>

00028ed2 <smp_security_request>:
   28ed2:	2007      	movs	r0, #7
   28ed4:	4770      	bx	lr

00028ed6 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   28ed6:	b510      	push	{r4, lr}
   28ed8:	1e43      	subs	r3, r0, #1
   28eda:	f100 0210 	add.w	r2, r0, #16
   28ede:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28ee0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28ee4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28ee8:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   28eea:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28eec:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28eee:	d1f7      	bne.n	28ee0 <sys_mem_swap.constprop.0+0xa>
	}
}
   28ef0:	bd10      	pop	{r4, pc}

00028ef2 <smp_f6>:
{
   28ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
   28ef4:	b097      	sub	sp, #92	; 0x5c
   28ef6:	4605      	mov	r5, r0
   28ef8:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   28efa:	a805      	add	r0, sp, #20
   28efc:	2210      	movs	r2, #16
{
   28efe:	461c      	mov	r4, r3
   28f00:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   28f02:	f7ff ff84 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   28f06:	2210      	movs	r2, #16
   28f08:	4631      	mov	r1, r6
   28f0a:	a809      	add	r0, sp, #36	; 0x24
   28f0c:	f7ff ff7f 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   28f10:	4621      	mov	r1, r4
   28f12:	2210      	movs	r2, #16
   28f14:	a80d      	add	r0, sp, #52	; 0x34
   28f16:	f7ff ff7a 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   28f1a:	991c      	ldr	r1, [sp, #112]	; 0x70
   28f1c:	2203      	movs	r2, #3
   28f1e:	a811      	add	r0, sp, #68	; 0x44
   28f20:	f7ff ff75 	bl	28e0e <sys_memcpy_swap>
	m[51] = a1->type;
   28f24:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   28f26:	f814 3b01 	ldrb.w	r3, [r4], #1
   28f2a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   28f2e:	4621      	mov	r1, r4
   28f30:	2206      	movs	r2, #6
   28f32:	a812      	add	r0, sp, #72	; 0x48
   28f34:	f7fd fd35 	bl	269a2 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   28f38:	4621      	mov	r1, r4
   28f3a:	2206      	movs	r2, #6
   28f3c:	a812      	add	r0, sp, #72	; 0x48
   28f3e:	f7ff ff66 	bl	28e0e <sys_memcpy_swap>
	m[58] = a2->type;
   28f42:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   28f44:	f814 3b01 	ldrb.w	r3, [r4], #1
   28f48:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   28f4c:	4621      	mov	r1, r4
   28f4e:	2206      	movs	r2, #6
   28f50:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   28f54:	f7fd fd25 	bl	269a2 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   28f58:	4621      	mov	r1, r4
   28f5a:	2206      	movs	r2, #6
   28f5c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   28f60:	f7ff ff55 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   28f64:	2210      	movs	r2, #16
   28f66:	4629      	mov	r1, r5
   28f68:	a801      	add	r0, sp, #4
   28f6a:	f7ff ff50 	bl	28e0e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   28f6e:	463b      	mov	r3, r7
   28f70:	2241      	movs	r2, #65	; 0x41
   28f72:	a905      	add	r1, sp, #20
   28f74:	a801      	add	r0, sp, #4
   28f76:	f7ff ff76 	bl	28e66 <bt_smp_aes_cmac>
	if (err) {
   28f7a:	4604      	mov	r4, r0
   28f7c:	b910      	cbnz	r0, 28f84 <smp_f6+0x92>
	sys_mem_swap(check, 16);
   28f7e:	4638      	mov	r0, r7
   28f80:	f7ff ffa9 	bl	28ed6 <sys_mem_swap.constprop.0>
}
   28f84:	4620      	mov	r0, r4
   28f86:	b017      	add	sp, #92	; 0x5c
   28f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028f8a <smp_f4>:
{
   28f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f8c:	b097      	sub	sp, #92	; 0x5c
   28f8e:	4614      	mov	r4, r2
   28f90:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   28f92:	2220      	movs	r2, #32
   28f94:	4601      	mov	r1, r0
   28f96:	a805      	add	r0, sp, #20
{
   28f98:	461d      	mov	r5, r3
   28f9a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   28f9c:	f7ff ff37 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   28fa0:	2220      	movs	r2, #32
   28fa2:	4631      	mov	r1, r6
   28fa4:	a80d      	add	r0, sp, #52	; 0x34
   28fa6:	f7ff ff32 	bl	28e0e <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   28faa:	4621      	mov	r1, r4
   28fac:	2210      	movs	r2, #16
   28fae:	a801      	add	r0, sp, #4
	m[64] = z;
   28fb0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   28fb4:	f7ff ff2b 	bl	28e0e <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   28fb8:	463b      	mov	r3, r7
   28fba:	2241      	movs	r2, #65	; 0x41
   28fbc:	a905      	add	r1, sp, #20
   28fbe:	a801      	add	r0, sp, #4
   28fc0:	f7ff ff51 	bl	28e66 <bt_smp_aes_cmac>
	if (err) {
   28fc4:	4604      	mov	r4, r0
   28fc6:	b910      	cbnz	r0, 28fce <smp_f4+0x44>
	sys_mem_swap(res, 16);
   28fc8:	4638      	mov	r0, r7
   28fca:	f7ff ff84 	bl	28ed6 <sys_mem_swap.constprop.0>
}
   28fce:	4620      	mov	r0, r4
   28fd0:	b017      	add	sp, #92	; 0x5c
   28fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028fd4 <smp_signing_info>:
   28fd4:	2007      	movs	r0, #7
   28fd6:	4770      	bx	lr

00028fd8 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28fd8:	f3bf 8f5b 	dmb	ish
   28fdc:	6800      	ldr	r0, [r0, #0]
   28fde:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28fe2:	4108      	asrs	r0, r1
}
   28fe4:	f000 0001 	and.w	r0, r0, #1
   28fe8:	4770      	bx	lr

00028fea <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28fea:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28fec:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   28ff0:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   28ff2:	4628      	mov	r0, r5
   28ff4:	2104      	movs	r1, #4
   28ff6:	f7ff ffef 	bl	28fd8 <atomic_test_bit>
   28ffa:	b168      	cbz	r0, 29018 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   28ffc:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   28ffe:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   29000:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   29002:	4608      	mov	r0, r1
   29004:	f7fe fdb7 	bl	27b76 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   29008:	4604      	mov	r4, r0
   2900a:	b940      	cbnz	r0, 2901e <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2900c:	2104      	movs	r1, #4
   2900e:	4628      	mov	r0, r5
   29010:	f7ff ff0c 	bl	28e2c <atomic_set_bit>
}
   29014:	4620      	mov	r0, r4
   29016:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   29018:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2901c:	e7ef      	b.n	28ffe <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   2901e:	2101      	movs	r1, #1
   29020:	3008      	adds	r0, #8
   29022:	f003 f83a 	bl	2c09a <net_buf_simple_add>
	hdr->code = op;
   29026:	7006      	strb	r6, [r0, #0]
	return buf;
   29028:	e7f4      	b.n	29014 <smp_create_pdu.isra.0+0x2a>

0002902a <smp_send_pairing_random>:
{
   2902a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2902c:	2104      	movs	r1, #4
{
   2902e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   29030:	f7ff ffdb 	bl	28fea <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   29034:	4604      	mov	r4, r0
   29036:	b178      	cbz	r0, 29058 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   29038:	2110      	movs	r1, #16
   2903a:	3008      	adds	r0, #8
   2903c:	f003 f82d 	bl	2c09a <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   29040:	2210      	movs	r2, #16
   29042:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   29046:	f7fd fcac 	bl	269a2 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2904a:	4628      	mov	r0, r5
   2904c:	2200      	movs	r2, #0
   2904e:	4621      	mov	r1, r4
   29050:	f7e2 f9e2 	bl	b418 <smp_send.isra.0>
	return 0;
   29054:	2000      	movs	r0, #0
}
   29056:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   29058:	2008      	movs	r0, #8
   2905a:	e7fc      	b.n	29056 <smp_send_pairing_random+0x2c>

0002905c <send_pairing_rsp>:
{
   2905c:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2905e:	2102      	movs	r1, #2
{
   29060:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   29062:	f7ff ffc2 	bl	28fea <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   29066:	4604      	mov	r4, r0
   29068:	b178      	cbz	r0, 2908a <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   2906a:	2106      	movs	r1, #6
   2906c:	3008      	adds	r0, #8
   2906e:	f003 f814 	bl	2c09a <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   29072:	2206      	movs	r2, #6
   29074:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   29078:	f7fd fc93 	bl	269a2 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2907c:	4628      	mov	r0, r5
   2907e:	2200      	movs	r2, #0
   29080:	4621      	mov	r1, r4
   29082:	f7e2 f9c9 	bl	b418 <smp_send.isra.0>
	return 0;
   29086:	2000      	movs	r0, #0
}
   29088:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2908a:	2008      	movs	r0, #8
   2908c:	e7fc      	b.n	29088 <send_pairing_rsp+0x2c>

0002908e <smp_dhkey_check>:
{
   2908e:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   29090:	6803      	ldr	r3, [r0, #0]
   29092:	78db      	ldrb	r3, [r3, #3]
   29094:	2b01      	cmp	r3, #1
{
   29096:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   29098:	d115      	bne.n	290c6 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   2909a:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   2909c:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   290a0:	210f      	movs	r1, #15
   290a2:	4628      	mov	r0, r5
   290a4:	f7ff fed0 	bl	28e48 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   290a8:	4631      	mov	r1, r6
   290aa:	2210      	movs	r2, #16
   290ac:	f204 106f 	addw	r0, r4, #367	; 0x16f
   290b0:	f7fd fc77 	bl	269a2 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   290b4:	2107      	movs	r1, #7
   290b6:	4628      	mov	r0, r5
   290b8:	f7ff ff8e 	bl	28fd8 <atomic_test_bit>
   290bc:	b128      	cbz	r0, 290ca <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   290be:	2108      	movs	r1, #8
   290c0:	4628      	mov	r0, r5
   290c2:	f7ff feb3 	bl	28e2c <atomic_set_bit>
}
   290c6:	2000      	movs	r0, #0
   290c8:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   290ca:	2109      	movs	r1, #9
   290cc:	4628      	mov	r0, r5
   290ce:	f7ff ff83 	bl	28fd8 <atomic_test_bit>
   290d2:	2800      	cmp	r0, #0
   290d4:	d1f3      	bne.n	290be <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   290d6:	4620      	mov	r0, r4
}
   290d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   290dc:	f7e2 b9b4 	b.w	b448 <compute_and_check_and_send_slave_dhcheck>

000290e0 <smp_ident_info>:
{
   290e0:	b538      	push	{r3, r4, r5, lr}
   290e2:	4604      	mov	r4, r0
   290e4:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   290e6:	30bc      	adds	r0, #188	; 0xbc
   290e8:	210c      	movs	r1, #12
   290ea:	f7ff ff75 	bl	28fd8 <atomic_test_bit>
   290ee:	b168      	cbz	r0, 2910c <smp_ident_info+0x2c>
		struct bt_smp_ident_info *req = (void *)buf->data;
   290f0:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   290f2:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   290f4:	2002      	movs	r0, #2
   290f6:	7a19      	ldrb	r1, [r3, #8]
   290f8:	f103 0288 	add.w	r2, r3, #136	; 0x88
   290fc:	f000 fb7a 	bl	297f4 <bt_keys_get_type>
		if (!keys) {
   29100:	b158      	cbz	r0, 2911a <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   29102:	2210      	movs	r2, #16
   29104:	4629      	mov	r1, r5
   29106:	302a      	adds	r0, #42	; 0x2a
   29108:	f7fd fc4b 	bl	269a2 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   2910c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   29110:	2109      	movs	r1, #9
   29112:	f7ff fe8b 	bl	28e2c <atomic_set_bit>
	return 0;
   29116:	2000      	movs	r0, #0
}
   29118:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   2911a:	2008      	movs	r0, #8
   2911c:	e7fc      	b.n	29118 <smp_ident_info+0x38>

0002911e <smp_encrypt_info>:
{
   2911e:	b538      	push	{r3, r4, r5, lr}
   29120:	4604      	mov	r4, r0
   29122:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   29124:	30bc      	adds	r0, #188	; 0xbc
   29126:	210c      	movs	r1, #12
   29128:	f7ff ff56 	bl	28fd8 <atomic_test_bit>
   2912c:	b168      	cbz	r0, 2914a <smp_encrypt_info+0x2c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   2912e:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   29130:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   29132:	2004      	movs	r0, #4
   29134:	7a19      	ldrb	r1, [r3, #8]
   29136:	f103 0288 	add.w	r2, r3, #136	; 0x88
   2913a:	f000 fb5b 	bl	297f4 <bt_keys_get_type>
		if (!keys) {
   2913e:	b158      	cbz	r0, 29158 <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   29140:	2210      	movs	r2, #16
   29142:	4629      	mov	r1, r5
   29144:	301a      	adds	r0, #26
   29146:	f7fd fc2c 	bl	269a2 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   2914a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   2914e:	2107      	movs	r1, #7
   29150:	f7ff fe6c 	bl	28e2c <atomic_set_bit>
	return 0;
   29154:	2000      	movs	r0, #0
}
   29156:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   29158:	2008      	movs	r0, #8
   2915a:	e7fc      	b.n	29156 <smp_encrypt_info+0x38>

0002915c <atomic_test_and_clear_bit>:
{
   2915c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2915e:	2301      	movs	r3, #1
   29160:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   29164:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29166:	f3bf 8f5b 	dmb	ish
   2916a:	e850 3f00 	ldrex	r3, [r0]
   2916e:	ea03 0c02 	and.w	ip, r3, r2
   29172:	e840 ce00 	strex	lr, ip, [r0]
   29176:	f1be 0f00 	cmp.w	lr, #0
   2917a:	d1f6      	bne.n	2916a <atomic_test_and_clear_bit+0xe>
   2917c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   29180:	420b      	tst	r3, r1
}
   29182:	bf14      	ite	ne
   29184:	2001      	movne	r0, #1
   29186:	2000      	moveq	r0, #0
   29188:	f85d fb04 	ldr.w	pc, [sp], #4

0002918c <smp_reset>:
{
   2918c:	b538      	push	{r3, r4, r5, lr}
   2918e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   29190:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   29192:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   29196:	f004 fa0d 	bl	2d5b4 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   2919a:	2300      	movs	r3, #0
   2919c:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   291a0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   291a4:	f3bf 8f5b 	dmb	ish
   291a8:	e850 2f00 	ldrex	r2, [r0]
   291ac:	e840 3100 	strex	r1, r3, [r0]
   291b0:	2900      	cmp	r1, #0
   291b2:	d1f9      	bne.n	291a8 <smp_reset+0x1c>
   291b4:	f3bf 8f5b 	dmb	ish
   291b8:	f3bf 8f5b 	dmb	ish
   291bc:	34bc      	adds	r4, #188	; 0xbc
   291be:	e854 2f00 	ldrex	r2, [r4]
   291c2:	e844 3100 	strex	r1, r3, [r4]
   291c6:	2900      	cmp	r1, #0
   291c8:	d1f9      	bne.n	291be <smp_reset+0x32>
   291ca:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   291ce:	7a6b      	ldrb	r3, [r5, #9]
   291d0:	7aaa      	ldrb	r2, [r5, #10]
   291d2:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   291d4:	bf18      	it	ne
   291d6:	72ab      	strbne	r3, [r5, #10]
}
   291d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   291dc:	2101      	movs	r1, #1
   291de:	f7ff be25 	b.w	28e2c <atomic_set_bit>

000291e2 <smp_error>:
{
   291e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   291e4:	4606      	mov	r6, r0
   291e6:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   291e8:	f7e2 fcfe 	bl	bbe8 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   291ec:	2105      	movs	r1, #5
   291ee:	4630      	mov	r0, r6
   291f0:	f7ff fefb 	bl	28fea <smp_create_pdu.isra.0>
	if (!buf) {
   291f4:	4605      	mov	r5, r0
   291f6:	b178      	cbz	r0, 29218 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   291f8:	2101      	movs	r1, #1
   291fa:	3008      	adds	r0, #8
   291fc:	f002 ff4d 	bl	2c09a <net_buf_simple_add>
	rsp->reason = reason;
   29200:	7004      	strb	r4, [r0, #0]
   29202:	2400      	movs	r4, #0
   29204:	6830      	ldr	r0, [r6, #0]
   29206:	9400      	str	r4, [sp, #0]
   29208:	4623      	mov	r3, r4
   2920a:	462a      	mov	r2, r5
   2920c:	2106      	movs	r1, #6
   2920e:	f7fe fcb5 	bl	27b7c <bt_l2cap_send_cb>
	return 0;
   29212:	4620      	mov	r0, r4
}
   29214:	b002      	add	sp, #8
   29216:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   29218:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2921c:	e7fa      	b.n	29214 <smp_error+0x32>

0002921e <smp_timeout>:
{
   2921e:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   29220:	2108      	movs	r1, #8
{
   29222:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   29224:	f5a0 70d4 	sub.w	r0, r0, #424	; 0x1a8
   29228:	f7e2 fcde 	bl	bbe8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2922c:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   29230:	2104      	movs	r1, #4
}
   29232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   29236:	f7ff bdf9 	b.w	28e2c <atomic_set_bit>

0002923a <smp_master_ident>:
{
   2923a:	b570      	push	{r4, r5, r6, lr}
   2923c:	460b      	mov	r3, r1
   2923e:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   29240:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   29242:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   29246:	f7ff fec7 	bl	28fd8 <atomic_test_bit>
   2924a:	b1c8      	cbz	r0, 29280 <smp_master_ident+0x46>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   2924c:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   2924e:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   29250:	f105 0288 	add.w	r2, r5, #136	; 0x88
   29254:	2004      	movs	r0, #4
   29256:	f000 facd 	bl	297f4 <bt_keys_get_type>
		if (!keys) {
   2925a:	4605      	mov	r5, r0
   2925c:	b330      	cbz	r0, 292ac <smp_master_ident+0x72>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   2925e:	2202      	movs	r2, #2
   29260:	4631      	mov	r1, r6
   29262:	3018      	adds	r0, #24
   29264:	f7fd fb9d 	bl	269a2 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   29268:	2208      	movs	r2, #8
   2926a:	1cb1      	adds	r1, r6, #2
   2926c:	f105 0010 	add.w	r0, r5, #16
   29270:	f7fd fb97 	bl	269a2 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   29274:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   29278:	f023 0301 	bic.w	r3, r3, #1
   2927c:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   29280:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   29284:	079a      	lsls	r2, r3, #30
   29286:	d50d      	bpl.n	292a4 <smp_master_ident+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   29288:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   2928a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   2928e:	f7ff fdcd 	bl	28e2c <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   29292:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
   29296:	b91d      	cbnz	r5, 292a0 <smp_master_ident+0x66>
		smp_pairing_complete(smp, 0);
   29298:	4629      	mov	r1, r5
   2929a:	4620      	mov	r0, r4
   2929c:	f7e2 fca4 	bl	bbe8 <smp_pairing_complete>
	return 0;
   292a0:	2000      	movs	r0, #0
   292a2:	e004      	b.n	292ae <smp_master_ident+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   292a4:	075b      	lsls	r3, r3, #29
   292a6:	d5f4      	bpl.n	29292 <smp_master_ident+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   292a8:	210a      	movs	r1, #10
   292aa:	e7ee      	b.n	2928a <smp_master_ident+0x50>
			return BT_SMP_ERR_UNSPECIFIED;
   292ac:	2008      	movs	r0, #8
}
   292ae:	bd70      	pop	{r4, r5, r6, pc}

000292b0 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   292b0:	b510      	push	{r4, lr}
   292b2:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   292b4:	2106      	movs	r1, #6
   292b6:	f7fe fca7 	bl	27c08 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   292ba:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   292be:	ea22 0104 	bic.w	r1, r2, r4
   292c2:	f880 11a0 	strb.w	r1, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   292c6:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   292ca:	b919      	cbnz	r1, 292d4 <smp_check_complete.part.0+0x24>
}
   292cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   292d0:	f7e2 bc8a 	b.w	bbe8 <smp_pairing_complete>
}
   292d4:	bd10      	pop	{r4, pc}

000292d6 <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   292d6:	7881      	ldrb	r1, [r0, #2]
   292d8:	2901      	cmp	r1, #1
   292da:	d101      	bne.n	292e0 <smp_ident_sent+0xa>
   292dc:	f7ff bfe8 	b.w	292b0 <smp_check_complete.part.0>
}
   292e0:	4770      	bx	lr

000292e2 <smp_id_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   292e2:	7883      	ldrb	r3, [r0, #2]
   292e4:	2b01      	cmp	r3, #1
   292e6:	d102      	bne.n	292ee <smp_id_sent+0xc>
   292e8:	2102      	movs	r1, #2
   292ea:	f7ff bfe1 	b.w	292b0 <smp_check_complete.part.0>
}
   292ee:	4770      	bx	lr

000292f0 <smp_c1>:
{
   292f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   292f4:	b089      	sub	sp, #36	; 0x24
   292f6:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   292fa:	4699      	mov	r9, r3
	p1[0] = ia->type;
   292fc:	783b      	ldrb	r3, [r7, #0]
{
   292fe:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   29300:	f88d 3000 	strb.w	r3, [sp]
{
   29304:	460c      	mov	r4, r1
	p1[1] = ra->type;
   29306:	f898 3000 	ldrb.w	r3, [r8]
   2930a:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2930e:	4611      	mov	r1, r2
   29310:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   29312:	2207      	movs	r2, #7
   29314:	f10d 0002 	add.w	r0, sp, #2
   29318:	f7fd fb43 	bl	269a2 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2931c:	2207      	movs	r2, #7
   2931e:	4649      	mov	r1, r9
   29320:	f10d 0009 	add.w	r0, sp, #9
   29324:	f7fd fb3d 	bl	269a2 <memcpy>
	while (len--) {
   29328:	f104 0010 	add.w	r0, r4, #16
   2932c:	4629      	mov	r1, r5
   2932e:	466a      	mov	r2, sp
   29330:	4284      	cmp	r4, r0
   29332:	d127      	bne.n	29384 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   29334:	462a      	mov	r2, r5
   29336:	4629      	mov	r1, r5
   29338:	4630      	mov	r0, r6
   2933a:	f7ec fded 	bl	15f18 <bt_encrypt_le>
	if (err) {
   2933e:	4604      	mov	r4, r0
   29340:	b9e0      	cbnz	r0, 2937c <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   29342:	2206      	movs	r2, #6
   29344:	f108 0101 	add.w	r1, r8, #1
   29348:	a804      	add	r0, sp, #16
   2934a:	f7fd fb2a 	bl	269a2 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2934e:	2206      	movs	r2, #6
   29350:	1c79      	adds	r1, r7, #1
   29352:	f10d 0016 	add.w	r0, sp, #22
   29356:	f7fd fb24 	bl	269a2 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2935a:	2204      	movs	r2, #4
   2935c:	4621      	mov	r1, r4
   2935e:	a807      	add	r0, sp, #28
   29360:	f7fd fb4a 	bl	269f8 <memset>
	while (len--) {
   29364:	f105 0010 	add.w	r0, r5, #16
   29368:	462a      	mov	r2, r5
   2936a:	ab04      	add	r3, sp, #16
   2936c:	4282      	cmp	r2, r0
   2936e:	d112      	bne.n	29396 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   29370:	462a      	mov	r2, r5
   29372:	4629      	mov	r1, r5
   29374:	4630      	mov	r0, r6
   29376:	f7ec fdcf 	bl	15f18 <bt_encrypt_le>
   2937a:	4604      	mov	r4, r0
}
   2937c:	4620      	mov	r0, r4
   2937e:	b009      	add	sp, #36	; 0x24
   29380:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   29384:	f814 3b01 	ldrb.w	r3, [r4], #1
   29388:	f812 cb01 	ldrb.w	ip, [r2], #1
   2938c:	ea83 030c 	eor.w	r3, r3, ip
   29390:	f801 3b01 	strb.w	r3, [r1], #1
   29394:	e7cc      	b.n	29330 <smp_c1+0x40>
   29396:	f812 1b01 	ldrb.w	r1, [r2], #1
   2939a:	f813 4b01 	ldrb.w	r4, [r3], #1
   2939e:	4061      	eors	r1, r4
   293a0:	f802 1c01 	strb.w	r1, [r2, #-1]
   293a4:	e7e2      	b.n	2936c <smp_c1+0x7c>

000293a6 <legacy_pairing_confirm>:
{
   293a6:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   293a8:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   293ac:	b085      	sub	sp, #20
   293ae:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   293b0:	2109      	movs	r1, #9
   293b2:	4638      	mov	r0, r7
   293b4:	f7ff fe10 	bl	28fd8 <atomic_test_bit>
   293b8:	bb90      	cbnz	r0, 29420 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   293ba:	2104      	movs	r1, #4
   293bc:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   293c0:	f7ff fd34 	bl	28e2c <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   293c4:	2103      	movs	r1, #3
   293c6:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   293c8:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   293ca:	f7ff fe0e 	bl	28fea <smp_create_pdu.isra.0>
	if (!buf) {
   293ce:	4606      	mov	r6, r0
   293d0:	b1c0      	cbz	r0, 29404 <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   293d2:	2110      	movs	r1, #16
   293d4:	3008      	adds	r0, #8
   293d6:	f002 fe60 	bl	2c09a <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   293da:	f104 0396 	add.w	r3, r4, #150	; 0x96
   293de:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   293e0:	9002      	str	r0, [sp, #8]
   293e2:	9301      	str	r3, [sp, #4]
   293e4:	9400      	str	r4, [sp, #0]
   293e6:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   293ea:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   293ee:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   293f2:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   293f6:	f7ff ff7b 	bl	292f0 <smp_c1>
   293fa:	4604      	mov	r4, r0
   293fc:	b120      	cbz	r0, 29408 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   293fe:	4630      	mov	r0, r6
   29400:	f7f6 fcc4 	bl	1fd8c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   29404:	2008      	movs	r0, #8
   29406:	e009      	b.n	2941c <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   29408:	4602      	mov	r2, r0
   2940a:	4631      	mov	r1, r6
   2940c:	4628      	mov	r0, r5
   2940e:	f7e2 f803 	bl	b418 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29412:	4621      	mov	r1, r4
   29414:	4638      	mov	r0, r7
   29416:	f7ff fd17 	bl	28e48 <atomic_clear_bit>
	return 0;
   2941a:	2000      	movs	r0, #0
}
   2941c:	b005      	add	sp, #20
   2941e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29420:	2100      	movs	r1, #0
   29422:	4638      	mov	r0, r7
   29424:	f7ff fd02 	bl	28e2c <atomic_set_bit>
   29428:	e7f7      	b.n	2941a <legacy_pairing_confirm+0x74>

0002942a <smp_pairing_confirm>:
{
   2942a:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2942c:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2942e:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
   29432:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   29434:	210a      	movs	r1, #10
   29436:	4628      	mov	r0, r5
   29438:	f7ff fd06 	bl	28e48 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2943c:	4631      	mov	r1, r6
   2943e:	2210      	movs	r2, #16
   29440:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   29444:	f7fd faad 	bl	269a2 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   29448:	2105      	movs	r1, #5
   2944a:	4628      	mov	r0, r5
   2944c:	f7ff fdc4 	bl	28fd8 <atomic_test_bit>
   29450:	b920      	cbnz	r0, 2945c <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   29452:	4620      	mov	r0, r4
}
   29454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   29458:	f7ff bfa5 	b.w	293a6 <legacy_pairing_confirm>
	switch (smp->method) {
   2945c:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   29460:	2b01      	cmp	r3, #1
   29462:	d00b      	beq.n	2947c <smp_pairing_confirm+0x52>
   29464:	2b02      	cmp	r3, #2
   29466:	d115      	bne.n	29494 <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   29468:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   2946c:	2104      	movs	r1, #4
   2946e:	f7ff fcdd 	bl	28e2c <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   29472:	4620      	mov	r0, r4
}
   29474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   29478:	f7e2 b8ec 	b.w	b654 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2947c:	2109      	movs	r1, #9
   2947e:	4628      	mov	r0, r5
   29480:	f7ff fdaa 	bl	28fd8 <atomic_test_bit>
   29484:	2800      	cmp	r0, #0
   29486:	d0ef      	beq.n	29468 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   29488:	4628      	mov	r0, r5
   2948a:	2100      	movs	r1, #0
   2948c:	f7ff fcce 	bl	28e2c <atomic_set_bit>
			return 0;
   29490:	2000      	movs	r0, #0
}
   29492:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   29494:	2008      	movs	r0, #8
   29496:	e7fc      	b.n	29492 <smp_pairing_confirm+0x68>

00029498 <smp_ident_addr_info>:
{
   29498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   2949c:	688f      	ldr	r7, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   2949e:	783b      	ldrb	r3, [r7, #0]
{
   294a0:	4605      	mov	r5, r0
   294a2:	b123      	cbz	r3, 294ae <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   294a4:	79bb      	ldrb	r3, [r7, #6]
   294a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   294aa:	2bc0      	cmp	r3, #192	; 0xc0
   294ac:	d155      	bne.n	2955a <smp_ident_addr_info+0xc2>
	struct bt_conn *conn = smp->chan.chan.conn;
   294ae:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   294b0:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   294b2:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   294b6:	f7ff fd8f 	bl	28fd8 <atomic_test_bit>
   294ba:	b3a8      	cbz	r0, 29528 <smp_ident_addr_info+0x90>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   294bc:	f104 0888 	add.w	r8, r4, #136	; 0x88
   294c0:	7a21      	ldrb	r1, [r4, #8]
   294c2:	4642      	mov	r2, r8
   294c4:	2002      	movs	r0, #2
   294c6:	f000 f995 	bl	297f4 <bt_keys_get_type>
		if (!keys) {
   294ca:	4606      	mov	r6, r0
   294cc:	2800      	cmp	r0, #0
   294ce:	d047      	beq.n	29560 <smp_ident_addr_info+0xc8>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   294d0:	78e3      	ldrb	r3, [r4, #3]
   294d2:	2b00      	cmp	r3, #0
   294d4:	d13e      	bne.n	29554 <smp_ident_addr_info+0xbc>
			dst = &conn->le.resp_addr;
   294d6:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   294da:	780b      	ldrb	r3, [r1, #0]
   294dc:	2b01      	cmp	r3, #1
   294de:	d120      	bne.n	29522 <smp_ident_addr_info+0x8a>
		if (bt_addr_le_is_rpa(dst)) {
   294e0:	798b      	ldrb	r3, [r1, #6]
   294e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   294e6:	2b40      	cmp	r3, #64	; 0x40
   294e8:	d11b      	bne.n	29522 <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   294ea:	2206      	movs	r2, #6
   294ec:	3101      	adds	r1, #1
   294ee:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   294f2:	f7fd fa56 	bl	269a2 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   294f6:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   294fa:	b193      	cbz	r3, 29522 <smp_ident_addr_info+0x8a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   294fc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   29500:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29504:	2bc0      	cmp	r3, #192	; 0xc0
   29506:	d00c      	beq.n	29522 <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   29508:	2207      	movs	r2, #7
   2950a:	4639      	mov	r1, r7
   2950c:	1c70      	adds	r0, r6, #1
   2950e:	f7fd fa48 	bl	269a2 <memcpy>
   29512:	2207      	movs	r2, #7
   29514:	4639      	mov	r1, r7
   29516:	4640      	mov	r0, r8
   29518:	f7fd fa43 	bl	269a2 <memcpy>
				bt_conn_identity_resolved(conn);
   2951c:	4620      	mov	r0, r4
   2951e:	f7df fe69 	bl	91f4 <bt_conn_identity_resolved>
		bt_id_add(keys);
   29522:	4630      	mov	r0, r6
   29524:	f7de fc9a 	bl	7e5c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   29528:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
   2952c:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   29530:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   29532:	f885 21a1 	strb.w	r2, [r5, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   29536:	d504      	bpl.n	29542 <smp_ident_addr_info+0xaa>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   29538:	210a      	movs	r1, #10
   2953a:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   2953e:	f7ff fc75 	bl	28e2c <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   29542:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
   29546:	b91c      	cbnz	r4, 29550 <smp_ident_addr_info+0xb8>
		smp_pairing_complete(smp, 0);
   29548:	4621      	mov	r1, r4
   2954a:	4628      	mov	r0, r5
   2954c:	f7e2 fb4c 	bl	bbe8 <smp_pairing_complete>
	return 0;
   29550:	2000      	movs	r0, #0
   29552:	e003      	b.n	2955c <smp_ident_addr_info+0xc4>
			dst = &conn->le.init_addr;
   29554:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   29558:	e7bf      	b.n	294da <smp_ident_addr_info+0x42>
		return BT_SMP_ERR_INVALID_PARAMS;
   2955a:	200a      	movs	r0, #10
}
   2955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   29560:	2008      	movs	r0, #8
   29562:	e7fb      	b.n	2955c <smp_ident_addr_info+0xc4>

00029564 <bt_smp_request_ltk>:
{
   29564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   29568:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   2956a:	e9cd 2300 	strd	r2, r3, [sp]
   2956e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   29570:	f7ff fc59 	bl	28e26 <smp_chan_get>
	if (!smp) {
   29574:	4605      	mov	r5, r0
   29576:	2800      	cmp	r0, #0
   29578:	f000 809d 	beq.w	296b6 <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   2957c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   29580:	f1b9 0f00 	cmp.w	r9, #0
   29584:	d12d      	bne.n	295e2 <bt_smp_request_ltk+0x7e>
   29586:	e9dd 2300 	ldrd	r2, r3, [sp]
   2958a:	4313      	orrs	r3, r2
   2958c:	d129      	bne.n	295e2 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2958e:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   29592:	2103      	movs	r1, #3
   29594:	4640      	mov	r0, r8
   29596:	f7ff fd1f 	bl	28fd8 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2959a:	b310      	cbz	r0, 295e2 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2959c:	2101      	movs	r1, #1
   2959e:	4640      	mov	r0, r8
   295a0:	f7ff fd1a 	bl	28fd8 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   295a4:	4606      	mov	r6, r0
   295a6:	b1e0      	cbz	r0, 295e2 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   295a8:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   295ac:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   295b0:	429c      	cmp	r4, r3
   295b2:	bf28      	it	cs
   295b4:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   295b6:	4622      	mov	r2, r4
   295b8:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   295bc:	4638      	mov	r0, r7
   295be:	f7fd f9f0 	bl	269a2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   295c2:	2c0f      	cmp	r4, #15
   295c4:	d805      	bhi.n	295d2 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   295c6:	f1c4 0210 	rsb	r2, r4, #16
   295ca:	4649      	mov	r1, r9
   295cc:	1938      	adds	r0, r7, r4
   295ce:	f7fd fa13 	bl	269f8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   295d2:	2101      	movs	r1, #1
   295d4:	4640      	mov	r0, r8
   295d6:	f7ff fc29 	bl	28e2c <atomic_set_bit>
}
   295da:	4630      	mov	r0, r6
   295dc:	b003      	add	sp, #12
   295de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   295e2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   295e6:	b983      	cbnz	r3, 2960a <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   295e8:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   295ec:	7a21      	ldrb	r1, [r4, #8]
   295ee:	4632      	mov	r2, r6
   295f0:	2020      	movs	r0, #32
   295f2:	f7e2 ff43 	bl	c47c <bt_keys_find>
   295f6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   295fa:	b930      	cbnz	r0, 2960a <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   295fc:	7a21      	ldrb	r1, [r4, #8]
   295fe:	4632      	mov	r2, r6
   29600:	2001      	movs	r0, #1
   29602:	f7e2 ff3b 	bl	c47c <bt_keys_find>
   29606:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2960a:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   2960e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   29612:	b9ce      	cbnz	r6, 29648 <bt_smp_request_ltk+0xe4>
   29614:	e9dd 2300 	ldrd	r2, r3, [sp]
   29618:	4313      	orrs	r3, r2
   2961a:	d115      	bne.n	29648 <bt_smp_request_ltk+0xe4>
   2961c:	2800      	cmp	r0, #0
   2961e:	d03c      	beq.n	2969a <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   29620:	89c3      	ldrh	r3, [r0, #14]
   29622:	069a      	lsls	r2, r3, #26
   29624:	d511      	bpl.n	2964a <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   29626:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   29628:	f100 011a 	add.w	r1, r0, #26
   2962c:	4622      	mov	r2, r4
   2962e:	4638      	mov	r0, r7
   29630:	f7fd f9b7 	bl	269a2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   29634:	2c0f      	cmp	r4, #15
   29636:	d805      	bhi.n	29644 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   29638:	f1c4 0210 	rsb	r2, r4, #16
   2963c:	4631      	mov	r1, r6
   2963e:	1938      	adds	r0, r7, r4
   29640:	f7fd f9da 	bl	269f8 <memset>
		return true;
   29644:	2601      	movs	r6, #1
   29646:	e7c8      	b.n	295da <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   29648:	b338      	cbz	r0, 2969a <bt_smp_request_ltk+0x136>
   2964a:	89c3      	ldrh	r3, [r0, #14]
   2964c:	07db      	lsls	r3, r3, #31
   2964e:	d524      	bpl.n	2969a <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   29650:	2208      	movs	r2, #8
   29652:	4669      	mov	r1, sp
   29654:	3040      	adds	r0, #64	; 0x40
   29656:	f7fd f994 	bl	26982 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   2965a:	b9f0      	cbnz	r0, 2969a <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   2965c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   29660:	2202      	movs	r2, #2
   29662:	a90a      	add	r1, sp, #40	; 0x28
   29664:	3048      	adds	r0, #72	; 0x48
   29666:	f7fd f98c 	bl	26982 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2966a:	4606      	mov	r6, r0
   2966c:	b9a8      	cbnz	r0, 2969a <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   2966e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   29672:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   29674:	4638      	mov	r0, r7
   29676:	4622      	mov	r2, r4
   29678:	314a      	adds	r1, #74	; 0x4a
   2967a:	f7fd f992 	bl	269a2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2967e:	2c0f      	cmp	r4, #15
   29680:	d805      	bhi.n	2968e <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   29682:	f1c4 0210 	rsb	r2, r4, #16
   29686:	4631      	mov	r1, r6
   29688:	1938      	adds	r0, r7, r4
   2968a:	f7fd f9b5 	bl	269f8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2968e:	2101      	movs	r1, #1
   29690:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   29694:	f7ff fbca 	bl	28e2c <atomic_set_bit>
		return true;
   29698:	e7d4      	b.n	29644 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2969a:	210e      	movs	r1, #14
   2969c:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   296a0:	f7ff fc9a 	bl	28fd8 <atomic_test_bit>
   296a4:	b120      	cbz	r0, 296b0 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   296a6:	2202      	movs	r2, #2
   296a8:	2106      	movs	r1, #6
   296aa:	4620      	mov	r0, r4
   296ac:	f7df fdbc 	bl	9228 <bt_conn_security_changed>
	smp_reset(smp);
   296b0:	4628      	mov	r0, r5
   296b2:	f7ff fd6b 	bl	2918c <smp_reset>
	return false;
   296b6:	2600      	movs	r6, #0
   296b8:	e78f      	b.n	295da <bt_smp_request_ltk+0x76>

000296ba <bt_smp_sign>:
   296ba:	f06f 0022 	mvn.w	r0, #34	; 0x22
   296be:	4770      	bx	lr

000296c0 <bt_smp_irk_get>:
{
   296c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   296c2:	2500      	movs	r5, #0
{
   296c4:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   296c6:	2210      	movs	r2, #16
   296c8:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   296ca:	e9cd 5500 	strd	r5, r5, [sp]
   296ce:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   296d2:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   296d4:	f7fd f955 	bl	26982 <memcmp>
   296d8:	b180      	cbz	r0, 296fc <bt_smp_irk_get+0x3c>
	dst[0] = val;
   296da:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   296dc:	220c      	movs	r2, #12
   296de:	4629      	mov	r1, r5
   296e0:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   296e2:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   296e4:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   296e6:	70e5      	strb	r5, [r4, #3]
   296e8:	1d20      	adds	r0, r4, #4
   296ea:	f7fd f985 	bl	269f8 <memset>
	err = bt_encrypt_le(key, res, res);
   296ee:	4622      	mov	r2, r4
   296f0:	4621      	mov	r1, r4
   296f2:	4630      	mov	r0, r6
   296f4:	f7ec fc10 	bl	15f18 <bt_encrypt_le>
}
   296f8:	b004      	add	sp, #16
   296fa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   296fc:	f06f 0015 	mvn.w	r0, #21
   29700:	e7fa      	b.n	296f8 <bt_smp_irk_get+0x38>

00029702 <bt_smp_update_keys>:
{
   29702:	b570      	push	{r4, r5, r6, lr}
   29704:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   29706:	f7ff fb8e 	bl	28e26 <smp_chan_get>
	if (!smp) {
   2970a:	4605      	mov	r5, r0
   2970c:	2800      	cmp	r0, #0
   2970e:	d06e      	beq.n	297ee <bt_smp_update_keys+0xec>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   29710:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
   29714:	2103      	movs	r1, #3
   29716:	4630      	mov	r0, r6
   29718:	f7ff fc5e 	bl	28fd8 <atomic_test_bit>
   2971c:	2800      	cmp	r0, #0
   2971e:	d066      	beq.n	297ee <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
   29720:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   29724:	b108      	cbz	r0, 2972a <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   29726:	f7e2 ff09 	bl	c53c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2972a:	7a20      	ldrb	r0, [r4, #8]
   2972c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   29730:	f7e2 fe64 	bl	c3fc <bt_keys_get_addr>
   29734:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   29738:	b928      	cbnz	r0, 29746 <bt_smp_update_keys+0x44>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   2973a:	4628      	mov	r0, r5
   2973c:	2108      	movs	r1, #8
}
   2973e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   29742:	f7ff bd4e 	b.w	291e2 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   29746:	210d      	movs	r1, #13
   29748:	4630      	mov	r0, r6
   2974a:	f7ff fc45 	bl	28fd8 <atomic_test_bit>
   2974e:	b128      	cbz	r0, 2975c <bt_smp_update_keys+0x5a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   29750:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   29754:	7b53      	ldrb	r3, [r2, #13]
   29756:	f043 0302 	orr.w	r3, r3, #2
   2975a:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   2975c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   29760:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   29764:	2a03      	cmp	r2, #3
   29766:	7b4b      	ldrb	r3, [r1, #13]
   29768:	d838      	bhi.n	297dc <bt_smp_update_keys+0xda>
   2976a:	b3d2      	cbz	r2, 297e2 <bt_smp_update_keys+0xe0>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   2976c:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   29770:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   29772:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   29776:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
   2977a:	4293      	cmp	r3, r2
   2977c:	bf28      	it	cs
   2977e:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   29780:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   29782:	4630      	mov	r0, r6
   29784:	2105      	movs	r1, #5
   29786:	f7ff fc27 	bl	28fd8 <atomic_test_bit>
   2978a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   2978e:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   29790:	b350      	cbz	r0, 297e8 <bt_smp_update_keys+0xe6>
		conn->le.keys->flags |= BT_KEYS_SC;
   29792:	f042 0210 	orr.w	r2, r2, #16
   29796:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   29798:	210c      	movs	r1, #12
   2979a:	4630      	mov	r0, r6
   2979c:	f7ff fc1c 	bl	28fd8 <atomic_test_bit>
   297a0:	b328      	cbz	r0, 297ee <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   297a2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   297a6:	2120      	movs	r1, #32
   297a8:	f000 f834 	bl	29814 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   297ac:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   297b0:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   297b4:	2210      	movs	r2, #16
   297b6:	301a      	adds	r0, #26
   297b8:	f7fd f8f3 	bl	269a2 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   297bc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   297c0:	2208      	movs	r2, #8
   297c2:	2100      	movs	r1, #0
   297c4:	3010      	adds	r0, #16
   297c6:	f7fd f917 	bl	269f8 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   297ca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   297ce:	2202      	movs	r2, #2
}
   297d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   297d4:	2100      	movs	r1, #0
   297d6:	3018      	adds	r0, #24
   297d8:	f7fd b90e 	b.w	269f8 <memset>
	switch (smp->method) {
   297dc:	3a05      	subs	r2, #5
   297de:	2a01      	cmp	r2, #1
   297e0:	d9c4      	bls.n	2976c <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   297e2:	f023 0301 	bic.w	r3, r3, #1
   297e6:	e7c3      	b.n	29770 <bt_smp_update_keys+0x6e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   297e8:	f022 0210 	bic.w	r2, r2, #16
   297ec:	735a      	strb	r2, [r3, #13]
}
   297ee:	bd70      	pop	{r4, r5, r6, pc}

000297f0 <id_add>:
	bt_id_add(keys);
   297f0:	f7de bb34 	b.w	7e5c <bt_id_add>

000297f4 <bt_keys_get_type>:
{
   297f4:	b570      	push	{r4, r5, r6, lr}
   297f6:	4604      	mov	r4, r0
   297f8:	460d      	mov	r5, r1
   297fa:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   297fc:	f7e2 fe3e 	bl	c47c <bt_keys_find>
	if (keys) {
   29800:	b938      	cbnz	r0, 29812 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   29802:	4631      	mov	r1, r6
   29804:	4628      	mov	r0, r5
   29806:	f7e2 fdf9 	bl	c3fc <bt_keys_get_addr>
	if (!keys) {
   2980a:	b110      	cbz	r0, 29812 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   2980c:	89c3      	ldrh	r3, [r0, #14]
   2980e:	431c      	orrs	r4, r3
   29810:	81c4      	strh	r4, [r0, #14]
}
   29812:	bd70      	pop	{r4, r5, r6, pc}

00029814 <bt_keys_add_type>:
	keys->keys |= type;
   29814:	89c3      	ldrh	r3, [r0, #14]
   29816:	4319      	orrs	r1, r3
   29818:	81c1      	strh	r1, [r0, #14]
}
   2981a:	4770      	bx	lr

0002981c <keys_set>:
{
   2981c:	b570      	push	{r4, r5, r6, lr}
   2981e:	4605      	mov	r5, r0
   29820:	b098      	sub	sp, #96	; 0x60
   29822:	4614      	mov	r4, r2
   29824:	4618      	mov	r0, r3
	if (!name) {
   29826:	b915      	cbnz	r5, 2982e <keys_set+0x12>
			return -EINVAL;
   29828:	f06f 0415 	mvn.w	r4, #21
   2982c:	e021      	b.n	29872 <keys_set+0x56>
	len = read_cb(cb_arg, val, sizeof(val));
   2982e:	2250      	movs	r2, #80	; 0x50
   29830:	a904      	add	r1, sp, #16
   29832:	47a0      	blx	r4
	if (len < 0) {
   29834:	1e04      	subs	r4, r0, #0
   29836:	dbf7      	blt.n	29828 <keys_set+0xc>
	err = bt_settings_decode_key(name, &addr);
   29838:	a902      	add	r1, sp, #8
   2983a:	4628      	mov	r0, r5
   2983c:	f7fd f98d 	bl	26b5a <bt_settings_decode_key>
	if (err) {
   29840:	4606      	mov	r6, r0
   29842:	2800      	cmp	r0, #0
   29844:	d1f0      	bne.n	29828 <keys_set+0xc>
	settings_name_next(name, &next);
   29846:	a901      	add	r1, sp, #4
   29848:	4628      	mov	r0, r5
   2984a:	f7fb fbcf 	bl	24fec <settings_name_next>
	if (!next) {
   2984e:	9801      	ldr	r0, [sp, #4]
   29850:	b120      	cbz	r0, 2985c <keys_set+0x40>
		id = strtol(next, NULL, 10);
   29852:	220a      	movs	r2, #10
   29854:	4631      	mov	r1, r6
   29856:	f7fc ffc8 	bl	267ea <strtol>
   2985a:	b2c0      	uxtb	r0, r0
	if (!len) {
   2985c:	b964      	cbnz	r4, 29878 <keys_set+0x5c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   2985e:	4601      	mov	r1, r0
   29860:	aa02      	add	r2, sp, #8
   29862:	203f      	movs	r0, #63	; 0x3f
   29864:	f7e2 fe0a 	bl	c47c <bt_keys_find>
		if (keys) {
   29868:	b118      	cbz	r0, 29872 <keys_set+0x56>
			(void)memset(keys, 0, sizeof(*keys));
   2986a:	225c      	movs	r2, #92	; 0x5c
   2986c:	4621      	mov	r1, r4
   2986e:	f7fd f8c3 	bl	269f8 <memset>
}
   29872:	4620      	mov	r0, r4
   29874:	b018      	add	sp, #96	; 0x60
   29876:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(id, &addr);
   29878:	a902      	add	r1, sp, #8
   2987a:	f7e2 fdbf 	bl	c3fc <bt_keys_get_addr>
	if (!keys) {
   2987e:	b158      	cbz	r0, 29898 <keys_set+0x7c>
	if (len != BT_KEYS_STORAGE_LEN) {
   29880:	2c50      	cmp	r4, #80	; 0x50
   29882:	d002      	beq.n	2988a <keys_set+0x6e>
			bt_keys_clear(keys);
   29884:	f7e2 fe5a 	bl	c53c <bt_keys_clear>
   29888:	e7ce      	b.n	29828 <keys_set+0xc>
		memcpy(keys->storage_start, val, len);
   2988a:	4622      	mov	r2, r4
   2988c:	a904      	add	r1, sp, #16
   2988e:	300c      	adds	r0, #12
   29890:	f7fd f887 	bl	269a2 <memcpy>
	return 0;
   29894:	2400      	movs	r4, #0
   29896:	e7ec      	b.n	29872 <keys_set+0x56>
		return -ENOMEM;
   29898:	f06f 040b 	mvn.w	r4, #11
   2989c:	e7e9      	b.n	29872 <keys_set+0x56>

0002989e <model_start>:
	if (mod->cb && mod->cb->start) {
   2989e:	6943      	ldr	r3, [r0, #20]
   298a0:	b113      	cbz	r3, 298a8 <model_start+0xa>
   298a2:	685b      	ldr	r3, [r3, #4]
   298a4:	b103      	cbz	r3, 298a8 <model_start+0xa>
		mod->cb->start(mod);
   298a6:	4718      	bx	r3
}
   298a8:	4770      	bx	lr

000298aa <atomic_and>:
{
   298aa:	4603      	mov	r3, r0
}
   298ac:	f3bf 8f5b 	dmb	ish
   298b0:	e853 0f00 	ldrex	r0, [r3]
   298b4:	ea00 0201 	and.w	r2, r0, r1
   298b8:	e843 2c00 	strex	ip, r2, [r3]
   298bc:	f1bc 0f00 	cmp.w	ip, #0
   298c0:	d1f6      	bne.n	298b0 <atomic_and+0x6>
   298c2:	f3bf 8f5b 	dmb	ish
   298c6:	4770      	bx	lr

000298c8 <bt_mesh_init>:
{
   298c8:	b538      	push	{r3, r4, r5, lr}
   298ca:	4605      	mov	r5, r0
	err = bt_mesh_comp_register(comp);
   298cc:	4608      	mov	r0, r1
   298ce:	f7e5 fca7 	bl	f220 <bt_mesh_comp_register>
	if (err) {
   298d2:	4604      	mov	r4, r0
   298d4:	b970      	cbnz	r0, 298f4 <bt_mesh_init+0x2c>
		err = bt_mesh_prov_init(prov);
   298d6:	4628      	mov	r0, r5
   298d8:	f7e7 fca6 	bl	11228 <bt_mesh_prov_init>
		if (err) {
   298dc:	4604      	mov	r4, r0
   298de:	b948      	cbnz	r0, 298f4 <bt_mesh_init+0x2c>
	bt_mesh_net_init();
   298e0:	f7e3 ff3e 	bl	d760 <bt_mesh_net_init>
	bt_mesh_trans_init();
   298e4:	f7e5 f9ce 	bl	ec84 <bt_mesh_trans_init>
	bt_mesh_beacon_init();
   298e8:	f7e3 f9da 	bl	cca0 <bt_mesh_beacon_init>
	bt_mesh_adv_init();
   298ec:	f7e3 f858 	bl	c9a0 <bt_mesh_adv_init>
		bt_mesh_settings_init();
   298f0:	f7e7 fb12 	bl	10f18 <bt_mesh_settings_init>
}
   298f4:	4620      	mov	r0, r4
   298f6:	bd38      	pop	{r3, r4, r5, pc}

000298f8 <bt_mesh_scan_cb>:
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   298f8:	2a03      	cmp	r2, #3
{
   298fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   298fe:	460f      	mov	r7, r1
   29900:	461c      	mov	r4, r3
	if (adv_type != BT_GAP_ADV_TYPE_ADV_NONCONN_IND) {
   29902:	d010      	beq.n	29926 <bt_mesh_scan_cb+0x2e>
}
   29904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_mesh_net_recv(buf, rssi, BT_MESH_NET_IF_ADV);
   29908:	2200      	movs	r2, #0
   2990a:	4639      	mov	r1, r7
   2990c:	4620      	mov	r0, r4
   2990e:	f7e3 fe45 	bl	d59c <bt_mesh_net_recv>
	buf->data = buf->__buf + state->offset;
   29912:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   29914:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
   29918:	fa10 f686 	uxtah	r6, r0, r6
   2991c:	6026      	str	r6, [r4, #0]
		net_buf_simple_pull(buf, len);
   2991e:	4629      	mov	r1, r5
   29920:	4620      	mov	r0, r4
   29922:	f002 fc2e 	bl	2c182 <net_buf_simple_pull>
	while (buf->len > 1) {
   29926:	88a3      	ldrh	r3, [r4, #4]
   29928:	2b01      	cmp	r3, #1
   2992a:	d9eb      	bls.n	29904 <bt_mesh_scan_cb+0xc>
		len = net_buf_simple_pull_u8(buf);
   2992c:	4620      	mov	r0, r4
   2992e:	f002 fc38 	bl	2c1a2 <net_buf_simple_pull_u8>
		if (len == 0U) {
   29932:	4605      	mov	r5, r0
   29934:	2800      	cmp	r0, #0
   29936:	d0e5      	beq.n	29904 <bt_mesh_scan_cb+0xc>
		if (len > buf->len) {
   29938:	88a2      	ldrh	r2, [r4, #4]
   2993a:	b283      	uxth	r3, r0
   2993c:	429a      	cmp	r2, r3
   2993e:	d3e1      	bcc.n	29904 <bt_mesh_scan_cb+0xc>
	state->offset = net_buf_simple_headroom(buf);
   29940:	4620      	mov	r0, r4
   29942:	f002 fc52 	bl	2c1ea <net_buf_simple_headroom>
   29946:	4606      	mov	r6, r0
		type = net_buf_simple_pull_u8(buf);
   29948:	4620      	mov	r0, r4
	state->len = buf->len;
   2994a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
   2994e:	f002 fc28 	bl	2c1a2 <net_buf_simple_pull_u8>
		buf->len = len - 1;
   29952:	1e6b      	subs	r3, r5, #1
		switch (type) {
   29954:	282a      	cmp	r0, #42	; 0x2a
		buf->len = len - 1;
   29956:	80a3      	strh	r3, [r4, #4]
		switch (type) {
   29958:	d0d6      	beq.n	29908 <bt_mesh_scan_cb+0x10>
   2995a:	282b      	cmp	r0, #43	; 0x2b
   2995c:	d005      	beq.n	2996a <bt_mesh_scan_cb+0x72>
   2995e:	2829      	cmp	r0, #41	; 0x29
   29960:	d1d7      	bne.n	29912 <bt_mesh_scan_cb+0x1a>
			bt_mesh_pb_adv_recv(buf);
   29962:	4620      	mov	r0, r4
   29964:	f7e8 fcc8 	bl	122f8 <bt_mesh_pb_adv_recv>
			break;
   29968:	e7d3      	b.n	29912 <bt_mesh_scan_cb+0x1a>
			bt_mesh_beacon_recv(buf);
   2996a:	4620      	mov	r0, r4
   2996c:	f7e3 f9ca 	bl	cd04 <bt_mesh_beacon_recv>
			break;
   29970:	e7cf      	b.n	29912 <bt_mesh_scan_cb+0x1a>

00029972 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
   29972:	b508      	push	{r3, lr}
	int err;

	BT_DBG("");

	err = bt_le_scan_stop();
   29974:	f7df fa4a 	bl	8e0c <bt_le_scan_stop>
	if (err && err != -EALREADY) {
   29978:	b118      	cbz	r0, 29982 <bt_mesh_scan_disable+0x10>
		BT_ERR("stopping scan failed (err %d)", err);
		return err;
	}

	return 0;
   2997a:	f110 0f45 	cmn.w	r0, #69	; 0x45
   2997e:	bf08      	it	eq
   29980:	2000      	moveq	r0, #0
}
   29982:	bd08      	pop	{r3, pc}

00029984 <sub_update_beacon_observation>:
	sub->beacons_last = sub->beacons_cur;
   29984:	7943      	ldrb	r3, [r0, #5]
   29986:	7103      	strb	r3, [r0, #4]
	sub->beacons_cur = 0U;
   29988:	2300      	movs	r3, #0
   2998a:	7143      	strb	r3, [r0, #5]
}
   2998c:	4770      	bx	lr

0002998e <cache_check>:
{
   2998e:	b508      	push	{r3, lr}
	return !memcmp(sub->beacon_cache, beacon_data, 21);
   29990:	2215      	movs	r2, #21
   29992:	3006      	adds	r0, #6
   29994:	f7fc fff5 	bl	26982 <memcmp>
}
   29998:	fab0 f080 	clz	r0, r0
   2999c:	0940      	lsrs	r0, r0, #5
   2999e:	bd08      	pop	{r3, pc}

000299a0 <subnet_by_id>:
{
   299a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   299a2:	b085      	sub	sp, #20
   299a4:	460d      	mov	r5, r1
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   299a6:	f100 045e 	add.w	r4, r0, #94	; 0x5e
   299aa:	2600      	movs	r6, #0
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   299ac:	af02      	add	r7, sp, #8
		if (sub->keys[i].valid && auth_match(&sub->keys[i], params)) {
   299ae:	f814 3c32 	ldrb.w	r3, [r4, #-50]
   299b2:	b1cb      	cbz	r3, 299e8 <subnet_by_id+0x48>
	if (memcmp(params->net_id, keys->net_id, 8)) {
   299b4:	6828      	ldr	r0, [r5, #0]
   299b6:	2208      	movs	r2, #8
   299b8:	4621      	mov	r1, r4
   299ba:	f7fc ffe2 	bl	26982 <memcmp>
   299be:	b998      	cbnz	r0, 299e8 <subnet_by_id+0x48>
	bt_mesh_beacon_auth(keys->beacon, params->flags, keys->net_id,
   299c0:	7b29      	ldrb	r1, [r5, #12]
   299c2:	68ab      	ldr	r3, [r5, #8]
   299c4:	9700      	str	r7, [sp, #0]
   299c6:	4622      	mov	r2, r4
   299c8:	f104 0008 	add.w	r0, r4, #8
   299cc:	f000 fcad 	bl	2a32a <bt_mesh_beacon_auth>
	if (memcmp(params->auth, net_auth, 8)) {
   299d0:	6868      	ldr	r0, [r5, #4]
   299d2:	2208      	movs	r2, #8
   299d4:	4639      	mov	r1, r7
   299d6:	f7fc ffd4 	bl	26982 <memcmp>
   299da:	b928      	cbnz	r0, 299e8 <subnet_by_id+0x48>
			params->new_key = (i > 0);
   299dc:	736e      	strb	r6, [r5, #13]
			return true;
   299de:	2001      	movs	r0, #1
}
   299e0:	b005      	add	sp, #20
   299e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   299e4:	2601      	movs	r6, #1
   299e6:	e7e2      	b.n	299ae <subnet_by_id+0xe>
	for (int i = 0; i < ARRAY_SIZE(sub->keys); i++) {
   299e8:	344a      	adds	r4, #74	; 0x4a
   299ea:	2e00      	cmp	r6, #0
   299ec:	d0fa      	beq.n	299e4 <subnet_by_id+0x44>
	return false;
   299ee:	2000      	movs	r0, #0
   299f0:	e7f6      	b.n	299e0 <subnet_by_id+0x40>

000299f2 <beacon_complete>:
{
   299f2:	b510      	push	{r4, lr}
   299f4:	460c      	mov	r4, r1
	return z_impl_k_uptime_ticks();
   299f6:	f003 fe46 	bl	2d686 <z_impl_k_uptime_ticks>
   299fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   299fe:	460a      	mov	r2, r1
   29a00:	fba0 0103 	umull	r0, r1, r0, r3
   29a04:	fb03 1102 	mla	r1, r3, r2, r1
   29a08:	0bc3      	lsrs	r3, r0, #15
   29a0a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (uint32_t)k_uptime_get();
   29a0e:	6023      	str	r3, [r4, #0]
}
   29a10:	bd10      	pop	{r4, pc}

00029a12 <subnet_evt>:
	if (evt == BT_MESH_KEY_ADDED || evt == BT_MESH_KEY_SWAPPED) {
   29a12:	b109      	cbz	r1, 29a18 <subnet_evt+0x6>
   29a14:	2903      	cmp	r1, #3
   29a16:	d101      	bne.n	29a1c <subnet_evt+0xa>
		bt_mesh_beacon_update(sub);
   29a18:	f7e3 b926 	b.w	cc68 <bt_mesh_beacon_update>
}
   29a1c:	4770      	bx	lr

00029a1e <subnet_beacon_enable>:
	sub->beacons_last = 0U;
   29a1e:	2200      	movs	r2, #0
   29a20:	8082      	strh	r2, [r0, #4]
	bt_mesh_beacon_update(sub);
   29a22:	f7e3 b921 	b.w	cc68 <bt_mesh_beacon_update>

00029a26 <sys_get_be24>:
	return ((uint16_t)src[0] << 8) | src[1];
   29a26:	7842      	ldrb	r2, [r0, #1]
   29a28:	7883      	ldrb	r3, [r0, #2]
	return ((uint32_t)src[0] << 16) | sys_get_be16(&src[1]);
   29a2a:	7800      	ldrb	r0, [r0, #0]
   29a2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
}
   29a30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   29a34:	4770      	bx	lr

00029a36 <net_encrypt>:
{
   29a36:	b570      	push	{r4, r5, r6, lr}
   29a38:	460d      	mov	r5, r1
   29a3a:	4604      	mov	r4, r0
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   29a3c:	4601      	mov	r1, r0
   29a3e:	1c68      	adds	r0, r5, #1
{
   29a40:	4616      	mov	r6, r2
	err = bt_mesh_net_encrypt(cred->enc, buf, iv_index, proxy);
   29a42:	f000 fb78 	bl	2a136 <bt_mesh_net_encrypt>
	if (err) {
   29a46:	b938      	cbnz	r0, 29a58 <net_encrypt+0x22>
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   29a48:	6820      	ldr	r0, [r4, #0]
   29a4a:	f105 0211 	add.w	r2, r5, #17
   29a4e:	4631      	mov	r1, r6
}
   29a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_net_obfuscate(buf->data, iv_index, cred->privacy);
   29a54:	f7e5 ba88 	b.w	ef68 <bt_mesh_net_obfuscate>
}
   29a58:	bd70      	pop	{r4, r5, r6, pc}

00029a5a <key_refresh>:
{
   29a5a:	b538      	push	{r3, r4, r5, lr}
   29a5c:	4604      	mov	r4, r0
   29a5e:	2903      	cmp	r1, #3
   29a60:	d809      	bhi.n	29a76 <key_refresh+0x1c>
   29a62:	e8df f001 	tbb	[pc, r1]
   29a66:	0211      	.short	0x0211
   29a68:	110d      	.short	0x110d
		sub->kr_phase = new_phase;
   29a6a:	2301      	movs	r3, #1
   29a6c:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_UPDATED);
   29a6e:	2102      	movs	r1, #2
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   29a70:	4620      	mov	r0, r4
   29a72:	f7e3 fe89 	bl	d788 <subnet_evt>
		bt_mesh_store_subnet(sub->net_idx);
   29a76:	8ba0      	ldrh	r0, [r4, #28]
}
   29a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_mesh_store_subnet(sub->net_idx);
   29a7c:	f002 b8fa 	b.w	2bc74 <bt_mesh_store_subnet>
		sub->kr_phase = new_phase;
   29a80:	2302      	movs	r3, #2
   29a82:	7783      	strb	r3, [r0, #30]
		subnet_evt(sub, BT_MESH_KEY_SWAPPED);
   29a84:	2103      	movs	r1, #3
   29a86:	e7f3      	b.n	29a70 <key_refresh+0x16>
		sub->kr_phase = BT_MESH_KR_NORMAL;
   29a88:	2500      	movs	r5, #0
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   29a8a:	f100 0176 	add.w	r1, r0, #118	; 0x76
		sub->kr_phase = BT_MESH_KR_NORMAL;
   29a8e:	7785      	strb	r5, [r0, #30]
		memcpy(&sub->keys[0], &sub->keys[1], sizeof(sub->keys[0]));
   29a90:	224a      	movs	r2, #74	; 0x4a
   29a92:	302c      	adds	r0, #44	; 0x2c
   29a94:	f7fc ff85 	bl	269a2 <memcpy>
		sub->keys[1].valid = 0U;
   29a98:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
		subnet_evt(sub, BT_MESH_KEY_REVOKED);
   29a9c:	2104      	movs	r1, #4
   29a9e:	e7e7      	b.n	29a70 <key_refresh+0x16>

00029aa0 <subnet_del>:
{
   29aa0:	b510      	push	{r4, lr}
   29aa2:	4604      	mov	r4, r0
		bt_mesh_clear_subnet(sub->net_idx);
   29aa4:	8b80      	ldrh	r0, [r0, #28]
   29aa6:	f7e7 f915 	bl	10cd4 <bt_mesh_clear_subnet>
	bt_mesh_net_loopback_clear(sub->net_idx);
   29aaa:	8ba0      	ldrh	r0, [r4, #28]
   29aac:	f7e3 fcc0 	bl	d430 <bt_mesh_net_loopback_clear>
	subnet_evt(sub, BT_MESH_KEY_DELETED);
   29ab0:	2101      	movs	r1, #1
   29ab2:	4620      	mov	r0, r4
   29ab4:	f7e3 fe68 	bl	d788 <subnet_evt>
	(void)memset(sub, 0, sizeof(*sub));
   29ab8:	22c0      	movs	r2, #192	; 0xc0
   29aba:	2100      	movs	r1, #0
   29abc:	4620      	mov	r0, r4
   29abe:	f7fc ff9b 	bl	269f8 <memset>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   29ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29ac6:	83a3      	strh	r3, [r4, #28]
}
   29ac8:	bd10      	pop	{r4, pc}

00029aca <bt_mesh_kr_update>:
	if (!new_key) {
   29aca:	b16a      	cbz	r2, 29ae8 <bt_mesh_kr_update+0x1e>
	if (sub->kr_phase == BT_MESH_KR_PHASE_1) {
   29acc:	7f83      	ldrb	r3, [r0, #30]
   29ace:	2b01      	cmp	r3, #1
   29ad0:	d105      	bne.n	29ade <bt_mesh_kr_update+0x14>
		key_refresh(sub, (kr_flag ? BT_MESH_KR_PHASE_2 :
   29ad2:	2900      	cmp	r1, #0
   29ad4:	bf14      	ite	ne
   29ad6:	2102      	movne	r1, #2
   29ad8:	2103      	moveq	r1, #3
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   29ada:	f7ff bfbe 	b.w	29a5a <key_refresh>
	} else if (sub->kr_phase == BT_MESH_KR_PHASE_2 && !kr_flag) {
   29ade:	2b02      	cmp	r3, #2
   29ae0:	d102      	bne.n	29ae8 <bt_mesh_kr_update+0x1e>
   29ae2:	b909      	cbnz	r1, 29ae8 <bt_mesh_kr_update+0x1e>
		key_refresh(sub, BT_MESH_KR_PHASE_3);
   29ae4:	2103      	movs	r1, #3
   29ae6:	e7f8      	b.n	29ada <bt_mesh_kr_update+0x10>
}
   29ae8:	4770      	bx	lr

00029aea <bt_mesh_subnet_exists>:
{
   29aea:	b508      	push	{r3, lr}
	return !!bt_mesh_subnet_get(net_idx);
   29aec:	f7e3 fee8 	bl	d8c0 <bt_mesh_subnet_get>
}
   29af0:	3800      	subs	r0, #0
   29af2:	bf18      	it	ne
   29af4:	2001      	movne	r0, #1
   29af6:	bd08      	pop	{r3, pc}

00029af8 <bt_mesh_subnet_update>:
{
   29af8:	b538      	push	{r3, r4, r5, lr}
   29afa:	460c      	mov	r4, r1
	sub = bt_mesh_subnet_get(net_idx);
   29afc:	f7e3 fee0 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
   29b00:	4605      	mov	r5, r0
   29b02:	b340      	cbz	r0, 29b56 <bt_mesh_subnet_update+0x5e>
	switch (sub->kr_phase) {
   29b04:	7f83      	ldrb	r3, [r0, #30]
   29b06:	2b01      	cmp	r3, #1
   29b08:	d00e      	beq.n	29b28 <bt_mesh_subnet_update+0x30>
   29b0a:	d904      	bls.n	29b16 <bt_mesh_subnet_update+0x1e>
   29b0c:	3b02      	subs	r3, #2
   29b0e:	2b01      	cmp	r3, #1
   29b10:	d813      	bhi.n	29b3a <bt_mesh_subnet_update+0x42>
		return STATUS_CANNOT_UPDATE;
   29b12:	200b      	movs	r0, #11
   29b14:	e010      	b.n	29b38 <bt_mesh_subnet_update+0x40>
		if (!memcmp(key, sub->keys[0].net, 16)) {
   29b16:	f100 012d 	add.w	r1, r0, #45	; 0x2d
   29b1a:	2210      	movs	r2, #16
   29b1c:	4620      	mov	r0, r4
   29b1e:	f7fc ff30 	bl	26982 <memcmp>
   29b22:	b950      	cbnz	r0, 29b3a <bt_mesh_subnet_update+0x42>
			return STATUS_IDX_ALREADY_STORED;
   29b24:	2006      	movs	r0, #6
   29b26:	e007      	b.n	29b38 <bt_mesh_subnet_update+0x40>
		if (!memcmp(key, sub->keys[1].net, 16)) {
   29b28:	f100 0177 	add.w	r1, r0, #119	; 0x77
   29b2c:	2210      	movs	r2, #16
   29b2e:	4620      	mov	r0, r4
   29b30:	f7fc ff27 	bl	26982 <memcmp>
   29b34:	2800      	cmp	r0, #0
   29b36:	d1ec      	bne.n	29b12 <bt_mesh_subnet_update+0x1a>
}
   29b38:	bd38      	pop	{r3, r4, r5, pc}
	err = net_keys_create(&sub->keys[1], key);
   29b3a:	4621      	mov	r1, r4
   29b3c:	f105 0076 	add.w	r0, r5, #118	; 0x76
   29b40:	f7e3 fe34 	bl	d7ac <net_keys_create>
	if (err) {
   29b44:	4604      	mov	r4, r0
   29b46:	2800      	cmp	r0, #0
   29b48:	d1e3      	bne.n	29b12 <bt_mesh_subnet_update+0x1a>
	key_refresh(sub, BT_MESH_KR_PHASE_1);
   29b4a:	4628      	mov	r0, r5
   29b4c:	2101      	movs	r1, #1
   29b4e:	f7ff ff84 	bl	29a5a <key_refresh>
	return STATUS_SUCCESS;
   29b52:	4620      	mov	r0, r4
   29b54:	e7f0      	b.n	29b38 <bt_mesh_subnet_update+0x40>
		return STATUS_INVALID_NETKEY;
   29b56:	2004      	movs	r0, #4
   29b58:	e7ee      	b.n	29b38 <bt_mesh_subnet_update+0x40>

00029b5a <bt_mesh_subnet_del>:
{
   29b5a:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   29b5c:	f7e3 feb0 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
   29b60:	b118      	cbz	r0, 29b6a <bt_mesh_subnet_del+0x10>
	subnet_del(sub);
   29b62:	f7ff ff9d 	bl	29aa0 <subnet_del>
	return STATUS_SUCCESS;
   29b66:	2000      	movs	r0, #0
}
   29b68:	bd08      	pop	{r3, pc}
		return STATUS_INVALID_NETKEY;
   29b6a:	2004      	movs	r0, #4
   29b6c:	e7fc      	b.n	29b68 <bt_mesh_subnet_del+0xe>

00029b6e <bt_mesh_subnet_kr_phase_get>:
{
   29b6e:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   29b70:	f7e3 fea6 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
   29b74:	b118      	cbz	r0, 29b7e <bt_mesh_subnet_kr_phase_get+0x10>
	*phase = sub->kr_phase;
   29b76:	7f83      	ldrb	r3, [r0, #30]
	return STATUS_SUCCESS;
   29b78:	2000      	movs	r0, #0
   29b7a:	700b      	strb	r3, [r1, #0]
}
   29b7c:	bd08      	pop	{r3, pc}
		*phase = BT_MESH_KR_NORMAL;
   29b7e:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   29b80:	2004      	movs	r0, #4
   29b82:	e7fa      	b.n	29b7a <bt_mesh_subnet_kr_phase_get+0xc>

00029b84 <bt_mesh_subnet_node_id_set>:
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   29b84:	2902      	cmp	r1, #2
{
   29b86:	b508      	push	{r3, lr}
	if (node_id == BT_MESH_FEATURE_NOT_SUPPORTED) {
   29b88:	d006      	beq.n	29b98 <bt_mesh_subnet_node_id_set+0x14>
	sub = bt_mesh_subnet_get(net_idx);
   29b8a:	f7e3 fe99 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
   29b8e:	2800      	cmp	r0, #0
		return STATUS_FEAT_NOT_SUPP;
   29b90:	bf0c      	ite	eq
   29b92:	2004      	moveq	r0, #4
   29b94:	200a      	movne	r0, #10
}
   29b96:	bd08      	pop	{r3, pc}
		return STATUS_CANNOT_SET;
   29b98:	200f      	movs	r0, #15
   29b9a:	e7fc      	b.n	29b96 <bt_mesh_subnet_node_id_set+0x12>

00029b9c <bt_mesh_subnet_node_id_get>:
{
   29b9c:	b508      	push	{r3, lr}
	sub = bt_mesh_subnet_get(net_idx);
   29b9e:	f7e3 fe8f 	bl	d8c0 <bt_mesh_subnet_get>
	if (!sub) {
   29ba2:	b118      	cbz	r0, 29bac <bt_mesh_subnet_node_id_get+0x10>
	*node_id = sub->node_id;
   29ba4:	7fc3      	ldrb	r3, [r0, #31]
	return STATUS_SUCCESS;
   29ba6:	2000      	movs	r0, #0
   29ba8:	700b      	strb	r3, [r1, #0]
}
   29baa:	bd08      	pop	{r3, pc}
		*node_id = 0x00;
   29bac:	4603      	mov	r3, r0
		return STATUS_INVALID_NETKEY;
   29bae:	2004      	movs	r0, #4
   29bb0:	e7fa      	b.n	29ba8 <bt_mesh_subnet_node_id_get+0xc>

00029bb2 <app_key_del>:
{
   29bb2:	b510      	push	{r4, lr}
   29bb4:	4604      	mov	r4, r0
		bt_mesh_clear_app_key(app->app_idx);
   29bb6:	8840      	ldrh	r0, [r0, #2]
   29bb8:	f7e7 f8b8 	bl	10d2c <bt_mesh_clear_app_key>
	app_key_evt(app, BT_MESH_KEY_DELETED);
   29bbc:	4620      	mov	r0, r4
   29bbe:	2101      	movs	r1, #1
   29bc0:	f7e3 ff5a 	bl	da78 <app_key_evt>
	app->net_idx = BT_MESH_KEY_UNUSED;
   29bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29bc8:	8023      	strh	r3, [r4, #0]
	app->app_idx = BT_MESH_KEY_UNUSED;
   29bca:	8063      	strh	r3, [r4, #2]
	(void)memset(app->keys, 0, sizeof(app->keys));
   29bcc:	1d60      	adds	r0, r4, #5
   29bce:	2222      	movs	r2, #34	; 0x22
}
   29bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(app->keys, 0, sizeof(app->keys));
   29bd4:	2100      	movs	r1, #0
   29bd6:	f7fc bf0f 	b.w	269f8 <memset>

00029bda <send_unseg>:
{
   29bda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29bde:	4604      	mov	r4, r0
   29be0:	460f      	mov	r7, r1
   29be2:	4690      	mov	r8, r2
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   29be4:	7a81      	ldrb	r1, [r0, #10]
{
   29be6:	f8dd a020 	ldr.w	sl, [sp, #32]
   29bea:	4699      	mov	r9, r3
	buf = bt_mesh_adv_create(BT_MESH_ADV_DATA, tx->xmit, BUF_TIMEOUT);
   29bec:	2200      	movs	r2, #0
   29bee:	2300      	movs	r3, #0
   29bf0:	2001      	movs	r0, #1
   29bf2:	f7e2 feb1 	bl	c958 <bt_mesh_adv_create>
	if (!buf) {
   29bf6:	4605      	mov	r5, r0
   29bf8:	b340      	cbz	r0, 29c4c <send_unseg+0x72>
	net_buf_reserve(buf, BT_MESH_NET_HDR_LEN);
   29bfa:	f100 0608 	add.w	r6, r0, #8
   29bfe:	2109      	movs	r1, #9
   29c00:	4630      	mov	r0, r6
   29c02:	f002 f9bd 	bl	2bf80 <net_buf_simple_reserve>
	if (ctl_op) {
   29c06:	f1ba 0f00 	cmp.w	sl, #0
   29c0a:	d013      	beq.n	29c34 <send_unseg+0x5a>
		net_buf_add_u8(buf, TRANS_CTL_HDR(*ctl_op, 0));
   29c0c:	f89a 1000 	ldrb.w	r1, [sl]
   29c10:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   29c14:	4630      	mov	r0, r6
   29c16:	f002 fa4f 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_add_mem(buf, sdu->data, sdu->len);
   29c1a:	88ba      	ldrh	r2, [r7, #4]
   29c1c:	6839      	ldr	r1, [r7, #0]
   29c1e:	4630      	mov	r0, r6
   29c20:	f002 fa41 	bl	2c0a6 <net_buf_simple_add_mem>
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   29c24:	464b      	mov	r3, r9
   29c26:	4642      	mov	r2, r8
   29c28:	4629      	mov	r1, r5
   29c2a:	4620      	mov	r0, r4
}
   29c2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_mesh_net_send(tx, buf, cb, cb_data);
   29c30:	f7e3 bb50 	b.w	d2d4 <bt_mesh_net_send>
	} else if (BT_MESH_IS_DEV_KEY(tx->ctx->app_idx)) {
   29c34:	6863      	ldr	r3, [r4, #4]
   29c36:	8858      	ldrh	r0, [r3, #2]
   29c38:	3003      	adds	r0, #3
   29c3a:	b280      	uxth	r0, r0
   29c3c:	2801      	cmp	r0, #1
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   29c3e:	bf85      	ittet	hi
   29c40:	7ae1      	ldrbhi	r1, [r4, #11]
   29c42:	0889      	lsrhi	r1, r1, #2
		net_buf_add_u8(buf, UNSEG_HDR(0, 0));
   29c44:	4651      	movls	r1, sl
		net_buf_add_u8(buf, UNSEG_HDR(1, tx->aid));
   29c46:	f041 0140 	orrhi.w	r1, r1, #64	; 0x40
   29c4a:	e7e3      	b.n	29c14 <send_unseg+0x3a>
}
   29c4c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   29c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029c54 <ack_timeout>:
{
   29c54:	b538      	push	{r3, r4, r5, lr}
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   29c56:	f890 4020 	ldrb.w	r4, [r0, #32]
   29c5a:	2cff      	cmp	r4, #255	; 0xff
{
   29c5c:	4605      	mov	r5, r0
	if (rx->ttl == BT_MESH_TTL_DEFAULT) {
   29c5e:	d102      	bne.n	29c66 <ack_timeout+0x12>
		ttl = bt_mesh_default_ttl_get();
   29c60:	f7e6 f89c 	bl	fd9c <bt_mesh_default_ttl_get>
   29c64:	4604      	mov	r4, r0
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   29c66:	6a68      	ldr	r0, [r5, #36]	; 0x24
   29c68:	f7d6 fab2 	bl	1d0 <__popcountsi2>
   29c6c:	7feb      	ldrb	r3, [r5, #31]
   29c6e:	f003 031f 	and.w	r3, r3, #31
   29c72:	1a18      	subs	r0, r3, r0
   29c74:	2364      	movs	r3, #100	; 0x64
   29c76:	fb00 3303 	mla	r3, r0, r3, r3
	to = 150 + (ttl * 50U);
   29c7a:	2296      	movs	r2, #150	; 0x96
   29c7c:	2032      	movs	r0, #50	; 0x32
   29c7e:	fb10 2004 	smlabb	r0, r0, r4, r2
	to += ((rx->seg_n + 1) - popcount(rx->block)) * 100U;
   29c82:	4418      	add	r0, r3
}
   29c84:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
   29c88:	bfb8      	it	lt
   29c8a:	f44f 70c8 	movlt.w	r0, #400	; 0x190
   29c8e:	bd38      	pop	{r3, r4, r5, pc}

00029c90 <seg_rx_assemble>:
{
   29c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->data = buf->__buf;
   29c94:	688b      	ldr	r3, [r1, #8]
   29c96:	600b      	str	r3, [r1, #0]
	buf->len  = 0U;
   29c98:	2500      	movs	r5, #0
   29c9a:	4606      	mov	r6, r0
   29c9c:	460c      	mov	r4, r1
   29c9e:	4617      	mov	r7, r2
   29ca0:	808d      	strh	r5, [r1, #4]
	for (i = 0; i <= rx->seg_n; i++) {
   29ca2:	f100 0804 	add.w	r8, r0, #4
				       MIN(seg_len(rx->ctl),
   29ca6:	7ff3      	ldrb	r3, [r6, #31]
		net_buf_simple_add_mem(buf, rx->seg[i],
   29ca8:	f858 1b04 	ldr.w	r1, [r8], #4
		return BT_MESH_APP_SEG_SDU_MAX;
   29cac:	f013 0f20 	tst.w	r3, #32
				       MIN(seg_len(rx->ctl),
   29cb0:	8bb3      	ldrh	r3, [r6, #28]
		return BT_MESH_APP_SEG_SDU_MAX;
   29cb2:	bf14      	ite	ne
   29cb4:	2208      	movne	r2, #8
   29cb6:	220c      	moveq	r2, #12
				       MIN(seg_len(rx->ctl),
   29cb8:	fb05 3312 	mls	r3, r5, r2, r3
		net_buf_simple_add_mem(buf, rx->seg[i],
   29cbc:	429a      	cmp	r2, r3
   29cbe:	bfa8      	it	ge
   29cc0:	461a      	movge	r2, r3
   29cc2:	4620      	mov	r0, r4
   29cc4:	f002 f9ef 	bl	2c0a6 <net_buf_simple_add_mem>
	for (i = 0; i <= rx->seg_n; i++) {
   29cc8:	7ff3      	ldrb	r3, [r6, #31]
   29cca:	3501      	adds	r5, #1
   29ccc:	461a      	mov	r2, r3
   29cce:	f003 031f 	and.w	r3, r3, #31
   29cd2:	42ab      	cmp	r3, r5
   29cd4:	dae7      	bge.n	29ca6 <seg_rx_assemble+0x16>
	if (!rx->ctl) {
   29cd6:	0693      	lsls	r3, r2, #26
   29cd8:	d407      	bmi.n	29cea <seg_rx_assemble+0x5a>
		buf->len -= APP_MIC_LEN(aszmic);
   29cda:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   29cde:	2f00      	cmp	r7, #0
   29ce0:	bf14      	ite	ne
   29ce2:	2208      	movne	r2, #8
   29ce4:	2204      	moveq	r2, #4
   29ce6:	1a9b      	subs	r3, r3, r2
   29ce8:	80a3      	strh	r3, [r4, #4]
}
   29cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029cee <sdu_try_decrypt>:
	if (ctx->seg) {
   29cee:	69d0      	ldr	r0, [r2, #28]
{
   29cf0:	b570      	push	{r4, r5, r6, lr}
   29cf2:	460d      	mov	r5, r1
   29cf4:	4614      	mov	r4, r2
	if (ctx->seg) {
   29cf6:	b118      	cbz	r0, 29d00 <sdu_try_decrypt+0x12>
		seg_rx_assemble(ctx->seg, ctx->buf, ctx->crypto.aszmic);
   29cf8:	7852      	ldrb	r2, [r2, #1]
   29cfa:	6961      	ldr	r1, [r4, #20]
   29cfc:	f7ff ffc8 	bl	29c90 <seg_rx_assemble>
	net_buf_simple_reset(ctx->sdu);
   29d00:	69a3      	ldr	r3, [r4, #24]
   29d02:	2200      	movs	r2, #0
   29d04:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
   29d06:	689a      	ldr	r2, [r3, #8]
   29d08:	601a      	str	r2, [r3, #0]
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   29d0a:	4621      	mov	r1, r4
   29d0c:	6962      	ldr	r2, [r4, #20]
   29d0e:	4628      	mov	r0, r5
}
   29d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_app_decrypt(key, &ctx->crypto, ctx->buf, ctx->sdu);
   29d14:	f000 baba 	b.w	2a28c <bt_mesh_app_decrypt>

00029d18 <schedule_retransmit>:
{
   29d18:	b570      	push	{r4, r5, r6, lr}
	if (!tx->nack_count) {
   29d1a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   29d1e:	2b00      	cmp	r3, #0
   29d20:	d039      	beq.n	29d96 <schedule_retransmit+0x7e>
	if (--tx->seg_pending || tx->sending) {
   29d22:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   29d26:	3b01      	subs	r3, #1
   29d28:	b2db      	uxtb	r3, r3
   29d2a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
   29d2e:	bb93      	cbnz	r3, 29d96 <schedule_retransmit+0x7e>
   29d30:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
   29d34:	06db      	lsls	r3, r3, #27
   29d36:	d42e      	bmi.n	29d96 <schedule_retransmit+0x7e>
	k_delayed_work_submit(&tx->retransmit,
   29d38:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
   29d3c:	f100 0440 	add.w	r4, r0, #64	; 0x40
   29d40:	b133      	cbz	r3, 29d50 <schedule_retransmit+0x38>
   29d42:	2200      	movs	r2, #0
   29d44:	4613      	mov	r3, r2
   29d46:	4620      	mov	r0, r4
}
   29d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit(&tx->retransmit,
   29d4c:	f7e4 b8aa 	b.w	dea4 <k_delayed_work_submit>
					  K_MSEC(SEG_RETRANSMIT_TIMEOUT(tx)));
   29d50:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
   29d54:	2b00      	cmp	r3, #0
   29d56:	bfc1      	itttt	gt
   29d58:	f890 1034 	ldrbgt.w	r1, [r0, #52]	; 0x34
   29d5c:	2232      	movgt	r2, #50	; 0x32
   29d5e:	f44f 73c8 	movgt.w	r3, #400	; 0x190
   29d62:	fb12 3201 	smlabbgt	r2, r2, r1, r3
   29d66:	bfce      	itee	gt
   29d68:	17d3      	asrgt	r3, r2, #31
   29d6a:	2232      	movle	r2, #50	; 0x32
   29d6c:	2300      	movle	r3, #0
   29d6e:	03d9      	lsls	r1, r3, #15
   29d70:	03d0      	lsls	r0, r2, #15
   29d72:	f240 35e7 	movw	r5, #999	; 0x3e7
   29d76:	1940      	adds	r0, r0, r5
   29d78:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   29d7c:	f04f 0500 	mov.w	r5, #0
   29d80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29d84:	f04f 0300 	mov.w	r3, #0
   29d88:	eb45 0101 	adc.w	r1, r5, r1
   29d8c:	f7d6 fa08 	bl	1a0 <__aeabi_uldivmod>
   29d90:	4602      	mov	r2, r0
   29d92:	460b      	mov	r3, r1
   29d94:	e7d7      	b.n	29d46 <schedule_retransmit+0x2e>
}
   29d96:	bd70      	pop	{r4, r5, r6, pc}

00029d98 <seg_sent>:
	schedule_retransmit(tx);
   29d98:	4608      	mov	r0, r1
   29d9a:	f7ff bfbd 	b.w	29d18 <schedule_retransmit>

00029d9e <seg_send_start>:
{
   29d9e:	b538      	push	{r3, r4, r5, lr}
	if (!tx->started && tx->cb && tx->cb->start) {
   29da0:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
   29da4:	071b      	lsls	r3, r3, #28
{
   29da6:	460d      	mov	r5, r1
   29da8:	4614      	mov	r4, r2
	if (!tx->started && tx->cb && tx->cb->start) {
   29daa:	d40b      	bmi.n	29dc4 <seg_send_start+0x26>
   29dac:	6b93      	ldr	r3, [r2, #56]	; 0x38
   29dae:	b14b      	cbz	r3, 29dc4 <seg_send_start+0x26>
   29db0:	681b      	ldr	r3, [r3, #0]
   29db2:	b13b      	cbz	r3, 29dc4 <seg_send_start+0x26>
		tx->cb->start(duration, err, tx->cb_data);
   29db4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   29db6:	4798      	blx	r3
		tx->started = 1U;
   29db8:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   29dbc:	f043 0308 	orr.w	r3, r3, #8
   29dc0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	if (err) {
   29dc4:	b125      	cbz	r5, 29dd0 <seg_send_start+0x32>
		schedule_retransmit(tx);
   29dc6:	4620      	mov	r0, r4
}
   29dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		schedule_retransmit(tx);
   29dcc:	f7ff bfa4 	b.w	29d18 <schedule_retransmit>
}
   29dd0:	bd38      	pop	{r3, r4, r5, pc}

00029dd2 <seg_retransmit>:
	seg_tx_send_unacked(tx);
   29dd2:	3840      	subs	r0, #64	; 0x40
   29dd4:	f7e4 b978 	b.w	e0c8 <seg_tx_send_unacked>

00029dd8 <bt_mesh_ctl_send>:
{
   29dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   29dda:	b089      	sub	sp, #36	; 0x24
   29ddc:	4604      	mov	r4, r0
   29dde:	4608      	mov	r0, r1
   29de0:	f88d 000f 	strb.w	r0, [sp, #15]
   29de4:	4611      	mov	r1, r2
	net_buf_simple_init_with_data(&buf, data, data_len);
   29de6:	a805      	add	r0, sp, #20
   29de8:	461a      	mov	r2, r3
{
   29dea:	461d      	mov	r5, r3
   29dec:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
	net_buf_simple_init_with_data(&buf, data, data_len);
   29df0:	f002 f8c0 	bl	2bf74 <net_buf_simple_init_with_data>
	if (data_len > BT_MESH_SDU_UNSEG_MAX) {
   29df4:	6862      	ldr	r2, [r4, #4]
   29df6:	2d0b      	cmp	r5, #11
		tx->ctx->send_rel = true;
   29df8:	bf84      	itt	hi
   29dfa:	2301      	movhi	r3, #1
   29dfc:	7293      	strbhi	r3, [r2, #10]
	tx->ctx->app_idx = BT_MESH_KEY_UNUSED;
   29dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   29e02:	8053      	strh	r3, [r2, #2]
	if (tx->ctx->send_rel) {
   29e04:	7a92      	ldrb	r2, [r2, #10]
   29e06:	f10d 030f 	add.w	r3, sp, #15
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   29e0a:	9300      	str	r3, [sp, #0]
   29e0c:	463b      	mov	r3, r7
	if (tx->ctx->send_rel) {
   29e0e:	b132      	cbz	r2, 29e1e <bt_mesh_ctl_send+0x46>
		return send_seg(tx, &buf, cb, cb_data, &ctl_op);
   29e10:	4632      	mov	r2, r6
   29e12:	a905      	add	r1, sp, #20
   29e14:	4620      	mov	r0, r4
   29e16:	f7e4 fb1f 	bl	e458 <send_seg>
}
   29e1a:	b009      	add	sp, #36	; 0x24
   29e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return send_unseg(tx, &buf, cb, cb_data, &ctl_op);
   29e1e:	4632      	mov	r2, r6
   29e20:	a905      	add	r1, sp, #20
   29e22:	4620      	mov	r0, r4
   29e24:	f7ff fed9 	bl	29bda <send_unseg>
   29e28:	e7f7      	b.n	29e1a <bt_mesh_ctl_send+0x42>

00029e2a <send_ack>:
{
   29e2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   29e2c:	b08b      	sub	sp, #44	; 0x2c
	struct bt_mesh_msg_ctx ctx = {
   29e2e:	8b87      	ldrh	r7, [r0, #28]
{
   29e30:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   29e34:	f8ad 7010 	strh.w	r7, [sp, #16]
{
   29e38:	460d      	mov	r5, r1
	struct bt_mesh_msg_ctx ctx = {
   29e3a:	f64f 77ff 	movw	r7, #65535	; 0xffff
   29e3e:	2100      	movs	r1, #0
   29e40:	f88d 301b 	strb.w	r3, [sp, #27]
	struct bt_mesh_net_tx tx = {
   29e44:	ab04      	add	r3, sp, #16
{
   29e46:	9e11      	ldr	r6, [sp, #68]	; 0x44
	struct bt_mesh_msg_ctx ctx = {
   29e48:	f8cd 1016 	str.w	r1, [sp, #22]
   29e4c:	f88d 101a 	strb.w	r1, [sp, #26]
   29e50:	f8ad 7012 	strh.w	r7, [sp, #18]
   29e54:	f8ad 2014 	strh.w	r2, [sp, #20]
	struct bt_mesh_net_tx tx = {
   29e58:	9109      	str	r1, [sp, #36]	; 0x24
   29e5a:	9007      	str	r0, [sp, #28]
   29e5c:	9308      	str	r3, [sp, #32]
   29e5e:	b33c      	cbz	r4, 29eb0 <send_ack+0x86>
		.src = obo ? bt_mesh_primary_addr() : src,
   29e60:	f7e5 fa10 	bl	f284 <bt_mesh_primary_addr>
	struct bt_mesh_net_tx tx = {
   29e64:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   29e68:	f7e5 ff62 	bl	fd30 <bt_mesh_net_transmit_get>
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   29e6c:	b22d      	sxth	r5, r5
   29e6e:	2d00      	cmp	r5, #0
	struct bt_mesh_net_tx tx = {
   29e70:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	if (!BT_MESH_ADDR_IS_UNICAST(src)) {
   29e74:	dd1e      	ble.n	29eb4 <send_ack+0x8a>
	uint16_t seq_zero = *seq_auth & TRANS_SEQ_ZERO_MASK;
   29e76:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29e78:	881b      	ldrh	r3, [r3, #0]
	sys_put_be16(((seq_zero << 2) & 0x7ffc) | (obo << 15), buf);
   29e7a:	03e4      	lsls	r4, r4, #15
   29e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
   29e80:	ea44 0483 	orr.w	r4, r4, r3, lsl #2
	sys_put_be16(val >> 16, dst);
   29e84:	0c33      	lsrs	r3, r6, #16
	dst[0] = val >> 8;
   29e86:	0e32      	lsrs	r2, r6, #24
	dst[1] = val;
   29e88:	f88d 300b 	strb.w	r3, [sp, #11]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_ACK, buf, sizeof(buf),
   29e8c:	2100      	movs	r1, #0
	dst[0] = val >> 8;
   29e8e:	ba73      	rev16	r3, r6
   29e90:	ba64      	rev16	r4, r4
   29e92:	f88d 200a 	strb.w	r2, [sp, #10]
   29e96:	f8ad 300c 	strh.w	r3, [sp, #12]
   29e9a:	e9cd 1100 	strd	r1, r1, [sp]
   29e9e:	2306      	movs	r3, #6
   29ea0:	aa02      	add	r2, sp, #8
   29ea2:	a807      	add	r0, sp, #28
   29ea4:	f8ad 4008 	strh.w	r4, [sp, #8]
   29ea8:	f7ff ff96 	bl	29dd8 <bt_mesh_ctl_send>
}
   29eac:	b00b      	add	sp, #44	; 0x2c
   29eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct bt_mesh_net_tx tx = {
   29eb0:	4628      	mov	r0, r5
   29eb2:	e7d7      	b.n	29e64 <send_ack+0x3a>
		return 0;
   29eb4:	2000      	movs	r0, #0
   29eb6:	e7f9      	b.n	29eac <send_ack+0x82>

00029eb8 <seg_ack>:
{
   29eb8:	b530      	push	{r4, r5, lr}
   29eba:	4604      	mov	r4, r0
   29ebc:	b085      	sub	sp, #20
	struct seg_rx *rx = CONTAINER_OF(work, struct seg_rx, ack);
   29ebe:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
   29ec2:	f003 fbe0 	bl	2d686 <z_impl_k_uptime_ticks>
   29ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   29eca:	460a      	mov	r2, r1
   29ecc:	fba0 0103 	umull	r0, r1, r0, r3
   29ed0:	fb03 1102 	mla	r1, r3, r2, r1
	if (k_uptime_get_32() - rx->last > (60 * MSEC_PER_SEC)) {
   29ed4:	f854 2c08 	ldr.w	r2, [r4, #-8]
   29ed8:	0bc3      	lsrs	r3, r0, #15
   29eda:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   29ede:	1a9b      	subs	r3, r3, r2
   29ee0:	f64e 2260 	movw	r2, #60000	; 0xea60
   29ee4:	4293      	cmp	r3, r2
   29ee6:	d906      	bls.n	29ef6 <seg_ack+0x3e>
		seg_rx_reset(rx, false);
   29ee8:	2100      	movs	r1, #0
   29eea:	4628      	mov	r0, r5
}
   29eec:	b005      	add	sp, #20
   29eee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		seg_rx_reset(rx, false);
   29ef2:	f7e4 b827 	b.w	df44 <seg_rx_reset>
		 rx->block, rx->obo);
   29ef6:	f814 3c11 	ldrb.w	r3, [r4, #-17]
	send_ack(rx->sub, rx->dst, rx->src, rx->ttl, &rx->seq_auth,
   29efa:	f834 2c18 	ldrh.w	r2, [r4, #-24]
   29efe:	f834 1c16 	ldrh.w	r1, [r4, #-22]
   29f02:	f854 0c30 	ldr.w	r0, [r4, #-48]
   29f06:	09db      	lsrs	r3, r3, #7
   29f08:	9302      	str	r3, [sp, #8]
   29f0a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   29f0e:	9301      	str	r3, [sp, #4]
   29f10:	f1a4 0320 	sub.w	r3, r4, #32
   29f14:	9300      	str	r3, [sp, #0]
   29f16:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   29f1a:	f7ff ff86 	bl	29e2a <send_ack>
	k_delayed_work_submit(&rx->ack, K_MSEC(ack_timeout(rx)));
   29f1e:	4628      	mov	r0, r5
   29f20:	f7ff fe98 	bl	29c54 <ack_timeout>
   29f24:	2800      	cmp	r0, #0
   29f26:	dd1d      	ble.n	29f64 <seg_ack+0xac>
   29f28:	4628      	mov	r0, r5
   29f2a:	f7ff fe93 	bl	29c54 <ack_timeout>
   29f2e:	4602      	mov	r2, r0
   29f30:	17c3      	asrs	r3, r0, #31
   29f32:	03d9      	lsls	r1, r3, #15
   29f34:	03d0      	lsls	r0, r2, #15
   29f36:	f240 35e7 	movw	r5, #999	; 0x3e7
   29f3a:	1940      	adds	r0, r0, r5
   29f3c:	ea41 4152 	orr.w	r1, r1, r2, lsr #17
   29f40:	f04f 0500 	mov.w	r5, #0
   29f44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29f48:	f04f 0300 	mov.w	r3, #0
   29f4c:	eb45 0101 	adc.w	r1, r5, r1
   29f50:	f7d6 f926 	bl	1a0 <__aeabi_uldivmod>
   29f54:	4602      	mov	r2, r0
   29f56:	460b      	mov	r3, r1
   29f58:	4620      	mov	r0, r4
}
   29f5a:	b005      	add	sp, #20
   29f5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_delayed_work_submit(&rx->ack, K_MSEC(ack_timeout(rx)));
   29f60:	f7e3 bfa0 	b.w	dea4 <k_delayed_work_submit>
   29f64:	2200      	movs	r2, #0
   29f66:	2300      	movs	r3, #0
   29f68:	e7e3      	b.n	29f32 <seg_ack+0x7a>

00029f6a <bt_mesh_heartbeat_send>:

int bt_mesh_heartbeat_send(const struct bt_mesh_send_cb *cb, void *cb_data)
{
   29f6a:	b570      	push	{r4, r5, r6, lr}
   29f6c:	b08a      	sub	sp, #40	; 0x28
   29f6e:	460e      	mov	r6, r1
   29f70:	4605      	mov	r5, r0
	struct bt_mesh_cfg_srv *cfg = bt_mesh_cfg_get();
   29f72:	f7e5 ff23 	bl	fdbc <bt_mesh_cfg_get>
   29f76:	4604      	mov	r4, r0
	uint16_t feat = 0U;
	struct __packed {
		uint8_t  init_ttl;
		uint16_t feat;
	} hb;
	struct bt_mesh_msg_ctx ctx = {
   29f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
   29f7c:	f8ad 2012 	strh.w	r2, [sp, #18]
   29f80:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
		.net_idx = cfg->hb_pub.net_idx,
   29f84:	f8b0 0048 	ldrh.w	r0, [r0, #72]	; 0x48
	struct bt_mesh_msg_ctx ctx = {
   29f88:	f8ad 2014 	strh.w	r2, [sp, #20]
   29f8c:	2300      	movs	r3, #0
   29f8e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
   29f92:	f88d 201b 	strb.w	r2, [sp, #27]
		.app_idx = BT_MESH_KEY_UNUSED,
		.addr = cfg->hb_pub.dst,
		.send_ttl = cfg->hb_pub.ttl,
	};
	struct bt_mesh_net_tx tx = {
   29f96:	e9cd 3307 	strd	r3, r3, [sp, #28]
	struct bt_mesh_msg_ctx ctx = {
   29f9a:	f8cd 3016 	str.w	r3, [sp, #22]
   29f9e:	f88d 301a 	strb.w	r3, [sp, #26]
	struct bt_mesh_net_tx tx = {
   29fa2:	9309      	str	r3, [sp, #36]	; 0x24
	struct bt_mesh_msg_ctx ctx = {
   29fa4:	f8ad 0010 	strh.w	r0, [sp, #16]
		.sub = bt_mesh_subnet_get(cfg->hb_pub.net_idx),
   29fa8:	f7e3 fc8a 	bl	d8c0 <bt_mesh_subnet_get>
	struct bt_mesh_net_tx tx = {
   29fac:	ab04      	add	r3, sp, #16
   29fae:	9007      	str	r0, [sp, #28]
		.ctx = &ctx,
		.src = bt_mesh_model_elem(cfg->model)->addr,
   29fb0:	6820      	ldr	r0, [r4, #0]
	struct bt_mesh_net_tx tx = {
   29fb2:	9308      	str	r3, [sp, #32]
		.src = bt_mesh_model_elem(cfg->model)->addr,
   29fb4:	f7e5 f90c 	bl	f1d0 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   29fb8:	8803      	ldrh	r3, [r0, #0]
   29fba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		.xmit = bt_mesh_net_transmit_get(),
   29fbe:	f7e5 feb7 	bl	fd30 <bt_mesh_net_transmit_get>
	struct bt_mesh_net_tx tx = {
   29fc2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
	};

	/* Do nothing if heartbeat publication is not enabled */
	if (cfg->hb_pub.dst == BT_MESH_ADDR_UNASSIGNED) {
   29fc6:	f8b4 0040 	ldrh.w	r0, [r4, #64]	; 0x40
   29fca:	b1f8      	cbz	r0, 2a00c <bt_mesh_heartbeat_send+0xa2>
		return 0;
	}

	hb.init_ttl = cfg->hb_pub.ttl;
   29fcc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   29fd0:	f88d 300c 	strb.w	r3, [sp, #12]

	if (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED) {
   29fd4:	f7e5 feb4 	bl	fd40 <bt_mesh_relay_get>
	uint16_t feat = 0U;
   29fd8:	1e43      	subs	r3, r0, #1
   29fda:	425c      	negs	r4, r3
   29fdc:	415c      	adcs	r4, r3
		feat |= BT_MESH_FEAT_RELAY;
	}

	if (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED) {
   29fde:	f7e5 fed3 	bl	fd88 <bt_mesh_gatt_proxy_get>
   29fe2:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_PROXY;
   29fe4:	bf08      	it	eq
   29fe6:	f044 0402 	orreq.w	r4, r4, #2
	}

	if (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED) {
   29fea:	f7e5 feb3 	bl	fd54 <bt_mesh_friend_get>
   29fee:	2801      	cmp	r0, #1
		feat |= BT_MESH_FEAT_FRIEND;
   29ff0:	bf08      	it	eq
   29ff2:	f044 0404 	orreq.w	r4, r4, #4

	if (bt_mesh_lpn_established()) {
		feat |= BT_MESH_FEAT_LOW_POWER;
	}

	hb.feat = sys_cpu_to_be16(feat);
   29ff6:	0224      	lsls	r4, r4, #8

	BT_DBG("InitTTL %u feat 0x%04x", cfg->hb_pub.ttl, feat);

	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   29ff8:	e9cd 5600 	strd	r5, r6, [sp]
   29ffc:	2303      	movs	r3, #3
   29ffe:	aa03      	add	r2, sp, #12
   2a000:	210a      	movs	r1, #10
   2a002:	a807      	add	r0, sp, #28
	hb.feat = sys_cpu_to_be16(feat);
   2a004:	f8ad 400d 	strh.w	r4, [sp, #13]
	return bt_mesh_ctl_send(&tx, TRANS_CTL_OP_HEARTBEAT, &hb, sizeof(hb),
   2a008:	f7ff fee6 	bl	29dd8 <bt_mesh_ctl_send>
				cb, cb_data);
}
   2a00c:	b00a      	add	sp, #40	; 0x28
   2a00e:	bd70      	pop	{r4, r5, r6, pc}

0002a010 <bt_mesh_va_get>:
	if (index >= ARRAY_SIZE(virtual_addrs)) {
		return NULL;
	}

	return &virtual_addrs[index];
}
   2a010:	2000      	movs	r0, #0
   2a012:	4770      	bx	lr

0002a014 <bt_mesh_va_add>:

	va->ref = 1;
	va_store(va);

	return STATUS_SUCCESS;
}
   2a014:	2005      	movs	r0, #5
   2a016:	4770      	bx	lr

0002a018 <bt_mesh_va_del>:
		*addr = va->addr;
	}

	va_store(va);
	return STATUS_SUCCESS;
}
   2a018:	200c      	movs	r0, #12
   2a01a:	4770      	bx	lr

0002a01c <bt_mesh_va_label_get>:
	}

	BT_WARN("No matching Label UUID for 0x%04x", addr);

	return NULL;
}
   2a01c:	2000      	movs	r0, #0
   2a01e:	4770      	bx	lr

0002a020 <bt_mesh_rpl_update>:
	rpl->src = rx->ctx.addr;
   2a020:	890a      	ldrh	r2, [r1, #8]
   2a022:	8002      	strh	r2, [r0, #0]
	rpl->seq = rx->seq;
   2a024:	690a      	ldr	r2, [r1, #16]
   2a026:	6042      	str	r2, [r0, #4]
	rpl->old_iv = rx->old_iv;
   2a028:	7d0a      	ldrb	r2, [r1, #20]
   2a02a:	f3c2 0200 	ubfx	r2, r2, #0, #1
   2a02e:	7082      	strb	r2, [r0, #2]
		bt_mesh_store_rpl(rpl);
   2a030:	f001 be1b 	b.w	2bc6a <bt_mesh_store_rpl>

0002a034 <bt_mesh_rpl_clear>:
		bt_mesh_clear_rpl();
   2a034:	f001 be76 	b.w	2bd24 <bt_mesh_clear_rpl>

0002a038 <create_app_nonce>:
	if (ctx->dev_key) {
   2a038:	780b      	ldrb	r3, [r1, #0]
{
   2a03a:	b510      	push	{r4, lr}
	if (ctx->dev_key) {
   2a03c:	2b00      	cmp	r3, #0
		nonce[0] = 0x01;
   2a03e:	bf14      	ite	ne
   2a040:	2302      	movne	r3, #2
   2a042:	2301      	moveq	r3, #1
   2a044:	7003      	strb	r3, [r0, #0]
	sys_put_be32((ctx->seq_num | ((uint32_t)ctx->aszmic << 31)), &nonce[1]);
   2a046:	784a      	ldrb	r2, [r1, #1]
   2a048:	688b      	ldr	r3, [r1, #8]
   2a04a:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	sys_put_be16(val >> 16, dst);
   2a04e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val;
   2a050:	7082      	strb	r2, [r0, #2]
	dst[0] = val >> 8;
   2a052:	0e1c      	lsrs	r4, r3, #24
   2a054:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2a058:	70c2      	strb	r2, [r0, #3]
   2a05a:	7044      	strb	r4, [r0, #1]
	dst[1] = val;
   2a05c:	7103      	strb	r3, [r0, #4]
	sys_put_be16(ctx->src, &nonce[5]);
   2a05e:	884b      	ldrh	r3, [r1, #2]
   2a060:	7183      	strb	r3, [r0, #6]
	dst[0] = val >> 8;
   2a062:	0a1a      	lsrs	r2, r3, #8
   2a064:	7142      	strb	r2, [r0, #5]
	sys_put_be16(ctx->dst, &nonce[7]);
   2a066:	888b      	ldrh	r3, [r1, #4]
	dst[1] = val;
   2a068:	7203      	strb	r3, [r0, #8]
	dst[0] = val >> 8;
   2a06a:	0a1a      	lsrs	r2, r3, #8
   2a06c:	71c2      	strb	r2, [r0, #7]
	sys_put_be32(ctx->iv_index, &nonce[9]);
   2a06e:	68cb      	ldr	r3, [r1, #12]
	dst[1] = val;
   2a070:	7303      	strb	r3, [r0, #12]
	sys_put_be16(val >> 16, dst);
   2a072:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   2a074:	0e19      	lsrs	r1, r3, #24
	dst[1] = val;
   2a076:	7282      	strb	r2, [r0, #10]
	dst[0] = val >> 8;
   2a078:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2a07c:	7241      	strb	r1, [r0, #9]
   2a07e:	72c2      	strb	r2, [r0, #11]
}
   2a080:	bd10      	pop	{r4, pc}

0002a082 <bt_mesh_aes_cmac>:
{
   2a082:	b570      	push	{r4, r5, r6, lr}
   2a084:	b0c2      	sub	sp, #264	; 0x108
   2a086:	460d      	mov	r5, r1
   2a088:	4614      	mov	r4, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a08a:	4601      	mov	r1, r0
   2a08c:	aa16      	add	r2, sp, #88	; 0x58
   2a08e:	4668      	mov	r0, sp
{
   2a090:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2a092:	f7fc facd 	bl	26630 <tc_cmac_setup>
   2a096:	b130      	cbz	r0, 2a0a6 <bt_mesh_aes_cmac+0x24>
   2a098:	3508      	adds	r5, #8
	for (; sg_len; sg_len--, sg++) {
   2a09a:	b944      	cbnz	r4, 2a0ae <bt_mesh_aes_cmac+0x2c>
	if (tc_cmac_final(mac, &state) == TC_CRYPTO_FAIL) {
   2a09c:	4669      	mov	r1, sp
   2a09e:	4630      	mov	r0, r6
   2a0a0:	f7fc fb5d 	bl	2675e <tc_cmac_final>
   2a0a4:	b968      	cbnz	r0, 2a0c2 <bt_mesh_aes_cmac+0x40>
		return -EIO;
   2a0a6:	f06f 0004 	mvn.w	r0, #4
}
   2a0aa:	b042      	add	sp, #264	; 0x108
   2a0ac:	bd70      	pop	{r4, r5, r6, pc}
		if (tc_cmac_update(&state, sg->data,
   2a0ae:	e955 1202 	ldrd	r1, r2, [r5, #-8]
   2a0b2:	4668      	mov	r0, sp
   2a0b4:	f7fc fae7 	bl	26686 <tc_cmac_update>
   2a0b8:	3508      	adds	r5, #8
   2a0ba:	2800      	cmp	r0, #0
   2a0bc:	d0f3      	beq.n	2a0a6 <bt_mesh_aes_cmac+0x24>
	for (; sg_len; sg_len--, sg++) {
   2a0be:	3c01      	subs	r4, #1
   2a0c0:	e7eb      	b.n	2a09a <bt_mesh_aes_cmac+0x18>
	return 0;
   2a0c2:	4620      	mov	r0, r4
   2a0c4:	e7f1      	b.n	2a0aa <bt_mesh_aes_cmac+0x28>

0002a0c6 <bt_mesh_aes_cmac_one>:
{
   2a0c6:	b507      	push	{r0, r1, r2, lr}
	struct bt_mesh_sg sg = { m, len };
   2a0c8:	e9cd 1200 	strd	r1, r2, [sp]
	return bt_mesh_aes_cmac(key, &sg, 1, mac);
   2a0cc:	2201      	movs	r2, #1
   2a0ce:	4669      	mov	r1, sp
   2a0d0:	f7ff ffd7 	bl	2a082 <bt_mesh_aes_cmac>
}
   2a0d4:	b003      	add	sp, #12
   2a0d6:	f85d fb04 	ldr.w	pc, [sp], #4

0002a0da <bt_mesh_s1>:
{
   2a0da:	b530      	push	{r4, r5, lr}
	const uint8_t zero[16] = { 0 };
   2a0dc:	2200      	movs	r2, #0
{
   2a0de:	b085      	sub	sp, #20
   2a0e0:	460d      	mov	r5, r1
	const uint8_t zero[16] = { 0 };
   2a0e2:	e9cd 2200 	strd	r2, r2, [sp]
   2a0e6:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   2a0ea:	4604      	mov	r4, r0
	return bt_mesh_aes_cmac_one(zero, m, strlen(m), salt);
   2a0ec:	f7fc fc1e 	bl	2692c <strlen>
   2a0f0:	462b      	mov	r3, r5
   2a0f2:	4602      	mov	r2, r0
   2a0f4:	4621      	mov	r1, r4
   2a0f6:	4668      	mov	r0, sp
   2a0f8:	f7ff ffe5 	bl	2a0c6 <bt_mesh_aes_cmac_one>
}
   2a0fc:	3800      	subs	r0, #0
   2a0fe:	bf18      	it	ne
   2a100:	2001      	movne	r0, #1
   2a102:	b005      	add	sp, #20
   2a104:	bd30      	pop	{r4, r5, pc}

0002a106 <bt_mesh_k1>:
{
   2a106:	b570      	push	{r4, r5, r6, lr}
   2a108:	9d04      	ldr	r5, [sp, #16]
   2a10a:	4606      	mov	r6, r0
   2a10c:	461c      	mov	r4, r3
   2a10e:	4610      	mov	r0, r2
	err = bt_mesh_aes_cmac_one(salt, ikm, ikm_len, okm);
   2a110:	462b      	mov	r3, r5
   2a112:	460a      	mov	r2, r1
   2a114:	4631      	mov	r1, r6
   2a116:	f7ff ffd6 	bl	2a0c6 <bt_mesh_aes_cmac_one>
	if (err < 0) {
   2a11a:	2800      	cmp	r0, #0
   2a11c:	db0a      	blt.n	2a134 <bt_mesh_k1+0x2e>
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2a11e:	4620      	mov	r0, r4
   2a120:	f7fc fc04 	bl	2692c <strlen>
   2a124:	462b      	mov	r3, r5
   2a126:	4602      	mov	r2, r0
   2a128:	4621      	mov	r1, r4
   2a12a:	4628      	mov	r0, r5
}
   2a12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_mesh_aes_cmac_one(okm, info, strlen(info), okm);
   2a130:	f7ff bfc9 	b.w	2a0c6 <bt_mesh_aes_cmac_one>
}
   2a134:	bd70      	pop	{r4, r5, r6, pc}

0002a136 <bt_mesh_net_encrypt>:
{
   2a136:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a138:	680b      	ldr	r3, [r1, #0]
{
   2a13a:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a13c:	785d      	ldrb	r5, [r3, #1]
{
   2a13e:	460c      	mov	r4, r1
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a140:	f993 1001 	ldrsb.w	r1, [r3, #1]
	nonce[1] = pdu[1];
   2a144:	f88d 5011 	strb.w	r5, [sp, #17]
	nonce[2] = pdu[2];
   2a148:	789d      	ldrb	r5, [r3, #2]
   2a14a:	f88d 5012 	strb.w	r5, [sp, #18]
	nonce[3] = pdu[3];
   2a14e:	78dd      	ldrb	r5, [r3, #3]
   2a150:	f88d 5013 	strb.w	r5, [sp, #19]
	nonce[4] = pdu[4];
   2a154:	791d      	ldrb	r5, [r3, #4]
   2a156:	f88d 5014 	strb.w	r5, [sp, #20]
	nonce[5] = pdu[5];
   2a15a:	795d      	ldrb	r5, [r3, #5]
   2a15c:	f88d 5015 	strb.w	r5, [sp, #21]
	nonce[6] = pdu[6];
   2a160:	799d      	ldrb	r5, [r3, #6]
   2a162:	f88d 5016 	strb.w	r5, [sp, #22]
	sys_put_be16(val >> 16, dst);
   2a166:	0c15      	lsrs	r5, r2, #16
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a168:	2900      	cmp	r1, #0
	dst[0] = val >> 8;
   2a16a:	ea4f 6712 	mov.w	r7, r2, lsr #24
	dst[1] = val;
   2a16e:	f88d 501a 	strb.w	r5, [sp, #26]
   2a172:	f88d 201c 	strb.w	r2, [sp, #28]
	dst[0] = val >> 8;
   2a176:	f3c2 2507 	ubfx	r5, r2, #8, #8
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2a17a:	f103 0207 	add.w	r2, r3, #7
   2a17e:	88a3      	ldrh	r3, [r4, #4]
   2a180:	f88d 501b 	strb.w	r5, [sp, #27]
	nonce[0] = 0x00;
   2a184:	f04f 0100 	mov.w	r1, #0
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a188:	bfb4      	ite	lt
   2a18a:	2608      	movlt	r6, #8
   2a18c:	2604      	movge	r6, #4
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2a18e:	e9cd 1100 	strd	r1, r1, [sp]
	nonce[0] = 0x00;
   2a192:	f88d 1010 	strb.w	r1, [sp, #16]
	nonce[7] = 0U;
   2a196:	f88d 1017 	strb.w	r1, [sp, #23]
	nonce[8] = 0U;
   2a19a:	f88d 1018 	strb.w	r1, [sp, #24]
	err = bt_ccm_encrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2a19e:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2a1a2:	3b07      	subs	r3, #7
   2a1a4:	a904      	add	r1, sp, #16
   2a1a6:	f88d 7019 	strb.w	r7, [sp, #25]
   2a1aa:	f7fc fe81 	bl	26eb0 <bt_ccm_encrypt>
	if (!err) {
   2a1ae:	4605      	mov	r5, r0
   2a1b0:	b918      	cbnz	r0, 2a1ba <bt_mesh_net_encrypt+0x84>
		net_buf_simple_add(buf, mic_len);
   2a1b2:	4631      	mov	r1, r6
   2a1b4:	4620      	mov	r0, r4
   2a1b6:	f001 ff70 	bl	2c09a <net_buf_simple_add>
}
   2a1ba:	4628      	mov	r0, r5
   2a1bc:	b009      	add	sp, #36	; 0x24
   2a1be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a1c0 <bt_mesh_net_decrypt>:
{
   2a1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a1c2:	680c      	ldr	r4, [r1, #0]
{
   2a1c4:	b089      	sub	sp, #36	; 0x24
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a1c6:	7863      	ldrb	r3, [r4, #1]
   2a1c8:	f994 5001 	ldrsb.w	r5, [r4, #1]
	nonce[1] = pdu[1];
   2a1cc:	f88d 3011 	strb.w	r3, [sp, #17]
	nonce[2] = pdu[2];
   2a1d0:	78a3      	ldrb	r3, [r4, #2]
   2a1d2:	f88d 3012 	strb.w	r3, [sp, #18]
	nonce[3] = pdu[3];
   2a1d6:	78e3      	ldrb	r3, [r4, #3]
   2a1d8:	f88d 3013 	strb.w	r3, [sp, #19]
	nonce[4] = pdu[4];
   2a1dc:	7923      	ldrb	r3, [r4, #4]
   2a1de:	f88d 3014 	strb.w	r3, [sp, #20]
	nonce[5] = pdu[5];
   2a1e2:	7963      	ldrb	r3, [r4, #5]
   2a1e4:	f88d 3015 	strb.w	r3, [sp, #21]
	nonce[6] = pdu[6];
   2a1e8:	79a3      	ldrb	r3, [r4, #6]
   2a1ea:	f88d 3016 	strb.w	r3, [sp, #22]
	sys_put_be16(val >> 16, dst);
   2a1ee:	0c13      	lsrs	r3, r2, #16
	dst[1] = val;
   2a1f0:	f88d 301a 	strb.w	r3, [sp, #26]
	dst[0] = val >> 8;
   2a1f4:	f3c2 2307 	ubfx	r3, r2, #8, #8
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a1f8:	2d00      	cmp	r5, #0
   2a1fa:	f88d 301b 	strb.w	r3, [sp, #27]
	buf->len -= mic_len;
   2a1fe:	888b      	ldrh	r3, [r1, #4]
	dst[1] = val;
   2a200:	f88d 201c 	strb.w	r2, [sp, #28]
	uint8_t mic_len = NET_MIC_LEN(buf->data);
   2a204:	bfb4      	ite	lt
   2a206:	2608      	movlt	r6, #8
   2a208:	2604      	movge	r6, #4
	buf->len -= mic_len;
   2a20a:	1b9b      	subs	r3, r3, r6
	nonce[0] = 0x00;
   2a20c:	2500      	movs	r5, #0
	dst[0] = val >> 8;
   2a20e:	0e17      	lsrs	r7, r2, #24
	buf->len -= mic_len;
   2a210:	b29b      	uxth	r3, r3
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2a212:	1de2      	adds	r2, r4, #7
	buf->len -= mic_len;
   2a214:	808b      	strh	r3, [r1, #4]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2a216:	e9cd 2602 	strd	r2, r6, [sp, #8]
   2a21a:	e9cd 5500 	strd	r5, r5, [sp]
   2a21e:	3b07      	subs	r3, #7
   2a220:	a904      	add	r1, sp, #16
	nonce[0] = 0x00;
   2a222:	f88d 5010 	strb.w	r5, [sp, #16]
	nonce[7] = 0U;
   2a226:	f88d 5017 	strb.w	r5, [sp, #23]
	nonce[8] = 0U;
   2a22a:	f88d 5018 	strb.w	r5, [sp, #24]
   2a22e:	f88d 7019 	strb.w	r7, [sp, #25]
	return bt_ccm_decrypt(key, nonce, &buf->data[7], buf->len - 7, NULL, 0,
   2a232:	f7fc fe0e 	bl	26e52 <bt_ccm_decrypt>
}
   2a236:	b009      	add	sp, #36	; 0x24
   2a238:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a23a <bt_mesh_app_encrypt>:
{
   2a23a:	b570      	push	{r4, r5, r6, lr}
   2a23c:	460d      	mov	r5, r1
   2a23e:	b088      	sub	sp, #32
   2a240:	4606      	mov	r6, r0
	create_app_nonce(nonce, ctx);
   2a242:	a804      	add	r0, sp, #16
{
   2a244:	4614      	mov	r4, r2
	create_app_nonce(nonce, ctx);
   2a246:	f7ff fef7 	bl	2a038 <create_app_nonce>
	err = bt_ccm_encrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2a24a:	692b      	ldr	r3, [r5, #16]
   2a24c:	7868      	ldrb	r0, [r5, #1]
   2a24e:	6822      	ldr	r2, [r4, #0]
   2a250:	2b00      	cmp	r3, #0
   2a252:	bf14      	ite	ne
   2a254:	2110      	movne	r1, #16
   2a256:	2100      	moveq	r1, #0
   2a258:	2800      	cmp	r0, #0
   2a25a:	bf14      	ite	ne
   2a25c:	2008      	movne	r0, #8
   2a25e:	2004      	moveq	r0, #4
   2a260:	e9cd 3100 	strd	r3, r1, [sp]
   2a264:	e9cd 2002 	strd	r2, r0, [sp, #8]
   2a268:	88a3      	ldrh	r3, [r4, #4]
   2a26a:	4630      	mov	r0, r6
   2a26c:	a904      	add	r1, sp, #16
   2a26e:	f7fc fe1f 	bl	26eb0 <bt_ccm_encrypt>
	if (!err) {
   2a272:	4606      	mov	r6, r0
   2a274:	b938      	cbnz	r0, 2a286 <bt_mesh_app_encrypt+0x4c>
		net_buf_simple_add(buf, APP_MIC_LEN(ctx->aszmic));
   2a276:	786b      	ldrb	r3, [r5, #1]
   2a278:	2b00      	cmp	r3, #0
   2a27a:	bf14      	ite	ne
   2a27c:	2108      	movne	r1, #8
   2a27e:	2104      	moveq	r1, #4
   2a280:	4620      	mov	r0, r4
   2a282:	f001 ff0a 	bl	2c09a <net_buf_simple_add>
}
   2a286:	4630      	mov	r0, r6
   2a288:	b008      	add	sp, #32
   2a28a:	bd70      	pop	{r4, r5, r6, pc}

0002a28c <bt_mesh_app_decrypt>:
{
   2a28c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a28e:	460d      	mov	r5, r1
   2a290:	b089      	sub	sp, #36	; 0x24
   2a292:	4607      	mov	r7, r0
	create_app_nonce(nonce, ctx);
   2a294:	a804      	add	r0, sp, #16
{
   2a296:	4614      	mov	r4, r2
   2a298:	461e      	mov	r6, r3
	create_app_nonce(nonce, ctx);
   2a29a:	f7ff fecd 	bl	2a038 <create_app_nonce>
	err = bt_ccm_decrypt(key, nonce, buf->data, buf->len, ctx->ad,
   2a29e:	692b      	ldr	r3, [r5, #16]
   2a2a0:	7868      	ldrb	r0, [r5, #1]
   2a2a2:	6831      	ldr	r1, [r6, #0]
   2a2a4:	2b00      	cmp	r3, #0
   2a2a6:	bf14      	ite	ne
   2a2a8:	2210      	movne	r2, #16
   2a2aa:	2200      	moveq	r2, #0
   2a2ac:	2800      	cmp	r0, #0
   2a2ae:	bf14      	ite	ne
   2a2b0:	2008      	movne	r0, #8
   2a2b2:	2004      	moveq	r0, #4
   2a2b4:	e9cd 1002 	strd	r1, r0, [sp, #8]
   2a2b8:	e9cd 3200 	strd	r3, r2, [sp]
   2a2bc:	a904      	add	r1, sp, #16
   2a2be:	88a3      	ldrh	r3, [r4, #4]
   2a2c0:	6822      	ldr	r2, [r4, #0]
   2a2c2:	4638      	mov	r0, r7
   2a2c4:	f7fc fdc5 	bl	26e52 <bt_ccm_decrypt>
	if (!err) {
   2a2c8:	4605      	mov	r5, r0
   2a2ca:	b918      	cbnz	r0, 2a2d4 <bt_mesh_app_decrypt+0x48>
		net_buf_simple_add(out, buf->len);
   2a2cc:	88a1      	ldrh	r1, [r4, #4]
   2a2ce:	4630      	mov	r0, r6
   2a2d0:	f001 fee3 	bl	2c09a <net_buf_simple_add>
}
   2a2d4:	4628      	mov	r0, r5
   2a2d6:	b009      	add	sp, #36	; 0x24
   2a2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a2da <bt_mesh_prov_conf_salt>:
{
   2a2da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const uint8_t conf_salt_key[16] = { 0 };
   2a2dc:	2200      	movs	r2, #0
   2a2de:	e9cd 2200 	strd	r2, r2, [sp]
   2a2e2:	e9cd 2202 	strd	r2, r2, [sp, #8]
{
   2a2e6:	460b      	mov	r3, r1
	return bt_mesh_aes_cmac_one(conf_salt_key, conf_inputs, 145, salt);
   2a2e8:	2291      	movs	r2, #145	; 0x91
   2a2ea:	4601      	mov	r1, r0
   2a2ec:	4668      	mov	r0, sp
   2a2ee:	f7ff feea 	bl	2a0c6 <bt_mesh_aes_cmac_one>
}
   2a2f2:	b005      	add	sp, #20
   2a2f4:	f85d fb04 	ldr.w	pc, [sp], #4

0002a2f8 <bt_mesh_prov_conf>:

int bt_mesh_prov_conf(const uint8_t conf_key[16], const uint8_t rand[16],
		      const uint8_t auth[16], uint8_t conf[16])
{
   2a2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_mesh_sg sg[] = { { rand, 16 }, { auth, 16 } };
   2a2fa:	9100      	str	r1, [sp, #0]
   2a2fc:	2110      	movs	r1, #16
   2a2fe:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2a302:	9103      	str	r1, [sp, #12]

	BT_DBG("ConfirmationKey %s", bt_hex(conf_key, 16));
	BT_DBG("RandomDevice %s", bt_hex(rand, 16));
	BT_DBG("AuthValue %s", bt_hex(auth, 16));

	return bt_mesh_aes_cmac(conf_key, sg, ARRAY_SIZE(sg), conf);
   2a304:	2202      	movs	r2, #2
   2a306:	4669      	mov	r1, sp
   2a308:	f7ff febb 	bl	2a082 <bt_mesh_aes_cmac>
}
   2a30c:	b005      	add	sp, #20
   2a30e:	f85d fb04 	ldr.w	pc, [sp], #4

0002a312 <bt_mesh_prov_encrypt>:
	return bt_ccm_decrypt(key, nonce, data, 25, NULL, 0, out, 8);
}

int bt_mesh_prov_encrypt(const uint8_t key[16], uint8_t nonce[13],
			 const uint8_t data[25], uint8_t out[25 + 8])
{
   2a312:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_ccm_encrypt(key, nonce, data, 25, NULL, 0, out, 8);
   2a314:	2408      	movs	r4, #8
   2a316:	e9cd 3402 	strd	r3, r4, [sp, #8]
   2a31a:	2300      	movs	r3, #0
   2a31c:	e9cd 3300 	strd	r3, r3, [sp]
   2a320:	2319      	movs	r3, #25
   2a322:	f7fc fdc5 	bl	26eb0 <bt_ccm_encrypt>
}
   2a326:	b004      	add	sp, #16
   2a328:	bd10      	pop	{r4, pc}

0002a32a <bt_mesh_beacon_auth>:

int bt_mesh_beacon_auth(const uint8_t beacon_key[16], uint8_t flags,
			const uint8_t net_id[8], uint32_t iv_index,
			uint8_t auth[8])
{
   2a32a:	b530      	push	{r4, r5, lr}
   2a32c:	b089      	sub	sp, #36	; 0x24
   2a32e:	4605      	mov	r5, r0
   2a330:	4608      	mov	r0, r1
   2a332:	461c      	mov	r4, r3
   2a334:	4611      	mov	r1, r2

	BT_DBG("BeaconKey %s", bt_hex(beacon_key, 16));
	BT_DBG("NetId %s", bt_hex(net_id, 8));
	BT_DBG("IV Index 0x%08x", iv_index);

	msg[0] = flags;
   2a336:	f88d 0000 	strb.w	r0, [sp]
	memcpy(&msg[1], net_id, 8);
   2a33a:	2208      	movs	r2, #8
   2a33c:	f10d 0001 	add.w	r0, sp, #1
   2a340:	f7fc fb2f 	bl	269a2 <memcpy>
	sys_put_be16(val >> 16, dst);
   2a344:	0c23      	lsrs	r3, r4, #16
	dst[0] = val >> 8;
   2a346:	0e22      	lsrs	r2, r4, #24
	dst[1] = val;
   2a348:	f88d 300a 	strb.w	r3, [sp, #10]
	dst[0] = val >> 8;
   2a34c:	f3c4 2307 	ubfx	r3, r4, #8, #8
   2a350:	f88d 2009 	strb.w	r2, [sp, #9]
   2a354:	f88d 300b 	strb.w	r3, [sp, #11]
	sys_put_be32(iv_index, &msg[9]);

	BT_DBG("BeaconMsg %s", bt_hex(msg, sizeof(msg)));

	err = bt_mesh_aes_cmac_one(beacon_key, msg, sizeof(msg), tmp);
   2a358:	220d      	movs	r2, #13
   2a35a:	ab04      	add	r3, sp, #16
   2a35c:	4669      	mov	r1, sp
   2a35e:	4628      	mov	r0, r5
	dst[1] = val;
   2a360:	f88d 400c 	strb.w	r4, [sp, #12]
   2a364:	f7ff feaf 	bl	2a0c6 <bt_mesh_aes_cmac_one>
	if (!err) {
   2a368:	4604      	mov	r4, r0
   2a36a:	b920      	cbnz	r0, 2a376 <bt_mesh_beacon_auth+0x4c>
		memcpy(auth, tmp, 8);
   2a36c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2a36e:	2208      	movs	r2, #8
   2a370:	a904      	add	r1, sp, #16
   2a372:	f7fc fb16 	bl	269a2 <memcpy>
	}

	return err;
}
   2a376:	4620      	mov	r0, r4
   2a378:	b009      	add	sp, #36	; 0x24
   2a37a:	bd30      	pop	{r4, r5, pc}

0002a37c <k_uptime_get_32>:
{
   2a37c:	b510      	push	{r4, lr}
   2a37e:	f003 f982 	bl	2d686 <z_impl_k_uptime_ticks>
   2a382:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2a386:	fba0 2304 	umull	r2, r3, r0, r4
   2a38a:	fb04 3301 	mla	r3, r4, r1, r3
   2a38e:	0bd0      	lsrs	r0, r2, #15
}
   2a390:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   2a394:	bd10      	pop	{r4, pc}

0002a396 <publish_start>:
{
   2a396:	b510      	push	{r4, lr}
	if (err) {
   2a398:	b951      	cbnz	r1, 2a3b0 <publish_start+0x1a>
	struct bt_mesh_model_pub *pub = mod->pub;
   2a39a:	6894      	ldr	r4, [r2, #8]
	if (pub->count == BT_MESH_PUB_TRANSMIT_COUNT(pub->retransmit)) {
   2a39c:	7a63      	ldrb	r3, [r4, #9]
   2a39e:	7ae2      	ldrb	r2, [r4, #11]
   2a3a0:	f003 0307 	and.w	r3, r3, #7
   2a3a4:	ebb3 1f52 	cmp.w	r3, r2, lsr #5
   2a3a8:	d102      	bne.n	2a3b0 <publish_start+0x1a>
		pub->period_start = k_uptime_get_32();
   2a3aa:	f7ff ffe7 	bl	2a37c <k_uptime_get_32>
   2a3ae:	60e0      	str	r0, [r4, #12]
}
   2a3b0:	bd10      	pop	{r4, pc}

0002a3b2 <bt_mesh_model_find_group>:
		.mod = *mod,
   2a3b2:	6800      	ldr	r0, [r0, #0]
		if (mod->groups[i] == addr) {
   2a3b4:	89c3      	ldrh	r3, [r0, #14]
   2a3b6:	428b      	cmp	r3, r1
			return &mod->groups[i];
   2a3b8:	bf0c      	ite	eq
   2a3ba:	300e      	addeq	r0, #14
	ctx->entry = model_group_get(mod, ctx->addr);
   2a3bc:	2000      	movne	r0, #0
}
   2a3be:	4770      	bx	lr

0002a3c0 <bt_mesh_fixed_group_match>:
	switch (addr) {
   2a3c0:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
   2a3c4:	38fc      	subs	r0, #252	; 0xfc
{
   2a3c6:	b508      	push	{r3, lr}
   2a3c8:	2803      	cmp	r0, #3
   2a3ca:	d803      	bhi.n	2a3d4 <bt_mesh_fixed_group_match+0x14>
   2a3cc:	e8df f000 	tbb	[pc, r0]
   2a3d0:	100d0a04 	.word	0x100d0a04
		return true;
   2a3d4:	2000      	movs	r0, #0
}
   2a3d6:	bd08      	pop	{r3, pc}
		return (bt_mesh_gatt_proxy_get() == BT_MESH_GATT_PROXY_ENABLED);
   2a3d8:	f7e5 fcd6 	bl	fd88 <bt_mesh_gatt_proxy_get>
		return (bt_mesh_friend_get() == BT_MESH_FRIEND_ENABLED);
   2a3dc:	1e43      	subs	r3, r0, #1
   2a3de:	4258      	negs	r0, r3
   2a3e0:	4158      	adcs	r0, r3
   2a3e2:	e7f8      	b.n	2a3d6 <bt_mesh_fixed_group_match+0x16>
   2a3e4:	f7e5 fcb6 	bl	fd54 <bt_mesh_friend_get>
   2a3e8:	e7f8      	b.n	2a3dc <bt_mesh_fixed_group_match+0x1c>
		return (bt_mesh_relay_get() == BT_MESH_RELAY_ENABLED);
   2a3ea:	f7e5 fca9 	bl	fd40 <bt_mesh_relay_get>
   2a3ee:	e7f5      	b.n	2a3dc <bt_mesh_fixed_group_match+0x1c>
		return true;
   2a3f0:	2001      	movs	r0, #1
   2a3f2:	e7f0      	b.n	2a3d6 <bt_mesh_fixed_group_match+0x16>

0002a3f4 <bt_mesh_model_msg_init>:
{
   2a3f4:	b538      	push	{r3, r4, r5, lr}
	if (!buf->__buf) {
   2a3f6:	6883      	ldr	r3, [r0, #8]
   2a3f8:	4604      	mov	r4, r0
   2a3fa:	b913      	cbnz	r3, 2a402 <bt_mesh_model_msg_init+0xe>
		buf->__buf = (uint8_t *)buf + sizeof(*buf);
   2a3fc:	f100 030c 	add.w	r3, r0, #12
   2a400:	6083      	str	r3, [r0, #8]
	buf->data = buf->__buf + reserve_head;
   2a402:	68a3      	ldr	r3, [r4, #8]
   2a404:	6023      	str	r3, [r4, #0]
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2a406:	29ff      	cmp	r1, #255	; 0xff
	buf->len = 0U;
   2a408:	f04f 0300 	mov.w	r3, #0
   2a40c:	80a3      	strh	r3, [r4, #4]
   2a40e:	d805      	bhi.n	2a41c <bt_mesh_model_msg_init+0x28>
		net_buf_simple_add_u8(msg, opcode);
   2a410:	4620      	mov	r0, r4
   2a412:	b2c9      	uxtb	r1, r1
}
   2a414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_u8(msg, opcode);
   2a418:	f001 be4e 	b.w	2c0b8 <net_buf_simple_add_u8>
	switch (BT_MESH_MODEL_OP_LEN(opcode)) {
   2a41c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   2a420:	b28d      	uxth	r5, r1
   2a422:	d205      	bcs.n	2a430 <bt_mesh_model_msg_init+0x3c>
		net_buf_simple_add_be16(msg, opcode);
   2a424:	4629      	mov	r1, r5
   2a426:	4620      	mov	r0, r4
}
   2a428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_be16(msg, opcode);
   2a42c:	f001 be56 	b.w	2c0dc <net_buf_simple_add_be16>
		net_buf_simple_add_u8(msg, ((opcode >> 16) & 0xff));
   2a430:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2a434:	4620      	mov	r0, r4
   2a436:	f001 fe3f 	bl	2c0b8 <net_buf_simple_add_u8>
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2a43a:	4629      	mov	r1, r5
   2a43c:	4620      	mov	r0, r4
}
   2a43e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_simple_add_le16(msg, opcode & 0xffff);
   2a442:	f001 be41 	b.w	2c0c8 <net_buf_simple_add_le16>

0002a446 <bt_mesh_model_send>:
{
   2a446:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a448:	b085      	sub	sp, #20
   2a44a:	461e      	mov	r6, r3
	struct bt_mesh_net_tx tx = {
   2a44c:	2300      	movs	r3, #0
   2a44e:	e9cd 1302 	strd	r1, r3, [sp, #8]
   2a452:	9301      	str	r3, [sp, #4]
{
   2a454:	4607      	mov	r7, r0
   2a456:	4615      	mov	r5, r2
		.src = bt_mesh_model_elem(model)->addr,
   2a458:	f7e4 feba 	bl	f1d0 <bt_mesh_model_elem>
	struct bt_mesh_net_tx tx = {
   2a45c:	8803      	ldrh	r3, [r0, #0]
   2a45e:	f8ad 300c 	strh.w	r3, [sp, #12]
	if (!bt_mesh_is_provisioned()) {
   2a462:	f7e2 f909 	bl	c678 <bt_mesh_is_provisioned>
   2a466:	b1b8      	cbz	r0, 2a498 <bt_mesh_model_send+0x52>
	if (net_buf_simple_tailroom(msg) < 4) {
   2a468:	4628      	mov	r0, r5
   2a46a:	f001 fec2 	bl	2c1f2 <net_buf_simple_tailroom>
   2a46e:	2803      	cmp	r0, #3
   2a470:	d90f      	bls.n	2a492 <bt_mesh_model_send+0x4c>
	if (msg->len > BT_MESH_TX_SDU_MAX - 4) {
   2a472:	88ab      	ldrh	r3, [r5, #4]
   2a474:	2b44      	cmp	r3, #68	; 0x44
   2a476:	d813      	bhi.n	2a4a0 <bt_mesh_model_send+0x5a>
	if (!implicit_bind && !model_has_key(model, tx->ctx->app_idx)) {
   2a478:	9b02      	ldr	r3, [sp, #8]
   2a47a:	885c      	ldrh	r4, [r3, #2]
		if (mod->keys[i] == key ||
   2a47c:	89bb      	ldrh	r3, [r7, #12]
   2a47e:	429c      	cmp	r4, r3
   2a480:	d011      	beq.n	2a4a6 <bt_mesh_model_send+0x60>
   2a482:	f64f 72fc 	movw	r2, #65532	; 0xfffc
   2a486:	4293      	cmp	r3, r2
   2a488:	d103      	bne.n	2a492 <bt_mesh_model_send+0x4c>
		     BT_MESH_IS_DEV_KEY(key))) {
   2a48a:	3403      	adds	r4, #3
		    (mod->keys[i] == BT_MESH_KEY_DEV_ANY &&
   2a48c:	b2a4      	uxth	r4, r4
   2a48e:	2c01      	cmp	r4, #1
   2a490:	d909      	bls.n	2a4a6 <bt_mesh_model_send+0x60>
		return -EINVAL;
   2a492:	f06f 0015 	mvn.w	r0, #21
	return model_send(model, &tx, false, msg, cb, cb_data);
   2a496:	e001      	b.n	2a49c <bt_mesh_model_send+0x56>
		return -EAGAIN;
   2a498:	f06f 000a 	mvn.w	r0, #10
}
   2a49c:	b005      	add	sp, #20
   2a49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2a4a0:	f06f 0023 	mvn.w	r0, #35	; 0x23
   2a4a4:	e7fa      	b.n	2a49c <bt_mesh_model_send+0x56>
	return bt_mesh_trans_send(tx, msg, cb, cb_data);
   2a4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2a4a8:	4632      	mov	r2, r6
   2a4aa:	4629      	mov	r1, r5
   2a4ac:	a801      	add	r0, sp, #4
   2a4ae:	f7e4 f8d7 	bl	e660 <bt_mesh_trans_send>
   2a4b2:	e7f3      	b.n	2a49c <bt_mesh_model_send+0x56>

0002a4b4 <bt_mesh_model_find_vnd>:
{
   2a4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2a4b6:	7947      	ldrb	r7, [r0, #5]
{
   2a4b8:	4604      	mov	r4, r0
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2a4ba:	2300      	movs	r3, #0
		if (elem->vnd_models[i].vnd.company == company &&
   2a4bc:	f04f 0c1c 	mov.w	ip, #28
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2a4c0:	b2d8      	uxtb	r0, r3
   2a4c2:	4287      	cmp	r7, r0
   2a4c4:	d801      	bhi.n	2a4ca <bt_mesh_model_find_vnd+0x16>
	return NULL;
   2a4c6:	2000      	movs	r0, #0
}
   2a4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (elem->vnd_models[i].vnd.company == company &&
   2a4ca:	68e6      	ldr	r6, [r4, #12]
   2a4cc:	fb0c f503 	mul.w	r5, ip, r3
   2a4d0:	1970      	adds	r0, r6, r5
   2a4d2:	5b75      	ldrh	r5, [r6, r5]
   2a4d4:	428d      	cmp	r5, r1
   2a4d6:	d102      	bne.n	2a4de <bt_mesh_model_find_vnd+0x2a>
   2a4d8:	8845      	ldrh	r5, [r0, #2]
   2a4da:	4295      	cmp	r5, r2
   2a4dc:	d0f4      	beq.n	2a4c8 <bt_mesh_model_find_vnd+0x14>
	for (i = 0U; i < elem->vnd_model_count; i++) {
   2a4de:	3301      	adds	r3, #1
   2a4e0:	e7ee      	b.n	2a4c0 <bt_mesh_model_find_vnd+0xc>

0002a4e2 <bt_mesh_model_find>:
{
   2a4e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0U; i < elem->model_count; i++) {
   2a4e4:	7906      	ldrb	r6, [r0, #4]
{
   2a4e6:	4602      	mov	r2, r0
	for (i = 0U; i < elem->model_count; i++) {
   2a4e8:	2300      	movs	r3, #0
		if (elem->models[i].id == id) {
   2a4ea:	271c      	movs	r7, #28
	for (i = 0U; i < elem->model_count; i++) {
   2a4ec:	b2d8      	uxtb	r0, r3
   2a4ee:	4286      	cmp	r6, r0
   2a4f0:	d801      	bhi.n	2a4f6 <bt_mesh_model_find+0x14>
	return NULL;
   2a4f2:	2000      	movs	r0, #0
   2a4f4:	e008      	b.n	2a508 <bt_mesh_model_find+0x26>
		if (elem->models[i].id == id) {
   2a4f6:	fb07 f403 	mul.w	r4, r7, r3
   2a4fa:	6895      	ldr	r5, [r2, #8]
   2a4fc:	1928      	adds	r0, r5, r4
   2a4fe:	5b2c      	ldrh	r4, [r5, r4]
   2a500:	428c      	cmp	r4, r1
   2a502:	f103 0301 	add.w	r3, r3, #1
   2a506:	d1f1      	bne.n	2a4ec <bt_mesh_model_find+0xa>
}
   2a508:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a50a <bt_mesh_model_root>:
	while (mod->next) {
		mod = mod->next;
	}
#endif
	return mod;
}
   2a50a:	4770      	bx	lr

0002a50c <bt_mesh_model_tree_walk>:
void bt_mesh_model_tree_walk(struct bt_mesh_model *root,
			     enum bt_mesh_walk (*cb)(struct bt_mesh_model *mod,
						     uint32_t depth,
						     void *user_data),
			     void *user_data)
{
   2a50c:	460b      	mov	r3, r1
	struct bt_mesh_model *m = root;
	uint32_t depth = 0;

	do {
		if (cb(m, depth, user_data) == BT_MESH_WALK_STOP) {
   2a50e:	2100      	movs	r1, #0
   2a510:	4718      	bx	r3

0002a512 <key_idx_pack>:
{
   2a512:	b538      	push	{r3, r4, r5, lr}
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   2a514:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
{
   2a518:	4605      	mov	r5, r0
   2a51a:	4614      	mov	r4, r2
	net_buf_simple_add_le16(buf, idx1 | ((idx2 & 0x00f) << 12));
   2a51c:	b289      	uxth	r1, r1
   2a51e:	f001 fdd3 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2a522:	f3c4 1107 	ubfx	r1, r4, #4, #8
   2a526:	4628      	mov	r0, r5
}
   2a528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, idx2 >> 4);
   2a52c:	f001 bdc4 	b.w	2c0b8 <net_buf_simple_add_u8>

0002a530 <send_krp_status>:
{
   2a530:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a532:	b089      	sub	sp, #36	; 0x24
   2a534:	4604      	mov	r4, r0
   2a536:	460d      	mov	r5, r1
   2a538:	4617      	mov	r7, r2
   2a53a:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   2a53c:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   2a540:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   2a542:	a805      	add	r0, sp, #20
   2a544:	f248 0117 	movw	r1, #32791	; 0x8017
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_KRP_STATUS, 4);
   2a548:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a54c:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_KRP_STATUS);
   2a54e:	f7ff ff51 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2a552:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   2a556:	a805      	add	r0, sp, #20
   2a558:	f001 fdae 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   2a55c:	4639      	mov	r1, r7
   2a55e:	a805      	add	r0, sp, #20
   2a560:	f001 fdb2 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, phase);
   2a564:	4631      	mov	r1, r6
   2a566:	a805      	add	r0, sp, #20
   2a568:	f001 fda6 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a56c:	2300      	movs	r3, #0
   2a56e:	9300      	str	r3, [sp, #0]
   2a570:	aa05      	add	r2, sp, #20
   2a572:	4629      	mov	r1, r5
   2a574:	4620      	mov	r0, r4
   2a576:	f7ff ff66 	bl	2a446 <bt_mesh_model_send>
}
   2a57a:	b009      	add	sp, #36	; 0x24
   2a57c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a57e <send_friend_status>:
{
   2a57e:	b570      	push	{r4, r5, r6, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   2a580:	6986      	ldr	r6, [r0, #24]
{
   2a582:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   2a584:	ab03      	add	r3, sp, #12
   2a586:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2a58a:	4604      	mov	r4, r0
   2a58c:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   2a58e:	a805      	add	r0, sp, #20
   2a590:	f248 0111 	movw	r1, #32785	; 0x8011
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_FRIEND_STATUS, 1);
   2a594:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a598:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_FRIEND_STATUS);
   2a59a:	f7ff ff2b 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, cfg->frnd);
   2a59e:	7a71      	ldrb	r1, [r6, #9]
   2a5a0:	a805      	add	r0, sp, #20
   2a5a2:	f001 fd89 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a5a6:	2300      	movs	r3, #0
   2a5a8:	9300      	str	r3, [sp, #0]
   2a5aa:	aa05      	add	r2, sp, #20
   2a5ac:	4629      	mov	r1, r5
   2a5ae:	4620      	mov	r0, r4
   2a5b0:	f7ff ff49 	bl	2a446 <bt_mesh_model_send>
}
   2a5b4:	b008      	add	sp, #32
   2a5b6:	bd70      	pop	{r4, r5, r6, pc}

0002a5b8 <friend_get>:
	send_friend_status(model, ctx);
   2a5b8:	f7ff bfe1 	b.w	2a57e <send_friend_status>

0002a5bc <send_node_id_status>:
{
   2a5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a5be:	b089      	sub	sp, #36	; 0x24
   2a5c0:	4604      	mov	r4, r0
   2a5c2:	460d      	mov	r5, r1
   2a5c4:	4617      	mov	r7, r2
   2a5c6:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   2a5c8:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   2a5cc:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   2a5ce:	a805      	add	r0, sp, #20
   2a5d0:	f248 0148 	movw	r1, #32840	; 0x8048
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_IDENTITY_STATUS, 4);
   2a5d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a5d8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_IDENTITY_STATUS);
   2a5da:	f7ff ff0b 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2a5de:	4639      	mov	r1, r7
   2a5e0:	a805      	add	r0, sp, #20
   2a5e2:	f001 fd69 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, net_idx);
   2a5e6:	4631      	mov	r1, r6
   2a5e8:	a805      	add	r0, sp, #20
   2a5ea:	f001 fd6d 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, node_id);
   2a5ee:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   2a5f2:	a805      	add	r0, sp, #20
   2a5f4:	f001 fd60 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a5f8:	2300      	movs	r3, #0
   2a5fa:	9300      	str	r3, [sp, #0]
   2a5fc:	aa05      	add	r2, sp, #20
   2a5fe:	4629      	mov	r1, r5
   2a600:	4620      	mov	r0, r4
   2a602:	f7ff ff20 	bl	2a446 <bt_mesh_model_send>
}
   2a606:	b009      	add	sp, #36	; 0x24
   2a608:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a60a <send_net_key_status>:
{
   2a60a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a60c:	b089      	sub	sp, #36	; 0x24
   2a60e:	4604      	mov	r4, r0
   2a610:	460d      	mov	r5, r1
   2a612:	4616      	mov	r6, r2
   2a614:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   2a616:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   2a61a:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   2a61c:	a805      	add	r0, sp, #20
   2a61e:	f248 0144 	movw	r1, #32836	; 0x8044
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_STATUS, 3);
   2a622:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a626:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_STATUS);
   2a628:	f7ff fee4 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2a62c:	4639      	mov	r1, r7
   2a62e:	a805      	add	r0, sp, #20
   2a630:	f001 fd42 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, idx);
   2a634:	4631      	mov	r1, r6
   2a636:	a805      	add	r0, sp, #20
   2a638:	f001 fd46 	bl	2c0c8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a63c:	2300      	movs	r3, #0
   2a63e:	9300      	str	r3, [sp, #0]
   2a640:	aa05      	add	r2, sp, #20
   2a642:	4629      	mov	r1, r5
   2a644:	4620      	mov	r0, r4
   2a646:	f7ff fefe 	bl	2a446 <bt_mesh_model_send>
}
   2a64a:	b009      	add	sp, #36	; 0x24
   2a64c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a64e <send_app_key_status>:
{
   2a64e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a650:	b089      	sub	sp, #36	; 0x24
   2a652:	4604      	mov	r4, r0
   2a654:	460d      	mov	r5, r1
   2a656:	4617      	mov	r7, r2
   2a658:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   2a65a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
   2a65e:	ab02      	add	r3, sp, #8
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   2a660:	a805      	add	r0, sp, #20
   2a662:	f248 0103 	movw	r1, #32771	; 0x8003
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_STATUS, 4);
   2a666:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a66a:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_STATUS);
   2a66c:	f7ff fec2 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2a670:	4639      	mov	r1, r7
   2a672:	a805      	add	r0, sp, #20
   2a674:	f001 fd20 	bl	2c0b8 <net_buf_simple_add_u8>
	key_idx_pack(&msg, net_idx, app_idx);
   2a678:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
   2a67c:	4632      	mov	r2, r6
   2a67e:	a805      	add	r0, sp, #20
   2a680:	f7ff ff47 	bl	2a512 <key_idx_pack>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a684:	2300      	movs	r3, #0
   2a686:	9300      	str	r3, [sp, #0]
   2a688:	aa05      	add	r2, sp, #20
   2a68a:	4629      	mov	r1, r5
   2a68c:	4620      	mov	r0, r4
   2a68e:	f7ff feda 	bl	2a446 <bt_mesh_model_send>
}
   2a692:	b009      	add	sp, #36	; 0x24
   2a694:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a696 <hb_pub_send_status>:
{
   2a696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a69a:	b08a      	sub	sp, #40	; 0x28
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   2a69c:	6984      	ldr	r4, [r0, #24]
{
   2a69e:	4690      	mov	r8, r2
   2a6a0:	461f      	mov	r7, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   2a6a2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a6a6:	ab06      	add	r3, sp, #24
{
   2a6a8:	4605      	mov	r5, r0
   2a6aa:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   2a6ac:	a803      	add	r0, sp, #12
   2a6ae:	2106      	movs	r1, #6
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_PUB_STATUS, 10);
   2a6b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2a6b4:	9303      	str	r3, [sp, #12]
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_PUB_STATUS);
   2a6b6:	f7ff fe9d 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2a6ba:	4641      	mov	r1, r8
   2a6bc:	a803      	add	r0, sp, #12
   2a6be:	f001 fcfb 	bl	2c0b8 <net_buf_simple_add_u8>
	if (orig_msg) {
   2a6c2:	b18f      	cbz	r7, 2a6e8 <hb_pub_send_status+0x52>
		memcpy(net_buf_simple_add(&msg, sizeof(*orig_msg)), orig_msg,
   2a6c4:	2109      	movs	r1, #9
   2a6c6:	a803      	add	r0, sp, #12
   2a6c8:	f001 fce7 	bl	2c09a <net_buf_simple_add>
   2a6cc:	2209      	movs	r2, #9
   2a6ce:	4639      	mov	r1, r7
   2a6d0:	f7fc f967 	bl	269a2 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a6d4:	2300      	movs	r3, #0
   2a6d6:	9300      	str	r3, [sp, #0]
   2a6d8:	aa03      	add	r2, sp, #12
   2a6da:	4631      	mov	r1, r6
   2a6dc:	4628      	mov	r0, r5
   2a6de:	f7ff feb2 	bl	2a446 <bt_mesh_model_send>
}
   2a6e2:	b00a      	add	sp, #40	; 0x28
   2a6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_simple_add_le16(&msg, cfg->hb_pub.dst);
   2a6e8:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
   2a6ec:	a803      	add	r0, sp, #12
   2a6ee:	f001 fceb 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
   2a6f2:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
	if (!val) {
   2a6f6:	b171      	cbz	r1, 2a716 <hb_pub_send_status+0x80>
	} else if (val == 0x01) {
   2a6f8:	2901      	cmp	r1, #1
   2a6fa:	d00c      	beq.n	2a716 <hb_pub_send_status+0x80>
	} else if (val == 0xffff) {
   2a6fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a700:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val - 1) + 1;
   2a702:	bf1f      	itttt	ne
   2a704:	f101 31ff 	addne.w	r1, r1, #4294967295
   2a708:	fab1 f181 	clzne	r1, r1
   2a70c:	f1c1 0121 	rsbne	r1, r1, #33	; 0x21
   2a710:	b2c9      	uxtbne	r1, r1
		return 0xff;
   2a712:	bf08      	it	eq
   2a714:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_pub_count_log(cfg->hb_pub.count));
   2a716:	a803      	add	r0, sp, #12
   2a718:	f001 fcce 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.period);
   2a71c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   2a720:	a803      	add	r0, sp, #12
   2a722:	f001 fcc9 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_pub.ttl);
   2a726:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2a72a:	a803      	add	r0, sp, #12
   2a72c:	f001 fcc4 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.feat);
   2a730:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
   2a734:	a803      	add	r0, sp, #12
   2a736:	f001 fcc7 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_pub.net_idx);
   2a73a:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   2a73e:	a803      	add	r0, sp, #12
   2a740:	f001 fcc2 	bl	2c0c8 <net_buf_simple_add_le16>
   2a744:	e7c6      	b.n	2a6d4 <hb_pub_send_status+0x3e>

0002a746 <heartbeat_pub_get>:
	hb_pub_send_status(model, ctx, STATUS_SUCCESS, NULL);
   2a746:	2300      	movs	r3, #0
   2a748:	461a      	mov	r2, r3
   2a74a:	f7ff bfa4 	b.w	2a696 <hb_pub_send_status>

0002a74e <send_mod_sub_status>:
{
   2a74e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a752:	b08b      	sub	sp, #44	; 0x2c
   2a754:	4617      	mov	r7, r2
   2a756:	461e      	mov	r6, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   2a758:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2a75c:	ab06      	add	r3, sp, #24
{
   2a75e:	4604      	mov	r4, r0
   2a760:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   2a762:	a803      	add	r0, sp, #12
   2a764:	f248 011f 	movw	r1, #32799	; 0x801f
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_SUB_STATUS, 9);
   2a768:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2a76c:	9303      	str	r3, [sp, #12]
{
   2a76e:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
   2a772:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
	bt_mesh_model_msg_init(&msg, OP_MOD_SUB_STATUS);
   2a776:	f7ff fe3d 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2a77a:	4639      	mov	r1, r7
   2a77c:	a803      	add	r0, sp, #12
   2a77e:	f001 fc9b 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   2a782:	4631      	mov	r1, r6
   2a784:	a803      	add	r0, sp, #12
   2a786:	f001 fc9f 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, sub_addr);
   2a78a:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   2a78e:	a803      	add	r0, sp, #12
   2a790:	f001 fc9a 	bl	2c0c8 <net_buf_simple_add_le16>
	if (vnd) {
   2a794:	f1b9 0f00 	cmp.w	r9, #0
   2a798:	d011      	beq.n	2a7be <send_mod_sub_status+0x70>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   2a79a:	2104      	movs	r1, #4
   2a79c:	a803      	add	r0, sp, #12
   2a79e:	f001 fc7c 	bl	2c09a <net_buf_simple_add>
   2a7a2:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   2a7a4:	4641      	mov	r1, r8
   2a7a6:	f7fc f8fc 	bl	269a2 <memcpy>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a7aa:	2300      	movs	r3, #0
   2a7ac:	9300      	str	r3, [sp, #0]
   2a7ae:	aa03      	add	r2, sp, #12
   2a7b0:	4629      	mov	r1, r5
   2a7b2:	4620      	mov	r0, r4
   2a7b4:	f7ff fe47 	bl	2a446 <bt_mesh_model_send>
}
   2a7b8:	b00b      	add	sp, #44	; 0x2c
   2a7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   2a7be:	2102      	movs	r1, #2
   2a7c0:	a803      	add	r0, sp, #12
   2a7c2:	f001 fc6a 	bl	2c09a <net_buf_simple_add>
   2a7c6:	2202      	movs	r2, #2
   2a7c8:	e7ec      	b.n	2a7a4 <send_mod_sub_status+0x56>

0002a7ca <krp_set>:
{
   2a7ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a7cc:	4606      	mov	r6, r0
   2a7ce:	b085      	sub	sp, #20
	idx = net_buf_simple_pull_le16(buf);
   2a7d0:	4610      	mov	r0, r2
{
   2a7d2:	4615      	mov	r5, r2
   2a7d4:	460f      	mov	r7, r1
	idx = net_buf_simple_pull_le16(buf);
   2a7d6:	f001 fcec 	bl	2c1b2 <net_buf_simple_pull_le16>
   2a7da:	4604      	mov	r4, r0
	phase = net_buf_simple_pull_u8(buf);
   2a7dc:	4628      	mov	r0, r5
   2a7de:	f001 fce0 	bl	2c1a2 <net_buf_simple_pull_u8>
	if (idx > 0xfff) {
   2a7e2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
	phase = net_buf_simple_pull_u8(buf);
   2a7e6:	f88d 000f 	strb.w	r0, [sp, #15]
	if (idx > 0xfff) {
   2a7ea:	d20e      	bcs.n	2a80a <krp_set+0x40>
	status = bt_mesh_subnet_kr_phase_set(idx, &phase);
   2a7ec:	f10d 010f 	add.w	r1, sp, #15
   2a7f0:	4620      	mov	r0, r4
   2a7f2:	f7e3 f86f 	bl	d8d4 <bt_mesh_subnet_kr_phase_set>
	if (status == STATUS_CANNOT_UPDATE) {
   2a7f6:	280b      	cmp	r0, #11
   2a7f8:	d007      	beq.n	2a80a <krp_set+0x40>
	send_krp_status(model, ctx, idx, phase, status);
   2a7fa:	9000      	str	r0, [sp, #0]
   2a7fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2a800:	4622      	mov	r2, r4
   2a802:	4639      	mov	r1, r7
   2a804:	4630      	mov	r0, r6
   2a806:	f7ff fe93 	bl	2a530 <send_krp_status>
}
   2a80a:	b005      	add	sp, #20
   2a80c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a80e <krp_get>:
{
   2a80e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a810:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   2a812:	4610      	mov	r0, r2
{
   2a814:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   2a816:	f001 fccc 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   2a81a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2a81e:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2a820:	d20b      	bcs.n	2a83a <krp_get+0x2c>
	status = bt_mesh_subnet_kr_phase_get(idx, &kr_phase);
   2a822:	f10d 010f 	add.w	r1, sp, #15
   2a826:	f7ff f9a2 	bl	29b6e <bt_mesh_subnet_kr_phase_get>
	send_krp_status(model, ctx, idx, kr_phase, status);
   2a82a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2a82e:	9000      	str	r0, [sp, #0]
   2a830:	4622      	mov	r2, r4
   2a832:	4631      	mov	r1, r6
   2a834:	4628      	mov	r0, r5
   2a836:	f7ff fe7b 	bl	2a530 <send_krp_status>
}
   2a83a:	b004      	add	sp, #16
   2a83c:	bd70      	pop	{r4, r5, r6, pc}

0002a83e <lpn_timeout_get>:
{
   2a83e:	b570      	push	{r4, r5, r6, lr}
   2a840:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   2a842:	ab02      	add	r3, sp, #8
{
   2a844:	4605      	mov	r5, r0
   2a846:	460e      	mov	r6, r1
	lpn_addr = net_buf_simple_pull_le16(buf);
   2a848:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_LPN_TIMEOUT_STATUS, 5);
   2a84a:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   2a84e:	e9cd 1306 	strd	r1, r3, [sp, #24]
   2a852:	9305      	str	r3, [sp, #20]
	lpn_addr = net_buf_simple_pull_le16(buf);
   2a854:	f001 fcad 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   2a858:	b203      	sxth	r3, r0
   2a85a:	2b00      	cmp	r3, #0
	lpn_addr = net_buf_simple_pull_le16(buf);
   2a85c:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(lpn_addr)) {
   2a85e:	dd13      	ble.n	2a888 <lpn_timeout_get+0x4a>
	bt_mesh_model_msg_init(&msg, OP_LPN_TIMEOUT_STATUS);
   2a860:	f248 012e 	movw	r1, #32814	; 0x802e
   2a864:	a805      	add	r0, sp, #20
   2a866:	f7ff fdc5 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_le16(&msg, lpn_addr);
   2a86a:	4621      	mov	r1, r4
   2a86c:	a805      	add	r0, sp, #20
   2a86e:	f001 fc2b 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le24(&msg, timeout_ms);
   2a872:	2100      	movs	r1, #0
   2a874:	a805      	add	r0, sp, #20
   2a876:	f001 fc3b 	bl	2c0f0 <net_buf_simple_add_le24>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a87a:	2300      	movs	r3, #0
   2a87c:	9300      	str	r3, [sp, #0]
   2a87e:	aa05      	add	r2, sp, #20
   2a880:	4631      	mov	r1, r6
   2a882:	4628      	mov	r0, r5
   2a884:	f7ff fddf 	bl	2a446 <bt_mesh_model_send>
}
   2a888:	b008      	add	sp, #32
   2a88a:	bd70      	pop	{r4, r5, r6, pc}

0002a88c <friend_set>:
{
   2a88c:	b538      	push	{r3, r4, r5, lr}
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2a88e:	6813      	ldr	r3, [r2, #0]
   2a890:	781a      	ldrb	r2, [r3, #0]
   2a892:	2a01      	cmp	r2, #1
{
   2a894:	4604      	mov	r4, r0
   2a896:	460d      	mov	r5, r1
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2a898:	d811      	bhi.n	2a8be <friend_set+0x32>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   2a89a:	6983      	ldr	r3, [r0, #24]
	if (cfg->frnd == buf->data[0]) {
   2a89c:	7a59      	ldrb	r1, [r3, #9]
   2a89e:	4291      	cmp	r1, r2
   2a8a0:	d007      	beq.n	2a8b2 <friend_set+0x26>
	if (cfg->hb_pub.feat & BT_MESH_FEAT_FRIEND) {
   2a8a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
   2a8a6:	075b      	lsls	r3, r3, #29
   2a8a8:	d503      	bpl.n	2a8b2 <friend_set+0x26>
		(void)bt_mesh_heartbeat_send(NULL, NULL);
   2a8aa:	2100      	movs	r1, #0
   2a8ac:	4608      	mov	r0, r1
   2a8ae:	f7ff fb5c 	bl	29f6a <bt_mesh_heartbeat_send>
	send_friend_status(model, ctx);
   2a8b2:	4629      	mov	r1, r5
   2a8b4:	4620      	mov	r0, r4
}
   2a8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	send_friend_status(model, ctx);
   2a8ba:	f7ff be60 	b.w	2a57e <send_friend_status>
}
   2a8be:	bd38      	pop	{r3, r4, r5, pc}

0002a8c0 <node_reset>:
{
   2a8c0:	b530      	push	{r4, r5, lr}
   2a8c2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   2a8c4:	ab03      	add	r3, sp, #12
{
   2a8c6:	4604      	mov	r4, r0
   2a8c8:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   2a8ca:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   2a8ce:	a805      	add	r0, sp, #20
   2a8d0:	f248 014a 	movw	r1, #32842	; 0x804a
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NODE_RESET_STATUS, 0);
   2a8d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a8d8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NODE_RESET_STATUS);
   2a8da:	f7ff fd8b 	bl	2a3f4 <bt_mesh_model_msg_init>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a8de:	2300      	movs	r3, #0
   2a8e0:	9300      	str	r3, [sp, #0]
   2a8e2:	aa05      	add	r2, sp, #20
   2a8e4:	4629      	mov	r1, r5
   2a8e6:	4620      	mov	r0, r4
   2a8e8:	f7ff fdad 	bl	2a446 <bt_mesh_model_send>
		bt_mesh_reset();
   2a8ec:	f7e1 fe8c 	bl	c608 <bt_mesh_reset>
}
   2a8f0:	b009      	add	sp, #36	; 0x24
   2a8f2:	bd30      	pop	{r4, r5, pc}

0002a8f4 <node_identity_set>:
{
   2a8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a8f6:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   2a8f8:	4610      	mov	r0, r2
{
   2a8fa:	460e      	mov	r6, r1
   2a8fc:	4617      	mov	r7, r2
	idx = net_buf_simple_pull_le16(buf);
   2a8fe:	f001 fc58 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   2a902:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2a906:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2a908:	d21a      	bcs.n	2a940 <node_identity_set+0x4c>
	node_id = net_buf_simple_pull_u8(buf);
   2a90a:	4638      	mov	r0, r7
   2a90c:	f001 fc49 	bl	2c1a2 <net_buf_simple_pull_u8>
	if (node_id != 0x00 && node_id != 0x01) {
   2a910:	2801      	cmp	r0, #1
	node_id = net_buf_simple_pull_u8(buf);
   2a912:	4607      	mov	r7, r0
	if (node_id != 0x00 && node_id != 0x01) {
   2a914:	d814      	bhi.n	2a940 <node_identity_set+0x4c>
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   2a916:	4601      	mov	r1, r0
   2a918:	4620      	mov	r0, r4
   2a91a:	f7ff f933 	bl	29b84 <bt_mesh_subnet_node_id_set>
	if (status == STATUS_INVALID_NETKEY) {
   2a91e:	2804      	cmp	r0, #4
	status = bt_mesh_subnet_node_id_set(idx, node_id);
   2a920:	4602      	mov	r2, r0
	if (status == STATUS_INVALID_NETKEY) {
   2a922:	d103      	bne.n	2a92c <node_identity_set+0x38>
		send_node_id_status(model, ctx, status, idx,
   2a924:	2300      	movs	r3, #0
   2a926:	9300      	str	r3, [sp, #0]
	send_node_id_status(model, ctx, status, idx, node_id);
   2a928:	4623      	mov	r3, r4
   2a92a:	e005      	b.n	2a938 <node_identity_set+0x44>
	if (status == STATUS_FEAT_NOT_SUPP) {
   2a92c:	280a      	cmp	r0, #10
   2a92e:	d109      	bne.n	2a944 <node_identity_set+0x50>
		send_node_id_status(model, ctx, STATUS_SUCCESS, idx,
   2a930:	2302      	movs	r3, #2
   2a932:	9300      	str	r3, [sp, #0]
   2a934:	2200      	movs	r2, #0
   2a936:	4623      	mov	r3, r4
	send_node_id_status(model, ctx, status, idx, node_id);
   2a938:	4631      	mov	r1, r6
   2a93a:	4628      	mov	r0, r5
   2a93c:	f7ff fe3e 	bl	2a5bc <send_node_id_status>
}
   2a940:	b003      	add	sp, #12
   2a942:	bdf0      	pop	{r4, r5, r6, r7, pc}
	send_node_id_status(model, ctx, status, idx, node_id);
   2a944:	9700      	str	r7, [sp, #0]
   2a946:	e7ef      	b.n	2a928 <node_identity_set+0x34>

0002a948 <node_identity_get>:
{
   2a948:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2a94a:	4605      	mov	r5, r0
	idx = net_buf_simple_pull_le16(buf);
   2a94c:	4610      	mov	r0, r2
{
   2a94e:	460e      	mov	r6, r1
	idx = net_buf_simple_pull_le16(buf);
   2a950:	f001 fc2f 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   2a954:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2a958:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2a95a:	d20c      	bcs.n	2a976 <node_identity_get+0x2e>
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   2a95c:	f10d 010f 	add.w	r1, sp, #15
   2a960:	f7ff f91c 	bl	29b9c <bt_mesh_subnet_node_id_get>
	send_node_id_status(model, ctx, status, idx, node_id);
   2a964:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2a968:	9300      	str	r3, [sp, #0]
	status = bt_mesh_subnet_node_id_get(idx, &node_id);
   2a96a:	4602      	mov	r2, r0
	send_node_id_status(model, ctx, status, idx, node_id);
   2a96c:	4623      	mov	r3, r4
   2a96e:	4631      	mov	r1, r6
   2a970:	4628      	mov	r0, r5
   2a972:	f7ff fe23 	bl	2a5bc <send_node_id_status>
}
   2a976:	b004      	add	sp, #16
   2a978:	bd70      	pop	{r4, r5, r6, pc}

0002a97a <net_key_get>:
{
   2a97a:	b530      	push	{r4, r5, lr}
   2a97c:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   2a97e:	ab03      	add	r3, sp, #12
   2a980:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   2a984:	4604      	mov	r4, r0
   2a986:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   2a988:	a805      	add	r0, sp, #20
   2a98a:	f248 0143 	movw	r1, #32835	; 0x8043
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_KEY_LIST,
   2a98e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a992:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_KEY_LIST);
   2a994:	f7ff fd2e 	bl	2a3f4 <bt_mesh_model_msg_init>
	count = bt_mesh_subnets_get(net_idx, ARRAY_SIZE(net_idx), 0);
   2a998:	2200      	movs	r2, #0
   2a99a:	2101      	movs	r1, #1
   2a99c:	a802      	add	r0, sp, #8
   2a99e:	f7e2 ff73 	bl	d888 <bt_mesh_subnets_get>
	if (count < 0 || count > ARRAY_SIZE(net_idx)) {
   2a9a2:	b120      	cbz	r0, 2a9ae <net_key_get+0x34>
		net_buf_simple_add_le16(&msg, net_idx[i]);
   2a9a4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2a9a8:	a805      	add	r0, sp, #20
   2a9aa:	f001 fb8d 	bl	2c0c8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2a9ae:	2300      	movs	r3, #0
   2a9b0:	9300      	str	r3, [sp, #0]
   2a9b2:	aa05      	add	r2, sp, #20
   2a9b4:	4629      	mov	r1, r5
   2a9b6:	4620      	mov	r0, r4
   2a9b8:	f7ff fd45 	bl	2a446 <bt_mesh_model_send>
}
   2a9bc:	b009      	add	sp, #36	; 0x24
   2a9be:	bd30      	pop	{r4, r5, pc}

0002a9c0 <net_key_del>:
{
   2a9c0:	b570      	push	{r4, r5, r6, lr}
   2a9c2:	4606      	mov	r6, r0
	del_idx = net_buf_simple_pull_le16(buf);
   2a9c4:	4610      	mov	r0, r2
{
   2a9c6:	460c      	mov	r4, r1
	del_idx = net_buf_simple_pull_le16(buf);
   2a9c8:	f001 fbf3 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (del_idx > 0xfff) {
   2a9cc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	del_idx = net_buf_simple_pull_le16(buf);
   2a9d0:	4605      	mov	r5, r0
	if (del_idx > 0xfff) {
   2a9d2:	d20e      	bcs.n	2a9f2 <net_key_del+0x32>
	if (ctx->net_idx == del_idx) {
   2a9d4:	8822      	ldrh	r2, [r4, #0]
   2a9d6:	4282      	cmp	r2, r0
   2a9d8:	d106      	bne.n	2a9e8 <net_key_del+0x28>
		send_net_key_status(model, ctx, del_idx,
   2a9da:	230c      	movs	r3, #12
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   2a9dc:	4621      	mov	r1, r4
   2a9de:	4630      	mov	r0, r6
}
   2a9e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   2a9e4:	f7ff be11 	b.w	2a60a <send_net_key_status>
	bt_mesh_subnet_del(del_idx);
   2a9e8:	f7ff f8b7 	bl	29b5a <bt_mesh_subnet_del>
	send_net_key_status(model, ctx, del_idx, STATUS_SUCCESS);
   2a9ec:	2300      	movs	r3, #0
   2a9ee:	462a      	mov	r2, r5
   2a9f0:	e7f4      	b.n	2a9dc <net_key_del+0x1c>
}
   2a9f2:	bd70      	pop	{r4, r5, r6, pc}

0002a9f4 <net_key_update>:
{
   2a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a9f8:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   2a9fa:	4610      	mov	r0, r2
{
   2a9fc:	460f      	mov	r7, r1
   2a9fe:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   2aa00:	f001 fbd7 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   2aa04:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2aa08:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2aa0a:	d20a      	bcs.n	2aa22 <net_key_update+0x2e>
	status = bt_mesh_subnet_update(idx, buf->data);
   2aa0c:	6829      	ldr	r1, [r5, #0]
   2aa0e:	f7ff f873 	bl	29af8 <bt_mesh_subnet_update>
	send_net_key_status(model, ctx, idx, status);
   2aa12:	4622      	mov	r2, r4
	status = bt_mesh_subnet_update(idx, buf->data);
   2aa14:	4603      	mov	r3, r0
	send_net_key_status(model, ctx, idx, status);
   2aa16:	4639      	mov	r1, r7
   2aa18:	4630      	mov	r0, r6
}
   2aa1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   2aa1e:	f7ff bdf4 	b.w	2a60a <send_net_key_status>
}
   2aa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aa26 <net_key_add>:
{
   2aa26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2aa2a:	4606      	mov	r6, r0
	idx = net_buf_simple_pull_le16(buf);
   2aa2c:	4610      	mov	r0, r2
{
   2aa2e:	460f      	mov	r7, r1
   2aa30:	4615      	mov	r5, r2
	idx = net_buf_simple_pull_le16(buf);
   2aa32:	f001 fbbe 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (idx > 0xfff) {
   2aa36:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	idx = net_buf_simple_pull_le16(buf);
   2aa3a:	4604      	mov	r4, r0
	if (idx > 0xfff) {
   2aa3c:	d20a      	bcs.n	2aa54 <net_key_add+0x2e>
	status = bt_mesh_subnet_add(idx, buf->data);
   2aa3e:	6829      	ldr	r1, [r5, #0]
   2aa40:	f7e2 fef4 	bl	d82c <bt_mesh_subnet_add>
	send_net_key_status(model, ctx, idx, status);
   2aa44:	4622      	mov	r2, r4
	status = bt_mesh_subnet_add(idx, buf->data);
   2aa46:	4603      	mov	r3, r0
	send_net_key_status(model, ctx, idx, status);
   2aa48:	4639      	mov	r1, r7
   2aa4a:	4630      	mov	r0, r6
}
   2aa4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	send_net_key_status(model, ctx, idx, status);
   2aa50:	f7ff bddb 	b.w	2a60a <send_net_key_status>
}
   2aa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002aa58 <app_key_get>:
{
   2aa58:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa5a:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   2aa5c:	ab04      	add	r3, sp, #16
{
   2aa5e:	4605      	mov	r5, r0
   2aa60:	460e      	mov	r6, r1
	get_idx = net_buf_simple_pull_le16(buf);
   2aa62:	4610      	mov	r0, r2
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_APP_KEY_LIST,
   2aa64:	f44f 2130 	mov.w	r1, #720896	; 0xb0000
   2aa68:	e9cd 1308 	strd	r1, r3, [sp, #32]
   2aa6c:	9307      	str	r3, [sp, #28]
	get_idx = net_buf_simple_pull_le16(buf);
   2aa6e:	f001 fba0 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (get_idx > 0xfff) {
   2aa72:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	get_idx = net_buf_simple_pull_le16(buf);
   2aa76:	4604      	mov	r4, r0
	if (get_idx > 0xfff) {
   2aa78:	d227      	bcs.n	2aaca <app_key_get+0x72>
	bt_mesh_model_msg_init(&msg, OP_APP_KEY_LIST);
   2aa7a:	f248 0102 	movw	r1, #32770	; 0x8002
   2aa7e:	a807      	add	r0, sp, #28
   2aa80:	f7ff fcb8 	bl	2a3f4 <bt_mesh_model_msg_init>
	if (!bt_mesh_subnet_exists(get_idx)) {
   2aa84:	4620      	mov	r0, r4
   2aa86:	f7ff f830 	bl	29aea <bt_mesh_subnet_exists>
		status = STATUS_SUCCESS;
   2aa8a:	2800      	cmp	r0, #0
   2aa8c:	bf0c      	ite	eq
   2aa8e:	2704      	moveq	r7, #4
   2aa90:	2700      	movne	r7, #0
	net_buf_simple_add_u8(&msg, status);
   2aa92:	4639      	mov	r1, r7
   2aa94:	a807      	add	r0, sp, #28
   2aa96:	f001 fb0f 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, get_idx);
   2aa9a:	4621      	mov	r1, r4
   2aa9c:	a807      	add	r0, sp, #28
   2aa9e:	f001 fb13 	bl	2c0c8 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   2aaa2:	b95f      	cbnz	r7, 2aabc <app_key_get+0x64>
	count = bt_mesh_app_keys_get(get_idx, app_idx, ARRAY_SIZE(app_idx), 0);
   2aaa4:	463b      	mov	r3, r7
   2aaa6:	2201      	movs	r2, #1
   2aaa8:	a903      	add	r1, sp, #12
   2aaaa:	4620      	mov	r0, r4
   2aaac:	f7e3 f930 	bl	dd10 <bt_mesh_app_keys_get>
	if (count < 0 || count > ARRAY_SIZE(app_idx)) {
   2aab0:	b120      	cbz	r0, 2aabc <app_key_get+0x64>
		net_buf_simple_add_le16(&msg, app_idx[i]);
   2aab2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2aab6:	a807      	add	r0, sp, #28
   2aab8:	f001 fb06 	bl	2c0c8 <net_buf_simple_add_le16>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2aabc:	2300      	movs	r3, #0
   2aabe:	9300      	str	r3, [sp, #0]
   2aac0:	aa07      	add	r2, sp, #28
   2aac2:	4631      	mov	r1, r6
   2aac4:	4628      	mov	r0, r5
   2aac6:	f7ff fcbe 	bl	2a446 <bt_mesh_model_send>
}
   2aaca:	b00b      	add	sp, #44	; 0x2c
   2aacc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002aace <key_idx_unpack>:

static inline void key_idx_unpack(struct net_buf_simple *buf,
				  uint16_t *idx1, uint16_t *idx2)
{
   2aace:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   2aad0:	6804      	ldr	r4, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2aad2:	7865      	ldrb	r5, [r4, #1]
   2aad4:	7823      	ldrb	r3, [r4, #0]
   2aad6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2aada:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2aade:	800b      	strh	r3, [r1, #0]
   2aae0:	78a1      	ldrb	r1, [r4, #2]
   2aae2:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2aae4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2aae8:	091b      	lsrs	r3, r3, #4
	net_buf_simple_pull(buf, 3);
}
   2aaea:	bc30      	pop	{r4, r5}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2aaec:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   2aaee:	2103      	movs	r1, #3
   2aaf0:	f001 bb47 	b.w	2c182 <net_buf_simple_pull>

0002aaf4 <app_key_del>:
{
   2aaf4:	b530      	push	{r4, r5, lr}
   2aaf6:	b085      	sub	sp, #20
   2aaf8:	4604      	mov	r4, r0
   2aafa:	460d      	mov	r5, r1
   2aafc:	4610      	mov	r0, r2
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2aafe:	a903      	add	r1, sp, #12
   2ab00:	f10d 020e 	add.w	r2, sp, #14
   2ab04:	f7ff ffe3 	bl	2aace <key_idx_unpack>
	status = bt_mesh_app_key_del(key_net_idx, key_net_idx);
   2ab08:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2ab0c:	4608      	mov	r0, r1
   2ab0e:	f7e3 f893 	bl	dc38 <bt_mesh_app_key_del>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2ab12:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2ab16:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_del(key_net_idx, key_net_idx);
   2ab18:	4602      	mov	r2, r0
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2ab1a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2ab1e:	4629      	mov	r1, r5
   2ab20:	4620      	mov	r0, r4
   2ab22:	f7ff fd94 	bl	2a64e <send_app_key_status>
}
   2ab26:	b005      	add	sp, #20
   2ab28:	bd30      	pop	{r4, r5, pc}

0002ab2a <app_key_update>:
{
   2ab2a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2ab2c:	4614      	mov	r4, r2
   2ab2e:	4605      	mov	r5, r0
   2ab30:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2ab32:	f10d 020e 	add.w	r2, sp, #14
   2ab36:	a903      	add	r1, sp, #12
   2ab38:	4620      	mov	r0, r4
   2ab3a:	f7ff ffc8 	bl	2aace <key_idx_unpack>
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   2ab3e:	6822      	ldr	r2, [r4, #0]
   2ab40:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2ab44:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2ab48:	f7e3 f832 	bl	dbb0 <bt_mesh_app_key_update>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2ab4c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2ab50:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_update(key_app_idx, key_net_idx, buf->data);
   2ab52:	4602      	mov	r2, r0
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2ab54:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2ab58:	4631      	mov	r1, r6
   2ab5a:	4628      	mov	r0, r5
   2ab5c:	f7ff fd77 	bl	2a64e <send_app_key_status>
}
   2ab60:	b004      	add	sp, #16
   2ab62:	bd70      	pop	{r4, r5, r6, pc}

0002ab64 <app_key_add>:
{
   2ab64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2ab66:	4614      	mov	r4, r2
   2ab68:	4605      	mov	r5, r0
   2ab6a:	460e      	mov	r6, r1
	key_idx_unpack(buf, &key_net_idx, &key_app_idx);
   2ab6c:	f10d 020e 	add.w	r2, sp, #14
   2ab70:	a903      	add	r1, sp, #12
   2ab72:	4620      	mov	r0, r4
   2ab74:	f7ff ffab 	bl	2aace <key_idx_unpack>
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   2ab78:	6822      	ldr	r2, [r4, #0]
   2ab7a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2ab7e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2ab82:	f7e2 ffc9 	bl	db18 <bt_mesh_app_key_add>
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2ab86:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2ab8a:	9300      	str	r3, [sp, #0]
	status = bt_mesh_app_key_add(key_app_idx, key_net_idx, buf->data);
   2ab8c:	4602      	mov	r2, r0
	send_app_key_status(model, ctx, status, key_app_idx, key_net_idx);
   2ab8e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2ab92:	4631      	mov	r1, r6
   2ab94:	4628      	mov	r0, r5
   2ab96:	f7ff fd5a 	bl	2a64e <send_app_key_status>
}
   2ab9a:	b004      	add	sp, #16
   2ab9c:	bd70      	pop	{r4, r5, r6, pc}

0002ab9e <create_mod_app_status.isra.0>:
static void create_mod_app_status(struct net_buf_simple *msg,
   2ab9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aba2:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2aba6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   2abaa:	4604      	mov	r4, r0
   2abac:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2abae:	f248 013e 	movw	r1, #32830	; 0x803e
static void create_mod_app_status(struct net_buf_simple *msg,
   2abb2:	4617      	mov	r7, r2
   2abb4:	461e      	mov	r6, r3
	bt_mesh_model_msg_init(msg, OP_MOD_APP_STATUS);
   2abb6:	f7ff fc1d 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(msg, status);
   2abba:	4649      	mov	r1, r9
   2abbc:	4620      	mov	r0, r4
   2abbe:	f001 fa7b 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(msg, elem_addr);
   2abc2:	4639      	mov	r1, r7
   2abc4:	4620      	mov	r0, r4
   2abc6:	f001 fa7f 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(msg, app_idx);
   2abca:	4631      	mov	r1, r6
   2abcc:	4620      	mov	r0, r4
   2abce:	f001 fa7b 	bl	2c0c8 <net_buf_simple_add_le16>
	if (vnd) {
   2abd2:	b14d      	cbz	r5, 2abe8 <create_mod_app_status.isra.0+0x4a>
		memcpy(net_buf_simple_add(msg, 4), mod_id, 4);
   2abd4:	2104      	movs	r1, #4
   2abd6:	4620      	mov	r0, r4
   2abd8:	f001 fa5f 	bl	2c09a <net_buf_simple_add>
   2abdc:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   2abde:	4641      	mov	r1, r8
}
   2abe0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(net_buf_simple_add(msg, 2), mod_id, 2);
   2abe4:	f7fb bedd 	b.w	269a2 <memcpy>
   2abe8:	2102      	movs	r1, #2
   2abea:	4620      	mov	r0, r4
   2abec:	f001 fa55 	bl	2c09a <net_buf_simple_add>
   2abf0:	2202      	movs	r2, #2
   2abf2:	e7f4      	b.n	2abde <create_mod_app_status.isra.0+0x40>

0002abf4 <get_model>:
{
   2abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < 4) {
   2abf6:	888b      	ldrh	r3, [r1, #4]
   2abf8:	2b03      	cmp	r3, #3
{
   2abfa:	4605      	mov	r5, r0
   2abfc:	460c      	mov	r4, r1
   2abfe:	4616      	mov	r6, r2
		id = net_buf_simple_pull_le16(buf);
   2ac00:	4608      	mov	r0, r1
	if (buf->len < 4) {
   2ac02:	d809      	bhi.n	2ac18 <get_model+0x24>
		id = net_buf_simple_pull_le16(buf);
   2ac04:	f001 fad5 	bl	2c1b2 <net_buf_simple_pull_le16>
		*vnd = false;
   2ac08:	2300      	movs	r3, #0
		id = net_buf_simple_pull_le16(buf);
   2ac0a:	4601      	mov	r1, r0
		*vnd = false;
   2ac0c:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find(elem, id);
   2ac0e:	4628      	mov	r0, r5
}
   2ac10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find(elem, id);
   2ac14:	f7ff bc65 	b.w	2a4e2 <bt_mesh_model_find>
		company = net_buf_simple_pull_le16(buf);
   2ac18:	f001 facb 	bl	2c1b2 <net_buf_simple_pull_le16>
   2ac1c:	4607      	mov	r7, r0
		id = net_buf_simple_pull_le16(buf);
   2ac1e:	4620      	mov	r0, r4
   2ac20:	f001 fac7 	bl	2c1b2 <net_buf_simple_pull_le16>
		*vnd = true;
   2ac24:	2301      	movs	r3, #1
		id = net_buf_simple_pull_le16(buf);
   2ac26:	4602      	mov	r2, r0
		*vnd = true;
   2ac28:	7033      	strb	r3, [r6, #0]
		return bt_mesh_model_find_vnd(elem, company, id);
   2ac2a:	4639      	mov	r1, r7
   2ac2c:	4628      	mov	r0, r5
}
   2ac2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		return bt_mesh_model_find_vnd(elem, company, id);
   2ac32:	f7ff bc3f 	b.w	2a4b4 <bt_mesh_model_find_vnd>

0002ac36 <mod_app_get>:
{
   2ac36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ac3a:	4615      	mov	r5, r2
   2ac3c:	b08d      	sub	sp, #52	; 0x34
	NET_BUF_SIMPLE_DEFINE(msg,
   2ac3e:	ab07      	add	r3, sp, #28
   2ac40:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
{
   2ac44:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   2ac46:	4628      	mov	r0, r5
	NET_BUF_SIMPLE_DEFINE(msg,
   2ac48:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2ac4c:	9304      	str	r3, [sp, #16]
{
   2ac4e:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   2ac50:	f001 faaf 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2ac54:	b203      	sxth	r3, r0
   2ac56:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2ac58:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2ac5a:	dd2c      	ble.n	2acb6 <mod_app_get+0x80>
	mod_id = buf->data;
   2ac5c:	f8d5 9000 	ldr.w	r9, [r5]
	elem = bt_mesh_elem_find(elem_addr);
   2ac60:	f7e4 fb16 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2ac64:	4604      	mov	r4, r0
   2ac66:	bb48      	cbnz	r0, 2acbc <mod_app_get+0x86>
		vnd = (buf->len == 4U);
   2ac68:	88ab      	ldrh	r3, [r5, #4]
   2ac6a:	1f1a      	subs	r2, r3, #4
   2ac6c:	4253      	negs	r3, r2
   2ac6e:	4153      	adcs	r3, r2
   2ac70:	f88d 300f 	strb.w	r3, [sp, #15]
		status = STATUS_INVALID_ADDRESS;
   2ac74:	2501      	movs	r5, #1
	if (vnd) {
   2ac76:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2ac7a:	b34b      	cbz	r3, 2acd0 <mod_app_get+0x9a>
		bt_mesh_model_msg_init(&msg, OP_VND_MOD_APP_LIST);
   2ac7c:	f248 014e 	movw	r1, #32846	; 0x804e
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   2ac80:	a804      	add	r0, sp, #16
   2ac82:	f7ff fbb7 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2ac86:	4629      	mov	r1, r5
   2ac88:	a804      	add	r0, sp, #16
   2ac8a:	f001 fa15 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   2ac8e:	4631      	mov	r1, r6
   2ac90:	a804      	add	r0, sp, #16
   2ac92:	f001 fa19 	bl	2c0c8 <net_buf_simple_add_le16>
	if (vnd) {
   2ac96:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2ac9a:	b1e3      	cbz	r3, 2acd6 <mod_app_get+0xa0>
		net_buf_simple_add_mem(&msg, mod_id, 4);
   2ac9c:	2204      	movs	r2, #4
		net_buf_simple_add_mem(&msg, mod_id, 2);
   2ac9e:	4649      	mov	r1, r9
   2aca0:	a804      	add	r0, sp, #16
   2aca2:	f001 fa00 	bl	2c0a6 <net_buf_simple_add_mem>
	if (mod) {
   2aca6:	b9c4      	cbnz	r4, 2acda <mod_app_get+0xa4>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2aca8:	2300      	movs	r3, #0
   2acaa:	9300      	str	r3, [sp, #0]
   2acac:	aa04      	add	r2, sp, #16
   2acae:	4641      	mov	r1, r8
   2acb0:	4638      	mov	r0, r7
   2acb2:	f7ff fbc8 	bl	2a446 <bt_mesh_model_send>
}
   2acb6:	b00d      	add	sp, #52	; 0x34
   2acb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   2acbc:	4629      	mov	r1, r5
   2acbe:	f10d 020f 	add.w	r2, sp, #15
   2acc2:	f7ff ff97 	bl	2abf4 <get_model>
		status = STATUS_INVALID_MODEL;
   2acc6:	1e04      	subs	r4, r0, #0
   2acc8:	bf14      	ite	ne
   2acca:	2500      	movne	r5, #0
   2accc:	2502      	moveq	r5, #2
   2acce:	e7d2      	b.n	2ac76 <mod_app_get+0x40>
		bt_mesh_model_msg_init(&msg, OP_SIG_MOD_APP_LIST);
   2acd0:	f248 014c 	movw	r1, #32844	; 0x804c
   2acd4:	e7d4      	b.n	2ac80 <mod_app_get+0x4a>
		net_buf_simple_add_mem(&msg, mod_id, 2);
   2acd6:	2202      	movs	r2, #2
   2acd8:	e7e1      	b.n	2ac9e <mod_app_get+0x68>
			if (mod->keys[i] != BT_MESH_KEY_UNUSED) {
   2acda:	89a1      	ldrh	r1, [r4, #12]
   2acdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ace0:	4299      	cmp	r1, r3
   2ace2:	d0e1      	beq.n	2aca8 <mod_app_get+0x72>
				net_buf_simple_add_le16(&msg, mod->keys[i]);
   2ace4:	a804      	add	r0, sp, #16
   2ace6:	f001 f9ef 	bl	2c0c8 <net_buf_simple_add_le16>
		for (i = 0; i < ARRAY_SIZE(mod->keys); i++) {
   2acea:	e7dd      	b.n	2aca8 <mod_app_get+0x72>

0002acec <mod_app_bind>:
{
   2acec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2acf0:	4614      	mov	r4, r2
   2acf2:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   2acf4:	ab06      	add	r3, sp, #24
   2acf6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   2acfa:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   2acfc:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   2acfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2ad02:	9303      	str	r3, [sp, #12]
{
   2ad04:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   2ad06:	f001 fa54 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2ad0a:	b203      	sxth	r3, r0
   2ad0c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2ad0e:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2ad10:	dd20      	ble.n	2ad54 <mod_app_bind+0x68>
	key_app_idx = net_buf_simple_pull_le16(buf);
   2ad12:	4620      	mov	r0, r4
   2ad14:	f001 fa4d 	bl	2c1b2 <net_buf_simple_pull_le16>
   2ad18:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   2ad1a:	4630      	mov	r0, r6
	mod_id = buf->data;
   2ad1c:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   2ad20:	f7e4 fab6 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2ad24:	b9c8      	cbnz	r0, 2ad5a <mod_app_bind+0x6e>
		vnd = (buf->len == 4U);
   2ad26:	88a3      	ldrh	r3, [r4, #4]
   2ad28:	1f1a      	subs	r2, r3, #4
   2ad2a:	4253      	negs	r3, r2
   2ad2c:	4153      	adcs	r3, r2
   2ad2e:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   2ad32:	2301      	movs	r3, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   2ad34:	e9cd 3900 	strd	r3, r9, [sp]
   2ad38:	f89d 100b 	ldrb.w	r1, [sp, #11]
   2ad3c:	462b      	mov	r3, r5
   2ad3e:	4632      	mov	r2, r6
   2ad40:	a803      	add	r0, sp, #12
   2ad42:	f7ff ff2c 	bl	2ab9e <create_mod_app_status.isra.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2ad46:	2300      	movs	r3, #0
   2ad48:	9300      	str	r3, [sp, #0]
   2ad4a:	aa03      	add	r2, sp, #12
   2ad4c:	4641      	mov	r1, r8
   2ad4e:	4638      	mov	r0, r7
   2ad50:	f7ff fb79 	bl	2a446 <bt_mesh_model_send>
}
   2ad54:	b00b      	add	sp, #44	; 0x2c
   2ad56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   2ad5a:	4621      	mov	r1, r4
   2ad5c:	f10d 020b 	add.w	r2, sp, #11
   2ad60:	f7ff ff48 	bl	2abf4 <get_model>
	if (!mod) {
   2ad64:	4604      	mov	r4, r0
   2ad66:	b190      	cbz	r0, 2ad8e <mod_app_bind+0xa2>
	if (model == mod) {
   2ad68:	4287      	cmp	r7, r0
   2ad6a:	d012      	beq.n	2ad92 <mod_app_bind+0xa6>
	if (!bt_mesh_app_key_exists(key_idx)) {
   2ad6c:	4628      	mov	r0, r5
   2ad6e:	f7e2 ffc7 	bl	dd00 <bt_mesh_app_key_exists>
   2ad72:	b180      	cbz	r0, 2ad96 <mod_app_bind+0xaa>
		if (model->keys[i] == key_idx) {
   2ad74:	89a3      	ldrh	r3, [r4, #12]
   2ad76:	429d      	cmp	r5, r3
   2ad78:	d007      	beq.n	2ad8a <mod_app_bind+0x9e>
		if (model->keys[i] == BT_MESH_KEY_UNUSED) {
   2ad7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2ad7e:	4293      	cmp	r3, r2
   2ad80:	d10b      	bne.n	2ad9a <mod_app_bind+0xae>
			model->keys[i] = key_idx;
   2ad82:	81a5      	strh	r5, [r4, #12]
				bt_mesh_store_mod_bind(model);
   2ad84:	4620      	mov	r0, r4
   2ad86:	f000 ffd0 	bl	2bd2a <bt_mesh_store_mod_bind>
			return STATUS_SUCCESS;
   2ad8a:	2300      	movs	r3, #0
   2ad8c:	e7d2      	b.n	2ad34 <mod_app_bind+0x48>
		status = STATUS_INVALID_MODEL;
   2ad8e:	2302      	movs	r3, #2
   2ad90:	e7d0      	b.n	2ad34 <mod_app_bind+0x48>
		status = STATUS_CANNOT_BIND;
   2ad92:	230d      	movs	r3, #13
   2ad94:	e7ce      	b.n	2ad34 <mod_app_bind+0x48>
		return STATUS_INVALID_APPKEY;
   2ad96:	2303      	movs	r3, #3
   2ad98:	e7cc      	b.n	2ad34 <mod_app_bind+0x48>
	return STATUS_INSUFF_RESOURCES;
   2ad9a:	2305      	movs	r3, #5
   2ad9c:	e7ca      	b.n	2ad34 <mod_app_bind+0x48>

0002ad9e <mod_sub_va_del>:
{
   2ad9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ada2:	4606      	mov	r6, r0
   2ada4:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   2ada6:	4610      	mov	r0, r2
{
   2ada8:	460f      	mov	r7, r1
   2adaa:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   2adac:	f001 fa01 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2adb0:	b203      	sxth	r3, r0
   2adb2:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2adb4:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2adb6:	dd20      	ble.n	2adfa <mod_sub_va_del+0x5c>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   2adb8:	2110      	movs	r1, #16
   2adba:	4620      	mov	r0, r4
   2adbc:	f001 f9e9 	bl	2c192 <net_buf_simple_pull_mem>
   2adc0:	4681      	mov	r9, r0
	elem = bt_mesh_elem_find(elem_addr);
   2adc2:	4628      	mov	r0, r5
	mod_id = buf->data;
   2adc4:	f8d4 8000 	ldr.w	r8, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   2adc8:	f7e4 fa62 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2adcc:	b9c0      	cbnz	r0, 2ae00 <mod_sub_va_del+0x62>
		vnd = (buf->len == 4U);
   2adce:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   2add0:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   2add2:	1f11      	subs	r1, r2, #4
   2add4:	424a      	negs	r2, r1
   2add6:	414a      	adcs	r2, r1
   2add8:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   2addc:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   2ade0:	2201      	movs	r2, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   2ade2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2ade6:	e9cd 8301 	strd	r8, r3, [sp, #4]
   2adea:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2adee:	9300      	str	r3, [sp, #0]
   2adf0:	4639      	mov	r1, r7
   2adf2:	462b      	mov	r3, r5
   2adf4:	4630      	mov	r0, r6
   2adf6:	f7ff fcaa 	bl	2a74e <send_mod_sub_status>
}
   2adfa:	b007      	add	sp, #28
   2adfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   2ae00:	f10d 0211 	add.w	r2, sp, #17
   2ae04:	4621      	mov	r1, r4
   2ae06:	f7ff fef5 	bl	2abf4 <get_model>
   2ae0a:	9005      	str	r0, [sp, #20]
	if (!mod) {
   2ae0c:	b918      	cbnz	r0, 2ae16 <mod_sub_va_del+0x78>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   2ae0e:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   2ae12:	2202      	movs	r2, #2
		goto send_status;
   2ae14:	e7e5      	b.n	2ade2 <mod_sub_va_del+0x44>
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   2ae16:	f10d 0112 	add.w	r1, sp, #18
   2ae1a:	4648      	mov	r0, r9
   2ae1c:	f7ff f8fc 	bl	2a018 <bt_mesh_va_del>
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   2ae20:	f8bd 1012 	ldrh.w	r1, [sp, #18]
	status = bt_mesh_va_del(label_uuid, &sub_addr);
   2ae24:	4602      	mov	r2, r0
	if (sub_addr == BT_MESH_ADDR_UNASSIGNED) {
   2ae26:	2900      	cmp	r1, #0
   2ae28:	d0db      	beq.n	2ade2 <mod_sub_va_del+0x44>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   2ae2a:	a805      	add	r0, sp, #20
   2ae2c:	f7ff fac1 	bl	2a3b2 <bt_mesh_model_find_group>
	if (match) {
   2ae30:	b130      	cbz	r0, 2ae40 <mod_sub_va_del+0xa2>
		*match = BT_MESH_ADDR_UNASSIGNED;
   2ae32:	2400      	movs	r4, #0
   2ae34:	8004      	strh	r4, [r0, #0]
			bt_mesh_store_mod_sub(mod);
   2ae36:	9805      	ldr	r0, [sp, #20]
   2ae38:	f000 ff7e 	bl	2bd38 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   2ae3c:	4622      	mov	r2, r4
   2ae3e:	e7d0      	b.n	2ade2 <mod_sub_va_del+0x44>
		status = STATUS_CANNOT_REMOVE;
   2ae40:	220c      	movs	r2, #12
   2ae42:	e7ce      	b.n	2ade2 <mod_sub_va_del+0x44>

0002ae44 <mod_sub_del>:
{
   2ae44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ae48:	4606      	mov	r6, r0
   2ae4a:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   2ae4c:	4610      	mov	r0, r2
{
   2ae4e:	460f      	mov	r7, r1
   2ae50:	4691      	mov	r9, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   2ae52:	f001 f9ae 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2ae56:	b203      	sxth	r3, r0
   2ae58:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2ae5a:	4604      	mov	r4, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2ae5c:	dd38      	ble.n	2aed0 <mod_sub_del+0x8c>
	sub_addr = net_buf_simple_pull_le16(buf);
   2ae5e:	4648      	mov	r0, r9
   2ae60:	f001 f9a7 	bl	2c1b2 <net_buf_simple_pull_le16>
   2ae64:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   2ae66:	4620      	mov	r0, r4
	mod_id = buf->data;
   2ae68:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   2ae6c:	f7e4 fa10 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2ae70:	b948      	cbnz	r0, 2ae86 <mod_sub_del+0x42>
		vnd = (buf->len == 4U);
   2ae72:	f8b9 3004 	ldrh.w	r3, [r9, #4]
		mod = NULL;
   2ae76:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   2ae78:	1f1a      	subs	r2, r3, #4
   2ae7a:	4253      	negs	r3, r2
   2ae7c:	4153      	adcs	r3, r2
   2ae7e:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   2ae82:	2201      	movs	r2, #1
   2ae84:	e01a      	b.n	2aebc <mod_sub_del+0x78>
	mod = get_model(elem, buf, &vnd);
   2ae86:	f10d 0213 	add.w	r2, sp, #19
   2ae8a:	4649      	mov	r1, r9
   2ae8c:	f7ff feb2 	bl	2abf4 <get_model>
   2ae90:	9005      	str	r0, [sp, #20]
	if (!mod) {
   2ae92:	b300      	cbz	r0, 2aed6 <mod_sub_del+0x92>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   2ae94:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   2ae98:	b29b      	uxth	r3, r3
   2ae9a:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   2ae9e:	d8f0      	bhi.n	2ae82 <mod_sub_del+0x3e>
	match = bt_mesh_model_find_group(&mod, sub_addr);
   2aea0:	4629      	mov	r1, r5
   2aea2:	a805      	add	r0, sp, #20
   2aea4:	f7ff fa85 	bl	2a3b2 <bt_mesh_model_find_group>
	if (match) {
   2aea8:	f04f 0900 	mov.w	r9, #0
   2aeac:	4602      	mov	r2, r0
   2aeae:	b128      	cbz	r0, 2aebc <mod_sub_del+0x78>
		*match = BT_MESH_ADDR_UNASSIGNED;
   2aeb0:	f8a0 9000 	strh.w	r9, [r0]
			bt_mesh_store_mod_sub(mod);
   2aeb4:	9805      	ldr	r0, [sp, #20]
   2aeb6:	f000 ff3f 	bl	2bd38 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   2aeba:	464a      	mov	r2, r9
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   2aebc:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2aec0:	9500      	str	r5, [sp, #0]
   2aec2:	e9cd 8301 	strd	r8, r3, [sp, #4]
   2aec6:	4639      	mov	r1, r7
   2aec8:	4623      	mov	r3, r4
   2aeca:	4630      	mov	r0, r6
   2aecc:	f7ff fc3f 	bl	2a74e <send_mod_sub_status>
}
   2aed0:	b007      	add	sp, #28
   2aed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   2aed6:	2202      	movs	r2, #2
   2aed8:	e7f0      	b.n	2aebc <mod_sub_del+0x78>

0002aeda <mod_sub_va_add>:
{
   2aeda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2aede:	4607      	mov	r7, r0
   2aee0:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   2aee2:	4610      	mov	r0, r2
{
   2aee4:	4688      	mov	r8, r1
   2aee6:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   2aee8:	f001 f963 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2aeec:	b203      	sxth	r3, r0
   2aeee:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2aef0:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2aef2:	dd21      	ble.n	2af38 <mod_sub_va_add+0x5e>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   2aef4:	2110      	movs	r1, #16
   2aef6:	4620      	mov	r0, r4
   2aef8:	f001 f94b 	bl	2c192 <net_buf_simple_pull_mem>
   2aefc:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   2aefe:	4628      	mov	r0, r5
	mod_id = buf->data;
   2af00:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   2af04:	f7e4 f9c4 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2af08:	b9c8      	cbnz	r0, 2af3e <mod_sub_va_add+0x64>
		vnd = (buf->len == 4U);
   2af0a:	88a2      	ldrh	r2, [r4, #4]
		mod = NULL;
   2af0c:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   2af0e:	1f11      	subs	r1, r2, #4
   2af10:	424a      	negs	r2, r1
   2af12:	414a      	adcs	r2, r1
   2af14:	f88d 2011 	strb.w	r2, [sp, #17]
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   2af18:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_ADDRESS;
   2af1c:	2401      	movs	r4, #1
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   2af1e:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2af22:	e9cd 9301 	strd	r9, r3, [sp, #4]
   2af26:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2af2a:	9300      	str	r3, [sp, #0]
   2af2c:	4622      	mov	r2, r4
   2af2e:	462b      	mov	r3, r5
   2af30:	4641      	mov	r1, r8
   2af32:	4638      	mov	r0, r7
   2af34:	f7ff fc0b 	bl	2a74e <send_mod_sub_status>
}
   2af38:	b007      	add	sp, #28
   2af3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   2af3e:	f10d 0211 	add.w	r2, sp, #17
   2af42:	4621      	mov	r1, r4
   2af44:	f7ff fe56 	bl	2abf4 <get_model>
   2af48:	9005      	str	r0, [sp, #20]
	if (!mod) {
   2af4a:	b918      	cbnz	r0, 2af54 <mod_sub_va_add+0x7a>
		sub_addr = BT_MESH_ADDR_UNASSIGNED;
   2af4c:	f8ad 0012 	strh.w	r0, [sp, #18]
		status = STATUS_INVALID_MODEL;
   2af50:	2402      	movs	r4, #2
		goto send_status;
   2af52:	e7e4      	b.n	2af1e <mod_sub_va_add+0x44>
	status = bt_mesh_va_add(label_uuid, &sub_addr);
   2af54:	f10d 0112 	add.w	r1, sp, #18
   2af58:	4630      	mov	r0, r6
   2af5a:	f7ff f85b 	bl	2a014 <bt_mesh_va_add>
	if (status != STATUS_SUCCESS) {
   2af5e:	4604      	mov	r4, r0
   2af60:	2800      	cmp	r0, #0
   2af62:	d1dc      	bne.n	2af1e <mod_sub_va_add+0x44>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   2af64:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   2af68:	a805      	add	r0, sp, #20
   2af6a:	f7ff fa22 	bl	2a3b2 <bt_mesh_model_find_group>
		bt_mesh_va_del(label_uuid, NULL);
   2af6e:	4621      	mov	r1, r4
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   2af70:	b118      	cbz	r0, 2af7a <mod_sub_va_add+0xa0>
		bt_mesh_va_del(label_uuid, NULL);
   2af72:	4630      	mov	r0, r6
   2af74:	f7ff f850 	bl	2a018 <bt_mesh_va_del>
		goto send_status;
   2af78:	e7d1      	b.n	2af1e <mod_sub_va_add+0x44>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   2af7a:	a805      	add	r0, sp, #20
   2af7c:	f7ff fa19 	bl	2a3b2 <bt_mesh_model_find_group>
	if (!entry) {
   2af80:	b928      	cbnz	r0, 2af8e <mod_sub_va_add+0xb4>
		bt_mesh_va_del(label_uuid, NULL);
   2af82:	4621      	mov	r1, r4
   2af84:	4630      	mov	r0, r6
   2af86:	f7ff f847 	bl	2a018 <bt_mesh_va_del>
		status = STATUS_INSUFF_RESOURCES;
   2af8a:	2405      	movs	r4, #5
		goto send_status;
   2af8c:	e7c7      	b.n	2af1e <mod_sub_va_add+0x44>
	*entry = sub_addr;
   2af8e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   2af92:	8003      	strh	r3, [r0, #0]
		bt_mesh_store_mod_sub(mod);
   2af94:	9805      	ldr	r0, [sp, #20]
   2af96:	f000 fecf 	bl	2bd38 <bt_mesh_store_mod_sub>
	status = STATUS_SUCCESS;
   2af9a:	e7c0      	b.n	2af1e <mod_sub_va_add+0x44>

0002af9c <mod_sub_add>:
{
   2af9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2afa0:	4607      	mov	r7, r0
   2afa2:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   2afa4:	4610      	mov	r0, r2
{
   2afa6:	4688      	mov	r8, r1
   2afa8:	4614      	mov	r4, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   2afaa:	f001 f902 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2afae:	b203      	sxth	r3, r0
   2afb0:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2afb2:	4606      	mov	r6, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2afb4:	dd3a      	ble.n	2b02c <mod_sub_add+0x90>
	sub_addr = net_buf_simple_pull_le16(buf);
   2afb6:	4620      	mov	r0, r4
   2afb8:	f001 f8fb 	bl	2c1b2 <net_buf_simple_pull_le16>
   2afbc:	4605      	mov	r5, r0
	elem = bt_mesh_elem_find(elem_addr);
   2afbe:	4630      	mov	r0, r6
	mod_id = buf->data;
   2afc0:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   2afc4:	f7e4 f964 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2afc8:	b940      	cbnz	r0, 2afdc <mod_sub_add+0x40>
		vnd = (buf->len == 4U);
   2afca:	88a3      	ldrh	r3, [r4, #4]
		mod = NULL;
   2afcc:	9005      	str	r0, [sp, #20]
		vnd = (buf->len == 4U);
   2afce:	1f1a      	subs	r2, r3, #4
   2afd0:	4253      	negs	r3, r2
   2afd2:	4153      	adcs	r3, r2
   2afd4:	f88d 3013 	strb.w	r3, [sp, #19]
		status = STATUS_INVALID_ADDRESS;
   2afd8:	2201      	movs	r2, #1
   2afda:	e01d      	b.n	2b018 <mod_sub_add+0x7c>
	mod = get_model(elem, buf, &vnd);
   2afdc:	f10d 0213 	add.w	r2, sp, #19
   2afe0:	4621      	mov	r1, r4
   2afe2:	f7ff fe07 	bl	2abf4 <get_model>
   2afe6:	9005      	str	r0, [sp, #20]
	if (!mod) {
   2afe8:	b1a8      	cbz	r0, 2b016 <mod_sub_add+0x7a>
	if (!BT_MESH_ADDR_IS_GROUP(sub_addr)) {
   2afea:	f505 4380 	add.w	r3, r5, #16384	; 0x4000
   2afee:	b29b      	uxth	r3, r3
   2aff0:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
   2aff4:	d8f0      	bhi.n	2afd8 <mod_sub_add+0x3c>
	if (bt_mesh_model_find_group(&mod, sub_addr)) {
   2aff6:	4629      	mov	r1, r5
   2aff8:	a805      	add	r0, sp, #20
   2affa:	f7ff f9da 	bl	2a3b2 <bt_mesh_model_find_group>
   2affe:	b940      	cbnz	r0, 2b012 <mod_sub_add+0x76>
	entry = bt_mesh_model_find_group(&mod, BT_MESH_ADDR_UNASSIGNED);
   2b000:	4601      	mov	r1, r0
   2b002:	a805      	add	r0, sp, #20
   2b004:	f7ff f9d5 	bl	2a3b2 <bt_mesh_model_find_group>
	if (!entry) {
   2b008:	b198      	cbz	r0, 2b032 <mod_sub_add+0x96>
	*entry = sub_addr;
   2b00a:	8005      	strh	r5, [r0, #0]
		bt_mesh_store_mod_sub(mod);
   2b00c:	9805      	ldr	r0, [sp, #20]
   2b00e:	f000 fe93 	bl	2bd38 <bt_mesh_store_mod_sub>
		status = STATUS_SUCCESS;
   2b012:	2200      	movs	r2, #0
   2b014:	e000      	b.n	2b018 <mod_sub_add+0x7c>
		status = STATUS_INVALID_MODEL;
   2b016:	2202      	movs	r2, #2
	send_mod_sub_status(model, ctx, status, elem_addr, sub_addr,
   2b018:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2b01c:	9500      	str	r5, [sp, #0]
   2b01e:	e9cd 9301 	strd	r9, r3, [sp, #4]
   2b022:	4641      	mov	r1, r8
   2b024:	4633      	mov	r3, r6
   2b026:	4638      	mov	r0, r7
   2b028:	f7ff fb91 	bl	2a74e <send_mod_sub_status>
}
   2b02c:	b007      	add	sp, #28
   2b02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INSUFF_RESOURCES;
   2b032:	2205      	movs	r2, #5
   2b034:	e7f0      	b.n	2b018 <mod_sub_add+0x7c>

0002b036 <mod_sub_list_visitor>:
{
   2b036:	b538      	push	{r3, r4, r5, lr}
   2b038:	4615      	mov	r5, r2
	if (mod->elem_idx != visit->elem_idx) {
   2b03a:	7902      	ldrb	r2, [r0, #4]
   2b03c:	882b      	ldrh	r3, [r5, #0]
   2b03e:	429a      	cmp	r2, r3
{
   2b040:	4604      	mov	r4, r0
	if (mod->elem_idx != visit->elem_idx) {
   2b042:	d10a      	bne.n	2b05a <mod_sub_list_visitor+0x24>
		if (mod->groups[i] == BT_MESH_ADDR_UNASSIGNED) {
   2b044:	89c3      	ldrh	r3, [r0, #14]
   2b046:	b143      	cbz	r3, 2b05a <mod_sub_list_visitor+0x24>
		if (net_buf_simple_tailroom(visit->msg) <
   2b048:	6868      	ldr	r0, [r5, #4]
   2b04a:	f001 f8d2 	bl	2c1f2 <net_buf_simple_tailroom>
   2b04e:	2805      	cmp	r0, #5
   2b050:	d905      	bls.n	2b05e <mod_sub_list_visitor+0x28>
		net_buf_simple_add_le16(visit->msg, mod->groups[i]);
   2b052:	89e1      	ldrh	r1, [r4, #14]
   2b054:	6868      	ldr	r0, [r5, #4]
   2b056:	f001 f837 	bl	2c0c8 <net_buf_simple_add_le16>
		return BT_MESH_WALK_CONTINUE;
   2b05a:	2001      	movs	r0, #1
   2b05c:	e000      	b.n	2b060 <mod_sub_list_visitor+0x2a>
			return BT_MESH_WALK_STOP;
   2b05e:	2000      	movs	r0, #0
}
   2b060:	bd38      	pop	{r3, r4, r5, pc}

0002b062 <dev_comp_data_get>:
{
   2b062:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b066:	b09b      	sub	sp, #108	; 0x6c
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   2b068:	ab08      	add	r3, sp, #32
{
   2b06a:	4680      	mov	r8, r0
   2b06c:	4689      	mov	r9, r1
	page = net_buf_simple_pull_u8(buf);
   2b06e:	4610      	mov	r0, r2
	NET_BUF_SIMPLE_DEFINE(sdu, BT_MESH_TX_SDU_MAX);
   2b070:	f44f 0190 	mov.w	r1, #4718592	; 0x480000
   2b074:	e9cd 1306 	strd	r1, r3, [sp, #24]
   2b078:	9305      	str	r3, [sp, #20]
	page = net_buf_simple_pull_u8(buf);
   2b07a:	f001 f892 	bl	2c1a2 <net_buf_simple_pull_u8>
	bt_mesh_model_msg_init(&sdu, OP_DEV_COMP_DATA_STATUS);
   2b07e:	2102      	movs	r1, #2
   2b080:	a805      	add	r0, sp, #20
   2b082:	f7ff f9b7 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&sdu, page);
   2b086:	2100      	movs	r1, #0
   2b088:	a805      	add	r0, sp, #20
   2b08a:	f001 f815 	bl	2c0b8 <net_buf_simple_add_u8>
	comp = bt_mesh_comp_get();
   2b08e:	f7e4 fae5 	bl	f65c <bt_mesh_comp_get>
   2b092:	4605      	mov	r5, r0
	net_buf_simple_add_le16(buf, comp->cid);
   2b094:	8801      	ldrh	r1, [r0, #0]
   2b096:	a805      	add	r0, sp, #20
   2b098:	f001 f816 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->pid);
   2b09c:	8869      	ldrh	r1, [r5, #2]
   2b09e:	a805      	add	r0, sp, #20
   2b0a0:	f001 f812 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, comp->vid);
   2b0a4:	88a9      	ldrh	r1, [r5, #4]
   2b0a6:	a805      	add	r0, sp, #20
   2b0a8:	f001 f80e 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, CONFIG_BT_MESH_CRPL);
   2b0ac:	2180      	movs	r1, #128	; 0x80
   2b0ae:	a805      	add	r0, sp, #20
   2b0b0:	f001 f80a 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(buf, feat);
   2b0b4:	2101      	movs	r1, #1
   2b0b6:	a805      	add	r0, sp, #20
   2b0b8:	f001 f806 	bl	2c0c8 <net_buf_simple_add_le16>
	for (i = 0; i < comp->elem_count; i++) {
   2b0bc:	2600      	movs	r6, #0
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   2b0be:	f04f 0b02 	mov.w	fp, #2
		net_buf_simple_add_le16(buf, mod->id);
   2b0c2:	f04f 0a1c 	mov.w	sl, #28
	for (i = 0; i < comp->elem_count; i++) {
   2b0c6:	68ab      	ldr	r3, [r5, #8]
   2b0c8:	42b3      	cmp	r3, r6
   2b0ca:	d809      	bhi.n	2b0e0 <dev_comp_data_get+0x7e>
	if (bt_mesh_model_send(model, ctx, &sdu, NULL, NULL)) {
   2b0cc:	2300      	movs	r3, #0
   2b0ce:	9300      	str	r3, [sp, #0]
   2b0d0:	aa05      	add	r2, sp, #20
   2b0d2:	4649      	mov	r1, r9
   2b0d4:	4640      	mov	r0, r8
   2b0d6:	f7ff f9b6 	bl	2a446 <bt_mesh_model_send>
}
   2b0da:	b01b      	add	sp, #108	; 0x6c
   2b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = comp_add_elem(buf, &comp->elem[i], i == 0);
   2b0e0:	68ec      	ldr	r4, [r5, #12]
   2b0e2:	eb04 1406 	add.w	r4, r4, r6, lsl #4
	if (net_buf_simple_tailroom(buf) <
   2b0e6:	a805      	add	r0, sp, #20
   2b0e8:	f001 f883 	bl	2c1f2 <net_buf_simple_tailroom>
	    4 + (elem->model_count * 2U) + (elem->vnd_model_count * 4U)) {
   2b0ec:	7922      	ldrb	r2, [r4, #4]
   2b0ee:	7963      	ldrb	r3, [r4, #5]
   2b0f0:	3202      	adds	r2, #2
   2b0f2:	fb1b 2303 	smlabb	r3, fp, r3, r2
	if (net_buf_simple_tailroom(buf) <
   2b0f6:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
   2b0fa:	d3ee      	bcc.n	2b0da <dev_comp_data_get+0x78>
	net_buf_simple_add_le16(buf, elem->loc);
   2b0fc:	8861      	ldrh	r1, [r4, #2]
   2b0fe:	a805      	add	r0, sp, #20
   2b100:	f000 ffe2 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_u8(buf, elem->model_count);
   2b104:	7921      	ldrb	r1, [r4, #4]
   2b106:	a805      	add	r0, sp, #20
   2b108:	f000 ffd6 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(buf, elem->vnd_model_count);
   2b10c:	7961      	ldrb	r1, [r4, #5]
   2b10e:	a805      	add	r0, sp, #20
   2b110:	f000 ffd2 	bl	2c0b8 <net_buf_simple_add_u8>
	for (i = 0; i < elem->model_count; i++) {
   2b114:	2700      	movs	r7, #0
   2b116:	7923      	ldrb	r3, [r4, #4]
   2b118:	429f      	cmp	r7, r3
   2b11a:	db05      	blt.n	2b128 <dev_comp_data_get+0xc6>
	for (i = 0; i < elem->vnd_model_count; i++) {
   2b11c:	2700      	movs	r7, #0
   2b11e:	7963      	ldrb	r3, [r4, #5]
   2b120:	429f      	cmp	r7, r3
   2b122:	db0a      	blt.n	2b13a <dev_comp_data_get+0xd8>
	for (i = 0; i < comp->elem_count; i++) {
   2b124:	3601      	adds	r6, #1
   2b126:	e7ce      	b.n	2b0c6 <dev_comp_data_get+0x64>
		net_buf_simple_add_le16(buf, mod->id);
   2b128:	fb0a f307 	mul.w	r3, sl, r7
   2b12c:	68a2      	ldr	r2, [r4, #8]
   2b12e:	a805      	add	r0, sp, #20
   2b130:	5ad1      	ldrh	r1, [r2, r3]
   2b132:	f000 ffc9 	bl	2c0c8 <net_buf_simple_add_le16>
	for (i = 0; i < elem->model_count; i++) {
   2b136:	3701      	adds	r7, #1
   2b138:	e7ed      	b.n	2b116 <dev_comp_data_get+0xb4>
		mod = &elem->vnd_models[i];
   2b13a:	fb0a f307 	mul.w	r3, sl, r7
   2b13e:	68e1      	ldr	r1, [r4, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   2b140:	a805      	add	r0, sp, #20
		mod = &elem->vnd_models[i];
   2b142:	18ca      	adds	r2, r1, r3
		net_buf_simple_add_le16(buf, mod->vnd.company);
   2b144:	5ac9      	ldrh	r1, [r1, r3]
		mod = &elem->vnd_models[i];
   2b146:	9203      	str	r2, [sp, #12]
		net_buf_simple_add_le16(buf, mod->vnd.company);
   2b148:	f000 ffbe 	bl	2c0c8 <net_buf_simple_add_le16>
		net_buf_simple_add_le16(buf, mod->vnd.id);
   2b14c:	9a03      	ldr	r2, [sp, #12]
   2b14e:	a805      	add	r0, sp, #20
   2b150:	8851      	ldrh	r1, [r2, #2]
   2b152:	f000 ffb9 	bl	2c0c8 <net_buf_simple_add_le16>
	for (i = 0; i < elem->vnd_model_count; i++) {
   2b156:	3701      	adds	r7, #1
   2b158:	e7e1      	b.n	2b11e <dev_comp_data_get+0xbc>

0002b15a <mod_sub_list_clear.isra.0>:
static size_t mod_sub_list_clear(struct bt_mesh_model *mod)
   2b15a:	b538      	push	{r3, r4, r5, lr}
   2b15c:	4604      	mov	r4, r0
		if (!BT_MESH_ADDR_IS_VIRTUAL(mod->groups[i])) {
   2b15e:	8800      	ldrh	r0, [r0, #0]
   2b160:	f480 4300 	eor.w	r3, r0, #32768	; 0x8000
   2b164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2b168:	f04f 0500 	mov.w	r5, #0
   2b16c:	d303      	bcc.n	2b176 <mod_sub_list_clear.isra.0+0x1c>
			if (mod->groups[i] != BT_MESH_ADDR_UNASSIGNED) {
   2b16e:	b108      	cbz	r0, 2b174 <mod_sub_list_clear.isra.0+0x1a>
				mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   2b170:	8025      	strh	r5, [r4, #0]
		clear_count++;
   2b172:	2001      	movs	r0, #1
}
   2b174:	bd38      	pop	{r3, r4, r5, pc}
		label_uuid = bt_mesh_va_label_get(mod->groups[i]);
   2b176:	f7fe ff51 	bl	2a01c <bt_mesh_va_label_get>
		mod->groups[i] = BT_MESH_ADDR_UNASSIGNED;
   2b17a:	8025      	strh	r5, [r4, #0]
		if (label_uuid) {
   2b17c:	2800      	cmp	r0, #0
   2b17e:	d0f8      	beq.n	2b172 <mod_sub_list_clear.isra.0+0x18>
			bt_mesh_va_del(label_uuid, NULL);
   2b180:	4629      	mov	r1, r5
   2b182:	f7fe ff49 	bl	2a018 <bt_mesh_va_del>
	for (i = 0, clear_count = 0; i < ARRAY_SIZE(mod->groups); i++) {
   2b186:	e7f4      	b.n	2b172 <mod_sub_list_clear.isra.0+0x18>

0002b188 <mod_sub_clear_visitor>:
{
   2b188:	b508      	push	{r3, lr}
	mod_sub_list_clear(mod);
   2b18a:	300e      	adds	r0, #14
   2b18c:	f7ff ffe5 	bl	2b15a <mod_sub_list_clear.isra.0>
}
   2b190:	2001      	movs	r0, #1
   2b192:	bd08      	pop	{r3, pc}

0002b194 <mod_reset>:
{
   2b194:	b510      	push	{r4, lr}
   2b196:	4604      	mov	r4, r0
	clear_count = mod_sub_list_clear(mod);
   2b198:	300e      	adds	r0, #14
   2b19a:	f7ff ffde 	bl	2b15a <mod_sub_list_clear.isra.0>
		if (clear_count) {
   2b19e:	b110      	cbz	r0, 2b1a6 <mod_reset+0x12>
			bt_mesh_store_mod_sub(mod);
   2b1a0:	4620      	mov	r0, r4
   2b1a2:	f000 fdc9 	bl	2bd38 <bt_mesh_store_mod_sub>
	if (mod->cb && mod->cb->reset) {
   2b1a6:	6963      	ldr	r3, [r4, #20]
   2b1a8:	b12b      	cbz	r3, 2b1b6 <mod_reset+0x22>
   2b1aa:	68db      	ldr	r3, [r3, #12]
   2b1ac:	b11b      	cbz	r3, 2b1b6 <mod_reset+0x22>
		mod->cb->reset(mod);
   2b1ae:	4620      	mov	r0, r4
}
   2b1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mod->cb->reset(mod);
   2b1b4:	4718      	bx	r3
}
   2b1b6:	bd10      	pop	{r4, pc}

0002b1b8 <send_mod_pub_status.isra.0>:
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   2b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1bc:	b08b      	sub	sp, #44	; 0x2c
   2b1be:	4692      	mov	sl, r2
   2b1c0:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
   2b1c4:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
   2b1c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2b1ca:	9f17      	ldr	r7, [sp, #92]	; 0x5c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   2b1cc:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   2b1d0:	4605      	mov	r5, r0
   2b1d2:	460e      	mov	r6, r1
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   2b1d4:	a802      	add	r0, sp, #8
   2b1d6:	f248 0119 	movw	r1, #32793	; 0x8019
static void send_mod_pub_status(struct bt_mesh_model *cfg_mod,
   2b1da:	4699      	mov	r9, r3
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_PUB_STATUS, 14);
   2b1dc:	ab05      	add	r3, sp, #20
   2b1de:	e9cd 2303 	strd	r2, r3, [sp, #12]
   2b1e2:	9302      	str	r3, [sp, #8]
	bt_mesh_model_msg_init(&msg, OP_MOD_PUB_STATUS);
   2b1e4:	f7ff f906 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2b1e8:	4659      	mov	r1, fp
   2b1ea:	a802      	add	r0, sp, #8
   2b1ec:	f000 ff64 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, elem_addr);
   2b1f0:	4651      	mov	r1, sl
   2b1f2:	a802      	add	r0, sp, #8
   2b1f4:	f000 ff68 	bl	2c0c8 <net_buf_simple_add_le16>
	if (status != STATUS_SUCCESS) {
   2b1f8:	f1bb 0f00 	cmp.w	fp, #0
   2b1fc:	d01c      	beq.n	2b238 <send_mod_pub_status.isra.0+0x80>
		(void)memset(net_buf_simple_add(&msg, 7), 0, 7);
   2b1fe:	2107      	movs	r1, #7
   2b200:	a802      	add	r0, sp, #8
   2b202:	f000 ff4a 	bl	2c09a <net_buf_simple_add>
   2b206:	2207      	movs	r2, #7
   2b208:	2100      	movs	r1, #0
   2b20a:	f7fb fbf5 	bl	269f8 <memset>
	if (vnd) {
   2b20e:	f1b8 0f00 	cmp.w	r8, #0
   2b212:	d033      	beq.n	2b27c <send_mod_pub_status.isra.0+0xc4>
		memcpy(net_buf_simple_add(&msg, 4), mod_id, 4);
   2b214:	2104      	movs	r1, #4
   2b216:	a802      	add	r0, sp, #8
   2b218:	f000 ff3f 	bl	2c09a <net_buf_simple_add>
   2b21c:	2204      	movs	r2, #4
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   2b21e:	4639      	mov	r1, r7
   2b220:	f7fb fbbf 	bl	269a2 <memcpy>
	if (bt_mesh_model_send(cfg_mod, ctx, &msg, NULL, NULL)) {
   2b224:	2300      	movs	r3, #0
   2b226:	9300      	str	r3, [sp, #0]
   2b228:	aa02      	add	r2, sp, #8
   2b22a:	4631      	mov	r1, r6
   2b22c:	4628      	mov	r0, r5
   2b22e:	f7ff f90a 	bl	2a446 <bt_mesh_model_send>
}
   2b232:	b00b      	add	sp, #44	; 0x2c
   2b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		net_buf_simple_add_le16(&msg, pub_addr);
   2b238:	4649      	mov	r1, r9
   2b23a:	a802      	add	r0, sp, #8
   2b23c:	f000 ff44 	bl	2c0c8 <net_buf_simple_add_le16>
		idx_cred = mod->pub->key | (uint16_t)mod->pub->cred << 12;
   2b240:	6823      	ldr	r3, [r4, #0]
   2b242:	79d9      	ldrb	r1, [r3, #7]
   2b244:	88db      	ldrh	r3, [r3, #6]
   2b246:	f3c1 1100 	ubfx	r1, r1, #4, #1
   2b24a:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2b24e:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
		net_buf_simple_add_le16(&msg, idx_cred);
   2b252:	a802      	add	r0, sp, #8
   2b254:	f3c1 010c 	ubfx	r1, r1, #0, #13
   2b258:	f000 ff36 	bl	2c0c8 <net_buf_simple_add_le16>
		net_buf_simple_add_u8(&msg, mod->pub->ttl);
   2b25c:	6823      	ldr	r3, [r4, #0]
   2b25e:	a802      	add	r0, sp, #8
   2b260:	7a19      	ldrb	r1, [r3, #8]
   2b262:	f000 ff29 	bl	2c0b8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->period);
   2b266:	6823      	ldr	r3, [r4, #0]
   2b268:	a802      	add	r0, sp, #8
   2b26a:	7a99      	ldrb	r1, [r3, #10]
   2b26c:	f000 ff24 	bl	2c0b8 <net_buf_simple_add_u8>
		net_buf_simple_add_u8(&msg, mod->pub->retransmit);
   2b270:	6823      	ldr	r3, [r4, #0]
   2b272:	a802      	add	r0, sp, #8
   2b274:	7a59      	ldrb	r1, [r3, #9]
   2b276:	f000 ff1f 	bl	2c0b8 <net_buf_simple_add_u8>
   2b27a:	e7c8      	b.n	2b20e <send_mod_pub_status.isra.0+0x56>
		memcpy(net_buf_simple_add(&msg, 2), mod_id, 2);
   2b27c:	2102      	movs	r1, #2
   2b27e:	a802      	add	r0, sp, #8
   2b280:	f000 ff0b 	bl	2c09a <net_buf_simple_add>
   2b284:	2202      	movs	r2, #2
   2b286:	e7ca      	b.n	2b21e <send_mod_pub_status.isra.0+0x66>

0002b288 <mod_pub_get>:
{
   2b288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b28c:	4606      	mov	r6, r0
   2b28e:	b087      	sub	sp, #28
	elem_addr = net_buf_simple_pull_le16(buf);
   2b290:	4610      	mov	r0, r2
{
   2b292:	460f      	mov	r7, r1
   2b294:	4691      	mov	r9, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   2b296:	f000 ff8c 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2b29a:	b203      	sxth	r3, r0
   2b29c:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2b29e:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2b2a0:	dd26      	ble.n	2b2f0 <mod_pub_get+0x68>
	mod_id = buf->data;
   2b2a2:	f8d9 8000 	ldr.w	r8, [r9]
	elem = bt_mesh_elem_find(elem_addr);
   2b2a6:	f7e3 fff3 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2b2aa:	4604      	mov	r4, r0
   2b2ac:	b948      	cbnz	r0, 2b2c2 <mod_pub_get+0x3a>
		vnd = (buf->len == 4U);
   2b2ae:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   2b2b2:	1f1a      	subs	r2, r3, #4
   2b2b4:	4253      	negs	r3, r2
   2b2b6:	4153      	adcs	r3, r2
   2b2b8:	f88d 3017 	strb.w	r3, [sp, #23]
		status = STATUS_INVALID_ADDRESS;
   2b2bc:	2201      	movs	r2, #1
	uint16_t elem_addr, pub_addr = 0U;
   2b2be:	4623      	mov	r3, r4
   2b2c0:	e00a      	b.n	2b2d8 <mod_pub_get+0x50>
	mod = get_model(elem, buf, &vnd);
   2b2c2:	f10d 0217 	add.w	r2, sp, #23
   2b2c6:	4649      	mov	r1, r9
   2b2c8:	f7ff fc94 	bl	2abf4 <get_model>
	if (!mod) {
   2b2cc:	4604      	mov	r4, r0
   2b2ce:	b190      	cbz	r0, 2b2f6 <mod_pub_get+0x6e>
	if (!mod->pub) {
   2b2d0:	6883      	ldr	r3, [r0, #8]
   2b2d2:	b193      	cbz	r3, 2b2fa <mod_pub_get+0x72>
	pub_addr = mod->pub->addr;
   2b2d4:	889b      	ldrh	r3, [r3, #4]
	status = STATUS_SUCCESS;
   2b2d6:	2200      	movs	r2, #0
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   2b2d8:	e9cd 2802 	strd	r2, r8, [sp, #8]
   2b2dc:	3408      	adds	r4, #8
   2b2de:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2b2e2:	9200      	str	r2, [sp, #0]
   2b2e4:	9401      	str	r4, [sp, #4]
   2b2e6:	462a      	mov	r2, r5
   2b2e8:	4639      	mov	r1, r7
   2b2ea:	4630      	mov	r0, r6
   2b2ec:	f7ff ff64 	bl	2b1b8 <send_mod_pub_status.isra.0>
}
   2b2f0:	b007      	add	sp, #28
   2b2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		status = STATUS_INVALID_MODEL;
   2b2f6:	2202      	movs	r2, #2
   2b2f8:	e7e1      	b.n	2b2be <mod_pub_get+0x36>
		status = STATUS_NVAL_PUB_PARAM;
   2b2fa:	2207      	movs	r2, #7
   2b2fc:	e7ec      	b.n	2b2d8 <mod_pub_get+0x50>

0002b2fe <hb_pwr2.constprop.0>:
	if (!val) {
   2b2fe:	b158      	cbz	r0, 2b318 <hb_pwr2.constprop.0+0x1a>
	} else if (val == 0xff || val == 0x11) {
   2b300:	28ff      	cmp	r0, #255	; 0xff
   2b302:	d007      	beq.n	2b314 <hb_pwr2.constprop.0+0x16>
   2b304:	2811      	cmp	r0, #17
   2b306:	d005      	beq.n	2b314 <hb_pwr2.constprop.0+0x16>
		return (1 << (val - sub));
   2b308:	2301      	movs	r3, #1
   2b30a:	3801      	subs	r0, #1
   2b30c:	fa03 f000 	lsl.w	r0, r3, r0
   2b310:	b280      	uxth	r0, r0
   2b312:	4770      	bx	lr
		return 0xffff;
   2b314:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   2b318:	4770      	bx	lr

0002b31a <mod_unbind.part.0.constprop.0>:
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2b31a:	b530      	push	{r4, r5, lr}
		if (model->keys[i] != key_idx) {
   2b31c:	8985      	ldrh	r5, [r0, #12]
   2b31e:	428d      	cmp	r5, r1
static uint8_t mod_unbind(struct bt_mesh_model *model, uint16_t key_idx, bool store)
   2b320:	b085      	sub	sp, #20
   2b322:	4604      	mov	r4, r0
		if (model->keys[i] != key_idx) {
   2b324:	d114      	bne.n	2b350 <mod_unbind.part.0.constprop.0+0x36>
		model->keys[i] = BT_MESH_KEY_UNUSED;
   2b326:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b32a:	8183      	strh	r3, [r0, #12]
			bt_mesh_store_mod_bind(model);
   2b32c:	f000 fcfd 	bl	2bd2a <bt_mesh_store_mod_bind>
		if (model->pub && model->pub->key == key_idx) {
   2b330:	68a3      	ldr	r3, [r4, #8]
   2b332:	b16b      	cbz	r3, 2b350 <mod_unbind.part.0.constprop.0+0x36>
   2b334:	88db      	ldrh	r3, [r3, #6]
   2b336:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2b33a:	42ab      	cmp	r3, r5
   2b33c:	d108      	bne.n	2b350 <mod_unbind.part.0.constprop.0+0x36>
			_mod_pub_set(model, BT_MESH_ADDR_UNASSIGNED,
   2b33e:	2300      	movs	r3, #0
   2b340:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2b344:	9300      	str	r3, [sp, #0]
   2b346:	461a      	mov	r2, r3
   2b348:	4619      	mov	r1, r3
   2b34a:	4620      	mov	r0, r4
   2b34c:	f7e4 fb6a 	bl	fa24 <_mod_pub_set.constprop.0>
}
   2b350:	2000      	movs	r0, #0
   2b352:	b005      	add	sp, #20
   2b354:	bd30      	pop	{r4, r5, pc}

0002b356 <mod_app_unbind>:
{
   2b356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b35a:	4614      	mov	r4, r2
   2b35c:	b08b      	sub	sp, #44	; 0x2c
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   2b35e:	ab06      	add	r3, sp, #24
   2b360:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
{
   2b364:	4607      	mov	r7, r0
	elem_addr = net_buf_simple_pull_le16(buf);
   2b366:	4620      	mov	r0, r4
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_MOD_APP_STATUS, 9);
   2b368:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2b36c:	9303      	str	r3, [sp, #12]
{
   2b36e:	4688      	mov	r8, r1
	elem_addr = net_buf_simple_pull_le16(buf);
   2b370:	f000 ff1f 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2b374:	b203      	sxth	r3, r0
   2b376:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2b378:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2b37a:	dd20      	ble.n	2b3be <mod_app_unbind+0x68>
	key_app_idx = net_buf_simple_pull_le16(buf);
   2b37c:	4620      	mov	r0, r4
   2b37e:	f000 ff18 	bl	2c1b2 <net_buf_simple_pull_le16>
   2b382:	4606      	mov	r6, r0
	elem = bt_mesh_elem_find(elem_addr);
   2b384:	4628      	mov	r0, r5
	mod_id = buf->data;
   2b386:	f8d4 9000 	ldr.w	r9, [r4]
	elem = bt_mesh_elem_find(elem_addr);
   2b38a:	f7e3 ff81 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2b38e:	b9c8      	cbnz	r0, 2b3c4 <mod_app_unbind+0x6e>
		vnd = (buf->len == 4U);
   2b390:	88a3      	ldrh	r3, [r4, #4]
   2b392:	1f1a      	subs	r2, r3, #4
   2b394:	4253      	negs	r3, r2
   2b396:	4153      	adcs	r3, r2
   2b398:	f88d 300b 	strb.w	r3, [sp, #11]
		status = STATUS_INVALID_ADDRESS;
   2b39c:	2001      	movs	r0, #1
	create_mod_app_status(&msg, mod, vnd, elem_addr, key_app_idx, status,
   2b39e:	e9cd 0900 	strd	r0, r9, [sp]
   2b3a2:	f89d 100b 	ldrb.w	r1, [sp, #11]
   2b3a6:	4633      	mov	r3, r6
   2b3a8:	462a      	mov	r2, r5
   2b3aa:	a803      	add	r0, sp, #12
   2b3ac:	f7ff fbf7 	bl	2ab9e <create_mod_app_status.isra.0>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b3b0:	2300      	movs	r3, #0
   2b3b2:	9300      	str	r3, [sp, #0]
   2b3b4:	aa03      	add	r2, sp, #12
   2b3b6:	4641      	mov	r1, r8
   2b3b8:	4638      	mov	r0, r7
   2b3ba:	f7ff f844 	bl	2a446 <bt_mesh_model_send>
}
   2b3be:	b00b      	add	sp, #44	; 0x2c
   2b3c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mod = get_model(elem, buf, &vnd);
   2b3c4:	4621      	mov	r1, r4
   2b3c6:	f10d 020b 	add.w	r2, sp, #11
   2b3ca:	f7ff fc13 	bl	2abf4 <get_model>
	if (!mod) {
   2b3ce:	4604      	mov	r4, r0
   2b3d0:	b140      	cbz	r0, 2b3e4 <mod_app_unbind+0x8e>
	if (!bt_mesh_app_key_exists(key_idx)) {
   2b3d2:	4630      	mov	r0, r6
   2b3d4:	f7e2 fc94 	bl	dd00 <bt_mesh_app_key_exists>
   2b3d8:	b130      	cbz	r0, 2b3e8 <mod_app_unbind+0x92>
   2b3da:	4631      	mov	r1, r6
   2b3dc:	4620      	mov	r0, r4
   2b3de:	f7ff ff9c 	bl	2b31a <mod_unbind.part.0.constprop.0>
   2b3e2:	e7dc      	b.n	2b39e <mod_app_unbind+0x48>
		status = STATUS_INVALID_MODEL;
   2b3e4:	2002      	movs	r0, #2
   2b3e6:	e7da      	b.n	2b39e <mod_app_unbind+0x48>
		return STATUS_INVALID_APPKEY;
   2b3e8:	2003      	movs	r0, #3
   2b3ea:	e7d8      	b.n	2b39e <mod_app_unbind+0x48>

0002b3ec <mod_pub_set>:
{
   2b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3f0:	4681      	mov	r9, r0
   2b3f2:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   2b3f4:	4610      	mov	r0, r2
{
   2b3f6:	468a      	mov	sl, r1
   2b3f8:	4693      	mov	fp, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   2b3fa:	f000 feda 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2b3fe:	b203      	sxth	r3, r0
   2b400:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2b402:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2b404:	dd36      	ble.n	2b474 <mod_pub_set+0x88>
	pub_addr = net_buf_simple_pull_le16(buf);
   2b406:	4658      	mov	r0, fp
   2b408:	f000 fed3 	bl	2c1b2 <net_buf_simple_pull_le16>
   2b40c:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   2b40e:	4658      	mov	r0, fp
   2b410:	f000 fecf 	bl	2c1b2 <net_buf_simple_pull_le16>
   2b414:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   2b416:	4658      	mov	r0, fp
   2b418:	f000 fec3 	bl	2c1a2 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   2b41c:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   2b420:	b2db      	uxtb	r3, r3
   2b422:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   2b424:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   2b426:	d925      	bls.n	2b474 <mod_pub_set+0x88>
	pub_period = net_buf_simple_pull_u8(buf);
   2b428:	4658      	mov	r0, fp
   2b42a:	f000 feba 	bl	2c1a2 <net_buf_simple_pull_u8>
   2b42e:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   2b430:	4658      	mov	r0, fp
   2b432:	f000 feb6 	bl	2c1a2 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   2b436:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   2b43a:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   2b43c:	4628      	mov	r0, r5
	mod_id = buf->data;
   2b43e:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   2b440:	f7e3 ff26 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2b444:	4604      	mov	r4, r0
   2b446:	b9c0      	cbnz	r0, 2b47a <mod_pub_set+0x8e>
		vnd = (buf->len == 4U);
   2b448:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   2b44c:	1f1a      	subs	r2, r3, #4
   2b44e:	4253      	negs	r3, r2
   2b450:	4153      	adcs	r3, r2
   2b452:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
		status = STATUS_INVALID_ADDRESS;
   2b456:	2001      	movs	r0, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   2b458:	9b05      	ldr	r3, [sp, #20]
   2b45a:	3408      	adds	r4, #8
   2b45c:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2b460:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   2b464:	9300      	str	r3, [sp, #0]
   2b466:	9401      	str	r4, [sp, #4]
   2b468:	4633      	mov	r3, r6
   2b46a:	462a      	mov	r2, r5
   2b46c:	4651      	mov	r1, sl
   2b46e:	4648      	mov	r0, r9
   2b470:	f7ff fea2 	bl	2b1b8 <send_mod_pub_status.isra.0>
}
   2b474:	b00b      	add	sp, #44	; 0x2c
   2b476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
   2b47a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   2b47e:	4659      	mov	r1, fp
   2b480:	f7ff fbb8 	bl	2abf4 <get_model>
	if (!mod) {
   2b484:	4604      	mov	r4, r0
   2b486:	b160      	cbz	r0, 2b4a2 <mod_pub_set+0xb6>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   2b488:	9b07      	ldr	r3, [sp, #28]
   2b48a:	9302      	str	r3, [sp, #8]
   2b48c:	9b06      	ldr	r3, [sp, #24]
   2b48e:	f3c7 020b 	ubfx	r2, r7, #0, #12
   2b492:	e9cd 8300 	strd	r8, r3, [sp]
   2b496:	4631      	mov	r1, r6
   2b498:	f3c7 3300 	ubfx	r3, r7, #12, #1
   2b49c:	f7e4 fac2 	bl	fa24 <_mod_pub_set.constprop.0>
   2b4a0:	e7da      	b.n	2b458 <mod_pub_set+0x6c>
		status = STATUS_INVALID_MODEL;
   2b4a2:	2002      	movs	r0, #2
   2b4a4:	e7d8      	b.n	2b458 <mod_pub_set+0x6c>

0002b4a6 <mod_pub_va_set>:
{
   2b4a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4aa:	4681      	mov	r9, r0
   2b4ac:	b08b      	sub	sp, #44	; 0x2c
	elem_addr = net_buf_simple_pull_le16(buf);
   2b4ae:	4610      	mov	r0, r2
{
   2b4b0:	468a      	mov	sl, r1
   2b4b2:	4693      	mov	fp, r2
	elem_addr = net_buf_simple_pull_le16(buf);
   2b4b4:	f000 fe7d 	bl	2c1b2 <net_buf_simple_pull_le16>
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2b4b8:	b203      	sxth	r3, r0
   2b4ba:	2b00      	cmp	r3, #0
	elem_addr = net_buf_simple_pull_le16(buf);
   2b4bc:	4605      	mov	r5, r0
	if (!BT_MESH_ADDR_IS_UNICAST(elem_addr)) {
   2b4be:	dd3a      	ble.n	2b536 <mod_pub_va_set+0x90>
	label_uuid = net_buf_simple_pull_mem(buf, 16);
   2b4c0:	2110      	movs	r1, #16
   2b4c2:	4658      	mov	r0, fp
   2b4c4:	f000 fe65 	bl	2c192 <net_buf_simple_pull_mem>
   2b4c8:	4606      	mov	r6, r0
	pub_app_idx = net_buf_simple_pull_le16(buf);
   2b4ca:	4658      	mov	r0, fp
   2b4cc:	f000 fe71 	bl	2c1b2 <net_buf_simple_pull_le16>
   2b4d0:	4607      	mov	r7, r0
	pub_ttl = net_buf_simple_pull_u8(buf);
   2b4d2:	4658      	mov	r0, fp
   2b4d4:	f000 fe65 	bl	2c1a2 <net_buf_simple_pull_u8>
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   2b4d8:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
   2b4dc:	b2db      	uxtb	r3, r3
   2b4de:	2b7e      	cmp	r3, #126	; 0x7e
	pub_ttl = net_buf_simple_pull_u8(buf);
   2b4e0:	4680      	mov	r8, r0
	if (pub_ttl > BT_MESH_TTL_MAX && pub_ttl != BT_MESH_TTL_DEFAULT) {
   2b4e2:	d928      	bls.n	2b536 <mod_pub_va_set+0x90>
	pub_period = net_buf_simple_pull_u8(buf);
   2b4e4:	4658      	mov	r0, fp
   2b4e6:	f000 fe5c 	bl	2c1a2 <net_buf_simple_pull_u8>
   2b4ea:	9006      	str	r0, [sp, #24]
	retransmit = net_buf_simple_pull_u8(buf);
   2b4ec:	4658      	mov	r0, fp
   2b4ee:	f000 fe58 	bl	2c1a2 <net_buf_simple_pull_u8>
	mod_id = buf->data;
   2b4f2:	f8db 3000 	ldr.w	r3, [fp]
	retransmit = net_buf_simple_pull_u8(buf);
   2b4f6:	9007      	str	r0, [sp, #28]
	elem = bt_mesh_elem_find(elem_addr);
   2b4f8:	4628      	mov	r0, r5
	mod_id = buf->data;
   2b4fa:	9305      	str	r3, [sp, #20]
	elem = bt_mesh_elem_find(elem_addr);
   2b4fc:	f7e3 fec8 	bl	f290 <bt_mesh_elem_find>
	if (!elem) {
   2b500:	4604      	mov	r4, r0
   2b502:	b9d8      	cbnz	r0, 2b53c <mod_pub_va_set+0x96>
		vnd = (buf->len == 4U);
   2b504:	f8bb 3004 	ldrh.w	r3, [fp, #4]
		pub_addr = 0U;
   2b508:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		vnd = (buf->len == 4U);
   2b50c:	1f1a      	subs	r2, r3, #4
   2b50e:	4253      	negs	r3, r2
   2b510:	4153      	adcs	r3, r2
   2b512:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		status = STATUS_INVALID_ADDRESS;
   2b516:	2301      	movs	r3, #1
	send_mod_pub_status(model, ctx, elem_addr, pub_addr, vnd, mod,
   2b518:	9a05      	ldr	r2, [sp, #20]
   2b51a:	3408      	adds	r4, #8
   2b51c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2b520:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   2b524:	9300      	str	r3, [sp, #0]
   2b526:	9401      	str	r4, [sp, #4]
   2b528:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   2b52c:	462a      	mov	r2, r5
   2b52e:	4651      	mov	r1, sl
   2b530:	4648      	mov	r0, r9
   2b532:	f7ff fe41 	bl	2b1b8 <send_mod_pub_status.isra.0>
}
   2b536:	b00b      	add	sp, #44	; 0x2c
   2b538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	mod = get_model(elem, buf, &vnd);
   2b53c:	f10d 0225 	add.w	r2, sp, #37	; 0x25
   2b540:	4659      	mov	r1, fp
   2b542:	f7ff fb57 	bl	2abf4 <get_model>
	if (!mod) {
   2b546:	4604      	mov	r4, r0
   2b548:	b918      	cbnz	r0, 2b552 <mod_pub_va_set+0xac>
		pub_addr = 0U;
   2b54a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
		status = STATUS_INVALID_MODEL;
   2b54e:	2302      	movs	r3, #2
		goto send_status;
   2b550:	e7e2      	b.n	2b518 <mod_pub_va_set+0x72>
	status = bt_mesh_va_add(label_uuid, &pub_addr);
   2b552:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   2b556:	4630      	mov	r0, r6
   2b558:	f7fe fd5c 	bl	2a014 <bt_mesh_va_add>
   2b55c:	4603      	mov	r3, r0
   2b55e:	4683      	mov	fp, r0
	if (status != STATUS_SUCCESS) {
   2b560:	2800      	cmp	r0, #0
   2b562:	d1d9      	bne.n	2b518 <mod_pub_va_set+0x72>
	status = _mod_pub_set(mod, pub_addr, pub_app_idx, cred_flag, pub_ttl,
   2b564:	9b07      	ldr	r3, [sp, #28]
   2b566:	9302      	str	r3, [sp, #8]
   2b568:	9b06      	ldr	r3, [sp, #24]
   2b56a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   2b56e:	e9cd 8300 	strd	r8, r3, [sp]
   2b572:	f3c7 020b 	ubfx	r2, r7, #0, #12
   2b576:	f3c7 3300 	ubfx	r3, r7, #12, #1
   2b57a:	4620      	mov	r0, r4
   2b57c:	f7e4 fa52 	bl	fa24 <_mod_pub_set.constprop.0>
	if (status != STATUS_SUCCESS) {
   2b580:	4603      	mov	r3, r0
   2b582:	2800      	cmp	r0, #0
   2b584:	d0c8      	beq.n	2b518 <mod_pub_va_set+0x72>
   2b586:	9006      	str	r0, [sp, #24]
		bt_mesh_va_del(label_uuid, NULL);
   2b588:	4659      	mov	r1, fp
   2b58a:	4630      	mov	r0, r6
   2b58c:	f7fe fd44 	bl	2a018 <bt_mesh_va_del>
   2b590:	9b06      	ldr	r3, [sp, #24]
   2b592:	e7c1      	b.n	2b518 <mod_pub_va_set+0x72>

0002b594 <hb_publish_start_cb>:
{
   2b594:	4608      	mov	r0, r1
   2b596:	4611      	mov	r1, r2
	if (err) {
   2b598:	b108      	cbz	r0, 2b59e <hb_publish_start_cb+0xa>
		hb_publish_end_cb(err, cb_data);
   2b59a:	f7e4 bb25 	b.w	fbe8 <hb_publish_end_cb>
}
   2b59e:	4770      	bx	lr

0002b5a0 <mod_app_key_del>:
{
   2b5a0:	b538      	push	{r3, r4, r5, lr}
	mod_unbind(mod, *app_idx, true);
   2b5a2:	9b04      	ldr	r3, [sp, #16]
   2b5a4:	881d      	ldrh	r5, [r3, #0]
{
   2b5a6:	4604      	mov	r4, r0
	if (!bt_mesh_app_key_exists(key_idx)) {
   2b5a8:	4628      	mov	r0, r5
   2b5aa:	f7e2 fba9 	bl	dd00 <bt_mesh_app_key_exists>
   2b5ae:	b128      	cbz	r0, 2b5bc <mod_app_key_del+0x1c>
   2b5b0:	4629      	mov	r1, r5
   2b5b2:	4620      	mov	r0, r4
}
   2b5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b5b8:	f7ff beaf 	b.w	2b31a <mod_unbind.part.0.constprop.0>
   2b5bc:	bd38      	pop	{r3, r4, r5, pc}

0002b5be <hb_sub_send_status.constprop.0>:
static void hb_sub_send_status(struct bt_mesh_model *model,
   2b5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b5c2:	b08a      	sub	sp, #40	; 0x28
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   2b5c4:	ab06      	add	r3, sp, #24
   2b5c6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b5ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   2b5ce:	6986      	ldr	r6, [r0, #24]
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_HEARTBEAT_SUB_STATUS, 9);
   2b5d0:	9303      	str	r3, [sp, #12]
static void hb_sub_send_status(struct bt_mesh_model *model,
   2b5d2:	4607      	mov	r7, r0
   2b5d4:	468a      	mov	sl, r1
   2b5d6:	f002 f856 	bl	2d686 <z_impl_k_uptime_ticks>
   2b5da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	if (uptime > cfg->hb_sub.expiry) {
   2b5de:	e9d6 8914 	ldrd	r8, r9, [r6, #80]	; 0x50
   2b5e2:	460a      	mov	r2, r1
   2b5e4:	fba0 0103 	umull	r0, r1, r0, r3
   2b5e8:	fb03 1102 	mla	r1, r3, r2, r1
   2b5ec:	0bc4      	lsrs	r4, r0, #15
   2b5ee:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
   2b5f2:	0bcd      	lsrs	r5, r1, #15
   2b5f4:	45a0      	cmp	r8, r4
   2b5f6:	eb79 0305 	sbcs.w	r3, r9, r5
   2b5fa:	db4e      	blt.n	2b69a <hb_sub_send_status.constprop.0+0xdc>
		period = (cfg->hb_sub.expiry - uptime) / 1000;
   2b5fc:	ebb8 0004 	subs.w	r0, r8, r4
   2b600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b604:	f04f 0300 	mov.w	r3, #0
   2b608:	eb69 0105 	sbc.w	r1, r9, r5
   2b60c:	f7d4 fd78 	bl	100 <__aeabi_ldivmod>
   2b610:	b284      	uxth	r4, r0
	bt_mesh_model_msg_init(&msg, OP_HEARTBEAT_SUB_STATUS);
   2b612:	f248 013c 	movw	r1, #32828	; 0x803c
   2b616:	a803      	add	r0, sp, #12
   2b618:	f7fe feec 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, status);
   2b61c:	2100      	movs	r1, #0
   2b61e:	a803      	add	r0, sp, #12
   2b620:	f000 fd4a 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.src);
   2b624:	f8b6 1058 	ldrh.w	r1, [r6, #88]	; 0x58
   2b628:	a803      	add	r0, sp, #12
   2b62a:	f000 fd4d 	bl	2c0c8 <net_buf_simple_add_le16>
	net_buf_simple_add_le16(&msg, cfg->hb_sub.dst);
   2b62e:	f8b6 105a 	ldrh.w	r1, [r6, #90]	; 0x5a
   2b632:	a803      	add	r0, sp, #12
   2b634:	f000 fd48 	bl	2c0c8 <net_buf_simple_add_le16>
	if (!val) {
   2b638:	b38c      	cbz	r4, 2b69e <hb_sub_send_status.constprop.0+0xe0>
	} else if (val == 0xffff) {
   2b63a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b63e:	429c      	cmp	r4, r3
   2b640:	d02f      	beq.n	2b6a2 <hb_sub_send_status.constprop.0+0xe4>
		return 32 - __builtin_clz(val);
   2b642:	fab4 f484 	clz	r4, r4
   2b646:	f1c4 0420 	rsb	r4, r4, #32
   2b64a:	b2e1      	uxtb	r1, r4
	net_buf_simple_add_u8(&msg, hb_log(period));
   2b64c:	a803      	add	r0, sp, #12
   2b64e:	f000 fd33 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   2b652:	f8b6 105c 	ldrh.w	r1, [r6, #92]	; 0x5c
	if (!val) {
   2b656:	b149      	cbz	r1, 2b66c <hb_sub_send_status.constprop.0+0xae>
	} else if (val == 0xffff) {
   2b658:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b65c:	4299      	cmp	r1, r3
		return 32 - __builtin_clz(val);
   2b65e:	bf1d      	ittte	ne
   2b660:	fab1 f181 	clzne	r1, r1
   2b664:	f1c1 0120 	rsbne	r1, r1, #32
   2b668:	b2c9      	uxtbne	r1, r1
		return 0xff;
   2b66a:	21ff      	moveq	r1, #255	; 0xff
	net_buf_simple_add_u8(&msg, hb_log(cfg->hb_sub.count));
   2b66c:	a803      	add	r0, sp, #12
   2b66e:	f000 fd23 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.min_hops);
   2b672:	f896 105e 	ldrb.w	r1, [r6, #94]	; 0x5e
   2b676:	a803      	add	r0, sp, #12
   2b678:	f000 fd1e 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, cfg->hb_sub.max_hops);
   2b67c:	f896 105f 	ldrb.w	r1, [r6, #95]	; 0x5f
   2b680:	a803      	add	r0, sp, #12
   2b682:	f000 fd19 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b686:	2300      	movs	r3, #0
   2b688:	9300      	str	r3, [sp, #0]
   2b68a:	aa03      	add	r2, sp, #12
   2b68c:	4651      	mov	r1, sl
   2b68e:	4638      	mov	r0, r7
   2b690:	f7fe fed9 	bl	2a446 <bt_mesh_model_send>
}
   2b694:	b00a      	add	sp, #40	; 0x28
   2b696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		period = 0U;
   2b69a:	2400      	movs	r4, #0
   2b69c:	e7b9      	b.n	2b612 <hb_sub_send_status.constprop.0+0x54>
		return 0x00;
   2b69e:	4621      	mov	r1, r4
   2b6a0:	e7d4      	b.n	2b64c <hb_sub_send_status.constprop.0+0x8e>
		return 0xff;
   2b6a2:	21ff      	movs	r1, #255	; 0xff
   2b6a4:	e7d2      	b.n	2b64c <hb_sub_send_status.constprop.0+0x8e>

0002b6a6 <heartbeat_sub_get>:
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   2b6a6:	f7ff bf8a 	b.w	2b5be <hb_sub_send_status.constprop.0>

0002b6aa <heartbeat_sub_set>:
{
   2b6aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   2b6ae:	6985      	ldr	r5, [r0, #24]
{
   2b6b0:	4607      	mov	r7, r0
	sub_src = net_buf_simple_pull_le16(buf);
   2b6b2:	4610      	mov	r0, r2
{
   2b6b4:	4614      	mov	r4, r2
   2b6b6:	4688      	mov	r8, r1
	sub_src = net_buf_simple_pull_le16(buf);
   2b6b8:	f000 fd7b 	bl	2c1b2 <net_buf_simple_pull_le16>
   2b6bc:	4681      	mov	r9, r0
	sub_dst = net_buf_simple_pull_le16(buf);
   2b6be:	4620      	mov	r0, r4
   2b6c0:	f000 fd77 	bl	2c1b2 <net_buf_simple_pull_le16>
   2b6c4:	4606      	mov	r6, r0
	sub_period = net_buf_simple_pull_u8(buf);
   2b6c6:	4620      	mov	r0, r4
   2b6c8:	f000 fd6b 	bl	2c1a2 <net_buf_simple_pull_u8>
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   2b6cc:	f419 4f00 	tst.w	r9, #32768	; 0x8000
	sub_period = net_buf_simple_pull_u8(buf);
   2b6d0:	4604      	mov	r4, r0
	if (sub_src != BT_MESH_ADDR_UNASSIGNED &&
   2b6d2:	d10f      	bne.n	2b6f4 <heartbeat_sub_set+0x4a>
	if (BT_MESH_ADDR_IS_VIRTUAL(sub_dst) || BT_MESH_ADDR_IS_RFU(sub_dst) ||
   2b6d4:	f5a6 4300 	sub.w	r3, r6, #32768	; 0x8000
   2b6d8:	b29b      	uxth	r3, r3
   2b6da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2b6de:	d309      	bcc.n	2b6f4 <heartbeat_sub_set+0x4a>
   2b6e0:	f506 7380 	add.w	r3, r6, #256	; 0x100
   2b6e4:	b29b      	uxth	r3, r3
   2b6e6:	2bfb      	cmp	r3, #251	; 0xfb
   2b6e8:	d904      	bls.n	2b6f4 <heartbeat_sub_set+0x4a>
   2b6ea:	b233      	sxth	r3, r6
   2b6ec:	2b00      	cmp	r3, #0
   2b6ee:	dc03      	bgt.n	2b6f8 <heartbeat_sub_set+0x4e>
	if (sub_period > 0x11) {
   2b6f0:	2c11      	cmp	r4, #17
   2b6f2:	d906      	bls.n	2b702 <heartbeat_sub_set+0x58>
}
   2b6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	     sub_dst != bt_mesh_primary_addr())) {
   2b6f8:	f7e3 fdc4 	bl	f284 <bt_mesh_primary_addr>
	    (BT_MESH_ADDR_IS_UNICAST(sub_dst) &&
   2b6fc:	42b0      	cmp	r0, r6
   2b6fe:	d1f9      	bne.n	2b6f4 <heartbeat_sub_set+0x4a>
   2b700:	e7f6      	b.n	2b6f0 <heartbeat_sub_set+0x46>
	if (sub_src == BT_MESH_ADDR_UNASSIGNED ||
   2b702:	f1b9 0f00 	cmp.w	r9, #0
   2b706:	d00f      	beq.n	2b728 <heartbeat_sub_set+0x7e>
   2b708:	b176      	cbz	r6, 2b728 <heartbeat_sub_set+0x7e>
	    sub_dst == BT_MESH_ADDR_UNASSIGNED ||
   2b70a:	b194      	cbz	r4, 2b732 <heartbeat_sub_set+0x88>
		cfg->hb_sub.count = 0U;
   2b70c:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
		period_ms = hb_pwr2(sub_period, 1) * 1000U;
   2b710:	4620      	mov	r0, r4
		cfg->hb_sub.src = sub_src;
   2b712:	f8a5 9058 	strh.w	r9, [r5, #88]	; 0x58
		cfg->hb_sub.dst = sub_dst;
   2b716:	f8a5 605a 	strh.w	r6, [r5, #90]	; 0x5a
		cfg->hb_sub.count = 0U;
   2b71a:	65eb      	str	r3, [r5, #92]	; 0x5c
		period_ms = hb_pwr2(sub_period, 1) * 1000U;
   2b71c:	f7ff fdef 	bl	2b2fe <hb_pwr2.constprop.0>
   2b720:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   2b724:	4344      	muls	r4, r0
   2b726:	e004      	b.n	2b732 <heartbeat_sub_set+0x88>
			cfg->hb_sub.count = 0U;
   2b728:	2400      	movs	r4, #0
   2b72a:	f44f 03fe 	mov.w	r3, #8323072	; 0x7f0000
   2b72e:	e9c5 4316 	strd	r4, r3, [r5, #88]	; 0x58
	bt_mesh_set_hb_sub_dst(cfg->hb_sub.dst);
   2b732:	f8b5 005a 	ldrh.w	r0, [r5, #90]	; 0x5a
   2b736:	f7e2 ff7d 	bl	e634 <bt_mesh_set_hb_sub_dst>
	if (period_ms) {
   2b73a:	b1d4      	cbz	r4, 2b772 <heartbeat_sub_set+0xc8>
   2b73c:	f001 ffa3 	bl	2d686 <z_impl_k_uptime_ticks>
   2b740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2b744:	460a      	mov	r2, r1
   2b746:	fba0 0103 	umull	r0, r1, r0, r3
   2b74a:	fb03 1102 	mla	r1, r3, r2, r1
   2b74e:	0bc2      	lsrs	r2, r0, #15
   2b750:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   2b754:	0bcb      	lsrs	r3, r1, #15
		cfg->hb_sub.expiry = k_uptime_get() + period_ms;
   2b756:	1912      	adds	r2, r2, r4
   2b758:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
		cfg->hb_sub.expiry = 0;
   2b75c:	e9c5 2314 	strd	r2, r3, [r5, #80]	; 0x50
	hb_sub_send_status(model, ctx, STATUS_SUCCESS);
   2b760:	4641      	mov	r1, r8
   2b762:	4638      	mov	r0, r7
   2b764:	f7ff ff2b 	bl	2b5be <hb_sub_send_status.constprop.0>
	if (!period_ms) {
   2b768:	2c00      	cmp	r4, #0
   2b76a:	d1c3      	bne.n	2b6f4 <heartbeat_sub_set+0x4a>
		cfg->hb_sub.min_hops = 0U;
   2b76c:	f885 405e 	strb.w	r4, [r5, #94]	; 0x5e
   2b770:	e7c0      	b.n	2b6f4 <heartbeat_sub_set+0x4a>
		cfg->hb_sub.expiry = 0;
   2b772:	2200      	movs	r2, #0
   2b774:	2300      	movs	r3, #0
   2b776:	e7f1      	b.n	2b75c <heartbeat_sub_set+0xb2>

0002b778 <net_transmit_set>:
{
   2b778:	b530      	push	{r4, r5, lr}
   2b77a:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2b77c:	ab03      	add	r3, sp, #12
{
   2b77e:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2b780:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   2b784:	e9cd 1306 	strd	r1, r3, [sp, #24]
   2b788:	9305      	str	r3, [sp, #20]
	cfg->net_transmit = buf->data[0];
   2b78a:	6813      	ldr	r3, [r2, #0]
   2b78c:	781a      	ldrb	r2, [r3, #0]
   2b78e:	6983      	ldr	r3, [r0, #24]
   2b790:	711a      	strb	r2, [r3, #4]
{
   2b792:	4604      	mov	r4, r0
		bt_mesh_store_cfg();
   2b794:	f000 fab7 	bl	2bd06 <bt_mesh_store_cfg>
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   2b798:	f248 0125 	movw	r1, #32805	; 0x8025
   2b79c:	a805      	add	r0, sp, #20
   2b79e:	f7fe fe29 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   2b7a2:	f7e4 fac5 	bl	fd30 <bt_mesh_net_transmit_get>
   2b7a6:	4601      	mov	r1, r0
   2b7a8:	a805      	add	r0, sp, #20
   2b7aa:	f000 fc85 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b7ae:	2300      	movs	r3, #0
   2b7b0:	9300      	str	r3, [sp, #0]
   2b7b2:	aa05      	add	r2, sp, #20
   2b7b4:	4629      	mov	r1, r5
   2b7b6:	4620      	mov	r0, r4
   2b7b8:	f7fe fe45 	bl	2a446 <bt_mesh_model_send>
}
   2b7bc:	b009      	add	sp, #36	; 0x24
   2b7be:	bd30      	pop	{r4, r5, pc}

0002b7c0 <net_transmit_get>:
{
   2b7c0:	b530      	push	{r4, r5, lr}
   2b7c2:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2b7c4:	ab03      	add	r3, sp, #12
   2b7c6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2b7ca:	4604      	mov	r4, r0
   2b7cc:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   2b7ce:	a805      	add	r0, sp, #20
   2b7d0:	f248 0125 	movw	r1, #32805	; 0x8025
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_NET_TRANSMIT_STATUS, 1);
   2b7d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b7d8:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_NET_TRANSMIT_STATUS);
   2b7da:	f7fe fe0b 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_net_transmit_get());
   2b7de:	f7e4 faa7 	bl	fd30 <bt_mesh_net_transmit_get>
   2b7e2:	4601      	mov	r1, r0
   2b7e4:	a805      	add	r0, sp, #20
   2b7e6:	f000 fc67 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b7ea:	2300      	movs	r3, #0
   2b7ec:	9300      	str	r3, [sp, #0]
   2b7ee:	aa05      	add	r2, sp, #20
   2b7f0:	4629      	mov	r1, r5
   2b7f2:	4620      	mov	r0, r4
   2b7f4:	f7fe fe27 	bl	2a446 <bt_mesh_model_send>
}
   2b7f8:	b009      	add	sp, #36	; 0x24
   2b7fa:	bd30      	pop	{r4, r5, pc}

0002b7fc <relay_set>:
{
   2b7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b7fe:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2b800:	ab03      	add	r3, sp, #12
{
   2b802:	460f      	mov	r7, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2b804:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   2b808:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   2b80c:	6812      	ldr	r2, [r2, #0]
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2b80e:	9305      	str	r3, [sp, #20]
	if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   2b810:	7813      	ldrb	r3, [r2, #0]
   2b812:	2b01      	cmp	r3, #1
{
   2b814:	4605      	mov	r5, r0
	if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   2b816:	d82c      	bhi.n	2b872 <relay_set+0x76>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   2b818:	6986      	ldr	r6, [r0, #24]
		if (cfg->relay == BT_MESH_RELAY_NOT_SUPPORTED) {
   2b81a:	7974      	ldrb	r4, [r6, #5]
   2b81c:	2c02      	cmp	r4, #2
   2b81e:	d02a      	beq.n	2b876 <relay_set+0x7a>
			cfg->relay = buf->data[0];
   2b820:	7173      	strb	r3, [r6, #5]
			change = (cfg->relay != buf->data[0]);
   2b822:	1b1c      	subs	r4, r3, r4
			cfg->relay_retransmit = buf->data[1];
   2b824:	7853      	ldrb	r3, [r2, #1]
   2b826:	71b3      	strb	r3, [r6, #6]
			change = (cfg->relay != buf->data[0]);
   2b828:	bf18      	it	ne
   2b82a:	2401      	movne	r4, #1
				bt_mesh_store_cfg();
   2b82c:	f000 fa6b 	bl	2bd06 <bt_mesh_store_cfg>
		if ((cfg->hb_pub.feat & BT_MESH_FEAT_RELAY) && change) {
   2b830:	f8b6 3046 	ldrh.w	r3, [r6, #70]	; 0x46
   2b834:	07db      	lsls	r3, r3, #31
   2b836:	d504      	bpl.n	2b842 <relay_set+0x46>
   2b838:	b11c      	cbz	r4, 2b842 <relay_set+0x46>
			(void)bt_mesh_heartbeat_send(NULL, NULL);
   2b83a:	2100      	movs	r1, #0
   2b83c:	4608      	mov	r0, r1
   2b83e:	f7fe fb94 	bl	29f6a <bt_mesh_heartbeat_send>
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   2b842:	f248 0128 	movw	r1, #32808	; 0x8028
   2b846:	a805      	add	r0, sp, #20
   2b848:	f7fe fdd4 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   2b84c:	f7e4 fa78 	bl	fd40 <bt_mesh_relay_get>
   2b850:	4601      	mov	r1, r0
   2b852:	a805      	add	r0, sp, #20
   2b854:	f000 fc30 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   2b858:	f7e4 fa86 	bl	fd68 <bt_mesh_relay_retransmit_get>
   2b85c:	4601      	mov	r1, r0
   2b85e:	a805      	add	r0, sp, #20
   2b860:	f000 fc2a 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b864:	2300      	movs	r3, #0
   2b866:	9300      	str	r3, [sp, #0]
   2b868:	aa05      	add	r2, sp, #20
   2b86a:	4639      	mov	r1, r7
   2b86c:	4628      	mov	r0, r5
   2b86e:	f7fe fdea 	bl	2a446 <bt_mesh_model_send>
}
   2b872:	b009      	add	sp, #36	; 0x24
   2b874:	bdf0      	pop	{r4, r5, r6, r7, pc}
			change = false;
   2b876:	2400      	movs	r4, #0
   2b878:	e7da      	b.n	2b830 <relay_set+0x34>

0002b87a <relay_get>:
{
   2b87a:	b530      	push	{r4, r5, lr}
   2b87c:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2b87e:	ab03      	add	r3, sp, #12
   2b880:	f44f 2200 	mov.w	r2, #524288	; 0x80000
{
   2b884:	4604      	mov	r4, r0
   2b886:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   2b888:	a805      	add	r0, sp, #20
   2b88a:	f248 0128 	movw	r1, #32808	; 0x8028
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_RELAY_STATUS, 2);
   2b88e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b892:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_RELAY_STATUS);
   2b894:	f7fe fdae 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_get());
   2b898:	f7e4 fa52 	bl	fd40 <bt_mesh_relay_get>
   2b89c:	4601      	mov	r1, r0
   2b89e:	a805      	add	r0, sp, #20
   2b8a0:	f000 fc0a 	bl	2c0b8 <net_buf_simple_add_u8>
	net_buf_simple_add_u8(&msg, bt_mesh_relay_retransmit_get());
   2b8a4:	f7e4 fa60 	bl	fd68 <bt_mesh_relay_retransmit_get>
   2b8a8:	4601      	mov	r1, r0
   2b8aa:	a805      	add	r0, sp, #20
   2b8ac:	f000 fc04 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b8b0:	2300      	movs	r3, #0
   2b8b2:	9300      	str	r3, [sp, #0]
   2b8b4:	aa05      	add	r2, sp, #20
   2b8b6:	4629      	mov	r1, r5
   2b8b8:	4620      	mov	r0, r4
   2b8ba:	f7fe fdc4 	bl	2a446 <bt_mesh_model_send>
}
   2b8be:	b009      	add	sp, #36	; 0x24
   2b8c0:	bd30      	pop	{r4, r5, pc}

0002b8c2 <beacon_set>:
{
   2b8c2:	b570      	push	{r4, r5, r6, lr}
   2b8c4:	b088      	sub	sp, #32
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   2b8c6:	ab03      	add	r3, sp, #12
{
   2b8c8:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   2b8ca:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   2b8ce:	e9cd 1306 	strd	r1, r3, [sp, #24]
   2b8d2:	9305      	str	r3, [sp, #20]
	if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   2b8d4:	6813      	ldr	r3, [r2, #0]
   2b8d6:	781b      	ldrb	r3, [r3, #0]
   2b8d8:	2b01      	cmp	r3, #1
{
   2b8da:	4604      	mov	r4, r0
	if (buf->data[0] == 0x00 || buf->data[0] == 0x01) {
   2b8dc:	d81c      	bhi.n	2b918 <beacon_set+0x56>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   2b8de:	6986      	ldr	r6, [r0, #24]
		if (buf->data[0] != cfg->beacon) {
   2b8e0:	79f2      	ldrb	r2, [r6, #7]
   2b8e2:	429a      	cmp	r2, r3
   2b8e4:	d006      	beq.n	2b8f4 <beacon_set+0x32>
			cfg->beacon = buf->data[0];
   2b8e6:	71f3      	strb	r3, [r6, #7]
				bt_mesh_store_cfg();
   2b8e8:	f000 fa0d 	bl	2bd06 <bt_mesh_store_cfg>
			if (cfg->beacon) {
   2b8ec:	79f3      	ldrb	r3, [r6, #7]
   2b8ee:	b1ab      	cbz	r3, 2b91c <beacon_set+0x5a>
				bt_mesh_beacon_enable();
   2b8f0:	f7e1 faa4 	bl	ce3c <bt_mesh_beacon_enable>
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   2b8f4:	f248 010b 	movw	r1, #32779	; 0x800b
   2b8f8:	a805      	add	r0, sp, #20
   2b8fa:	f7fe fd7b 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   2b8fe:	f7e4 fa3b 	bl	fd78 <bt_mesh_beacon_get>
   2b902:	4601      	mov	r1, r0
   2b904:	a805      	add	r0, sp, #20
   2b906:	f000 fbd7 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b90a:	2300      	movs	r3, #0
   2b90c:	9300      	str	r3, [sp, #0]
   2b90e:	aa05      	add	r2, sp, #20
   2b910:	4629      	mov	r1, r5
   2b912:	4620      	mov	r0, r4
   2b914:	f7fe fd97 	bl	2a446 <bt_mesh_model_send>
}
   2b918:	b008      	add	sp, #32
   2b91a:	bd70      	pop	{r4, r5, r6, pc}
				bt_mesh_beacon_disable();
   2b91c:	f7e1 fa9c 	bl	ce58 <bt_mesh_beacon_disable>
   2b920:	e7e8      	b.n	2b8f4 <beacon_set+0x32>

0002b922 <beacon_get>:
{
   2b922:	b530      	push	{r4, r5, lr}
   2b924:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   2b926:	ab03      	add	r3, sp, #12
   2b928:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2b92c:	4604      	mov	r4, r0
   2b92e:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   2b930:	a805      	add	r0, sp, #20
   2b932:	f248 010b 	movw	r1, #32779	; 0x800b
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_BEACON_STATUS, 1);
   2b936:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b93a:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_BEACON_STATUS);
   2b93c:	f7fe fd5a 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_beacon_get());
   2b940:	f7e4 fa1a 	bl	fd78 <bt_mesh_beacon_get>
   2b944:	4601      	mov	r1, r0
   2b946:	a805      	add	r0, sp, #20
   2b948:	f000 fbb6 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b94c:	2300      	movs	r3, #0
   2b94e:	9300      	str	r3, [sp, #0]
   2b950:	aa05      	add	r2, sp, #20
   2b952:	4629      	mov	r1, r5
   2b954:	4620      	mov	r0, r4
   2b956:	f7fe fd76 	bl	2a446 <bt_mesh_model_send>
}
   2b95a:	b009      	add	sp, #36	; 0x24
   2b95c:	bd30      	pop	{r4, r5, pc}

0002b95e <send_gatt_proxy_status>:
{
   2b95e:	b530      	push	{r4, r5, lr}
   2b960:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   2b962:	ab03      	add	r3, sp, #12
   2b964:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2b968:	4604      	mov	r4, r0
   2b96a:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   2b96c:	a805      	add	r0, sp, #20
   2b96e:	f248 0114 	movw	r1, #32788	; 0x8014
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_GATT_PROXY_STATUS, 1);
   2b972:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2b976:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_GATT_PROXY_STATUS);
   2b978:	f7fe fd3c 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_gatt_proxy_get());
   2b97c:	f7e4 fa04 	bl	fd88 <bt_mesh_gatt_proxy_get>
   2b980:	4601      	mov	r1, r0
   2b982:	a805      	add	r0, sp, #20
   2b984:	f000 fb98 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b988:	2300      	movs	r3, #0
   2b98a:	9300      	str	r3, [sp, #0]
   2b98c:	aa05      	add	r2, sp, #20
   2b98e:	4629      	mov	r1, r5
   2b990:	4620      	mov	r0, r4
   2b992:	f7fe fd58 	bl	2a446 <bt_mesh_model_send>
}
   2b996:	b009      	add	sp, #36	; 0x24
   2b998:	bd30      	pop	{r4, r5, pc}

0002b99a <gatt_proxy_set>:
	if (buf->data[0] != 0x00 && buf->data[0] != 0x01) {
   2b99a:	6813      	ldr	r3, [r2, #0]
   2b99c:	781b      	ldrb	r3, [r3, #0]
   2b99e:	2b01      	cmp	r3, #1
   2b9a0:	d801      	bhi.n	2b9a6 <gatt_proxy_set+0xc>
	send_gatt_proxy_status(model, ctx);
   2b9a2:	f7ff bfdc 	b.w	2b95e <send_gatt_proxy_status>
}
   2b9a6:	4770      	bx	lr

0002b9a8 <gatt_proxy_get>:
	send_gatt_proxy_status(model, ctx);
   2b9a8:	f7ff bfd9 	b.w	2b95e <send_gatt_proxy_status>

0002b9ac <default_ttl_set>:
{
   2b9ac:	b530      	push	{r4, r5, lr}
   2b9ae:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   2b9b0:	ab03      	add	r3, sp, #12
{
   2b9b2:	460d      	mov	r5, r1
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   2b9b4:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
   2b9b8:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
   2b9bc:	6812      	ldr	r2, [r2, #0]
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   2b9be:	9305      	str	r3, [sp, #20]
	if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
   2b9c0:	7813      	ldrb	r3, [r2, #0]
   2b9c2:	f992 2000 	ldrsb.w	r2, [r2]
   2b9c6:	2a00      	cmp	r2, #0
{
   2b9c8:	4604      	mov	r4, r0
	if (buf->data[0] <= BT_MESH_TTL_MAX && buf->data[0] != 0x01) {
   2b9ca:	db1a      	blt.n	2ba02 <default_ttl_set+0x56>
   2b9cc:	2b01      	cmp	r3, #1
   2b9ce:	d018      	beq.n	2ba02 <default_ttl_set+0x56>
	struct bt_mesh_cfg_srv *cfg = model->user_data;
   2b9d0:	6982      	ldr	r2, [r0, #24]
		if (cfg->default_ttl != buf->data[0]) {
   2b9d2:	7a91      	ldrb	r1, [r2, #10]
   2b9d4:	4299      	cmp	r1, r3
   2b9d6:	d002      	beq.n	2b9de <default_ttl_set+0x32>
			cfg->default_ttl = buf->data[0];
   2b9d8:	7293      	strb	r3, [r2, #10]
				bt_mesh_store_cfg();
   2b9da:	f000 f994 	bl	2bd06 <bt_mesh_store_cfg>
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   2b9de:	f248 010e 	movw	r1, #32782	; 0x800e
   2b9e2:	a805      	add	r0, sp, #20
   2b9e4:	f7fe fd06 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   2b9e8:	f7e4 f9d8 	bl	fd9c <bt_mesh_default_ttl_get>
   2b9ec:	4601      	mov	r1, r0
   2b9ee:	a805      	add	r0, sp, #20
   2b9f0:	f000 fb62 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2b9f4:	2300      	movs	r3, #0
   2b9f6:	9300      	str	r3, [sp, #0]
   2b9f8:	aa05      	add	r2, sp, #20
   2b9fa:	4629      	mov	r1, r5
   2b9fc:	4620      	mov	r0, r4
   2b9fe:	f7fe fd22 	bl	2a446 <bt_mesh_model_send>
}
   2ba02:	b009      	add	sp, #36	; 0x24
   2ba04:	bd30      	pop	{r4, r5, pc}

0002ba06 <default_ttl_get>:
{
   2ba06:	b530      	push	{r4, r5, lr}
   2ba08:	b089      	sub	sp, #36	; 0x24
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   2ba0a:	ab03      	add	r3, sp, #12
   2ba0c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
{
   2ba10:	4604      	mov	r4, r0
   2ba12:	460d      	mov	r5, r1
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   2ba14:	a805      	add	r0, sp, #20
   2ba16:	f248 010e 	movw	r1, #32782	; 0x800e
	BT_MESH_MODEL_BUF_DEFINE(msg, OP_DEFAULT_TTL_STATUS, 1);
   2ba1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2ba1e:	9305      	str	r3, [sp, #20]
	bt_mesh_model_msg_init(&msg, OP_DEFAULT_TTL_STATUS);
   2ba20:	f7fe fce8 	bl	2a3f4 <bt_mesh_model_msg_init>
	net_buf_simple_add_u8(&msg, bt_mesh_default_ttl_get());
   2ba24:	f7e4 f9ba 	bl	fd9c <bt_mesh_default_ttl_get>
   2ba28:	4601      	mov	r1, r0
   2ba2a:	a805      	add	r0, sp, #20
   2ba2c:	f000 fb44 	bl	2c0b8 <net_buf_simple_add_u8>
	if (bt_mesh_model_send(model, ctx, &msg, NULL, NULL)) {
   2ba30:	2300      	movs	r3, #0
   2ba32:	9300      	str	r3, [sp, #0]
   2ba34:	aa05      	add	r2, sp, #20
   2ba36:	4629      	mov	r1, r5
   2ba38:	4620      	mov	r0, r4
   2ba3a:	f7fe fd04 	bl	2a446 <bt_mesh_model_send>
}
   2ba3e:	b009      	add	sp, #36	; 0x24
   2ba40:	bd30      	pop	{r4, r5, pc}

0002ba42 <mesh_x_set>:
{
   2ba42:	b538      	push	{r3, r4, r5, lr}
   2ba44:	4605      	mov	r5, r0
   2ba46:	4608      	mov	r0, r1
   2ba48:	4611      	mov	r1, r2
	len = read_cb(cb_arg, out, read_len);
   2ba4a:	461a      	mov	r2, r3
{
   2ba4c:	461c      	mov	r4, r3
	len = read_cb(cb_arg, out, read_len);
   2ba4e:	47a8      	blx	r5
	if (len < 0) {
   2ba50:	2800      	cmp	r0, #0
   2ba52:	db04      	blt.n	2ba5e <mesh_x_set+0x1c>
	if (len != read_len) {
   2ba54:	4284      	cmp	r4, r0
		return -EINVAL;
   2ba56:	bf0c      	ite	eq
   2ba58:	2000      	moveq	r0, #0
   2ba5a:	f06f 0015 	mvnne.w	r0, #21
}
   2ba5e:	bd38      	pop	{r3, r4, r5, pc}

0002ba60 <atomic_or>:
{
   2ba60:	4603      	mov	r3, r0
}
   2ba62:	f3bf 8f5b 	dmb	ish
   2ba66:	e853 0f00 	ldrex	r0, [r3]
   2ba6a:	ea40 0201 	orr.w	r2, r0, r1
   2ba6e:	e843 2c00 	strex	ip, r2, [r3]
   2ba72:	f1bc 0f00 	cmp.w	ip, #0
   2ba76:	d1f6      	bne.n	2ba66 <atomic_or+0x6>
   2ba78:	f3bf 8f5b 	dmb	ish
   2ba7c:	4770      	bx	lr

0002ba7e <hb_pub_set>:
{
   2ba7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ba80:	460c      	mov	r4, r1
   2ba82:	4616      	mov	r6, r2
   2ba84:	461f      	mov	r7, r3
	struct bt_mesh_hb_pub *pub = bt_mesh_hb_pub_get();
   2ba86:	f7e4 f993 	bl	fdb0 <bt_mesh_hb_pub_get>
	if (!pub) {
   2ba8a:	4605      	mov	r5, r0
   2ba8c:	b320      	cbz	r0, 2bad8 <hb_pub_set+0x5a>
	if (len_rd == 0) {
   2ba8e:	b924      	cbnz	r4, 2ba9a <hb_pub_set+0x1c>
		pub->period = 0U;
   2ba90:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
		return 0;
   2ba94:	4620      	mov	r0, r4
}
   2ba96:	b003      	add	sp, #12
   2ba98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = mesh_x_set(read_cb, cb_arg, &hb_val, sizeof(hb_val));
   2ba9a:	2308      	movs	r3, #8
   2ba9c:	466a      	mov	r2, sp
   2ba9e:	4639      	mov	r1, r7
   2baa0:	4630      	mov	r0, r6
   2baa2:	f7ff ffce 	bl	2ba42 <mesh_x_set>
	if (err) {
   2baa6:	2800      	cmp	r0, #0
   2baa8:	d1f5      	bne.n	2ba96 <hb_pub_set+0x18>
	pub->dst = hb_val.dst;
   2baaa:	f8bd 3000 	ldrh.w	r3, [sp]
   2baae:	862b      	strh	r3, [r5, #48]	; 0x30
	pub->feat = hb_val.feat;
   2bab0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2bab4:	86eb      	strh	r3, [r5, #54]	; 0x36
	pub->net_idx = hb_val.net_idx;
   2bab6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	pub->period = hb_val.period;
   2baba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   2babe:	86aa      	strh	r2, [r5, #52]	; 0x34
	pub->net_idx = hb_val.net_idx;
   2bac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2bac4:	872b      	strh	r3, [r5, #56]	; 0x38
	if (hb_val.indefinite) {
   2bac6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2baca:	06db      	lsls	r3, r3, #27
		pub->count = 0xffff;
   2bacc:	bf46      	itte	mi
   2bace:	f64f 73ff 	movwmi	r3, #65535	; 0xffff
   2bad2:	866b      	strhmi	r3, [r5, #50]	; 0x32
		pub->count = 0U;
   2bad4:	8668      	strhpl	r0, [r5, #50]	; 0x32
   2bad6:	e7de      	b.n	2ba96 <hb_pub_set+0x18>
		return -ENOENT;
   2bad8:	f06f 0001 	mvn.w	r0, #1
   2badc:	e7db      	b.n	2ba96 <hb_pub_set+0x18>

0002bade <app_key_set>:
{
   2bade:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bae0:	460c      	mov	r4, r1
   2bae2:	b08b      	sub	sp, #44	; 0x2c
   2bae4:	4616      	mov	r6, r2
   2bae6:	461f      	mov	r7, r3
	if (!name) {
   2bae8:	b1c8      	cbz	r0, 2bb1e <app_key_set+0x40>
	app_idx = strtol(name, NULL, 16);
   2baea:	2210      	movs	r2, #16
   2baec:	2100      	movs	r1, #0
   2baee:	f7fa fe7c 	bl	267ea <strtol>
   2baf2:	4605      	mov	r5, r0
	if (!len_rd) {
   2baf4:	b1b4      	cbz	r4, 2bb24 <app_key_set+0x46>
	len_rd = read_cb(cb_arg, &key, sizeof(key));
   2baf6:	2223      	movs	r2, #35	; 0x23
   2baf8:	a901      	add	r1, sp, #4
   2bafa:	4638      	mov	r0, r7
   2bafc:	47b0      	blx	r6
	if (len_rd != sizeof(key)) {
   2bafe:	2823      	cmp	r0, #35	; 0x23
   2bb00:	d112      	bne.n	2bb28 <app_key_set+0x4a>
	err = bt_mesh_app_key_set(app_idx, key.net_idx, key.val[0],
   2bb02:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2bb06:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2bb0a:	b10b      	cbz	r3, 2bb10 <app_key_set+0x32>
   2bb0c:	f10d 0317 	add.w	r3, sp, #23
   2bb10:	f10d 0207 	add.w	r2, sp, #7
   2bb14:	b2a8      	uxth	r0, r5
   2bb16:	f7e2 f8b3 	bl	dc80 <bt_mesh_app_key_set>
}
   2bb1a:	b00b      	add	sp, #44	; 0x2c
   2bb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOENT;
   2bb1e:	f06f 0001 	mvn.w	r0, #1
   2bb22:	e7fa      	b.n	2bb1a <app_key_set+0x3c>
		return 0;
   2bb24:	4620      	mov	r0, r4
   2bb26:	e7f8      	b.n	2bb1a <app_key_set+0x3c>
		return -EINVAL;
   2bb28:	f06f 0015 	mvn.w	r0, #21
   2bb2c:	e7f5      	b.n	2bb1a <app_key_set+0x3c>

0002bb2e <net_key_set>:
{
   2bb2e:	b570      	push	{r4, r5, r6, lr}
   2bb30:	4615      	mov	r5, r2
   2bb32:	b08a      	sub	sp, #40	; 0x28
   2bb34:	461e      	mov	r6, r3
	if (!name) {
   2bb36:	b1d0      	cbz	r0, 2bb6e <net_key_set+0x40>
	net_idx = strtol(name, NULL, 16);
   2bb38:	2210      	movs	r2, #16
   2bb3a:	2100      	movs	r1, #0
   2bb3c:	f7fa fe55 	bl	267ea <strtol>
	err = mesh_x_set(read_cb, cb_arg, &key, sizeof(key));
   2bb40:	2321      	movs	r3, #33	; 0x21
	net_idx = strtol(name, NULL, 16);
   2bb42:	4604      	mov	r4, r0
	err = mesh_x_set(read_cb, cb_arg, &key, sizeof(key));
   2bb44:	aa01      	add	r2, sp, #4
   2bb46:	4631      	mov	r1, r6
   2bb48:	4628      	mov	r0, r5
   2bb4a:	f7ff ff7a 	bl	2ba42 <mesh_x_set>
	if (err) {
   2bb4e:	b960      	cbnz	r0, 2bb6a <net_key_set+0x3c>
		net_idx, key.kr_phase, key.val[0],
   2bb50:	f89d 3004 	ldrb.w	r3, [sp, #4]
	return bt_mesh_subnet_set(
   2bb54:	0859      	lsrs	r1, r3, #1
   2bb56:	f013 03fe 	ands.w	r3, r3, #254	; 0xfe
   2bb5a:	bf18      	it	ne
   2bb5c:	f10d 0315 	addne.w	r3, sp, #21
   2bb60:	f10d 0205 	add.w	r2, sp, #5
   2bb64:	b2a0      	uxth	r0, r4
   2bb66:	f7e1 fedf 	bl	d928 <bt_mesh_subnet_set>
}
   2bb6a:	b00a      	add	sp, #40	; 0x28
   2bb6c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   2bb6e:	f06f 0001 	mvn.w	r0, #1
   2bb72:	e7fa      	b.n	2bb6a <net_key_set+0x3c>

0002bb74 <rpl_set>:
{
   2bb74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2bb78:	460c      	mov	r4, r1
   2bb7a:	4617      	mov	r7, r2
   2bb7c:	4698      	mov	r8, r3
	if (!name) {
   2bb7e:	b358      	cbz	r0, 2bbd8 <rpl_set+0x64>
	src = strtol(name, NULL, 16);
   2bb80:	2210      	movs	r2, #16
   2bb82:	2100      	movs	r1, #0
   2bb84:	f7fa fe31 	bl	267ea <strtol>
   2bb88:	b286      	uxth	r6, r0
	entry = bt_mesh_rpl_find(src);
   2bb8a:	4630      	mov	r0, r6
   2bb8c:	f7e3 f8dc 	bl	ed48 <bt_mesh_rpl_find>
   2bb90:	4605      	mov	r5, r0
	if (len_rd == 0) {
   2bb92:	b944      	cbnz	r4, 2bba6 <rpl_set+0x32>
		if (entry) {
   2bb94:	b120      	cbz	r0, 2bba0 <rpl_set+0x2c>
			(void)memset(entry, 0, sizeof(*entry));
   2bb96:	2208      	movs	r2, #8
   2bb98:	4621      	mov	r1, r4
   2bb9a:	f7fa ff2d 	bl	269f8 <memset>
		return 0;
   2bb9e:	4620      	mov	r0, r4
}
   2bba0:	b002      	add	sp, #8
   2bba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!entry) {
   2bba6:	b920      	cbnz	r0, 2bbb2 <rpl_set+0x3e>
		entry = bt_mesh_rpl_alloc(src);
   2bba8:	4630      	mov	r0, r6
   2bbaa:	f7e3 f8dd 	bl	ed68 <bt_mesh_rpl_alloc>
		if (!entry) {
   2bbae:	4605      	mov	r5, r0
   2bbb0:	b1a8      	cbz	r0, 2bbde <rpl_set+0x6a>
	err = mesh_x_set(read_cb, cb_arg, &rpl, sizeof(rpl));
   2bbb2:	2304      	movs	r3, #4
   2bbb4:	eb0d 0203 	add.w	r2, sp, r3
   2bbb8:	4641      	mov	r1, r8
   2bbba:	4638      	mov	r0, r7
   2bbbc:	f7ff ff41 	bl	2ba42 <mesh_x_set>
	if (err) {
   2bbc0:	2800      	cmp	r0, #0
   2bbc2:	d1ed      	bne.n	2bba0 <rpl_set+0x2c>
	entry->seq = rpl.seq;
   2bbc4:	9b01      	ldr	r3, [sp, #4]
   2bbc6:	f3c3 0317 	ubfx	r3, r3, #0, #24
   2bbca:	606b      	str	r3, [r5, #4]
	entry->old_iv = rpl.old_iv;
   2bbcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2bbd0:	f3c3 0300 	ubfx	r3, r3, #0, #1
   2bbd4:	70ab      	strb	r3, [r5, #2]
	return 0;
   2bbd6:	e7e3      	b.n	2bba0 <rpl_set+0x2c>
		return -ENOENT;
   2bbd8:	f06f 0001 	mvn.w	r0, #1
   2bbdc:	e7e0      	b.n	2bba0 <rpl_set+0x2c>
			return -ENOMEM;
   2bbde:	f06f 000b 	mvn.w	r0, #11
   2bbe2:	e7dd      	b.n	2bba0 <rpl_set+0x2c>

0002bbe4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bbe4:	f3bf 8f5b 	dmb	ish
   2bbe8:	6800      	ldr	r0, [r0, #0]
   2bbea:	f3bf 8f5b 	dmb	ish
}
   2bbee:	4770      	bx	lr

0002bbf0 <vnd_mod_set>:
{
   2bbf0:	b507      	push	{r0, r1, r2, lr}
	return mod_set(true, name, len_rd, read_cb, cb_arg);
   2bbf2:	9300      	str	r3, [sp, #0]
   2bbf4:	4613      	mov	r3, r2
   2bbf6:	460a      	mov	r2, r1
   2bbf8:	4601      	mov	r1, r0
   2bbfa:	2001      	movs	r0, #1
   2bbfc:	f7e4 face 	bl	1019c <mod_set>
}
   2bc00:	b003      	add	sp, #12
   2bc02:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc06 <sig_mod_set>:
{
   2bc06:	b507      	push	{r0, r1, r2, lr}
	return mod_set(false, name, len_rd, read_cb, cb_arg);
   2bc08:	9300      	str	r3, [sp, #0]
   2bc0a:	4613      	mov	r3, r2
   2bc0c:	460a      	mov	r2, r1
   2bc0e:	4601      	mov	r1, r0
   2bc10:	2000      	movs	r0, #0
   2bc12:	f7e4 fac3 	bl	1019c <mod_set>
}
   2bc16:	b003      	add	sp, #12
   2bc18:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc1c <atomic_test_and_clear_bit>:
{
   2bc1c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2bc1e:	2301      	movs	r3, #1
   2bc20:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2bc24:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bc26:	f3bf 8f5b 	dmb	ish
   2bc2a:	e850 3f00 	ldrex	r3, [r0]
   2bc2e:	ea03 0c02 	and.w	ip, r3, r2
   2bc32:	e840 ce00 	strex	lr, ip, [r0]
   2bc36:	f1be 0f00 	cmp.w	lr, #0
   2bc3a:	d1f6      	bne.n	2bc2a <atomic_test_and_clear_bit+0xe>
   2bc3c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2bc40:	420b      	tst	r3, r1
}
   2bc42:	bf14      	ite	ne
   2bc44:	2001      	movne	r0, #1
   2bc46:	2000      	moveq	r0, #0
   2bc48:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc4c <bt_mesh_store_net>:
	schedule_store(BT_MESH_NET_PENDING);
   2bc4c:	2008      	movs	r0, #8
   2bc4e:	f7e4 bdb9 	b.w	107c4 <schedule_store>

0002bc52 <bt_mesh_store_iv>:
{
   2bc52:	b510      	push	{r4, lr}
   2bc54:	4604      	mov	r4, r0
	schedule_store(BT_MESH_IV_PENDING);
   2bc56:	2009      	movs	r0, #9
   2bc58:	f7e4 fdb4 	bl	107c4 <schedule_store>
	if (!only_duration) {
   2bc5c:	b924      	cbnz	r4, 2bc68 <bt_mesh_store_iv+0x16>
}
   2bc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		schedule_store(BT_MESH_SEQ_PENDING);
   2bc62:	200a      	movs	r0, #10
   2bc64:	f7e4 bdae 	b.w	107c4 <schedule_store>
}
   2bc68:	bd10      	pop	{r4, pc}

0002bc6a <bt_mesh_store_rpl>:
	entry->store = true;
   2bc6a:	2301      	movs	r3, #1
   2bc6c:	70c3      	strb	r3, [r0, #3]
	schedule_store(BT_MESH_RPL_PENDING);
   2bc6e:	2006      	movs	r0, #6
   2bc70:	f7e4 bda8 	b.w	107c4 <schedule_store>

0002bc74 <bt_mesh_store_subnet>:
{
   2bc74:	b507      	push	{r0, r1, r2, lr}
   2bc76:	4601      	mov	r1, r0
	update = key_update_find(false, net_idx, &free_slot);
   2bc78:	aa01      	add	r2, sp, #4
   2bc7a:	2000      	movs	r0, #0
   2bc7c:	f7e4 f8e0 	bl	fe40 <key_update_find>
	if (update) {
   2bc80:	b138      	cbz	r0, 2bc92 <bt_mesh_store_subnet+0x1e>
		update->clear = 0U;
   2bc82:	7843      	ldrb	r3, [r0, #1]
   2bc84:	f36f 1386 	bfc	r3, #6, #1
   2bc88:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   2bc8a:	2007      	movs	r0, #7
   2bc8c:	f7e4 fd9a 	bl	107c4 <schedule_store>
   2bc90:	e004      	b.n	2bc9c <bt_mesh_store_subnet+0x28>
	if (!free_slot) {
   2bc92:	9a01      	ldr	r2, [sp, #4]
   2bc94:	b92a      	cbnz	r2, 2bca2 <bt_mesh_store_subnet+0x2e>
		store_subnet(net_idx);
   2bc96:	4608      	mov	r0, r1
   2bc98:	f7e4 f988 	bl	ffac <store_subnet>
}
   2bc9c:	b003      	add	sp, #12
   2bc9e:	f85d fb04 	ldr.w	pc, [sp], #4
	free_slot->key_idx = net_idx;
   2bca2:	8813      	ldrh	r3, [r2, #0]
   2bca4:	f3c1 010b 	ubfx	r1, r1, #0, #12
   2bca8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   2bcac:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
   2bcb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   2bcb4:	4319      	orrs	r1, r3
   2bcb6:	8011      	strh	r1, [r2, #0]
   2bcb8:	e7e7      	b.n	2bc8a <bt_mesh_store_subnet+0x16>

0002bcba <bt_mesh_store_app_key>:
{
   2bcba:	b507      	push	{r0, r1, r2, lr}
   2bcbc:	4601      	mov	r1, r0
	update = key_update_find(true, app_idx, &free_slot);
   2bcbe:	aa01      	add	r2, sp, #4
   2bcc0:	2001      	movs	r0, #1
   2bcc2:	f7e4 f8bd 	bl	fe40 <key_update_find>
	if (update) {
   2bcc6:	b138      	cbz	r0, 2bcd8 <bt_mesh_store_app_key+0x1e>
		update->clear = 0U;
   2bcc8:	7843      	ldrb	r3, [r0, #1]
   2bcca:	f36f 1386 	bfc	r3, #6, #1
   2bcce:	7043      	strb	r3, [r0, #1]
	schedule_store(BT_MESH_KEYS_PENDING);
   2bcd0:	2007      	movs	r0, #7
   2bcd2:	f7e4 fd77 	bl	107c4 <schedule_store>
   2bcd6:	e004      	b.n	2bce2 <bt_mesh_store_app_key+0x28>
	if (!free_slot) {
   2bcd8:	9a01      	ldr	r2, [sp, #4]
   2bcda:	b92a      	cbnz	r2, 2bce8 <bt_mesh_store_app_key+0x2e>
		store_app(app_idx);
   2bcdc:	4608      	mov	r0, r1
   2bcde:	f7e4 f9fb 	bl	100d8 <store_app>
}
   2bce2:	b003      	add	sp, #12
   2bce4:	f85d fb04 	ldr.w	pc, [sp], #4
	free_slot->key_idx = app_idx;
   2bce8:	8813      	ldrh	r3, [r2, #0]
   2bcea:	f3c1 010b 	ubfx	r1, r1, #0, #12
   2bcee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
   2bcf2:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
   2bcf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   2bcfa:	4319      	orrs	r1, r3
   2bcfc:	8011      	strh	r1, [r2, #0]
   2bcfe:	e7e7      	b.n	2bcd0 <bt_mesh_store_app_key+0x16>

0002bd00 <bt_mesh_store_hb_pub>:
	schedule_store(BT_MESH_HB_PUB_PENDING);
   2bd00:	200b      	movs	r0, #11
   2bd02:	f7e4 bd5f 	b.w	107c4 <schedule_store>

0002bd06 <bt_mesh_store_cfg>:
	schedule_store(BT_MESH_CFG_PENDING);
   2bd06:	200c      	movs	r0, #12
   2bd08:	f7e4 bd5c 	b.w	107c4 <schedule_store>

0002bd0c <bt_mesh_clear_net>:
{
   2bd0c:	b508      	push	{r3, lr}
	schedule_store(BT_MESH_NET_PENDING);
   2bd0e:	2008      	movs	r0, #8
   2bd10:	f7e4 fd58 	bl	107c4 <schedule_store>
	schedule_store(BT_MESH_IV_PENDING);
   2bd14:	2009      	movs	r0, #9
   2bd16:	f7e4 fd55 	bl	107c4 <schedule_store>
}
   2bd1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	schedule_store(BT_MESH_CFG_PENDING);
   2bd1e:	200c      	movs	r0, #12
   2bd20:	f7e4 bd50 	b.w	107c4 <schedule_store>

0002bd24 <bt_mesh_clear_rpl>:
	schedule_store(BT_MESH_RPL_PENDING);
   2bd24:	2006      	movs	r0, #6
   2bd26:	f7e4 bd4d 	b.w	107c4 <schedule_store>

0002bd2a <bt_mesh_store_mod_bind>:
	mod->flags |= BT_MESH_MOD_BIND_PENDING;
   2bd2a:	88c3      	ldrh	r3, [r0, #6]
   2bd2c:	f043 0301 	orr.w	r3, r3, #1
   2bd30:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   2bd32:	200d      	movs	r0, #13
   2bd34:	f7e4 bd46 	b.w	107c4 <schedule_store>

0002bd38 <bt_mesh_store_mod_sub>:
	mod->flags |= BT_MESH_MOD_SUB_PENDING;
   2bd38:	88c3      	ldrh	r3, [r0, #6]
   2bd3a:	f043 0302 	orr.w	r3, r3, #2
   2bd3e:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   2bd40:	200d      	movs	r0, #13
   2bd42:	f7e4 bd3f 	b.w	107c4 <schedule_store>

0002bd46 <bt_mesh_store_mod_pub>:
	mod->flags |= BT_MESH_MOD_PUB_PENDING;
   2bd46:	88c3      	ldrh	r3, [r0, #6]
   2bd48:	f043 0304 	orr.w	r3, r3, #4
   2bd4c:	80c3      	strh	r3, [r0, #6]
	schedule_store(BT_MESH_MOD_PENDING);
   2bd4e:	200d      	movs	r0, #13
   2bd50:	f7e4 bd38 	b.w	107c4 <schedule_store>

0002bd54 <bt_mesh_store_label>:
	schedule_store(BT_MESH_VA_PENDING);
   2bd54:	200e      	movs	r0, #14
   2bd56:	f7e4 bd35 	b.w	107c4 <schedule_store>

0002bd5a <bt_mesh_store_cdb>:
	schedule_cdb_store(BT_MESH_CDB_SUBNET_PENDING);
   2bd5a:	2001      	movs	r0, #1
   2bd5c:	f7e4 bd1e 	b.w	1079c <schedule_cdb_store>

0002bd60 <bt_mesh_store_cdb_subnet>:
{
   2bd60:	b513      	push	{r0, r1, r4, lr}
	update = cdb_key_update_find(false, sub->net_idx, &free_slot);
   2bd62:	8801      	ldrh	r1, [r0, #0]
{
   2bd64:	4604      	mov	r4, r0
	update = cdb_key_update_find(false, sub->net_idx, &free_slot);
   2bd66:	aa01      	add	r2, sp, #4
   2bd68:	2000      	movs	r0, #0
   2bd6a:	f7e4 f897 	bl	fe9c <cdb_key_update_find>
	if (update) {
   2bd6e:	b138      	cbz	r0, 2bd80 <bt_mesh_store_cdb_subnet+0x20>
		update->clear = 0U;
   2bd70:	7843      	ldrb	r3, [r0, #1]
   2bd72:	f36f 1386 	bfc	r3, #6, #1
   2bd76:	7043      	strb	r3, [r0, #1]
	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
   2bd78:	2002      	movs	r0, #2
   2bd7a:	f7e4 fd0f 	bl	1079c <schedule_cdb_store>
   2bd7e:	e004      	b.n	2bd8a <bt_mesh_store_cdb_subnet+0x2a>
	if (!free_slot) {
   2bd80:	9901      	ldr	r1, [sp, #4]
   2bd82:	b921      	cbnz	r1, 2bd8e <bt_mesh_store_cdb_subnet+0x2e>
		store_cdb_subnet(sub);
   2bd84:	4620      	mov	r0, r4
   2bd86:	f7e4 f939 	bl	fffc <store_cdb_subnet>
}
   2bd8a:	b002      	add	sp, #8
   2bd8c:	bd10      	pop	{r4, pc}
	free_slot->key_idx = sub->net_idx;
   2bd8e:	8823      	ldrh	r3, [r4, #0]
   2bd90:	880a      	ldrh	r2, [r1, #0]
   2bd92:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2bd96:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   2bd9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2bd9e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2bda2:	4313      	orrs	r3, r2
   2bda4:	800b      	strh	r3, [r1, #0]
   2bda6:	e7e7      	b.n	2bd78 <bt_mesh_store_cdb_subnet+0x18>

0002bda8 <bt_mesh_store_cdb_app_key>:
{
   2bda8:	b513      	push	{r0, r1, r4, lr}
	update = cdb_key_update_find(true, key->app_idx, &free_slot);
   2bdaa:	8841      	ldrh	r1, [r0, #2]
{
   2bdac:	4604      	mov	r4, r0
	update = cdb_key_update_find(true, key->app_idx, &free_slot);
   2bdae:	aa01      	add	r2, sp, #4
   2bdb0:	2001      	movs	r0, #1
   2bdb2:	f7e4 f873 	bl	fe9c <cdb_key_update_find>
	if (update) {
   2bdb6:	b138      	cbz	r0, 2bdc8 <bt_mesh_store_cdb_app_key+0x20>
		update->clear = 0U;
   2bdb8:	7843      	ldrb	r3, [r0, #1]
   2bdba:	f36f 1386 	bfc	r3, #6, #1
   2bdbe:	7043      	strb	r3, [r0, #1]
	schedule_cdb_store(BT_MESH_CDB_KEYS_PENDING);
   2bdc0:	2002      	movs	r0, #2
   2bdc2:	f7e4 fceb 	bl	1079c <schedule_cdb_store>
   2bdc6:	e004      	b.n	2bdd2 <bt_mesh_store_cdb_app_key+0x2a>
	if (!free_slot) {
   2bdc8:	9901      	ldr	r1, [sp, #4]
   2bdca:	b921      	cbnz	r1, 2bdd6 <bt_mesh_store_cdb_app_key+0x2e>
		store_cdb_app_key(key);
   2bdcc:	4620      	mov	r0, r4
   2bdce:	f7e4 f93b 	bl	10048 <store_cdb_app_key>
}
   2bdd2:	b002      	add	sp, #8
   2bdd4:	bd10      	pop	{r4, pc}
	free_slot->key_idx = key->app_idx;
   2bdd6:	8863      	ldrh	r3, [r4, #2]
   2bdd8:	880a      	ldrh	r2, [r1, #0]
   2bdda:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2bdde:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
   2bde2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   2bde6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   2bdea:	4313      	orrs	r3, r2
   2bdec:	800b      	strh	r3, [r1, #0]
   2bdee:	e7e7      	b.n	2bdc0 <bt_mesh_store_cdb_app_key+0x18>

0002bdf0 <pub_key_ready>:
}
   2bdf0:	4770      	bx	lr

0002bdf2 <prov_fail>:
	prov_link_close(PROV_BEARER_LINK_STATUS_FAIL);
   2bdf2:	2002      	movs	r0, #2
   2bdf4:	f7e5 ba30 	b.w	11258 <prov_link_close>

0002bdf8 <atomic_or>:
{
   2bdf8:	4603      	mov	r3, r0
}
   2bdfa:	f3bf 8f5b 	dmb	ish
   2bdfe:	e853 0f00 	ldrex	r0, [r3]
   2be02:	ea40 0201 	orr.w	r2, r0, r1
   2be06:	e843 2c00 	strex	ip, r2, [r3]
   2be0a:	f1bc 0f00 	cmp.w	ip, #0
   2be0e:	d1f6      	bne.n	2bdfe <atomic_or+0x6>
   2be10:	f3bf 8f5b 	dmb	ish
   2be14:	4770      	bx	lr

0002be16 <prov_failed>:
	reset_state();
   2be16:	f7e5 ba29 	b.w	1126c <reset_state>

0002be1a <prov_link_closed>:
	reset_state();
   2be1a:	f7e5 ba27 	b.w	1126c <reset_state>

0002be1e <bt_mesh_prov_buf_init>:
}

static inline void bt_mesh_prov_buf_init(struct net_buf_simple *buf, uint8_t type)
{
   2be1e:	b538      	push	{r3, r4, r5, lr}
   2be20:	4604      	mov	r4, r0
   2be22:	460d      	mov	r5, r1
	net_buf_simple_reserve(buf, PROV_BEARER_BUF_HEADROOM);
   2be24:	2100      	movs	r1, #0
   2be26:	f000 f8ab 	bl	2bf80 <net_buf_simple_reserve>
	net_buf_simple_add_u8(buf, type);
   2be2a:	4629      	mov	r1, r5
   2be2c:	4620      	mov	r0, r4
}
   2be2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_simple_add_u8(buf, type);
   2be32:	f000 b941 	b.w	2c0b8 <net_buf_simple_add_u8>

0002be36 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2be36:	f101 0320 	add.w	r3, r1, #32
   2be3a:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   2be3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2be40:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2be44:	428b      	cmp	r3, r1
   2be46:	d1f9      	bne.n	2be3c <sys_memcpy_swap.constprop.0+0x6>
}
   2be48:	4770      	bx	lr

0002be4a <adv_buf_create>:
	buf = bt_mesh_adv_create(BT_MESH_ADV_PROV,
   2be4a:	f040 0108 	orr.w	r1, r0, #8
   2be4e:	f243 3234 	movw	r2, #13108	; 0x3334
   2be52:	2300      	movs	r3, #0
   2be54:	2000      	movs	r0, #0
   2be56:	f7e0 bd7f 	b.w	c958 <bt_mesh_adv_create>

0002be5a <pb_adv_reset>:

void pb_adv_reset(void)
{
	reset_adv_link();
   2be5a:	f7e5 be33 	b.w	11ac4 <reset_adv_link>

0002be5e <k_sem_give>:
	z_impl_k_sem_give(sem);
   2be5e:	f7f7 be29 	b.w	23ab4 <z_impl_k_sem_give>

0002be62 <key_idx_unpack>:
{
   2be62:	b430      	push	{r4, r5}
	*idx1 = sys_get_le16(&buf->data[0]) & 0xfff;
   2be64:	6804      	ldr	r4, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2be66:	7865      	ldrb	r5, [r4, #1]
   2be68:	7823      	ldrb	r3, [r4, #0]
   2be6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2be6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
   2be72:	800b      	strh	r3, [r1, #0]
   2be74:	78a1      	ldrb	r1, [r4, #2]
   2be76:	7863      	ldrb	r3, [r4, #1]
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2be78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   2be7c:	091b      	lsrs	r3, r3, #4
}
   2be7e:	bc30      	pop	{r4, r5}
	*idx2 = sys_get_le16(&buf->data[1]) >> 4;
   2be80:	8013      	strh	r3, [r2, #0]
	net_buf_simple_pull(buf, 3);
   2be82:	2103      	movs	r1, #3
   2be84:	f000 b97d 	b.w	2c182 <net_buf_simple_pull>

0002be88 <gatt_proxy_status>:
	state_status_u8(model, ctx, buf, OP_GATT_PROXY_STATUS);
   2be88:	f248 0114 	movw	r1, #32788	; 0x8014
   2be8c:	4610      	mov	r0, r2
   2be8e:	f7e6 bcab 	b.w	127e8 <state_status_u8.isra.0>

0002be92 <friend_status>:
	state_status_u8(model, ctx, buf, OP_FRIEND_STATUS);
   2be92:	f248 0111 	movw	r1, #32785	; 0x8011
   2be96:	4610      	mov	r0, r2
   2be98:	f7e6 bca6 	b.w	127e8 <state_status_u8.isra.0>

0002be9c <ttl_status>:
	state_status_u8(model, ctx, buf, OP_DEFAULT_TTL_STATUS);
   2be9c:	f248 010e 	movw	r1, #32782	; 0x800e
   2bea0:	4610      	mov	r0, r2
   2bea2:	f7e6 bca1 	b.w	127e8 <state_status_u8.isra.0>

0002bea6 <beacon_status>:
	state_status_u8(model, ctx, buf, OP_BEACON_STATUS);
   2bea6:	f248 010b 	movw	r1, #32779	; 0x800b
   2beaa:	4610      	mov	r0, r2
   2beac:	f7e6 bc9c 	b.w	127e8 <state_status_u8.isra.0>

0002beb0 <bt_mesh_cfg_mod_app_bind_vnd>:
}

int bt_mesh_cfg_mod_app_bind_vnd(uint16_t net_idx, uint16_t addr, uint16_t elem_addr,
				 uint16_t mod_app_idx, uint16_t mod_id, uint16_t cid,
				 uint8_t *status)
{
   2beb0:	b470      	push	{r4, r5, r6}
   2beb2:	f8bd 4010 	ldrh.w	r4, [sp, #16]
   2beb6:	f8bd 500c 	ldrh.w	r5, [sp, #12]
	if (cid == CID_NVAL) {
   2beba:	f64f 76ff 	movw	r6, #65535	; 0xffff
   2bebe:	42b4      	cmp	r4, r6
   2bec0:	d004      	beq.n	2becc <bt_mesh_cfg_mod_app_bind_vnd+0x1c>
		return -EINVAL;
	}

	return mod_app_bind(net_idx, addr, elem_addr, mod_app_idx, mod_id, cid,
   2bec2:	e9cd 5403 	strd	r5, r4, [sp, #12]
			    status);
}
   2bec6:	bc70      	pop	{r4, r5, r6}
	return mod_app_bind(net_idx, addr, elem_addr, mod_app_idx, mod_id, cid,
   2bec8:	f7e6 bc30 	b.w	1272c <mod_app_bind>
}
   2becc:	f06f 0015 	mvn.w	r0, #21
   2bed0:	bc70      	pop	{r4, r5, r6}
   2bed2:	4770      	bx	lr

0002bed4 <bt_mesh_cdb_subnet_del>:
{
   2bed4:	b510      	push	{r4, lr}
   2bed6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2bed8:	b109      	cbz	r1, 2bede <bt_mesh_cdb_subnet_del+0xa>
		bt_mesh_clear_cdb_subnet(sub);
   2beda:	f7e4 ffc5 	bl	10e68 <bt_mesh_clear_cdb_subnet>
	sub->net_idx = BT_MESH_KEY_UNUSED;
   2bede:	4620      	mov	r0, r4
   2bee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
   2bee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sub->net_idx = BT_MESH_KEY_UNUSED;
   2bee8:	f820 3b04 	strh.w	r3, [r0], #4
	memset(sub->keys, 0, sizeof(sub->keys));
   2beec:	2220      	movs	r2, #32
   2beee:	2100      	movs	r1, #0
   2bef0:	f7fa bd82 	b.w	269f8 <memset>

0002bef4 <bt_mesh_cdb_node_del>:
{
   2bef4:	b510      	push	{r4, lr}
   2bef6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2bef8:	b109      	cbz	r1, 2befe <bt_mesh_cdb_node_del+0xa>
		bt_mesh_clear_cdb_node(node);
   2befa:	f7e4 ff77 	bl	10dec <bt_mesh_clear_cdb_node>
	node->addr = BT_MESH_ADDR_UNASSIGNED;
   2befe:	2100      	movs	r1, #0
   2bf00:	8221      	strh	r1, [r4, #16]
	memset(node->dev_key, 0, sizeof(node->dev_key));
   2bf02:	f104 0015 	add.w	r0, r4, #21
   2bf06:	2210      	movs	r2, #16
}
   2bf08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	memset(node->dev_key, 0, sizeof(node->dev_key));
   2bf0c:	f7fa bd74 	b.w	269f8 <memset>

0002bf10 <bt_mesh_cdb_node_store>:
	bt_mesh_store_cdb_node(node);
   2bf10:	f7e4 bf38 	b.w	10d84 <bt_mesh_store_cdb_node>

0002bf14 <bt_mesh_cdb_app_key_del>:
{
   2bf14:	b510      	push	{r4, lr}
   2bf16:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   2bf18:	b109      	cbz	r1, 2bf1e <bt_mesh_cdb_app_key_del+0xa>
		bt_mesh_clear_cdb_app_key(key);
   2bf1a:	f7e4 ffd1 	bl	10ec0 <bt_mesh_clear_cdb_app_key>
	key->net_idx = BT_MESH_ADDR_UNASSIGNED;
   2bf1e:	4620      	mov	r0, r4
   2bf20:	2100      	movs	r1, #0
}
   2bf22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	key->net_idx = BT_MESH_ADDR_UNASSIGNED;
   2bf26:	f820 1b04 	strh.w	r1, [r0], #4
	memset(key->keys, 0, sizeof(key->keys));
   2bf2a:	2220      	movs	r2, #32
   2bf2c:	f7fa bd64 	b.w	269f8 <memset>

0002bf30 <bt_mesh_cdb_app_key_store>:

void bt_mesh_cdb_app_key_store(const struct bt_mesh_cdb_app_key *key)
{
	bt_mesh_store_cdb_app_key(key);
   2bf30:	f7ff bf3a 	b.w	2bda8 <bt_mesh_store_cdb_app_key>

0002bf34 <fixed_data_unref>:
}
   2bf34:	4770      	bx	lr

0002bf36 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2bf36:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2bf38:	6849      	ldr	r1, [r1, #4]
   2bf3a:	6809      	ldr	r1, [r1, #0]
   2bf3c:	f7f3 be9a 	b.w	1fc74 <net_buf_alloc_len>

0002bf40 <net_buf_get>:
{
   2bf40:	b570      	push	{r4, r5, r6, lr}
   2bf42:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2bf44:	f7f7 f9fe 	bl	23344 <z_impl_k_queue_get>
	if (!buf) {
   2bf48:	4605      	mov	r5, r0
   2bf4a:	b128      	cbz	r0, 2bf58 <net_buf_get+0x18>
   2bf4c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2bf4e:	7963      	ldrb	r3, [r4, #5]
   2bf50:	f013 0301 	ands.w	r3, r3, #1
   2bf54:	d102      	bne.n	2bf5c <net_buf_get+0x1c>
	frag->frags = NULL;
   2bf56:	6023      	str	r3, [r4, #0]
}
   2bf58:	4628      	mov	r0, r5
   2bf5a:	bd70      	pop	{r4, r5, r6, pc}
   2bf5c:	2300      	movs	r3, #0
   2bf5e:	2200      	movs	r2, #0
   2bf60:	4630      	mov	r0, r6
   2bf62:	f7f7 f9ef 	bl	23344 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2bf66:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2bf68:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2bf6a:	f023 0301 	bic.w	r3, r3, #1
   2bf6e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2bf70:	4604      	mov	r4, r0
   2bf72:	e7ec      	b.n	2bf4e <net_buf_get+0xe>

0002bf74 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2bf74:	b292      	uxth	r2, r2
	buf->__buf = data;
   2bf76:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2bf78:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2bf7a:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2bf7c:	8082      	strh	r2, [r0, #4]
}
   2bf7e:	4770      	bx	lr

0002bf80 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2bf80:	6883      	ldr	r3, [r0, #8]
   2bf82:	440b      	add	r3, r1
   2bf84:	6003      	str	r3, [r0, #0]
}
   2bf86:	4770      	bx	lr

0002bf88 <net_buf_slist_put>:
{
   2bf88:	b510      	push	{r4, lr}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2bf8a:	460b      	mov	r3, r1
   2bf8c:	681c      	ldr	r4, [r3, #0]
   2bf8e:	b984      	cbnz	r4, 2bfb2 <net_buf_slist_put+0x2a>
	__asm__ volatile(
   2bf90:	f04f 0220 	mov.w	r2, #32
   2bf94:	f3ef 8411 	mrs	r4, BASEPRI
   2bf98:	f382 8811 	msr	BASEPRI, r2
   2bf9c:	f3bf 8f6f 	isb	sy
Z_GENLIST_APPEND_LIST(slist, snode)
   2bfa0:	6842      	ldr	r2, [r0, #4]
   2bfa2:	b962      	cbnz	r2, 2bfbe <net_buf_slist_put+0x36>
	list->head = node;
   2bfa4:	6001      	str	r1, [r0, #0]
	list->tail = node;
   2bfa6:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2bfa8:	f384 8811 	msr	BASEPRI, r4
   2bfac:	f3bf 8f6f 	isb	sy
}
   2bfb0:	bd10      	pop	{r4, pc}
		tail->flags |= NET_BUF_FRAGS;
   2bfb2:	795a      	ldrb	r2, [r3, #5]
   2bfb4:	f042 0201 	orr.w	r2, r2, #1
   2bfb8:	715a      	strb	r2, [r3, #5]
   2bfba:	4623      	mov	r3, r4
   2bfbc:	e7e6      	b.n	2bf8c <net_buf_slist_put+0x4>
	parent->next = child;
   2bfbe:	6011      	str	r1, [r2, #0]
}
   2bfc0:	e7f1      	b.n	2bfa6 <net_buf_slist_put+0x1e>

0002bfc2 <net_buf_slist_get>:
{
   2bfc2:	b570      	push	{r4, r5, r6, lr}
   2bfc4:	4603      	mov	r3, r0
	__asm__ volatile(
   2bfc6:	f04f 0220 	mov.w	r2, #32
   2bfca:	f3ef 8111 	mrs	r1, BASEPRI
   2bfce:	f382 8811 	msr	BASEPRI, r2
   2bfd2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2bfd6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2bfd8:	b128      	cbz	r0, 2bfe6 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bfda:	685c      	ldr	r4, [r3, #4]
   2bfdc:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2bfde:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2bfe0:	42a0      	cmp	r0, r4
	list->tail = node;
   2bfe2:	bf08      	it	eq
   2bfe4:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   2bfe6:	f381 8811 	msr	BASEPRI, r1
   2bfea:	f3bf 8f6f 	isb	sy
	if (!buf) {
   2bfee:	b128      	cbz	r0, 2bffc <net_buf_slist_get+0x3a>
   2bff0:	4602      	mov	r2, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2bff2:	7951      	ldrb	r1, [r2, #5]
   2bff4:	f011 0101 	ands.w	r1, r1, #1
   2bff8:	d101      	bne.n	2bffe <net_buf_slist_get+0x3c>
	frag->frags = NULL;
   2bffa:	6011      	str	r1, [r2, #0]
}
   2bffc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2bffe:	f04f 0120 	mov.w	r1, #32
   2c002:	f3ef 8511 	mrs	r5, BASEPRI
   2c006:	f381 8811 	msr	BASEPRI, r1
   2c00a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2c00e:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_GET(slist, snode)
   2c010:	b129      	cbz	r1, 2c01e <net_buf_slist_get+0x5c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c012:	685e      	ldr	r6, [r3, #4]
   2c014:	680c      	ldr	r4, [r1, #0]
	list->head = node;
   2c016:	601c      	str	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2c018:	42b1      	cmp	r1, r6
	list->tail = node;
   2c01a:	bf08      	it	eq
   2c01c:	605c      	streq	r4, [r3, #4]
		frag->frags = (void *)sys_slist_get(list);
   2c01e:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   2c020:	f385 8811 	msr	BASEPRI, r5
   2c024:	f3bf 8f6f 	isb	sy
		frag->flags &= ~NET_BUF_FRAGS;
   2c028:	7951      	ldrb	r1, [r2, #5]
   2c02a:	f021 0101 	bic.w	r1, r1, #1
   2c02e:	7151      	strb	r1, [r2, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2c030:	6812      	ldr	r2, [r2, #0]
   2c032:	e7de      	b.n	2bff2 <net_buf_slist_get+0x30>

0002c034 <net_buf_put>:
{
   2c034:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2c036:	460a      	mov	r2, r1
   2c038:	6814      	ldr	r4, [r2, #0]
   2c03a:	b914      	cbnz	r4, 2c042 <net_buf_put+0xe>
}
   2c03c:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2c03e:	f001 b921 	b.w	2d284 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2c042:	7953      	ldrb	r3, [r2, #5]
   2c044:	f043 0301 	orr.w	r3, r3, #1
   2c048:	7153      	strb	r3, [r2, #5]
   2c04a:	4622      	mov	r2, r4
   2c04c:	e7f4      	b.n	2c038 <net_buf_put+0x4>

0002c04e <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2c04e:	7902      	ldrb	r2, [r0, #4]
   2c050:	3201      	adds	r2, #1
   2c052:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2c054:	4770      	bx	lr

0002c056 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2c056:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2c058:	4618      	mov	r0, r3
   2c05a:	681b      	ldr	r3, [r3, #0]
   2c05c:	2b00      	cmp	r3, #0
   2c05e:	d1fb      	bne.n	2c058 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2c060:	4770      	bx	lr

0002c062 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2c062:	6802      	ldr	r2, [r0, #0]
{
   2c064:	b510      	push	{r4, lr}
	if (parent->frags) {
   2c066:	b12a      	cbz	r2, 2c074 <net_buf_frag_insert+0x12>
   2c068:	460b      	mov	r3, r1
	while (buf->frags) {
   2c06a:	461c      	mov	r4, r3
   2c06c:	681b      	ldr	r3, [r3, #0]
   2c06e:	2b00      	cmp	r3, #0
   2c070:	d1fb      	bne.n	2c06a <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2c072:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2c074:	6001      	str	r1, [r0, #0]
}
   2c076:	bd10      	pop	{r4, pc}

0002c078 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2c078:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2c07a:	4604      	mov	r4, r0
   2c07c:	b920      	cbnz	r0, 2c088 <net_buf_frag_add+0x10>
	buf->ref++;
   2c07e:	790b      	ldrb	r3, [r1, #4]
   2c080:	3301      	adds	r3, #1
   2c082:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2c084:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2c086:	bd10      	pop	{r4, pc}
   2c088:	4603      	mov	r3, r0
	while (buf->frags) {
   2c08a:	4618      	mov	r0, r3
   2c08c:	681b      	ldr	r3, [r3, #0]
   2c08e:	2b00      	cmp	r3, #0
   2c090:	d1fb      	bne.n	2c08a <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2c092:	f7ff ffe6 	bl	2c062 <net_buf_frag_insert>
   2c096:	4620      	mov	r0, r4
   2c098:	e7f5      	b.n	2c086 <net_buf_frag_add+0xe>

0002c09a <net_buf_simple_add>:
	return buf->data + buf->len;
   2c09a:	8883      	ldrh	r3, [r0, #4]
   2c09c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2c09e:	4419      	add	r1, r3
   2c0a0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2c0a2:	18d0      	adds	r0, r2, r3
   2c0a4:	4770      	bx	lr

0002c0a6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2c0a6:	b430      	push	{r4, r5}
   2c0a8:	8884      	ldrh	r4, [r0, #4]
   2c0aa:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2c0ac:	18a3      	adds	r3, r4, r2
   2c0ae:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2c0b0:	1928      	adds	r0, r5, r4
}
   2c0b2:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2c0b4:	f7fa bc75 	b.w	269a2 <memcpy>

0002c0b8 <net_buf_simple_add_u8>:
   2c0b8:	8883      	ldrh	r3, [r0, #4]
   2c0ba:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2c0bc:	b510      	push	{r4, lr}
	buf->len += len;
   2c0be:	1c5c      	adds	r4, r3, #1
   2c0c0:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2c0c2:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2c0c4:	18d0      	adds	r0, r2, r3
   2c0c6:	bd10      	pop	{r4, pc}

0002c0c8 <net_buf_simple_add_le16>:
   2c0c8:	8883      	ldrh	r3, [r0, #4]
   2c0ca:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2c0cc:	b530      	push	{r4, r5, lr}
   2c0ce:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2c0d0:	1c9d      	adds	r5, r3, #2
   2c0d2:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   2c0d4:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   2c0d6:	0a09      	lsrs	r1, r1, #8
   2c0d8:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2c0da:	bd30      	pop	{r4, r5, pc}

0002c0dc <net_buf_simple_add_be16>:
   2c0dc:	8883      	ldrh	r3, [r0, #4]
   2c0de:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_be16(struct net_buf_simple *buf, uint16_t val)
{
   2c0e0:	b530      	push	{r4, r5, lr}
	buf->len += len;
   2c0e2:	1c9d      	adds	r5, r3, #2
   2c0e4:	8085      	strh	r5, [r0, #4]
   2c0e6:	18d4      	adds	r4, r2, r3
	dst[0] = val >> 8;
   2c0e8:	0a08      	lsrs	r0, r1, #8
   2c0ea:	54d0      	strb	r0, [r2, r3]
	dst[1] = val;
   2c0ec:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2c0ee:	bd30      	pop	{r4, r5, pc}

0002c0f0 <net_buf_simple_add_le24>:
   2c0f0:	8883      	ldrh	r3, [r0, #4]

void net_buf_simple_add_le24(struct net_buf_simple *buf, uint32_t val)
{
   2c0f2:	b530      	push	{r4, r5, lr}
   2c0f4:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   2c0f6:	1cdd      	adds	r5, r3, #3
   2c0f8:	18e2      	adds	r2, r4, r3
   2c0fa:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   2c0fc:	54e1      	strb	r1, [r4, r3]
	dst[1] = val >> 8;
   2c0fe:	f3c1 2307 	ubfx	r3, r1, #8, #8
	dst[2] = val >> 16;
   2c102:	0c09      	lsrs	r1, r1, #16
	dst[1] = val >> 8;
   2c104:	7053      	strb	r3, [r2, #1]
	dst[2] = val >> 16;
   2c106:	7091      	strb	r1, [r2, #2]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le24(val, net_buf_simple_add(buf, 3));
}
   2c108:	bd30      	pop	{r4, r5, pc}

0002c10a <net_buf_simple_add_be32>:
   2c10a:	8882      	ldrh	r2, [r0, #4]

	sys_put_le32(val, net_buf_simple_add(buf, sizeof(val)));
}

void net_buf_simple_add_be32(struct net_buf_simple *buf, uint32_t val)
{
   2c10c:	b530      	push	{r4, r5, lr}
   2c10e:	6804      	ldr	r4, [r0, #0]
	buf->len += len;
   2c110:	1d15      	adds	r5, r2, #4
   2c112:	8085      	strh	r5, [r0, #4]
   2c114:	18a3      	adds	r3, r4, r2
	dst[0] = val >> 8;
   2c116:	0e0d      	lsrs	r5, r1, #24
   2c118:	54a5      	strb	r5, [r4, r2]
	sys_put_be16(val >> 16, dst);
   2c11a:	0c08      	lsrs	r0, r1, #16
	dst[0] = val >> 8;
   2c11c:	f3c1 2207 	ubfx	r2, r1, #8, #8
	dst[1] = val;
   2c120:	7058      	strb	r0, [r3, #1]
	dst[0] = val >> 8;
   2c122:	709a      	strb	r2, [r3, #2]
	dst[1] = val;
   2c124:	70d9      	strb	r1, [r3, #3]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be32(val, net_buf_simple_add(buf, sizeof(val)));
}
   2c126:	bd30      	pop	{r4, r5, pc}

0002c128 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2c128:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2c12a:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2c12c:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2c12e:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2c130:	4411      	add	r1, r2
	buf->data -= len;
   2c132:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2c134:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2c136:	4770      	bx	lr

0002c138 <net_buf_simple_push_be16>:
	buf->data -= len;
   2c138:	6803      	ldr	r3, [r0, #0]
   2c13a:	1e9a      	subs	r2, r3, #2
   2c13c:	6002      	str	r2, [r0, #0]
	buf->len += len;
   2c13e:	8882      	ldrh	r2, [r0, #4]
   2c140:	3202      	adds	r2, #2
   2c142:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 8;
   2c144:	0a0a      	lsrs	r2, r1, #8
   2c146:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   2c14a:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be16(struct net_buf_simple *buf, uint16_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be16(val, net_buf_simple_push(buf, sizeof(val)));
}
   2c14e:	4770      	bx	lr

0002c150 <net_buf_simple_push_u8>:
	buf->data -= len;
   2c150:	6802      	ldr	r2, [r0, #0]
   2c152:	1e53      	subs	r3, r2, #1
   2c154:	6003      	str	r3, [r0, #0]
	buf->len += len;
   2c156:	8883      	ldrh	r3, [r0, #4]
   2c158:	3301      	adds	r3, #1
   2c15a:	8083      	strh	r3, [r0, #4]

void net_buf_simple_push_u8(struct net_buf_simple *buf, uint8_t val)
{
	uint8_t *data = net_buf_simple_push(buf, 1);

	*data = val;
   2c15c:	f802 1c01 	strb.w	r1, [r2, #-1]
}
   2c160:	4770      	bx	lr

0002c162 <net_buf_simple_push_be24>:
	buf->data -= len;
   2c162:	6803      	ldr	r3, [r0, #0]
   2c164:	1eda      	subs	r2, r3, #3
   2c166:	6002      	str	r2, [r0, #0]
	buf->len += len;
   2c168:	8882      	ldrh	r2, [r0, #4]
   2c16a:	3203      	adds	r2, #3
   2c16c:	8082      	strh	r2, [r0, #4]
	dst[0] = val >> 16;
   2c16e:	0c0a      	lsrs	r2, r1, #16
   2c170:	f803 2c03 	strb.w	r2, [r3, #-3]
	dst[0] = val >> 8;
   2c174:	f3c1 2207 	ubfx	r2, r1, #8, #8
   2c178:	f803 2c02 	strb.w	r2, [r3, #-2]
	dst[1] = val;
   2c17c:	f803 1c01 	strb.w	r1, [r3, #-1]
void net_buf_simple_push_be24(struct net_buf_simple *buf, uint32_t val)
{
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_be24(val, net_buf_simple_push(buf, 3));
}
   2c180:	4770      	bx	lr

0002c182 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2c182:	8882      	ldrh	r2, [r0, #4]
   2c184:	1a52      	subs	r2, r2, r1
{
   2c186:	4603      	mov	r3, r0
	buf->len -= len;
   2c188:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2c18a:	6800      	ldr	r0, [r0, #0]
   2c18c:	4408      	add	r0, r1
   2c18e:	6018      	str	r0, [r3, #0]
}
   2c190:	4770      	bx	lr

0002c192 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2c192:	4603      	mov	r3, r0
	void *data = buf->data;
   2c194:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2c196:	889a      	ldrh	r2, [r3, #4]
   2c198:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2c19a:	4401      	add	r1, r0
	buf->len -= len;
   2c19c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2c19e:	6019      	str	r1, [r3, #0]

	return data;
}
   2c1a0:	4770      	bx	lr

0002c1a2 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2c1a2:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2c1a4:	6803      	ldr	r3, [r0, #0]
   2c1a6:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2c1a8:	2101      	movs	r1, #1
   2c1aa:	f7ff ffea 	bl	2c182 <net_buf_simple_pull>

	return val;
}
   2c1ae:	4620      	mov	r0, r4
   2c1b0:	bd10      	pop	{r4, pc}

0002c1b2 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2c1b2:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c1b4:	6803      	ldr	r3, [r0, #0]
   2c1b6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c1b8:	2102      	movs	r1, #2
   2c1ba:	f7ff ffe2 	bl	2c182 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2c1be:	4620      	mov	r0, r4
   2c1c0:	bd10      	pop	{r4, pc}

0002c1c2 <net_buf_simple_pull_be16>:

uint16_t net_buf_simple_pull_be16(struct net_buf_simple *buf)
{
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c1c2:	6803      	ldr	r3, [r0, #0]
{
   2c1c4:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c1c6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c1c8:	2102      	movs	r1, #2
   2c1ca:	f7ff ffda 	bl	2c182 <net_buf_simple_pull>

	return sys_be16_to_cpu(val);
   2c1ce:	0220      	lsls	r0, r4, #8
   2c1d0:	ea40 2014 	orr.w	r0, r0, r4, lsr #8
}
   2c1d4:	b280      	uxth	r0, r0
   2c1d6:	bd10      	pop	{r4, pc}

0002c1d8 <net_buf_simple_pull_be32>:

	return sys_le32_to_cpu(val);
}

uint32_t net_buf_simple_pull_be32(struct net_buf_simple *buf)
{
   2c1d8:	b510      	push	{r4, lr}
   2c1da:	6803      	ldr	r3, [r0, #0]
   2c1dc:	681c      	ldr	r4, [r3, #0]
	uint32_t val;

	val = UNALIGNED_GET((uint32_t *)buf->data);
	net_buf_simple_pull(buf, sizeof(val));
   2c1de:	2104      	movs	r1, #4
   2c1e0:	ba24      	rev	r4, r4
   2c1e2:	f7ff ffce 	bl	2c182 <net_buf_simple_pull>

	return sys_be32_to_cpu(val);
}
   2c1e6:	4620      	mov	r0, r4
   2c1e8:	bd10      	pop	{r4, pc}

0002c1ea <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2c1ea:	6802      	ldr	r2, [r0, #0]
   2c1ec:	6880      	ldr	r0, [r0, #8]
}
   2c1ee:	1a10      	subs	r0, r2, r0
   2c1f0:	4770      	bx	lr

0002c1f2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2c1f2:	8883      	ldrh	r3, [r0, #4]
   2c1f4:	88c2      	ldrh	r2, [r0, #6]
   2c1f6:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2c1f8:	6803      	ldr	r3, [r0, #0]
   2c1fa:	6880      	ldr	r0, [r0, #8]
   2c1fc:	1a18      	subs	r0, r3, r0
}
   2c1fe:	1a10      	subs	r0, r2, r0
   2c200:	4770      	bx	lr

0002c202 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   2c202:	b570      	push	{r4, r5, r6, lr}
   2c204:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2c206:	6801      	ldr	r1, [r0, #0]
{
   2c208:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2c20a:	b151      	cbz	r1, 2c222 <gpio_fire_callbacks+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2c20c:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
   2c20e:	688a      	ldr	r2, [r1, #8]
   2c210:	402a      	ands	r2, r5
   2c212:	d002      	beq.n	2c21a <gpio_fire_callbacks+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2c214:	684b      	ldr	r3, [r1, #4]
   2c216:	4630      	mov	r0, r6
   2c218:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2c21a:	b114      	cbz	r4, 2c222 <gpio_fire_callbacks+0x20>
   2c21c:	4621      	mov	r1, r4
   2c21e:	6824      	ldr	r4, [r4, #0]
   2c220:	e7f5      	b.n	2c20e <gpio_fire_callbacks+0xc>
		}
	}
}
   2c222:	bd70      	pop	{r4, r5, r6, pc}

0002c224 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c224:	6843      	ldr	r3, [r0, #4]
   2c226:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2c228:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2c22c:	600b      	str	r3, [r1, #0]
}
   2c22e:	2000      	movs	r0, #0
   2c230:	4770      	bx	lr

0002c232 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c232:	6843      	ldr	r3, [r0, #4]
   2c234:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2c236:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2c23a:	4042      	eors	r2, r0
   2c23c:	400a      	ands	r2, r1
   2c23e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2c240:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2c244:	2000      	movs	r0, #0
   2c246:	4770      	bx	lr

0002c248 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c248:	6843      	ldr	r3, [r0, #4]
   2c24a:	685b      	ldr	r3, [r3, #4]
}
   2c24c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2c24e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2c252:	4770      	bx	lr

0002c254 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c254:	6843      	ldr	r3, [r0, #4]
   2c256:	685b      	ldr	r3, [r3, #4]
}
   2c258:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2c25a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2c25e:	4770      	bx	lr

0002c260 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c260:	6843      	ldr	r3, [r0, #4]
   2c262:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2c264:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2c268:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2c26a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2c26e:	2000      	movs	r0, #0
   2c270:	4770      	bx	lr

0002c272 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2c272:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   2c274:	6858      	ldr	r0, [r3, #4]
{
   2c276:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2c278:	b158      	cbz	r0, 2c292 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c27a:	2400      	movs	r4, #0
   2c27c:	4281      	cmp	r1, r0
   2c27e:	d113      	bne.n	2c2a8 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   2c280:	6808      	ldr	r0, [r1, #0]
   2c282:	b95c      	cbnz	r4, 2c29c <gpio_nrfx_manage_callback+0x2a>
   2c284:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   2c286:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2c288:	42a1      	cmp	r1, r4
   2c28a:	d100      	bne.n	2c28e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2c28c:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2c28e:	2000      	movs	r0, #0
   2c290:	6008      	str	r0, [r1, #0]
	if (set) {
   2c292:	b972      	cbnz	r2, 2c2b2 <gpio_nrfx_manage_callback+0x40>
	return 0;
   2c294:	2000      	movs	r0, #0
}
   2c296:	bd30      	pop	{r4, r5, pc}
   2c298:	4628      	mov	r0, r5
   2c29a:	e7ef      	b.n	2c27c <gpio_nrfx_manage_callback+0xa>
   2c29c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c29e:	6898      	ldr	r0, [r3, #8]
   2c2a0:	4281      	cmp	r1, r0
	list->tail = node;
   2c2a2:	bf08      	it	eq
   2c2a4:	609c      	streq	r4, [r3, #8]
}
   2c2a6:	e7f2      	b.n	2c28e <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2c2a8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c2aa:	4604      	mov	r4, r0
   2c2ac:	2d00      	cmp	r5, #0
   2c2ae:	d1f3      	bne.n	2c298 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2c2b0:	b13a      	cbz	r2, 2c2c2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   2c2b2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2c2b4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2c2b6:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   2c2b8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2c2ba:	2800      	cmp	r0, #0
   2c2bc:	d1ea      	bne.n	2c294 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2c2be:	6099      	str	r1, [r3, #8]
}
   2c2c0:	e7e9      	b.n	2c296 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2c2c2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2c2c6:	e7e6      	b.n	2c296 <gpio_nrfx_manage_callback+0x24>

0002c2c8 <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   2c2c8:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2c2ca:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   2c2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   2c2d2:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2c2d4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2c2d8:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   2c2da:	430a      	orrs	r2, r1
   2c2dc:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2c2e0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   2c2e4:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2c2e8:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   2c2ea:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   2c2ee:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2c2f0:	2700      	movs	r7, #0
	while (level_pins) {
   2c2f2:	b914      	cbnz	r4, 2c2fa <check_level_trigger_pins+0x32>
}
   2c2f4:	4628      	mov	r0, r5
   2c2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2c2fa:	4234      	tst	r4, r6
   2c2fc:	d00a      	beq.n	2c314 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2c2fe:	f898 3008 	ldrb.w	r3, [r8, #8]
   2c302:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2c306:	2100      	movs	r1, #0
   2c308:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2c30c:	f7f3 fdea 	bl	1fee4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2c310:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2c314:	3701      	adds	r7, #1
		bit <<= 1;
   2c316:	0076      	lsls	r6, r6, #1
   2c318:	e7eb      	b.n	2c2f2 <check_level_trigger_pins+0x2a>

0002c31a <cfg_level_pins>:
{
   2c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   2c31e:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   2c320:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   2c324:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2c326:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2c32a:	4313      	orrs	r3, r2
   2c32c:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   2c330:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2c332:	2500      	movs	r5, #0
	while (level_pins) {
   2c334:	b90c      	cbnz	r4, 2c33a <cfg_level_pins+0x20>
}
   2c336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2c33a:	4226      	tst	r6, r4
   2c33c:	d010      	beq.n	2c360 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2c33e:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2c340:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2c344:	40e9      	lsrs	r1, r5
   2c346:	f001 0101 	and.w	r1, r1, #1
   2c34a:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2c34e:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2c352:	b2c9      	uxtb	r1, r1
   2c354:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2c358:	f7f3 fdc4 	bl	1fee4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2c35c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2c360:	3501      	adds	r5, #1
		bit <<= 1;
   2c362:	0076      	lsls	r6, r6, #1
   2c364:	e7e6      	b.n	2c334 <cfg_level_pins+0x1a>

0002c366 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   2c366:	07ca      	lsls	r2, r1, #31
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   2c368:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   2c36a:	d405      	bmi.n	2c378 <i2c_nrfx_twim_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
   2c36c:	f3c1 0242 	ubfx	r2, r1, #1, #3
   2c370:	2a01      	cmp	r2, #1
   2c372:	d004      	beq.n	2c37e <i2c_nrfx_twim_configure+0x18>
   2c374:	2a02      	cmp	r2, #2
   2c376:	d00b      	beq.n	2c390 <i2c_nrfx_twim_configure+0x2a>
		return -EINVAL;
   2c378:	f06f 0015 	mvn.w	r0, #21
}
   2c37c:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   2c37e:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   2c380:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   2c384:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   2c388:	68c3      	ldr	r3, [r0, #12]
	return 0;
   2c38a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   2c38c:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   2c38e:	4770      	bx	lr
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   2c390:	681b      	ldr	r3, [r3, #0]
   2c392:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   2c396:	e7f5      	b.n	2c384 <i2c_nrfx_twim_configure+0x1e>

0002c398 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c398:	0413      	lsls	r3, r2, #16
{
   2c39a:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   2c39c:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c39e:	d507      	bpl.n	2c3b0 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2c3a0:	68c5      	ldr	r5, [r0, #12]
   2c3a2:	2301      	movs	r3, #1
   2c3a4:	682d      	ldr	r5, [r5, #0]
   2c3a6:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c3a8:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2c3aa:	bf18      	it	ne
   2c3ac:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c3b0:	69a4      	ldr	r4, [r4, #24]
   2c3b2:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   2c3b6:	46a4      	mov	ip, r4
   2c3b8:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   2c3bc:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c3be:	4760      	bx	ip

0002c3c0 <apds9960_channel_get>:
	struct apds9960_data *data = dev->data;
   2c3c0:	390f      	subs	r1, #15
   2c3c2:	68c3      	ldr	r3, [r0, #12]
	switch (chan) {
   2c3c4:	2906      	cmp	r1, #6
   2c3c6:	d813      	bhi.n	2c3f0 <apds9960_channel_get+0x30>
   2c3c8:	e8df f001 	tbb	[pc, r1]
   2c3cc:	1204120f 	.word	0x1204120f
   2c3d0:	0b09      	.short	0x0b09
   2c3d2:	0d          	.byte	0x0d
   2c3d3:	00          	.byte	0x00
		val->val1 = sys_le16_to_cpu(data->sample_crgb[0]);
   2c3d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		val->val1 = sys_le16_to_cpu(data->sample_crgb[1]);
   2c3d6:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   2c3d8:	2000      	movs	r0, #0
   2c3da:	6050      	str	r0, [r2, #4]
		break;
   2c3dc:	4770      	bx	lr
		val->val1 = sys_le16_to_cpu(data->sample_crgb[1]);
   2c3de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   2c3e0:	e7f9      	b.n	2c3d6 <apds9960_channel_get+0x16>
		val->val1 = sys_le16_to_cpu(data->sample_crgb[2]);
   2c3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2c3e4:	e7f7      	b.n	2c3d6 <apds9960_channel_get+0x16>
		val->val1 = sys_le16_to_cpu(data->sample_crgb[3]);
   2c3e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   2c3e8:	e7f5      	b.n	2c3d6 <apds9960_channel_get+0x16>
		val->val1 = data->pdata;
   2c3ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   2c3ee:	e7f2      	b.n	2c3d6 <apds9960_channel_get+0x16>
	struct apds9960_data *data = dev->data;
   2c3f0:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
   2c3f4:	4770      	bx	lr

0002c3f6 <apds9960_handle_cb>:
{
   2c3f6:	b510      	push	{r4, lr}
   2c3f8:	4604      	mov	r4, r0
   2c3fa:	6840      	ldr	r0, [r0, #4]
   2c3fc:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   2c400:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2c404:	f7ff ffc8 	bl	2c398 <z_impl_gpio_pin_interrupt_configure>
	z_impl_k_sem_give(sem);
   2c408:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
   2c40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c410:	f7f7 bb50 	b.w	23ab4 <z_impl_k_sem_give>

0002c414 <apds9960_gpio_callback>:
	apds9960_handle_cb(drv_data);
   2c414:	f1a1 0008 	sub.w	r0, r1, #8
   2c418:	f7ff bfed 	b.w	2c3f6 <apds9960_handle_cb>

0002c41c <i2c_reg_write_byte>:
{
   2c41c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_buf[2] = {reg_addr, value};
   2c41e:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
   2c422:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   2c424:	f88d 2000 	strb.w	r2, [sp]
	msg.buf = (uint8_t *)buf;
   2c428:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   2c42c:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2c42e:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c432:	6883      	ldr	r3, [r0, #8]
   2c434:	2201      	movs	r2, #1
   2c436:	685c      	ldr	r4, [r3, #4]
   2c438:	460b      	mov	r3, r1
   2c43a:	a901      	add	r1, sp, #4
   2c43c:	47a0      	blx	r4

	return i2c_write(dev, tx_buf, 2, dev_addr);
}
   2c43e:	b004      	add	sp, #16
   2c440:	bd10      	pop	{r4, pc}

0002c442 <i2c_reg_read_byte>:
{
   2c442:	b530      	push	{r4, r5, lr}
   2c444:	b089      	sub	sp, #36	; 0x24
	msg[0].flags = I2C_MSG_WRITE;
   2c446:	2500      	movs	r5, #0
{
   2c448:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2c44c:	f10d 0207 	add.w	r2, sp, #7
   2c450:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   2c452:	2201      	movs	r2, #1
	msg[1].len = num_read;
   2c454:	e9cd 3205 	strd	r3, r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c458:	2307      	movs	r3, #7
	msg[0].len = num_write;
   2c45a:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   2c45c:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c460:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c464:	6883      	ldr	r3, [r0, #8]
   2c466:	2202      	movs	r2, #2
   2c468:	685c      	ldr	r4, [r3, #4]
   2c46a:	460b      	mov	r3, r1
   2c46c:	a902      	add	r1, sp, #8
   2c46e:	47a0      	blx	r4
}
   2c470:	b009      	add	sp, #36	; 0x24
   2c472:	bd30      	pop	{r4, r5, pc}

0002c474 <i2c_reg_update_byte>:
 */
static inline int i2c_reg_update_byte(const struct device *dev,
				      uint8_t dev_addr,
				      uint8_t reg_addr, uint8_t mask,
				      uint8_t value)
{
   2c474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c478:	b088      	sub	sp, #32
   2c47a:	4617      	mov	r7, r2
   2c47c:	461c      	mov	r4, r3
   2c47e:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2c482:	f10d 0307 	add.w	r3, sp, #7
	msg[0].flags = I2C_MSG_WRITE;
   2c486:	2200      	movs	r2, #0
	msg[0].buf = (uint8_t *)write_buf;
   2c488:	9302      	str	r3, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
   2c48a:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[0].len = num_write;
   2c48e:	2301      	movs	r3, #1
	msg[1].buf = (uint8_t *)read_buf;
   2c490:	f10d 0206 	add.w	r2, sp, #6
	msg[1].len = num_read;
   2c494:	e9cd 2305 	strd	r2, r3, [sp, #20]
	msg[0].len = num_write;
   2c498:	9303      	str	r3, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c49a:	2307      	movs	r3, #7
{
   2c49c:	4605      	mov	r5, r0
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   2c49e:	460e      	mov	r6, r1
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c4a0:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c4a4:	6883      	ldr	r3, [r0, #8]
   2c4a6:	2202      	movs	r2, #2
   2c4a8:	f8d3 8004 	ldr.w	r8, [r3, #4]
   2c4ac:	460b      	mov	r3, r1
   2c4ae:	a902      	add	r1, sp, #8
   2c4b0:	47c0      	blx	r8
	if (rc != 0) {
   2c4b2:	b970      	cbnz	r0, 2c4d2 <i2c_reg_update_byte+0x5e>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
   2c4b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2c4b8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   2c4bc:	ea22 0304 	bic.w	r3, r2, r4
   2c4c0:	400c      	ands	r4, r1
   2c4c2:	4323      	orrs	r3, r4
	if (new_value == old_value) {
   2c4c4:	429a      	cmp	r2, r3
   2c4c6:	d004      	beq.n	2c4d2 <i2c_reg_update_byte+0x5e>
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
   2c4c8:	463a      	mov	r2, r7
   2c4ca:	4631      	mov	r1, r6
   2c4cc:	4628      	mov	r0, r5
   2c4ce:	f7ff ffa5 	bl	2c41c <i2c_reg_write_byte>
}
   2c4d2:	b008      	add	sp, #32
   2c4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c4d8 <apds9960_sample_fetch>:
{
   2c4d8:	b570      	push	{r4, r5, r6, lr}
	if (chan != SENSOR_CHAN_ALL) {
   2c4da:	2938      	cmp	r1, #56	; 0x38
	const struct apds9960_config *config = dev->config;
   2c4dc:	6845      	ldr	r5, [r0, #4]
	struct apds9960_data *data = dev->data;
   2c4de:	68c4      	ldr	r4, [r0, #12]
{
   2c4e0:	b08a      	sub	sp, #40	; 0x28
	if (chan != SENSOR_CHAN_ALL) {
   2c4e2:	d167      	bne.n	2c5b4 <apds9960_sample_fetch+0xdc>
   2c4e4:	6860      	ldr	r0, [r4, #4]
   2c4e6:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
   2c4ea:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
   2c4ee:	f7ff ff53 	bl	2c398 <z_impl_gpio_pin_interrupt_configure>
	tmp = APDS9960_ENABLE_PON | APDS9960_ENABLE_AIEN;
   2c4f2:	2311      	movs	r3, #17
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   2c4f4:	7c29      	ldrb	r1, [r5, #16]
	tmp = APDS9960_ENABLE_PON | APDS9960_ENABLE_AIEN;
   2c4f6:	f88d 300e 	strb.w	r3, [sp, #14]
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   2c4fa:	9300      	str	r3, [sp, #0]
   2c4fc:	6820      	ldr	r0, [r4, #0]
   2c4fe:	2280      	movs	r2, #128	; 0x80
   2c500:	f7ff ffb8 	bl	2c474 <i2c_reg_update_byte>
   2c504:	b118      	cbz	r0, 2c50e <apds9960_sample_fetch+0x36>
		return -EIO;
   2c506:	f06f 0004 	mvn.w	r0, #4
}
   2c50a:	b00a      	add	sp, #40	; 0x28
   2c50c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   2c50e:	f04f 32ff 	mov.w	r2, #4294967295
   2c512:	f04f 33ff 	mov.w	r3, #4294967295
   2c516:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2c51a:	f7f7 faf1 	bl	23b00 <z_impl_k_sem_take>
	if (i2c_reg_read_byte(data->i2c, config->i2c_address,
   2c51e:	7c29      	ldrb	r1, [r5, #16]
   2c520:	6820      	ldr	r0, [r4, #0]
   2c522:	f10d 030e 	add.w	r3, sp, #14
   2c526:	2293      	movs	r2, #147	; 0x93
   2c528:	f7ff ff8b 	bl	2c442 <i2c_reg_read_byte>
   2c52c:	2800      	cmp	r0, #0
   2c52e:	d1ea      	bne.n	2c506 <apds9960_sample_fetch+0x2e>
	if (tmp & APDS9960_STATUS_PINT) {
   2c530:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2c534:	069a      	lsls	r2, r3, #26
   2c536:	d416      	bmi.n	2c566 <apds9960_sample_fetch+0x8e>
	if (tmp & APDS9960_STATUS_AINT) {
   2c538:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2c53c:	06db      	lsls	r3, r3, #27
   2c53e:	d41c      	bmi.n	2c57a <apds9960_sample_fetch+0xa2>
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   2c540:	2300      	movs	r3, #0
   2c542:	7c29      	ldrb	r1, [r5, #16]
   2c544:	9300      	str	r3, [sp, #0]
   2c546:	6820      	ldr	r0, [r4, #0]
   2c548:	2301      	movs	r3, #1
   2c54a:	2280      	movs	r2, #128	; 0x80
   2c54c:	f7ff ff92 	bl	2c474 <i2c_reg_update_byte>
   2c550:	4603      	mov	r3, r0
   2c552:	2800      	cmp	r0, #0
   2c554:	d1d7      	bne.n	2c506 <apds9960_sample_fetch+0x2e>
	if (i2c_reg_write_byte(data->i2c, config->i2c_address,
   2c556:	7c29      	ldrb	r1, [r5, #16]
   2c558:	6820      	ldr	r0, [r4, #0]
   2c55a:	22e7      	movs	r2, #231	; 0xe7
   2c55c:	f7ff ff5e 	bl	2c41c <i2c_reg_write_byte>
   2c560:	2800      	cmp	r0, #0
   2c562:	d0d2      	beq.n	2c50a <apds9960_sample_fetch+0x32>
   2c564:	e7cf      	b.n	2c506 <apds9960_sample_fetch+0x2e>
		if (i2c_reg_read_byte(data->i2c, config->i2c_address,
   2c566:	7c29      	ldrb	r1, [r5, #16]
   2c568:	6820      	ldr	r0, [r4, #0]
   2c56a:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   2c56e:	229c      	movs	r2, #156	; 0x9c
   2c570:	f7ff ff67 	bl	2c442 <i2c_reg_read_byte>
   2c574:	2800      	cmp	r0, #0
   2c576:	d0df      	beq.n	2c538 <apds9960_sample_fetch+0x60>
   2c578:	e7c5      	b.n	2c506 <apds9960_sample_fetch+0x2e>
   2c57a:	4622      	mov	r2, r4
   2c57c:	2194      	movs	r1, #148	; 0x94
   2c57e:	f852 0b24 	ldr.w	r0, [r2], #36
		if (i2c_burst_read(data->i2c, config->i2c_address,
   2c582:	f88d 100f 	strb.w	r1, [sp, #15]
	msg[0].buf = (uint8_t *)write_buf;
   2c586:	f10d 010f 	add.w	r1, sp, #15
   2c58a:	9104      	str	r1, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   2c58c:	9207      	str	r2, [sp, #28]
	msg[0].len = num_write;
   2c58e:	2101      	movs	r1, #1
	msg[1].len = num_read;
   2c590:	2208      	movs	r2, #8
   2c592:	7c2b      	ldrb	r3, [r5, #16]
	msg[0].len = num_write;
   2c594:	9105      	str	r1, [sp, #20]
	msg[1].len = num_read;
   2c596:	9208      	str	r2, [sp, #32]
	msg[0].flags = I2C_MSG_WRITE;
   2c598:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c59a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   2c59c:	f88d 1018 	strb.w	r1, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c5a0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
   2c5a4:	6882      	ldr	r2, [r0, #8]
   2c5a6:	a904      	add	r1, sp, #16
   2c5a8:	6856      	ldr	r6, [r2, #4]
   2c5aa:	2202      	movs	r2, #2
   2c5ac:	47b0      	blx	r6
   2c5ae:	2800      	cmp	r0, #0
   2c5b0:	d0c6      	beq.n	2c540 <apds9960_sample_fetch+0x68>
   2c5b2:	e7a8      	b.n	2c506 <apds9960_sample_fetch+0x2e>
		return -ENOTSUP;
   2c5b4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2c5b8:	e7a7      	b.n	2c50a <apds9960_sample_fetch+0x32>

0002c5ba <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2c5ba:	2301      	movs	r3, #1
   2c5bc:	fa03 f101 	lsl.w	r1, r3, r1
   2c5c0:	68c3      	ldr	r3, [r0, #12]
   2c5c2:	681b      	ldr	r3, [r3, #0]
   2c5c4:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2c5c6:	bf18      	it	ne
   2c5c8:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2c5cc:	b112      	cbz	r2, 2c5d4 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   2c5ce:	6883      	ldr	r3, [r0, #8]
   2c5d0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2c5d2:	4718      	bx	r3
   2c5d4:	6883      	ldr	r3, [r0, #8]
   2c5d6:	691b      	ldr	r3, [r3, #16]
   2c5d8:	e7fb      	b.n	2c5d2 <gpio_pin_set+0x18>

0002c5da <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
   2c5da:	b510      	push	{r4, lr}
   2c5dc:	b086      	sub	sp, #24
	msg[0].buf = (uint8_t *)write_buf;
   2c5de:	9200      	str	r2, [sp, #0]
	msg[1].buf = (uint8_t *)read_buf;
   2c5e0:	9303      	str	r3, [sp, #12]
	msg[0].len = num_write;
   2c5e2:	2201      	movs	r2, #1
	msg[1].len = num_read;
   2c5e4:	9b08      	ldr	r3, [sp, #32]
	msg[0].len = num_write;
   2c5e6:	9201      	str	r2, [sp, #4]
	msg[1].len = num_read;
   2c5e8:	9304      	str	r3, [sp, #16]
	msg[0].flags = I2C_MSG_WRITE;
   2c5ea:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c5ec:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   2c5ee:	f88d 2008 	strb.w	r2, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c5f2:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c5f6:	6883      	ldr	r3, [r0, #8]
   2c5f8:	2202      	movs	r2, #2
   2c5fa:	685c      	ldr	r4, [r3, #4]
   2c5fc:	460b      	mov	r3, r1
   2c5fe:	4669      	mov	r1, sp
   2c600:	47a0      	blx	r4
}
   2c602:	b006      	add	sp, #24
   2c604:	bd10      	pop	{r4, pc}

0002c606 <i2c_reg_write_byte>:
{
   2c606:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_buf[2] = {reg_addr, value};
   2c608:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
   2c60c:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   2c60e:	f88d 2000 	strb.w	r2, [sp]
	msg.buf = (uint8_t *)buf;
   2c612:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   2c616:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2c618:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c61c:	6883      	ldr	r3, [r0, #8]
   2c61e:	2201      	movs	r2, #1
   2c620:	685c      	ldr	r4, [r3, #4]
   2c622:	460b      	mov	r3, r1
   2c624:	a901      	add	r1, sp, #4
   2c626:	47a0      	blx	r4
}
   2c628:	b004      	add	sp, #16
   2c62a:	bd10      	pop	{r4, pc}

0002c62c <i2c_reg_update_byte>:
{
   2c62c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c62e:	b085      	sub	sp, #20
   2c630:	461c      	mov	r4, r3
	return i2c_write_read(dev, dev_addr,
   2c632:	2301      	movs	r3, #1
{
   2c634:	4615      	mov	r5, r2
   2c636:	f88d 200f 	strb.w	r2, [sp, #15]
	return i2c_write_read(dev, dev_addr,
   2c63a:	9300      	str	r3, [sp, #0]
   2c63c:	f10d 020f 	add.w	r2, sp, #15
   2c640:	f10d 030e 	add.w	r3, sp, #14
{
   2c644:	4606      	mov	r6, r0
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   2c646:	460f      	mov	r7, r1
	return i2c_write_read(dev, dev_addr,
   2c648:	f7ff ffc7 	bl	2c5da <i2c_write_read.constprop.0>
	if (rc != 0) {
   2c64c:	b970      	cbnz	r0, 2c66c <i2c_reg_update_byte+0x40>
	new_value = (old_value & ~mask) | (value & mask);
   2c64e:	f89d 200e 	ldrb.w	r2, [sp, #14]
   2c652:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   2c656:	ea22 0304 	bic.w	r3, r2, r4
   2c65a:	400c      	ands	r4, r1
   2c65c:	4323      	orrs	r3, r4
	if (new_value == old_value) {
   2c65e:	429a      	cmp	r2, r3
   2c660:	d004      	beq.n	2c66c <i2c_reg_update_byte+0x40>
	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
   2c662:	462a      	mov	r2, r5
   2c664:	4639      	mov	r1, r7
   2c666:	4630      	mov	r0, r6
   2c668:	f7ff ffcd 	bl	2c606 <i2c_reg_write_byte>
}
   2c66c:	b005      	add	sp, #20
   2c66e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c670 <fxos8700_sample_fetch>:
{
   2c670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (chan != SENSOR_CHAN_ALL) {
   2c674:	2938      	cmp	r1, #56	; 0x38
	const struct fxos8700_config *config = dev->config;
   2c676:	6847      	ldr	r7, [r0, #4]
	struct fxos8700_data *data = dev->data;
   2c678:	68c6      	ldr	r6, [r0, #12]
{
   2c67a:	b086      	sub	sp, #24
	if (chan != SENSOR_CHAN_ALL) {
   2c67c:	d136      	bne.n	2c6ec <fxos8700_sample_fetch+0x7c>
	k_sem_take(&data->sem, K_FOREVER);
   2c67e:	f106 0804 	add.w	r8, r6, #4
   2c682:	f04f 32ff 	mov.w	r2, #4294967295
   2c686:	f04f 33ff 	mov.w	r3, #4294967295
   2c68a:	4640      	mov	r0, r8
   2c68c:	f7f7 fa38 	bl	23b00 <z_impl_k_sem_take>
	num_bytes = config->num_channels * FXOS8700_BYTES_PER_CHANNEL_NORMAL;
   2c690:	7dfd      	ldrb	r5, [r7, #23]
   2c692:	7d7b      	ldrb	r3, [r7, #21]
	if (i2c_burst_read(data->i2c, config->i2c_address, config->start_addr,
   2c694:	6830      	ldr	r0, [r6, #0]
   2c696:	7ab9      	ldrb	r1, [r7, #10]
   2c698:	f88d 300b 	strb.w	r3, [sp, #11]
	num_bytes = config->num_channels * FXOS8700_BYTES_PER_CHANNEL_NORMAL;
   2c69c:	006d      	lsls	r5, r5, #1
   2c69e:	b2ed      	uxtb	r5, r5
	if (i2c_burst_read(data->i2c, config->i2c_address, config->start_addr,
   2c6a0:	9500      	str	r5, [sp, #0]
	return i2c_write_read(dev, dev_addr,
   2c6a2:	ab03      	add	r3, sp, #12
   2c6a4:	f10d 020b 	add.w	r2, sp, #11
   2c6a8:	f7ff ff97 	bl	2c5da <i2c_write_read.constprop.0>
   2c6ac:	4604      	mov	r4, r0
   2c6ae:	b9d0      	cbnz	r0, 2c6e6 <fxos8700_sample_fetch+0x76>
	raw = &data->raw[config->start_channel];
   2c6b0:	7dbb      	ldrb	r3, [r7, #22]
   2c6b2:	f503 731b 	add.w	r3, r3, #620	; 0x26c
   2c6b6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
	for (i = 0; i < num_bytes; i += 2) {
   2c6ba:	4602      	mov	r2, r0
   2c6bc:	ab03      	add	r3, sp, #12
   2c6be:	42aa      	cmp	r2, r5
   2c6c0:	f103 0302 	add.w	r3, r3, #2
   2c6c4:	db06      	blt.n	2c6d4 <fxos8700_sample_fetch+0x64>
	z_impl_k_sem_give(sem);
   2c6c6:	4640      	mov	r0, r8
   2c6c8:	f7f7 f9f4 	bl	23ab4 <z_impl_k_sem_give>
}
   2c6cc:	4620      	mov	r0, r4
   2c6ce:	b006      	add	sp, #24
   2c6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*raw++ = (buffer[i] << 8) | (buffer[i+1]);
   2c6d4:	f813 0c02 	ldrb.w	r0, [r3, #-2]
   2c6d8:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2c6dc:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   2c6e0:	52b1      	strh	r1, [r6, r2]
	for (i = 0; i < num_bytes; i += 2) {
   2c6e2:	3202      	adds	r2, #2
   2c6e4:	e7eb      	b.n	2c6be <fxos8700_sample_fetch+0x4e>
		ret = -EIO;
   2c6e6:	f06f 0404 	mvn.w	r4, #4
   2c6ea:	e7ec      	b.n	2c6c6 <fxos8700_sample_fetch+0x56>
		return -ENOTSUP;
   2c6ec:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2c6f0:	e7ec      	b.n	2c6cc <fxos8700_sample_fetch+0x5c>

0002c6f2 <fxos8700_get_power>:
{
   2c6f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct fxos8700_config *config = dev->config;
   2c6f4:	6843      	ldr	r3, [r0, #4]
	struct fxos8700_data *data = dev->data;
   2c6f6:	68c2      	ldr	r2, [r0, #12]
{
   2c6f8:	460c      	mov	r4, r1
	uint8_t val = *power;
   2c6fa:	7809      	ldrb	r1, [r1, #0]
   2c6fc:	f88d 100e 	strb.w	r1, [sp, #14]
	if (i2c_reg_read_byte(data->i2c, config->i2c_address,
   2c700:	7a99      	ldrb	r1, [r3, #10]
   2c702:	6810      	ldr	r0, [r2, #0]
   2c704:	232a      	movs	r3, #42	; 0x2a
   2c706:	f88d 300f 	strb.w	r3, [sp, #15]
	return i2c_write_read(dev, dev_addr,
   2c70a:	2301      	movs	r3, #1
   2c70c:	9300      	str	r3, [sp, #0]
   2c70e:	f10d 020f 	add.w	r2, sp, #15
   2c712:	f10d 030e 	add.w	r3, sp, #14
   2c716:	f7ff ff60 	bl	2c5da <i2c_write_read.constprop.0>
   2c71a:	b930      	cbnz	r0, 2c72a <fxos8700_get_power+0x38>
	val &= FXOS8700_M_CTRLREG1_MODE_MASK;
   2c71c:	f89d 300e 	ldrb.w	r3, [sp, #14]
   2c720:	f003 0303 	and.w	r3, r3, #3
	*power = val;
   2c724:	7023      	strb	r3, [r4, #0]
}
   2c726:	b004      	add	sp, #16
   2c728:	bd10      	pop	{r4, pc}
		return -EIO;
   2c72a:	f06f 0004 	mvn.w	r0, #4
   2c72e:	e7fa      	b.n	2c726 <fxos8700_get_power+0x34>

0002c730 <fxos8700_set_power>:
{
   2c730:	b507      	push	{r0, r1, r2, lr}
	return i2c_reg_update_byte(data->i2c, config->i2c_address,
   2c732:	6842      	ldr	r2, [r0, #4]
   2c734:	68c0      	ldr	r0, [r0, #12]
{
   2c736:	460b      	mov	r3, r1
	return i2c_reg_update_byte(data->i2c, config->i2c_address,
   2c738:	7a91      	ldrb	r1, [r2, #10]
   2c73a:	9300      	str	r3, [sp, #0]
   2c73c:	222a      	movs	r2, #42	; 0x2a
   2c73e:	2301      	movs	r3, #1
   2c740:	6800      	ldr	r0, [r0, #0]
   2c742:	f7ff ff73 	bl	2c62c <i2c_reg_update_byte>
}
   2c746:	b003      	add	sp, #12
   2c748:	f85d fb04 	ldr.w	pc, [sp], #4

0002c74c <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c74c:	0413      	lsls	r3, r2, #16
{
   2c74e:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   2c750:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c752:	d507      	bpl.n	2c764 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2c754:	68c5      	ldr	r5, [r0, #12]
   2c756:	2301      	movs	r3, #1
   2c758:	682d      	ldr	r5, [r5, #0]
   2c75a:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c75c:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2c75e:	bf18      	it	ne
   2c760:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c764:	69a4      	ldr	r4, [r4, #24]
   2c766:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   2c76a:	46a4      	mov	ip, r4
   2c76c:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   2c770:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c772:	4760      	bx	ip

0002c774 <i2c_reg_write_byte>:
{
   2c774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tx_buf[2] = {reg_addr, value};
   2c776:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
   2c77a:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   2c77c:	f88d 2000 	strb.w	r2, [sp]
	msg.buf = (uint8_t *)buf;
   2c780:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   2c784:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2c786:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c78a:	6883      	ldr	r3, [r0, #8]
   2c78c:	2201      	movs	r2, #1
   2c78e:	685c      	ldr	r4, [r3, #4]
   2c790:	460b      	mov	r3, r1
   2c792:	a901      	add	r1, sp, #4
   2c794:	47a0      	blx	r4
}
   2c796:	b004      	add	sp, #16
   2c798:	bd10      	pop	{r4, pc}

0002c79a <fxos8700_gpio_callback>:
{
   2c79a:	b510      	push	{r4, lr}
   2c79c:	460c      	mov	r4, r1
	if ((pin_mask & BIT(data->gpio_pin)) == 0U) {
   2c79e:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   2c7a2:	40ca      	lsrs	r2, r1
   2c7a4:	07d3      	lsls	r3, r2, #31
   2c7a6:	d50b      	bpl.n	2c7c0 <fxos8700_gpio_callback+0x26>
	gpio_pin_interrupt_configure(data->gpio, data->gpio_pin,
   2c7a8:	f854 0c08 	ldr.w	r0, [r4, #-8]
   2c7ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2c7b0:	f7ff ffcc 	bl	2c74c <z_impl_gpio_pin_interrupt_configure>
   2c7b4:	f504 6093 	add.w	r0, r4, #1176	; 0x498
}
   2c7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c7bc:	f7f7 b97a 	b.w	23ab4 <z_impl_k_sem_give>
   2c7c0:	bd10      	pop	{r4, pc}

0002c7c2 <fxos8700_trigger_set>:
{
   2c7c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct fxos8700_data *data = dev->data;
   2c7c6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	const struct fxos8700_config *config = dev->config;
   2c7ca:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   2c7ce:	b089      	sub	sp, #36	; 0x24
	enum fxos8700_power power = FXOS8700_POWER_STANDBY;
   2c7d0:	2300      	movs	r3, #0
{
   2c7d2:	4605      	mov	r5, r0
   2c7d4:	460c      	mov	r4, r1
   2c7d6:	4616      	mov	r6, r2
	enum fxos8700_power power = FXOS8700_POWER_STANDBY;
   2c7d8:	f88d 3005 	strb.w	r3, [sp, #5]
	k_sem_take(&data->sem, K_FOREVER);
   2c7dc:	f108 0704 	add.w	r7, r8, #4
	return z_impl_k_sem_take(sem, timeout);
   2c7e0:	f04f 32ff 	mov.w	r2, #4294967295
   2c7e4:	f04f 33ff 	mov.w	r3, #4294967295
   2c7e8:	4638      	mov	r0, r7
   2c7ea:	f7f7 f989 	bl	23b00 <z_impl_k_sem_take>
	switch (trig->type) {
   2c7ee:	8824      	ldrh	r4, [r4, #0]
   2c7f0:	2c01      	cmp	r4, #1
   2c7f2:	d00a      	beq.n	2c80a <fxos8700_trigger_set+0x48>
   2c7f4:	2c02      	cmp	r4, #2
   2c7f6:	d057      	beq.n	2c8a8 <fxos8700_trigger_set+0xe6>
   2c7f8:	f06f 0422 	mvn.w	r4, #34	; 0x22
	z_impl_k_sem_give(sem);
   2c7fc:	4638      	mov	r0, r7
   2c7fe:	f7f7 f959 	bl	23ab4 <z_impl_k_sem_give>
}
   2c802:	4620      	mov	r0, r4
   2c804:	b009      	add	sp, #36	; 0x24
   2c806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		data->drdy_handler = handler;
   2c80a:	f8c8 6034 	str.w	r6, [r8, #52]	; 0x34
	if (fxos8700_get_power(dev, &power)) {
   2c80e:	f10d 0105 	add.w	r1, sp, #5
   2c812:	4628      	mov	r0, r5
   2c814:	f7ff ff6d 	bl	2c6f2 <fxos8700_get_power>
   2c818:	4601      	mov	r1, r0
   2c81a:	2800      	cmp	r0, #0
   2c81c:	d141      	bne.n	2c8a2 <fxos8700_trigger_set+0xe0>
	if (fxos8700_set_power(dev, FXOS8700_POWER_STANDBY)) {
   2c81e:	4628      	mov	r0, r5
   2c820:	f7ff ff86 	bl	2c730 <fxos8700_set_power>
   2c824:	2800      	cmp	r0, #0
   2c826:	d13c      	bne.n	2c8a2 <fxos8700_trigger_set+0xe0>
	msg[0].buf = (uint8_t *)write_buf;
   2c828:	f10d 0307 	add.w	r3, sp, #7
	if (i2c_reg_update_byte(data->i2c, config->i2c_address,
   2c82c:	f8d8 8000 	ldr.w	r8, [r8]
   2c830:	9302      	str	r3, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   2c832:	f10d 0206 	add.w	r2, sp, #6
	msg[0].len = num_write;
   2c836:	2301      	movs	r3, #1
   2c838:	2e00      	cmp	r6, #0
   2c83a:	9303      	str	r3, [sp, #12]
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   2c83c:	f899 600a 	ldrb.w	r6, [r9, #10]
	msg[0].flags = I2C_MSG_WRITE;
   2c840:	f88d 0010 	strb.w	r0, [sp, #16]
	msg[1].len = num_read;
   2c844:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2c848:	f04f 092d 	mov.w	r9, #45	; 0x2d
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c84c:	f04f 0307 	mov.w	r3, #7
   2c850:	bf14      	ite	ne
   2c852:	46a2      	movne	sl, r4
   2c854:	f04f 0a00 	moveq.w	sl, #0
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   2c858:	f88d 9007 	strb.w	r9, [sp, #7]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c85c:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c860:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2c864:	2202      	movs	r2, #2
   2c866:	f8d3 b004 	ldr.w	fp, [r3, #4]
   2c86a:	a902      	add	r1, sp, #8
   2c86c:	4633      	mov	r3, r6
   2c86e:	4640      	mov	r0, r8
   2c870:	47d8      	blx	fp
	if (rc != 0) {
   2c872:	b9b0      	cbnz	r0, 2c8a2 <fxos8700_trigger_set+0xe0>
	new_value = (old_value & ~mask) | (value & mask);
   2c874:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2c878:	ea22 0304 	bic.w	r3, r2, r4
   2c87c:	ea0a 0404 	and.w	r4, sl, r4
   2c880:	4323      	orrs	r3, r4
	if (new_value == old_value) {
   2c882:	429a      	cmp	r2, r3
   2c884:	d005      	beq.n	2c892 <fxos8700_trigger_set+0xd0>
	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
   2c886:	464a      	mov	r2, r9
   2c888:	4631      	mov	r1, r6
   2c88a:	4640      	mov	r0, r8
   2c88c:	f7ff ff72 	bl	2c774 <i2c_reg_write_byte>
   2c890:	b938      	cbnz	r0, 2c8a2 <fxos8700_trigger_set+0xe0>
	if (fxos8700_set_power(dev, power)) {
   2c892:	f89d 1005 	ldrb.w	r1, [sp, #5]
   2c896:	4628      	mov	r0, r5
   2c898:	f7ff ff4a 	bl	2c730 <fxos8700_set_power>
   2c89c:	4604      	mov	r4, r0
   2c89e:	2800      	cmp	r0, #0
   2c8a0:	d0ac      	beq.n	2c7fc <fxos8700_trigger_set+0x3a>
		ret = -EIO;
   2c8a2:	f06f 0404 	mvn.w	r4, #4
   2c8a6:	e7a9      	b.n	2c7fc <fxos8700_trigger_set+0x3a>
		data->motion_handler = handler;
   2c8a8:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
		mask = FXOS8700_MOTION_MASK;
   2c8ac:	2404      	movs	r4, #4
		break;
   2c8ae:	e7ae      	b.n	2c80e <fxos8700_trigger_set+0x4c>

0002c8b0 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
   2c8b0:	b410      	push	{r4}
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c8b2:	040c      	lsls	r4, r1, #16
	const struct gpio_driver_api *api =
   2c8b4:	6883      	ldr	r3, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c8b6:	d505      	bpl.n	2c8c4 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x14>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2c8b8:	68c2      	ldr	r2, [r0, #12]
   2c8ba:	6812      	ldr	r2, [r2, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2c8bc:	0252      	lsls	r2, r2, #9
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2c8be:	bf48      	it	mi
   2c8c0:	f481 21c0 	eormi.w	r1, r1, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c8c4:	699c      	ldr	r4, [r3, #24]
   2c8c6:	f401 32b0 	and.w	r2, r1, #90112	; 0x16000
   2c8ca:	f401 23c0 	and.w	r3, r1, #393216	; 0x60000
   2c8ce:	46a4      	mov	ip, r4
   2c8d0:	2116      	movs	r1, #22
}
   2c8d2:	bc10      	pop	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2c8d4:	4760      	bx	ip

0002c8d6 <read16.constprop.0>:
static uint16_t read16(const struct device *dev, uint8_t a, uint8_t d)
   2c8d6:	b510      	push	{r4, lr}
   2c8d8:	b088      	sub	sp, #32
	msg[0].buf = (uint8_t *)write_buf;
   2c8da:	f10d 0203 	add.w	r2, sp, #3
   2c8de:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   2c8e0:	2201      	movs	r2, #1
   2c8e2:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   2c8e4:	2200      	movs	r2, #0
   2c8e6:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   2c8ea:	aa01      	add	r2, sp, #4
   2c8ec:	f88d 1003 	strb.w	r1, [sp, #3]
   2c8f0:	9205      	str	r2, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c8f2:	2107      	movs	r1, #7
	msg[1].len = num_read;
   2c8f4:	2202      	movs	r2, #2
   2c8f6:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2c8f8:	f88d 101c 	strb.w	r1, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c8fc:	6883      	ldr	r3, [r0, #8]
   2c8fe:	a902      	add	r1, sp, #8
   2c900:	685c      	ldr	r4, [r3, #4]
   2c902:	2343      	movs	r3, #67	; 0x43
   2c904:	47a0      	blx	r4
	return (buf[0] << 8 | buf[1]);
   2c906:	f89d 0004 	ldrb.w	r0, [sp, #4]
   2c90a:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
   2c90e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   2c912:	b008      	add	sp, #32
   2c914:	bd10      	pop	{r4, pc}

0002c916 <ti_hdc_gpio_callback>:
{
   2c916:	b510      	push	{r4, lr}
	gpio_pin_interrupt_configure(drv_data->gpio,
   2c918:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
   2c91c:	460c      	mov	r4, r1
   2c91e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   2c922:	f7ff ffc5 	bl	2c8b0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
   2c926:	f104 000c 	add.w	r0, r4, #12
}
   2c92a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c92e:	f7f7 b8c1 	b.w	23ab4 <z_impl_k_sem_give>

0002c932 <ti_hdc_sample_fetch>:
{
   2c932:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct ti_hdc_data *drv_data = dev->data;
   2c934:	68c4      	ldr	r4, [r0, #12]
{
   2c936:	b085      	sub	sp, #20
	gpio_pin_interrupt_configure(drv_data->gpio,
   2c938:	68a0      	ldr	r0, [r4, #8]
   2c93a:	f44f 21b8 	mov.w	r1, #376832	; 0x5c000
	buf[0] = TI_HDC_REG_TEMP;
   2c93e:	2500      	movs	r5, #0
   2c940:	f7ff ffb6 	bl	2c8b0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
	msg.len = num_bytes;
   2c944:	2601      	movs	r6, #1
   2c946:	f88d 5000 	strb.w	r5, [sp]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2c94a:	2302      	movs	r3, #2
	if (i2c_write(drv_data->i2c, buf, 1,
   2c94c:	6820      	ldr	r0, [r4, #0]
	msg.buf = (uint8_t *)buf;
   2c94e:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   2c952:	9602      	str	r6, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2c954:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c958:	6883      	ldr	r3, [r0, #8]
   2c95a:	4632      	mov	r2, r6
   2c95c:	685f      	ldr	r7, [r3, #4]
   2c95e:	a901      	add	r1, sp, #4
   2c960:	2343      	movs	r3, #67	; 0x43
   2c962:	47b8      	blx	r7
   2c964:	42a8      	cmp	r0, r5
   2c966:	da03      	bge.n	2c970 <ti_hdc_sample_fetch+0x3e>
		return -EIO;
   2c968:	f06f 0004 	mvn.w	r0, #4
}
   2c96c:	b005      	add	sp, #20
   2c96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_k_sem_take(sem, timeout);
   2c970:	f04f 32ff 	mov.w	r2, #4294967295
   2c974:	f04f 33ff 	mov.w	r3, #4294967295
   2c978:	f104 0018 	add.w	r0, r4, #24
   2c97c:	f7f7 f8c0 	bl	23b00 <z_impl_k_sem_take>
	msg.len = num_bytes;
   2c980:	2304      	movs	r3, #4
	if (i2c_read(drv_data->i2c, buf, 4, DT_INST_REG_ADDR(0)) < 0) {
   2c982:	6820      	ldr	r0, [r4, #0]
   2c984:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   2c986:	2303      	movs	r3, #3
	msg.buf = buf;
   2c988:	f8cd d004 	str.w	sp, [sp, #4]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
   2c98c:	f88d 300c 	strb.w	r3, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   2c990:	6883      	ldr	r3, [r0, #8]
   2c992:	4632      	mov	r2, r6
   2c994:	685f      	ldr	r7, [r3, #4]
   2c996:	a901      	add	r1, sp, #4
   2c998:	2343      	movs	r3, #67	; 0x43
   2c99a:	47b8      	blx	r7
   2c99c:	2800      	cmp	r0, #0
   2c99e:	dbe3      	blt.n	2c968 <ti_hdc_sample_fetch+0x36>
	drv_data->t_sample = (buf[0] << 8) + buf[1];
   2c9a0:	f89d 2000 	ldrb.w	r2, [sp]
   2c9a4:	f89d 3001 	ldrb.w	r3, [sp, #1]
   2c9a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2c9ac:	80a3      	strh	r3, [r4, #4]
	drv_data->rh_sample = (buf[2] << 8) + buf[3];
   2c9ae:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2c9b2:	f89d 2002 	ldrb.w	r2, [sp, #2]
   2c9b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   2c9ba:	80e3      	strh	r3, [r4, #6]
	return 0;
   2c9bc:	4628      	mov	r0, r5
   2c9be:	e7d5      	b.n	2c96c <ti_hdc_sample_fetch+0x3a>

0002c9c0 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2c9c0:	2301      	movs	r3, #1
   2c9c2:	fa03 f101 	lsl.w	r1, r3, r1
   2c9c6:	68c3      	ldr	r3, [r0, #12]
   2c9c8:	681b      	ldr	r3, [r3, #0]
   2c9ca:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2c9cc:	bf18      	it	ne
   2c9ce:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2c9d2:	b112      	cbz	r2, 2c9da <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   2c9d4:	6883      	ldr	r3, [r0, #8]
   2c9d6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2c9d8:	4718      	bx	r3
   2c9da:	6883      	ldr	r3, [r0, #8]
   2c9dc:	691b      	ldr	r3, [r3, #16]
   2c9de:	e7fb      	b.n	2c9d8 <gpio_pin_set+0x18>

0002c9e0 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2c9e0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2c9e2:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2c9e4:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2c9e6:	b1fd      	cbz	r5, 2ca28 <_spi_context_cs_control.isra.0+0x48>
   2c9e8:	68ab      	ldr	r3, [r5, #8]
   2c9ea:	b1eb      	cbz	r3, 2ca28 <_spi_context_cs_control.isra.0+0x48>
   2c9ec:	6818      	ldr	r0, [r3, #0]
   2c9ee:	b1d8      	cbz	r0, 2ca28 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   2c9f0:	b151      	cbz	r1, 2ca08 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2c9f2:	7a19      	ldrb	r1, [r3, #8]
   2c9f4:	2201      	movs	r2, #1
   2c9f6:	f7ff ffe3 	bl	2c9c0 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   2c9fa:	6823      	ldr	r3, [r4, #0]
   2c9fc:	689b      	ldr	r3, [r3, #8]
   2c9fe:	6858      	ldr	r0, [r3, #4]
}
   2ca00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2ca04:	f000 bd64 	b.w	2d4d0 <z_impl_k_busy_wait>
			if (!force_off &&
   2ca08:	b912      	cbnz	r2, 2ca10 <_spi_context_cs_control.isra.0+0x30>
   2ca0a:	88aa      	ldrh	r2, [r5, #4]
   2ca0c:	0492      	lsls	r2, r2, #18
   2ca0e:	d40b      	bmi.n	2ca28 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   2ca10:	6858      	ldr	r0, [r3, #4]
   2ca12:	f000 fd5d 	bl	2d4d0 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2ca16:	6823      	ldr	r3, [r4, #0]
   2ca18:	689b      	ldr	r3, [r3, #8]
   2ca1a:	2200      	movs	r2, #0
   2ca1c:	7a19      	ldrb	r1, [r3, #8]
   2ca1e:	6818      	ldr	r0, [r3, #0]
}
   2ca20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2ca24:	f7ff bfcc 	b.w	2c9c0 <gpio_pin_set>
}
   2ca28:	bd38      	pop	{r3, r4, r5, pc}

0002ca2a <spi_context_unlock_unconditionally>:
{
   2ca2a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2ca2c:	2201      	movs	r2, #1
   2ca2e:	2100      	movs	r1, #0
{
   2ca30:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2ca32:	f7ff ffd5 	bl	2c9e0 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   2ca36:	68e3      	ldr	r3, [r4, #12]
   2ca38:	b923      	cbnz	r3, 2ca44 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   2ca3a:	1d20      	adds	r0, r4, #4
}
   2ca3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ca40:	f7f7 b838 	b.w	23ab4 <z_impl_k_sem_give>
   2ca44:	bd10      	pop	{r4, pc}

0002ca46 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2ca46:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2ca48:	6803      	ldr	r3, [r0, #0]
   2ca4a:	428b      	cmp	r3, r1
{
   2ca4c:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2ca4e:	d106      	bne.n	2ca5e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2ca50:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
   2ca54:	b934      	cbnz	r4, 2ca64 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2ca56:	f7ff ffe8 	bl	2ca2a <spi_context_unlock_unconditionally>
	return 0;
   2ca5a:	4620      	mov	r0, r4
}
   2ca5c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2ca5e:	f06f 0015 	mvn.w	r0, #21
   2ca62:	e7fb      	b.n	2ca5c <spi_nrfx_release+0x16>
		return -EBUSY;
   2ca64:	f06f 000f 	mvn.w	r0, #15
   2ca68:	e7f8      	b.n	2ca5c <spi_nrfx_release+0x16>

0002ca6a <spi_nrfx_transceive_async>:
{
   2ca6a:	b513      	push	{r0, r1, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, async);
   2ca6c:	9c04      	ldr	r4, [sp, #16]
   2ca6e:	9401      	str	r4, [sp, #4]
   2ca70:	2401      	movs	r4, #1
   2ca72:	9400      	str	r4, [sp, #0]
   2ca74:	f7f4 f9e0 	bl	20e38 <transceive>
}
   2ca78:	b002      	add	sp, #8
   2ca7a:	bd10      	pop	{r4, pc}

0002ca7c <spi_nrfx_transceive>:
{
   2ca7c:	b513      	push	{r0, r1, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   2ca7e:	2400      	movs	r4, #0
   2ca80:	e9cd 4400 	strd	r4, r4, [sp]
   2ca84:	f7f4 f9d8 	bl	20e38 <transceive>
}
   2ca88:	b002      	add	sp, #8
   2ca8a:	bd10      	pop	{r4, pc}

0002ca8c <event_handler>:
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   2ca8c:	7803      	ldrb	r3, [r0, #0]
   2ca8e:	2b00      	cmp	r3, #0
   2ca90:	d135      	bne.n	2cafe <event_handler+0x72>
	if (!ctx->tx_len) {
   2ca92:	6d4a      	ldr	r2, [r1, #84]	; 0x54
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   2ca94:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2ca96:	b182      	cbz	r2, 2caba <event_handler+0x2e>
	if (len > ctx->tx_len) {
   2ca98:	4293      	cmp	r3, r2
   2ca9a:	d80e      	bhi.n	2caba <event_handler+0x2e>
	ctx->tx_len -= len;
   2ca9c:	1ad2      	subs	r2, r2, r3
   2ca9e:	654a      	str	r2, [r1, #84]	; 0x54
	if (!ctx->tx_len) {
   2caa0:	bb0a      	cbnz	r2, 2cae6 <event_handler+0x5a>
		ctx->tx_count--;
   2caa2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2caa4:	3a01      	subs	r2, #1
   2caa6:	644a      	str	r2, [r1, #68]	; 0x44
		if (ctx->tx_count) {
   2caa8:	b30a      	cbz	r2, 2caee <event_handler+0x62>
			ctx->current_tx++;
   2caaa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
   2caac:	f102 0008 	add.w	r0, r2, #8
   2cab0:	6408      	str	r0, [r1, #64]	; 0x40
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   2cab2:	6890      	ldr	r0, [r2, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   2cab4:	68d2      	ldr	r2, [r2, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   2cab6:	6508      	str	r0, [r1, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
   2cab8:	654a      	str	r2, [r1, #84]	; 0x54
	if (!ctx->rx_len) {
   2caba:	6dca      	ldr	r2, [r1, #92]	; 0x5c
   2cabc:	b182      	cbz	r2, 2cae0 <event_handler+0x54>
	if (len > ctx->rx_len) {
   2cabe:	4293      	cmp	r3, r2
   2cac0:	d80e      	bhi.n	2cae0 <event_handler+0x54>
	ctx->rx_len -= len;
   2cac2:	1ad2      	subs	r2, r2, r3
   2cac4:	65ca      	str	r2, [r1, #92]	; 0x5c
	if (!ctx->rx_len) {
   2cac6:	b9a2      	cbnz	r2, 2caf2 <event_handler+0x66>
		ctx->rx_count--;
   2cac8:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   2caca:	3b01      	subs	r3, #1
   2cacc:	64cb      	str	r3, [r1, #76]	; 0x4c
		if (ctx->rx_count) {
   2cace:	b1a3      	cbz	r3, 2cafa <event_handler+0x6e>
			ctx->current_rx++;
   2cad0:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   2cad2:	f103 0208 	add.w	r2, r3, #8
   2cad6:	648a      	str	r2, [r1, #72]	; 0x48
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   2cad8:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   2cada:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   2cadc:	658a      	str	r2, [r1, #88]	; 0x58
			ctx->rx_len = ctx->current_rx->len / dfs;
   2cade:	65cb      	str	r3, [r1, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   2cae0:	6e08      	ldr	r0, [r1, #96]	; 0x60
   2cae2:	f7f4 b95b 	b.w	20d9c <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   2cae6:	6d0a      	ldr	r2, [r1, #80]	; 0x50
   2cae8:	2a00      	cmp	r2, #0
   2caea:	d0e6      	beq.n	2caba <event_handler+0x2e>
		ctx->tx_buf += dfs * len;
   2caec:	441a      	add	r2, r3
   2caee:	650a      	str	r2, [r1, #80]	; 0x50
   2caf0:	e7e3      	b.n	2caba <event_handler+0x2e>
	} else if (ctx->rx_buf) {
   2caf2:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   2caf4:	2a00      	cmp	r2, #0
   2caf6:	d0f3      	beq.n	2cae0 <event_handler+0x54>
		ctx->rx_buf += dfs * len;
   2caf8:	4413      	add	r3, r2
   2cafa:	658b      	str	r3, [r1, #88]	; 0x58
   2cafc:	e7f0      	b.n	2cae0 <event_handler+0x54>
}
   2cafe:	4770      	bx	lr

0002cb00 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2cb00:	2301      	movs	r3, #1
   2cb02:	fa03 f101 	lsl.w	r1, r3, r1
   2cb06:	68c3      	ldr	r3, [r0, #12]
   2cb08:	681b      	ldr	r3, [r3, #0]
   2cb0a:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2cb0c:	bf18      	it	ne
   2cb0e:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2cb12:	b112      	cbz	r2, 2cb1a <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   2cb14:	6883      	ldr	r3, [r0, #8]
   2cb16:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2cb18:	4718      	bx	r3
   2cb1a:	6883      	ldr	r3, [r0, #8]
   2cb1c:	691b      	ldr	r3, [r3, #16]
   2cb1e:	e7fb      	b.n	2cb18 <gpio_pin_set+0x18>

0002cb20 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2cb20:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2cb22:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2cb24:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2cb26:	b1fd      	cbz	r5, 2cb68 <_spi_context_cs_control.isra.0+0x48>
   2cb28:	68ab      	ldr	r3, [r5, #8]
   2cb2a:	b1eb      	cbz	r3, 2cb68 <_spi_context_cs_control.isra.0+0x48>
   2cb2c:	6818      	ldr	r0, [r3, #0]
   2cb2e:	b1d8      	cbz	r0, 2cb68 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   2cb30:	b151      	cbz	r1, 2cb48 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2cb32:	7a19      	ldrb	r1, [r3, #8]
   2cb34:	2201      	movs	r2, #1
   2cb36:	f7ff ffe3 	bl	2cb00 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   2cb3a:	6823      	ldr	r3, [r4, #0]
   2cb3c:	689b      	ldr	r3, [r3, #8]
   2cb3e:	6858      	ldr	r0, [r3, #4]
}
   2cb40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2cb44:	f000 bcc4 	b.w	2d4d0 <z_impl_k_busy_wait>
			if (!force_off &&
   2cb48:	b912      	cbnz	r2, 2cb50 <_spi_context_cs_control.isra.0+0x30>
   2cb4a:	88aa      	ldrh	r2, [r5, #4]
   2cb4c:	0492      	lsls	r2, r2, #18
   2cb4e:	d40b      	bmi.n	2cb68 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   2cb50:	6858      	ldr	r0, [r3, #4]
   2cb52:	f000 fcbd 	bl	2d4d0 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2cb56:	6823      	ldr	r3, [r4, #0]
   2cb58:	689b      	ldr	r3, [r3, #8]
   2cb5a:	2200      	movs	r2, #0
   2cb5c:	7a19      	ldrb	r1, [r3, #8]
   2cb5e:	6818      	ldr	r0, [r3, #0]
}
   2cb60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2cb64:	f7ff bfcc 	b.w	2cb00 <gpio_pin_set>
}
   2cb68:	bd38      	pop	{r3, r4, r5, pc}

0002cb6a <spi_context_unlock_unconditionally>:
{
   2cb6a:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   2cb6c:	2201      	movs	r2, #1
   2cb6e:	2100      	movs	r1, #0
{
   2cb70:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2cb72:	f7ff ffd5 	bl	2cb20 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   2cb76:	68e3      	ldr	r3, [r4, #12]
   2cb78:	b923      	cbnz	r3, 2cb84 <spi_context_unlock_unconditionally+0x1a>
	z_impl_k_sem_give(sem);
   2cb7a:	1d20      	adds	r0, r4, #4
}
   2cb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cb80:	f7f6 bf98 	b.w	23ab4 <z_impl_k_sem_give>
   2cb84:	bd10      	pop	{r4, pc}

0002cb86 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2cb86:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2cb88:	6803      	ldr	r3, [r0, #0]
   2cb8a:	428b      	cmp	r3, r1
{
   2cb8c:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2cb8e:	d106      	bne.n	2cb9e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2cb90:	f890 4068 	ldrb.w	r4, [r0, #104]	; 0x68
   2cb94:	b934      	cbnz	r4, 2cba4 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2cb96:	f7ff ffe8 	bl	2cb6a <spi_context_unlock_unconditionally>
	return 0;
   2cb9a:	4620      	mov	r0, r4
}
   2cb9c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2cb9e:	f06f 0015 	mvn.w	r0, #21
   2cba2:	e7fb      	b.n	2cb9c <spi_nrfx_release+0x16>
		return -EBUSY;
   2cba4:	f06f 000f 	mvn.w	r0, #15
   2cba8:	e7f8      	b.n	2cb9c <spi_nrfx_release+0x16>

0002cbaa <spi_nrfx_transceive_async>:
{
   2cbaa:	b513      	push	{r0, r1, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, async);
   2cbac:	9c04      	ldr	r4, [sp, #16]
   2cbae:	9401      	str	r4, [sp, #4]
   2cbb0:	2401      	movs	r4, #1
   2cbb2:	9400      	str	r4, [sp, #0]
   2cbb4:	f7f4 fab2 	bl	2111c <transceive>
}
   2cbb8:	b002      	add	sp, #8
   2cbba:	bd10      	pop	{r4, pc}

0002cbbc <spi_nrfx_transceive>:
{
   2cbbc:	b513      	push	{r0, r1, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
   2cbbe:	2400      	movs	r4, #0
   2cbc0:	e9cd 4400 	strd	r4, r4, [sp]
   2cbc4:	f7f4 faaa 	bl	2111c <transceive>
}
   2cbc8:	b002      	add	sp, #8
   2cbca:	bd10      	pop	{r4, pc}

0002cbcc <event_handler>:
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   2cbcc:	7803      	ldrb	r3, [r0, #0]
   2cbce:	2b00      	cmp	r3, #0
   2cbd0:	d135      	bne.n	2cc3e <event_handler+0x72>
	if (!ctx->tx_len) {
   2cbd2:	6d4a      	ldr	r2, [r1, #84]	; 0x54
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   2cbd4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   2cbd6:	b182      	cbz	r2, 2cbfa <event_handler+0x2e>
	if (len > ctx->tx_len) {
   2cbd8:	4293      	cmp	r3, r2
   2cbda:	d80e      	bhi.n	2cbfa <event_handler+0x2e>
	ctx->tx_len -= len;
   2cbdc:	1ad2      	subs	r2, r2, r3
   2cbde:	654a      	str	r2, [r1, #84]	; 0x54
	if (!ctx->tx_len) {
   2cbe0:	bb0a      	cbnz	r2, 2cc26 <event_handler+0x5a>
		ctx->tx_count--;
   2cbe2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2cbe4:	3a01      	subs	r2, #1
   2cbe6:	644a      	str	r2, [r1, #68]	; 0x44
		if (ctx->tx_count) {
   2cbe8:	b30a      	cbz	r2, 2cc2e <event_handler+0x62>
			ctx->current_tx++;
   2cbea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
   2cbec:	f102 0008 	add.w	r0, r2, #8
   2cbf0:	6408      	str	r0, [r1, #64]	; 0x40
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   2cbf2:	6890      	ldr	r0, [r2, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   2cbf4:	68d2      	ldr	r2, [r2, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   2cbf6:	6508      	str	r0, [r1, #80]	; 0x50
			ctx->tx_len = ctx->current_tx->len / dfs;
   2cbf8:	654a      	str	r2, [r1, #84]	; 0x54
	if (!ctx->rx_len) {
   2cbfa:	6dca      	ldr	r2, [r1, #92]	; 0x5c
   2cbfc:	b182      	cbz	r2, 2cc20 <event_handler+0x54>
	if (len > ctx->rx_len) {
   2cbfe:	4293      	cmp	r3, r2
   2cc00:	d80e      	bhi.n	2cc20 <event_handler+0x54>
	ctx->rx_len -= len;
   2cc02:	1ad2      	subs	r2, r2, r3
   2cc04:	65ca      	str	r2, [r1, #92]	; 0x5c
	if (!ctx->rx_len) {
   2cc06:	b9a2      	cbnz	r2, 2cc32 <event_handler+0x66>
		ctx->rx_count--;
   2cc08:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   2cc0a:	3b01      	subs	r3, #1
   2cc0c:	64cb      	str	r3, [r1, #76]	; 0x4c
		if (ctx->rx_count) {
   2cc0e:	b1a3      	cbz	r3, 2cc3a <event_handler+0x6e>
			ctx->current_rx++;
   2cc10:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   2cc12:	f103 0208 	add.w	r2, r3, #8
   2cc16:	648a      	str	r2, [r1, #72]	; 0x48
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   2cc18:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   2cc1a:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   2cc1c:	658a      	str	r2, [r1, #88]	; 0x58
			ctx->rx_len = ctx->current_rx->len / dfs;
   2cc1e:	65cb      	str	r3, [r1, #92]	; 0x5c
		transfer_next_chunk(dev_data->dev);
   2cc20:	6e08      	ldr	r0, [r1, #96]	; 0x60
   2cc22:	f7f4 ba19 	b.w	21058 <transfer_next_chunk>
	} else if (ctx->tx_buf) {
   2cc26:	6d0a      	ldr	r2, [r1, #80]	; 0x50
   2cc28:	2a00      	cmp	r2, #0
   2cc2a:	d0e6      	beq.n	2cbfa <event_handler+0x2e>
		ctx->tx_buf += dfs * len;
   2cc2c:	441a      	add	r2, r3
   2cc2e:	650a      	str	r2, [r1, #80]	; 0x50
   2cc30:	e7e3      	b.n	2cbfa <event_handler+0x2e>
	} else if (ctx->rx_buf) {
   2cc32:	6d8a      	ldr	r2, [r1, #88]	; 0x58
   2cc34:	2a00      	cmp	r2, #0
   2cc36:	d0f3      	beq.n	2cc20 <event_handler+0x54>
		ctx->rx_buf += dfs * len;
   2cc38:	4413      	add	r3, r2
   2cc3a:	658b      	str	r3, [r1, #88]	; 0x58
   2cc3c:	e7f0      	b.n	2cc20 <event_handler+0x54>
}
   2cc3e:	4770      	bx	lr

0002cc40 <flash_nrf_write_protection>:
}
   2cc40:	2000      	movs	r0, #0
   2cc42:	4770      	bx	lr

0002cc44 <is_regular_addr_valid>:
{
   2cc44:	b538      	push	{r3, r4, r5, lr}
   2cc46:	4604      	mov	r4, r0
   2cc48:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2cc4a:	f000 f922 	bl	2ce92 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   2cc4e:	4284      	cmp	r4, r0
   2cc50:	d209      	bcs.n	2cc66 <is_regular_addr_valid+0x22>
   2cc52:	2c00      	cmp	r4, #0
   2cc54:	db07      	blt.n	2cc66 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   2cc56:	42a8      	cmp	r0, r5
   2cc58:	d305      	bcc.n	2cc66 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2cc5a:	442c      	add	r4, r5
	    len > flash_size ||
   2cc5c:	4284      	cmp	r4, r0
   2cc5e:	bf8c      	ite	hi
   2cc60:	2000      	movhi	r0, #0
   2cc62:	2001      	movls	r0, #1
}
   2cc64:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   2cc66:	2000      	movs	r0, #0
   2cc68:	e7fc      	b.n	2cc64 <is_regular_addr_valid+0x20>

0002cc6a <erase_op>:
{
   2cc6a:	b570      	push	{r4, r5, r6, lr}
   2cc6c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2cc6e:	f000 f916 	bl	2ce9e <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   2cc72:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2cc74:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   2cc76:	b10b      	cbz	r3, 2cc7c <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   2cc78:	f7f4 fcb4 	bl	215e4 <nrf_flash_sync_get_timestamp_begin>
{
   2cc7c:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2cc7e:	6860      	ldr	r0, [r4, #4]
   2cc80:	f7f5 faaa 	bl	221d8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   2cc84:	68a3      	ldr	r3, [r4, #8]
   2cc86:	1b5b      	subs	r3, r3, r5
   2cc88:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2cc8a:	6863      	ldr	r3, [r4, #4]
   2cc8c:	442b      	add	r3, r5
   2cc8e:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   2cc90:	7b23      	ldrb	r3, [r4, #12]
		i++;
   2cc92:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   2cc94:	b943      	cbnz	r3, 2cca8 <erase_op+0x3e>
	} while (e_ctx->len > 0);
   2cc96:	68a3      	ldr	r3, [r4, #8]
   2cc98:	2b00      	cmp	r3, #0
   2cc9a:	d1f0      	bne.n	2cc7e <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2cc9c:	68a0      	ldr	r0, [r4, #8]
   2cc9e:	3800      	subs	r0, #0
   2cca0:	bf18      	it	ne
   2cca2:	2001      	movne	r0, #1
}
   2cca4:	4240      	negs	r0, r0
   2cca6:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   2cca8:	4630      	mov	r0, r6
   2ccaa:	f7d6 fad1 	bl	3250 <nrf_flash_sync_check_time_limit>
   2ccae:	2800      	cmp	r0, #0
   2ccb0:	d0f1      	beq.n	2cc96 <erase_op+0x2c>
   2ccb2:	e7f3      	b.n	2cc9c <erase_op+0x32>

0002ccb4 <flash_nrf_read>:
{
   2ccb4:	b570      	push	{r4, r5, r6, lr}
   2ccb6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   2ccb8:	4628      	mov	r0, r5
   2ccba:	4619      	mov	r1, r3
{
   2ccbc:	4616      	mov	r6, r2
   2ccbe:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2ccc0:	f7ff ffc0 	bl	2cc44 <is_regular_addr_valid>
   2ccc4:	b138      	cbz	r0, 2ccd6 <flash_nrf_read+0x22>
	if (!len) {
   2ccc6:	b14c      	cbz	r4, 2ccdc <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   2ccc8:	4622      	mov	r2, r4
   2ccca:	4629      	mov	r1, r5
   2cccc:	4630      	mov	r0, r6
   2ccce:	f7f9 fe68 	bl	269a2 <memcpy>
	return 0;
   2ccd2:	2000      	movs	r0, #0
}
   2ccd4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2ccd6:	f06f 0015 	mvn.w	r0, #21
   2ccda:	e7fb      	b.n	2ccd4 <flash_nrf_read+0x20>
		return 0;
   2ccdc:	4620      	mov	r0, r4
   2ccde:	e7f9      	b.n	2ccd4 <flash_nrf_read+0x20>

0002cce0 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   2cce0:	2000      	movs	r0, #0
   2cce2:	f7e7 bc0f 	b.w	14504 <ticker_is_initialized>

0002cce6 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   2cce6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ccea:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   2ccec:	6883      	ldr	r3, [r0, #8]
{
   2ccee:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   2ccf0:	695b      	ldr	r3, [r3, #20]
   2ccf2:	4669      	mov	r1, sp
{
   2ccf4:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   2ccf6:	aa01      	add	r2, sp, #4
   2ccf8:	4798      	blx	r3

	while (layout_size--) {
   2ccfa:	e9dd 1000 	ldrd	r1, r0, [sp]
   2ccfe:	2300      	movs	r3, #0
   2cd00:	f100 38ff 	add.w	r8, r0, #4294967295
	off_t end = 0;
   2cd04:	461d      	mov	r5, r3
	off_t group_offs = 0;
   2cd06:	469e      	mov	lr, r3
	size_t page_count = 0;
   2cd08:	469c      	mov	ip, r3
	while (layout_size--) {
   2cd0a:	f1b8 3fff 	cmp.w	r8, #4294967295
   2cd0e:	d102      	bne.n	2cd16 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   2cd10:	f06f 0015 	mvn.w	r0, #21
   2cd14:	e018      	b.n	2cd48 <flash_get_page_info+0x62>
		if (use_addr) {
   2cd16:	680a      	ldr	r2, [r1, #0]
   2cd18:	b1cf      	cbz	r7, 2cd4e <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   2cd1a:	6848      	ldr	r0, [r1, #4]
   2cd1c:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   2cd20:	42a5      	cmp	r5, r4
   2cd22:	f108 38ff 	add.w	r8, r8, #4294967295
   2cd26:	dd17      	ble.n	2cd58 <flash_get_page_info+0x72>
   2cd28:	b103      	cbz	r3, 2cd2c <flash_get_page_info+0x46>
   2cd2a:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   2cd2c:	9b00      	ldr	r3, [sp, #0]
   2cd2e:	685b      	ldr	r3, [r3, #4]
   2cd30:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   2cd32:	b177      	cbz	r7, 2cd52 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   2cd34:	eba4 040e 	sub.w	r4, r4, lr
   2cd38:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   2cd3c:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   2cd40:	4464      	add	r4, ip
			info->start_offset = group_offs +
   2cd42:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   2cd44:	60b4      	str	r4, [r6, #8]
			return 0;
   2cd46:	2000      	movs	r0, #0
}
   2cd48:	b002      	add	sp, #8
   2cd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   2cd4e:	4415      	add	r5, r2
   2cd50:	e7e6      	b.n	2cd20 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   2cd52:	eba4 040c 	sub.w	r4, r4, ip
   2cd56:	e7f1      	b.n	2cd3c <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   2cd58:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2cd5a:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   2cd5c:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   2cd60:	3108      	adds	r1, #8
   2cd62:	2301      	movs	r3, #1
   2cd64:	e7d1      	b.n	2cd0a <flash_get_page_info+0x24>

0002cd66 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2cd66:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   2cd68:	2201      	movs	r2, #1
   2cd6a:	f7ff bfbc 	b.w	2cce6 <flash_get_page_info>

0002cd6e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2cd6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2cd72:	6883      	ldr	r3, [r0, #8]
{
   2cd74:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2cd76:	695b      	ldr	r3, [r3, #20]
{
   2cd78:	4688      	mov	r8, r1
   2cd7a:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2cd7c:	a901      	add	r1, sp, #4
   2cd7e:	aa02      	add	r2, sp, #8
   2cd80:	4798      	blx	r3
	off_t off = 0;
   2cd82:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2cd84:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2cd86:	4625      	mov	r5, r4
   2cd88:	9b02      	ldr	r3, [sp, #8]
   2cd8a:	42ab      	cmp	r3, r5
   2cd8c:	d802      	bhi.n	2cd94 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2cd8e:	b006      	add	sp, #24
   2cd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2cd94:	9f01      	ldr	r7, [sp, #4]
   2cd96:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2cd9a:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2cd9c:	687b      	ldr	r3, [r7, #4]
   2cd9e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2cda0:	683a      	ldr	r2, [r7, #0]
   2cda2:	42b2      	cmp	r2, r6
   2cda4:	eb0a 0306 	add.w	r3, sl, r6
   2cda8:	d802      	bhi.n	2cdb0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2cdaa:	3501      	adds	r5, #1
   2cdac:	469a      	mov	sl, r3
   2cdae:	e7eb      	b.n	2cd88 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   2cdb0:	4649      	mov	r1, r9
   2cdb2:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   2cdb4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2cdb6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2cdb8:	47c0      	blx	r8
   2cdba:	2800      	cmp	r0, #0
   2cdbc:	d0e7      	beq.n	2cd8e <flash_page_foreach+0x20>
			off += page_info.size;
   2cdbe:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2cdc0:	3601      	adds	r6, #1
			off += page_info.size;
   2cdc2:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2cdc4:	e7ec      	b.n	2cda0 <flash_page_foreach+0x32>

0002cdc6 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2cdc6:	68c2      	ldr	r2, [r0, #12]
{
   2cdc8:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2cdca:	e892 0003 	ldmia.w	r2, {r0, r1}
   2cdce:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2cdd2:	2000      	movs	r0, #0
   2cdd4:	4770      	bx	lr

0002cdd6 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   2cdd6:	6843      	ldr	r3, [r0, #4]
   2cdd8:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   2cdda:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2cdde:	05d2      	lsls	r2, r2, #23
   2cde0:	d518      	bpl.n	2ce14 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2cde2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2cde6:	b1aa      	cbz	r2, 2ce14 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2cde8:	f04f 0120 	mov.w	r1, #32
   2cdec:	f3ef 8211 	mrs	r2, BASEPRI
   2cdf0:	f381 8811 	msr	BASEPRI, r1
   2cdf4:	f3bf 8f6f 	isb	sy
   2cdf8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2cdfc:	b131      	cbz	r1, 2ce0c <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2cdfe:	2100      	movs	r1, #0
   2ce00:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2ce04:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ce08:	2101      	movs	r1, #1
   2ce0a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2ce0c:	f382 8811 	msr	BASEPRI, r2
   2ce10:	f3bf 8f6f 	isb	sy
}
   2ce14:	4770      	bx	lr

0002ce16 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2ce16:	68c2      	ldr	r2, [r0, #12]
{
   2ce18:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2ce1a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2ce1e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2ce22:	2000      	movs	r0, #0
   2ce24:	4770      	bx	lr

0002ce26 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2ce26:	6843      	ldr	r3, [r0, #4]
   2ce28:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2ce2a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2ce2e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2ce32:	4770      	bx	lr

0002ce34 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2ce34:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2ce36:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ce38:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2ce3c:	b938      	cbnz	r0, 2ce4e <is_tx_ready+0x1a>
   2ce3e:	7992      	ldrb	r2, [r2, #6]
   2ce40:	b932      	cbnz	r2, 2ce50 <is_tx_ready+0x1c>
   2ce42:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2ce46:	3800      	subs	r0, #0
   2ce48:	bf18      	it	ne
   2ce4a:	2001      	movne	r0, #1
   2ce4c:	4770      	bx	lr
   2ce4e:	2001      	movs	r0, #1
}
   2ce50:	4770      	bx	lr

0002ce52 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2ce52:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2ce54:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   2ce56:	681b      	ldr	r3, [r3, #0]
   2ce58:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2ce5c:	b148      	cbz	r0, 2ce72 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2ce5e:	7b52      	ldrb	r2, [r2, #13]
   2ce60:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ce62:	2000      	movs	r0, #0
   2ce64:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2ce68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ce6c:	2201      	movs	r2, #1
   2ce6e:	601a      	str	r2, [r3, #0]
	return 0;
   2ce70:	4770      	bx	lr
		return -1;
   2ce72:	f04f 30ff 	mov.w	r0, #4294967295
}
   2ce76:	4770      	bx	lr

0002ce78 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2ce78:	4700      	bx	r0

0002ce7a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2ce7a:	f000 bb29 	b.w	2d4d0 <z_impl_k_busy_wait>

0002ce7e <nrfx_clock_enable>:
{
   2ce7e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2ce80:	2000      	movs	r0, #0
   2ce82:	f7d9 fb6b 	bl	655c <arch_irq_is_enabled>
   2ce86:	b918      	cbnz	r0, 2ce90 <nrfx_clock_enable+0x12>
}
   2ce88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2ce8c:	f7d9 bb42 	b.w	6514 <arch_irq_enable>
   2ce90:	bd08      	pop	{r3, pc}

0002ce92 <nrfx_nvmc_flash_size_get>:
   2ce92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ce96:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   2ce98:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2ce9a:	4350      	muls	r0, r2
   2ce9c:	4770      	bx	lr

0002ce9e <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2ce9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2cea2:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2cea4:	4770      	bx	lr

0002cea6 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2cea6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ceaa:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2ceac:	4770      	bx	lr

0002ceae <nrf_gpio_pin_set>:
{
   2ceae:	b507      	push	{r0, r1, r2, lr}
   2ceb0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2ceb2:	a801      	add	r0, sp, #4
   2ceb4:	f7f5 f9fc 	bl	222b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2ceb8:	9a01      	ldr	r2, [sp, #4]
   2ceba:	2301      	movs	r3, #1
   2cebc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2cebe:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2cec2:	b003      	add	sp, #12
   2cec4:	f85d fb04 	ldr.w	pc, [sp], #4

0002cec8 <nrf_gpio_pin_clear>:
{
   2cec8:	b507      	push	{r0, r1, r2, lr}
   2ceca:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cecc:	a801      	add	r0, sp, #4
   2cece:	f7f5 f9ef 	bl	222b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2ced2:	9a01      	ldr	r2, [sp, #4]
   2ced4:	2301      	movs	r3, #1
   2ced6:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2ced8:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2cedc:	b003      	add	sp, #12
   2cede:	f85d fb04 	ldr.w	pc, [sp], #4

0002cee2 <transfer_byte>:
{
   2cee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   2cee4:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2cee8:	698a      	ldr	r2, [r1, #24]
   2ceea:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2ceec:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2cef0:	6a0b      	ldr	r3, [r1, #32]
   2cef2:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2cef4:	bf3e      	ittt	cc
   2cef6:	694a      	ldrcc	r2, [r1, #20]
   2cef8:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   2cefc:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2cefe:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2cf00:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   2cf04:	1c53      	adds	r3, r2, #1
   2cf06:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2cf08:	3202      	adds	r2, #2
    if (p_cb->abort)
   2cf0a:	b13c      	cbz	r4, 2cf1c <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2cf0c:	690c      	ldr	r4, [r1, #16]
   2cf0e:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2cf10:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2cf12:	bf38      	it	cc
   2cf14:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2cf16:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2cf18:	bf88      	it	hi
   2cf1a:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2cf1c:	690d      	ldr	r5, [r1, #16]
   2cf1e:	4295      	cmp	r5, r2
   2cf20:	d905      	bls.n	2cf2e <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2cf22:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   2cf24:	5c9b      	ldrb	r3, [r3, r2]
   2cf26:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2cf2a:	2001      	movs	r0, #1
   2cf2c:	e00a      	b.n	2cf44 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2cf2e:	698c      	ldr	r4, [r1, #24]
   2cf30:	4294      	cmp	r4, r2
   2cf32:	d901      	bls.n	2cf38 <transfer_byte+0x56>
   2cf34:	7fcb      	ldrb	r3, [r1, #31]
   2cf36:	e7f6      	b.n	2cf26 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2cf38:	42ab      	cmp	r3, r5
   2cf3a:	d3f6      	bcc.n	2cf2a <transfer_byte+0x48>
   2cf3c:	42a3      	cmp	r3, r4
   2cf3e:	bf2c      	ite	cs
   2cf40:	2000      	movcs	r0, #0
   2cf42:	2001      	movcc	r0, #1
}
   2cf44:	b003      	add	sp, #12
   2cf46:	bd30      	pop	{r4, r5, pc}

0002cf48 <nrf_gpio_cfg_output>:
{
   2cf48:	b507      	push	{r0, r1, r2, lr}
   2cf4a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cf4c:	a801      	add	r0, sp, #4
   2cf4e:	f7f5 fafd 	bl	2254c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2cf52:	9b01      	ldr	r3, [sp, #4]
   2cf54:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2cf58:	2203      	movs	r2, #3
   2cf5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2cf5e:	b003      	add	sp, #12
   2cf60:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf64 <nrf_gpio_pin_set>:
{
   2cf64:	b507      	push	{r0, r1, r2, lr}
   2cf66:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cf68:	a801      	add	r0, sp, #4
   2cf6a:	f7f5 faef 	bl	2254c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2cf6e:	9a01      	ldr	r2, [sp, #4]
   2cf70:	2301      	movs	r3, #1
   2cf72:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   2cf74:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   2cf78:	b003      	add	sp, #12
   2cf7a:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf7e <nrf_gpio_pin_clear>:
{
   2cf7e:	b507      	push	{r0, r1, r2, lr}
   2cf80:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2cf82:	a801      	add	r0, sp, #4
   2cf84:	f7f5 fae2 	bl	2254c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2cf88:	9a01      	ldr	r2, [sp, #4]
   2cf8a:	2301      	movs	r3, #1
   2cf8c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   2cf8e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   2cf92:	b003      	add	sp, #12
   2cf94:	f85d fb04 	ldr.w	pc, [sp], #4

0002cf98 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   2cf98:	7b0a      	ldrb	r2, [r1, #12]
{
   2cf9a:	4603      	mov	r3, r0
   2cf9c:	2a03      	cmp	r2, #3
   2cf9e:	d829      	bhi.n	2cff4 <xfer_completeness_check+0x5c>
   2cfa0:	e8df f002 	tbb	[pc, r2]
   2cfa4:	02192521 	.word	0x02192521
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2cfa8:	688a      	ldr	r2, [r1, #8]
   2cfaa:	0350      	lsls	r0, r2, #13
   2cfac:	d504      	bpl.n	2cfb8 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   2cfae:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   2cfb2:	6908      	ldr	r0, [r1, #16]
   2cfb4:	4290      	cmp	r0, r2
   2cfb6:	d107      	bne.n	2cfc8 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2cfb8:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   2cfba:	0352      	lsls	r2, r2, #13
   2cfbc:	d41a      	bmi.n	2cff4 <xfer_completeness_check+0x5c>
   2cfbe:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2cfc2:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2cfc4:	4291      	cmp	r1, r2
   2cfc6:	d015      	beq.n	2cff4 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2cfc8:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2cfca:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2cfcc:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2cfd0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2cfd4:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   2cfd6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2cfda:	6908      	ldr	r0, [r1, #16]
   2cfdc:	4290      	cmp	r0, r2
   2cfde:	d1f3      	bne.n	2cfc8 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   2cfe0:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2cfe4:	e7ed      	b.n	2cfc2 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   2cfe6:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2cfea:	6909      	ldr	r1, [r1, #16]
   2cfec:	e7ea      	b.n	2cfc4 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   2cfee:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2cff2:	e7fa      	b.n	2cfea <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   2cff4:	2001      	movs	r0, #1
}
   2cff6:	4770      	bx	lr

0002cff8 <arch_system_halt>:
	__asm__ volatile(
   2cff8:	f04f 0220 	mov.w	r2, #32
   2cffc:	f3ef 8311 	mrs	r3, BASEPRI
   2d000:	f382 8811 	msr	BASEPRI, r2
   2d004:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   2d008:	e7fe      	b.n	2d008 <arch_system_halt+0x10>

0002d00a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   2d00a:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   2d00c:	f7ff fff4 	bl	2cff8 <arch_system_halt>

0002d010 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2d010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d012:	4605      	mov	r5, r0
   2d014:	460e      	mov	r6, r1
   2d016:	f04f 0320 	mov.w	r3, #32
   2d01a:	f3ef 8711 	mrs	r7, BASEPRI
   2d01e:	f383 8811 	msr	BASEPRI, r3
   2d022:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2d026:	f7f6 fd3f 	bl	23aa8 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2d02a:	4631      	mov	r1, r6
   2d02c:	4604      	mov	r4, r0
   2d02e:	4628      	mov	r0, r5
   2d030:	f7ff ffeb 	bl	2d00a <k_sys_fatal_error_handler>
	__asm__ volatile(
   2d034:	f387 8811 	msr	BASEPRI, r7
   2d038:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2d03c:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   2d03e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2d042:	f7d9 bc5b 	b.w	68fc <z_impl_k_thread_abort>

0002d046 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   2d046:	f7f8 baf7 	b.w	25638 <z_clock_idle_exit>

0002d04a <k_heap_init>:
{
   2d04a:	b410      	push	{r4}
   2d04c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2d050:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2d054:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2d056:	f7f7 bcfa 	b.w	24a4e <sys_heap_init>

0002d05a <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   2d05a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d05e:	4604      	mov	r4, r0
   2d060:	b085      	sub	sp, #20
   2d062:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2d064:	4610      	mov	r0, r2
   2d066:	4619      	mov	r1, r3
   2d068:	f000 fb0f 	bl	2d68a <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2d06c:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2d070:	4605      	mov	r5, r0
   2d072:	460f      	mov	r7, r1
	__asm__ volatile(
   2d074:	f04f 0220 	mov.w	r2, #32
   2d078:	f3ef 8311 	mrs	r3, BASEPRI
   2d07c:	f382 8811 	msr	BASEPRI, r2
   2d080:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2d084:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   2d088:	4631      	mov	r1, r6
   2d08a:	4620      	mov	r0, r4
   2d08c:	9303      	str	r3, [sp, #12]
   2d08e:	f7f7 fcaa 	bl	249e6 <sys_heap_alloc>
   2d092:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   2d094:	f7f7 f810 	bl	240b8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2d098:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2d09c:	b13a      	cbz	r2, 2d0ae <k_heap_alloc+0x54>
	__asm__ volatile(
   2d09e:	f383 8811 	msr	BASEPRI, r3
   2d0a2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2d0a6:	4610      	mov	r0, r2
   2d0a8:	b005      	add	sp, #20
   2d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2d0ae:	ebb5 0800 	subs.w	r8, r5, r0
   2d0b2:	eb67 0901 	sbc.w	r9, r7, r1
   2d0b6:	f1b8 0f01 	cmp.w	r8, #1
   2d0ba:	f179 0100 	sbcs.w	r1, r9, #0
   2d0be:	dbee      	blt.n	2d09e <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2d0c0:	e9cd 8900 	strd	r8, r9, [sp]
   2d0c4:	465a      	mov	r2, fp
   2d0c6:	4619      	mov	r1, r3
   2d0c8:	4650      	mov	r0, sl
   2d0ca:	f7f6 fbf3 	bl	238b4 <z_pend_curr>
	__asm__ volatile(
   2d0ce:	f04f 0220 	mov.w	r2, #32
   2d0d2:	f3ef 8311 	mrs	r3, BASEPRI
   2d0d6:	f382 8811 	msr	BASEPRI, r2
   2d0da:	f3bf 8f6f 	isb	sy
   2d0de:	e7d3      	b.n	2d088 <k_heap_alloc+0x2e>

0002d0e0 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2d0e0:	b538      	push	{r3, r4, r5, lr}
   2d0e2:	4604      	mov	r4, r0
   2d0e4:	f04f 0320 	mov.w	r3, #32
   2d0e8:	f3ef 8511 	mrs	r5, BASEPRI
   2d0ec:	f383 8811 	msr	BASEPRI, r3
   2d0f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2d0f4:	f7f7 fc24 	bl	24940 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   2d0f8:	f104 000c 	add.w	r0, r4, #12
   2d0fc:	f000 f9c2 	bl	2d484 <z_unpend_all>
   2d100:	b130      	cbz	r0, 2d110 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2d102:	4629      	mov	r1, r5
   2d104:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2d108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2d10c:	f7f6 b990 	b.w	23430 <z_reschedule>
	__asm__ volatile(
   2d110:	f385 8811 	msr	BASEPRI, r5
   2d114:	f3bf 8f6f 	isb	sy
}
   2d118:	bd38      	pop	{r3, r4, r5, pc}

0002d11a <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   2d11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d11c:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   2d120:	6800      	ldr	r0, [r0, #0]
   2d122:	6048      	str	r0, [r1, #4]
{
   2d124:	4614      	mov	r4, r2
   2d126:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   2d128:	4632      	mov	r2, r6
   2d12a:	463b      	mov	r3, r7
   2d12c:	4621      	mov	r1, r4
   2d12e:	f7ff ff94 	bl	2d05a <k_heap_alloc>
   2d132:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   2d134:	b144      	cbz	r4, 2d148 <k_mem_pool_alloc+0x2e>
   2d136:	b938      	cbnz	r0, 2d148 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   2d138:	ea56 0307 	orrs.w	r3, r6, r7
   2d13c:	bf0c      	ite	eq
   2d13e:	f06f 000b 	mvneq.w	r0, #11
   2d142:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   2d146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   2d148:	2000      	movs	r0, #0
   2d14a:	e7fc      	b.n	2d146 <k_mem_pool_alloc+0x2c>

0002d14c <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   2d14c:	e9d0 1000 	ldrd	r1, r0, [r0]
   2d150:	f7ff bfc6 	b.w	2d0e0 <k_heap_free>

0002d154 <z_impl_k_mutex_init>:
{
   2d154:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2d156:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2d158:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2d15c:	e9c3 3300 	strd	r3, r3, [r3]
}
   2d160:	4770      	bx	lr

0002d162 <queue_insert>:
{
   2d162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d166:	4699      	mov	r9, r3
   2d168:	4604      	mov	r4, r0
   2d16a:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2d16e:	460d      	mov	r5, r1
   2d170:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d172:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2d176:	f04f 0220 	mov.w	r2, #32
   2d17a:	f3ef 8711 	mrs	r7, BASEPRI
   2d17e:	f382 8811 	msr	BASEPRI, r2
   2d182:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2d186:	b103      	cbz	r3, 2d18a <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2d188:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2d18a:	4630      	mov	r0, r6
   2d18c:	f000 f955 	bl	2d43a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2d190:	b158      	cbz	r0, 2d1aa <queue_insert+0x48>
   2d192:	2400      	movs	r4, #0
   2d194:	67c4      	str	r4, [r0, #124]	; 0x7c
   2d196:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2d19a:	f000 f8f6 	bl	2d38a <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2d19e:	4630      	mov	r0, r6
   2d1a0:	4639      	mov	r1, r7
   2d1a2:	f7f6 f945 	bl	23430 <z_reschedule>
	return 0;
   2d1a6:	2000      	movs	r0, #0
   2d1a8:	e00c      	b.n	2d1c4 <queue_insert+0x62>
	if (alloc) {
   2d1aa:	f1b9 0f00 	cmp.w	r9, #0
   2d1ae:	d01b      	beq.n	2d1e8 <queue_insert+0x86>
		anode = z_thread_malloc(sizeof(*anode));
   2d1b0:	2008      	movs	r0, #8
   2d1b2:	f7f7 f829 	bl	24208 <z_thread_malloc>
		if (anode == NULL) {
   2d1b6:	b938      	cbnz	r0, 2d1c8 <queue_insert+0x66>
	__asm__ volatile(
   2d1b8:	f387 8811 	msr	BASEPRI, r7
   2d1bc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2d1c0:	f06f 000b 	mvn.w	r0, #11
}
   2d1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2d1c8:	2301      	movs	r3, #1
		anode->data = data;
   2d1ca:	f8c0 8004 	str.w	r8, [r0, #4]
   2d1ce:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2d1d0:	6803      	ldr	r3, [r0, #0]
   2d1d2:	f003 0203 	and.w	r2, r3, #3
   2d1d6:	b95d      	cbnz	r5, 2d1f0 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d1d8:	6823      	ldr	r3, [r4, #0]
   2d1da:	4313      	orrs	r3, r2
   2d1dc:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d1de:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2d1e0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2d1e2:	b973      	cbnz	r3, 2d202 <queue_insert+0xa0>
	list->tail = node;
   2d1e4:	6060      	str	r0, [r4, #4]
}
   2d1e6:	e00c      	b.n	2d202 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2d1e8:	f8c8 9000 	str.w	r9, [r8]
}
   2d1ec:	4640      	mov	r0, r8
   2d1ee:	e7ef      	b.n	2d1d0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d1f0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2d1f2:	f033 0303 	bics.w	r3, r3, #3
   2d1f6:	d110      	bne.n	2d21a <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d1f8:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2d1fa:	6862      	ldr	r2, [r4, #4]
   2d1fc:	b93a      	cbnz	r2, 2d20e <queue_insert+0xac>
	list->head = node;
   2d1fe:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2d202:	2104      	movs	r1, #4
   2d204:	f104 0010 	add.w	r0, r4, #16
   2d208:	f000 fb75 	bl	2d8f6 <z_handle_obj_poll_events>
   2d20c:	e7c7      	b.n	2d19e <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d20e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d210:	f003 0303 	and.w	r3, r3, #3
   2d214:	4303      	orrs	r3, r0
   2d216:	6013      	str	r3, [r2, #0]
   2d218:	e7e4      	b.n	2d1e4 <queue_insert+0x82>
   2d21a:	4313      	orrs	r3, r2
   2d21c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d21e:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d220:	f003 0303 	and.w	r3, r3, #3
   2d224:	4303      	orrs	r3, r0
   2d226:	602b      	str	r3, [r5, #0]
}
   2d228:	e7eb      	b.n	2d202 <queue_insert+0xa0>

0002d22a <z_queue_node_peek>:
{
   2d22a:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2d22c:	4604      	mov	r4, r0
   2d22e:	b130      	cbz	r0, 2d23e <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d230:	6802      	ldr	r2, [r0, #0]
   2d232:	0793      	lsls	r3, r2, #30
   2d234:	d003      	beq.n	2d23e <z_queue_node_peek+0x14>
		ret = anode->data;
   2d236:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2d238:	b109      	cbz	r1, 2d23e <z_queue_node_peek+0x14>
			k_free(anode);
   2d23a:	f000 fb82 	bl	2d942 <k_free>
}
   2d23e:	4620      	mov	r0, r4
   2d240:	bd10      	pop	{r4, pc}

0002d242 <z_impl_k_queue_init>:
	list->head = NULL;
   2d242:	2300      	movs	r3, #0
	list->tail = NULL;
   2d244:	e9c0 3300 	strd	r3, r3, [r0]
   2d248:	f100 0308 	add.w	r3, r0, #8
   2d24c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2d250:	f100 0310 	add.w	r3, r0, #16
   2d254:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2d258:	4770      	bx	lr

0002d25a <k_queue_append>:
{
   2d25a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2d25c:	2301      	movs	r3, #1
   2d25e:	9300      	str	r3, [sp, #0]
   2d260:	2300      	movs	r3, #0
{
   2d262:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2d264:	4619      	mov	r1, r3
   2d266:	f7ff ff7c 	bl	2d162 <queue_insert>
}
   2d26a:	b003      	add	sp, #12
   2d26c:	f85d fb04 	ldr.w	pc, [sp], #4

0002d270 <k_queue_prepend>:
{
   2d270:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2d272:	2300      	movs	r3, #0
{
   2d274:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2d276:	9300      	str	r3, [sp, #0]
   2d278:	4619      	mov	r1, r3
   2d27a:	f7ff ff72 	bl	2d162 <queue_insert>
}
   2d27e:	b003      	add	sp, #12
   2d280:	f85d fb04 	ldr.w	pc, [sp], #4

0002d284 <k_queue_append_list>:
{
   2d284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d288:	4605      	mov	r5, r0
   2d28a:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2d28c:	460c      	mov	r4, r1
   2d28e:	b391      	cbz	r1, 2d2f6 <k_queue_append_list+0x72>
   2d290:	b38a      	cbz	r2, 2d2f6 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2d292:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2d296:	f04f 0320 	mov.w	r3, #32
   2d29a:	f3ef 8811 	mrs	r8, BASEPRI
   2d29e:	f383 8811 	msr	BASEPRI, r3
   2d2a2:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2d2a6:	4638      	mov	r0, r7
   2d2a8:	f000 f8c7 	bl	2d43a <z_unpend_first_thread>
   2d2ac:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2d2b0:	b920      	cbnz	r0, 2d2bc <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2d2b2:	686b      	ldr	r3, [r5, #4]
   2d2b4:	b9cb      	cbnz	r3, 2d2ea <k_queue_append_list+0x66>
	list->head = node;
   2d2b6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2d2b8:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2d2ba:	e00a      	b.n	2d2d2 <k_queue_append_list+0x4e>
   2d2bc:	6144      	str	r4, [r0, #20]
   2d2be:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2d2c2:	f000 f862 	bl	2d38a <z_ready_thread>
		head = *(void **)head;
   2d2c6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2d2c8:	4638      	mov	r0, r7
   2d2ca:	f000 f8b6 	bl	2d43a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2d2ce:	2c00      	cmp	r4, #0
   2d2d0:	d1ee      	bne.n	2d2b0 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2d2d2:	2104      	movs	r1, #4
   2d2d4:	f105 0010 	add.w	r0, r5, #16
   2d2d8:	f000 fb0d 	bl	2d8f6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2d2dc:	4638      	mov	r0, r7
   2d2de:	4641      	mov	r1, r8
   2d2e0:	f7f6 f8a6 	bl	23430 <z_reschedule>
	return 0;
   2d2e4:	2000      	movs	r0, #0
}
   2d2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d2ea:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d2ec:	f001 0103 	and.w	r1, r1, #3
   2d2f0:	430c      	orrs	r4, r1
   2d2f2:	601c      	str	r4, [r3, #0]
}
   2d2f4:	e7e0      	b.n	2d2b8 <k_queue_append_list+0x34>
		return -EINVAL;
   2d2f6:	f06f 0015 	mvn.w	r0, #21
   2d2fa:	e7f4      	b.n	2d2e6 <k_queue_append_list+0x62>

0002d2fc <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2d2fc:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2d300:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2d304:	4298      	cmp	r0, r3
   2d306:	bfac      	ite	ge
   2d308:	2000      	movge	r0, #0
   2d30a:	2001      	movlt	r0, #1
   2d30c:	4770      	bx	lr

0002d30e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2d30e:	4603      	mov	r3, r0
   2d310:	b920      	cbnz	r0, 2d31c <z_reschedule_irqlock+0xe>
   2d312:	f3ef 8205 	mrs	r2, IPSR
   2d316:	b90a      	cbnz	r2, 2d31c <z_reschedule_irqlock+0xe>
   2d318:	f7d9 b8ae 	b.w	6478 <arch_swap>
	__asm__ volatile(
   2d31c:	f383 8811 	msr	BASEPRI, r3
   2d320:	f3bf 8f6f 	isb	sy
}
   2d324:	4770      	bx	lr

0002d326 <z_reschedule_unlocked>:
	__asm__ volatile(
   2d326:	f04f 0320 	mov.w	r3, #32
   2d32a:	f3ef 8011 	mrs	r0, BASEPRI
   2d32e:	f383 8811 	msr	BASEPRI, r3
   2d332:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2d336:	f7ff bfea 	b.w	2d30e <z_reschedule_irqlock>

0002d33a <unpend_thread_no_timeout>:
{
   2d33a:	4601      	mov	r1, r0
   2d33c:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2d33e:	6880      	ldr	r0, [r0, #8]
   2d340:	f7f6 f89c 	bl	2347c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2d344:	7b4b      	ldrb	r3, [r1, #13]
   2d346:	f023 0302 	bic.w	r3, r3, #2
   2d34a:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   2d34c:	2300      	movs	r3, #0
   2d34e:	608b      	str	r3, [r1, #8]
}
   2d350:	bd08      	pop	{r3, pc}

0002d352 <z_unpend_thread>:
{
   2d352:	b538      	push	{r3, r4, r5, lr}
   2d354:	4604      	mov	r4, r0
   2d356:	f04f 0320 	mov.w	r3, #32
   2d35a:	f3ef 8511 	mrs	r5, BASEPRI
   2d35e:	f383 8811 	msr	BASEPRI, r3
   2d362:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2d366:	f7ff ffe8 	bl	2d33a <unpend_thread_no_timeout>
	__asm__ volatile(
   2d36a:	f385 8811 	msr	BASEPRI, r5
   2d36e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2d372:	f104 0018 	add.w	r0, r4, #24
}
   2d376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2d37a:	f000 b930 	b.w	2d5de <z_abort_timeout>

0002d37e <z_priq_dumb_best>:
	return list->head == list;
   2d37e:	6803      	ldr	r3, [r0, #0]
}
   2d380:	4298      	cmp	r0, r3
   2d382:	bf14      	ite	ne
   2d384:	4618      	movne	r0, r3
   2d386:	2000      	moveq	r0, #0
   2d388:	4770      	bx	lr

0002d38a <z_ready_thread>:
{
   2d38a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d38c:	f04f 0320 	mov.w	r3, #32
   2d390:	f3ef 8411 	mrs	r4, BASEPRI
   2d394:	f383 8811 	msr	BASEPRI, r3
   2d398:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2d39c:	f7f6 f8c8 	bl	23530 <ready_thread>
	__asm__ volatile(
   2d3a0:	f384 8811 	msr	BASEPRI, r4
   2d3a4:	f3bf 8f6f 	isb	sy
}
   2d3a8:	bd10      	pop	{r4, pc}

0002d3aa <z_thread_timeout>:
{
   2d3aa:	b570      	push	{r4, r5, r6, lr}
   2d3ac:	4604      	mov	r4, r0
	__asm__ volatile(
   2d3ae:	f04f 0320 	mov.w	r3, #32
   2d3b2:	f3ef 8611 	mrs	r6, BASEPRI
   2d3b6:	f383 8811 	msr	BASEPRI, r3
   2d3ba:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2d3be:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   2d3c2:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   2d3c6:	b113      	cbz	r3, 2d3ce <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   2d3c8:	4628      	mov	r0, r5
   2d3ca:	f7ff ffb6 	bl	2d33a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2d3ce:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2d3d2:	f023 0314 	bic.w	r3, r3, #20
   2d3d6:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   2d3da:	4628      	mov	r0, r5
   2d3dc:	f7f6 f8a8 	bl	23530 <ready_thread>
	__asm__ volatile(
   2d3e0:	f386 8811 	msr	BASEPRI, r6
   2d3e4:	f3bf 8f6f 	isb	sy
}
   2d3e8:	bd70      	pop	{r4, r5, r6, pc}

0002d3ea <add_to_waitq_locked>:
{
   2d3ea:	b538      	push	{r3, r4, r5, lr}
   2d3ec:	4604      	mov	r4, r0
   2d3ee:	460d      	mov	r5, r1
	unready_thread(thread);
   2d3f0:	f7f6 fa20 	bl	23834 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2d3f4:	7b63      	ldrb	r3, [r4, #13]
   2d3f6:	f043 0302 	orr.w	r3, r3, #2
   2d3fa:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2d3fc:	b17d      	cbz	r5, 2d41e <add_to_waitq_locked+0x34>
   2d3fe:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2d400:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d402:	429d      	cmp	r5, r3
   2d404:	d012      	beq.n	2d42c <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d406:	b18b      	cbz	r3, 2d42c <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   2d408:	f994 200e 	ldrsb.w	r2, [r4, #14]
   2d40c:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2d410:	4291      	cmp	r1, r2
   2d412:	dd05      	ble.n	2d420 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   2d414:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2d416:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2d41a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2d41c:	605c      	str	r4, [r3, #4]
}
   2d41e:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2d420:	6869      	ldr	r1, [r5, #4]
   2d422:	428b      	cmp	r3, r1
   2d424:	d002      	beq.n	2d42c <add_to_waitq_locked+0x42>
   2d426:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2d428:	2b00      	cmp	r3, #0
   2d42a:	d1ef      	bne.n	2d40c <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   2d42c:	686b      	ldr	r3, [r5, #4]
   2d42e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2d430:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2d432:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   2d434:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2d436:	606c      	str	r4, [r5, #4]
}
   2d438:	e7f1      	b.n	2d41e <add_to_waitq_locked+0x34>

0002d43a <z_unpend_first_thread>:
{
   2d43a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2d43c:	f04f 0320 	mov.w	r3, #32
   2d440:	f3ef 8211 	mrs	r2, BASEPRI
   2d444:	f383 8811 	msr	BASEPRI, r3
   2d448:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2d44c:	f7ff ff97 	bl	2d37e <z_priq_dumb_best>
   2d450:	4604      	mov	r4, r0
	__asm__ volatile(
   2d452:	f382 8811 	msr	BASEPRI, r2
   2d456:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2d45a:	b188      	cbz	r0, 2d480 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   2d45c:	f04f 0320 	mov.w	r3, #32
   2d460:	f3ef 8511 	mrs	r5, BASEPRI
   2d464:	f383 8811 	msr	BASEPRI, r3
   2d468:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2d46c:	f7ff ff65 	bl	2d33a <unpend_thread_no_timeout>
	__asm__ volatile(
   2d470:	f385 8811 	msr	BASEPRI, r5
   2d474:	f3bf 8f6f 	isb	sy
   2d478:	f104 0018 	add.w	r0, r4, #24
   2d47c:	f000 f8af 	bl	2d5de <z_abort_timeout>
}
   2d480:	4620      	mov	r0, r4
   2d482:	bd38      	pop	{r3, r4, r5, pc}

0002d484 <z_unpend_all>:
{
   2d484:	b538      	push	{r3, r4, r5, lr}
   2d486:	4605      	mov	r5, r0
	int need_sched = 0;
   2d488:	2000      	movs	r0, #0
	return list->head == list;
   2d48a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d48c:	42a5      	cmp	r5, r4
   2d48e:	d000      	beq.n	2d492 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2d490:	b904      	cbnz	r4, 2d494 <z_unpend_all+0x10>
}
   2d492:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2d494:	4620      	mov	r0, r4
   2d496:	f7ff ff5c 	bl	2d352 <z_unpend_thread>
		z_ready_thread(thread);
   2d49a:	4620      	mov	r0, r4
   2d49c:	f7ff ff75 	bl	2d38a <z_ready_thread>
		need_sched = 1;
   2d4a0:	2001      	movs	r0, #1
   2d4a2:	e7f2      	b.n	2d48a <z_unpend_all+0x6>

0002d4a4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2d4a4:	b15a      	cbz	r2, 2d4be <z_impl_k_sem_init+0x1a>
   2d4a6:	428a      	cmp	r2, r1
   2d4a8:	d309      	bcc.n	2d4be <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2d4aa:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2d4ae:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2d4b2:	e9c0 0000 	strd	r0, r0, [r0]
   2d4b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2d4ba:	2000      	movs	r0, #0
   2d4bc:	4770      	bx	lr
		return -EINVAL;
   2d4be:	f06f 0015 	mvn.w	r0, #21
}
   2d4c2:	4770      	bx	lr

0002d4c4 <k_is_in_isr>:
   2d4c4:	f3ef 8005 	mrs	r0, IPSR
}
   2d4c8:	3800      	subs	r0, #0
   2d4ca:	bf18      	it	ne
   2d4cc:	2001      	movne	r0, #1
   2d4ce:	4770      	bx	lr

0002d4d0 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2d4d0:	b108      	cbz	r0, 2d4d6 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2d4d2:	f7d9 bb17 	b.w	6b04 <arch_busy_wait>
}
   2d4d6:	4770      	bx	lr

0002d4d8 <z_impl_k_thread_name_set>:
}
   2d4d8:	f06f 0046 	mvn.w	r0, #70	; 0x46
   2d4dc:	4770      	bx	lr

0002d4de <k_work_submit_to_queue>:
{
   2d4de:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d4e0:	f101 0308 	add.w	r3, r1, #8
   2d4e4:	f3bf 8f5b 	dmb	ish
   2d4e8:	e853 2f00 	ldrex	r2, [r3]
   2d4ec:	f042 0c01 	orr.w	ip, r2, #1
   2d4f0:	e843 ce00 	strex	lr, ip, [r3]
   2d4f4:	f1be 0f00 	cmp.w	lr, #0
   2d4f8:	d1f6      	bne.n	2d4e8 <k_work_submit_to_queue+0xa>
   2d4fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2d4fe:	07d3      	lsls	r3, r2, #31
   2d500:	d403      	bmi.n	2d50a <k_work_submit_to_queue+0x2c>
}
   2d502:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2d506:	f7ff bea8 	b.w	2d25a <k_queue_append>
}
   2d50a:	f85d fb04 	ldr.w	pc, [sp], #4

0002d50e <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2d50e:	f1a0 0110 	sub.w	r1, r0, #16
   2d512:	6980      	ldr	r0, [r0, #24]
   2d514:	f7ff bfe3 	b.w	2d4de <k_work_submit_to_queue>

0002d518 <work_cancel>:
{
   2d518:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d51a:	f3bf 8f5b 	dmb	ish
   2d51e:	6883      	ldr	r3, [r0, #8]
   2d520:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2d524:	07db      	lsls	r3, r3, #31
{
   2d526:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2d528:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   2d52c:	d532      	bpl.n	2d594 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2d52e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2d530:	6813      	ldr	r3, [r2, #0]
   2d532:	2100      	movs	r1, #0
   2d534:	b913      	cbnz	r3, 2d53c <work_cancel+0x24>
			return -EINVAL;
   2d536:	f06f 0015 	mvn.w	r0, #21
}
   2d53a:	bd70      	pop	{r4, r5, r6, pc}
   2d53c:	429c      	cmp	r4, r3
   2d53e:	d124      	bne.n	2d58a <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   2d540:	6823      	ldr	r3, [r4, #0]
   2d542:	6856      	ldr	r6, [r2, #4]
   2d544:	f023 0003 	bic.w	r0, r3, #3
   2d548:	b9b1      	cbnz	r1, 2d578 <work_cancel+0x60>
   2d54a:	42b4      	cmp	r4, r6
	list->head = node;
   2d54c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2d54e:	d100      	bne.n	2d552 <work_cancel+0x3a>
	list->tail = node;
   2d550:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d552:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d554:	f003 0303 	and.w	r3, r3, #3
   2d558:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2d55a:	2000      	movs	r0, #0
   2d55c:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d55e:	f3bf 8f5b 	dmb	ish
   2d562:	e855 3f00 	ldrex	r3, [r5]
   2d566:	f023 0301 	bic.w	r3, r3, #1
   2d56a:	e845 3200 	strex	r2, r3, [r5]
   2d56e:	2a00      	cmp	r2, #0
   2d570:	d1f7      	bne.n	2d562 <work_cancel+0x4a>
   2d572:	f3bf 8f5b 	dmb	ish
   2d576:	e7e0      	b.n	2d53a <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2d578:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d57a:	f003 0303 	and.w	r3, r3, #3
   2d57e:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2d580:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2d582:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2d584:	bf08      	it	eq
   2d586:	6051      	streq	r1, [r2, #4]
}
   2d588:	e7e3      	b.n	2d552 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2d58a:	6818      	ldr	r0, [r3, #0]
   2d58c:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2d58e:	f020 0303 	bic.w	r3, r0, #3
   2d592:	e7cf      	b.n	2d534 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   2d594:	3010      	adds	r0, #16
   2d596:	f000 f822 	bl	2d5de <z_abort_timeout>
		if (err) {
   2d59a:	2800      	cmp	r0, #0
   2d59c:	d0dd      	beq.n	2d55a <work_cancel+0x42>
			return -EALREADY;
   2d59e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   2d5a2:	e7ca      	b.n	2d53a <work_cancel+0x22>

0002d5a4 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2d5a4:	2300      	movs	r3, #0
   2d5a6:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   2d5aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2d5ae:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   2d5b0:	6283      	str	r3, [r0, #40]	; 0x28
}
   2d5b2:	4770      	bx	lr

0002d5b4 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2d5b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d5b6:	f04f 0220 	mov.w	r2, #32
   2d5ba:	f3ef 8411 	mrs	r4, BASEPRI
   2d5be:	f382 8811 	msr	BASEPRI, r2
   2d5c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   2d5c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2d5c8:	b133      	cbz	r3, 2d5d8 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   2d5ca:	f7ff ffa5 	bl	2d518 <work_cancel>
	__asm__ volatile(
   2d5ce:	f384 8811 	msr	BASEPRI, r4
   2d5d2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   2d5d6:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2d5d8:	f06f 0015 	mvn.w	r0, #21
   2d5dc:	e7f7      	b.n	2d5ce <k_delayed_work_cancel+0x1a>

0002d5de <z_abort_timeout>:
{
   2d5de:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d5e0:	f04f 0220 	mov.w	r2, #32
   2d5e4:	f3ef 8411 	mrs	r4, BASEPRI
   2d5e8:	f382 8811 	msr	BASEPRI, r2
   2d5ec:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2d5f0:	6803      	ldr	r3, [r0, #0]
   2d5f2:	b13b      	cbz	r3, 2d604 <z_abort_timeout+0x26>
			remove_timeout(to);
   2d5f4:	f7f6 fc04 	bl	23e00 <remove_timeout>
			ret = 0;
   2d5f8:	2000      	movs	r0, #0
	__asm__ volatile(
   2d5fa:	f384 8811 	msr	BASEPRI, r4
   2d5fe:	f3bf 8f6f 	isb	sy
}
   2d602:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2d604:	f06f 0015 	mvn.w	r0, #21
   2d608:	e7f7      	b.n	2d5fa <z_abort_timeout+0x1c>

0002d60a <z_timeout_remaining>:
{
   2d60a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d60c:	f04f 0320 	mov.w	r3, #32
   2d610:	f3ef 8411 	mrs	r4, BASEPRI
   2d614:	f383 8811 	msr	BASEPRI, r3
   2d618:	f3bf 8f6f 	isb	sy
		ticks = timeout_rem(timeout);
   2d61c:	f7f6 fc32 	bl	23e84 <timeout_rem>
	__asm__ volatile(
   2d620:	f384 8811 	msr	BASEPRI, r4
   2d624:	f3bf 8f6f 	isb	sy
}
   2d628:	bd10      	pop	{r4, pc}

0002d62a <z_get_next_timeout_expiry>:
{
   2d62a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2d62c:	f04f 0320 	mov.w	r3, #32
   2d630:	f3ef 8411 	mrs	r4, BASEPRI
   2d634:	f383 8811 	msr	BASEPRI, r3
   2d638:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2d63c:	f7f6 fbfa 	bl	23e34 <next_timeout>
	__asm__ volatile(
   2d640:	f384 8811 	msr	BASEPRI, r4
   2d644:	f3bf 8f6f 	isb	sy
}
   2d648:	bd10      	pop	{r4, pc}

0002d64a <z_set_timeout_expiry>:
{
   2d64a:	b570      	push	{r4, r5, r6, lr}
   2d64c:	4604      	mov	r4, r0
   2d64e:	460d      	mov	r5, r1
	__asm__ volatile(
   2d650:	f04f 0320 	mov.w	r3, #32
   2d654:	f3ef 8611 	mrs	r6, BASEPRI
   2d658:	f383 8811 	msr	BASEPRI, r3
   2d65c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2d660:	f7f6 fbe8 	bl	23e34 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2d664:	2801      	cmp	r0, #1
   2d666:	dd05      	ble.n	2d674 <z_set_timeout_expiry+0x2a>
   2d668:	42a0      	cmp	r0, r4
   2d66a:	dd03      	ble.n	2d674 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   2d66c:	4629      	mov	r1, r5
   2d66e:	4620      	mov	r0, r4
   2d670:	f7d8 fcf4 	bl	605c <z_clock_set_timeout>
	__asm__ volatile(
   2d674:	f386 8811 	msr	BASEPRI, r6
   2d678:	f3bf 8f6f 	isb	sy
}
   2d67c:	bd70      	pop	{r4, r5, r6, pc}

0002d67e <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2d67e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2d680:	f7f6 fd1a 	bl	240b8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2d684:	bd08      	pop	{r3, pc}

0002d686 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2d686:	f7f6 bd17 	b.w	240b8 <z_tick_get>

0002d68a <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2d68a:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d68c:	1c4b      	adds	r3, r1, #1
   2d68e:	bf08      	it	eq
   2d690:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2d694:	4604      	mov	r4, r0
   2d696:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2d698:	d013      	beq.n	2d6c2 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2d69a:	ea54 0105 	orrs.w	r1, r4, r5
   2d69e:	d103      	bne.n	2d6a8 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   2d6a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2d6a4:	f7f6 bd08 	b.w	240b8 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2d6a8:	f06f 0101 	mvn.w	r1, #1
   2d6ac:	1a0a      	subs	r2, r1, r0
   2d6ae:	f04f 31ff 	mov.w	r1, #4294967295
   2d6b2:	eb61 0305 	sbc.w	r3, r1, r5
   2d6b6:	2a00      	cmp	r2, #0
   2d6b8:	f173 0100 	sbcs.w	r1, r3, #0
   2d6bc:	db02      	blt.n	2d6c4 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2d6be:	4610      	mov	r0, r2
   2d6c0:	4619      	mov	r1, r3
}
   2d6c2:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2d6c4:	f7f6 fcf8 	bl	240b8 <z_tick_get>
   2d6c8:	2c01      	cmp	r4, #1
   2d6ca:	f175 0300 	sbcs.w	r3, r5, #0
   2d6ce:	bfbc      	itt	lt
   2d6d0:	2401      	movlt	r4, #1
   2d6d2:	2500      	movlt	r5, #0
   2d6d4:	1820      	adds	r0, r4, r0
   2d6d6:	eb45 0101 	adc.w	r1, r5, r1
   2d6da:	e7f2      	b.n	2d6c2 <z_timeout_end_calc+0x38>

0002d6dc <clear_event_registrations>:
	while (num_events--) {
   2d6dc:	2314      	movs	r3, #20
{
   2d6de:	b530      	push	{r4, r5, lr}
   2d6e0:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2d6e4:	2400      	movs	r4, #0
	while (num_events--) {
   2d6e6:	4281      	cmp	r1, r0
   2d6e8:	d100      	bne.n	2d6ec <clear_event_registrations+0x10>
}
   2d6ea:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2d6ec:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2d6f0:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2d6f4:	f003 030f 	and.w	r3, r3, #15
   2d6f8:	2b02      	cmp	r3, #2
   2d6fa:	d80a      	bhi.n	2d712 <clear_event_registrations+0x36>
   2d6fc:	b15b      	cbz	r3, 2d716 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2d6fe:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2d702:	b143      	cbz	r3, 2d716 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2d704:	f851 5c10 	ldr.w	r5, [r1, #-16]
   2d708:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2d70a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2d70c:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   2d710:	e001      	b.n	2d716 <clear_event_registrations+0x3a>
	switch (event->type) {
   2d712:	2b04      	cmp	r3, #4
   2d714:	d0f3      	beq.n	2d6fe <clear_event_registrations+0x22>
   2d716:	f382 8811 	msr	BASEPRI, r2
   2d71a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2d71e:	f04f 0320 	mov.w	r3, #32
   2d722:	f3ef 8211 	mrs	r2, BASEPRI
   2d726:	f383 8811 	msr	BASEPRI, r3
   2d72a:	f3bf 8f6f 	isb	sy
   2d72e:	3914      	subs	r1, #20
   2d730:	e7d9      	b.n	2d6e6 <clear_event_registrations+0xa>

0002d732 <signal_poll_event>:
{
   2d732:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   2d734:	6884      	ldr	r4, [r0, #8]
{
   2d736:	4605      	mov	r5, r0
   2d738:	460e      	mov	r6, r1
	if (poller) {
   2d73a:	b19c      	cbz	r4, 2d764 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2d73c:	68a3      	ldr	r3, [r4, #8]
   2d73e:	b95b      	cbnz	r3, 2d758 <signal_poll_event+0x26>
		poller->is_polling = false;
   2d740:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   2d742:	4618      	mov	r0, r3
	event->poller = NULL;
   2d744:	2300      	movs	r3, #0
   2d746:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   2d748:	68eb      	ldr	r3, [r5, #12]
   2d74a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2d74e:	430e      	orrs	r6, r1
   2d750:	f366 3310 	bfi	r3, r6, #12, #5
   2d754:	60eb      	str	r3, [r5, #12]
	return retcode;
   2d756:	e004      	b.n	2d762 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   2d758:	4798      	blx	r3
		poller->is_polling = false;
   2d75a:	2300      	movs	r3, #0
		if (retcode < 0) {
   2d75c:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2d75e:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   2d760:	daf0      	bge.n	2d744 <signal_poll_event+0x12>
}
   2d762:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   2d764:	4620      	mov	r0, r4
   2d766:	e7ed      	b.n	2d744 <signal_poll_event+0x12>

0002d768 <k_poll_poller_cb>:
{
   2d768:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2d76a:	6883      	ldr	r3, [r0, #8]
   2d76c:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   2d76e:	7b63      	ldrb	r3, [r4, #13]
   2d770:	079a      	lsls	r2, r3, #30
{
   2d772:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   2d774:	d515      	bpl.n	2d7a2 <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   2d776:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2d77a:	f04f 31ff 	mov.w	r1, #4294967295
   2d77e:	f06f 0001 	mvn.w	r0, #1
   2d782:	428b      	cmp	r3, r1
   2d784:	bf08      	it	eq
   2d786:	4282      	cmpeq	r2, r0
   2d788:	d014      	beq.n	2d7b4 <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   2d78a:	4620      	mov	r0, r4
   2d78c:	f7ff fde1 	bl	2d352 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2d790:	2d08      	cmp	r5, #8
   2d792:	bf0c      	ite	eq
   2d794:	f06f 0303 	mvneq.w	r3, #3
   2d798:	2300      	movne	r3, #0
   2d79a:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2d79c:	7b63      	ldrb	r3, [r4, #13]
   2d79e:	06db      	lsls	r3, r3, #27
   2d7a0:	d001      	beq.n	2d7a6 <k_poll_poller_cb+0x3e>
		return 0;
   2d7a2:	2000      	movs	r0, #0
}
   2d7a4:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   2d7a6:	69a5      	ldr	r5, [r4, #24]
   2d7a8:	2d00      	cmp	r5, #0
   2d7aa:	d1fa      	bne.n	2d7a2 <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   2d7ac:	4620      	mov	r0, r4
   2d7ae:	f7ff fdec 	bl	2d38a <z_ready_thread>
	return 0;
   2d7b2:	e7f6      	b.n	2d7a2 <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   2d7b4:	f06f 000a 	mvn.w	r0, #10
   2d7b8:	e7f4      	b.n	2d7a4 <k_poll_poller_cb+0x3c>

0002d7ba <add_event>:
{
   2d7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d7bc:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2d7be:	e9d0 2300 	ldrd	r2, r3, [r0]
   2d7c2:	4290      	cmp	r0, r2
   2d7c4:	4604      	mov	r4, r0
   2d7c6:	460d      	mov	r5, r1
   2d7c8:	d106      	bne.n	2d7d8 <add_event+0x1e>
	node->prev = list->tail;
   2d7ca:	6863      	ldr	r3, [r4, #4]
   2d7cc:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2d7ce:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2d7d0:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2d7d2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2d7d4:	6065      	str	r5, [r4, #4]
}
   2d7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2d7d8:	2b00      	cmp	r3, #0
   2d7da:	d0f6      	beq.n	2d7ca <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   2d7dc:	689b      	ldr	r3, [r3, #8]
   2d7de:	6879      	ldr	r1, [r7, #4]
   2d7e0:	6858      	ldr	r0, [r3, #4]
   2d7e2:	f7ff fd8b 	bl	2d2fc <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2d7e6:	2800      	cmp	r0, #0
   2d7e8:	d1ef      	bne.n	2d7ca <add_event+0x10>
	return list->head == list;
   2d7ea:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d7ec:	42b4      	cmp	r4, r6
   2d7ee:	d0ec      	beq.n	2d7ca <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2d7f0:	2e00      	cmp	r6, #0
   2d7f2:	d0ea      	beq.n	2d7ca <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   2d7f4:	68b3      	ldr	r3, [r6, #8]
   2d7f6:	6878      	ldr	r0, [r7, #4]
   2d7f8:	6859      	ldr	r1, [r3, #4]
   2d7fa:	f7ff fd7f 	bl	2d2fc <z_is_t1_higher_prio_than_t2>
   2d7fe:	b128      	cbz	r0, 2d80c <add_event+0x52>
	node->prev = successor->prev;
   2d800:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2d802:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2d806:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2d808:	6075      	str	r5, [r6, #4]
			return;
   2d80a:	e7e4      	b.n	2d7d6 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2d80c:	6863      	ldr	r3, [r4, #4]
   2d80e:	429e      	cmp	r6, r3
   2d810:	d0db      	beq.n	2d7ca <add_event+0x10>
   2d812:	6836      	ldr	r6, [r6, #0]
   2d814:	e7ec      	b.n	2d7f0 <add_event+0x36>

0002d816 <register_events>:
{
   2d816:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2d81a:	f04f 0a00 	mov.w	sl, #0
{
   2d81e:	460e      	mov	r6, r1
   2d820:	4614      	mov	r4, r2
   2d822:	461f      	mov	r7, r3
   2d824:	4683      	mov	fp, r0
	int events_registered = 0;
   2d826:	4655      	mov	r5, sl
	event->poller = NULL;
   2d828:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2d82a:	45b2      	cmp	sl, r6
   2d82c:	db02      	blt.n	2d834 <register_events+0x1e>
}
   2d82e:	4628      	mov	r0, r5
   2d830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d834:	f04f 0320 	mov.w	r3, #32
   2d838:	f3ef 8911 	mrs	r9, BASEPRI
   2d83c:	f383 8811 	msr	BASEPRI, r3
   2d840:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2d844:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2d848:	f002 020f 	and.w	r2, r2, #15
   2d84c:	2a02      	cmp	r2, #2
   2d84e:	d006      	beq.n	2d85e <register_events+0x48>
   2d850:	2a04      	cmp	r2, #4
   2d852:	d008      	beq.n	2d866 <register_events+0x50>
   2d854:	2a01      	cmp	r2, #1
   2d856:	d120      	bne.n	2d89a <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2d858:	f8db 3010 	ldr.w	r3, [fp, #16]
   2d85c:	e001      	b.n	2d862 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   2d85e:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   2d862:	689b      	ldr	r3, [r3, #8]
   2d864:	e002      	b.n	2d86c <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2d866:	f8db 3010 	ldr.w	r3, [fp, #16]
   2d86a:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   2d86c:	b1ab      	cbz	r3, 2d89a <register_events+0x84>
	event->state |= state;
   2d86e:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   2d872:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2d876:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2d87a:	430a      	orrs	r2, r1
   2d87c:	f362 3310 	bfi	r3, r2, #12, #5
   2d880:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2d884:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2d888:	f389 8811 	msr	BASEPRI, r9
   2d88c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2d890:	f10a 0a01 	add.w	sl, sl, #1
   2d894:	f10b 0b14 	add.w	fp, fp, #20
   2d898:	e7c7      	b.n	2d82a <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2d89a:	2f00      	cmp	r7, #0
   2d89c:	d1f4      	bne.n	2d888 <register_events+0x72>
   2d89e:	7823      	ldrb	r3, [r4, #0]
   2d8a0:	2b00      	cmp	r3, #0
   2d8a2:	d0f1      	beq.n	2d888 <register_events+0x72>
	switch (event->type) {
   2d8a4:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2d8a8:	f003 030f 	and.w	r3, r3, #15
   2d8ac:	2b02      	cmp	r3, #2
   2d8ae:	d008      	beq.n	2d8c2 <register_events+0xac>
   2d8b0:	2b04      	cmp	r3, #4
   2d8b2:	d006      	beq.n	2d8c2 <register_events+0xac>
   2d8b4:	2b01      	cmp	r3, #1
   2d8b6:	d10b      	bne.n	2d8d0 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2d8b8:	f8db 0010 	ldr.w	r0, [fp, #16]
   2d8bc:	4622      	mov	r2, r4
   2d8be:	4659      	mov	r1, fp
   2d8c0:	e004      	b.n	2d8cc <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   2d8c2:	f8db 0010 	ldr.w	r0, [fp, #16]
   2d8c6:	4622      	mov	r2, r4
   2d8c8:	4659      	mov	r1, fp
   2d8ca:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2d8cc:	f7ff ff75 	bl	2d7ba <add_event>
	event->poller = poller;
   2d8d0:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   2d8d4:	3501      	adds	r5, #1
   2d8d6:	e7d7      	b.n	2d888 <register_events+0x72>

0002d8d8 <k_poll_event_init>:
{
   2d8d8:	b510      	push	{r4, lr}
	event->type = type;
   2d8da:	0452      	lsls	r2, r2, #17
   2d8dc:	0209      	lsls	r1, r1, #8
   2d8de:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   2d8e2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   2d8e6:	430a      	orrs	r2, r1
   2d8e8:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2d8ea:	2400      	movs	r4, #0
	event->type = type;
   2d8ec:	430a      	orrs	r2, r1
	event->obj = obj;
   2d8ee:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2d8f2:	6084      	str	r4, [r0, #8]
}
   2d8f4:	bd10      	pop	{r4, pc}

0002d8f6 <z_handle_obj_poll_events>:
{
   2d8f6:	4603      	mov	r3, r0
	return list->head == list;
   2d8f8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2d8fa:	4283      	cmp	r3, r0
   2d8fc:	d008      	beq.n	2d910 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2d8fe:	e9d0 3200 	ldrd	r3, r2, [r0]
   2d902:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2d904:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d906:	2300      	movs	r3, #0
	node->prev = NULL;
   2d908:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2d90c:	f7ff bf11 	b.w	2d732 <signal_poll_event>
}
   2d910:	4770      	bx	lr

0002d912 <k_mem_pool_malloc>:
{
   2d912:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2d914:	2408      	movs	r4, #8
   2d916:	190a      	adds	r2, r1, r4
   2d918:	d208      	bcs.n	2d92c <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   2d91a:	2600      	movs	r6, #0
   2d91c:	2700      	movs	r7, #0
   2d91e:	e9cd 6700 	strd	r6, r7, [sp]
   2d922:	eb0d 0104 	add.w	r1, sp, r4
   2d926:	f7ff fbf8 	bl	2d11a <k_mem_pool_alloc>
   2d92a:	b110      	cbz	r0, 2d932 <k_mem_pool_malloc+0x20>
		return NULL;
   2d92c:	2000      	movs	r0, #0
}
   2d92e:	b004      	add	sp, #16
   2d930:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   2d932:	9802      	ldr	r0, [sp, #8]
   2d934:	4622      	mov	r2, r4
   2d936:	a902      	add	r1, sp, #8
   2d938:	f7f9 f833 	bl	269a2 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   2d93c:	9802      	ldr	r0, [sp, #8]
   2d93e:	3008      	adds	r0, #8
   2d940:	e7f5      	b.n	2d92e <k_mem_pool_malloc+0x1c>

0002d942 <k_free>:
	if (ptr != NULL) {
   2d942:	b110      	cbz	r0, 2d94a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2d944:	3808      	subs	r0, #8
   2d946:	f7ff bc01 	b.w	2d14c <k_mem_pool_free_id>
}
   2d94a:	4770      	bx	lr

0002d94c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2d94c:	4770      	bx	lr
